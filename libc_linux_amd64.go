// Code generated by 'ccgo -ffreestanding -D_XOPEN_SOURCE=700 -I./arch/x86_64 -I./arch/generic -Iobj/src/internal -I./src/internal -Iobj/include -I./include -D__typeof=typeof --ccgo-import os,runtime/debug,sync/atomic,syscall --ccgo-pkg-name crt -o ../libc_linux_amd64.go ccgo.c lib/libc.a', DO NOT EDIT.

// +build linux,amd64

package crt

import (
	"math"
	"os"
	"runtime/debug"
	"sync/atomic"
	"syscall"
	"unsafe"
)

const null = uintptr(0)

var _ = math.Pi
var _ = unsafe.Pointer(null)

// linking ccgo.o

// X__builtin_va_list_header_instance T__builtin_va_list_header = stru...truct{Fsize int32;Fdata int8;};}, escapes: true, builtin.h:47:26
var X__builtin_va_list_header_instance = bss + 0

// X__init_array_start *func(TLS), escapes: true, ccgo.c:9:6
var X__init_array_start = bss + 16

// X__fini_array_start *func(TLS), escapes: true, ccgo.c:9:43
var X__fini_array_start = bss + 24

// X_init is defined at ccgo.c:17:6
func X_init(tls TLS) {
}

// X_fini is defined at ccgo.c:19:6
func X_fini(tls TLS) {
}

// X__syscall is defined at ccgo.c:21:6
func X__syscall(tls TLS, _n int64, _a1 int64, _a2 int64, _a3 int64, _a4 int64, _a5 int64, _a6 int64) (r int64) {
	var _err int32

	if !checkSyscall(_n) {
		return 0 // ignore
	}
	x, y, err := syscall.Syscall6(uintptr(_n), uintptr(_a1), uintptr(_a2), uintptr(_a3), uintptr(_a4), uintptr(_a5), uintptr(_a6))
	_err = int32(err)
	r = long(x)
	_ = y

	if _err == 0 {
		goto _1
	}

	*(*int32)(unsafe.Pointer(X__errno_location(tls))) = _err
	return int64(-_err)

_1:
	return r
}

// X__ccgo_arg is defined at ccgo.c:40:6
func X__ccgo_arg(tls TLS, _i int32) (r uintptr /* *int8 */) {
	return MustCString(os.Args[_i])
	return r
}

// X__ccgo_env is defined at ccgo.c:41:6
func X__ccgo_env(tls TLS, _i int32) (r uintptr /* *int8 */) {
	return MustCString(env[_i])
	return r
}

// X__ccgo_argc is defined at ccgo.c:42:6
func X__ccgo_argc(tls TLS) (r int32) {
	return int32(len(os.Args))
	return r
}

// X__ccgo_envc is defined at ccgo.c:43:6
func X__ccgo_envc(tls TLS) (r int32) {
	return int32(len(env))
	return r
}

// X__ccgo_main_tls Tpthread_t = *S__pthread, escapes: true, ccgo.c:44:11
var X__ccgo_main_tls = bss + 32

// X_DYNAMIC [1]uint64, escapes: true, ccgo.c:45:8
var X_DYNAMIC = bss + 40

// Xdlsym is defined at ccgo.c:50:7
func Xdlsym(tls TLS, _ uintptr /* *void */, _ uintptr /* *int8 */) (r uintptr /* *void */) {
	X__assert_fail(tls, ts+0 /* "TODO(ccgo)" */, ts+12 /* "ccgo.c" */, int32(51), x460__func__)
	return r
}

// X__builtin_trap is defined at ccgo.c:54:6
func X__builtin_trap(tls TLS) {
	Xabort(tls)
}

// X__restore_rt is defined at ccgo.c:58:6
func X__restore_rt(tls TLS) {
	X__syscall(tls, int64(15), int64(0), int64(0), int64(0), int64(0), int64(0), int64(0))
}

// X__syscall_cp_asm is defined at ccgo.c:66:6
func X__syscall_cp_asm(tls TLS, _p uintptr /* *int32 */, _n int64, _a1 int64, _a2 int64, _a3 int64, _a4 int64, _a5 int64, _a6 int64) (r int64) {
	if *(*int32)(unsafe.Pointer(_p)) == 0 {
		goto _1
	}

	return X__cancel(tls)

_1:
	return x__syscall6(tls, _n, _a1, _a2, _a3, _a4, _a5, _a6)
}

type T__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type T__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type Tsize_t = uint64

type Tuint64_t = uint64

// x__bswap_64 is defined at byteswap.h:17:26
func x__bswap_64(tls TLS, ___x uint64) (r uint64) {
	return (uint64(x__bswap_32(tls, uint32(___x)))+uint64(0))<<(uint(32)%64) | uint64(x__bswap_32(tls, uint32(___x>>(uint(32)%64))))
}

// x2__func__ [6]int8, escapes: true, ccgo.c:50:56
var x460__func__ = ds + 0

type Tsyscall_arg_t = int64

// x__syscall6 is defined at syscall_arch.h:63:22
func x__syscall6(tls TLS, _n int64, _a1 int64, _a2 int64, _a3 int64, _a4 int64, _a5 int64, _a6 int64) (r int64) {
	return X__syscall(tls, _n, _a1, _a2, _a3, _a4, _a5, _a6)
}

// x__bswap_32 is defined at byteswap.h:12:26
func x__bswap_32(tls TLS, ___x uint32) (r uint32) {
	return ___x>>(uint(24)%32) | ___x>>(uint(8)%32)&uint32(0xff00) | ___x<<(uint(8)%32)&uint32(0xff0000) | ___x<<(uint(24)%32)
}

type Tuint32_t = uint32

type S__pthread struct{ uintptr }

// linking aio.o

// X__aio_fut int32, escapes: true, aio.c:72:14
var X__aio_fut = bss + 48

// Xaio_read is defined at aio.c:303:5
func Xaio_read(tls TLS, _cb uintptr /* *Saiocb */) (r int32) {
	return xsubmit(tls, _cb, int32(0))
}

// Xaio_write is defined at aio.c:308:5
func Xaio_write(tls TLS, _cb uintptr /* *Saiocb */) (r int32) {
	return xsubmit(tls, _cb, int32(1))
}

// Xaio_fsync is defined at aio.c:313:5
func Xaio_fsync(tls TLS, _op int32, _cb uintptr /* *Saiocb */) (r int32) {
	if _op == int32(04010000) || _op == int32(010000) {
		goto _1
	}

	*(*int32)(unsafe.Pointer(X__errno_location(tls))) = int32(22)
	return int32(-1)

_1:
	return xsubmit(tls, _cb, _op)
}

// Xaio_return is defined at aio.c:322:9
func Xaio_return(tls TLS, _cb uintptr /* *Saiocb */) (r int64) {
	return *(*int64)(unsafe.Pointer(_cb + 120))
}

// Xaio_error is defined at aio.c:327:5
func Xaio_error(tls TLS, _cb uintptr /* *Saiocb */) (r int32) {
	xa_barrier(tls)
	return *(*int32)(unsafe.Pointer(_cb + 112)) & int32(0x7fffffff)
}

func set461(p *uintptr, v uintptr) uintptr { *p = v; return v }

// Xaio_cancel is defined at aio.c:333:5
func Xaio_cancel(tls TLS, _fd int32, _cb uintptr /* *Saiocb */) (r int32) {
	esc := MustMalloc(256)
	var (
		_allmask  = esc       // *Tsigset_t = struct{F__bits [16]uint64;}
		_origmask = esc + 128 // *Tsigset_t = struct{F__bits [16]uint64;}
		_ret      int32
		_p        uintptr // *Saio_thread
		_q        uintptr // *Saio_queue
	)
	defer Free(esc)
	_ret = int32(2)
	if _cb == 0 || _fd == *(*int32)(unsafe.Pointer(_cb)) {
		goto _1
	}

	*(*int32)(unsafe.Pointer(X__errno_location(tls))) = int32(22)
	return int32(-1)

_1:
	Xsigfillset(tls, _allmask)
	Xpthread_sigmask(tls, int32(0), _allmask, _origmask)
	if set461(&_q, x__aio_get_queue(tls, _fd, int32(0))) != 0 {
		goto _2
	}

	if Xfcntl(tls, _fd, int32(1)) >= int32(0) {
		goto _3
	}

	_ret = int32(-1)
_3:
	goto ldone

_2:
	_p = *(*uintptr)(unsafe.Pointer(_q + 112))
_4:
	if _p == 0 {
		goto _6
	}

	if _cb == 0 || _cb == *(*uintptr)(unsafe.Pointer(_p + 8)) {
		goto _7
	}

	goto _5

_7:
	if xa_cas(tls, _p+40, int32(1), int32(-1)) == 0 {
		goto _8
	}

	Xpthread_cancel(tls, *(*uintptr)(unsafe.Pointer(_p)))
	X__wait(tls, _p+40, null, int32(-1), int32(1))
	if *(*int32)(unsafe.Pointer(_p + 44)) != int32(125) {
		goto _9
	}

	_ret = int32(0)
_9:
_8:
_5:
	_p = *(*uintptr)(unsafe.Pointer(_p + 16))
	goto _4

_6:
	Xpthread_mutex_unlock(tls, _q+24)
	goto ldone
ldone:
	Xpthread_sigmask(tls, int32(2), _origmask, null)
	return _ret
}

// X__aio_close is defined at aio.c:370:5
func X__aio_close(tls TLS, _fd int32) (r int32) {
	xa_barrier(tls)
	if *(*int32)(unsafe.Pointer(xaio_fd_cnt)) == 0 {
		goto _1
	}

	Xaio_cancel(tls, _fd, null)
_1:
	return _fd
}

type t1__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t1__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type Saiocb = struct {
	Faio_fildes     int32
	Faio_lio_opcode int32
	Faio_reqprio    int32
	Faio_buf        uintptr // *void
	Faio_nbytes     uint64
	Faio_sigevent   Ssigevent
	F__td           uintptr // *void
	F__lock         [2]int32
	F__err          int32
	F__ret          int64
	Faio_offset     int64
	F__next         uintptr // *void
	F__prev         uintptr // *void
	F__dummy4       [16]int8
}

func fp462(f func(TLS, uintptr) uintptr) uintptr { return *(*uintptr)(unsafe.Pointer(&f)) }

// xsubmit is defined at aio.c:263:12
func xsubmit(tls TLS, _cb uintptr /* *Saiocb */, _op int32) (r int32) {
	esc := MustMalloc(384)
	var (
		_ret      int32
		_a        = esc       // *Tpthread_attr_t = struct{F__u st...[7]uint64;F int64; _ [48]byte};}
		_allmask  = esc + 64  // *Tsigset_t = struct{F__bits [16]uint64;}
		_origmask = esc + 192 // *Tsigset_t = struct{F__bits [16]uint64;}
		_td       = esc + 320 // *Tpthread_t = *S__pthread
		_args     = esc + 336 // *Saio_args
	)
	defer Free(esc)
	_ret = int32(0)
	*(*Saio_args)(unsafe.Pointer(_args)) = Saio_args{
		Fcb: _cb,
		Fop: _op,
	}
	Xsem_init(tls, _args+16, int32(0), uint32(0))
	if *(*int32)(unsafe.Pointer((_cb + 32) + 12)) != int32(2) {
		goto _1
	}

	if *(*uintptr)(unsafe.Pointer((_cb + 32) + 24)) == 0 {
		goto _3
	}

	*(*struct {
		F__u struct {
			F__i  [0][14]int32
			F__vi [0][14]int32
			F__s  [0][7]uint64
			F     int64
			_     [48]byte
		}
	})(unsafe.Pointer(_a)) = *(*struct {
		F__u struct {
			F__i  [0][14]int32
			F__vi [0][14]int32
			F__s  [0][7]uint64
			F     int64
			_     [48]byte
		}
	})(unsafe.Pointer(*(*uintptr)(unsafe.Pointer((_cb + 32) + 24))))
	goto _4

_3:
	Xpthread_attr_init(tls, _a)
_4:
	goto _2

_1:
	Xpthread_attr_init(tls, _a)
	Xpthread_attr_setstacksize(tls, _a, uint64(2048))
	Xpthread_attr_setguardsize(tls, _a, uint64(0))
_2:
	Xpthread_attr_setdetachstate(tls, _a, int32(1))
	Xsigfillset(tls, _allmask)
	Xpthread_sigmask(tls, int32(0), _allmask, _origmask)
	*(*int32)(unsafe.Pointer(_cb + 112)) = int32(115)
	if Xpthread_create(tls, _td, _a, fp462(xio_thread_func), _args) == 0 {
		goto _5
	}

	*(*int32)(unsafe.Pointer(X__errno_location(tls))) = int32(11)
	_ret = int32(-1)
_5:
	Xpthread_sigmask(tls, int32(2), _origmask, null)
	if _ret != 0 {
		goto _6
	}

_7:
	if Xsem_wait(tls, _args+16) == 0 {
		goto _8
	}

	goto _7

_8:
	if *(*int32)(unsafe.Pointer(_args + 12)) == 0 {
		goto _9
	}

	*(*int32)(unsafe.Pointer(X__errno_location(tls))) = *(*int32)(unsafe.Pointer(_args + 12))
	_ret = int32(-1)
_9:
_6:
	return _ret
}

type Tssize_t = int64

// xa_barrier is defined at atomic_arch.h:107:20
func xa_barrier(tls TLS) {
	aBarier()
}

type Saio_thread = struct {
	Ftd      uintptr // Tpthread_t = *S__pthread
	Fcb      uintptr // *Saiocb
	Fnext    uintptr // *Saio_thread
	Fprev    uintptr // *Saio_thread
	Fq       uintptr // *Saio_queue
	Frunning int32
	Ferr     int32
	Fop      int32
	Fret     int64
}

type Saio_queue = struct {
	Ffd       int32
	Fseekable int32
	Fappend   int32
	Fref      int32
	Finit     int32
	Flock     struct {
		F__u struct {
			F__i  [0][10]int32
			F__vi [0][10]int32
			F__p  [0][5]uintptr
			F     int64
			_     [32]byte
		}
	}
	Fcond struct {
		F__u struct {
			F__i  [0][12]int32
			F__vi [0][12]int32
			F__p  [0][6]uintptr
			F     int64
			_     [40]byte
		}
	}
	Fhead uintptr // *Saio_thread
}

// x__aio_get_queue is defined at aio.c:74:25
func x__aio_get_queue(tls TLS, _fd int32, _need int32) (r uintptr /* *Saio_queue */) {
	var (
		_a int32
		_b uint8
		_c uint8
		_d uint8
		_q uintptr // *Saio_queue
	)
	if _fd >= int32(0) {
		goto _1
	}

	return null

_1:
	_a = _fd >> (uint(24) % 32)
	_b = uint8(_fd >> (uint(16) % 32))
	_c = uint8(_fd >> (uint(8) % 32))
	_d = uint8(_fd)
	_q = 0
	Xpthread_rwlock_rdlock(tls, xmaplock)
	if xmap != 0 && *(*uintptr)(unsafe.Pointer(xmap + 8*uintptr(_a))) != 0 && *(*uintptr)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(xmap + 8*uintptr(_a))) + 8*uintptr(_b))) != 0 && *(*uintptr)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(xmap + 8*uintptr(_a))) + 8*uintptr(_b))) + 8*uintptr(_c))) != 0 && set461(&_q, *(*uintptr)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(xmap + 8*uintptr(_a))) + 8*uintptr(_b))) + 8*uintptr(_c))) + 8*uintptr(_d)))) != 0 || _need == 0 {
		goto _2
	}

	Xpthread_rwlock_unlock(tls, xmaplock)
	Xpthread_rwlock_wrlock(tls, xmaplock)
	if xmap != 0 {
		goto _3
	}

	xmap = Xcalloc(tls, uint64(8), uint64(128))
_3:
	if xmap != 0 {
		goto _4
	}

	goto lout

_4:
	if *(*uintptr)(unsafe.Pointer(xmap + 8*uintptr(_a))) != 0 {
		goto _5
	}

	*(*uintptr)(unsafe.Pointer(xmap + 8*uintptr(_a))) = Xcalloc(tls, uint64(8), uint64(256))
_5:
	if *(*uintptr)(unsafe.Pointer(xmap + 8*uintptr(_a))) != 0 {
		goto _6
	}

	goto lout

_6:
	if *(*uintptr)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(xmap + 8*uintptr(_a))) + 8*uintptr(_b))) != 0 {
		goto _7
	}

	*(*uintptr)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(xmap + 8*uintptr(_a))) + 8*uintptr(_b))) = Xcalloc(tls, uint64(8), uint64(256))
_7:
	if *(*uintptr)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(xmap + 8*uintptr(_a))) + 8*uintptr(_b))) != 0 {
		goto _8
	}

	goto lout

_8:
	if *(*uintptr)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(xmap + 8*uintptr(_a))) + 8*uintptr(_b))) + 8*uintptr(_c))) != 0 {
		goto _9
	}

	*(*uintptr)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(xmap + 8*uintptr(_a))) + 8*uintptr(_b))) + 8*uintptr(_c))) = Xcalloc(tls, uint64(8), uint64(256))
_9:
	if *(*uintptr)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(xmap + 8*uintptr(_a))) + 8*uintptr(_b))) + 8*uintptr(_c))) != 0 {
		goto _10
	}

	goto lout

_10:
	if set461(&_q, *(*uintptr)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(xmap + 8*uintptr(_a))) + 8*uintptr(_b))) + 8*uintptr(_c))) + 8*uintptr(_d)))) != 0 {
		goto _11
	}

	*(*uintptr)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(xmap + 8*uintptr(_a))) + 8*uintptr(_b))) + 8*uintptr(_c))) + 8*uintptr(_d))) = set461(&_q, Xcalloc(tls, uint64(120), uint64(1)))
	if _q == 0 {
		goto _12
	}

	*(*int32)(unsafe.Pointer(_q)) = _fd
	Xpthread_mutex_init(tls, _q+24, null)
	Xpthread_cond_init(tls, _q+64, null)
	xa_inc(tls, xaio_fd_cnt)
_12:
_11:
_2:
	if _q == 0 {
		goto _13
	}

	Xpthread_mutex_lock(tls, _q+24)
_13:
	goto lout
lout:
	Xpthread_rwlock_unlock(tls, xmaplock)
	return _q
}

// xa_cas is defined at atomic_arch.h:4:19
func xa_cas(tls TLS, _p uintptr /* *int32 */, _t int32, _s int32) (r int32) {
	return a_cas(_p, _t, _s)
	return r
}

// xaio_fd_cnt int32, escapes: true, aio.c:71:21
var xaio_fd_cnt = bss + 56

type t1size_t = uint64

type Ssigevent = struct {
	Fsigev_value             Usigval
	Fsigev_signo             int32
	Fsigev_notify            int32
	Fsigev_notify_function   uintptr // *func(TLS, Usigval)
	Fsigev_notify_attributes uintptr // *Tpthread_attr_t = struct{F__u s...[7]uint64;F int64; _ [48]byte};}
	F__pad                   [32]int8
}

type Toff_t = int64

type s1__pthread = struct {
	Fself          uintptr // *S__pthread
	Fdtv           uintptr // **void
	Funused1       uintptr // *void
	Funused2       uintptr // *void
	Fsysinfo       uint64
	Fcanary        uint64
	Fcanary2       uint64
	Ftid           int32
	Ferrno_val     int32
	Fdetach_state  int32
	Fcancel        int32
	Fcanceldisable uint8
	Fcancelasync   uint8
	F74            uint8
	Fmap_base      uintptr // *uint8
	Fmap_size      uint64
	Fstack         uintptr // *void
	Fstack_size    uint64
	Fguard_size    uint64
	Fstart_arg     uintptr // *void
	Fstart         uintptr // *func(TLS, uintptr) uintptr
	Fresult        uintptr // *void
	Fcancelbuf     uintptr // *S__ptcb
	Ftsd           uintptr // **void
	Frobust_list   struct {
		Fhead    uintptr
		Foff     int64
		Fpending uintptr
	}
	Ftimer_id      int32
	Flocale        uintptr // Tlocale_t = *S__locale_struct
	Fkilllock      [1]int32
	Fdlerror_buf   uintptr // *int8
	Fstdio_locks   uintptr // *void
	Fcanary_at_end uint64
	Fdtv_copy      uintptr // **void
}

type Saio_args = struct {
	Fcb  uintptr // *Saiocb
	Fop  int32
	Ferr int32
	Fsem struct{ F__val [8]int32 }
}

type Tpthread_attr_t = struct {
	F__u struct {
		F__i  [0][14]int32
		F__vi [0][14]int32
		F__s  [0][7]uint64
		F     int64
		_     [48]byte
	}
}

func fp463(f func(TLS, uintptr)) uintptr { return *(*uintptr)(unsafe.Pointer(&f)) }

// xio_thread_func is defined at aio.c:190:13
func xio_thread_func(tls TLS, _ctx uintptr /* *void */) (r uintptr /* *void */) {
	esc := MustMalloc(88)
	var (
		_at       = esc   // *Saio_thread
		_p        uintptr // *Saio_thread
		_args     uintptr // *Saio_args
		_cb       uintptr // *Saiocb
		_fd       int32
		_op       int32
		_buf      uintptr // *void
		_len      uint64
		_off      int64
		_q        uintptr // *Saio_queue
		_ret      int64
		_seekable int32
		___cb     = esc + 64 // *S__ptcb
	)
	defer Free(esc)
	_args = _ctx
	_cb = *(*uintptr)(unsafe.Pointer(_args))
	_fd = *(*int32)(unsafe.Pointer(_cb))
	_op = *(*int32)(unsafe.Pointer(_args + 8))
	_buf = *(*uintptr)(unsafe.Pointer(_cb + 16))
	_len = *(*uint64)(unsafe.Pointer(_cb + 24))
	_off = *(*int64)(unsafe.Pointer(_cb + 128))
	_q = x__aio_get_queue(tls, _fd, int32(1))
	*(*int32)(unsafe.Pointer(_args + 12)) = func() int32 {
		if _q != 0 {
			return int32(0)
		}
		return int32(11)
	}()
	Xsem_post(tls, _args+16)
	if _q != 0 {
		goto _1
	}

	return null

_1:
	*(*int32)(unsafe.Pointer(_at + 48)) = _op
	*(*int32)(unsafe.Pointer(_at + 40)) = int32(1)
	*(*int64)(unsafe.Pointer(_at + 56)) = int64(-1)
	*(*int32)(unsafe.Pointer(_at + 44)) = int32(125)
	*(*uintptr)(unsafe.Pointer(_at + 32)) = _q
	*(*uintptr)(unsafe.Pointer(_at)) = x__pthread_self(tls)
	*(*uintptr)(unsafe.Pointer(_at + 8)) = _cb
	*(*uintptr)(unsafe.Pointer(_at + 24)) = null
	if set461((*uintptr)(unsafe.Pointer(_at+16)), *(*uintptr)(unsafe.Pointer(_q + 112))) == 0 {
		goto _2
	}

	*(*uintptr)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_at + 16)) + 24)) = _at
_2:
	*(*uintptr)(unsafe.Pointer(_q + 112)) = _at
	*(*int32)(unsafe.Pointer(_q + 12))++
	if *(*int32)(unsafe.Pointer(_q + 16)) != 0 {
		goto _3
	}

	_seekable = bool2int(Xlseek(tls, _fd, int64(0), int32(1)) >= int64(0))
	*(*int32)(unsafe.Pointer(_q + 4)) = _seekable
	*(*int32)(unsafe.Pointer(_q + 8)) = bool2int((_seekable == 0) || (Xfcntl(tls, _fd, int32(3))&int32(02000) != 0))
	*(*int32)(unsafe.Pointer(_q + 16)) = int32(1)
_3:
	X_pthread_cleanup_push(tls, ___cb, fp463(xcleanup), _at)
	if _op == int32(0) || _op == int32(1) && *(*int32)(unsafe.Pointer(_q + 8)) == 0 {
		goto _5
	}

_6:
	_p = *(*uintptr)(unsafe.Pointer(_at + 16))
_9:
	if _p == 0 || *(*int32)(unsafe.Pointer(_p + 48)) == int32(1) {
		goto _11
	}

	_p = *(*uintptr)(unsafe.Pointer(_p + 16))
	goto _9

_11:
	if _p != 0 {
		goto _12
	}

	goto _8

_12:
	Xpthread_cond_wait(tls, _q+64, _q+24)
	goto _6

_8:
_5:
	Xpthread_mutex_unlock(tls, _q+24)
	switch _op {
	case int32(1):
		goto _14
	case int32(0):
		goto _15
	case int32(04010000):
		goto _16
	case int32(010000):
		goto _17
	}
	goto _13

_14:
	_ret = func() int64 {
		if *(*int32)(unsafe.Pointer(_q + 8)) != 0 {
			return Xwrite(tls, _fd, _buf, _len)
		}
		return Xpwrite(tls, _fd, _buf, _len, _off)
	}()
	goto _13

_15:
	_ret = func() int64 {
		if *(*int32)(unsafe.Pointer(_q + 4)) == 0 {
			return Xread(tls, _fd, _buf, _len)
		}
		return Xpread(tls, _fd, _buf, _len, _off)
	}()
	goto _13

_16:
	_ret = int64(Xfsync(tls, _fd))
	goto _13

_17:
	_ret = int64(Xfdatasync(tls, _fd))
	goto _13

_13:
	*(*int64)(unsafe.Pointer(_at + 56)) = _ret
	*(*int32)(unsafe.Pointer(_at + 44)) = func() int32 {
		if _ret < int64(0) {
			return *(*int32)(unsafe.Pointer(X__errno_location(tls)))
		}
		return int32(0)
	}()
	X_pthread_cleanup_pop(tls, ___cb, int32(1))
	return null
}

type Tpthread_mutex_t = struct {
	F__u struct {
		F__i  [0][10]int32
		F__vi [0][10]int32
		F__p  [0][5]uintptr
		F     int64
		_     [32]byte
	}
}

type Tpthread_cond_t = struct {
	F__u struct {
		F__i  [0][12]int32
		F__vi [0][12]int32
		F__p  [0][6]uintptr
		F     int64
		_     [40]byte
	}
}

// xmaplock Tpthread_rwlock_t = struct{F__u ...7]uintptr;F int64; _ [48]byte};}, escapes: true, aio.c:69:25
var xmaplock = bss + 64

// xmap *****Saio_queue, escapes: false, aio.c:70:25
var xmap uintptr

// xa_inc is defined at atomic_arch.h:80:20
func xa_inc(tls TLS, _p uintptr /* *int32 */) {
	a_inc(_p)
}

type Usigval = struct {
	Fsival_int [0]int32
	Fsival_ptr [0]uintptr // *void
	F          int64
}

type Tuintptr_t = uint64

type S__ptcb = struct {
	F__f    uintptr // *func(TLS, uintptr)
	F__x    uintptr // *void
	F__next uintptr // *S__ptcb
}

type S__locale_struct = struct{ Fcat [6]uintptr }

type Tsem_t = struct{ F__val [8]int32 }

// x__pthread_self is defined at pthread_arch.h:1:30
func x__pthread_self(tls TLS) (r uintptr /* *S__pthread */) {
	return uintptr(tls)
	return r
}

func fn464(p uintptr) func(TLS, Usigval) { return *(*func(TLS, Usigval))(unsafe.Pointer(&p)) }

// xcleanup is defined at aio.c:138:13
func xcleanup(tls TLS, _ctx uintptr /* *void */) {
	esc := MustMalloc(192)
	var (
		_at  uintptr    // *Saio_thread
		_q   uintptr    // *Saio_queue
		_cb  uintptr    // *Saiocb
		_sev = esc      // *Ssigevent
		_si  = esc + 64 // *Tsiginfo_t = struct{Fsi_signo in...uint32;};F int64; _ [104]byte};}
	)
	defer Free(esc)
	_at = _ctx
	_q = *(*uintptr)(unsafe.Pointer(_at + 32))
	_cb = *(*uintptr)(unsafe.Pointer(_at + 8))
	*(*Ssigevent)(unsafe.Pointer(_sev)) = *(*Ssigevent)(unsafe.Pointer(_cb + 32))
	*(*int64)(unsafe.Pointer(_cb + 120)) = *(*int64)(unsafe.Pointer(_at + 56))
	if xa_swap(tls, _at+40, int32(0)) >= int32(0) {
		goto _1
	}

	x__wake(tls, _at+40, int32(-1), int32(1))
_1:
	if xa_swap(tls, _cb+112, *(*int32)(unsafe.Pointer(_at + 44))) == int32(115) {
		goto _2
	}

	x__wake(tls, _cb+112, int32(-1), int32(1))
_2:
	if xa_swap(tls, X__aio_fut, int32(0)) == 0 {
		goto _3
	}

	x__wake(tls, X__aio_fut, int32(-1), int32(1))
_3:
	Xpthread_mutex_lock(tls, _q+24)
	if *(*uintptr)(unsafe.Pointer(_at + 16)) == 0 {
		goto _4
	}

	*(*uintptr)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_at + 16)) + 24)) = *(*uintptr)(unsafe.Pointer(_at + 24))
_4:
	if *(*uintptr)(unsafe.Pointer(_at + 24)) == 0 {
		goto _5
	}

	*(*uintptr)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_at + 24)) + 16)) = *(*uintptr)(unsafe.Pointer(_at + 16))
	goto _6

_5:
	*(*uintptr)(unsafe.Pointer(_q + 112)) = *(*uintptr)(unsafe.Pointer(_at + 16))
_6:
	Xpthread_cond_broadcast(tls, _q+64)
	x__aio_unref_queue(tls, _q)
	if *(*int32)(unsafe.Pointer(_sev + 12)) != int32(0) {
		goto _7
	}

	X__assert_fail(tls, ts+0 /* "TODO(ccgo)" */, ts+20 /* "src/aio/aio.c" */, int32(174), x465__func__)
	x__syscall3(tls, int64(129), int64(*(*int32)(unsafe.Pointer(_si + 16))), int64(*(*int32)(unsafe.Pointer(_si))), int64(_si))
_7:
	if *(*int32)(unsafe.Pointer(_sev + 12)) != int32(2) {
		goto _8
	}

	xa_store(tls, x__pthread_self(tls)+68, int32(0))
	fn464(*(*uintptr)(unsafe.Pointer(_sev + 16)))(tls, *(*Usigval)(unsafe.Pointer(_sev)))
_8:
}

// x12__func__ [8]int8, escapes: true, aio.c:139:1
var x465__func__ = ds + 8

type Tpid_t = int32

type Tuid_t = uint32

type Tclock_t = int64

// xa_swap is defined at atomic_arch.h:24:19
func xa_swap(tls TLS, _p uintptr /* *int32 */, _v int32) (r int32) {
	return atomic.SwapInt32((*int32)(unsafe.Pointer(_p)), _v)
	return r
}

// x__wake is defined at pthread_impl.h:154:20
func x__wake(tls TLS, _addr uintptr /* *void */, _cnt int32, _priv int32) {
	if _priv == 0 {
		goto _1
	}

	_priv = int32(128)
_1:
	if _cnt >= int32(0) {
		goto _2
	}

	_cnt = int32(0x7fffffff)
_2:
	if x__syscall3(tls, int64(202), int64(_addr), int64(int32(1)|_priv), int64(_cnt)) == int64(-38) {
		x__syscall3(tls, int64(202), int64(_addr), int64(1), int64(_cnt))
	}
}

// x__aio_unref_queue is defined at aio.c:108:13
func x__aio_unref_queue(tls TLS, _q uintptr /* *Saio_queue */) {
	var (
		_fd int32
		_a  int32
		_b  uint8
		_c  uint8
		_d  uint8
	)
	if *(*int32)(unsafe.Pointer(_q + 12)) <= int32(1) {
		goto _1
	}

	*(*int32)(unsafe.Pointer(_q + 12))--
	Xpthread_mutex_unlock(tls, _q+24)
	return

_1:
	Xpthread_mutex_unlock(tls, _q+24)
	Xpthread_rwlock_wrlock(tls, xmaplock)
	Xpthread_mutex_lock(tls, _q+24)
	if *(*int32)(unsafe.Pointer(_q + 12)) != int32(1) {
		goto _2
	}

	_fd = *(*int32)(unsafe.Pointer(_q))
	_a = _fd >> (uint(24) % 32)
	_b = uint8(_fd >> (uint(16) % 32))
	_c = uint8(_fd >> (uint(8) % 32))
	_d = uint8(_fd)
	*(*uintptr)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(xmap + 8*uintptr(_a))) + 8*uintptr(_b))) + 8*uintptr(_c))) + 8*uintptr(_d))) = null
	xa_dec(tls, xaio_fd_cnt)
	Xpthread_rwlock_unlock(tls, xmaplock)
	Xpthread_mutex_unlock(tls, _q+24)
	Xfree(tls, _q)
	goto _3

_2:
	*(*int32)(unsafe.Pointer(_q + 12))--
	Xpthread_rwlock_unlock(tls, xmaplock)
	Xpthread_mutex_unlock(tls, _q+24)
_3:
}

// x__syscall3 is defined at syscall_arch.h:33:22
func x__syscall3(tls TLS, _n int64, _a1 int64, _a2 int64, _a3 int64) (r int64) {
	return X__syscall(tls, _n, _a1, _a2, _a3, int64(0), int64(0), int64(0))
}

// xa_store is defined at atomic_arch.h:98:20
func xa_store(tls TLS, _p uintptr /* *int32 */, _x int32) {
	X__assert_fail(tls, ts+0 /* "TODO(ccgo)" */, ts+36 /* "arch/x86_64/atom..." */, int32(100), x466__func__)
}

// xa_dec is defined at atomic_arch.h:89:20
func xa_dec(tls TLS, _p uintptr /* *int32 */) {
	a_dec(_p)
}

// x19__func__ [8]int8, escapes: true, atomic_arch.h:99:1
var x466__func__ = ds + 16

// linking aio_suspend.o

func add467(p *int64, v int64) (r int64) { r = *p + v; *p = r; return r }

// Xaio_suspend is defined at aio_suspend.c:10:5
func Xaio_suspend(tls TLS, _cbs uintptr /* uintptr */, _cnt int32, _ts uintptr /* *Stimespec */) (r int32) {
	esc := MustMalloc(20)
	var (
		_i         int32
		_tid       int32
		_ret       int32
		_expect    int32
		_at        = esc      // *Stimespec
		_dummy_fut = esc + 16 // *int32
		_pfut      uintptr    // *int32
		_nzcnt     int32
		_cb        uintptr // *Saiocb
	)
	defer Free(esc)
	_tid = int32(0)
	_expect = int32(0)
	_nzcnt = int32(0)
	_cb = 0
	Xpthread_testcancel(tls)
	if _cnt >= int32(0) {
		goto _1
	}

	*(*int32)(unsafe.Pointer(X__errno_location(tls))) = int32(22)
	return int32(-1)

_1:
	_i = int32(0)
_2:
	if _i >= _cnt {
		goto _4
	}

	if *(*uintptr)(unsafe.Pointer(_cbs + 8*uintptr(_i))) == 0 {
		goto _5
	}

	if Xaio_error(tls, *(*uintptr)(unsafe.Pointer(_cbs + 8*uintptr(_i)))) == int32(115) {
		goto _6
	}

	return int32(0)

_6:
	_nzcnt++
	_cb = *(*uintptr)(unsafe.Pointer(_cbs + 8*uintptr(_i)))
_5:
	_i++
	goto _2

_4:
	if _ts == 0 {
		goto _7
	}

	Xclock_gettime(tls, int32(1), _at)
	{
		p := (*int64)(unsafe.Pointer(_at))
		*p = *p + *(*int64)(unsafe.Pointer(_ts))
	}
	if add467((*int64)(unsafe.Pointer(_at+8)), *(*int64)(unsafe.Pointer(_ts + 8))) < int64(1000000000) {
		goto _8
	}

	{
		p := (*int64)(unsafe.Pointer(_at + 8))
		*p = *p - int64(1000000000)
	}
	*(*int64)(unsafe.Pointer(_at))++
_8:
_7:
_9:
	_i = int32(0)
_12:
	if _i >= _cnt {
		goto _14
	}

	if *(*uintptr)(unsafe.Pointer(_cbs + 8*uintptr(_i))) == 0 || Xaio_error(tls, *(*uintptr)(unsafe.Pointer(_cbs + 8*uintptr(_i)))) == int32(115) {
		goto _15
	}

	return int32(0)

_15:
	_i++
	goto _12

_14:
	switch _nzcnt {
	case int32(0):
		goto _17
	case int32(1):
		goto _18
	default:
		goto _19
	}
_17:
	_pfut = _dummy_fut
	goto _16

_18:
	_pfut = _cb + 112
	_expect = int32(-2147483533)
	x1a_cas(tls, _pfut, int32(115), _expect)
	goto _16

_19:
	_pfut = X__aio_fut
	if _tid != 0 {
		goto _20
	}

	_tid = *(*int32)(unsafe.Pointer(x1__pthread_self(tls) + 56))
_20:
	_expect = x1a_cas(tls, _pfut, int32(0), _tid)
	if _expect != 0 {
		goto _21
	}

	_expect = _tid
_21:
	_i = int32(0)
_22:
	if _i >= _cnt {
		goto _24
	}

	if *(*uintptr)(unsafe.Pointer(_cbs + 8*uintptr(_i))) == 0 || Xaio_error(tls, *(*uintptr)(unsafe.Pointer(_cbs + 8*uintptr(_i)))) == int32(115) {
		goto _25
	}

	return int32(0)

_25:
	_i++
	goto _22

_24:
	goto _16

_16:
	_ret = X__timedwait_cp(tls, _pfut, _expect, int32(1), func() uintptr {
		if _ts != 0 {
			return _at
		}
		return null
	}(), int32(1))
	switch _ret {
	case int32(110):
		goto _27
	case int32(125):
		goto _28
	case int32(4):
		goto _29
	}
	goto _26

_27:
	_ret = int32(11)
_28:
_29:
	*(*int32)(unsafe.Pointer(X__errno_location(tls))) = _ret
	return int32(-1)

_26:
	goto _9
	return r
}

type t2__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t2__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type Stimespec = struct {
	Ftv_sec  int64
	Ftv_nsec int64
}

type s1aiocb = struct {
	Faio_fildes     int32
	Faio_lio_opcode int32
	Faio_reqprio    int32
	Faio_buf        uintptr // *void
	Faio_nbytes     uint64
	Faio_sigevent   s1sigevent
	F__td           uintptr // *void
	F__lock         [2]int32
	F__err          int32
	F__ret          int64
	Faio_offset     int64
	F__next         uintptr // *void
	F__prev         uintptr // *void
	F__dummy4       [16]int8
}

type Ttime_t = int64

// xa_cas is defined at atomic_arch.h:4:19
func x1a_cas(tls TLS, _p uintptr /* *int32 */, _t int32, _s int32) (r int32) {
	return a_cas(_p, _t, _s)
	return r
}

// x__pthread_self is defined at pthread_arch.h:1:30
func x1__pthread_self(tls TLS) (r uintptr /* *S__pthread */) {
	return uintptr(tls)
	return r
}

type t2size_t = uint64

type s1sigevent = struct {
	Fsigev_value             u1sigval
	Fsigev_signo             int32
	Fsigev_notify            int32
	Fsigev_notify_function   uintptr // *func(TLS, Usigval)
	Fsigev_notify_attributes uintptr // *Tpthread_attr_t = struct{F__u s...[7]uint64;F int64; _ [48]byte};}
	F__pad                   [32]int8
}

type t1ssize_t = int64

type t1off_t = int64

type Tclockid_t = int32

type s2__pthread = struct {
	Fself          uintptr // *S__pthread
	Fdtv           uintptr // **void
	Funused1       uintptr // *void
	Funused2       uintptr // *void
	Fsysinfo       uint64
	Fcanary        uint64
	Fcanary2       uint64
	Ftid           int32
	Ferrno_val     int32
	Fdetach_state  int32
	Fcancel        int32
	Fcanceldisable uint8
	Fcancelasync   uint8
	F74            uint8
	Fmap_base      uintptr // *uint8
	Fmap_size      uint64
	Fstack         uintptr // *void
	Fstack_size    uint64
	Fguard_size    uint64
	Fstart_arg     uintptr // *void
	Fstart         uintptr // *func(TLS, uintptr) uintptr
	Fresult        uintptr // *void
	Fcancelbuf     uintptr // *S__ptcb
	Ftsd           uintptr // **void
	Frobust_list   struct {
		Fhead    uintptr
		Foff     int64
		Fpending uintptr
	}
	Ftimer_id      int32
	Flocale        uintptr // Tlocale_t = *S__locale_struct
	Fkilllock      [1]int32
	Fdlerror_buf   uintptr // *int8
	Fstdio_locks   uintptr // *void
	Fcanary_at_end uint64
	Fdtv_copy      uintptr // **void
}

type u1sigval = struct {
	Fsival_int [0]int32
	Fsival_ptr [0]uintptr // *void
	F          int64
}

type t1uintptr_t = uint64

type s1__ptcb = struct {
	F__f    uintptr // *func(TLS, uintptr)
	F__x    uintptr // *void
	F__next uintptr // *S__ptcb
}

type s1__locale_struct = struct{ Fcat [6]uintptr }

// linking lio_listio.o

func set468(p *uintptr, v uintptr) uintptr { *p = v; return v }

func fp469(f func(TLS, uintptr) uintptr) uintptr { return *(*uintptr)(unsafe.Pointer(&f)) }

// Xlio_listio is defined at lio_listio.c:78:5
func Xlio_listio(tls TLS, _mode int32, _cbs uintptr /* **Saiocb */, _cnt int32, _sev uintptr /* *Ssigevent */) (r int32) {
	esc := MustMalloc(200)
	var (
		_i   int32
		_ret int32
		_st  uintptr     // *Slio_state
		_a   = esc       // *Tpthread_attr_t = struct{F__u st...[7]uint64;F int64; _ [48]byte};}
		_set = esc + 64  // *Tsigset_t = struct{F__bits [16]uint64;}
		_td  = esc + 192 // *Tpthread_t = *S__pthread
	)
	defer Free(esc)
	_st = 0
	if _cnt >= int32(0) {
		goto _1
	}

	*(*int32)(unsafe.Pointer(X__errno_location(tls))) = int32(22)
	return int32(-1)

_1:
	if _mode != int32(0) && (_sev == 0 || *(*int32)(unsafe.Pointer(_sev + 12)) == int32(1)) {
		goto _2
	}

	if set468(&_st, Xmalloc(tls, uint64(24)+uint64(_cnt)*uint64(8))) != 0 {
		goto _3
	}

	*(*int32)(unsafe.Pointer(X__errno_location(tls))) = int32(11)
	return int32(-1)

_3:
	*(*int32)(unsafe.Pointer(_st + 8)) = _cnt
	*(*uintptr)(unsafe.Pointer(_st)) = _sev
	Xmemcpy(tls, _st+16, _cbs, uint64(_cnt)*uint64(8))
_2:
	_i = int32(0)
_4:
	if _i >= _cnt {
		goto _6
	}

	if *(*uintptr)(unsafe.Pointer(_cbs + 8*uintptr(_i))) != 0 {
		goto _7
	}

	goto _5

_7:
	switch *(*int32)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_cbs + 8*uintptr(_i))) + 4)) {
	case int32(0):
		goto _9
	case int32(1):
		goto _10
	default:
		goto _11
	}
_9:
	_ret = Xaio_read(tls, *(*uintptr)(unsafe.Pointer(_cbs + 8*uintptr(_i))))
	goto _8

_10:
	_ret = Xaio_write(tls, *(*uintptr)(unsafe.Pointer(_cbs + 8*uintptr(_i))))
	goto _8

_11:
	goto _5

_8:
	if _ret == 0 {
		goto _12
	}

	Xfree(tls, _st)
	*(*int32)(unsafe.Pointer(X__errno_location(tls))) = int32(11)
	return int32(-1)

_12:
_5:
	_i++
	goto _4

_6:
	if _mode != int32(0) {
		goto _13
	}

	_ret = xlio_wait(tls, _st)
	Xfree(tls, _st)
	return _ret

_13:
	if _st == 0 {
		goto _14
	}

	if *(*int32)(unsafe.Pointer(_sev + 12)) != int32(2) {
		goto _15
	}

	if *(*uintptr)(unsafe.Pointer(_sev + 24)) == 0 {
		goto _17
	}

	*(*struct {
		F__u struct {
			F__i  [0][14]int32
			F__vi [0][14]int32
			F__s  [0][7]uint64
			F     int64
			_     [48]byte
		}
	})(unsafe.Pointer(_a)) = *(*struct {
		F__u struct {
			F__i  [0][14]int32
			F__vi [0][14]int32
			F__s  [0][7]uint64
			F     int64
			_     [48]byte
		}
	})(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_sev + 24))))
	goto _18

_17:
	Xpthread_attr_init(tls, _a)
_18:
	goto _16

_15:
	Xpthread_attr_init(tls, _a)
	Xpthread_attr_setstacksize(tls, _a, uint64(4096))
	Xpthread_attr_setguardsize(tls, _a, uint64(0))
_16:
	Xpthread_attr_setdetachstate(tls, _a, int32(1))
	Xsigfillset(tls, _set)
	Xpthread_sigmask(tls, int32(0), _set, _set)
	if Xpthread_create(tls, _td, _a, fp469(xwait_thread), _st) == 0 {
		goto _19
	}

	Xfree(tls, _st)
	*(*int32)(unsafe.Pointer(X__errno_location(tls))) = int32(11)
	return int32(-1)

_19:
	Xpthread_sigmask(tls, int32(2), _set, null)
_14:
	return int32(0)
}

type t3__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t3__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type s2aiocb = struct {
	Faio_fildes     int32
	Faio_lio_opcode int32
	Faio_reqprio    int32
	Faio_buf        uintptr // *void
	Faio_nbytes     uint64
	Faio_sigevent   s2sigevent
	F__td           uintptr // *void
	F__lock         [2]int32
	F__err          int32
	F__ret          int64
	Faio_offset     int64
	F__next         uintptr // *void
	F__prev         uintptr // *void
	F__dummy4       [16]int8
}

type s2sigevent = struct {
	Fsigev_value             u2sigval
	Fsigev_signo             int32
	Fsigev_notify            int32
	Fsigev_notify_function   uintptr // *func(TLS, Usigval)
	Fsigev_notify_attributes uintptr // *Tpthread_attr_t = struct{F__u s...[7]uint64;F int64; _ [48]byte};}
	F__pad                   [32]int8
}

type Slio_state = struct {
	Fsev uintptr // *Ssigevent
	Fcnt int32
	Fcbs uintptr
}

type s3__pthread = struct {
	Fself          uintptr // *S__pthread
	Fdtv           uintptr // **void
	Funused1       uintptr // *void
	Funused2       uintptr // *void
	Fsysinfo       uint64
	Fcanary        uint64
	Fcanary2       uint64
	Ftid           int32
	Ferrno_val     int32
	Fdetach_state  int32
	Fcancel        int32
	Fcanceldisable uint8
	Fcancelasync   uint8
	F74            uint8
	Fmap_base      uintptr // *uint8
	Fmap_size      uint64
	Fstack         uintptr // *void
	Fstack_size    uint64
	Fguard_size    uint64
	Fstart_arg     uintptr // *void
	Fstart         uintptr // *func(TLS, uintptr) uintptr
	Fresult        uintptr // *void
	Fcancelbuf     uintptr // *S__ptcb
	Ftsd           uintptr // **void
	Frobust_list   struct {
		Fhead    uintptr
		Foff     int64
		Fpending uintptr
	}
	Ftimer_id      int32
	Flocale        uintptr // Tlocale_t = *S__locale_struct
	Fkilllock      [1]int32
	Fdlerror_buf   uintptr // *int8
	Fstdio_locks   uintptr // *void
	Fcanary_at_end uint64
	Fdtv_copy      uintptr // **void
}

// xlio_wait is defined at lio_listio.c:14:12
func xlio_wait(tls TLS, _st uintptr /* *Slio_state */) (r int32) {
	var (
		_i       int32
		_err     int32
		_got_err int32
		_cnt     int32
		_cbs     uintptr // **Saiocb
	)
	_got_err = int32(0)
	_cnt = *(*int32)(unsafe.Pointer(_st + 8))
	_cbs = _st + 16

_1:
	_i = int32(0)
_4:
	if _i >= _cnt {
		goto _6
	}

	if *(*uintptr)(unsafe.Pointer(_cbs + 8*uintptr(_i))) != 0 {
		goto _7
	}

	goto _5

_7:
	_err = Xaio_error(tls, *(*uintptr)(unsafe.Pointer(_cbs + 8*uintptr(_i))))
	if _err != int32(115) {
		goto _8
	}

	goto _6

_8:
	if _err == 0 {
		goto _9
	}

	_got_err = int32(1)
_9:
	*(*uintptr)(unsafe.Pointer(_cbs + 8*uintptr(_i))) = null

_5:
	_i++
	goto _4

_6:
	if _i != _cnt {
		goto _10
	}

	if _got_err == 0 {
		goto _11
	}

	*(*int32)(unsafe.Pointer(X__errno_location(tls))) = int32(5)
	return int32(-1)

_11:
	return int32(0)

_10:
	if Xaio_suspend(tls, _cbs, _cnt, null) == 0 {
		goto _12
	}

	return int32(-1)

_12:
	goto _1
	return r
}

type t1pthread_attr_t = struct {
	F__u struct {
		F__i  [0][14]int32
		F__vi [0][14]int32
		F__s  [0][7]uint64
		F     int64
		_     [48]byte
	}
}

func fn470(p uintptr) func(TLS, Usigval) { return *(*func(TLS, Usigval))(unsafe.Pointer(&p)) }

// xwait_thread is defined at lio_listio.c:61:13
func xwait_thread(tls TLS, _p uintptr /* *void */) (r uintptr /* *void */) {
	var (
		_st  uintptr // *Slio_state
		_sev uintptr // *Ssigevent
	)
	_st = _p
	_sev = *(*uintptr)(unsafe.Pointer(_st))
	xlio_wait(tls, _st)
	Xfree(tls, _st)
	switch *(*int32)(unsafe.Pointer(_sev + 12)) {
	case int32(0):
		goto _2
	case int32(2):
		goto _3
	}
	goto _1

_2:
	xnotify_signal(tls, _sev)
	goto _1

_3:
	fn470(*(*uintptr)(unsafe.Pointer(_sev + 16)))(tls, *(*u2sigval)(unsafe.Pointer(_sev)))
	goto _1

_1:
	return null
}

type t3size_t = uint64

type t2ssize_t = int64

type t2off_t = int64

type u2sigval = struct {
	Fsival_int [0]int32
	Fsival_ptr [0]uintptr // *void
	F          int64
}

type t2uintptr_t = uint64

type s2__ptcb = struct {
	F__f    uintptr // *func(TLS, uintptr)
	F__x    uintptr // *void
	F__next uintptr // *S__ptcb
}

type s2__locale_struct = struct{ Fcat [6]uintptr }

// xnotify_signal is defined at lio_listio.c:41:13
func xnotify_signal(tls TLS, _sev uintptr /* *Ssigevent */) {
	X__assert_fail(tls, ts+0 /* "TODO(ccgo)" */, ts+64 /* "src/aio/lio_list..." */, int32(43), x471__func__)
	X__assert_fail(tls, ts+0 /* "TODO(ccgo)" */, ts+64 /* "src/aio/lio_list..." */, int32(45), x471__func__)
	X__assert_fail(tls, ts+0 /* "TODO(ccgo)" */, ts+64 /* "src/aio/lio_list..." */, int32(47), x471__func__)
	X__assert_fail(tls, ts+0 /* "TODO(ccgo)" */, ts+64 /* "src/aio/lio_list..." */, int32(49), x471__func__)
	X__assert_fail(tls, ts+0 /* "TODO(ccgo)" */, ts+64 /* "src/aio/lio_list..." */, int32(51), x471__func__)
	X__assert_fail(tls, ts+0 /* "TODO(ccgo)" */, ts+64 /* "src/aio/lio_list..." */, int32(53), x471__func__)
	X__assert_fail(tls, ts+0 /* "TODO(ccgo)" */, ts+64 /* "src/aio/lio_list..." */, int32(55), x471__func__)
	X__assert_fail(tls, ts+0 /* "TODO(ccgo)" */, ts+64 /* "src/aio/lio_list..." */, int32(57), x471__func__)
}

// x4__func__ [14]int8, escapes: true, lio_listio.c:42:1
var x471__func__ = ds + 24

// linking __cexp.o

// X__ldexp_cexp is defined at __cexp.c:67:16
func X__ldexp_cexp(tls TLS, _z complex128, _expt int32) (r complex128) {
	esc := MustMalloc(80)
	var (
		_x         float64
		_y         float64
		_exp_x     float64
		_scale1    float64
		_scale2    float64
		_ex_expt   = esc // *int32
		_half_expt int32
		_unnamed1  = esc + 16 // *struct{F__z [0]complex128;F__xy [0][2]float64;F int64; _ [8]byte}
		___u       = esc + 32 // *struct{Ff [0]float64;Fi [0]uint64;F int64}
		_1__u      = esc + 48 // *struct{Ff [0]float64;Fi [0]uint64;F int64}
		_unnamed2  = esc + 64 // *struct{F__z [0]complex128;F__xy [0][2]float64;F int64; _ [8]byte}
	)
	defer Free(esc)
	_x = real(_z)
	_y = *(*float64)(unsafe.Pointer(func() uintptr {
		*(*struct {
			F__z  [0]complex128
			F__xy [0][2]float64
			F     int64
			_     [8]byte
		})(unsafe.Pointer(_unnamed1)) = *(*struct {
			F__z  [0]complex128
			F__xy [0][2]float64
			F     int64
			_     [8]byte
		})(unsafe.Pointer(&struct{ f complex128 }{_z}))
		return _unnamed1
	}() + 8))
	_exp_x = x__frexp_exp(tls, _x, _ex_expt)
	_expt = _expt + *(*int32)(unsafe.Pointer(_ex_expt))
	_half_expt = _expt / int32(2)
	*(*uint64)(unsafe.Pointer(___u)) = uint64((int32(0x3ff)+_half_expt)<<(uint(20)%32))<<(uint(32)%64) | uint64(0)
	_scale1 = *(*float64)(unsafe.Pointer(___u))
	_half_expt = _expt - _half_expt
	*(*uint64)(unsafe.Pointer(_1__u)) = uint64((int32(0x3ff)+_half_expt)<<(uint(20)%32))<<(uint(32)%64) | uint64(0)
	_scale2 = *(*float64)(unsafe.Pointer(_1__u))
	return *(*complex128)(unsafe.Pointer(func() uintptr {
		*(*struct {
			F__z  [0]complex128
			F__xy [0][2]float64
			F     int64
			_     [8]byte
		})(unsafe.Pointer(_unnamed2)) = *(*struct {
			F__z  [0]complex128
			F__xy [0][2]float64
			F     int64
			_     [8]byte
		})(unsafe.Pointer(&struct{ f [2]float64 }{[2]float64{
			0: float64(float64(Xcos(tls, _y)*_exp_x)*_scale1) * _scale2,
			1: float64(float64(Xsin(tls, _y)*_exp_x)*_scale1) * _scale2,
		}}))
		return _unnamed2
	}()))
}

type t4__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t4__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t1uint64_t = uint64

// x__frexp_exp is defined at __cexp.c:40:15
func x__frexp_exp(tls TLS, _x float64, _expt uintptr /* *int32 */) (r float64) {
	esc := MustMalloc(24)
	var (
		_exp_x float64
		_hx    uint32
		___u   = esc      // *struct{Ff [0]float64;Fi [0]uint64;F int64}
		_1__u  = esc + 16 // *struct{Ff [0]float64;Fi [0]uint64;F int64}
	)
	defer Free(esc)
	_exp_x = Xexp(tls, _x-xkln2)
	*(*float64)(unsafe.Pointer(___u)) = _exp_x
	_hx = uint32(*(*uint64)(unsafe.Pointer(___u)) >> (uint(32) % 64))
	*(*int32)(unsafe.Pointer(_expt)) = int32(_hx>>(uint(20)%32) - uint32(2046) + xk)
	*(*float64)(unsafe.Pointer(_1__u)) = _exp_x
	{
		p := (*uint64)(unsafe.Pointer(_1__u))
		*p = *p & uint64(0xffffffff)
	}
	{
		p := (*uint64)(unsafe.Pointer(_1__u))
		*p = *p | uint64(_hx&uint32(0xfffff)|uint32(2145386496))<<(uint(32)%64)
	}
	_exp_x = *(*float64)(unsafe.Pointer(_1__u))
	return _exp_x
}

type t1uint32_t = uint32

// xkln2 float64, escapes: false, __cexp.c:31:21
var xkln2 = float64(1246.9717778273416)

// xk Tuint32_t = uint32, escapes: false, __cexp.c:30:23
var xk = uint32(1799)

// linking __cexpf.o

// X__ldexp_cexpf is defined at __cexpf.c:51:15
func X__ldexp_cexpf(tls TLS, _z complex64, _expt int32) (r complex64) {
	esc := MustMalloc(72)
	var (
		_x         float32
		_y         float32
		_exp_x     float32
		_scale1    float32
		_scale2    float32
		_ex_expt   = esc // *int32
		_half_expt int32
		_unnamed1  = esc + 16 // *struct{F__z [0]complex64;F__xy [0][2]float32;F int32; _ [4]byte}
		___u       = esc + 32 // *struct{Ff [0]float32;Fi [0]uint32;F int32}
		_1__u      = esc + 48 // *struct{Ff [0]float32;Fi [0]uint32;F int32}
		_unnamed2  = esc + 64 // *struct{F__z [0]complex64;F__xy [0][2]float32;F int32; _ [4]byte}
	)
	defer Free(esc)
	_x = real(_z)
	_y = *(*float32)(unsafe.Pointer(func() uintptr {
		*(*struct {
			F__z  [0]complex64
			F__xy [0][2]float32
			F     int32
			_     [4]byte
		})(unsafe.Pointer(_unnamed1)) = *(*struct {
			F__z  [0]complex64
			F__xy [0][2]float32
			F     int32
			_     [4]byte
		})(unsafe.Pointer(&struct{ f complex64 }{_z}))
		return _unnamed1
	}() + 4))
	_exp_x = x__frexp_expf(tls, _x, _ex_expt)
	_expt = _expt + *(*int32)(unsafe.Pointer(_ex_expt))
	_half_expt = _expt / int32(2)
	*(*uint32)(unsafe.Pointer(___u)) = uint32((int32(0x7f) + _half_expt) << (uint(23) % 32))
	_scale1 = *(*float32)(unsafe.Pointer(___u))
	_half_expt = _expt - _half_expt
	*(*uint32)(unsafe.Pointer(_1__u)) = uint32((int32(0x7f) + _half_expt) << (uint(23) % 32))
	_scale2 = *(*float32)(unsafe.Pointer(_1__u))
	return *(*complex64)(unsafe.Pointer(func() uintptr {
		*(*struct {
			F__z  [0]complex64
			F__xy [0][2]float32
			F     int32
			_     [4]byte
		})(unsafe.Pointer(_unnamed2)) = *(*struct {
			F__z  [0]complex64
			F__xy [0][2]float32
			F     int32
			_     [4]byte
		})(unsafe.Pointer(&struct{ f [2]float32 }{[2]float32{
			0: float32(float32(Xcosf(tls, _y)*_exp_x)*_scale1) * _scale2,
			1: float32(float32(Xsinf(tls, _y)*_exp_x)*_scale1) * _scale2,
		}}))
		return _unnamed2
	}()))
}

type t5__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t5__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t2uint32_t = uint32

// x__frexp_expf is defined at __cexpf.c:39:14
func x__frexp_expf(tls TLS, _x float32, _expt uintptr /* *int32 */) (r float32) {
	esc := MustMalloc(20)
	var (
		_exp_x float32
		_hx    uint32
		___u   = esc      // *struct{Ff [0]float32;Fi [0]uint32;F int32}
		_1__u  = esc + 16 // *struct{Ff [0]float32;Fi [0]uint32;F int32}
	)
	defer Free(esc)
	_exp_x = Xexpf(tls, _x-x1kln2)
	*(*float32)(unsafe.Pointer(___u)) = _exp_x
	_hx = *(*uint32)(unsafe.Pointer(___u))
	*(*int32)(unsafe.Pointer(_expt)) = int32(_hx>>(uint(23)%32) - uint32(254) + x1k)
	*(*uint32)(unsafe.Pointer(_1__u)) = _hx&uint32(0x7fffff) | uint32(2130706432)
	_exp_x = *(*float32)(unsafe.Pointer(_1__u))
	return _exp_x
}

// xkln2 float32, escapes: false, __cexpf.c:31:20
var x1kln2 = float32(162.88959)

// xk Tuint32_t = uint32, escapes: false, __cexpf.c:30:23
var x1k = uint32(235)

// linking cabs.o

// Xcabs is defined at cabs.c:3:8
func Xcabs(tls TLS, _z complex128) (r float64) {
	esc := MustMalloc(16)
	var _unnamed1 = esc // *struct{F__z [0]complex128;F__xy [0][2]float64;F int64; _ [8]byte}
	defer Free(esc)
	return Xhypot(tls, real(_z), *(*float64)(unsafe.Pointer(func() uintptr {
		*(*struct {
			F__z  [0]complex128
			F__xy [0][2]float64
			F     int64
			_     [8]byte
		})(unsafe.Pointer(_unnamed1)) = *(*struct {
			F__z  [0]complex128
			F__xy [0][2]float64
			F     int64
			_     [8]byte
		})(unsafe.Pointer(&struct{ f complex128 }{_z}))
		return _unnamed1
	}() + 8)))
}

type t6__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t6__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// linking cabsf.o

// Xcabsf is defined at cabsf.c:3:7
func Xcabsf(tls TLS, _z complex64) (r float32) {
	esc := MustMalloc(8)
	var _unnamed1 = esc // *struct{F__z [0]complex64;F__xy [0][2]float32;F int32; _ [4]byte}
	defer Free(esc)
	return Xhypotf(tls, real(_z), *(*float32)(unsafe.Pointer(func() uintptr {
		*(*struct {
			F__z  [0]complex64
			F__xy [0][2]float32
			F     int32
			_     [4]byte
		})(unsafe.Pointer(_unnamed1)) = *(*struct {
			F__z  [0]complex64
			F__xy [0][2]float32
			F     int32
			_     [4]byte
		})(unsafe.Pointer(&struct{ f complex64 }{_z}))
		return _unnamed1
	}() + 4)))
}

type t7__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t7__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// linking cabsl.o

// Xcabsl is defined at cabsl.c:4:13
func Xcabsl(tls TLS, _z complex128) (r float64) {
	return Xcabs(tls, _z)
}

type t8__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t8__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// linking cacos.o

// Xcacos is defined at cacos.c:7:16
func Xcacos(tls TLS, _z complex128) (r complex128) {
	esc := MustMalloc(32)
	var (
		_unnamed1 = esc      // *struct{F__z [0]complex128;F__xy [0][2]float64;F int64; _ [8]byte}
		_unnamed2 = esc + 16 // *struct{F__z [0]complex128;F__xy [0][2]float64;F int64; _ [8]byte}
	)
	defer Free(esc)
	_z = Xcasin(tls, _z)
	return *(*complex128)(unsafe.Pointer(func() uintptr {
		*(*struct {
			F__z  [0]complex128
			F__xy [0][2]float64
			F     int64
			_     [8]byte
		})(unsafe.Pointer(_unnamed2)) = *(*struct {
			F__z  [0]complex128
			F__xy [0][2]float64
			F     int64
			_     [8]byte
		})(unsafe.Pointer(&struct{ f [2]float64 }{[2]float64{
			0: float64(1.5707963267948966) - real(_z),
			1: -*(*float64)(unsafe.Pointer(func() uintptr {
				*(*struct {
					F__z  [0]complex128
					F__xy [0][2]float64
					F     int64
					_     [8]byte
				})(unsafe.Pointer(_unnamed1)) = *(*struct {
					F__z  [0]complex128
					F__xy [0][2]float64
					F     int64
					_     [8]byte
				})(unsafe.Pointer(&struct{ f complex128 }{_z}))
				return _unnamed1
			}() + 8)),
		}}))
		return _unnamed2
	}()))
}

type t9__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t9__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// linking cacosf.o

// Xcacosf is defined at cacosf.c:5:15
func Xcacosf(tls TLS, _z complex64) (r complex64) {
	esc := MustMalloc(24)
	var (
		_unnamed1 = esc      // *struct{F__z [0]complex64;F__xy [0][2]float32;F int32; _ [4]byte}
		_unnamed2 = esc + 16 // *struct{F__z [0]complex64;F__xy [0][2]float32;F int32; _ [4]byte}
	)
	defer Free(esc)
	_z = Xcasinf(tls, _z)
	return *(*complex64)(unsafe.Pointer(func() uintptr {
		*(*struct {
			F__z  [0]complex64
			F__xy [0][2]float32
			F     int32
			_     [4]byte
		})(unsafe.Pointer(_unnamed2)) = *(*struct {
			F__z  [0]complex64
			F__xy [0][2]float32
			F     int32
			_     [4]byte
		})(unsafe.Pointer(&struct{ f [2]float32 }{[2]float32{
			0: float32(1.5707964) - real(_z),
			1: -*(*float32)(unsafe.Pointer(func() uintptr {
				*(*struct {
					F__z  [0]complex64
					F__xy [0][2]float32
					F     int32
					_     [4]byte
				})(unsafe.Pointer(_unnamed1)) = *(*struct {
					F__z  [0]complex64
					F__xy [0][2]float32
					F     int32
					_     [4]byte
				})(unsafe.Pointer(&struct{ f complex64 }{_z}))
				return _unnamed1
			}() + 4)),
		}}))
		return _unnamed2
	}()))
}

type t10__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t10__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// linking cacosh.o

// Xcacosh is defined at cacosh.c:5:16
func Xcacosh(tls TLS, _z complex128) (r complex128) {
	esc := MustMalloc(32)
	var (
		_unnamed1 = esc      // *struct{F__z [0]complex128;F__xy [0][2]float64;F int64; _ [8]byte}
		_unnamed2 = esc + 16 // *struct{F__z [0]complex128;F__xy [0][2]float64;F int64; _ [8]byte}
	)
	defer Free(esc)
	_z = Xcacos(tls, _z)
	return *(*complex128)(unsafe.Pointer(func() uintptr {
		*(*struct {
			F__z  [0]complex128
			F__xy [0][2]float64
			F     int64
			_     [8]byte
		})(unsafe.Pointer(_unnamed2)) = *(*struct {
			F__z  [0]complex128
			F__xy [0][2]float64
			F     int64
			_     [8]byte
		})(unsafe.Pointer(&struct{ f [2]float64 }{[2]float64{
			0: -*(*float64)(unsafe.Pointer(func() uintptr {
				*(*struct {
					F__z  [0]complex128
					F__xy [0][2]float64
					F     int64
					_     [8]byte
				})(unsafe.Pointer(_unnamed1)) = *(*struct {
					F__z  [0]complex128
					F__xy [0][2]float64
					F     int64
					_     [8]byte
				})(unsafe.Pointer(&struct{ f complex128 }{_z}))
				return _unnamed1
			}() + 8)),
			1: real(_z),
		}}))
		return _unnamed2
	}()))
}

type t11__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t11__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// linking cacoshf.o

// Xcacoshf is defined at cacoshf.c:3:15
func Xcacoshf(tls TLS, _z complex64) (r complex64) {
	esc := MustMalloc(24)
	var (
		_unnamed1 = esc      // *struct{F__z [0]complex64;F__xy [0][2]float32;F int32; _ [4]byte}
		_unnamed2 = esc + 16 // *struct{F__z [0]complex64;F__xy [0][2]float32;F int32; _ [4]byte}
	)
	defer Free(esc)
	_z = Xcacosf(tls, _z)
	return *(*complex64)(unsafe.Pointer(func() uintptr {
		*(*struct {
			F__z  [0]complex64
			F__xy [0][2]float32
			F     int32
			_     [4]byte
		})(unsafe.Pointer(_unnamed2)) = *(*struct {
			F__z  [0]complex64
			F__xy [0][2]float32
			F     int32
			_     [4]byte
		})(unsafe.Pointer(&struct{ f [2]float32 }{[2]float32{
			0: -*(*float32)(unsafe.Pointer(func() uintptr {
				*(*struct {
					F__z  [0]complex64
					F__xy [0][2]float32
					F     int32
					_     [4]byte
				})(unsafe.Pointer(_unnamed1)) = *(*struct {
					F__z  [0]complex64
					F__xy [0][2]float32
					F     int32
					_     [4]byte
				})(unsafe.Pointer(&struct{ f complex64 }{_z}))
				return _unnamed1
			}() + 4)),
			1: real(_z),
		}}))
		return _unnamed2
	}()))
}

type t12__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t12__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// linking cacoshl.o

// Xcacoshl is defined at cacoshl.c:4:21
func Xcacoshl(tls TLS, _z complex128) (r complex128) {
	return Xcacosh(tls, _z)
}

type t13__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t13__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// linking cacosl.o

// Xcacosl is defined at cacosl.c:4:21
func Xcacosl(tls TLS, _z complex128) (r complex128) {
	return Xcacos(tls, _z)
}

type t14__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t14__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// linking carg.o

// Xcarg is defined at carg.c:3:8
func Xcarg(tls TLS, _z complex128) (r float64) {
	esc := MustMalloc(16)
	var _unnamed1 = esc // *struct{F__z [0]complex128;F__xy [0][2]float64;F int64; _ [8]byte}
	defer Free(esc)
	return Xatan2(tls, *(*float64)(unsafe.Pointer(func() uintptr {
		*(*struct {
			F__z  [0]complex128
			F__xy [0][2]float64
			F     int64
			_     [8]byte
		})(unsafe.Pointer(_unnamed1)) = *(*struct {
			F__z  [0]complex128
			F__xy [0][2]float64
			F     int64
			_     [8]byte
		})(unsafe.Pointer(&struct{ f complex128 }{_z}))
		return _unnamed1
	}() + 8)), real(_z))
}

type t15__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t15__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// linking cargf.o

// Xcargf is defined at cargf.c:3:7
func Xcargf(tls TLS, _z complex64) (r float32) {
	esc := MustMalloc(8)
	var _unnamed1 = esc // *struct{F__z [0]complex64;F__xy [0][2]float32;F int32; _ [4]byte}
	defer Free(esc)
	return Xatan2f(tls, *(*float32)(unsafe.Pointer(func() uintptr {
		*(*struct {
			F__z  [0]complex64
			F__xy [0][2]float32
			F     int32
			_     [4]byte
		})(unsafe.Pointer(_unnamed1)) = *(*struct {
			F__z  [0]complex64
			F__xy [0][2]float32
			F     int32
			_     [4]byte
		})(unsafe.Pointer(&struct{ f complex64 }{_z}))
		return _unnamed1
	}() + 4)), real(_z))
}

type t16__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t16__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// linking cargl.o

// Xcargl is defined at cargl.c:4:13
func Xcargl(tls TLS, _z complex128) (r float64) {
	return Xcarg(tls, _z)
}

type t17__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t17__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// linking casin.o

// Xcasin is defined at casin.c:7:16
func Xcasin(tls TLS, _z complex128) (r complex128) {
	esc := MustMalloc(80)
	var (
		_w        complex128
		_x        float64
		_y        float64
		_unnamed1 = esc      // *struct{F__z [0]complex128;F__xy [0][2]float64;F int64; _ [8]byte}
		_unnamed2 = esc + 16 // *struct{F__z [0]complex128;F__xy [0][2]float64;F int64; _ [8]byte}
		_r        complex128
		_unnamed3 = esc + 32 // *struct{F__z [0]complex128;F__xy [0][2]float64;F int64; _ [8]byte}
		_unnamed4 = esc + 48 // *struct{F__z [0]complex128;F__xy [0][2]float64;F int64; _ [8]byte}
		_unnamed5 = esc + 64 // *struct{F__z [0]complex128;F__xy [0][2]float64;F int64; _ [8]byte}
	)
	defer Free(esc)
	_x = real(_z)
	_y = *(*float64)(unsafe.Pointer(func() uintptr {
		*(*struct {
			F__z  [0]complex128
			F__xy [0][2]float64
			F     int64
			_     [8]byte
		})(unsafe.Pointer(_unnamed1)) = *(*struct {
			F__z  [0]complex128
			F__xy [0][2]float64
			F     int64
			_     [8]byte
		})(unsafe.Pointer(&struct{ f complex128 }{_z}))
		return _unnamed1
	}() + 8))
	_w = *(*complex128)(unsafe.Pointer(func() uintptr {
		*(*struct {
			F__z  [0]complex128
			F__xy [0][2]float64
			F     int64
			_     [8]byte
		})(unsafe.Pointer(_unnamed2)) = *(*struct {
			F__z  [0]complex128
			F__xy [0][2]float64
			F     int64
			_     [8]byte
		})(unsafe.Pointer(&struct{ f [2]float64 }{[2]float64{
			0: float64(1) - float64(float64(_x-_y)*float64(_x+_y)),
			1: float64(float64(-2)*_x) * _y,
		}}))
		return _unnamed2
	}()))
	_r = Xclog(tls, *(*complex128)(unsafe.Pointer(func() uintptr {
		*(*struct {
			F__z  [0]complex128
			F__xy [0][2]float64
			F     int64
			_     [8]byte
		})(unsafe.Pointer(_unnamed3)) = *(*struct {
			F__z  [0]complex128
			F__xy [0][2]float64
			F     int64
			_     [8]byte
		})(unsafe.Pointer(&struct{ f [2]float64 }{[2]float64{
			0: -_y,
			1: _x,
		}}))
		return _unnamed3
	}()))+Xcsqrt(tls, _w))
	return *(*complex128)(unsafe.Pointer(func() uintptr {
		*(*struct {
			F__z  [0]complex128
			F__xy [0][2]float64
			F     int64
			_     [8]byte
		})(unsafe.Pointer(_unnamed5)) = *(*struct {
			F__z  [0]complex128
			F__xy [0][2]float64
			F     int64
			_     [8]byte
		})(unsafe.Pointer(&struct{ f [2]float64 }{[2]float64{
			0: *(*float64)(unsafe.Pointer(func() uintptr {
				*(*struct {
					F__z  [0]complex128
					F__xy [0][2]float64
					F     int64
					_     [8]byte
				})(unsafe.Pointer(_unnamed4)) = *(*struct {
					F__z  [0]complex128
					F__xy [0][2]float64
					F     int64
					_     [8]byte
				})(unsafe.Pointer(&struct{ f complex128 }{_r}))
				return _unnamed4
			}() + 8)),
			1: -real(_r),
		}}))
		return _unnamed5
	}()))
}

type t18__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t18__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// linking casinf.o

// Xcasinf is defined at casinf.c:5:15
func Xcasinf(tls TLS, _z complex64) (r complex64) {
	esc := MustMalloc(72)
	var (
		_w        complex64
		_x        float32
		_y        float32
		_unnamed1 = esc      // *struct{F__z [0]complex64;F__xy [0][2]float32;F int32; _ [4]byte}
		_unnamed2 = esc + 16 // *struct{F__z [0]complex64;F__xy [0][2]float32;F int32; _ [4]byte}
		_r        complex64
		_unnamed3 = esc + 32 // *struct{F__z [0]complex64;F__xy [0][2]float32;F int32; _ [4]byte}
		_unnamed4 = esc + 48 // *struct{F__z [0]complex64;F__xy [0][2]float32;F int32; _ [4]byte}
		_unnamed5 = esc + 64 // *struct{F__z [0]complex64;F__xy [0][2]float32;F int32; _ [4]byte}
	)
	defer Free(esc)
	_x = real(_z)
	_y = *(*float32)(unsafe.Pointer(func() uintptr {
		*(*struct {
			F__z  [0]complex64
			F__xy [0][2]float32
			F     int32
			_     [4]byte
		})(unsafe.Pointer(_unnamed1)) = *(*struct {
			F__z  [0]complex64
			F__xy [0][2]float32
			F     int32
			_     [4]byte
		})(unsafe.Pointer(&struct{ f complex64 }{_z}))
		return _unnamed1
	}() + 4))
	_w = *(*complex64)(unsafe.Pointer(func() uintptr {
		*(*struct {
			F__z  [0]complex64
			F__xy [0][2]float32
			F     int32
			_     [4]byte
		})(unsafe.Pointer(_unnamed2)) = *(*struct {
			F__z  [0]complex64
			F__xy [0][2]float32
			F     int32
			_     [4]byte
		})(unsafe.Pointer(&struct{ f [2]float32 }{[2]float32{
			0: float32(float64(1) - float64(float32(_x-_y)*float32(_x+_y))),
			1: float32(float64(float64(-2)*float64(_x)) * float64(_y)),
		}}))
		return _unnamed2
	}()))
	_r = Xclogf(tls, *(*complex64)(unsafe.Pointer(func() uintptr {
		*(*struct {
			F__z  [0]complex64
			F__xy [0][2]float32
			F     int32
			_     [4]byte
		})(unsafe.Pointer(_unnamed3)) = *(*struct {
			F__z  [0]complex64
			F__xy [0][2]float32
			F     int32
			_     [4]byte
		})(unsafe.Pointer(&struct{ f [2]float32 }{[2]float32{
			0: -_y,
			1: _x,
		}}))
		return _unnamed3
	}()))+Xcsqrtf(tls, _w))
	return *(*complex64)(unsafe.Pointer(func() uintptr {
		*(*struct {
			F__z  [0]complex64
			F__xy [0][2]float32
			F     int32
			_     [4]byte
		})(unsafe.Pointer(_unnamed5)) = *(*struct {
			F__z  [0]complex64
			F__xy [0][2]float32
			F     int32
			_     [4]byte
		})(unsafe.Pointer(&struct{ f [2]float32 }{[2]float32{
			0: *(*float32)(unsafe.Pointer(func() uintptr {
				*(*struct {
					F__z  [0]complex64
					F__xy [0][2]float32
					F     int32
					_     [4]byte
				})(unsafe.Pointer(_unnamed4)) = *(*struct {
					F__z  [0]complex64
					F__xy [0][2]float32
					F     int32
					_     [4]byte
				})(unsafe.Pointer(&struct{ f complex64 }{_r}))
				return _unnamed4
			}() + 4)),
			1: -real(_r),
		}}))
		return _unnamed5
	}()))
}

type t19__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t19__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// linking casinh.o

// Xcasinh is defined at casinh.c:5:16
func Xcasinh(tls TLS, _z complex128) (r complex128) {
	esc := MustMalloc(64)
	var (
		_unnamed1 = esc      // *struct{F__z [0]complex128;F__xy [0][2]float64;F int64; _ [8]byte}
		_unnamed2 = esc + 16 // *struct{F__z [0]complex128;F__xy [0][2]float64;F int64; _ [8]byte}
		_unnamed3 = esc + 32 // *struct{F__z [0]complex128;F__xy [0][2]float64;F int64; _ [8]byte}
		_unnamed4 = esc + 48 // *struct{F__z [0]complex128;F__xy [0][2]float64;F int64; _ [8]byte}
	)
	defer Free(esc)
	_z = Xcasin(tls, *(*complex128)(unsafe.Pointer(func() uintptr {
		*(*struct {
			F__z  [0]complex128
			F__xy [0][2]float64
			F     int64
			_     [8]byte
		})(unsafe.Pointer(_unnamed2)) = *(*struct {
			F__z  [0]complex128
			F__xy [0][2]float64
			F     int64
			_     [8]byte
		})(unsafe.Pointer(&struct{ f [2]float64 }{[2]float64{
			0: -*(*float64)(unsafe.Pointer(func() uintptr {
				*(*struct {
					F__z  [0]complex128
					F__xy [0][2]float64
					F     int64
					_     [8]byte
				})(unsafe.Pointer(_unnamed1)) = *(*struct {
					F__z  [0]complex128
					F__xy [0][2]float64
					F     int64
					_     [8]byte
				})(unsafe.Pointer(&struct{ f complex128 }{_z}))
				return _unnamed1
			}() + 8)),
			1: real(_z),
		}}))
		return _unnamed2
	}())))
	return *(*complex128)(unsafe.Pointer(func() uintptr {
		*(*struct {
			F__z  [0]complex128
			F__xy [0][2]float64
			F     int64
			_     [8]byte
		})(unsafe.Pointer(_unnamed4)) = *(*struct {
			F__z  [0]complex128
			F__xy [0][2]float64
			F     int64
			_     [8]byte
		})(unsafe.Pointer(&struct{ f [2]float64 }{[2]float64{
			0: *(*float64)(unsafe.Pointer(func() uintptr {
				*(*struct {
					F__z  [0]complex128
					F__xy [0][2]float64
					F     int64
					_     [8]byte
				})(unsafe.Pointer(_unnamed3)) = *(*struct {
					F__z  [0]complex128
					F__xy [0][2]float64
					F     int64
					_     [8]byte
				})(unsafe.Pointer(&struct{ f complex128 }{_z}))
				return _unnamed3
			}() + 8)),
			1: -real(_z),
		}}))
		return _unnamed4
	}()))
}

type t20__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t20__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// linking casinhf.o

// Xcasinhf is defined at casinhf.c:3:15
func Xcasinhf(tls TLS, _z complex64) (r complex64) {
	esc := MustMalloc(56)
	var (
		_unnamed1 = esc      // *struct{F__z [0]complex64;F__xy [0][2]float32;F int32; _ [4]byte}
		_unnamed2 = esc + 16 // *struct{F__z [0]complex64;F__xy [0][2]float32;F int32; _ [4]byte}
		_unnamed3 = esc + 32 // *struct{F__z [0]complex64;F__xy [0][2]float32;F int32; _ [4]byte}
		_unnamed4 = esc + 48 // *struct{F__z [0]complex64;F__xy [0][2]float32;F int32; _ [4]byte}
	)
	defer Free(esc)
	_z = Xcasinf(tls, *(*complex64)(unsafe.Pointer(func() uintptr {
		*(*struct {
			F__z  [0]complex64
			F__xy [0][2]float32
			F     int32
			_     [4]byte
		})(unsafe.Pointer(_unnamed2)) = *(*struct {
			F__z  [0]complex64
			F__xy [0][2]float32
			F     int32
			_     [4]byte
		})(unsafe.Pointer(&struct{ f [2]float32 }{[2]float32{
			0: -*(*float32)(unsafe.Pointer(func() uintptr {
				*(*struct {
					F__z  [0]complex64
					F__xy [0][2]float32
					F     int32
					_     [4]byte
				})(unsafe.Pointer(_unnamed1)) = *(*struct {
					F__z  [0]complex64
					F__xy [0][2]float32
					F     int32
					_     [4]byte
				})(unsafe.Pointer(&struct{ f complex64 }{_z}))
				return _unnamed1
			}() + 4)),
			1: real(_z),
		}}))
		return _unnamed2
	}())))
	return *(*complex64)(unsafe.Pointer(func() uintptr {
		*(*struct {
			F__z  [0]complex64
			F__xy [0][2]float32
			F     int32
			_     [4]byte
		})(unsafe.Pointer(_unnamed4)) = *(*struct {
			F__z  [0]complex64
			F__xy [0][2]float32
			F     int32
			_     [4]byte
		})(unsafe.Pointer(&struct{ f [2]float32 }{[2]float32{
			0: *(*float32)(unsafe.Pointer(func() uintptr {
				*(*struct {
					F__z  [0]complex64
					F__xy [0][2]float32
					F     int32
					_     [4]byte
				})(unsafe.Pointer(_unnamed3)) = *(*struct {
					F__z  [0]complex64
					F__xy [0][2]float32
					F     int32
					_     [4]byte
				})(unsafe.Pointer(&struct{ f complex64 }{_z}))
				return _unnamed3
			}() + 4)),
			1: -real(_z),
		}}))
		return _unnamed4
	}()))
}

type t21__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t21__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// linking casinhl.o

// Xcasinhl is defined at casinhl.c:4:21
func Xcasinhl(tls TLS, _z complex128) (r complex128) {
	return Xcasinh(tls, _z)
}

type t22__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t22__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// linking casinl.o

// Xcasinl is defined at casinl.c:4:21
func Xcasinl(tls TLS, _z complex128) (r complex128) {
	return Xcasin(tls, _z)
}

type t23__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t23__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// linking catan.o

// Xcatan is defined at catan.c:86:16
func Xcatan(tls TLS, _z complex128) (r complex128) {
	esc := MustMalloc(32)
	var (
		_w        complex128
		_a        float64
		_t        float64
		_x        float64
		_x2       float64
		_y        float64
		_unnamed1 = esc      // *struct{F__z [0]complex128;F__xy [0][2]float64;F int64; _ [8]byte}
		_unnamed2 = esc + 16 // *struct{F__z [0]complex128;F__xy [0][2]float64;F int64; _ [8]byte}
	)
	defer Free(esc)
	_x = real(_z)
	_y = *(*float64)(unsafe.Pointer(func() uintptr {
		*(*struct {
			F__z  [0]complex128
			F__xy [0][2]float64
			F     int64
			_     [8]byte
		})(unsafe.Pointer(_unnamed1)) = *(*struct {
			F__z  [0]complex128
			F__xy [0][2]float64
			F     int64
			_     [8]byte
		})(unsafe.Pointer(&struct{ f complex128 }{_z}))
		return _unnamed1
	}() + 8))
	_x2 = _x * _x
	_a = float64(float64(1)-_x2) - float64(_y*_y)
	_t = float64(0.5) * Xatan2(tls, float64(2)*_x, _a)
	_w = complex(x_redupi(tls, _t), 0)
	_t = _y - float64(1)
	_a = _x2 + float64(_t*_t)
	_t = _y + float64(1)
	_a = float64(_x2+float64(_t*_t)) / _a
	_w = *(*complex128)(unsafe.Pointer(func() uintptr {
		*(*struct {
			F__z  [0]complex128
			F__xy [0][2]float64
			F     int64
			_     [8]byte
		})(unsafe.Pointer(_unnamed2)) = *(*struct {
			F__z  [0]complex128
			F__xy [0][2]float64
			F     int64
			_     [8]byte
		})(unsafe.Pointer(&struct{ f [2]float64 }{[2]float64{
			0: real(_w),
			1: float64(0.25) * Xlog(tls, _a),
		}}))
		return _unnamed2
	}()))
	return _w
}

type t24__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t24__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// x_redupi is defined at catan.c:69:15
func x_redupi(tls TLS, _x float64) (r float64) {
	var (
		_t float64
		_i int64
	)
	_t = _x / float64(3.141592653589793)
	if _t < float64(0) {
		goto _1
	}

	_t = _t + float64(0.5)
	goto _2

_1:
	_t = _t - float64(0.5)
_2:
	_i = int64(_t)
	_t = float64(_i)
	_t = float64(float64(_x-float64(_t*xDP1))-float64(_t*xDP2)) - float64(_t*xDP3)
	return _t
}

// xDP1 float64, escapes: false, catan.c:65:21
var xDP1 = float64(3.141592651605606)

// xDP2 float64, escapes: false, catan.c:66:21
var xDP2 = float64(1.9841871479187034e-09)

// xDP3 float64, escapes: false, catan.c:67:21
var xDP3 = float64(1.1442377452219664e-17)

// linking catanf.o

// Xcatanf is defined at catanf.c:83:15
func Xcatanf(tls TLS, _z complex64) (r complex64) {
	esc := MustMalloc(8)
	var (
		_w        complex64
		_a        float32
		_t        float32
		_x        float32
		_x2       float32
		_y        float32
		_unnamed1 = esc // *struct{F__z [0]complex64;F__xy [0][2]float32;F int32; _ [4]byte}
	)
	defer Free(esc)
	_x = real(_z)
	_y = *(*float32)(unsafe.Pointer(func() uintptr {
		*(*struct {
			F__z  [0]complex64
			F__xy [0][2]float32
			F     int32
			_     [4]byte
		})(unsafe.Pointer(_unnamed1)) = *(*struct {
			F__z  [0]complex64
			F__xy [0][2]float32
			F     int32
			_     [4]byte
		})(unsafe.Pointer(&struct{ f complex64 }{_z}))
		return _unnamed1
	}() + 4))
	if _x != float32(0) || _y <= float32(1) {
		goto _1
	}

	goto lovrf

_1:
	_x2 = _x * _x
	_a = float32(float32(1)-_x2) - float32(_y*_y)
	if _a != float32(0) {
		goto _2
	}

	goto lovrf

_2:
	_t = float32(0.5) * Xatan2f(tls, float32(2)*_x, _a)
	_w = complex(x_redupif(tls, _t), 0)
	_t = _y - float32(1)
	_a = _x2 + float32(_t*_t)
	if _a != float32(0) {
		goto _3
	}

	goto lovrf

_3:
	_t = _y + float32(1)
	_a = float32(_x2+float32(_t*_t)) / _a
	X__assert_fail(tls, ts+0 /* "TODO(ccgo)" */, ts+88 /* "src/complex/cata..." */, int32(109), x472__func__)
	return _w

	goto lovrf
lovrf:
	X__assert_fail(tls, ts+0 /* "TODO(ccgo)" */, ts+88 /* "src/complex/cata..." */, int32(115), x472__func__)
	return _w
}

type t25__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t25__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// x1__func__ [7]int8, escapes: true, catanf.c:84:1
var x472__func__ = ds + 40

// x_redupif is defined at catanf.c:65:14
func x_redupif(tls TLS, _xx float32) (r float32) {
	var (
		_x float32
		_t float32
		_i int64
	)
	_x = _xx
	_t = _x / float32(3.1415927)
	if _t < float32(0) {
		goto _1
	}

	_t = _t + float32(0.5)
	goto _2

_1:
	_t = _t - float32(0.5)
_2:
	_i = int64(_t)
	_t = float32(_i)
	_t = float32(float64(float64(float64(_x)-float64(float64(_t)*x1DP1))-float64(float64(_t)*x1DP2)) - float64(float64(_t)*x1DP3))
	return _t
}

// xDP1 float64, escapes: false, catanf.c:61:21
var x1DP1 = float64(3.140625)

// xDP2 float64, escapes: false, catanf.c:62:21
var x1DP2 = float64(0.0009675025939941406)

// xDP3 float64, escapes: false, catanf.c:63:21
var x1DP3 = float64(1.5099579909783765e-07)

// linking catanh.o

// Xcatanh is defined at catanh.c:5:16
func Xcatanh(tls TLS, _z complex128) (r complex128) {
	esc := MustMalloc(64)
	var (
		_unnamed1 = esc      // *struct{F__z [0]complex128;F__xy [0][2]float64;F int64; _ [8]byte}
		_unnamed2 = esc + 16 // *struct{F__z [0]complex128;F__xy [0][2]float64;F int64; _ [8]byte}
		_unnamed3 = esc + 32 // *struct{F__z [0]complex128;F__xy [0][2]float64;F int64; _ [8]byte}
		_unnamed4 = esc + 48 // *struct{F__z [0]complex128;F__xy [0][2]float64;F int64; _ [8]byte}
	)
	defer Free(esc)
	_z = Xcatan(tls, *(*complex128)(unsafe.Pointer(func() uintptr {
		*(*struct {
			F__z  [0]complex128
			F__xy [0][2]float64
			F     int64
			_     [8]byte
		})(unsafe.Pointer(_unnamed2)) = *(*struct {
			F__z  [0]complex128
			F__xy [0][2]float64
			F     int64
			_     [8]byte
		})(unsafe.Pointer(&struct{ f [2]float64 }{[2]float64{
			0: -*(*float64)(unsafe.Pointer(func() uintptr {
				*(*struct {
					F__z  [0]complex128
					F__xy [0][2]float64
					F     int64
					_     [8]byte
				})(unsafe.Pointer(_unnamed1)) = *(*struct {
					F__z  [0]complex128
					F__xy [0][2]float64
					F     int64
					_     [8]byte
				})(unsafe.Pointer(&struct{ f complex128 }{_z}))
				return _unnamed1
			}() + 8)),
			1: real(_z),
		}}))
		return _unnamed2
	}())))
	return *(*complex128)(unsafe.Pointer(func() uintptr {
		*(*struct {
			F__z  [0]complex128
			F__xy [0][2]float64
			F     int64
			_     [8]byte
		})(unsafe.Pointer(_unnamed4)) = *(*struct {
			F__z  [0]complex128
			F__xy [0][2]float64
			F     int64
			_     [8]byte
		})(unsafe.Pointer(&struct{ f [2]float64 }{[2]float64{
			0: *(*float64)(unsafe.Pointer(func() uintptr {
				*(*struct {
					F__z  [0]complex128
					F__xy [0][2]float64
					F     int64
					_     [8]byte
				})(unsafe.Pointer(_unnamed3)) = *(*struct {
					F__z  [0]complex128
					F__xy [0][2]float64
					F     int64
					_     [8]byte
				})(unsafe.Pointer(&struct{ f complex128 }{_z}))
				return _unnamed3
			}() + 8)),
			1: -real(_z),
		}}))
		return _unnamed4
	}()))
}

type t26__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t26__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// linking catanhf.o

// Xcatanhf is defined at catanhf.c:3:15
func Xcatanhf(tls TLS, _z complex64) (r complex64) {
	esc := MustMalloc(56)
	var (
		_unnamed1 = esc      // *struct{F__z [0]complex64;F__xy [0][2]float32;F int32; _ [4]byte}
		_unnamed2 = esc + 16 // *struct{F__z [0]complex64;F__xy [0][2]float32;F int32; _ [4]byte}
		_unnamed3 = esc + 32 // *struct{F__z [0]complex64;F__xy [0][2]float32;F int32; _ [4]byte}
		_unnamed4 = esc + 48 // *struct{F__z [0]complex64;F__xy [0][2]float32;F int32; _ [4]byte}
	)
	defer Free(esc)
	_z = Xcatanf(tls, *(*complex64)(unsafe.Pointer(func() uintptr {
		*(*struct {
			F__z  [0]complex64
			F__xy [0][2]float32
			F     int32
			_     [4]byte
		})(unsafe.Pointer(_unnamed2)) = *(*struct {
			F__z  [0]complex64
			F__xy [0][2]float32
			F     int32
			_     [4]byte
		})(unsafe.Pointer(&struct{ f [2]float32 }{[2]float32{
			0: -*(*float32)(unsafe.Pointer(func() uintptr {
				*(*struct {
					F__z  [0]complex64
					F__xy [0][2]float32
					F     int32
					_     [4]byte
				})(unsafe.Pointer(_unnamed1)) = *(*struct {
					F__z  [0]complex64
					F__xy [0][2]float32
					F     int32
					_     [4]byte
				})(unsafe.Pointer(&struct{ f complex64 }{_z}))
				return _unnamed1
			}() + 4)),
			1: real(_z),
		}}))
		return _unnamed2
	}())))
	return *(*complex64)(unsafe.Pointer(func() uintptr {
		*(*struct {
			F__z  [0]complex64
			F__xy [0][2]float32
			F     int32
			_     [4]byte
		})(unsafe.Pointer(_unnamed4)) = *(*struct {
			F__z  [0]complex64
			F__xy [0][2]float32
			F     int32
			_     [4]byte
		})(unsafe.Pointer(&struct{ f [2]float32 }{[2]float32{
			0: *(*float32)(unsafe.Pointer(func() uintptr {
				*(*struct {
					F__z  [0]complex64
					F__xy [0][2]float32
					F     int32
					_     [4]byte
				})(unsafe.Pointer(_unnamed3)) = *(*struct {
					F__z  [0]complex64
					F__xy [0][2]float32
					F     int32
					_     [4]byte
				})(unsafe.Pointer(&struct{ f complex64 }{_z}))
				return _unnamed3
			}() + 4)),
			1: -real(_z),
		}}))
		return _unnamed4
	}()))
}

type t27__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t27__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// linking catanhl.o

// Xcatanhl is defined at catanhl.c:4:21
func Xcatanhl(tls TLS, _z complex128) (r complex128) {
	return Xcatanh(tls, _z)
}

type t28__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t28__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// linking catanl.o

// Xcatanl is defined at catanl.c:66:21
func Xcatanl(tls TLS, _z complex128) (r complex128) {
	return Xcatan(tls, _z)
}

type t29__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t29__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// linking ccos.o

// Xccos is defined at ccos.c:5:16
func Xccos(tls TLS, _z complex128) (r complex128) {
	esc := MustMalloc(32)
	var (
		_unnamed1 = esc      // *struct{F__z [0]complex128;F__xy [0][2]float64;F int64; _ [8]byte}
		_unnamed2 = esc + 16 // *struct{F__z [0]complex128;F__xy [0][2]float64;F int64; _ [8]byte}
	)
	defer Free(esc)
	return Xccosh(tls, *(*complex128)(unsafe.Pointer(func() uintptr {
		*(*struct {
			F__z  [0]complex128
			F__xy [0][2]float64
			F     int64
			_     [8]byte
		})(unsafe.Pointer(_unnamed2)) = *(*struct {
			F__z  [0]complex128
			F__xy [0][2]float64
			F     int64
			_     [8]byte
		})(unsafe.Pointer(&struct{ f [2]float64 }{[2]float64{
			0: -*(*float64)(unsafe.Pointer(func() uintptr {
				*(*struct {
					F__z  [0]complex128
					F__xy [0][2]float64
					F     int64
					_     [8]byte
				})(unsafe.Pointer(_unnamed1)) = *(*struct {
					F__z  [0]complex128
					F__xy [0][2]float64
					F     int64
					_     [8]byte
				})(unsafe.Pointer(&struct{ f complex128 }{_z}))
				return _unnamed1
			}() + 8)),
			1: real(_z),
		}}))
		return _unnamed2
	}())))
}

type t30__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t30__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// linking ccosf.o

// Xccosf is defined at ccosf.c:3:15
func Xccosf(tls TLS, _z complex64) (r complex64) {
	esc := MustMalloc(24)
	var (
		_unnamed1 = esc      // *struct{F__z [0]complex64;F__xy [0][2]float32;F int32; _ [4]byte}
		_unnamed2 = esc + 16 // *struct{F__z [0]complex64;F__xy [0][2]float32;F int32; _ [4]byte}
	)
	defer Free(esc)
	return Xccoshf(tls, *(*complex64)(unsafe.Pointer(func() uintptr {
		*(*struct {
			F__z  [0]complex64
			F__xy [0][2]float32
			F     int32
			_     [4]byte
		})(unsafe.Pointer(_unnamed2)) = *(*struct {
			F__z  [0]complex64
			F__xy [0][2]float32
			F     int32
			_     [4]byte
		})(unsafe.Pointer(&struct{ f [2]float32 }{[2]float32{
			0: -*(*float32)(unsafe.Pointer(func() uintptr {
				*(*struct {
					F__z  [0]complex64
					F__xy [0][2]float32
					F     int32
					_     [4]byte
				})(unsafe.Pointer(_unnamed1)) = *(*struct {
					F__z  [0]complex64
					F__xy [0][2]float32
					F     int32
					_     [4]byte
				})(unsafe.Pointer(&struct{ f complex64 }{_z}))
				return _unnamed1
			}() + 4)),
			1: real(_z),
		}}))
		return _unnamed2
	}())))
}

type t31__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t31__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// linking ccosh.o

// Xccosh is defined at ccosh.c:41:16
func Xccosh(tls TLS, _z complex128) (r complex128) {
	esc := MustMalloc(272)
	var (
		_x         float64
		_y         float64
		_h         float64
		_hx        int32
		_hy        int32
		_ix        int32
		_iy        int32
		_lx        int32
		_ly        int32
		_unnamed1  = esc       // *struct{F__z [0]complex128;F__xy [0][2]float64;F int64; _ [8]byte}
		___u       = esc + 16  // *struct{Ff [0]float64;Fi [0]uint64;F int64}
		_1__u      = esc + 32  // *struct{Ff [0]float64;Fi [0]uint64;F int64}
		_unnamed2  = esc + 48  // *struct{F__z [0]complex128;F__xy [0][2]float64;F int64; _ [8]byte}
		_unnamed3  = esc + 64  // *struct{F__z [0]complex128;F__xy [0][2]float64;F int64; _ [8]byte}
		_unnamed4  = esc + 80  // *struct{F__z [0]complex128;F__xy [0][2]float64;F int64; _ [8]byte}
		_unnamed5  = esc + 96  // *struct{F__z [0]complex128;F__xy [0][2]float64;F int64; _ [8]byte}
		_unnamed6  = esc + 112 // *struct{F__z [0]complex128;F__xy [0][2]float64;F int64; _ [8]byte}
		_unnamed7  = esc + 128 // *struct{F__z [0]complex128;F__xy [0][2]float64;F int64; _ [8]byte}
		_unnamed8  = esc + 144 // *struct{F__z [0]complex128;F__xy [0][2]float64;F int64; _ [8]byte}
		_unnamed9  = esc + 160 // *struct{F__z [0]complex128;F__xy [0][2]float64;F int64; _ [8]byte}
		_unnamed10 = esc + 176 // *struct{F__z [0]complex128;F__xy [0][2]float64;F int64; _ [8]byte}
		_unnamed11 = esc + 192 // *struct{F__z [0]complex128;F__xy [0][2]float64;F int64; _ [8]byte}
		_unnamed12 = esc + 208 // *struct{F__z [0]complex128;F__xy [0][2]float64;F int64; _ [8]byte}
		_unnamed13 = esc + 224 // *struct{F__z [0]complex128;F__xy [0][2]float64;F int64; _ [8]byte}
		_unnamed14 = esc + 240 // *struct{F__z [0]complex128;F__xy [0][2]float64;F int64; _ [8]byte}
		_unnamed15 = esc + 256 // *struct{F__z [0]complex128;F__xy [0][2]float64;F int64; _ [8]byte}
	)
	defer Free(esc)
	_x = real(_z)
	_y = *(*float64)(unsafe.Pointer(func() uintptr {
		*(*struct {
			F__z  [0]complex128
			F__xy [0][2]float64
			F     int64
			_     [8]byte
		})(unsafe.Pointer(_unnamed1)) = *(*struct {
			F__z  [0]complex128
			F__xy [0][2]float64
			F     int64
			_     [8]byte
		})(unsafe.Pointer(&struct{ f complex128 }{_z}))
		return _unnamed1
	}() + 8))
	*(*float64)(unsafe.Pointer(___u)) = _x
	_hx = int32(*(*uint64)(unsafe.Pointer(___u)) >> (uint(32) % 64))
	_lx = int32(uint32(*(*uint64)(unsafe.Pointer(___u))))
	*(*float64)(unsafe.Pointer(_1__u)) = _y
	_hy = int32(*(*uint64)(unsafe.Pointer(_1__u)) >> (uint(32) % 64))
	_ly = int32(uint32(*(*uint64)(unsafe.Pointer(_1__u))))
	_ix = int32(0x7fffffff) & _hx
	_iy = int32(0x7fffffff) & _hy
	if _ix >= int32(0x7ff00000) || _iy >= int32(0x7ff00000) {
		goto _3
	}

	if _iy|_ly != int32(0) {
		goto _4
	}

	return *(*complex128)(unsafe.Pointer(func() uintptr {
		*(*struct {
			F__z  [0]complex128
			F__xy [0][2]float64
			F     int64
			_     [8]byte
		})(unsafe.Pointer(_unnamed2)) = *(*struct {
			F__z  [0]complex128
			F__xy [0][2]float64
			F     int64
			_     [8]byte
		})(unsafe.Pointer(&struct{ f [2]float64 }{[2]float64{
			0: Xcosh(tls, _x),
			1: _x * _y,
		}}))
		return _unnamed2
	}()))

_4:
	if _ix >= int32(0x40360000) {
		goto _5
	}

	return *(*complex128)(unsafe.Pointer(func() uintptr {
		*(*struct {
			F__z  [0]complex128
			F__xy [0][2]float64
			F     int64
			_     [8]byte
		})(unsafe.Pointer(_unnamed3)) = *(*struct {
			F__z  [0]complex128
			F__xy [0][2]float64
			F     int64
			_     [8]byte
		})(unsafe.Pointer(&struct{ f [2]float64 }{[2]float64{
			0: Xcosh(tls, _x) * Xcos(tls, _y),
			1: Xsinh(tls, _x) * Xsin(tls, _y),
		}}))
		return _unnamed3
	}()))

_5:
	if _ix >= int32(0x40862e42) {
		goto _6
	}

	_h = Xexp(tls, Xfabs(tls, _x)) * float64(0.5)
	return *(*complex128)(unsafe.Pointer(func() uintptr {
		*(*struct {
			F__z  [0]complex128
			F__xy [0][2]float64
			F     int64
			_     [8]byte
		})(unsafe.Pointer(_unnamed4)) = *(*struct {
			F__z  [0]complex128
			F__xy [0][2]float64
			F     int64
			_     [8]byte
		})(unsafe.Pointer(&struct{ f [2]float64 }{[2]float64{
			0: _h * Xcos(tls, _y),
			1: Xcopysign(tls, _h, _x) * Xsin(tls, _y),
		}}))
		return _unnamed4
	}()))

	goto _7

_6:
	if _ix >= int32(0x4096bbaa) {
		goto _8
	}

	_z = X__ldexp_cexp(tls, *(*complex128)(unsafe.Pointer(func() uintptr {
		*(*struct {
			F__z  [0]complex128
			F__xy [0][2]float64
			F     int64
			_     [8]byte
		})(unsafe.Pointer(_unnamed5)) = *(*struct {
			F__z  [0]complex128
			F__xy [0][2]float64
			F     int64
			_     [8]byte
		})(unsafe.Pointer(&struct{ f [2]float64 }{[2]float64{
			0: Xfabs(tls, _x),
			1: _y,
		}}))
		return _unnamed5
	}())), int32(-1))
	return *(*complex128)(unsafe.Pointer(func() uintptr {
		*(*struct {
			F__z  [0]complex128
			F__xy [0][2]float64
			F     int64
			_     [8]byte
		})(unsafe.Pointer(_unnamed7)) = *(*struct {
			F__z  [0]complex128
			F__xy [0][2]float64
			F     int64
			_     [8]byte
		})(unsafe.Pointer(&struct{ f [2]float64 }{[2]float64{
			0: real(_z),
			1: *(*float64)(unsafe.Pointer(func() uintptr {
				*(*struct {
					F__z  [0]complex128
					F__xy [0][2]float64
					F     int64
					_     [8]byte
				})(unsafe.Pointer(_unnamed6)) = *(*struct {
					F__z  [0]complex128
					F__xy [0][2]float64
					F     int64
					_     [8]byte
				})(unsafe.Pointer(&struct{ f complex128 }{_z}))
				return _unnamed6
			}() + 8)) * Xcopysign(tls, float64(1), _x),
		}}))
		return _unnamed7
	}()))

	goto _9

_8:
	_h = xhuge * _x
	return *(*complex128)(unsafe.Pointer(func() uintptr {
		*(*struct {
			F__z  [0]complex128
			F__xy [0][2]float64
			F     int64
			_     [8]byte
		})(unsafe.Pointer(_unnamed8)) = *(*struct {
			F__z  [0]complex128
			F__xy [0][2]float64
			F     int64
			_     [8]byte
		})(unsafe.Pointer(&struct{ f [2]float64 }{[2]float64{
			0: float64(_h*_h) * Xcos(tls, _y),
			1: _h * Xsin(tls, _y),
		}}))
		return _unnamed8
	}()))

_9:
_7:
_3:
	if _ix|_lx != int32(0) || _iy < int32(0x7ff00000) {
		goto _10
	}

	return *(*complex128)(unsafe.Pointer(func() uintptr {
		*(*struct {
			F__z  [0]complex128
			F__xy [0][2]float64
			F     int64
			_     [8]byte
		})(unsafe.Pointer(_unnamed9)) = *(*struct {
			F__z  [0]complex128
			F__xy [0][2]float64
			F     int64
			_     [8]byte
		})(unsafe.Pointer(&struct{ f [2]float64 }{[2]float64{
			0: _y - _y,
			1: Xcopysign(tls, float64(0), _x*float64(_y-_y)),
		}}))
		return _unnamed9
	}()))

_10:
	if _iy|_ly != int32(0) || _ix < int32(0x7ff00000) {
		goto _11
	}

	if _hx&int32(0xfffff)|_lx != int32(0) {
		goto _12
	}

	return *(*complex128)(unsafe.Pointer(func() uintptr {
		*(*struct {
			F__z  [0]complex128
			F__xy [0][2]float64
			F     int64
			_     [8]byte
		})(unsafe.Pointer(_unnamed10)) = *(*struct {
			F__z  [0]complex128
			F__xy [0][2]float64
			F     int64
			_     [8]byte
		})(unsafe.Pointer(&struct{ f [2]float64 }{[2]float64{
			0: _x * _x,
			1: Xcopysign(tls, float64(0), _x) * _y,
		}}))
		return _unnamed10
	}()))

_12:
	return *(*complex128)(unsafe.Pointer(func() uintptr {
		*(*struct {
			F__z  [0]complex128
			F__xy [0][2]float64
			F     int64
			_     [8]byte
		})(unsafe.Pointer(_unnamed11)) = *(*struct {
			F__z  [0]complex128
			F__xy [0][2]float64
			F     int64
			_     [8]byte
		})(unsafe.Pointer(&struct{ f [2]float64 }{[2]float64{
			0: _x * _x,
			1: Xcopysign(tls, float64(0), float64(_x+_x)*_y),
		}}))
		return _unnamed11
	}()))

_11:
	if _ix >= int32(0x7ff00000) || _iy < int32(0x7ff00000) {
		goto _13
	}

	return *(*complex128)(unsafe.Pointer(func() uintptr {
		*(*struct {
			F__z  [0]complex128
			F__xy [0][2]float64
			F     int64
			_     [8]byte
		})(unsafe.Pointer(_unnamed12)) = *(*struct {
			F__z  [0]complex128
			F__xy [0][2]float64
			F     int64
			_     [8]byte
		})(unsafe.Pointer(&struct{ f [2]float64 }{[2]float64{
			0: _y - _y,
			1: _x * float64(_y-_y),
		}}))
		return _unnamed12
	}()))

_13:
	if _ix < int32(0x7ff00000) || _hx&int32(0xfffff)|_lx != int32(0) {
		goto _14
	}

	if _iy < int32(0x7ff00000) {
		goto _15
	}

	return *(*complex128)(unsafe.Pointer(func() uintptr {
		*(*struct {
			F__z  [0]complex128
			F__xy [0][2]float64
			F     int64
			_     [8]byte
		})(unsafe.Pointer(_unnamed13)) = *(*struct {
			F__z  [0]complex128
			F__xy [0][2]float64
			F     int64
			_     [8]byte
		})(unsafe.Pointer(&struct{ f [2]float64 }{[2]float64{
			0: _x * _x,
			1: _x * float64(_y-_y),
		}}))
		return _unnamed13
	}()))

_15:
	return *(*complex128)(unsafe.Pointer(func() uintptr {
		*(*struct {
			F__z  [0]complex128
			F__xy [0][2]float64
			F     int64
			_     [8]byte
		})(unsafe.Pointer(_unnamed14)) = *(*struct {
			F__z  [0]complex128
			F__xy [0][2]float64
			F     int64
			_     [8]byte
		})(unsafe.Pointer(&struct{ f [2]float64 }{[2]float64{
			0: float64(_x*_x) * Xcos(tls, _y),
			1: _x * Xsin(tls, _y),
		}}))
		return _unnamed14
	}()))

_14:
	return *(*complex128)(unsafe.Pointer(func() uintptr {
		*(*struct {
			F__z  [0]complex128
			F__xy [0][2]float64
			F     int64
			_     [8]byte
		})(unsafe.Pointer(_unnamed15)) = *(*struct {
			F__z  [0]complex128
			F__xy [0][2]float64
			F     int64
			_     [8]byte
		})(unsafe.Pointer(&struct{ f [2]float64 }{[2]float64{
			0: float64(_x*_x) * float64(_y-_y),
			1: float64(_x+_x) * float64(_y-_y),
		}}))
		return _unnamed15
	}()))
}

type t32__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t32__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type Tint32_t = int32

type t2uint64_t = uint64

type t3uint32_t = uint32

// xhuge float64, escapes: false, ccosh.c:39:21
var xhuge = float64(8.98846567431158e+307)

// linking ccoshf.o

// Xccoshf is defined at ccoshf.c:35:15
func Xccoshf(tls TLS, _z complex64) (r complex64) {
	esc := MustMalloc(264)
	var (
		_x         float32
		_y         float32
		_h         float32
		_hx        int32
		_hy        int32
		_ix        int32
		_iy        int32
		_unnamed1  = esc       // *struct{F__z [0]complex64;F__xy [0][2]float32;F int32; _ [4]byte}
		___u       = esc + 16  // *struct{Ff [0]float32;Fi [0]uint32;F int32}
		_1__u      = esc + 32  // *struct{Ff [0]float32;Fi [0]uint32;F int32}
		_unnamed2  = esc + 48  // *struct{F__z [0]complex64;F__xy [0][2]float32;F int32; _ [4]byte}
		_unnamed3  = esc + 64  // *struct{F__z [0]complex64;F__xy [0][2]float32;F int32; _ [4]byte}
		_unnamed4  = esc + 80  // *struct{F__z [0]complex64;F__xy [0][2]float32;F int32; _ [4]byte}
		_unnamed5  = esc + 96  // *struct{F__z [0]complex64;F__xy [0][2]float32;F int32; _ [4]byte}
		_unnamed6  = esc + 112 // *struct{F__z [0]complex64;F__xy [0][2]float32;F int32; _ [4]byte}
		_unnamed7  = esc + 128 // *struct{F__z [0]complex64;F__xy [0][2]float32;F int32; _ [4]byte}
		_unnamed8  = esc + 144 // *struct{F__z [0]complex64;F__xy [0][2]float32;F int32; _ [4]byte}
		_unnamed9  = esc + 160 // *struct{F__z [0]complex64;F__xy [0][2]float32;F int32; _ [4]byte}
		_unnamed10 = esc + 176 // *struct{F__z [0]complex64;F__xy [0][2]float32;F int32; _ [4]byte}
		_unnamed11 = esc + 192 // *struct{F__z [0]complex64;F__xy [0][2]float32;F int32; _ [4]byte}
		_unnamed12 = esc + 208 // *struct{F__z [0]complex64;F__xy [0][2]float32;F int32; _ [4]byte}
		_unnamed13 = esc + 224 // *struct{F__z [0]complex64;F__xy [0][2]float32;F int32; _ [4]byte}
		_unnamed14 = esc + 240 // *struct{F__z [0]complex64;F__xy [0][2]float32;F int32; _ [4]byte}
		_unnamed15 = esc + 256 // *struct{F__z [0]complex64;F__xy [0][2]float32;F int32; _ [4]byte}
	)
	defer Free(esc)
	_x = real(_z)
	_y = *(*float32)(unsafe.Pointer(func() uintptr {
		*(*struct {
			F__z  [0]complex64
			F__xy [0][2]float32
			F     int32
			_     [4]byte
		})(unsafe.Pointer(_unnamed1)) = *(*struct {
			F__z  [0]complex64
			F__xy [0][2]float32
			F     int32
			_     [4]byte
		})(unsafe.Pointer(&struct{ f complex64 }{_z}))
		return _unnamed1
	}() + 4))
	*(*float32)(unsafe.Pointer(___u)) = _x
	_hx = int32(*(*uint32)(unsafe.Pointer(___u)))
	*(*float32)(unsafe.Pointer(_1__u)) = _y
	_hy = int32(*(*uint32)(unsafe.Pointer(_1__u)))
	_ix = int32(0x7fffffff) & _hx
	_iy = int32(0x7fffffff) & _hy
	if _ix >= int32(0x7f800000) || _iy >= int32(0x7f800000) {
		goto _3
	}

	if _iy != int32(0) {
		goto _4
	}

	return *(*complex64)(unsafe.Pointer(func() uintptr {
		*(*struct {
			F__z  [0]complex64
			F__xy [0][2]float32
			F     int32
			_     [4]byte
		})(unsafe.Pointer(_unnamed2)) = *(*struct {
			F__z  [0]complex64
			F__xy [0][2]float32
			F     int32
			_     [4]byte
		})(unsafe.Pointer(&struct{ f [2]float32 }{[2]float32{
			0: Xcoshf(tls, _x),
			1: _x * _y,
		}}))
		return _unnamed2
	}()))

_4:
	if _ix >= int32(0x41100000) {
		goto _5
	}

	return *(*complex64)(unsafe.Pointer(func() uintptr {
		*(*struct {
			F__z  [0]complex64
			F__xy [0][2]float32
			F     int32
			_     [4]byte
		})(unsafe.Pointer(_unnamed3)) = *(*struct {
			F__z  [0]complex64
			F__xy [0][2]float32
			F     int32
			_     [4]byte
		})(unsafe.Pointer(&struct{ f [2]float32 }{[2]float32{
			0: Xcoshf(tls, _x) * Xcosf(tls, _y),
			1: Xsinhf(tls, _x) * Xsinf(tls, _y),
		}}))
		return _unnamed3
	}()))

_5:
	if _ix >= int32(0x42b17218) {
		goto _6
	}

	_h = Xexpf(tls, Xfabsf(tls, _x)) * float32(0.5)
	return *(*complex64)(unsafe.Pointer(func() uintptr {
		*(*struct {
			F__z  [0]complex64
			F__xy [0][2]float32
			F     int32
			_     [4]byte
		})(unsafe.Pointer(_unnamed4)) = *(*struct {
			F__z  [0]complex64
			F__xy [0][2]float32
			F     int32
			_     [4]byte
		})(unsafe.Pointer(&struct{ f [2]float32 }{[2]float32{
			0: _h * Xcosf(tls, _y),
			1: Xcopysignf(tls, _h, _x) * Xsinf(tls, _y),
		}}))
		return _unnamed4
	}()))

	goto _7

_6:
	if _ix >= int32(0x4340b1e7) {
		goto _8
	}

	_z = X__ldexp_cexpf(tls, *(*complex64)(unsafe.Pointer(func() uintptr {
		*(*struct {
			F__z  [0]complex64
			F__xy [0][2]float32
			F     int32
			_     [4]byte
		})(unsafe.Pointer(_unnamed5)) = *(*struct {
			F__z  [0]complex64
			F__xy [0][2]float32
			F     int32
			_     [4]byte
		})(unsafe.Pointer(&struct{ f [2]float32 }{[2]float32{
			0: Xfabsf(tls, _x),
			1: _y,
		}}))
		return _unnamed5
	}())), int32(-1))
	return *(*complex64)(unsafe.Pointer(func() uintptr {
		*(*struct {
			F__z  [0]complex64
			F__xy [0][2]float32
			F     int32
			_     [4]byte
		})(unsafe.Pointer(_unnamed7)) = *(*struct {
			F__z  [0]complex64
			F__xy [0][2]float32
			F     int32
			_     [4]byte
		})(unsafe.Pointer(&struct{ f [2]float32 }{[2]float32{
			0: real(_z),
			1: *(*float32)(unsafe.Pointer(func() uintptr {
				*(*struct {
					F__z  [0]complex64
					F__xy [0][2]float32
					F     int32
					_     [4]byte
				})(unsafe.Pointer(_unnamed6)) = *(*struct {
					F__z  [0]complex64
					F__xy [0][2]float32
					F     int32
					_     [4]byte
				})(unsafe.Pointer(&struct{ f complex64 }{_z}))
				return _unnamed6
			}() + 4)) * Xcopysignf(tls, float32(1), _x),
		}}))
		return _unnamed7
	}()))

	goto _9

_8:
	_h = x1huge * _x
	return *(*complex64)(unsafe.Pointer(func() uintptr {
		*(*struct {
			F__z  [0]complex64
			F__xy [0][2]float32
			F     int32
			_     [4]byte
		})(unsafe.Pointer(_unnamed8)) = *(*struct {
			F__z  [0]complex64
			F__xy [0][2]float32
			F     int32
			_     [4]byte
		})(unsafe.Pointer(&struct{ f [2]float32 }{[2]float32{
			0: float32(_h*_h) * Xcosf(tls, _y),
			1: _h * Xsinf(tls, _y),
		}}))
		return _unnamed8
	}()))

_9:
_7:
_3:
	if _ix != int32(0) || _iy < int32(0x7f800000) {
		goto _10
	}

	return *(*complex64)(unsafe.Pointer(func() uintptr {
		*(*struct {
			F__z  [0]complex64
			F__xy [0][2]float32
			F     int32
			_     [4]byte
		})(unsafe.Pointer(_unnamed9)) = *(*struct {
			F__z  [0]complex64
			F__xy [0][2]float32
			F     int32
			_     [4]byte
		})(unsafe.Pointer(&struct{ f [2]float32 }{[2]float32{
			0: _y - _y,
			1: Xcopysignf(tls, float32(0), _x*float32(_y-_y)),
		}}))
		return _unnamed9
	}()))

_10:
	if _iy != int32(0) || _ix < int32(0x7f800000) {
		goto _11
	}

	if _hx&int32(0x7fffff) != int32(0) {
		goto _12
	}

	return *(*complex64)(unsafe.Pointer(func() uintptr {
		*(*struct {
			F__z  [0]complex64
			F__xy [0][2]float32
			F     int32
			_     [4]byte
		})(unsafe.Pointer(_unnamed10)) = *(*struct {
			F__z  [0]complex64
			F__xy [0][2]float32
			F     int32
			_     [4]byte
		})(unsafe.Pointer(&struct{ f [2]float32 }{[2]float32{
			0: _x * _x,
			1: Xcopysignf(tls, float32(0), _x) * _y,
		}}))
		return _unnamed10
	}()))

_12:
	return *(*complex64)(unsafe.Pointer(func() uintptr {
		*(*struct {
			F__z  [0]complex64
			F__xy [0][2]float32
			F     int32
			_     [4]byte
		})(unsafe.Pointer(_unnamed11)) = *(*struct {
			F__z  [0]complex64
			F__xy [0][2]float32
			F     int32
			_     [4]byte
		})(unsafe.Pointer(&struct{ f [2]float32 }{[2]float32{
			0: _x * _x,
			1: Xcopysignf(tls, float32(0), float32(_x+_x)*_y),
		}}))
		return _unnamed11
	}()))

_11:
	if _ix >= int32(0x7f800000) || _iy < int32(0x7f800000) {
		goto _13
	}

	return *(*complex64)(unsafe.Pointer(func() uintptr {
		*(*struct {
			F__z  [0]complex64
			F__xy [0][2]float32
			F     int32
			_     [4]byte
		})(unsafe.Pointer(_unnamed12)) = *(*struct {
			F__z  [0]complex64
			F__xy [0][2]float32
			F     int32
			_     [4]byte
		})(unsafe.Pointer(&struct{ f [2]float32 }{[2]float32{
			0: _y - _y,
			1: _x * float32(_y-_y),
		}}))
		return _unnamed12
	}()))

_13:
	if _ix < int32(0x7f800000) || _hx&int32(0x7fffff) != int32(0) {
		goto _14
	}

	if _iy < int32(0x7f800000) {
		goto _15
	}

	return *(*complex64)(unsafe.Pointer(func() uintptr {
		*(*struct {
			F__z  [0]complex64
			F__xy [0][2]float32
			F     int32
			_     [4]byte
		})(unsafe.Pointer(_unnamed13)) = *(*struct {
			F__z  [0]complex64
			F__xy [0][2]float32
			F     int32
			_     [4]byte
		})(unsafe.Pointer(&struct{ f [2]float32 }{[2]float32{
			0: _x * _x,
			1: _x * float32(_y-_y),
		}}))
		return _unnamed13
	}()))

_15:
	return *(*complex64)(unsafe.Pointer(func() uintptr {
		*(*struct {
			F__z  [0]complex64
			F__xy [0][2]float32
			F     int32
			_     [4]byte
		})(unsafe.Pointer(_unnamed14)) = *(*struct {
			F__z  [0]complex64
			F__xy [0][2]float32
			F     int32
			_     [4]byte
		})(unsafe.Pointer(&struct{ f [2]float32 }{[2]float32{
			0: float32(_x*_x) * Xcosf(tls, _y),
			1: _x * Xsinf(tls, _y),
		}}))
		return _unnamed14
	}()))

_14:
	return *(*complex64)(unsafe.Pointer(func() uintptr {
		*(*struct {
			F__z  [0]complex64
			F__xy [0][2]float32
			F     int32
			_     [4]byte
		})(unsafe.Pointer(_unnamed15)) = *(*struct {
			F__z  [0]complex64
			F__xy [0][2]float32
			F     int32
			_     [4]byte
		})(unsafe.Pointer(&struct{ f [2]float32 }{[2]float32{
			0: float32(_x*_x) * float32(_y-_y),
			1: float32(_x+_x) * float32(_y-_y),
		}}))
		return _unnamed15
	}()))
}

type t33__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t33__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t1int32_t = int32

type t4uint32_t = uint32

// xhuge float32, escapes: false, ccoshf.c:33:20
var x1huge = float32(1.7014118e+38)

// linking ccoshl.o

// Xccoshl is defined at ccoshl.c:4:21
func Xccoshl(tls TLS, _z complex128) (r complex128) {
	return Xccosh(tls, _z)
}

type t34__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t34__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// linking ccosl.o

// Xccosl is defined at ccosl.c:4:21
func Xccosl(tls TLS, _z complex128) (r complex128) {
	return Xccos(tls, _z)
}

type t35__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t35__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// linking cexp.o

// Xcexp is defined at cexp.c:34:16
func Xcexp(tls TLS, _z complex128) (r complex128) {
	esc := MustMalloc(144)
	var (
		_x        float64
		_y        float64
		_exp_x    float64
		_hx       uint32
		_hy       uint32
		_lx       uint32
		_ly       uint32
		_unnamed1 = esc       // *struct{F__z [0]complex128;F__xy [0][2]float64;F int64; _ [8]byte}
		___u      = esc + 16  // *struct{Ff [0]float64;Fi [0]uint64;F int64}
		_unnamed2 = esc + 32  // *struct{F__z [0]complex128;F__xy [0][2]float64;F int64; _ [8]byte}
		_1__u     = esc + 48  // *struct{Ff [0]float64;Fi [0]uint64;F int64}
		_unnamed3 = esc + 64  // *struct{F__z [0]complex128;F__xy [0][2]float64;F int64; _ [8]byte}
		_unnamed4 = esc + 80  // *struct{F__z [0]complex128;F__xy [0][2]float64;F int64; _ [8]byte}
		_unnamed5 = esc + 96  // *struct{F__z [0]complex128;F__xy [0][2]float64;F int64; _ [8]byte}
		_unnamed6 = esc + 112 // *struct{F__z [0]complex128;F__xy [0][2]float64;F int64; _ [8]byte}
		_unnamed7 = esc + 128 // *struct{F__z [0]complex128;F__xy [0][2]float64;F int64; _ [8]byte}
	)
	defer Free(esc)
	_x = real(_z)
	_y = *(*float64)(unsafe.Pointer(func() uintptr {
		*(*struct {
			F__z  [0]complex128
			F__xy [0][2]float64
			F     int64
			_     [8]byte
		})(unsafe.Pointer(_unnamed1)) = *(*struct {
			F__z  [0]complex128
			F__xy [0][2]float64
			F     int64
			_     [8]byte
		})(unsafe.Pointer(&struct{ f complex128 }{_z}))
		return _unnamed1
	}() + 8))
	*(*float64)(unsafe.Pointer(___u)) = _y
	_hy = uint32(*(*uint64)(unsafe.Pointer(___u)) >> (uint(32) % 64))
	_ly = uint32(*(*uint64)(unsafe.Pointer(___u)))
	_hy = _hy & uint32(0x7fffffff)
	if _hy|_ly != uint32(0) {
		goto _2
	}

	return *(*complex128)(unsafe.Pointer(func() uintptr {
		*(*struct {
			F__z  [0]complex128
			F__xy [0][2]float64
			F     int64
			_     [8]byte
		})(unsafe.Pointer(_unnamed2)) = *(*struct {
			F__z  [0]complex128
			F__xy [0][2]float64
			F     int64
			_     [8]byte
		})(unsafe.Pointer(&struct{ f [2]float64 }{[2]float64{
			0: Xexp(tls, _x),
			1: _y,
		}}))
		return _unnamed2
	}()))

_2:
	*(*float64)(unsafe.Pointer(_1__u)) = _x
	_hx = uint32(*(*uint64)(unsafe.Pointer(_1__u)) >> (uint(32) % 64))
	_lx = uint32(*(*uint64)(unsafe.Pointer(_1__u)))
	if _hx&uint32(0x7fffffff)|_lx != uint32(0) {
		goto _4
	}

	return *(*complex128)(unsafe.Pointer(func() uintptr {
		*(*struct {
			F__z  [0]complex128
			F__xy [0][2]float64
			F     int64
			_     [8]byte
		})(unsafe.Pointer(_unnamed3)) = *(*struct {
			F__z  [0]complex128
			F__xy [0][2]float64
			F     int64
			_     [8]byte
		})(unsafe.Pointer(&struct{ f [2]float64 }{[2]float64{
			0: Xcos(tls, _y),
			1: Xsin(tls, _y),
		}}))
		return _unnamed3
	}()))

_4:
	if _hy < uint32(0x7ff00000) {
		goto _5
	}

	if _lx == uint32(0) && _hx&uint32(0x7fffffff) == uint32(0x7ff00000) {
		goto _6
	}

	return *(*complex128)(unsafe.Pointer(func() uintptr {
		*(*struct {
			F__z  [0]complex128
			F__xy [0][2]float64
			F     int64
			_     [8]byte
		})(unsafe.Pointer(_unnamed4)) = *(*struct {
			F__z  [0]complex128
			F__xy [0][2]float64
			F     int64
			_     [8]byte
		})(unsafe.Pointer(&struct{ f [2]float64 }{[2]float64{
			0: _y - _y,
			1: _y - _y,
		}}))
		return _unnamed4
	}()))

	goto _7

_6:
	if (_hx & uint32(0x80000000)) == 0 {
		goto _8
	}

	return *(*complex128)(unsafe.Pointer(func() uintptr {
		*(*struct {
			F__z  [0]complex128
			F__xy [0][2]float64
			F     int64
			_     [8]byte
		})(unsafe.Pointer(_unnamed5)) = struct {
			F__z  [0]complex128
			F__xy [0][2]float64
			F     int64
			_     [8]byte
		}{}
		return _unnamed5
	}()))

	goto _9

_8:
	return *(*complex128)(unsafe.Pointer(func() uintptr {
		*(*struct {
			F__z  [0]complex128
			F__xy [0][2]float64
			F     int64
			_     [8]byte
		})(unsafe.Pointer(_unnamed6)) = *(*struct {
			F__z  [0]complex128
			F__xy [0][2]float64
			F     int64
			_     [8]byte
		})(unsafe.Pointer(&struct{ f [2]float64 }{[2]float64{
			0: _x,
			1: _y - _y,
		}}))
		return _unnamed6
	}()))

_9:
_7:
_5:
	if _hx < xexp_ovfl || _hx > xcexp_ovfl {
		goto _10
	}

	return X__ldexp_cexp(tls, _z, int32(0))

	goto _11

_10:
	_exp_x = Xexp(tls, _x)
	return *(*complex128)(unsafe.Pointer(func() uintptr {
		*(*struct {
			F__z  [0]complex128
			F__xy [0][2]float64
			F     int64
			_     [8]byte
		})(unsafe.Pointer(_unnamed7)) = *(*struct {
			F__z  [0]complex128
			F__xy [0][2]float64
			F     int64
			_     [8]byte
		})(unsafe.Pointer(&struct{ f [2]float64 }{[2]float64{
			0: _exp_x * Xcos(tls, _y),
			1: _exp_x * Xsin(tls, _y),
		}}))
		return _unnamed7
	}()))

_11:
	return r
}

type t36__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t36__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t5uint32_t = uint32

type t3uint64_t = uint64

// xexp_ovfl Tuint32_t = uint32, escapes: false, cexp.c:31:1
var xexp_ovfl = uint32(0x40862e42)

// xcexp_ovfl Tuint32_t = uint32, escapes: false, cexp.c:32:1
var xcexp_ovfl = uint32(0x4096b8e4)

// linking cexpf.o

// Xcexpf is defined at cexpf.c:34:15
func Xcexpf(tls TLS, _z complex64) (r complex64) {
	esc := MustMalloc(136)
	var (
		_x        float32
		_y        float32
		_exp_x    float32
		_hx       uint32
		_hy       uint32
		_unnamed1 = esc       // *struct{F__z [0]complex64;F__xy [0][2]float32;F int32; _ [4]byte}
		___u      = esc + 16  // *struct{Ff [0]float32;Fi [0]uint32;F int32}
		_unnamed2 = esc + 32  // *struct{F__z [0]complex64;F__xy [0][2]float32;F int32; _ [4]byte}
		_1__u     = esc + 48  // *struct{Ff [0]float32;Fi [0]uint32;F int32}
		_unnamed3 = esc + 64  // *struct{F__z [0]complex64;F__xy [0][2]float32;F int32; _ [4]byte}
		_unnamed4 = esc + 80  // *struct{F__z [0]complex64;F__xy [0][2]float32;F int32; _ [4]byte}
		_unnamed5 = esc + 96  // *struct{F__z [0]complex64;F__xy [0][2]float32;F int32; _ [4]byte}
		_unnamed6 = esc + 112 // *struct{F__z [0]complex64;F__xy [0][2]float32;F int32; _ [4]byte}
		_unnamed7 = esc + 128 // *struct{F__z [0]complex64;F__xy [0][2]float32;F int32; _ [4]byte}
	)
	defer Free(esc)
	_x = real(_z)
	_y = *(*float32)(unsafe.Pointer(func() uintptr {
		*(*struct {
			F__z  [0]complex64
			F__xy [0][2]float32
			F     int32
			_     [4]byte
		})(unsafe.Pointer(_unnamed1)) = *(*struct {
			F__z  [0]complex64
			F__xy [0][2]float32
			F     int32
			_     [4]byte
		})(unsafe.Pointer(&struct{ f complex64 }{_z}))
		return _unnamed1
	}() + 4))
	*(*float32)(unsafe.Pointer(___u)) = _y
	_hy = *(*uint32)(unsafe.Pointer(___u))
	_hy = _hy & uint32(0x7fffffff)
	if _hy != uint32(0) {
		goto _2
	}

	return *(*complex64)(unsafe.Pointer(func() uintptr {
		*(*struct {
			F__z  [0]complex64
			F__xy [0][2]float32
			F     int32
			_     [4]byte
		})(unsafe.Pointer(_unnamed2)) = *(*struct {
			F__z  [0]complex64
			F__xy [0][2]float32
			F     int32
			_     [4]byte
		})(unsafe.Pointer(&struct{ f [2]float32 }{[2]float32{
			0: Xexpf(tls, _x),
			1: _y,
		}}))
		return _unnamed2
	}()))

_2:
	*(*float32)(unsafe.Pointer(_1__u)) = _x
	_hx = *(*uint32)(unsafe.Pointer(_1__u))
	if _hx&uint32(0x7fffffff) != uint32(0) {
		goto _4
	}

	return *(*complex64)(unsafe.Pointer(func() uintptr {
		*(*struct {
			F__z  [0]complex64
			F__xy [0][2]float32
			F     int32
			_     [4]byte
		})(unsafe.Pointer(_unnamed3)) = *(*struct {
			F__z  [0]complex64
			F__xy [0][2]float32
			F     int32
			_     [4]byte
		})(unsafe.Pointer(&struct{ f [2]float32 }{[2]float32{
			0: Xcosf(tls, _y),
			1: Xsinf(tls, _y),
		}}))
		return _unnamed3
	}()))

_4:
	if _hy < uint32(0x7f800000) {
		goto _5
	}

	if _hx&uint32(0x7fffffff) == uint32(0x7f800000) {
		goto _6
	}

	return *(*complex64)(unsafe.Pointer(func() uintptr {
		*(*struct {
			F__z  [0]complex64
			F__xy [0][2]float32
			F     int32
			_     [4]byte
		})(unsafe.Pointer(_unnamed4)) = *(*struct {
			F__z  [0]complex64
			F__xy [0][2]float32
			F     int32
			_     [4]byte
		})(unsafe.Pointer(&struct{ f [2]float32 }{[2]float32{
			0: _y - _y,
			1: _y - _y,
		}}))
		return _unnamed4
	}()))

	goto _7

_6:
	if (_hx & uint32(0x80000000)) == 0 {
		goto _8
	}

	return *(*complex64)(unsafe.Pointer(func() uintptr {
		*(*struct {
			F__z  [0]complex64
			F__xy [0][2]float32
			F     int32
			_     [4]byte
		})(unsafe.Pointer(_unnamed5)) = struct {
			F__z  [0]complex64
			F__xy [0][2]float32
			F     int32
			_     [4]byte
		}{}
		return _unnamed5
	}()))

	goto _9

_8:
	return *(*complex64)(unsafe.Pointer(func() uintptr {
		*(*struct {
			F__z  [0]complex64
			F__xy [0][2]float32
			F     int32
			_     [4]byte
		})(unsafe.Pointer(_unnamed6)) = *(*struct {
			F__z  [0]complex64
			F__xy [0][2]float32
			F     int32
			_     [4]byte
		})(unsafe.Pointer(&struct{ f [2]float32 }{[2]float32{
			0: _x,
			1: _y - _y,
		}}))
		return _unnamed6
	}()))

_9:
_7:
_5:
	if _hx < x1exp_ovfl || _hx > x1cexp_ovfl {
		goto _10
	}

	return X__ldexp_cexpf(tls, _z, int32(0))

	goto _11

_10:
	_exp_x = Xexpf(tls, _x)
	return *(*complex64)(unsafe.Pointer(func() uintptr {
		*(*struct {
			F__z  [0]complex64
			F__xy [0][2]float32
			F     int32
			_     [4]byte
		})(unsafe.Pointer(_unnamed7)) = *(*struct {
			F__z  [0]complex64
			F__xy [0][2]float32
			F     int32
			_     [4]byte
		})(unsafe.Pointer(&struct{ f [2]float32 }{[2]float32{
			0: _exp_x * Xcosf(tls, _y),
			1: _exp_x * Xsinf(tls, _y),
		}}))
		return _unnamed7
	}()))

_11:
	return r
}

type t37__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t37__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t6uint32_t = uint32

// xexp_ovfl Tuint32_t = uint32, escapes: false, cexpf.c:31:1
var x1exp_ovfl = uint32(0x42b17218)

// xcexp_ovfl Tuint32_t = uint32, escapes: false, cexpf.c:32:1
var x1cexp_ovfl = uint32(0x43400074)

// linking cexpl.o

// Xcexpl is defined at cexpl.c:4:21
func Xcexpl(tls TLS, _z complex128) (r complex128) {
	return Xcexp(tls, _z)
}

type t38__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t38__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// linking cimag.o

// Xcimag is defined at cimag.c:3:8
func Xcimag(tls TLS, _z complex128) (r float64) {
	esc := MustMalloc(16)
	var _unnamed1 = esc // *struct{F__z [0]complex128;F__xy [0][2]float64;F int64; _ [8]byte}
	defer Free(esc)
	return *(*float64)(unsafe.Pointer(func() uintptr {
		*(*struct {
			F__z  [0]complex128
			F__xy [0][2]float64
			F     int64
			_     [8]byte
		})(unsafe.Pointer(_unnamed1)) = *(*struct {
			F__z  [0]complex128
			F__xy [0][2]float64
			F     int64
			_     [8]byte
		})(unsafe.Pointer(&struct{ f complex128 }{_z}))
		return _unnamed1
	}() + 8))
}

type t39__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t39__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// linking cimagf.o

// Xcimagf is defined at cimagf.c:3:7
func Xcimagf(tls TLS, _z complex64) (r float32) {
	esc := MustMalloc(8)
	var _unnamed1 = esc // *struct{F__z [0]complex64;F__xy [0][2]float32;F int32; _ [4]byte}
	defer Free(esc)
	return *(*float32)(unsafe.Pointer(func() uintptr {
		*(*struct {
			F__z  [0]complex64
			F__xy [0][2]float32
			F     int32
			_     [4]byte
		})(unsafe.Pointer(_unnamed1)) = *(*struct {
			F__z  [0]complex64
			F__xy [0][2]float32
			F     int32
			_     [4]byte
		})(unsafe.Pointer(&struct{ f complex64 }{_z}))
		return _unnamed1
	}() + 4))
}

type t40__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t40__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// linking cimagl.o

// Xcimagl is defined at cimagl.c:3:13
func Xcimagl(tls TLS, _z complex128) (r float64) {
	esc := MustMalloc(16)
	var _unnamed1 = esc // *struct{F__z [0]complex128;F__xy [0][2]float64;F int64; _ [8]byte}
	defer Free(esc)
	return *(*float64)(unsafe.Pointer(func() uintptr {
		*(*struct {
			F__z  [0]complex128
			F__xy [0][2]float64
			F     int64
			_     [8]byte
		})(unsafe.Pointer(_unnamed1)) = *(*struct {
			F__z  [0]complex128
			F__xy [0][2]float64
			F     int64
			_     [8]byte
		})(unsafe.Pointer(&struct{ f complex128 }{_z}))
		return _unnamed1
	}() + 8))
}

type t41__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t41__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// linking clog.o

// Xclog is defined at clog.c:7:16
func Xclog(tls TLS, _z complex128) (r complex128) {
	esc := MustMalloc(16)
	var (
		_r        float64
		_phi      float64
		_unnamed1 = esc // *struct{F__z [0]complex128;F__xy [0][2]float64;F int64; _ [8]byte}
	)
	defer Free(esc)
	_r = Xcabs(tls, _z)
	_phi = Xcarg(tls, _z)
	return *(*complex128)(unsafe.Pointer(func() uintptr {
		*(*struct {
			F__z  [0]complex128
			F__xy [0][2]float64
			F     int64
			_     [8]byte
		})(unsafe.Pointer(_unnamed1)) = *(*struct {
			F__z  [0]complex128
			F__xy [0][2]float64
			F     int64
			_     [8]byte
		})(unsafe.Pointer(&struct{ f [2]float64 }{[2]float64{
			0: Xlog(tls, _r),
			1: _phi,
		}}))
		return _unnamed1
	}()))
}

type t42__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t42__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// linking clogf.o

// Xclogf is defined at clogf.c:5:15
func Xclogf(tls TLS, _z complex64) (r complex64) {
	esc := MustMalloc(8)
	var (
		_r        float32
		_phi      float32
		_unnamed1 = esc // *struct{F__z [0]complex64;F__xy [0][2]float32;F int32; _ [4]byte}
	)
	defer Free(esc)
	_r = Xcabsf(tls, _z)
	_phi = Xcargf(tls, _z)
	return *(*complex64)(unsafe.Pointer(func() uintptr {
		*(*struct {
			F__z  [0]complex64
			F__xy [0][2]float32
			F     int32
			_     [4]byte
		})(unsafe.Pointer(_unnamed1)) = *(*struct {
			F__z  [0]complex64
			F__xy [0][2]float32
			F     int32
			_     [4]byte
		})(unsafe.Pointer(&struct{ f [2]float32 }{[2]float32{
			0: Xlogf(tls, _r),
			1: _phi,
		}}))
		return _unnamed1
	}()))
}

type t43__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t43__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// linking clogl.o

// Xclogl is defined at clogl.c:4:21
func Xclogl(tls TLS, _z complex128) (r complex128) {
	return Xclog(tls, _z)
}

type t44__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t44__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// linking conj.o

// Xconj is defined at conj.c:3:16
func Xconj(tls TLS, _z complex128) (r complex128) {
	esc := MustMalloc(32)
	var (
		_unnamed1 = esc      // *struct{F__z [0]complex128;F__xy [0][2]float64;F int64; _ [8]byte}
		_unnamed2 = esc + 16 // *struct{F__z [0]complex128;F__xy [0][2]float64;F int64; _ [8]byte}
	)
	defer Free(esc)
	return *(*complex128)(unsafe.Pointer(func() uintptr {
		*(*struct {
			F__z  [0]complex128
			F__xy [0][2]float64
			F     int64
			_     [8]byte
		})(unsafe.Pointer(_unnamed2)) = *(*struct {
			F__z  [0]complex128
			F__xy [0][2]float64
			F     int64
			_     [8]byte
		})(unsafe.Pointer(&struct{ f [2]float64 }{[2]float64{
			0: real(_z),
			1: -*(*float64)(unsafe.Pointer(func() uintptr {
				*(*struct {
					F__z  [0]complex128
					F__xy [0][2]float64
					F     int64
					_     [8]byte
				})(unsafe.Pointer(_unnamed1)) = *(*struct {
					F__z  [0]complex128
					F__xy [0][2]float64
					F     int64
					_     [8]byte
				})(unsafe.Pointer(&struct{ f complex128 }{_z}))
				return _unnamed1
			}() + 8)),
		}}))
		return _unnamed2
	}()))
}

type t45__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t45__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// linking conjf.o

// Xconjf is defined at conjf.c:3:15
func Xconjf(tls TLS, _z complex64) (r complex64) {
	esc := MustMalloc(24)
	var (
		_unnamed1 = esc      // *struct{F__z [0]complex64;F__xy [0][2]float32;F int32; _ [4]byte}
		_unnamed2 = esc + 16 // *struct{F__z [0]complex64;F__xy [0][2]float32;F int32; _ [4]byte}
	)
	defer Free(esc)
	return *(*complex64)(unsafe.Pointer(func() uintptr {
		*(*struct {
			F__z  [0]complex64
			F__xy [0][2]float32
			F     int32
			_     [4]byte
		})(unsafe.Pointer(_unnamed2)) = *(*struct {
			F__z  [0]complex64
			F__xy [0][2]float32
			F     int32
			_     [4]byte
		})(unsafe.Pointer(&struct{ f [2]float32 }{[2]float32{
			0: real(_z),
			1: -*(*float32)(unsafe.Pointer(func() uintptr {
				*(*struct {
					F__z  [0]complex64
					F__xy [0][2]float32
					F     int32
					_     [4]byte
				})(unsafe.Pointer(_unnamed1)) = *(*struct {
					F__z  [0]complex64
					F__xy [0][2]float32
					F     int32
					_     [4]byte
				})(unsafe.Pointer(&struct{ f complex64 }{_z}))
				return _unnamed1
			}() + 4)),
		}}))
		return _unnamed2
	}()))
}

type t46__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t46__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// linking conjl.o

// Xconjl is defined at conjl.c:3:21
func Xconjl(tls TLS, _z complex128) (r complex128) {
	esc := MustMalloc(32)
	var (
		_unnamed1 = esc      // *struct{F__z [0]complex128;F__xy [0][2]float64;F int64; _ [8]byte}
		_unnamed2 = esc + 16 // *struct{F__z [0]complex128;F__xy [0][2]float64;F int64; _ [8]byte}
	)
	defer Free(esc)
	return *(*complex128)(unsafe.Pointer(func() uintptr {
		*(*struct {
			F__z  [0]complex128
			F__xy [0][2]float64
			F     int64
			_     [8]byte
		})(unsafe.Pointer(_unnamed2)) = *(*struct {
			F__z  [0]complex128
			F__xy [0][2]float64
			F     int64
			_     [8]byte
		})(unsafe.Pointer(&struct{ f [2]float64 }{[2]float64{
			0: real(_z),
			1: -*(*float64)(unsafe.Pointer(func() uintptr {
				*(*struct {
					F__z  [0]complex128
					F__xy [0][2]float64
					F     int64
					_     [8]byte
				})(unsafe.Pointer(_unnamed1)) = *(*struct {
					F__z  [0]complex128
					F__xy [0][2]float64
					F     int64
					_     [8]byte
				})(unsafe.Pointer(&struct{ f complex128 }{_z}))
				return _unnamed1
			}() + 8)),
		}}))
		return _unnamed2
	}()))
}

type t47__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t47__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// linking cpow.o

// Xcpow is defined at cpow.c:5:16
func Xcpow(tls TLS, _z complex128, _c complex128) (r complex128) {
	return Xcexp(tls, _c*Xclog(tls, _z))
}

type t48__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t48__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// linking cpowf.o

// Xcpowf is defined at cpowf.c:3:15
func Xcpowf(tls TLS, _z complex64, _c complex64) (r complex64) {
	return Xcexpf(tls, _c*Xclogf(tls, _z))
}

type t49__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t49__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// linking cpowl.o

// Xcpowl is defined at cpowl.c:4:21
func Xcpowl(tls TLS, _z complex128, _c complex128) (r complex128) {
	return Xcpow(tls, _z, _c)
}

type t50__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t50__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// linking cproj.o

// Xcproj is defined at cproj.c:3:16
func Xcproj(tls TLS, _z complex128) (r complex128) {
	esc := MustMalloc(64)
	var (
		_unnamed1 = esc // *struct{F__z [0]complex128;F__xy [0][2]float64;F int64; _ [8]byte}
		_         = _unnamed1
		_unnamed2 = esc + 16 // *struct{F__z [0]complex128;F__xy [0][2]float64;F int64; _ [8]byte}
		_         = _unnamed2
		_unnamed3 = esc + 32 // *struct{F__z [0]complex128;F__xy [0][2]float64;F int64; _ [8]byte}
		_unnamed4 = esc + 48 // *struct{F__z [0]complex128;F__xy [0][2]float64;F int64; _ [8]byte}
	)
	defer Free(esc)
	if x__DOUBLE_BITS(tls, real(_z))&uint64(9223372036854775807) != uint64(9218868437227405312) && x__DOUBLE_BITS(tls, *(*float64)(unsafe.Pointer(func() uintptr {
		*(*struct {
			F__z  [0]complex128
			F__xy [0][2]float64
			F     int64
			_     [8]byte
		})(unsafe.Pointer(_unnamed3)) = *(*struct {
			F__z  [0]complex128
			F__xy [0][2]float64
			F     int64
			_     [8]byte
		})(unsafe.Pointer(&struct{ f complex128 }{_z}))
		return _unnamed3
	}() + 8)))&uint64(9223372036854775807) != uint64(9218868437227405312) {
		goto _1
	}

	return *(*complex128)(unsafe.Pointer(func() uintptr {
		*(*struct {
			F__z  [0]complex128
			F__xy [0][2]float64
			F     int64
			_     [8]byte
		})(unsafe.Pointer(_unnamed4)) = *(*struct {
			F__z  [0]complex128
			F__xy [0][2]float64
			F     int64
			_     [8]byte
		})(unsafe.Pointer(&struct{ f [2]float64 }{[2]float64{
			0: math.Inf(1),
			1: Xcopysign(tls, float64(0), real(_z)),
		}}))
		return _unnamed4
	}()))

_1:
	return _z
}

type t51__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t51__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// x__DOUBLE_BITS is defined at math.h:49:36
func x__DOUBLE_BITS(tls TLS, ___f float64) (r uint64) {
	esc := MustMalloc(8)
	var ___u = esc // *struct{F__f [0]float64;F__i [0]uint64;F int64}
	defer Free(esc)
	*(*float64)(unsafe.Pointer(___u)) = ___f
	return *(*uint64)(unsafe.Pointer(___u))
}

// linking cprojf.o

// Xcprojf is defined at cprojf.c:3:15
func Xcprojf(tls TLS, _z complex64) (r complex64) {
	esc := MustMalloc(40)
	var (
		_unnamed1 = esc // *struct{F__z [0]complex64;F__xy [0][2]float32;F int32; _ [4]byte}
		_         = _unnamed1
		_unnamed2 = esc + 16 // *struct{F__z [0]complex64;F__xy [0][2]float32;F int32; _ [4]byte}
		_unnamed3 = esc + 32 // *struct{F__z [0]complex64;F__xy [0][2]float32;F int32; _ [4]byte}
	)
	defer Free(esc)
	if x__FLOAT_BITS(tls, real(_z))&uint32(0x7fffffff) != uint32(0x7f800000) && x__FLOAT_BITS(tls, *(*float32)(unsafe.Pointer(func() uintptr {
		*(*struct {
			F__z  [0]complex64
			F__xy [0][2]float32
			F     int32
			_     [4]byte
		})(unsafe.Pointer(_unnamed2)) = *(*struct {
			F__z  [0]complex64
			F__xy [0][2]float32
			F     int32
			_     [4]byte
		})(unsafe.Pointer(&struct{ f complex64 }{_z}))
		return _unnamed2
	}() + 4)))&uint32(0x7fffffff) != uint32(0x7f800000) {
		goto _1
	}

	return *(*complex64)(unsafe.Pointer(func() uintptr {
		*(*struct {
			F__z  [0]complex64
			F__xy [0][2]float32
			F     int32
			_     [4]byte
		})(unsafe.Pointer(_unnamed3)) = *(*struct {
			F__z  [0]complex64
			F__xy [0][2]float32
			F     int32
			_     [4]byte
		})(unsafe.Pointer(&struct{ f [2]float32 }{[2]float32{
			0: float32(math.Inf(1)),
			1: Xcopysignf(tls, float32(0), real(_z)),
		}}))
		return _unnamed3
	}()))

_1:
	return _z
}

type t52__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t52__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// x__FLOAT_BITS is defined at math.h:43:26
func x__FLOAT_BITS(tls TLS, ___f float32) (r uint32) {
	esc := MustMalloc(4)
	var ___u = esc // *struct{F__f [0]float32;F__i [0]uint32;F int32}
	defer Free(esc)
	*(*float32)(unsafe.Pointer(___u)) = ___f
	return *(*uint32)(unsafe.Pointer(___u))
}

// linking cprojl.o

// Xcprojl is defined at cprojl.c:4:21
func Xcprojl(tls TLS, _z complex128) (r complex128) {
	return Xcproj(tls, _z)
}

type t53__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t53__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// linking creal.o

// Xcreal is defined at creal.c:3:8
func Xcreal(tls TLS, _z complex128) (r float64) {
	return real(_z)
}

type t54__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t54__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// linking crealf.o

// Xcrealf is defined at crealf.c:3:7
func Xcrealf(tls TLS, _z complex64) (r float32) {
	return real(_z)
}

type t55__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t55__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// linking creall.o

// Xcreall is defined at creall.c:3:13
func Xcreall(tls TLS, _z complex128) (r float64) {
	return real(_z)
}

type t56__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t56__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// linking csin.o

// Xcsin is defined at csin.c:5:16
func Xcsin(tls TLS, _z complex128) (r complex128) {
	esc := MustMalloc(64)
	var (
		_unnamed1 = esc      // *struct{F__z [0]complex128;F__xy [0][2]float64;F int64; _ [8]byte}
		_unnamed2 = esc + 16 // *struct{F__z [0]complex128;F__xy [0][2]float64;F int64; _ [8]byte}
		_unnamed3 = esc + 32 // *struct{F__z [0]complex128;F__xy [0][2]float64;F int64; _ [8]byte}
		_unnamed4 = esc + 48 // *struct{F__z [0]complex128;F__xy [0][2]float64;F int64; _ [8]byte}
	)
	defer Free(esc)
	_z = Xcsinh(tls, *(*complex128)(unsafe.Pointer(func() uintptr {
		*(*struct {
			F__z  [0]complex128
			F__xy [0][2]float64
			F     int64
			_     [8]byte
		})(unsafe.Pointer(_unnamed2)) = *(*struct {
			F__z  [0]complex128
			F__xy [0][2]float64
			F     int64
			_     [8]byte
		})(unsafe.Pointer(&struct{ f [2]float64 }{[2]float64{
			0: -*(*float64)(unsafe.Pointer(func() uintptr {
				*(*struct {
					F__z  [0]complex128
					F__xy [0][2]float64
					F     int64
					_     [8]byte
				})(unsafe.Pointer(_unnamed1)) = *(*struct {
					F__z  [0]complex128
					F__xy [0][2]float64
					F     int64
					_     [8]byte
				})(unsafe.Pointer(&struct{ f complex128 }{_z}))
				return _unnamed1
			}() + 8)),
			1: real(_z),
		}}))
		return _unnamed2
	}())))
	return *(*complex128)(unsafe.Pointer(func() uintptr {
		*(*struct {
			F__z  [0]complex128
			F__xy [0][2]float64
			F     int64
			_     [8]byte
		})(unsafe.Pointer(_unnamed4)) = *(*struct {
			F__z  [0]complex128
			F__xy [0][2]float64
			F     int64
			_     [8]byte
		})(unsafe.Pointer(&struct{ f [2]float64 }{[2]float64{
			0: *(*float64)(unsafe.Pointer(func() uintptr {
				*(*struct {
					F__z  [0]complex128
					F__xy [0][2]float64
					F     int64
					_     [8]byte
				})(unsafe.Pointer(_unnamed3)) = *(*struct {
					F__z  [0]complex128
					F__xy [0][2]float64
					F     int64
					_     [8]byte
				})(unsafe.Pointer(&struct{ f complex128 }{_z}))
				return _unnamed3
			}() + 8)),
			1: -real(_z),
		}}))
		return _unnamed4
	}()))
}

type t57__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t57__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// linking csinf.o

// Xcsinf is defined at csinf.c:3:15
func Xcsinf(tls TLS, _z complex64) (r complex64) {
	esc := MustMalloc(56)
	var (
		_unnamed1 = esc      // *struct{F__z [0]complex64;F__xy [0][2]float32;F int32; _ [4]byte}
		_unnamed2 = esc + 16 // *struct{F__z [0]complex64;F__xy [0][2]float32;F int32; _ [4]byte}
		_unnamed3 = esc + 32 // *struct{F__z [0]complex64;F__xy [0][2]float32;F int32; _ [4]byte}
		_unnamed4 = esc + 48 // *struct{F__z [0]complex64;F__xy [0][2]float32;F int32; _ [4]byte}
	)
	defer Free(esc)
	_z = Xcsinhf(tls, *(*complex64)(unsafe.Pointer(func() uintptr {
		*(*struct {
			F__z  [0]complex64
			F__xy [0][2]float32
			F     int32
			_     [4]byte
		})(unsafe.Pointer(_unnamed2)) = *(*struct {
			F__z  [0]complex64
			F__xy [0][2]float32
			F     int32
			_     [4]byte
		})(unsafe.Pointer(&struct{ f [2]float32 }{[2]float32{
			0: -*(*float32)(unsafe.Pointer(func() uintptr {
				*(*struct {
					F__z  [0]complex64
					F__xy [0][2]float32
					F     int32
					_     [4]byte
				})(unsafe.Pointer(_unnamed1)) = *(*struct {
					F__z  [0]complex64
					F__xy [0][2]float32
					F     int32
					_     [4]byte
				})(unsafe.Pointer(&struct{ f complex64 }{_z}))
				return _unnamed1
			}() + 4)),
			1: real(_z),
		}}))
		return _unnamed2
	}())))
	return *(*complex64)(unsafe.Pointer(func() uintptr {
		*(*struct {
			F__z  [0]complex64
			F__xy [0][2]float32
			F     int32
			_     [4]byte
		})(unsafe.Pointer(_unnamed4)) = *(*struct {
			F__z  [0]complex64
			F__xy [0][2]float32
			F     int32
			_     [4]byte
		})(unsafe.Pointer(&struct{ f [2]float32 }{[2]float32{
			0: *(*float32)(unsafe.Pointer(func() uintptr {
				*(*struct {
					F__z  [0]complex64
					F__xy [0][2]float32
					F     int32
					_     [4]byte
				})(unsafe.Pointer(_unnamed3)) = *(*struct {
					F__z  [0]complex64
					F__xy [0][2]float32
					F     int32
					_     [4]byte
				})(unsafe.Pointer(&struct{ f complex64 }{_z}))
				return _unnamed3
			}() + 4)),
			1: -real(_z),
		}}))
		return _unnamed4
	}()))
}

type t58__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t58__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// linking csinh.o

// Xcsinh is defined at csinh.c:41:16
func Xcsinh(tls TLS, _z complex128) (r complex128) {
	esc := MustMalloc(272)
	var (
		_x         float64
		_y         float64
		_h         float64
		_hx        int32
		_hy        int32
		_ix        int32
		_iy        int32
		_lx        int32
		_ly        int32
		_unnamed1  = esc       // *struct{F__z [0]complex128;F__xy [0][2]float64;F int64; _ [8]byte}
		___u       = esc + 16  // *struct{Ff [0]float64;Fi [0]uint64;F int64}
		_1__u      = esc + 32  // *struct{Ff [0]float64;Fi [0]uint64;F int64}
		_unnamed2  = esc + 48  // *struct{F__z [0]complex128;F__xy [0][2]float64;F int64; _ [8]byte}
		_unnamed3  = esc + 64  // *struct{F__z [0]complex128;F__xy [0][2]float64;F int64; _ [8]byte}
		_unnamed4  = esc + 80  // *struct{F__z [0]complex128;F__xy [0][2]float64;F int64; _ [8]byte}
		_unnamed5  = esc + 96  // *struct{F__z [0]complex128;F__xy [0][2]float64;F int64; _ [8]byte}
		_unnamed6  = esc + 112 // *struct{F__z [0]complex128;F__xy [0][2]float64;F int64; _ [8]byte}
		_unnamed7  = esc + 128 // *struct{F__z [0]complex128;F__xy [0][2]float64;F int64; _ [8]byte}
		_unnamed8  = esc + 144 // *struct{F__z [0]complex128;F__xy [0][2]float64;F int64; _ [8]byte}
		_unnamed9  = esc + 160 // *struct{F__z [0]complex128;F__xy [0][2]float64;F int64; _ [8]byte}
		_unnamed10 = esc + 176 // *struct{F__z [0]complex128;F__xy [0][2]float64;F int64; _ [8]byte}
		_unnamed11 = esc + 192 // *struct{F__z [0]complex128;F__xy [0][2]float64;F int64; _ [8]byte}
		_unnamed12 = esc + 208 // *struct{F__z [0]complex128;F__xy [0][2]float64;F int64; _ [8]byte}
		_unnamed13 = esc + 224 // *struct{F__z [0]complex128;F__xy [0][2]float64;F int64; _ [8]byte}
		_unnamed14 = esc + 240 // *struct{F__z [0]complex128;F__xy [0][2]float64;F int64; _ [8]byte}
		_unnamed15 = esc + 256 // *struct{F__z [0]complex128;F__xy [0][2]float64;F int64; _ [8]byte}
	)
	defer Free(esc)
	_x = real(_z)
	_y = *(*float64)(unsafe.Pointer(func() uintptr {
		*(*struct {
			F__z  [0]complex128
			F__xy [0][2]float64
			F     int64
			_     [8]byte
		})(unsafe.Pointer(_unnamed1)) = *(*struct {
			F__z  [0]complex128
			F__xy [0][2]float64
			F     int64
			_     [8]byte
		})(unsafe.Pointer(&struct{ f complex128 }{_z}))
		return _unnamed1
	}() + 8))
	*(*float64)(unsafe.Pointer(___u)) = _x
	_hx = int32(*(*uint64)(unsafe.Pointer(___u)) >> (uint(32) % 64))
	_lx = int32(uint32(*(*uint64)(unsafe.Pointer(___u))))
	*(*float64)(unsafe.Pointer(_1__u)) = _y
	_hy = int32(*(*uint64)(unsafe.Pointer(_1__u)) >> (uint(32) % 64))
	_ly = int32(uint32(*(*uint64)(unsafe.Pointer(_1__u))))
	_ix = int32(0x7fffffff) & _hx
	_iy = int32(0x7fffffff) & _hy
	if _ix >= int32(0x7ff00000) || _iy >= int32(0x7ff00000) {
		goto _3
	}

	if _iy|_ly != int32(0) {
		goto _4
	}

	return *(*complex128)(unsafe.Pointer(func() uintptr {
		*(*struct {
			F__z  [0]complex128
			F__xy [0][2]float64
			F     int64
			_     [8]byte
		})(unsafe.Pointer(_unnamed2)) = *(*struct {
			F__z  [0]complex128
			F__xy [0][2]float64
			F     int64
			_     [8]byte
		})(unsafe.Pointer(&struct{ f [2]float64 }{[2]float64{
			0: Xsinh(tls, _x),
			1: _y,
		}}))
		return _unnamed2
	}()))

_4:
	if _ix >= int32(0x40360000) {
		goto _5
	}

	return *(*complex128)(unsafe.Pointer(func() uintptr {
		*(*struct {
			F__z  [0]complex128
			F__xy [0][2]float64
			F     int64
			_     [8]byte
		})(unsafe.Pointer(_unnamed3)) = *(*struct {
			F__z  [0]complex128
			F__xy [0][2]float64
			F     int64
			_     [8]byte
		})(unsafe.Pointer(&struct{ f [2]float64 }{[2]float64{
			0: Xsinh(tls, _x) * Xcos(tls, _y),
			1: Xcosh(tls, _x) * Xsin(tls, _y),
		}}))
		return _unnamed3
	}()))

_5:
	if _ix >= int32(0x40862e42) {
		goto _6
	}

	_h = Xexp(tls, Xfabs(tls, _x)) * float64(0.5)
	return *(*complex128)(unsafe.Pointer(func() uintptr {
		*(*struct {
			F__z  [0]complex128
			F__xy [0][2]float64
			F     int64
			_     [8]byte
		})(unsafe.Pointer(_unnamed4)) = *(*struct {
			F__z  [0]complex128
			F__xy [0][2]float64
			F     int64
			_     [8]byte
		})(unsafe.Pointer(&struct{ f [2]float64 }{[2]float64{
			0: Xcopysign(tls, _h, _x) * Xcos(tls, _y),
			1: _h * Xsin(tls, _y),
		}}))
		return _unnamed4
	}()))

	goto _7

_6:
	if _ix >= int32(0x4096bbaa) {
		goto _8
	}

	_z = X__ldexp_cexp(tls, *(*complex128)(unsafe.Pointer(func() uintptr {
		*(*struct {
			F__z  [0]complex128
			F__xy [0][2]float64
			F     int64
			_     [8]byte
		})(unsafe.Pointer(_unnamed5)) = *(*struct {
			F__z  [0]complex128
			F__xy [0][2]float64
			F     int64
			_     [8]byte
		})(unsafe.Pointer(&struct{ f [2]float64 }{[2]float64{
			0: Xfabs(tls, _x),
			1: _y,
		}}))
		return _unnamed5
	}())), int32(-1))
	return *(*complex128)(unsafe.Pointer(func() uintptr {
		*(*struct {
			F__z  [0]complex128
			F__xy [0][2]float64
			F     int64
			_     [8]byte
		})(unsafe.Pointer(_unnamed7)) = *(*struct {
			F__z  [0]complex128
			F__xy [0][2]float64
			F     int64
			_     [8]byte
		})(unsafe.Pointer(&struct{ f [2]float64 }{[2]float64{
			0: real(_z) * Xcopysign(tls, float64(1), _x),
			1: *(*float64)(unsafe.Pointer(func() uintptr {
				*(*struct {
					F__z  [0]complex128
					F__xy [0][2]float64
					F     int64
					_     [8]byte
				})(unsafe.Pointer(_unnamed6)) = *(*struct {
					F__z  [0]complex128
					F__xy [0][2]float64
					F     int64
					_     [8]byte
				})(unsafe.Pointer(&struct{ f complex128 }{_z}))
				return _unnamed6
			}() + 8)),
		}}))
		return _unnamed7
	}()))

	goto _9

_8:
	_h = x2huge * _x
	return *(*complex128)(unsafe.Pointer(func() uintptr {
		*(*struct {
			F__z  [0]complex128
			F__xy [0][2]float64
			F     int64
			_     [8]byte
		})(unsafe.Pointer(_unnamed8)) = *(*struct {
			F__z  [0]complex128
			F__xy [0][2]float64
			F     int64
			_     [8]byte
		})(unsafe.Pointer(&struct{ f [2]float64 }{[2]float64{
			0: _h * Xcos(tls, _y),
			1: float64(_h*_h) * Xsin(tls, _y),
		}}))
		return _unnamed8
	}()))

_9:
_7:
_3:
	if _ix|_lx != int32(0) || _iy < int32(0x7ff00000) {
		goto _10
	}

	return *(*complex128)(unsafe.Pointer(func() uintptr {
		*(*struct {
			F__z  [0]complex128
			F__xy [0][2]float64
			F     int64
			_     [8]byte
		})(unsafe.Pointer(_unnamed9)) = *(*struct {
			F__z  [0]complex128
			F__xy [0][2]float64
			F     int64
			_     [8]byte
		})(unsafe.Pointer(&struct{ f [2]float64 }{[2]float64{
			0: Xcopysign(tls, float64(0), _x*float64(_y-_y)),
			1: _y - _y,
		}}))
		return _unnamed9
	}()))

_10:
	if _iy|_ly != int32(0) || _ix < int32(0x7ff00000) {
		goto _11
	}

	if _hx&int32(0xfffff)|_lx != int32(0) {
		goto _12
	}

	return *(*complex128)(unsafe.Pointer(func() uintptr {
		*(*struct {
			F__z  [0]complex128
			F__xy [0][2]float64
			F     int64
			_     [8]byte
		})(unsafe.Pointer(_unnamed10)) = *(*struct {
			F__z  [0]complex128
			F__xy [0][2]float64
			F     int64
			_     [8]byte
		})(unsafe.Pointer(&struct{ f [2]float64 }{[2]float64{
			0: _x,
			1: _y,
		}}))
		return _unnamed10
	}()))

_12:
	return *(*complex128)(unsafe.Pointer(func() uintptr {
		*(*struct {
			F__z  [0]complex128
			F__xy [0][2]float64
			F     int64
			_     [8]byte
		})(unsafe.Pointer(_unnamed11)) = *(*struct {
			F__z  [0]complex128
			F__xy [0][2]float64
			F     int64
			_     [8]byte
		})(unsafe.Pointer(&struct{ f [2]float64 }{[2]float64{
			0: _x,
			1: Xcopysign(tls, float64(0), _y),
		}}))
		return _unnamed11
	}()))

_11:
	if _ix >= int32(0x7ff00000) || _iy < int32(0x7ff00000) {
		goto _13
	}

	return *(*complex128)(unsafe.Pointer(func() uintptr {
		*(*struct {
			F__z  [0]complex128
			F__xy [0][2]float64
			F     int64
			_     [8]byte
		})(unsafe.Pointer(_unnamed12)) = *(*struct {
			F__z  [0]complex128
			F__xy [0][2]float64
			F     int64
			_     [8]byte
		})(unsafe.Pointer(&struct{ f [2]float64 }{[2]float64{
			0: _y - _y,
			1: _x * float64(_y-_y),
		}}))
		return _unnamed12
	}()))

_13:
	if _ix < int32(0x7ff00000) || _hx&int32(0xfffff)|_lx != int32(0) {
		goto _14
	}

	if _iy < int32(0x7ff00000) {
		goto _15
	}

	return *(*complex128)(unsafe.Pointer(func() uintptr {
		*(*struct {
			F__z  [0]complex128
			F__xy [0][2]float64
			F     int64
			_     [8]byte
		})(unsafe.Pointer(_unnamed13)) = *(*struct {
			F__z  [0]complex128
			F__xy [0][2]float64
			F     int64
			_     [8]byte
		})(unsafe.Pointer(&struct{ f [2]float64 }{[2]float64{
			0: _x * _x,
			1: _x * float64(_y-_y),
		}}))
		return _unnamed13
	}()))

_15:
	return *(*complex128)(unsafe.Pointer(func() uintptr {
		*(*struct {
			F__z  [0]complex128
			F__xy [0][2]float64
			F     int64
			_     [8]byte
		})(unsafe.Pointer(_unnamed14)) = *(*struct {
			F__z  [0]complex128
			F__xy [0][2]float64
			F     int64
			_     [8]byte
		})(unsafe.Pointer(&struct{ f [2]float64 }{[2]float64{
			0: _x * Xcos(tls, _y),
			1: math.Inf(1) * Xsin(tls, _y),
		}}))
		return _unnamed14
	}()))

_14:
	return *(*complex128)(unsafe.Pointer(func() uintptr {
		*(*struct {
			F__z  [0]complex128
			F__xy [0][2]float64
			F     int64
			_     [8]byte
		})(unsafe.Pointer(_unnamed15)) = *(*struct {
			F__z  [0]complex128
			F__xy [0][2]float64
			F     int64
			_     [8]byte
		})(unsafe.Pointer(&struct{ f [2]float64 }{[2]float64{
			0: float64(_x*_x) * float64(_y-_y),
			1: float64(_x+_x) * float64(_y-_y),
		}}))
		return _unnamed15
	}()))
}

type t59__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t59__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t2int32_t = int32

type t4uint64_t = uint64

type t7uint32_t = uint32

// xhuge float64, escapes: false, csinh.c:39:21
var x2huge = float64(8.98846567431158e+307)

// linking csinhf.o

// Xcsinhf is defined at csinhf.c:35:15
func Xcsinhf(tls TLS, _z complex64) (r complex64) {
	esc := MustMalloc(264)
	var (
		_x         float32
		_y         float32
		_h         float32
		_hx        int32
		_hy        int32
		_ix        int32
		_iy        int32
		_unnamed1  = esc       // *struct{F__z [0]complex64;F__xy [0][2]float32;F int32; _ [4]byte}
		___u       = esc + 16  // *struct{Ff [0]float32;Fi [0]uint32;F int32}
		_1__u      = esc + 32  // *struct{Ff [0]float32;Fi [0]uint32;F int32}
		_unnamed2  = esc + 48  // *struct{F__z [0]complex64;F__xy [0][2]float32;F int32; _ [4]byte}
		_unnamed3  = esc + 64  // *struct{F__z [0]complex64;F__xy [0][2]float32;F int32; _ [4]byte}
		_unnamed4  = esc + 80  // *struct{F__z [0]complex64;F__xy [0][2]float32;F int32; _ [4]byte}
		_unnamed5  = esc + 96  // *struct{F__z [0]complex64;F__xy [0][2]float32;F int32; _ [4]byte}
		_unnamed6  = esc + 112 // *struct{F__z [0]complex64;F__xy [0][2]float32;F int32; _ [4]byte}
		_unnamed7  = esc + 128 // *struct{F__z [0]complex64;F__xy [0][2]float32;F int32; _ [4]byte}
		_unnamed8  = esc + 144 // *struct{F__z [0]complex64;F__xy [0][2]float32;F int32; _ [4]byte}
		_unnamed9  = esc + 160 // *struct{F__z [0]complex64;F__xy [0][2]float32;F int32; _ [4]byte}
		_unnamed10 = esc + 176 // *struct{F__z [0]complex64;F__xy [0][2]float32;F int32; _ [4]byte}
		_unnamed11 = esc + 192 // *struct{F__z [0]complex64;F__xy [0][2]float32;F int32; _ [4]byte}
		_unnamed12 = esc + 208 // *struct{F__z [0]complex64;F__xy [0][2]float32;F int32; _ [4]byte}
		_unnamed13 = esc + 224 // *struct{F__z [0]complex64;F__xy [0][2]float32;F int32; _ [4]byte}
		_unnamed14 = esc + 240 // *struct{F__z [0]complex64;F__xy [0][2]float32;F int32; _ [4]byte}
		_unnamed15 = esc + 256 // *struct{F__z [0]complex64;F__xy [0][2]float32;F int32; _ [4]byte}
	)
	defer Free(esc)
	_x = real(_z)
	_y = *(*float32)(unsafe.Pointer(func() uintptr {
		*(*struct {
			F__z  [0]complex64
			F__xy [0][2]float32
			F     int32
			_     [4]byte
		})(unsafe.Pointer(_unnamed1)) = *(*struct {
			F__z  [0]complex64
			F__xy [0][2]float32
			F     int32
			_     [4]byte
		})(unsafe.Pointer(&struct{ f complex64 }{_z}))
		return _unnamed1
	}() + 4))
	*(*float32)(unsafe.Pointer(___u)) = _x
	_hx = int32(*(*uint32)(unsafe.Pointer(___u)))
	*(*float32)(unsafe.Pointer(_1__u)) = _y
	_hy = int32(*(*uint32)(unsafe.Pointer(_1__u)))
	_ix = int32(0x7fffffff) & _hx
	_iy = int32(0x7fffffff) & _hy
	if _ix >= int32(0x7f800000) || _iy >= int32(0x7f800000) {
		goto _3
	}

	if _iy != int32(0) {
		goto _4
	}

	return *(*complex64)(unsafe.Pointer(func() uintptr {
		*(*struct {
			F__z  [0]complex64
			F__xy [0][2]float32
			F     int32
			_     [4]byte
		})(unsafe.Pointer(_unnamed2)) = *(*struct {
			F__z  [0]complex64
			F__xy [0][2]float32
			F     int32
			_     [4]byte
		})(unsafe.Pointer(&struct{ f [2]float32 }{[2]float32{
			0: Xsinhf(tls, _x),
			1: _y,
		}}))
		return _unnamed2
	}()))

_4:
	if _ix >= int32(0x41100000) {
		goto _5
	}

	return *(*complex64)(unsafe.Pointer(func() uintptr {
		*(*struct {
			F__z  [0]complex64
			F__xy [0][2]float32
			F     int32
			_     [4]byte
		})(unsafe.Pointer(_unnamed3)) = *(*struct {
			F__z  [0]complex64
			F__xy [0][2]float32
			F     int32
			_     [4]byte
		})(unsafe.Pointer(&struct{ f [2]float32 }{[2]float32{
			0: Xsinhf(tls, _x) * Xcosf(tls, _y),
			1: Xcoshf(tls, _x) * Xsinf(tls, _y),
		}}))
		return _unnamed3
	}()))

_5:
	if _ix >= int32(0x42b17218) {
		goto _6
	}

	_h = Xexpf(tls, Xfabsf(tls, _x)) * float32(0.5)
	return *(*complex64)(unsafe.Pointer(func() uintptr {
		*(*struct {
			F__z  [0]complex64
			F__xy [0][2]float32
			F     int32
			_     [4]byte
		})(unsafe.Pointer(_unnamed4)) = *(*struct {
			F__z  [0]complex64
			F__xy [0][2]float32
			F     int32
			_     [4]byte
		})(unsafe.Pointer(&struct{ f [2]float32 }{[2]float32{
			0: Xcopysignf(tls, _h, _x) * Xcosf(tls, _y),
			1: _h * Xsinf(tls, _y),
		}}))
		return _unnamed4
	}()))

	goto _7

_6:
	if _ix >= int32(0x4340b1e7) {
		goto _8
	}

	_z = X__ldexp_cexpf(tls, *(*complex64)(unsafe.Pointer(func() uintptr {
		*(*struct {
			F__z  [0]complex64
			F__xy [0][2]float32
			F     int32
			_     [4]byte
		})(unsafe.Pointer(_unnamed5)) = *(*struct {
			F__z  [0]complex64
			F__xy [0][2]float32
			F     int32
			_     [4]byte
		})(unsafe.Pointer(&struct{ f [2]float32 }{[2]float32{
			0: Xfabsf(tls, _x),
			1: _y,
		}}))
		return _unnamed5
	}())), int32(-1))
	return *(*complex64)(unsafe.Pointer(func() uintptr {
		*(*struct {
			F__z  [0]complex64
			F__xy [0][2]float32
			F     int32
			_     [4]byte
		})(unsafe.Pointer(_unnamed7)) = *(*struct {
			F__z  [0]complex64
			F__xy [0][2]float32
			F     int32
			_     [4]byte
		})(unsafe.Pointer(&struct{ f [2]float32 }{[2]float32{
			0: real(_z) * Xcopysignf(tls, float32(1), _x),
			1: *(*float32)(unsafe.Pointer(func() uintptr {
				*(*struct {
					F__z  [0]complex64
					F__xy [0][2]float32
					F     int32
					_     [4]byte
				})(unsafe.Pointer(_unnamed6)) = *(*struct {
					F__z  [0]complex64
					F__xy [0][2]float32
					F     int32
					_     [4]byte
				})(unsafe.Pointer(&struct{ f complex64 }{_z}))
				return _unnamed6
			}() + 4)),
		}}))
		return _unnamed7
	}()))

	goto _9

_8:
	_h = x3huge * _x
	return *(*complex64)(unsafe.Pointer(func() uintptr {
		*(*struct {
			F__z  [0]complex64
			F__xy [0][2]float32
			F     int32
			_     [4]byte
		})(unsafe.Pointer(_unnamed8)) = *(*struct {
			F__z  [0]complex64
			F__xy [0][2]float32
			F     int32
			_     [4]byte
		})(unsafe.Pointer(&struct{ f [2]float32 }{[2]float32{
			0: _h * Xcosf(tls, _y),
			1: float32(_h*_h) * Xsinf(tls, _y),
		}}))
		return _unnamed8
	}()))

_9:
_7:
_3:
	if _ix != int32(0) || _iy < int32(0x7f800000) {
		goto _10
	}

	return *(*complex64)(unsafe.Pointer(func() uintptr {
		*(*struct {
			F__z  [0]complex64
			F__xy [0][2]float32
			F     int32
			_     [4]byte
		})(unsafe.Pointer(_unnamed9)) = *(*struct {
			F__z  [0]complex64
			F__xy [0][2]float32
			F     int32
			_     [4]byte
		})(unsafe.Pointer(&struct{ f [2]float32 }{[2]float32{
			0: Xcopysignf(tls, float32(0), _x*float32(_y-_y)),
			1: _y - _y,
		}}))
		return _unnamed9
	}()))

_10:
	if _iy != int32(0) || _ix < int32(0x7f800000) {
		goto _11
	}

	if _hx&int32(0x7fffff) != int32(0) {
		goto _12
	}

	return *(*complex64)(unsafe.Pointer(func() uintptr {
		*(*struct {
			F__z  [0]complex64
			F__xy [0][2]float32
			F     int32
			_     [4]byte
		})(unsafe.Pointer(_unnamed10)) = *(*struct {
			F__z  [0]complex64
			F__xy [0][2]float32
			F     int32
			_     [4]byte
		})(unsafe.Pointer(&struct{ f [2]float32 }{[2]float32{
			0: _x,
			1: _y,
		}}))
		return _unnamed10
	}()))

_12:
	return *(*complex64)(unsafe.Pointer(func() uintptr {
		*(*struct {
			F__z  [0]complex64
			F__xy [0][2]float32
			F     int32
			_     [4]byte
		})(unsafe.Pointer(_unnamed11)) = *(*struct {
			F__z  [0]complex64
			F__xy [0][2]float32
			F     int32
			_     [4]byte
		})(unsafe.Pointer(&struct{ f [2]float32 }{[2]float32{
			0: _x,
			1: Xcopysignf(tls, float32(0), _y),
		}}))
		return _unnamed11
	}()))

_11:
	if _ix >= int32(0x7f800000) || _iy < int32(0x7f800000) {
		goto _13
	}

	return *(*complex64)(unsafe.Pointer(func() uintptr {
		*(*struct {
			F__z  [0]complex64
			F__xy [0][2]float32
			F     int32
			_     [4]byte
		})(unsafe.Pointer(_unnamed12)) = *(*struct {
			F__z  [0]complex64
			F__xy [0][2]float32
			F     int32
			_     [4]byte
		})(unsafe.Pointer(&struct{ f [2]float32 }{[2]float32{
			0: _y - _y,
			1: _x * float32(_y-_y),
		}}))
		return _unnamed12
	}()))

_13:
	if _ix < int32(0x7f800000) || _hx&int32(0x7fffff) != int32(0) {
		goto _14
	}

	if _iy < int32(0x7f800000) {
		goto _15
	}

	return *(*complex64)(unsafe.Pointer(func() uintptr {
		*(*struct {
			F__z  [0]complex64
			F__xy [0][2]float32
			F     int32
			_     [4]byte
		})(unsafe.Pointer(_unnamed13)) = *(*struct {
			F__z  [0]complex64
			F__xy [0][2]float32
			F     int32
			_     [4]byte
		})(unsafe.Pointer(&struct{ f [2]float32 }{[2]float32{
			0: _x * _x,
			1: _x * float32(_y-_y),
		}}))
		return _unnamed13
	}()))

_15:
	return *(*complex64)(unsafe.Pointer(func() uintptr {
		*(*struct {
			F__z  [0]complex64
			F__xy [0][2]float32
			F     int32
			_     [4]byte
		})(unsafe.Pointer(_unnamed14)) = *(*struct {
			F__z  [0]complex64
			F__xy [0][2]float32
			F     int32
			_     [4]byte
		})(unsafe.Pointer(&struct{ f [2]float32 }{[2]float32{
			0: _x * Xcosf(tls, _y),
			1: float32(math.Inf(1)) * Xsinf(tls, _y),
		}}))
		return _unnamed14
	}()))

_14:
	return *(*complex64)(unsafe.Pointer(func() uintptr {
		*(*struct {
			F__z  [0]complex64
			F__xy [0][2]float32
			F     int32
			_     [4]byte
		})(unsafe.Pointer(_unnamed15)) = *(*struct {
			F__z  [0]complex64
			F__xy [0][2]float32
			F     int32
			_     [4]byte
		})(unsafe.Pointer(&struct{ f [2]float32 }{[2]float32{
			0: float32(_x*_x) * float32(_y-_y),
			1: float32(_x+_x) * float32(_y-_y),
		}}))
		return _unnamed15
	}()))
}

type t60__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t60__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t3int32_t = int32

type t8uint32_t = uint32

// xhuge float32, escapes: false, csinhf.c:33:20
var x3huge = float32(1.7014118e+38)

// linking csinhl.o

// Xcsinhl is defined at csinhl.c:4:21
func Xcsinhl(tls TLS, _z complex128) (r complex128) {
	return Xcsinh(tls, _z)
}

type t61__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t61__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// linking csinl.o

// Xcsinl is defined at csinl.c:4:21
func Xcsinl(tls TLS, _z complex128) (r complex128) {
	return Xcsin(tls, _z)
}

type t62__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t62__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// linking csqrt.o

// Xcsqrt is defined at csqrt.c:42:16
func Xcsqrt(tls TLS, _z complex128) (r complex128) {
	esc := MustMalloc(128)
	var (
		_result   complex128
		_a        float64
		_b        float64
		_t        float64
		_scale    int32
		_unnamed1 = esc       // *struct{F__z [0]complex128;F__xy [0][2]float64;F int64; _ [8]byte}
		_unnamed2 = esc + 16  // *struct{F__z [0]complex128;F__xy [0][2]float64;F int64; _ [8]byte}
		_unnamed3 = esc + 32  // *struct{F__z [0]complex128;F__xy [0][2]float64;F int64; _ [8]byte}
		_unnamed4 = esc + 48  // *struct{F__z [0]complex128;F__xy [0][2]float64;F int64; _ [8]byte}
		_unnamed5 = esc + 64  // *struct{F__z [0]complex128;F__xy [0][2]float64;F int64; _ [8]byte}
		_unnamed6 = esc + 80  // *struct{F__z [0]complex128;F__xy [0][2]float64;F int64; _ [8]byte}
		_unnamed7 = esc + 96  // *struct{F__z [0]complex128;F__xy [0][2]float64;F int64; _ [8]byte}
		_unnamed8 = esc + 112 // *struct{F__z [0]complex128;F__xy [0][2]float64;F int64; _ [8]byte}
	)
	defer Free(esc)
	_a = real(_z)
	_b = *(*float64)(unsafe.Pointer(func() uintptr {
		*(*struct {
			F__z  [0]complex128
			F__xy [0][2]float64
			F     int64
			_     [8]byte
		})(unsafe.Pointer(_unnamed1)) = *(*struct {
			F__z  [0]complex128
			F__xy [0][2]float64
			F     int64
			_     [8]byte
		})(unsafe.Pointer(&struct{ f complex128 }{_z}))
		return _unnamed1
	}() + 8))
	if _z != complex(float64(complex(float64(0), 0)), 0) {
		goto _1
	}

	return *(*complex128)(unsafe.Pointer(func() uintptr {
		*(*struct {
			F__z  [0]complex128
			F__xy [0][2]float64
			F     int64
			_     [8]byte
		})(unsafe.Pointer(_unnamed2)) = *(*struct {
			F__z  [0]complex128
			F__xy [0][2]float64
			F     int64
			_     [8]byte
		})(unsafe.Pointer(&struct{ f [2]float64 }{[2]float64{
			1: _b,
		}}))
		return _unnamed2
	}()))

_1:
	if x1__DOUBLE_BITS(tls, _b)&uint64(9223372036854775807) != uint64(9218868437227405312) {
		goto _2
	}

	return *(*complex128)(unsafe.Pointer(func() uintptr {
		*(*struct {
			F__z  [0]complex128
			F__xy [0][2]float64
			F     int64
			_     [8]byte
		})(unsafe.Pointer(_unnamed3)) = *(*struct {
			F__z  [0]complex128
			F__xy [0][2]float64
			F     int64
			_     [8]byte
		})(unsafe.Pointer(&struct{ f [2]float64 }{[2]float64{
			0: math.Inf(1),
			1: _b,
		}}))
		return _unnamed3
	}()))

_2:
	if x1__DOUBLE_BITS(tls, _a)&uint64(9223372036854775807) <= uint64(9218868437227405312) {
		goto _3
	}

	_t = float64(_b-_b) / float64(_b-_b)
	return *(*complex128)(unsafe.Pointer(func() uintptr {
		*(*struct {
			F__z  [0]complex128
			F__xy [0][2]float64
			F     int64
			_     [8]byte
		})(unsafe.Pointer(_unnamed4)) = *(*struct {
			F__z  [0]complex128
			F__xy [0][2]float64
			F     int64
			_     [8]byte
		})(unsafe.Pointer(&struct{ f [2]float64 }{[2]float64{
			0: _a,
			1: _t,
		}}))
		return _unnamed4
	}()))

_3:
	if x1__DOUBLE_BITS(tls, _a)&uint64(9223372036854775807) != uint64(9218868437227405312) {
		goto _4
	}

	if int32(x1__DOUBLE_BITS(tls, _a)>>(uint(63)%64)) == 0 {
		goto _5
	}

	return *(*complex128)(unsafe.Pointer(func() uintptr {
		*(*struct {
			F__z  [0]complex128
			F__xy [0][2]float64
			F     int64
			_     [8]byte
		})(unsafe.Pointer(_unnamed5)) = *(*struct {
			F__z  [0]complex128
			F__xy [0][2]float64
			F     int64
			_     [8]byte
		})(unsafe.Pointer(&struct{ f [2]float64 }{[2]float64{
			0: Xfabs(tls, _b-_b),
			1: Xcopysign(tls, _a, _b),
		}}))
		return _unnamed5
	}()))

	goto _6

_5:
	return *(*complex128)(unsafe.Pointer(func() uintptr {
		*(*struct {
			F__z  [0]complex128
			F__xy [0][2]float64
			F     int64
			_     [8]byte
		})(unsafe.Pointer(_unnamed6)) = *(*struct {
			F__z  [0]complex128
			F__xy [0][2]float64
			F     int64
			_     [8]byte
		})(unsafe.Pointer(&struct{ f [2]float64 }{[2]float64{
			0: _a,
			1: Xcopysign(tls, _b-_b, _b),
		}}))
		return _unnamed6
	}()))

_6:
_4:
	if Xfabs(tls, _a) < float64(7.446288774449766e+307) && Xfabs(tls, _b) < float64(7.446288774449766e+307) {
		goto _7
	}

	_a = _a * float64(0.25)
	_b = _b * float64(0.25)
	_scale = int32(1)
	goto _8

_7:
	_scale = int32(0)
_8:
	if _a < float64(0) {
		goto _9
	}

	_t = Xsqrt(tls, float64(_a+Xhypot(tls, _a, _b))*float64(0.5))
	_result = *(*complex128)(unsafe.Pointer(func() uintptr {
		*(*struct {
			F__z  [0]complex128
			F__xy [0][2]float64
			F     int64
			_     [8]byte
		})(unsafe.Pointer(_unnamed7)) = *(*struct {
			F__z  [0]complex128
			F__xy [0][2]float64
			F     int64
			_     [8]byte
		})(unsafe.Pointer(&struct{ f [2]float64 }{[2]float64{
			0: _t,
			1: _b / float64(float64(2)*_t),
		}}))
		return _unnamed7
	}()))
	goto _10

_9:
	_t = Xsqrt(tls, float64(float64(-_a)+Xhypot(tls, _a, _b))*float64(0.5))
	_result = *(*complex128)(unsafe.Pointer(func() uintptr {
		*(*struct {
			F__z  [0]complex128
			F__xy [0][2]float64
			F     int64
			_     [8]byte
		})(unsafe.Pointer(_unnamed8)) = *(*struct {
			F__z  [0]complex128
			F__xy [0][2]float64
			F     int64
			_     [8]byte
		})(unsafe.Pointer(&struct{ f [2]float64 }{[2]float64{
			0: Xfabs(tls, _b) / float64(float64(2)*_t),
			1: Xcopysign(tls, _t, _b),
		}}))
		return _unnamed8
	}()))
_10:
	if _scale == 0 {
		goto _11
	}

	_result = _result * complex(float64(complex(float64(2), 0)), 0)
_11:
	return _result
}

type t63__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t63__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// x__DOUBLE_BITS is defined at math.h:49:36
func x1__DOUBLE_BITS(tls TLS, ___f float64) (r uint64) {
	esc := MustMalloc(8)
	var ___u = esc // *struct{F__f [0]float64;F__i [0]uint64;F int64}
	defer Free(esc)
	*(*float64)(unsafe.Pointer(___u)) = ___f
	return *(*uint64)(unsafe.Pointer(___u))
}

// linking csqrtf.o

// Xcsqrtf is defined at csqrtf.c:39:15
func Xcsqrtf(tls TLS, _z complex64) (r complex64) {
	esc := MustMalloc(120)
	var (
		_a        float32
		_b        float32
		_unnamed1 = esc // *struct{F__z [0]complex64;F__xy [0][2]float32;F int32; _ [4]byte}
		_t        float64
		_unnamed2 = esc + 16  // *struct{F__z [0]complex64;F__xy [0][2]float32;F int32; _ [4]byte}
		_unnamed3 = esc + 32  // *struct{F__z [0]complex64;F__xy [0][2]float32;F int32; _ [4]byte}
		_unnamed4 = esc + 48  // *struct{F__z [0]complex64;F__xy [0][2]float32;F int32; _ [4]byte}
		_unnamed5 = esc + 64  // *struct{F__z [0]complex64;F__xy [0][2]float32;F int32; _ [4]byte}
		_unnamed6 = esc + 80  // *struct{F__z [0]complex64;F__xy [0][2]float32;F int32; _ [4]byte}
		_unnamed7 = esc + 96  // *struct{F__z [0]complex64;F__xy [0][2]float32;F int32; _ [4]byte}
		_unnamed8 = esc + 112 // *struct{F__z [0]complex64;F__xy [0][2]float32;F int32; _ [4]byte}
	)
	defer Free(esc)
	_a = real(_z)
	_b = *(*float32)(unsafe.Pointer(func() uintptr {
		*(*struct {
			F__z  [0]complex64
			F__xy [0][2]float32
			F     int32
			_     [4]byte
		})(unsafe.Pointer(_unnamed1)) = *(*struct {
			F__z  [0]complex64
			F__xy [0][2]float32
			F     int32
			_     [4]byte
		})(unsafe.Pointer(&struct{ f complex64 }{_z}))
		return _unnamed1
	}() + 4))
	if _z != complex(float32(0), 0) {
		goto _1
	}

	return *(*complex64)(unsafe.Pointer(func() uintptr {
		*(*struct {
			F__z  [0]complex64
			F__xy [0][2]float32
			F     int32
			_     [4]byte
		})(unsafe.Pointer(_unnamed2)) = *(*struct {
			F__z  [0]complex64
			F__xy [0][2]float32
			F     int32
			_     [4]byte
		})(unsafe.Pointer(&struct{ f [2]float32 }{[2]float32{
			1: _b,
		}}))
		return _unnamed2
	}()))

_1:
	if x1__FLOAT_BITS(tls, _b)&uint32(0x7fffffff) != uint32(0x7f800000) {
		goto _2
	}

	return *(*complex64)(unsafe.Pointer(func() uintptr {
		*(*struct {
			F__z  [0]complex64
			F__xy [0][2]float32
			F     int32
			_     [4]byte
		})(unsafe.Pointer(_unnamed3)) = *(*struct {
			F__z  [0]complex64
			F__xy [0][2]float32
			F     int32
			_     [4]byte
		})(unsafe.Pointer(&struct{ f [2]float32 }{[2]float32{
			0: float32(math.Inf(1)),
			1: _b,
		}}))
		return _unnamed3
	}()))

_2:
	if x1__FLOAT_BITS(tls, _a)&uint32(0x7fffffff) <= uint32(0x7f800000) {
		goto _3
	}

	_t = float64(float32(_b-_b) / float32(_b-_b))
	return *(*complex64)(unsafe.Pointer(func() uintptr {
		*(*struct {
			F__z  [0]complex64
			F__xy [0][2]float32
			F     int32
			_     [4]byte
		})(unsafe.Pointer(_unnamed4)) = *(*struct {
			F__z  [0]complex64
			F__xy [0][2]float32
			F     int32
			_     [4]byte
		})(unsafe.Pointer(&struct{ f [2]float32 }{[2]float32{
			0: _a,
			1: float32(_t),
		}}))
		return _unnamed4
	}()))

_3:
	if x1__FLOAT_BITS(tls, _a)&uint32(0x7fffffff) != uint32(0x7f800000) {
		goto _4
	}

	if int32(x1__FLOAT_BITS(tls, _a)>>(uint(31)%32)) == 0 {
		goto _5
	}

	return *(*complex64)(unsafe.Pointer(func() uintptr {
		*(*struct {
			F__z  [0]complex64
			F__xy [0][2]float32
			F     int32
			_     [4]byte
		})(unsafe.Pointer(_unnamed5)) = *(*struct {
			F__z  [0]complex64
			F__xy [0][2]float32
			F     int32
			_     [4]byte
		})(unsafe.Pointer(&struct{ f [2]float32 }{[2]float32{
			0: Xfabsf(tls, _b-_b),
			1: Xcopysignf(tls, _a, _b),
		}}))
		return _unnamed5
	}()))

	goto _6

_5:
	return *(*complex64)(unsafe.Pointer(func() uintptr {
		*(*struct {
			F__z  [0]complex64
			F__xy [0][2]float32
			F     int32
			_     [4]byte
		})(unsafe.Pointer(_unnamed6)) = *(*struct {
			F__z  [0]complex64
			F__xy [0][2]float32
			F     int32
			_     [4]byte
		})(unsafe.Pointer(&struct{ f [2]float32 }{[2]float32{
			0: _a,
			1: Xcopysignf(tls, _b-_b, _b),
		}}))
		return _unnamed6
	}()))

_6:
_4:
	if _a < float32(0) {
		goto _7
	}

	_t = Xsqrt(tls, float64(float64(_a)+Xhypot(tls, float64(_a), float64(_b)))*float64(0.5))
	return *(*complex64)(unsafe.Pointer(func() uintptr {
		*(*struct {
			F__z  [0]complex64
			F__xy [0][2]float32
			F     int32
			_     [4]byte
		})(unsafe.Pointer(_unnamed7)) = *(*struct {
			F__z  [0]complex64
			F__xy [0][2]float32
			F     int32
			_     [4]byte
		})(unsafe.Pointer(&struct{ f [2]float32 }{[2]float32{
			0: float32(_t),
			1: float32(float64(_b) / float64(float64(2)*_t)),
		}}))
		return _unnamed7
	}()))

	goto _8

_7:
	_t = Xsqrt(tls, float64(float64(-_a)+Xhypot(tls, float64(_a), float64(_b)))*float64(0.5))
	return *(*complex64)(unsafe.Pointer(func() uintptr {
		*(*struct {
			F__z  [0]complex64
			F__xy [0][2]float32
			F     int32
			_     [4]byte
		})(unsafe.Pointer(_unnamed8)) = *(*struct {
			F__z  [0]complex64
			F__xy [0][2]float32
			F     int32
			_     [4]byte
		})(unsafe.Pointer(&struct{ f [2]float32 }{[2]float32{
			0: float32(float64(Xfabsf(tls, _b)) / float64(float64(2)*_t)),
			1: Xcopysignf(tls, float32(_t), _b),
		}}))
		return _unnamed8
	}()))

_8:
	return r
}

type t64__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t64__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// x__FLOAT_BITS is defined at math.h:43:26
func x1__FLOAT_BITS(tls TLS, ___f float32) (r uint32) {
	esc := MustMalloc(4)
	var ___u = esc // *struct{F__f [0]float32;F__i [0]uint32;F int32}
	defer Free(esc)
	*(*float32)(unsafe.Pointer(___u)) = ___f
	return *(*uint32)(unsafe.Pointer(___u))
}

// linking csqrtl.o

// Xcsqrtl is defined at csqrtl.c:4:21
func Xcsqrtl(tls TLS, _z complex128) (r complex128) {
	return Xcsqrt(tls, _z)
}

type t65__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t65__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// linking ctan.o

// Xctan is defined at ctan.c:5:16
func Xctan(tls TLS, _z complex128) (r complex128) {
	esc := MustMalloc(64)
	var (
		_unnamed1 = esc      // *struct{F__z [0]complex128;F__xy [0][2]float64;F int64; _ [8]byte}
		_unnamed2 = esc + 16 // *struct{F__z [0]complex128;F__xy [0][2]float64;F int64; _ [8]byte}
		_unnamed3 = esc + 32 // *struct{F__z [0]complex128;F__xy [0][2]float64;F int64; _ [8]byte}
		_unnamed4 = esc + 48 // *struct{F__z [0]complex128;F__xy [0][2]float64;F int64; _ [8]byte}
	)
	defer Free(esc)
	_z = Xctanh(tls, *(*complex128)(unsafe.Pointer(func() uintptr {
		*(*struct {
			F__z  [0]complex128
			F__xy [0][2]float64
			F     int64
			_     [8]byte
		})(unsafe.Pointer(_unnamed2)) = *(*struct {
			F__z  [0]complex128
			F__xy [0][2]float64
			F     int64
			_     [8]byte
		})(unsafe.Pointer(&struct{ f [2]float64 }{[2]float64{
			0: -*(*float64)(unsafe.Pointer(func() uintptr {
				*(*struct {
					F__z  [0]complex128
					F__xy [0][2]float64
					F     int64
					_     [8]byte
				})(unsafe.Pointer(_unnamed1)) = *(*struct {
					F__z  [0]complex128
					F__xy [0][2]float64
					F     int64
					_     [8]byte
				})(unsafe.Pointer(&struct{ f complex128 }{_z}))
				return _unnamed1
			}() + 8)),
			1: real(_z),
		}}))
		return _unnamed2
	}())))
	return *(*complex128)(unsafe.Pointer(func() uintptr {
		*(*struct {
			F__z  [0]complex128
			F__xy [0][2]float64
			F     int64
			_     [8]byte
		})(unsafe.Pointer(_unnamed4)) = *(*struct {
			F__z  [0]complex128
			F__xy [0][2]float64
			F     int64
			_     [8]byte
		})(unsafe.Pointer(&struct{ f [2]float64 }{[2]float64{
			0: *(*float64)(unsafe.Pointer(func() uintptr {
				*(*struct {
					F__z  [0]complex128
					F__xy [0][2]float64
					F     int64
					_     [8]byte
				})(unsafe.Pointer(_unnamed3)) = *(*struct {
					F__z  [0]complex128
					F__xy [0][2]float64
					F     int64
					_     [8]byte
				})(unsafe.Pointer(&struct{ f complex128 }{_z}))
				return _unnamed3
			}() + 8)),
			1: -real(_z),
		}}))
		return _unnamed4
	}()))
}

type t66__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t66__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// linking ctanf.o

// Xctanf is defined at ctanf.c:3:15
func Xctanf(tls TLS, _z complex64) (r complex64) {
	esc := MustMalloc(56)
	var (
		_unnamed1 = esc      // *struct{F__z [0]complex64;F__xy [0][2]float32;F int32; _ [4]byte}
		_unnamed2 = esc + 16 // *struct{F__z [0]complex64;F__xy [0][2]float32;F int32; _ [4]byte}
		_unnamed3 = esc + 32 // *struct{F__z [0]complex64;F__xy [0][2]float32;F int32; _ [4]byte}
		_unnamed4 = esc + 48 // *struct{F__z [0]complex64;F__xy [0][2]float32;F int32; _ [4]byte}
	)
	defer Free(esc)
	_z = Xctanhf(tls, *(*complex64)(unsafe.Pointer(func() uintptr {
		*(*struct {
			F__z  [0]complex64
			F__xy [0][2]float32
			F     int32
			_     [4]byte
		})(unsafe.Pointer(_unnamed2)) = *(*struct {
			F__z  [0]complex64
			F__xy [0][2]float32
			F     int32
			_     [4]byte
		})(unsafe.Pointer(&struct{ f [2]float32 }{[2]float32{
			0: -*(*float32)(unsafe.Pointer(func() uintptr {
				*(*struct {
					F__z  [0]complex64
					F__xy [0][2]float32
					F     int32
					_     [4]byte
				})(unsafe.Pointer(_unnamed1)) = *(*struct {
					F__z  [0]complex64
					F__xy [0][2]float32
					F     int32
					_     [4]byte
				})(unsafe.Pointer(&struct{ f complex64 }{_z}))
				return _unnamed1
			}() + 4)),
			1: real(_z),
		}}))
		return _unnamed2
	}())))
	return *(*complex64)(unsafe.Pointer(func() uintptr {
		*(*struct {
			F__z  [0]complex64
			F__xy [0][2]float32
			F     int32
			_     [4]byte
		})(unsafe.Pointer(_unnamed4)) = *(*struct {
			F__z  [0]complex64
			F__xy [0][2]float32
			F     int32
			_     [4]byte
		})(unsafe.Pointer(&struct{ f [2]float32 }{[2]float32{
			0: *(*float32)(unsafe.Pointer(func() uintptr {
				*(*struct {
					F__z  [0]complex64
					F__xy [0][2]float32
					F     int32
					_     [4]byte
				})(unsafe.Pointer(_unnamed3)) = *(*struct {
					F__z  [0]complex64
					F__xy [0][2]float32
					F     int32
					_     [4]byte
				})(unsafe.Pointer(&struct{ f complex64 }{_z}))
				return _unnamed3
			}() + 4)),
			1: -real(_z),
		}}))
		return _unnamed4
	}()))
}

type t67__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t67__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// linking ctanh.o

// Xctanh is defined at ctanh.c:68:16
func Xctanh(tls TLS, _z complex128) (r complex128) {
	esc := MustMalloc(128)
	var (
		_x        float64
		_y        float64
		_t        float64
		_beta     float64
		_s        float64
		_rho      float64
		_denom    float64
		_hx       uint32
		_ix       uint32
		_lx       uint32
		_unnamed1 = esc      // *struct{F__z [0]complex128;F__xy [0][2]float64;F int64; _ [8]byte}
		___u      = esc + 16 // *struct{Ff [0]float64;Fi [0]uint64;F int64}
		_unnamed2 = esc + 32 // *struct{F__z [0]complex128;F__xy [0][2]float64;F int64; _ [8]byte}
		_1__u     = esc + 48 // *struct{Ff [0]float64;Fi [0]uint64;F int64}
		_unnamed3 = esc + 64 // *struct{F__z [0]complex128;F__xy [0][2]float64;F int64; _ [8]byte}
		_unnamed4 = esc + 80 // *struct{F__z [0]complex128;F__xy [0][2]float64;F int64; _ [8]byte}
		_exp_mx   float64
		_unnamed5 = esc + 96  // *struct{F__z [0]complex128;F__xy [0][2]float64;F int64; _ [8]byte}
		_unnamed6 = esc + 112 // *struct{F__z [0]complex128;F__xy [0][2]float64;F int64; _ [8]byte}
	)
	defer Free(esc)
	_x = real(_z)
	_y = *(*float64)(unsafe.Pointer(func() uintptr {
		*(*struct {
			F__z  [0]complex128
			F__xy [0][2]float64
			F     int64
			_     [8]byte
		})(unsafe.Pointer(_unnamed1)) = *(*struct {
			F__z  [0]complex128
			F__xy [0][2]float64
			F     int64
			_     [8]byte
		})(unsafe.Pointer(&struct{ f complex128 }{_z}))
		return _unnamed1
	}() + 8))
	*(*float64)(unsafe.Pointer(___u)) = _x
	_hx = uint32(*(*uint64)(unsafe.Pointer(___u)) >> (uint(32) % 64))
	_lx = uint32(*(*uint64)(unsafe.Pointer(___u)))
	_ix = _hx & uint32(0x7fffffff)
	if _ix < uint32(0x7ff00000) {
		goto _2
	}

	if (_ix&uint32(0xfffff) | _lx) == 0 {
		goto _3
	}

	return *(*complex128)(unsafe.Pointer(func() uintptr {
		*(*struct {
			F__z  [0]complex128
			F__xy [0][2]float64
			F     int64
			_     [8]byte
		})(unsafe.Pointer(_unnamed2)) = *(*struct {
			F__z  [0]complex128
			F__xy [0][2]float64
			F     int64
			_     [8]byte
		})(unsafe.Pointer(&struct{ f [2]float64 }{[2]float64{
			0: _x,
			1: func() float64 {
				if _y == float64(0) {
					return _y
				}
				return _x * _y
			}(),
		}}))
		return _unnamed2
	}()))

_3:
	*(*float64)(unsafe.Pointer(_1__u)) = _x
	{
		p := (*uint64)(unsafe.Pointer(_1__u))
		*p = *p & uint64(0xffffffff)
	}
	{
		p := (*uint64)(unsafe.Pointer(_1__u))
		*p = *p | uint64(_hx-uint32(0x40000000))<<(uint(32)%64)
	}
	_x = *(*float64)(unsafe.Pointer(_1__u))
	return *(*complex128)(unsafe.Pointer(func() uintptr {
		*(*struct {
			F__z  [0]complex128
			F__xy [0][2]float64
			F     int64
			_     [8]byte
		})(unsafe.Pointer(_unnamed3)) = *(*struct {
			F__z  [0]complex128
			F__xy [0][2]float64
			F     int64
			_     [8]byte
		})(unsafe.Pointer(&struct{ f [2]float64 }{[2]float64{
			0: _x,
			1: Xcopysign(tls, float64(0), func() float64 {
				if x2__DOUBLE_BITS(tls, _y)&uint64(9223372036854775807) == uint64(9218868437227405312) {
					return _y
				}
				return Xsin(tls, _y) * Xcos(tls, _y)
			}()),
		}}))
		return _unnamed3
	}()))

_2:
	if x2__DOUBLE_BITS(tls, _y)&uint64(9223372036854775807) < uint64(9218868437227405312) {
		goto _5
	}

	return *(*complex128)(unsafe.Pointer(func() uintptr {
		*(*struct {
			F__z  [0]complex128
			F__xy [0][2]float64
			F     int64
			_     [8]byte
		})(unsafe.Pointer(_unnamed4)) = *(*struct {
			F__z  [0]complex128
			F__xy [0][2]float64
			F     int64
			_     [8]byte
		})(unsafe.Pointer(&struct{ f [2]float64 }{[2]float64{
			0: func() float64 {
				if _x != 0 {
					return _y - _y
				}
				return _x
			}(),
			1: _y - _y,
		}}))
		return _unnamed4
	}()))

_5:
	if _ix < uint32(0x40360000) {
		goto _6
	}

	_exp_mx = Xexp(tls, -Xfabs(tls, _x))
	return *(*complex128)(unsafe.Pointer(func() uintptr {
		*(*struct {
			F__z  [0]complex128
			F__xy [0][2]float64
			F     int64
			_     [8]byte
		})(unsafe.Pointer(_unnamed5)) = *(*struct {
			F__z  [0]complex128
			F__xy [0][2]float64
			F     int64
			_     [8]byte
		})(unsafe.Pointer(&struct{ f [2]float64 }{[2]float64{
			0: Xcopysign(tls, float64(1), _x),
			1: float64(float64(float64(float64(4)*Xsin(tls, _y))*Xcos(tls, _y))*_exp_mx) * _exp_mx,
		}}))
		return _unnamed5
	}()))

_6:
	_t = Xtan(tls, _y)
	_beta = float64(1) + float64(_t*_t)
	_s = Xsinh(tls, _x)
	_rho = Xsqrt(tls, float64(1)+float64(_s*_s))
	_denom = float64(1) + float64(float64(_beta*_s)*_s)
	return *(*complex128)(unsafe.Pointer(func() uintptr {
		*(*struct {
			F__z  [0]complex128
			F__xy [0][2]float64
			F     int64
			_     [8]byte
		})(unsafe.Pointer(_unnamed6)) = *(*struct {
			F__z  [0]complex128
			F__xy [0][2]float64
			F     int64
			_     [8]byte
		})(unsafe.Pointer(&struct{ f [2]float64 }{[2]float64{
			0: float64(float64(_beta*_rho)*_s) / _denom,
			1: _t / _denom,
		}}))
		return _unnamed6
	}()))
}

type t68__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t68__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t9uint32_t = uint32

type t5uint64_t = uint64

// x__DOUBLE_BITS is defined at math.h:49:36
func x2__DOUBLE_BITS(tls TLS, ___f float64) (r uint64) {
	esc := MustMalloc(8)
	var ___u = esc // *struct{F__f [0]float64;F__i [0]uint64;F int64}
	defer Free(esc)
	*(*float64)(unsafe.Pointer(___u)) = ___f
	return *(*uint64)(unsafe.Pointer(___u))
}

// linking ctanhf.o

// Xctanhf is defined at ctanhf.c:33:15
func Xctanhf(tls TLS, _z complex64) (r complex64) {
	esc := MustMalloc(120)
	var (
		_x        float32
		_y        float32
		_t        float32
		_beta     float32
		_s        float32
		_rho      float32
		_denom    float32
		_hx       uint32
		_ix       uint32
		_unnamed1 = esc      // *struct{F__z [0]complex64;F__xy [0][2]float32;F int32; _ [4]byte}
		___u      = esc + 16 // *struct{Ff [0]float32;Fi [0]uint32;F int32}
		_unnamed2 = esc + 32 // *struct{F__z [0]complex64;F__xy [0][2]float32;F int32; _ [4]byte}
		_1__u     = esc + 48 // *struct{Ff [0]float32;Fi [0]uint32;F int32}
		_unnamed3 = esc + 64 // *struct{F__z [0]complex64;F__xy [0][2]float32;F int32; _ [4]byte}
		_unnamed4 = esc + 80 // *struct{F__z [0]complex64;F__xy [0][2]float32;F int32; _ [4]byte}
		_exp_mx   float32
		_unnamed5 = esc + 96  // *struct{F__z [0]complex64;F__xy [0][2]float32;F int32; _ [4]byte}
		_unnamed6 = esc + 112 // *struct{F__z [0]complex64;F__xy [0][2]float32;F int32; _ [4]byte}
	)
	defer Free(esc)
	_x = real(_z)
	_y = *(*float32)(unsafe.Pointer(func() uintptr {
		*(*struct {
			F__z  [0]complex64
			F__xy [0][2]float32
			F     int32
			_     [4]byte
		})(unsafe.Pointer(_unnamed1)) = *(*struct {
			F__z  [0]complex64
			F__xy [0][2]float32
			F     int32
			_     [4]byte
		})(unsafe.Pointer(&struct{ f complex64 }{_z}))
		return _unnamed1
	}() + 4))
	*(*float32)(unsafe.Pointer(___u)) = _x
	_hx = *(*uint32)(unsafe.Pointer(___u))
	_ix = _hx & uint32(0x7fffffff)
	if _ix < uint32(0x7f800000) {
		goto _2
	}

	if (_ix & uint32(0x7fffff)) == 0 {
		goto _3
	}

	return *(*complex64)(unsafe.Pointer(func() uintptr {
		*(*struct {
			F__z  [0]complex64
			F__xy [0][2]float32
			F     int32
			_     [4]byte
		})(unsafe.Pointer(_unnamed2)) = *(*struct {
			F__z  [0]complex64
			F__xy [0][2]float32
			F     int32
			_     [4]byte
		})(unsafe.Pointer(&struct{ f [2]float32 }{[2]float32{
			0: _x,
			1: func() float32 {
				if _y == float32(0) {
					return _y
				}
				return _x * _y
			}(),
		}}))
		return _unnamed2
	}()))

_3:
	*(*uint32)(unsafe.Pointer(_1__u)) = _hx - uint32(0x40000000)
	_x = *(*float32)(unsafe.Pointer(_1__u))
	return *(*complex64)(unsafe.Pointer(func() uintptr {
		*(*struct {
			F__z  [0]complex64
			F__xy [0][2]float32
			F     int32
			_     [4]byte
		})(unsafe.Pointer(_unnamed3)) = *(*struct {
			F__z  [0]complex64
			F__xy [0][2]float32
			F     int32
			_     [4]byte
		})(unsafe.Pointer(&struct{ f [2]float32 }{[2]float32{
			0: _x,
			1: Xcopysignf(tls, float32(0), func() float32 {
				if x2__FLOAT_BITS(tls, _y)&uint32(0x7fffffff) == uint32(0x7f800000) {
					return _y
				}
				return Xsinf(tls, _y) * Xcosf(tls, _y)
			}()),
		}}))
		return _unnamed3
	}()))

_2:
	if x2__FLOAT_BITS(tls, _y)&uint32(0x7fffffff) < uint32(0x7f800000) {
		goto _5
	}

	return *(*complex64)(unsafe.Pointer(func() uintptr {
		*(*struct {
			F__z  [0]complex64
			F__xy [0][2]float32
			F     int32
			_     [4]byte
		})(unsafe.Pointer(_unnamed4)) = *(*struct {
			F__z  [0]complex64
			F__xy [0][2]float32
			F     int32
			_     [4]byte
		})(unsafe.Pointer(&struct{ f [2]float32 }{[2]float32{
			0: func() float32 {
				if _ix != 0 {
					return _y - _y
				}
				return _x
			}(),
			1: _y - _y,
		}}))
		return _unnamed4
	}()))

_5:
	if _ix < uint32(0x41300000) {
		goto _6
	}

	_exp_mx = Xexpf(tls, -Xfabsf(tls, _x))
	return *(*complex64)(unsafe.Pointer(func() uintptr {
		*(*struct {
			F__z  [0]complex64
			F__xy [0][2]float32
			F     int32
			_     [4]byte
		})(unsafe.Pointer(_unnamed5)) = *(*struct {
			F__z  [0]complex64
			F__xy [0][2]float32
			F     int32
			_     [4]byte
		})(unsafe.Pointer(&struct{ f [2]float32 }{[2]float32{
			0: Xcopysignf(tls, float32(1), _x),
			1: float32(float32(float32(float32(4)*Xsinf(tls, _y))*Xcosf(tls, _y))*_exp_mx) * _exp_mx,
		}}))
		return _unnamed5
	}()))

_6:
	_t = Xtanf(tls, _y)
	_beta = float32(float64(1) + float64(_t*_t))
	_s = Xsinhf(tls, _x)
	_rho = Xsqrtf(tls, float32(1)+float32(_s*_s))
	_denom = float32(1) + float32(float32(_beta*_s)*_s)
	return *(*complex64)(unsafe.Pointer(func() uintptr {
		*(*struct {
			F__z  [0]complex64
			F__xy [0][2]float32
			F     int32
			_     [4]byte
		})(unsafe.Pointer(_unnamed6)) = *(*struct {
			F__z  [0]complex64
			F__xy [0][2]float32
			F     int32
			_     [4]byte
		})(unsafe.Pointer(&struct{ f [2]float32 }{[2]float32{
			0: float32(float32(_beta*_rho)*_s) / _denom,
			1: _t / _denom,
		}}))
		return _unnamed6
	}()))
}

type t69__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t69__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t10uint32_t = uint32

// x__FLOAT_BITS is defined at math.h:43:26
func x2__FLOAT_BITS(tls TLS, ___f float32) (r uint32) {
	esc := MustMalloc(4)
	var ___u = esc // *struct{F__f [0]float32;F__i [0]uint32;F int32}
	defer Free(esc)
	*(*float32)(unsafe.Pointer(___u)) = ___f
	return *(*uint32)(unsafe.Pointer(___u))
}

// linking ctanhl.o

// Xctanhl is defined at ctanhl.c:4:21
func Xctanhl(tls TLS, _z complex128) (r complex128) {
	return Xctanh(tls, _z)
}

type t70__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t70__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// linking ctanl.o

// Xctanl is defined at ctanl.c:4:21
func Xctanl(tls TLS, _z complex128) (r complex128) {
	return Xctan(tls, _z)
}

type t71__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t71__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// linking confstr.o

// Xconfstr is defined at confstr.c:5:8
func Xconfstr(tls TLS, _name int32, _buf uintptr /* *int8 */, _len uint64) (r uint64) {
	var _s uintptr // *int8

	_s = ts + 112 /* "" */
	if _name != 0 {
		goto _1
	}

	_s = ts + 116 /* "/bin:/usr/bin" */
	goto _2

_1:
	if uint32(_name)&uint32(4294967291) == uint32(1) || uint32(_name-int32(1116)) <= uint32(33) {
		goto _3
	}

	*(*int32)(unsafe.Pointer(X__errno_location(tls))) = int32(22)
	return uint64(0)

_3:
_2:
	return uint64(Xsnprintf(tls, _buf, _len, ts+132 /* "%s" */, _s) + int32(1))
}

type t72__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t72__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t4size_t = uint64

// linking fpathconf.o

// Xfpathconf is defined at fpathconf.c:5:6
func Xfpathconf(tls TLS, _fd int32, _name int32) (r int64) {
	if uint64(_name) < uint64(21) {
		goto _1
	}

	*(*int32)(unsafe.Pointer(X__errno_location(tls))) = int32(22)
	return int64(-1)

_1:
	return int64(*(*int16)(unsafe.Pointer(x473values + 2*uintptr(_name))))
}

type t73__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t73__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// x1values [21]int16, escapes: true, fpathconf.c:7:21
var x473values = ds + 48

// linking legacy.o

// Xget_nprocs_conf is defined at legacy.c:4:5
func Xget_nprocs_conf(tls TLS) (r int32) {
	return int32(Xsysconf(tls, int32(83)))
}

// Xget_nprocs is defined at legacy.c:9:5
func Xget_nprocs(tls TLS) (r int32) {
	return int32(Xsysconf(tls, int32(84)))
}

// Xget_phys_pages is defined at legacy.c:14:6
func Xget_phys_pages(tls TLS) (r int64) {
	return Xsysconf(tls, int32(85))
}

// Xget_avphys_pages is defined at legacy.c:19:6
func Xget_avphys_pages(tls TLS) (r int64) {
	return Xsysconf(tls, int32(86))
}

type t74__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t74__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// linking pathconf.o

// Xpathconf is defined at pathconf.c:3:6
func Xpathconf(tls TLS, _path uintptr /* *int8 */, _name int32) (r int64) {
	return Xfpathconf(tls, int32(-1), _name)
}

type t75__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t75__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// linking sysconf.o

func set474(p *int32, v int32) int32 { *p = v; return v }

// Xsysconf is defined at sysconf.c:24:6
func Xsysconf(tls TLS, _name int32) (r int64) {
	esc := MustMalloc(512)
	var (
		_lim = esc      // *Srlimit
		_set = esc + 16 // *[128]uint8
		_i   int32
		_cnt int32
		_mem uint64
		_si  = esc + 144 // *Ssysinfo
	)
	defer Free(esc)
	if uint64(_name) < uint64(249) && *(*int16)(unsafe.Pointer(x475values + 2*uintptr(_name))) != 0 {
		goto _1
	}

	*(*int32)(unsafe.Pointer(X__errno_location(tls))) = int32(22)
	return int64(-1)

	goto _2

_1:
	if int32(*(*int16)(unsafe.Pointer(x475values + 2*uintptr(_name)))) < int32(-1) {
		goto _3
	}

	return int64(*(*int16)(unsafe.Pointer(x475values + 2*uintptr(_name))))

	goto _4

_3:
	if int32(*(*int16)(unsafe.Pointer(x475values + 2*uintptr(_name)))) >= int32(-256) {
		goto _5
	}

	Xgetrlimit(tls, int32(*(*int16)(unsafe.Pointer(x475values + 2*uintptr(_name))))&int32(16383), _lim)
	if *(*uint64)(unsafe.Pointer(_lim)) != uint64(18446744073709551615) {
		goto _6
	}

	return int64(-1)

_6:
	if *(*uint64)(unsafe.Pointer(_lim)) > uint64(0x7fffffffffffffff) {
		return int64(0x7fffffffffffffff)
	}

	return int64(*(*uint64)(unsafe.Pointer(_lim)))

_5:
_4:
_2:
	switch int32(uint8(*(*int16)(unsafe.Pointer(x475values + 2*uintptr(_name))))) {
	case int32(1):
		goto _8
	case int32(2):
		goto _9
	case int32(3):
		goto _10
	case int32(4):
		goto _11
	case int32(5):
		goto _12
	case int32(6):
		goto _13
	case int32(7):
		goto _14
	case int32(8):
		goto _15
	case int32(9):
		goto _16
	case int32(10):
		goto _17
	}
	goto _7

_8:
	return int64(200809)

_9:
	return int64(131072)

_10:
	return int64(32768)

_11:
	return int64(4096)

_12:
	return int64(0x7fffffff)

_13:
_14:
	Copy(_set, ts+136 /* "\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00..." */, 128)
	x1__syscall3(tls, int64(204), int64(0), int64(128), int64(_set))
	_i = set474(&_cnt, int32(0))
_18:
	if uint64(_i) >= uint64(128) {
		goto _20
	}

_21:
	if *(*uint8)(unsafe.Pointer(_set + uintptr(_i))) == 0 {
		goto _23
	}

	{
		p := (*uint8)(unsafe.Pointer(_set + uintptr(_i)))
		*p = uint8(int32(*p) & (int32(*(*uint8)(unsafe.Pointer(_set + uintptr(_i)))) - int32(1)))
	}
	_cnt++
	goto _21

_23:
	_i++
	goto _18

_20:
	return int64(_cnt)

_15:
_16:
	X__lsysinfo(tls, _si)
	if *(*uint32)(unsafe.Pointer(_si + 104)) != 0 {
		goto _24
	}

	*(*uint32)(unsafe.Pointer(_si + 104)) = uint32(1)
_24:
	if _name != int32(85) {
		goto _25
	}

	_mem = *(*uint64)(unsafe.Pointer(_si + 32))
	goto _26

_25:
	_mem = *(*uint64)(unsafe.Pointer(_si + 40)) + *(*uint64)(unsafe.Pointer(_si + 56))
_26:
	_mem = _mem * uint64(*(*uint32)(unsafe.Pointer(_si + 104)))
	_mem = _mem / uint64(4096)
	if _mem > uint64(0x7fffffffffffffff) {
		return int64(0x7fffffffffffffff)
	}

	return int64(_mem)

_17:
	return int64(0)

_7:
	return int64(*(*int16)(unsafe.Pointer(x475values + 2*uintptr(_name))))
}

type t76__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t76__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// x1values [249]int16, escapes: true, sysconf.c:26:21
var x475values = ds + 96

type Srlimit = struct {
	Frlim_cur uint64
	Frlim_max uint64
}

type Ssysinfo = struct {
	Fuptime     uint64
	Floads      [3]uint64
	Ftotalram   uint64
	Ffreeram    uint64
	Fsharedram  uint64
	Fbufferram  uint64
	Ftotalswap  uint64
	Ffreeswap   uint64
	Fprocs      uint16
	Fpad        uint16
	Ftotalhigh  uint64
	Ffreehigh   uint64
	Fmem_unit   uint32
	F__reserved [256]int8
}

type Trlim_t = uint64

// x__syscall3 is defined at syscall_arch.h:33:22
func x1__syscall3(tls TLS, _n int64, _a1 int64, _a2 int64, _a3 int64) (r int64) {
	return X__syscall(tls, _n, _a1, _a2, _a3, int64(0), int64(0), int64(0))
}

// linking crypt.o

// Xcrypt is defined at crypt.c:6:6
func Xcrypt(tls TLS, _key uintptr /* *int8 */, _salt uintptr /* *int8 */) (r uintptr /* *int8 */) {
	return X__crypt_r(tls, _key, _salt, x476buf)
}

type t77__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t77__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// x1buf [128]int8, escapes: true, crypt.c:14:14
var x476buf = bss + 120

// linking crypt_blowfish.o

// X__crypt_blowfish is defined at crypt_blowfish.c:746:6
func X__crypt_blowfish(tls TLS, _key uintptr /* *int8 */, _setting uintptr /* *int8 */, _output uintptr /* *int8 */) (r uintptr /* *int8 */) {
	var (
		_test_key     uintptr // *int8
		_             = _test_key
		_test_setting uintptr // *int8
		_             = _test_setting
	)
	_test_key = ts + 268     /* "8b \xd0\xc1\xd2\xcf\xcc\xd8" */
	_test_setting = ts + 280 /* "$2a$00$abcdefghi..." */
	X__assert_fail(tls, ts+0 /* "TODO(ccgo)" */, ts+312 /* "src/crypt/crypt_..." */, int32(750), x477__func__)
	return r
}

type t78__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t78__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// x1__func__ [17]int8, escapes: true, crypt_blowfish.c:747:1
var x477__func__ = ds + 600

// linking crypt_des.o

func set478(p *uint32, v uint32) uint32 { *p = v; return v }

// X__des_setkey is defined at crypt_des.c:695:6
func X__des_setkey(tls TLS, _key uintptr /* *uint8 */, _ekey uintptr /* *Sexpanded_key */) {
	var (
		_k0      uint32
		_k1      uint32
		_rawkey0 uint32
		_rawkey1 uint32
		_shifts  uint32
		_round   uint32
		_i       uint32
		_ibit    uint32
		_j       uint32
		_t0      uint32
		_t1      uint32
		_kl      uint32
		_kr      uint32
	)
	_rawkey0 = uint32(*(*uint8)(unsafe.Pointer(_key + 3))) | uint32(*(*uint8)(unsafe.Pointer(_key + 2)))<<(uint(8)%32) | uint32(*(*uint8)(unsafe.Pointer(_key + 1)))<<(uint(16)%32) | uint32(*(*uint8)(unsafe.Pointer(_key)))<<(uint(24)%32)
	_rawkey1 = uint32(*(*uint8)(unsafe.Pointer(_key + 7))) | uint32(*(*uint8)(unsafe.Pointer(_key + 6)))<<(uint(8)%32) | uint32(*(*uint8)(unsafe.Pointer(_key + 5)))<<(uint(16)%32) | uint32(*(*uint8)(unsafe.Pointer(_key + 4)))<<(uint(24)%32)
	_k0 = set478(&_k1, uint32(0))
	_i = uint32(0)
	_ibit = uint32(28)
_1:
	if _i >= uint32(4) {
		goto _3
	}

	_j = _i << (uint(1) % 32)
	_k0 = _k0 | (*(*uint32)(unsafe.Pointer((xkey_perm_maskl + 64*uintptr(_i)) + 4*uintptr(_rawkey0>>(uint(_ibit)%32)&uint32(0xf)))) | *(*uint32)(unsafe.Pointer((xkey_perm_maskl + 64*uintptr(_i+uint32(4))) + 4*uintptr(_rawkey1>>(uint(_ibit)%32)&uint32(0xf)))))
	_k1 = _k1 | *(*uint32)(unsafe.Pointer((xkey_perm_maskr + 64*uintptr(_j)) + 4*uintptr(_rawkey0>>(uint(_ibit)%32)&uint32(0xf))))
	_ibit = _ibit - uint32(4)
	_k1 = _k1 | (*(*uint32)(unsafe.Pointer((xkey_perm_maskr + 64*uintptr(_j+uint32(1))) + 4*uintptr(_rawkey0>>(uint(_ibit)%32)&uint32(0xf)))) | *(*uint32)(unsafe.Pointer((xkey_perm_maskr + 64*uintptr(_i+uint32(8))) + 4*uintptr(_rawkey1>>(uint(_ibit)%32)&uint32(0xf)))))
	_i++
	_ibit = _ibit - uint32(4)
	goto _1

_3:
	_shifts = uint32(0)
	_round = uint32(0)
_4:
	if _round >= uint32(16) {
		goto _6
	}

	_shifts = _shifts + uint32(*(*uint8)(unsafe.Pointer(xkey_shifts + uintptr(_round))))
	_t0 = _k0<<(uint(_shifts)%32) | _k0>>(uint(uint32(28)-_shifts)%32)
	_t1 = _k1<<(uint(_shifts)%32) | _k1>>(uint(uint32(28)-_shifts)%32)
	_kl = set478(&_kr, uint32(0))
	_ibit = uint32(25)
	_i = uint32(0)
_7:
	if _i >= uint32(4) {
		goto _9
	}

	_kl = _kl | *(*uint32)(unsafe.Pointer((xcomp_maskl0 + 32*uintptr(_i)) + 4*uintptr(_t0>>(uint(_ibit)%32)&uint32(7))))
	_kr = _kr | *(*uint32)(unsafe.Pointer((xcomp_maskr0 + 32*uintptr(_i)) + 4*uintptr(_t1>>(uint(_ibit)%32)&uint32(7))))
	_ibit = _ibit - uint32(4)
	_kl = _kl | *(*uint32)(unsafe.Pointer((xcomp_maskl1 + 64*uintptr(_i)) + 4*uintptr(_t0>>(uint(_ibit)%32)&uint32(0xf))))
	_kr = _kr | *(*uint32)(unsafe.Pointer((xcomp_maskr1 + 64*uintptr(_i)) + 4*uintptr(_t1>>(uint(_ibit)%32)&uint32(0xf))))
	_ibit = _ibit - uint32(3)
	_i++
	goto _7

_9:
	*(*uint32)(unsafe.Pointer(_ekey + 4*uintptr(_round))) = _kl
	*(*uint32)(unsafe.Pointer((_ekey + 64) + 4*uintptr(_round))) = _kr
	_round++
	goto _4

_6:
}

func postinc479(p *uint32) uint32 { r := *p; *p += 4294967295; return r }

func postinc480(p *uintptr) uintptr { r := *p; *p += 4; return r }

// X__do_des is defined at crypt_des.c:756:6
func X__do_des(tls TLS, _l_in uint32, _r_in uint32, _l_out uintptr /* *Tuint32_t = uint32 */, _r_out uintptr /* *Tuint32_t = uint32 */, _count uint32, _saltbits uint32, _ekey uintptr /* *Sexpanded_key */) {
	var (
		_l     uint32
		_r     uint32
		_i     uint32
		_ibit  uint32
		_round uint32
		_kl    uintptr // *Tuint32_t = uint32
		_kr    uintptr // *Tuint32_t = uint32
		_f     uint32
		_r48l  uint32
		_r48r  uint32
		_1i    uint32
		_2ibit uint32
		_lo    uint32
		_ro    uint32
	)
	_l = set478(&_r, uint32(0))
	if (_l_in | _r_in) == 0 {
		goto _1
	}

	_i = uint32(0)
	_ibit = uint32(28)
_2:
	if _i >= uint32(8) {
		goto _4
	}

	_l = _l | (*(*uint32)(unsafe.Pointer((xip_maskl + 64*uintptr(_i)) + 4*uintptr(_l_in>>(uint(_ibit)%32)&uint32(0xf)))) | *(*uint32)(unsafe.Pointer((xip_maskl + 64*uintptr(_i+uint32(8))) + 4*uintptr(_r_in>>(uint(_ibit)%32)&uint32(0xf)))))
	_r = _r | (*(*uint32)(unsafe.Pointer((xip_maskr + 64*uintptr(_i)) + 4*uintptr(_l_in>>(uint(_ibit)%32)&uint32(0xf)))) | *(*uint32)(unsafe.Pointer((xip_maskr + 64*uintptr(_i+uint32(8))) + 4*uintptr(_r_in>>(uint(_ibit)%32)&uint32(0xf)))))
	_i++
	_ibit = _ibit - uint32(4)
	goto _2

_4:
_1:
_5:
	if postinc479(&_count) == 0 {
		goto _6
	}

	_round = uint32(16)
	_kl = _ekey
	_kr = _ekey + 64
_7:
	if postinc479(&_round) == 0 {
		goto _8
	}

	_r48l = _r&uint32(0x1)<<(uint(23)%32) | _r&uint32(0xf8000000)>>(uint(9)%32) | _r&uint32(0x1f800000)>>(uint(11)%32) | _r&uint32(0x1f80000)>>(uint(13)%32) | _r&uint32(0x1f8000)>>(uint(15)%32)
	_r48r = _r&uint32(0x1f800)<<(uint(7)%32) | _r&uint32(0x1f80)<<(uint(5)%32) | _r&uint32(0x1f8)<<(uint(3)%32) | _r&uint32(0x1f)<<(uint(1)%32) | _r&uint32(0x80000000)>>(uint(31)%32)
	_f = (_r48l ^ _r48r) & _saltbits
	_r48l = _r48l ^ (_f ^ *(*uint32)(unsafe.Pointer(postinc480(&_kl))))
	_r48r = _r48r ^ (_f ^ *(*uint32)(unsafe.Pointer(postinc480(&_kr))))
	_f = *(*uint32)(unsafe.Pointer(xpsbox + 4*uintptr(_r48l>>(uint(18)%32)))) | *(*uint32)(unsafe.Pointer((xpsbox + 256) + 4*uintptr(_r48l>>(uint(12)%32)&uint32(0x3f)))) | *(*uint32)(unsafe.Pointer((xpsbox + 512) + 4*uintptr(_r48l>>(uint(6)%32)&uint32(0x3f)))) | *(*uint32)(unsafe.Pointer((xpsbox + 768) + 4*uintptr(_r48l&uint32(0x3f)))) | *(*uint32)(unsafe.Pointer((xpsbox + 1024) + 4*uintptr(_r48r>>(uint(18)%32)))) | *(*uint32)(unsafe.Pointer((xpsbox + 1280) + 4*uintptr(_r48r>>(uint(12)%32)&uint32(0x3f)))) | *(*uint32)(unsafe.Pointer((xpsbox + 1536) + 4*uintptr(_r48r>>(uint(6)%32)&uint32(0x3f)))) | *(*uint32)(unsafe.Pointer((xpsbox + 1792) + 4*uintptr(_r48r&uint32(0x3f))))
	_f = _f ^ _l
	_l = _r
	_r = _f
	goto _7

_8:
	_r = _l
	_l = _f
	goto _5

_6:
	_lo = set478(&_ro, uint32(0))
	_1i = uint32(0)
	_2ibit = uint32(28)
_9:
	if _1i >= uint32(4) {
		goto _11
	}

	_ro = _ro | (*(*uint32)(unsafe.Pointer((xfp_maskr + 64*uintptr(_1i)) + 4*uintptr(_l>>(uint(_2ibit)%32)&uint32(0xf)))) | *(*uint32)(unsafe.Pointer((xfp_maskr + 64*uintptr(_1i+uint32(4))) + 4*uintptr(_r>>(uint(_2ibit)%32)&uint32(0xf)))))
	_2ibit = _2ibit - uint32(4)
	_lo = _lo | (*(*uint32)(unsafe.Pointer((xfp_maskl + 64*uintptr(_1i)) + 4*uintptr(_l>>(uint(_2ibit)%32)&uint32(0xf)))) | *(*uint32)(unsafe.Pointer((xfp_maskl + 64*uintptr(_1i+uint32(4))) + 4*uintptr(_r>>(uint(_2ibit)%32)&uint32(0xf)))))
	_1i++
	_2ibit = _2ibit - uint32(4)
	goto _9

_11:
	*(*uint32)(unsafe.Pointer(_l_out)) = _lo
	*(*uint32)(unsafe.Pointer(_r_out)) = _ro
}

// X__crypt_des is defined at crypt_des.c:986:6
func X__crypt_des(tls TLS, _key uintptr /* *int8 */, _setting uintptr /* *int8 */, _output uintptr /* *int8 */) (r uintptr /* *int8 */) {
	esc := MustMalloc(21)
	var (
		_test_key     uintptr // *int8
		_test_setting uintptr // *int8
		_test_hash    uintptr // *int8
		_test_buf     = esc   // *[21]int8
		_retval       uintptr // *int8
		_p            uintptr // *int8
	)
	defer Free(esc)
	_test_key = ts + 340     /* "\x80\xff\x80\x01 \u007f\x81\x80\x80\r\n\xff\u007f \x81 ..." */
	_test_setting = ts + 364 /* "_0.../9Zz" */
	_test_hash = ts + 376    /* "_0.../9ZzX7iSJNd..." */
	if int32(*(*int8)(unsafe.Pointer(_setting))) == int32('_') {
		goto _1
	}

	_test_setting = ts + 400 /* "\x80x" */
	_test_hash = ts + 404    /* "\x80x22/wK52ZKGA" */
_1:
	_retval = x_crypt_extended_r_uut(tls, _key, _setting, _output)
	_p = x_crypt_extended_r_uut(tls, _test_key, _test_setting, _test_buf)
	if _p == 0 || Xstrcmp(tls, _p, _test_hash) != 0 || _retval == 0 {
		goto _2
	}

	return _retval

_2:
	if int32(*(*int8)(unsafe.Pointer(_setting))) == int32('*') {
		return ts + 420 /* "x" */
	}

	return ts + 424 /* "*" */
}

type t79__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t79__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type Sexpanded_key = struct {
	Fl [16]uint32
	Fr [16]uint32
}

type t11uint32_t = uint32

// xkey_perm_maskl [8][16]uint32, escapes: true, crypt_des.c:460:23
var xkey_perm_maskl = ds + 624

// xkey_perm_maskr [12][16]uint32, escapes: true, crypt_des.c:503:23
var xkey_perm_maskr = ds + 1136

// xkey_shifts [16]uint8, escapes: true, crypt_des.c:65:28
var xkey_shifts = ds + 1904

// xcomp_maskl0 [4][8]uint32, escapes: true, crypt_des.c:566:23
var xcomp_maskl0 = ds + 1920

// xcomp_maskr0 [4][8]uint32, escapes: true, crypt_des.c:581:23
var xcomp_maskr0 = ds + 2048

// xcomp_maskl1 [4][16]uint32, escapes: true, crypt_des.c:596:23
var xcomp_maskl1 = ds + 2176

// xcomp_maskr1 [4][16]uint32, escapes: true, crypt_des.c:619:23
var xcomp_maskr1 = ds + 2432

// xip_maskl [16][16]uint32, escapes: true, crypt_des.c:208:23
var xip_maskl = ds + 2688

// xip_maskr [16][16]uint32, escapes: true, crypt_des.c:291:23
var xip_maskr = ds + 3712

// xpsbox [8][64]uint32, escapes: true, crypt_des.c:69:23
var xpsbox = ds + 4736

// xfp_maskr [8][16]uint32, escapes: true, crypt_des.c:417:23
var xfp_maskr = ds + 6784

// xfp_maskl [8][16]uint32, escapes: true, crypt_des.c:374:23
var xfp_maskl = ds + 7296

func postinc481(p *uintptr) uintptr { r := *p; *p += 1; return r }

// x_crypt_extended_r_uut is defined at crypt_des.c:877:13
func x_crypt_extended_r_uut(tls TLS, __key uintptr /* *int8 */, __setting uintptr /* *int8 */, _output uintptr /* *int8 */) (r uintptr /* *int8 */) {
	esc := MustMalloc(164)
	var (
		_key     uintptr     // *uint8
		_setting uintptr     // *uint8
		_ekey    = esc       // *Sexpanded_key
		_keybuf  = esc + 128 // *[8]uint8
		_p       uintptr     // *uint8
		_q       uintptr     // *uint8
		_count   uint32
		_salt    uint32
		_l       uint32
		_r0      = esc + 144 // *Tuint32_t = uint32
		_r1      = esc + 160 // *Tuint32_t = uint32
		_i       uint32
		_value   uint32
		_1value  uint32
	)
	defer Free(esc)
	_key = __key
	_setting = __setting
	_q = _keybuf
_1:
	if _q > _keybuf+7 {
		goto _2
	}

	*(*uint8)(unsafe.Pointer(postinc481(&_q))) = uint8(int32(*(*uint8)(unsafe.Pointer(_key))) << (uint(1) % 32))
	if *(*uint8)(unsafe.Pointer(_key)) == 0 {
		goto _3
	}

	_key++
_3:
	goto _1

_2:
	X__des_setkey(tls, _keybuf, _ekey)
	if int32(*(*uint8)(unsafe.Pointer(_setting))) != int32('_') {
		goto _4
	}

	_i = uint32(1)
	_count = uint32(0)
_6:
	if _i >= uint32(5) {
		goto _8
	}

	_value = xascii_to_bin(tls, int32(*(*uint8)(unsafe.Pointer(_setting + uintptr(_i)))))
	if int32(*(*uint8)(unsafe.Pointer(xascii64 + uintptr(_value)))) == int32(*(*uint8)(unsafe.Pointer(_setting + uintptr(_i)))) {
		goto _9
	}

	return null

_9:
	_count = _count | _value<<(uint((_i-uint32(1))*uint32(6))%32)
	_i++
	goto _6

_8:
	if _count != 0 {
		goto _10
	}

	return null

_10:
	_i = uint32(5)
	_salt = uint32(0)
_11:
	if _i >= uint32(9) {
		goto _13
	}

	_1value = xascii_to_bin(tls, int32(*(*uint8)(unsafe.Pointer(_setting + uintptr(_i)))))
	if int32(*(*uint8)(unsafe.Pointer(xascii64 + uintptr(_1value)))) == int32(*(*uint8)(unsafe.Pointer(_setting + uintptr(_i)))) {
		goto _14
	}

	return null

_14:
	_salt = _salt | _1value<<(uint((_i-uint32(5))*uint32(6))%32)
	_i++
	goto _11

_13:
_15:
	if *(*uint8)(unsafe.Pointer(_key)) == 0 {
		goto _16
	}

	xdes_cipher(tls, _keybuf, _keybuf, uint32(1), uint32(0), _ekey)
	_q = _keybuf
_17:
	if _q > _keybuf+7 || *(*uint8)(unsafe.Pointer(_key)) == 0 {
		goto _18
	}

	{
		p := (*uint8)(unsafe.Pointer(postinc481(&_q)))
		*p = uint8(int32(*p) ^ int32(*(*uint8)(unsafe.Pointer(postinc481(&_key))))<<(uint(1)%32))
	}
	goto _17

_18:
	X__des_setkey(tls, _keybuf, _ekey)
	goto _15

_16:
	Xmemcpy(tls, _output, _setting, uint64(9))
	*(*int8)(unsafe.Pointer(_output + 9)) = int8('\x00')
	_p = _output + uintptr(9)
	goto _5

_4:
	_count = uint32(25)
	if xascii_is_unsafe(tls, *(*uint8)(unsafe.Pointer(_setting))) == 0 && xascii_is_unsafe(tls, *(*uint8)(unsafe.Pointer(_setting + 1))) == 0 {
		goto _19
	}

	return null

_19:
	_salt = xascii_to_bin(tls, int32(*(*uint8)(unsafe.Pointer(_setting + 1))))<<(uint(6)%32) | xascii_to_bin(tls, int32(*(*uint8)(unsafe.Pointer(_setting))))
	*(*int8)(unsafe.Pointer(_output)) = int8(*(*uint8)(unsafe.Pointer(_setting)))
	*(*int8)(unsafe.Pointer(_output + 1)) = int8(*(*uint8)(unsafe.Pointer(_setting + 1)))
	_p = _output + uintptr(2)
_5:
	X__do_des(tls, uint32(0), uint32(0), _r0, _r1, _count, xsetup_salt(tls, _salt), _ekey)
	_l = *(*uint32)(unsafe.Pointer(_r0)) >> (uint(8) % 32)
	*(*uint8)(unsafe.Pointer(postinc481(&_p))) = *(*uint8)(unsafe.Pointer(xascii64 + uintptr(_l>>(uint(18)%32)&uint32(0x3f))))
	*(*uint8)(unsafe.Pointer(postinc481(&_p))) = *(*uint8)(unsafe.Pointer(xascii64 + uintptr(_l>>(uint(12)%32)&uint32(0x3f))))
	*(*uint8)(unsafe.Pointer(postinc481(&_p))) = *(*uint8)(unsafe.Pointer(xascii64 + uintptr(_l>>(uint(6)%32)&uint32(0x3f))))
	*(*uint8)(unsafe.Pointer(postinc481(&_p))) = *(*uint8)(unsafe.Pointer(xascii64 + uintptr(_l&uint32(0x3f))))
	_l = *(*uint32)(unsafe.Pointer(_r0))<<(uint(16)%32) | *(*uint32)(unsafe.Pointer(_r1))>>(uint(16)%32)&uint32(0xffff)
	*(*uint8)(unsafe.Pointer(postinc481(&_p))) = *(*uint8)(unsafe.Pointer(xascii64 + uintptr(_l>>(uint(18)%32)&uint32(0x3f))))
	*(*uint8)(unsafe.Pointer(postinc481(&_p))) = *(*uint8)(unsafe.Pointer(xascii64 + uintptr(_l>>(uint(12)%32)&uint32(0x3f))))
	*(*uint8)(unsafe.Pointer(postinc481(&_p))) = *(*uint8)(unsafe.Pointer(xascii64 + uintptr(_l>>(uint(6)%32)&uint32(0x3f))))
	*(*uint8)(unsafe.Pointer(postinc481(&_p))) = *(*uint8)(unsafe.Pointer(xascii64 + uintptr(_l&uint32(0x3f))))
	_l = *(*uint32)(unsafe.Pointer(_r1)) << (uint(2) % 32)
	*(*uint8)(unsafe.Pointer(postinc481(&_p))) = *(*uint8)(unsafe.Pointer(xascii64 + uintptr(_l>>(uint(12)%32)&uint32(0x3f))))
	*(*uint8)(unsafe.Pointer(postinc481(&_p))) = *(*uint8)(unsafe.Pointer(xascii64 + uintptr(_l>>(uint(6)%32)&uint32(0x3f))))
	*(*uint8)(unsafe.Pointer(postinc481(&_p))) = *(*uint8)(unsafe.Pointer(xascii64 + uintptr(_l&uint32(0x3f))))
	*(*uint8)(unsafe.Pointer(_p)) = uint8(0)
	return _output
}

// xascii_to_bin is defined at crypt_des.c:652:17
func xascii_to_bin(tls TLS, _ch int32) (r uint32) {
	var (
		_sch    int32
		_retval int32
	)
	_sch = func() int32 {
		if _ch < int32(0x80) {
			return _ch
		}
		return -(int32(0x100) - _ch)
	}()
	_retval = _sch - int32('.')
	if _sch < int32('A') {
		goto _1
	}

	_retval = _sch - int32(53)
	if _sch < int32('a') {
		goto _2
	}

	_retval = _sch - int32(59)
_2:
_1:
	_retval = _retval & int32(0x3f)
	return uint32(_retval)
}

// xascii64 [65]uint8, escapes: true, crypt_des.c:643:28
var xascii64 = ds + 7808

// xdes_cipher is defined at crypt_des.c:849:13
func xdes_cipher(tls TLS, _in uintptr /* *uint8 */, _out uintptr /* *uint8 */, _count uint32, _saltbits uint32, _ekey uintptr /* *Sexpanded_key */) {
	esc := MustMalloc(20)
	var (
		_l_out = esc      // *Tuint32_t = uint32
		_r_out = esc + 16 // *Tuint32_t = uint32
		_rawl  uint32
		_rawr  uint32
	)
	defer Free(esc)
	_rawl = uint32(*(*uint8)(unsafe.Pointer(_in + 3))) | uint32(*(*uint8)(unsafe.Pointer(_in + 2)))<<(uint(8)%32) | uint32(*(*uint8)(unsafe.Pointer(_in + 1)))<<(uint(16)%32) | uint32(*(*uint8)(unsafe.Pointer(_in)))<<(uint(24)%32)
	_rawr = uint32(*(*uint8)(unsafe.Pointer(_in + 7))) | uint32(*(*uint8)(unsafe.Pointer(_in + 6)))<<(uint(8)%32) | uint32(*(*uint8)(unsafe.Pointer(_in + 5)))<<(uint(16)%32) | uint32(*(*uint8)(unsafe.Pointer(_in + 4)))<<(uint(24)%32)
	X__do_des(tls, _rawl, _rawr, _l_out, _r_out, _count, _saltbits, _ekey)
	*(*uint8)(unsafe.Pointer(_out)) = uint8(*(*uint32)(unsafe.Pointer(_l_out)) >> (uint(24) % 32))
	*(*uint8)(unsafe.Pointer(_out + 1)) = uint8(*(*uint32)(unsafe.Pointer(_l_out)) >> (uint(16) % 32))
	*(*uint8)(unsafe.Pointer(_out + 2)) = uint8(*(*uint32)(unsafe.Pointer(_l_out)) >> (uint(8) % 32))
	*(*uint8)(unsafe.Pointer(_out + 3)) = uint8(*(*uint32)(unsafe.Pointer(_l_out)))
	*(*uint8)(unsafe.Pointer(_out + 4)) = uint8(*(*uint32)(unsafe.Pointer(_r_out)) >> (uint(24) % 32))
	*(*uint8)(unsafe.Pointer(_out + 5)) = uint8(*(*uint32)(unsafe.Pointer(_r_out)) >> (uint(16) % 32))
	*(*uint8)(unsafe.Pointer(_out + 6)) = uint8(*(*uint32)(unsafe.Pointer(_r_out)) >> (uint(8) % 32))
	*(*uint8)(unsafe.Pointer(_out + 7)) = uint8(*(*uint32)(unsafe.Pointer(_r_out)))
}

// xascii_is_unsafe is defined at crypt_des.c:672:19
func xascii_is_unsafe(tls TLS, _ch uint8) (r int32) {
	return bool2int(((_ch == 0) || (int32(_ch) == int32('\n'))) || (int32(_ch) == int32(':')))
}

// xsetup_salt is defined at crypt_des.c:677:17
func xsetup_salt(tls TLS, _salt uint32) (r uint32) {
	var (
		_obit     uint32
		_saltbit  uint32
		_saltbits uint32
		_i        uint32
	)
	_saltbits = uint32(0)
	_saltbit = uint32(1)
	_obit = uint32(0x800000)
	_i = uint32(0)
_1:
	if _i >= uint32(24) {
		goto _3
	}

	if (_salt & _saltbit) == 0 {
		goto _4
	}

	_saltbits = _saltbits | _obit
_4:
	_saltbit = _saltbit << uint32(1)
	_obit = _obit >> uint32(1)
	_i++
	goto _1

_3:
	return _saltbits
}

type t5size_t = uint64

// linking crypt_md5.o

// X__crypt_md5 is defined at crypt_md5.c:273:6
func X__crypt_md5(tls TLS, _key uintptr /* *int8 */, _setting uintptr /* *int8 */, _output uintptr /* *int8 */) (r uintptr /* *int8 */) {
	esc := MustMalloc(64)
	var (
		_testbuf = esc   // *[64]int8
		_p       uintptr // *int8
		_q       uintptr // *int8
	)
	defer Free(esc)
	_p = xmd5crypt(tls, _key, _setting, _output)
	_q = xmd5crypt(tls, x482testkey, x483testsetting, _testbuf)
	if _p != 0 && _q == _testbuf && Xmemcmp(tls, _testbuf, x484testhash, uint64(35)) == 0 {
		goto _1
	}

	return ts + 424 /* "*" */

_1:
	return _p
}

type t80__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t80__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// x1testkey [18]int8, escapes: true, crypt_md5.c:275:20
var x482testkey = ds + 7880

// x2testsetting [13]int8, escapes: true, crypt_md5.c:276:20
var x483testsetting = ds + 7904

// x3testhash [35]int8, escapes: true, crypt_md5.c:277:20
var x484testhash = ds + 7920

func postinc485(p *uintptr) uintptr { r := *p; *p += 1; return r }

// xmd5crypt is defined at crypt_md5.c:198:13
func xmd5crypt(tls TLS, _key uintptr /* *int8 */, _setting uintptr /* *int8 */, _output uintptr /* *int8 */) (r uintptr /* *int8 */) {
	esc := MustMalloc(112)
	var (
		_ctx  = esc      // *Smd5
		_md   = esc + 96 // *[16]uint8
		_i    uint32
		_klen uint32
		_slen uint32
		_salt uintptr // *int8
		_p    uintptr // *int8
	)
	defer Free(esc)
	_klen = uint32(Xstrnlen(tls, _key, uint64(30001)))
	if _klen <= uint32(30000) {
		goto _1
	}

	return null

_1:
	if Xstrncmp(tls, _setting, ts+428 /* "$1$" */, uint64(3)) == int32(0) {
		goto _2
	}

	return null

_2:
	_salt = _setting + uintptr(3)
	_i = uint32(0)
_3:
	if _i >= uint32(8) || *(*int8)(unsafe.Pointer(_salt + uintptr(_i))) == 0 || int32(*(*int8)(unsafe.Pointer(_salt + uintptr(_i)))) == int32('$') {
		goto _5
	}

	_i++
	goto _3

_5:
	_slen = _i
	xmd5_init(tls, _ctx)
	xmd5_update(tls, _ctx, _key, uint64(_klen))
	xmd5_update(tls, _ctx, _salt, uint64(_slen))
	xmd5_update(tls, _ctx, _key, uint64(_klen))
	xmd5_sum(tls, _ctx, _md)
	xmd5_init(tls, _ctx)
	xmd5_update(tls, _ctx, _key, uint64(_klen))
	xmd5_update(tls, _ctx, _setting, uint64(uint32(3)+_slen))
	_i = _klen
_6:
	if uint64(_i) <= uint64(16) {
		goto _8
	}

	xmd5_update(tls, _ctx, _md, uint64(16))
	_i = uint32(uint64(_i) - uint64(16))
	goto _6

_8:
	xmd5_update(tls, _ctx, _md, uint64(_i))
	*(*uint8)(unsafe.Pointer(_md)) = uint8(0)
	_i = _klen
_9:
	if _i == 0 {
		goto _11
	}

	if (_i & uint32(1)) == 0 {
		goto _12
	}

	xmd5_update(tls, _ctx, _md, uint64(1))
	goto _13

_12:
	xmd5_update(tls, _ctx, _key, uint64(1))
_13:
	_i = _i >> uint32(1)
	goto _9

_11:
	xmd5_sum(tls, _ctx, _md)
	_i = uint32(0)
_14:
	if _i >= uint32(1000) {
		goto _16
	}

	xmd5_init(tls, _ctx)
	if (_i % uint32(2)) == 0 {
		goto _17
	}

	xmd5_update(tls, _ctx, _key, uint64(_klen))
	goto _18

_17:
	xmd5_update(tls, _ctx, _md, uint64(16))
_18:
	if (_i % uint32(3)) == 0 {
		goto _19
	}

	xmd5_update(tls, _ctx, _salt, uint64(_slen))
_19:
	if (_i % uint32(7)) == 0 {
		goto _20
	}

	xmd5_update(tls, _ctx, _key, uint64(_klen))
_20:
	if (_i % uint32(2)) == 0 {
		goto _21
	}

	xmd5_update(tls, _ctx, _md, uint64(16))
	goto _22

_21:
	xmd5_update(tls, _ctx, _key, uint64(_klen))
_22:
	xmd5_sum(tls, _ctx, _md)
	_i++
	goto _14

_16:
	Xmemcpy(tls, _output, _setting, uint64(uint32(3)+_slen))
	_p = (_output + uintptr(3)) + uintptr(_slen)
	*(*int8)(unsafe.Pointer(postinc485(&_p))) = int8('$')
	X__assert_fail(tls, ts+0 /* "TODO(ccgo)" */, ts+432 /* "src/crypt/crypt_..." */, int32(262), x486__func__)
	return r
}

// x5__func__ [9]int8, escapes: true, crypt_md5.c:199:1
var x486__func__ = ds + 7960

type Smd5 = struct {
	Flen uint64
	Fh   [4]uint32
	Fbuf [64]uint8
}

// xmd5_init is defined at crypt_md5.c:113:13
func xmd5_init(tls TLS, _s uintptr /* *Smd5 */) {
	*(*uint64)(unsafe.Pointer(_s)) = uint64(0)
	*(*uint32)(unsafe.Pointer(_s + 8)) = uint32(0x67452301)
	*(*uint32)(unsafe.Pointer((_s + 8) + 4)) = uint32(0xefcdab89)
	*(*uint32)(unsafe.Pointer((_s + 8) + 8)) = uint32(0x98badcfe)
	*(*uint32)(unsafe.Pointer((_s + 8) + 12)) = uint32(0x10325476)
}

// xmd5_update is defined at crypt_md5.c:135:13
func xmd5_update(tls TLS, _s uintptr /* *Smd5 */, _m uintptr /* *void */, _len uint64) {
	var (
		_p uintptr // *Tuint8_t = uint8
		_r uint32
	)
	_p = _m
	_r = uint32(*(*uint64)(unsafe.Pointer(_s)) % uint64(64))
	{
		p := (*uint64)(unsafe.Pointer(_s))
		*p = *p + _len
	}
	if _r == 0 {
		goto _1
	}

	if _len >= uint64(uint32(64)-_r) {
		goto _2
	}

	Xmemcpy(tls, (_s+24)+uintptr(_r), _p, _len)
	return

_2:
	Xmemcpy(tls, (_s+24)+uintptr(_r), _p, uint64(uint32(64)-_r))
	_len = _len - uint64(uint32(64)-_r)
	_p += uintptr(uint32(64) - _r)
	xprocessblock(tls, _s, _s+24)
_1:
_3:
	if _len < uint64(64) {
		goto _5
	}

	xprocessblock(tls, _s, _p)
	_len = _len - uint64(64)
	_p += uintptr(64)
	goto _3

_5:
	Xmemcpy(tls, _s+24, _p, _len)
}

// xmd5_sum is defined at crypt_md5.c:122:13
func xmd5_sum(tls TLS, _s uintptr /* *Smd5 */, _md uintptr /* *Tuint8_t = uint8 */) {
	var _i int32

	xpad(tls, _s)
	_i = int32(0)
_1:
	if _i >= int32(4) {
		goto _3
	}

	*(*uint8)(unsafe.Pointer(_md + uintptr(int32(4)*_i))) = uint8(*(*uint32)(unsafe.Pointer((_s + 8) + 4*uintptr(_i))))
	*(*uint8)(unsafe.Pointer(_md + uintptr(int32(4)*_i+int32(1)))) = uint8(*(*uint32)(unsafe.Pointer((_s + 8) + 4*uintptr(_i))) >> (uint(8) % 32))
	*(*uint8)(unsafe.Pointer(_md + uintptr(int32(4)*_i+int32(2)))) = uint8(*(*uint32)(unsafe.Pointer((_s + 8) + 4*uintptr(_i))) >> (uint(16) % 32))
	*(*uint8)(unsafe.Pointer(_md + uintptr(int32(4)*_i+int32(3)))) = uint8(*(*uint32)(unsafe.Pointer((_s + 8) + 4*uintptr(_i))) >> (uint(24) % 32))
	_i++
	goto _1

_3:
}

type t6size_t = uint64

type t6uint64_t = uint64

type t12uint32_t = uint32

type Tuint8_t = uint8

// xprocessblock is defined at crypt_md5.c:42:13
func xprocessblock(tls TLS, _s uintptr /* *Smd5 */, _buf uintptr /* *Tuint8_t = uint8 */) {
	esc := MustMalloc(64)
	var (
		_i uint32
		_W = esc // *[16]uint32
		_a uint32
		_b uint32
		_c uint32
		_d uint32
	)
	defer Free(esc)
	_i = uint32(0)
_1:
	if _i >= uint32(16) {
		goto _3
	}

	*(*uint32)(unsafe.Pointer(_W + 4*uintptr(_i))) = uint32(*(*uint8)(unsafe.Pointer(_buf + uintptr(uint32(4)*_i))))
	{
		p := (*uint32)(unsafe.Pointer(_W + 4*uintptr(_i)))
		*p = *p | uint32(*(*uint8)(unsafe.Pointer(_buf + uintptr(uint32(4)*_i+uint32(1)))))<<(uint(8)%32)
	}
	{
		p := (*uint32)(unsafe.Pointer(_W + 4*uintptr(_i)))
		*p = *p | uint32(*(*uint8)(unsafe.Pointer(_buf + uintptr(uint32(4)*_i+uint32(2)))))<<(uint(16)%32)
	}
	{
		p := (*uint32)(unsafe.Pointer(_W + 4*uintptr(_i)))
		*p = *p | uint32(*(*uint8)(unsafe.Pointer(_buf + uintptr(uint32(4)*_i+uint32(3)))))<<(uint(24)%32)
	}
	_i++
	goto _1

_3:
	_a = *(*uint32)(unsafe.Pointer(_s + 8))
	_b = *(*uint32)(unsafe.Pointer((_s + 8) + 4))
	_c = *(*uint32)(unsafe.Pointer((_s + 8) + 8))
	_d = *(*uint32)(unsafe.Pointer((_s + 8) + 12))
	_i = uint32(0)
_4:
	if _i >= uint32(16) {
		goto _5
	}

	_a = _a + (_d ^ _b&(_c^_d) + *(*uint32)(unsafe.Pointer(_W + 4*uintptr(_i))) + *(*uint32)(unsafe.Pointer(xtab + 4*uintptr(_i))))
	_a = xrol(tls, _a, int32(7)) + _b
	_i++
	_d = _d + (_c ^ _a&(_b^_c) + *(*uint32)(unsafe.Pointer(_W + 4*uintptr(_i))) + *(*uint32)(unsafe.Pointer(xtab + 4*uintptr(_i))))
	_d = xrol(tls, _d, int32(12)) + _a
	_i++
	_c = _c + (_b ^ _d&(_a^_b) + *(*uint32)(unsafe.Pointer(_W + 4*uintptr(_i))) + *(*uint32)(unsafe.Pointer(xtab + 4*uintptr(_i))))
	_c = xrol(tls, _c, int32(17)) + _d
	_i++
	_b = _b + (_a ^ _c&(_d^_a) + *(*uint32)(unsafe.Pointer(_W + 4*uintptr(_i))) + *(*uint32)(unsafe.Pointer(xtab + 4*uintptr(_i))))
	_b = xrol(tls, _b, int32(22)) + _c
	_i++
	goto _4

_5:
_6:
	if _i >= uint32(32) {
		goto _7
	}

	_a = _a + (_c ^ _d&(_c^_b) + *(*uint32)(unsafe.Pointer(_W + 4*uintptr((uint32(5)*_i+uint32(1))%uint32(16)))) + *(*uint32)(unsafe.Pointer(xtab + 4*uintptr(_i))))
	_a = xrol(tls, _a, int32(5)) + _b
	_i++
	_d = _d + (_b ^ _c&(_b^_a) + *(*uint32)(unsafe.Pointer(_W + 4*uintptr((uint32(5)*_i+uint32(1))%uint32(16)))) + *(*uint32)(unsafe.Pointer(xtab + 4*uintptr(_i))))
	_d = xrol(tls, _d, int32(9)) + _a
	_i++
	_c = _c + (_a ^ _b&(_a^_d) + *(*uint32)(unsafe.Pointer(_W + 4*uintptr((uint32(5)*_i+uint32(1))%uint32(16)))) + *(*uint32)(unsafe.Pointer(xtab + 4*uintptr(_i))))
	_c = xrol(tls, _c, int32(14)) + _d
	_i++
	_b = _b + (_d ^ _a&(_d^_c) + *(*uint32)(unsafe.Pointer(_W + 4*uintptr((uint32(5)*_i+uint32(1))%uint32(16)))) + *(*uint32)(unsafe.Pointer(xtab + 4*uintptr(_i))))
	_b = xrol(tls, _b, int32(20)) + _c
	_i++
	goto _6

_7:
_8:
	if _i >= uint32(48) {
		goto _9
	}

	_a = _a + (_b ^ _c ^ _d + *(*uint32)(unsafe.Pointer(_W + 4*uintptr((uint32(3)*_i+uint32(5))%uint32(16)))) + *(*uint32)(unsafe.Pointer(xtab + 4*uintptr(_i))))
	_a = xrol(tls, _a, int32(4)) + _b
	_i++
	_d = _d + (_a ^ _b ^ _c + *(*uint32)(unsafe.Pointer(_W + 4*uintptr((uint32(3)*_i+uint32(5))%uint32(16)))) + *(*uint32)(unsafe.Pointer(xtab + 4*uintptr(_i))))
	_d = xrol(tls, _d, int32(11)) + _a
	_i++
	_c = _c + (_d ^ _a ^ _b + *(*uint32)(unsafe.Pointer(_W + 4*uintptr((uint32(3)*_i+uint32(5))%uint32(16)))) + *(*uint32)(unsafe.Pointer(xtab + 4*uintptr(_i))))
	_c = xrol(tls, _c, int32(16)) + _d
	_i++
	_b = _b + (_c ^ _d ^ _a + *(*uint32)(unsafe.Pointer(_W + 4*uintptr((uint32(3)*_i+uint32(5))%uint32(16)))) + *(*uint32)(unsafe.Pointer(xtab + 4*uintptr(_i))))
	_b = xrol(tls, _b, int32(23)) + _c
	_i++
	goto _8

_9:
_10:
	if _i >= uint32(64) {
		goto _11
	}

	_a = _a + (_c ^ (_b | ^_d) + *(*uint32)(unsafe.Pointer(_W + 4*uintptr(uint32(7)*_i%uint32(16)))) + *(*uint32)(unsafe.Pointer(xtab + 4*uintptr(_i))))
	_a = xrol(tls, _a, int32(6)) + _b
	_i++
	_d = _d + (_b ^ (_a | ^_c) + *(*uint32)(unsafe.Pointer(_W + 4*uintptr(uint32(7)*_i%uint32(16)))) + *(*uint32)(unsafe.Pointer(xtab + 4*uintptr(_i))))
	_d = xrol(tls, _d, int32(10)) + _a
	_i++
	_c = _c + (_a ^ (_d | ^_b) + *(*uint32)(unsafe.Pointer(_W + 4*uintptr(uint32(7)*_i%uint32(16)))) + *(*uint32)(unsafe.Pointer(xtab + 4*uintptr(_i))))
	_c = xrol(tls, _c, int32(15)) + _d
	_i++
	_b = _b + (_d ^ (_c | ^_a) + *(*uint32)(unsafe.Pointer(_W + 4*uintptr(uint32(7)*_i%uint32(16)))) + *(*uint32)(unsafe.Pointer(xtab + 4*uintptr(_i))))
	_b = xrol(tls, _b, int32(21)) + _c
	_i++
	goto _10

_11:
	{
		p := (*uint32)(unsafe.Pointer(_s + 8))
		*p = *p + _a
	}
	{
		p := (*uint32)(unsafe.Pointer((_s + 8) + 4))
		*p = *p + _b
	}
	{
		p := (*uint32)(unsafe.Pointer((_s + 8) + 8))
		*p = *p + _c
	}
	{
		p := (*uint32)(unsafe.Pointer((_s + 8) + 12))
		*p = *p + _d
	}
}

func postinc487(p *uint32) uint32 { r := *p; *p += 1; return r }

// xpad is defined at crypt_md5.c:90:13
func xpad(tls TLS, _s uintptr /* *Smd5 */) {
	var _r uint32

	_r = uint32(*(*uint64)(unsafe.Pointer(_s)) % uint64(64))
	*(*uint8)(unsafe.Pointer((_s + 24) + uintptr(postinc487(&_r)))) = uint8(0x80)
	if _r <= uint32(56) {
		goto _1
	}

	Xmemset(tls, (_s+24)+uintptr(_r), int32(0), uint64(uint32(64)-_r))
	_r = uint32(0)
	xprocessblock(tls, _s, _s+24)
_1:
	Xmemset(tls, (_s+24)+uintptr(_r), int32(0), uint64(uint32(56)-_r))
	{
		p := (*uint64)(unsafe.Pointer(_s))
		*p = *p * uint64(8)
	}
	*(*uint8)(unsafe.Pointer((_s + 24) + 56)) = uint8(*(*uint64)(unsafe.Pointer(_s)))
	*(*uint8)(unsafe.Pointer((_s + 24) + 57)) = uint8(*(*uint64)(unsafe.Pointer(_s)) >> (uint(8) % 64))
	*(*uint8)(unsafe.Pointer((_s + 24) + 58)) = uint8(*(*uint64)(unsafe.Pointer(_s)) >> (uint(16) % 64))
	*(*uint8)(unsafe.Pointer((_s + 24) + 59)) = uint8(*(*uint64)(unsafe.Pointer(_s)) >> (uint(24) % 64))
	*(*uint8)(unsafe.Pointer((_s + 24) + 60)) = uint8(*(*uint64)(unsafe.Pointer(_s)) >> (uint(32) % 64))
	*(*uint8)(unsafe.Pointer((_s + 24) + 61)) = uint8(*(*uint64)(unsafe.Pointer(_s)) >> (uint(40) % 64))
	*(*uint8)(unsafe.Pointer((_s + 24) + 62)) = uint8(*(*uint64)(unsafe.Pointer(_s)) >> (uint(48) % 64))
	*(*uint8)(unsafe.Pointer((_s + 24) + 63)) = uint8(*(*uint64)(unsafe.Pointer(_s)) >> (uint(56) % 64))
	xprocessblock(tls, _s, _s+24)
}

// xtab [64]uint32, escapes: true, crypt_md5.c:31:23
var xtab = ds + 7976

// xrol is defined at crypt_md5.c:21:17
func xrol(tls TLS, _n uint32, _k int32) (r uint32) {
	return _n<<(uint(_k)%32) | _n>>(uint(int32(32)-_k)%32)
}

// linking crypt_r.o

// X__crypt_r is defined at crypt_r.c:12:6
func X__crypt_r(tls TLS, _key uintptr /* *int8 */, _salt uintptr /* *int8 */, _data uintptr /* *Scrypt_data */) (r uintptr /* *int8 */) {
	var _output uintptr // *int8

	_output = _data
	if int32(*(*int8)(unsafe.Pointer(_salt))) != int32('$') || *(*int8)(unsafe.Pointer(_salt + 1)) == 0 || *(*int8)(unsafe.Pointer(_salt + 2)) == 0 {
		goto _1
	}

	if int32(*(*int8)(unsafe.Pointer(_salt + 1))) != int32('1') || int32(*(*int8)(unsafe.Pointer(_salt + 2))) != int32('$') {
		goto _2
	}

	return X__crypt_md5(tls, _key, _salt, _output)

_2:
	if int32(*(*int8)(unsafe.Pointer(_salt + 1))) != int32('2') || int32(*(*int8)(unsafe.Pointer(_salt + 3))) != int32('$') {
		goto _3
	}

	return X__crypt_blowfish(tls, _key, _salt, _output)

_3:
	if int32(*(*int8)(unsafe.Pointer(_salt + 1))) != int32('5') || int32(*(*int8)(unsafe.Pointer(_salt + 2))) != int32('$') {
		goto _4
	}

	return X__crypt_sha256(tls, _key, _salt, _output)

_4:
	if int32(*(*int8)(unsafe.Pointer(_salt + 1))) != int32('6') || int32(*(*int8)(unsafe.Pointer(_salt + 2))) != int32('$') {
		goto _5
	}

	return X__crypt_sha512(tls, _key, _salt, _output)

_5:
_1:
	return X__crypt_des(tls, _key, _salt, _output)
}

type t81__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t81__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type Scrypt_data = struct {
	Finitialized int32
	F__buf       [256]int8
}

// linking crypt_sha256.o

// X__crypt_sha256 is defined at crypt_sha256.c:310:6
func X__crypt_sha256(tls TLS, _key uintptr /* *int8 */, _setting uintptr /* *int8 */, _output uintptr /* *int8 */) (r uintptr /* *int8 */) {
	esc := MustMalloc(128)
	var (
		_testbuf = esc   // *[128]int8
		_p       uintptr // *int8
		_q       uintptr // *int8
	)
	defer Free(esc)
	_p = xsha256crypt(tls, _key, _setting, _output)
	_q = xsha256crypt(tls, x488testkey, x489testsetting, _testbuf)
	if _p != 0 && _q == _testbuf && Xmemcmp(tls, _testbuf, x490testhash, uint64(73)) == 0 {
		goto _1
	}

	return ts + 424 /* "*" */

_1:
	return _p
}

type t82__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t82__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// x1testkey [18]int8, escapes: true, crypt_sha256.c:312:20
var x488testkey = ds + 8232

// x2testsetting [30]int8, escapes: true, crypt_sha256.c:313:20
var x489testsetting = ds + 8256

// x3testhash [73]int8, escapes: true, crypt_sha256.c:314:20
var x490testhash = ds + 8288

// xsha256crypt is defined at crypt_sha256.c:188:13
func xsha256crypt(tls TLS, _key uintptr /* *int8 */, _setting uintptr /* *int8 */, _output uintptr /* *int8 */) (r uintptr /* *int8 */) {
	esc := MustMalloc(248)
	var (
		_ctx    = esc       // *Ssha256
		_md     = esc + 112 // *[32]uint8
		_kmd    = esc + 144 // *[32]uint8
		_smd    = esc + 176 // *[32]uint8
		_i      uint32
		_r      uint32
		_klen   uint32
		_slen   uint32
		_rounds = esc + 208 // *[20]int8
		_salt   uintptr     // *int8
		_p      uintptr     // *int8
		_u      uint64
		_end    = esc + 240 // **int8
	)
	defer Free(esc)
	*(*[20]int8)(unsafe.Pointer(_rounds)) = *(*[20]int8)(unsafe.Pointer(ts + 456 /* "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00..." */))
	_klen = uint32(Xstrnlen(tls, _key, uint64(257)))
	if _klen <= uint32(256) {
		goto _1
	}

	return null

_1:
	if Xstrncmp(tls, _setting, ts+476 /* "$5$" */, uint64(3)) == int32(0) {
		goto _2
	}

	return null

_2:
	_salt = _setting + uintptr(3)
	_r = uint32(5000)
	if Xstrncmp(tls, _salt, ts+480 /* "rounds=" */, uint64(7)) != int32(0) {
		goto _3
	}

	_salt += uintptr(7)
	if uint32(*(*int8)(unsafe.Pointer(_salt)))-uint32('0') < uint32(10) {
		goto _4
	}

	return null

_4:
	_u = Xstrtoul(tls, _salt, _end, int32(10))
	if int32(*(*int8)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_end))))) == int32('$') {
		goto _5
	}

	return null

_5:
	_salt = *(*uintptr)(unsafe.Pointer(_end)) + uintptr(1)
	if _u >= uint64(1000) {
		goto _6
	}

	_r = uint32(1000)
	goto _7

_6:
	if _u <= uint64(9999999) {
		goto _8
	}

	return null

	goto _9

_8:
	_r = uint32(_u)
_9:
_7:
	Xsprintf(tls, _rounds, ts+488 /* "rounds=%u$" */, _r)
_3:
	_i = uint32(0)
_10:
	if _i >= uint32(16) || *(*int8)(unsafe.Pointer(_salt + uintptr(_i))) == 0 || int32(*(*int8)(unsafe.Pointer(_salt + uintptr(_i)))) == int32('$') {
		goto _12
	}

	if int32(*(*int8)(unsafe.Pointer(_salt + uintptr(_i)))) != int32('\n') && int32(*(*int8)(unsafe.Pointer(_salt + uintptr(_i)))) != int32(':') {
		goto _13
	}

	return null

_13:
	_i++
	goto _10

_12:
	_slen = _i
	xsha256_init(tls, _ctx)
	xsha256_update(tls, _ctx, _key, uint64(_klen))
	xsha256_update(tls, _ctx, _salt, uint64(_slen))
	xsha256_update(tls, _ctx, _key, uint64(_klen))
	xsha256_sum(tls, _ctx, _md)
	xsha256_init(tls, _ctx)
	xsha256_update(tls, _ctx, _key, uint64(_klen))
	xsha256_update(tls, _ctx, _salt, uint64(_slen))
	xhashmd(tls, _ctx, _klen, _md)
	_i = _klen
_14:
	if _i <= uint32(0) {
		goto _16
	}

	if (_i & uint32(1)) == 0 {
		goto _17
	}

	xsha256_update(tls, _ctx, _md, uint64(32))
	goto _18

_17:
	xsha256_update(tls, _ctx, _key, uint64(_klen))
_18:
	_i = _i >> uint32(1)
	goto _14

_16:
	xsha256_sum(tls, _ctx, _md)
	xsha256_init(tls, _ctx)
	_i = uint32(0)
_19:
	if _i >= _klen {
		goto _21
	}

	xsha256_update(tls, _ctx, _key, uint64(_klen))
	_i++
	goto _19

_21:
	xsha256_sum(tls, _ctx, _kmd)
	xsha256_init(tls, _ctx)
	_i = uint32(0)
_22:
	if _i >= uint32(int32(16)+int32(*(*uint8)(unsafe.Pointer(_md)))) {
		goto _24
	}

	xsha256_update(tls, _ctx, _salt, uint64(_slen))
	_i++
	goto _22

_24:
	xsha256_sum(tls, _ctx, _smd)
	_i = uint32(0)
_25:
	if _i >= _r {
		goto _27
	}

	xsha256_init(tls, _ctx)
	if (_i % uint32(2)) == 0 {
		goto _28
	}

	xhashmd(tls, _ctx, _klen, _kmd)
	goto _29

_28:
	xsha256_update(tls, _ctx, _md, uint64(32))
_29:
	if (_i % uint32(3)) == 0 {
		goto _30
	}

	xsha256_update(tls, _ctx, _smd, uint64(_slen))
_30:
	if (_i % uint32(7)) == 0 {
		goto _31
	}

	xhashmd(tls, _ctx, _klen, _kmd)
_31:
	if (_i % uint32(2)) == 0 {
		goto _32
	}

	xsha256_update(tls, _ctx, _md, uint64(32))
	goto _33

_32:
	xhashmd(tls, _ctx, _klen, _kmd)
_33:
	xsha256_sum(tls, _ctx, _md)
	_i++
	goto _25

_27:
	_p = _output
	_p += uintptr(Xsprintf(tls, _p, ts+500 /* "$5$%s%.*s$" */, _rounds, _slen, _salt))
	X__assert_fail(tls, ts+0 /* "TODO(ccgo)" */, ts+512 /* "src/crypt/crypt_..." */, int32(299), x491__func__)
	return r
}

// x5__func__ [12]int8, escapes: true, crypt_sha256.c:189:1
var x491__func__ = ds + 8368

type Ssha256 = struct {
	Flen uint64
	Fh   [8]uint32
	Fbuf [64]uint8
}

// xsha256_init is defined at crypt_sha256.c:110:13
func xsha256_init(tls TLS, _s uintptr /* *Ssha256 */) {
	*(*uint64)(unsafe.Pointer(_s)) = uint64(0)
	*(*uint32)(unsafe.Pointer(_s + 8)) = uint32(0x6a09e667)
	*(*uint32)(unsafe.Pointer((_s + 8) + 4)) = uint32(0xbb67ae85)
	*(*uint32)(unsafe.Pointer((_s + 8) + 8)) = uint32(0x3c6ef372)
	*(*uint32)(unsafe.Pointer((_s + 8) + 12)) = uint32(0xa54ff53a)
	*(*uint32)(unsafe.Pointer((_s + 8) + 16)) = uint32(0x510e527f)
	*(*uint32)(unsafe.Pointer((_s + 8) + 20)) = uint32(0x9b05688c)
	*(*uint32)(unsafe.Pointer((_s + 8) + 24)) = uint32(0x1f83d9ab)
	*(*uint32)(unsafe.Pointer((_s + 8) + 28)) = uint32(0x5be0cd19)
}

// xsha256_update is defined at crypt_sha256.c:136:13
func xsha256_update(tls TLS, _s uintptr /* *Ssha256 */, _m uintptr /* *void */, _len uint64) {
	var (
		_p uintptr // *Tuint8_t = uint8
		_r uint32
	)
	_p = _m
	_r = uint32(*(*uint64)(unsafe.Pointer(_s)) % uint64(64))
	{
		p := (*uint64)(unsafe.Pointer(_s))
		*p = *p + _len
	}
	if _r == 0 {
		goto _1
	}

	if _len >= uint64(uint32(64)-_r) {
		goto _2
	}

	Xmemcpy(tls, (_s+40)+uintptr(_r), _p, _len)
	return

_2:
	Xmemcpy(tls, (_s+40)+uintptr(_r), _p, uint64(uint32(64)-_r))
	_len = _len - uint64(uint32(64)-_r)
	_p += uintptr(uint32(64) - _r)
	x1processblock(tls, _s, _s+40)
_1:
_3:
	if _len < uint64(64) {
		goto _5
	}

	x1processblock(tls, _s, _p)
	_len = _len - uint64(64)
	_p += uintptr(64)
	goto _3

_5:
	Xmemcpy(tls, _s+40, _p, _len)
}

// xsha256_sum is defined at crypt_sha256.c:123:13
func xsha256_sum(tls TLS, _s uintptr /* *Ssha256 */, _md uintptr /* *Tuint8_t = uint8 */) {
	var _i int32

	x1pad(tls, _s)
	_i = int32(0)
_1:
	if _i >= int32(8) {
		goto _3
	}

	*(*uint8)(unsafe.Pointer(_md + uintptr(int32(4)*_i))) = uint8(*(*uint32)(unsafe.Pointer((_s + 8) + 4*uintptr(_i))) >> (uint(24) % 32))
	*(*uint8)(unsafe.Pointer(_md + uintptr(int32(4)*_i+int32(1)))) = uint8(*(*uint32)(unsafe.Pointer((_s + 8) + 4*uintptr(_i))) >> (uint(16) % 32))
	*(*uint8)(unsafe.Pointer(_md + uintptr(int32(4)*_i+int32(2)))) = uint8(*(*uint32)(unsafe.Pointer((_s + 8) + 4*uintptr(_i))) >> (uint(8) % 32))
	*(*uint8)(unsafe.Pointer(_md + uintptr(int32(4)*_i+int32(3)))) = uint8(*(*uint32)(unsafe.Pointer((_s + 8) + 4*uintptr(_i))))
	_i++
	goto _1

_3:
}

// xhashmd is defined at crypt_sha256.c:179:13
func xhashmd(tls TLS, _s uintptr /* *Ssha256 */, _n uint32, _md uintptr /* *void */) {
	var _i uint32

	_i = _n
_1:
	if _i <= uint32(32) {
		goto _3
	}

	xsha256_update(tls, _s, _md, uint64(32))
	_i = _i - uint32(32)
	goto _1

_3:
	xsha256_update(tls, _s, _md, uint64(_i))
}

type t7size_t = uint64

type t7uint64_t = uint64

type t13uint32_t = uint32

type t1uint8_t = uint8

// xprocessblock is defined at crypt_sha256.c:44:13
func x1processblock(tls TLS, _s uintptr /* *Ssha256 */, _buf uintptr /* *Tuint8_t = uint8 */) {
	esc := MustMalloc(256)
	var (
		_W  = esc // *[64]uint32
		_t1 uint32
		_t2 uint32
		_a  uint32
		_b  uint32
		_c  uint32
		_d  uint32
		_e  uint32
		_f  uint32
		_g  uint32
		_h  uint32
		_i  int32
	)
	defer Free(esc)
	_i = int32(0)
_1:
	if _i >= int32(16) {
		goto _3
	}

	*(*uint32)(unsafe.Pointer(_W + 4*uintptr(_i))) = uint32(*(*uint8)(unsafe.Pointer(_buf + uintptr(int32(4)*_i)))) << (uint(24) % 32)
	{
		p := (*uint32)(unsafe.Pointer(_W + 4*uintptr(_i)))
		*p = *p | uint32(*(*uint8)(unsafe.Pointer(_buf + uintptr(int32(4)*_i+int32(1)))))<<(uint(16)%32)
	}
	{
		p := (*uint32)(unsafe.Pointer(_W + 4*uintptr(_i)))
		*p = *p | uint32(*(*uint8)(unsafe.Pointer(_buf + uintptr(int32(4)*_i+int32(2)))))<<(uint(8)%32)
	}
	{
		p := (*uint32)(unsafe.Pointer(_W + 4*uintptr(_i)))
		*p = *p | uint32(*(*uint8)(unsafe.Pointer(_buf + uintptr(int32(4)*_i+int32(3)))))
	}
	_i++
	goto _1

_3:
_4:
	if _i >= int32(64) {
		goto _6
	}

	*(*uint32)(unsafe.Pointer(_W + 4*uintptr(_i))) = xror(tls, *(*uint32)(unsafe.Pointer(_W + 4*uintptr(_i-int32(2)))), int32(17)) ^ xror(tls, *(*uint32)(unsafe.Pointer(_W + 4*uintptr(_i-int32(2)))), int32(19)) ^ *(*uint32)(unsafe.Pointer(_W + 4*uintptr(_i-int32(2))))>>(uint(10)%32) + *(*uint32)(unsafe.Pointer(_W + 4*uintptr(_i-int32(7)))) + (xror(tls, *(*uint32)(unsafe.Pointer(_W + 4*uintptr(_i-int32(15)))), int32(7)) ^ xror(tls, *(*uint32)(unsafe.Pointer(_W + 4*uintptr(_i-int32(15)))), int32(18)) ^ *(*uint32)(unsafe.Pointer(_W + 4*uintptr(_i-int32(15))))>>(uint(3)%32)) + *(*uint32)(unsafe.Pointer(_W + 4*uintptr(_i-int32(16))))
	_i++
	goto _4

_6:
	_a = *(*uint32)(unsafe.Pointer(_s + 8))
	_b = *(*uint32)(unsafe.Pointer((_s + 8) + 4))
	_c = *(*uint32)(unsafe.Pointer((_s + 8) + 8))
	_d = *(*uint32)(unsafe.Pointer((_s + 8) + 12))
	_e = *(*uint32)(unsafe.Pointer((_s + 8) + 16))
	_f = *(*uint32)(unsafe.Pointer((_s + 8) + 20))
	_g = *(*uint32)(unsafe.Pointer((_s + 8) + 24))
	_h = *(*uint32)(unsafe.Pointer((_s + 8) + 28))
	_i = int32(0)
_7:
	if _i >= int32(64) {
		goto _9
	}

	_t1 = _h + (xror(tls, _e, int32(6)) ^ xror(tls, _e, int32(11)) ^ xror(tls, _e, int32(25))) + (_g ^ _e&(_f^_g)) + *(*uint32)(unsafe.Pointer(xK + 4*uintptr(_i))) + *(*uint32)(unsafe.Pointer(_W + 4*uintptr(_i)))
	_t2 = xror(tls, _a, int32(2)) ^ xror(tls, _a, int32(13)) ^ xror(tls, _a, int32(22)) + (_a&_b | _c&(_a|_b))
	_h = _g
	_g = _f
	_f = _e
	_e = _d + _t1
	_d = _c
	_c = _b
	_b = _a
	_a = _t1 + _t2
	_i++
	goto _7

_9:
	{
		p := (*uint32)(unsafe.Pointer(_s + 8))
		*p = *p + _a
	}
	{
		p := (*uint32)(unsafe.Pointer((_s + 8) + 4))
		*p = *p + _b
	}
	{
		p := (*uint32)(unsafe.Pointer((_s + 8) + 8))
		*p = *p + _c
	}
	{
		p := (*uint32)(unsafe.Pointer((_s + 8) + 12))
		*p = *p + _d
	}
	{
		p := (*uint32)(unsafe.Pointer((_s + 8) + 16))
		*p = *p + _e
	}
	{
		p := (*uint32)(unsafe.Pointer((_s + 8) + 20))
		*p = *p + _f
	}
	{
		p := (*uint32)(unsafe.Pointer((_s + 8) + 24))
		*p = *p + _g
	}
	{
		p := (*uint32)(unsafe.Pointer((_s + 8) + 28))
		*p = *p + _h
	}
}

func postinc492(p *uint32) uint32 { r := *p; *p += 1; return r }

// xpad is defined at crypt_sha256.c:87:13
func x1pad(tls TLS, _s uintptr /* *Ssha256 */) {
	var _r uint32

	_r = uint32(*(*uint64)(unsafe.Pointer(_s)) % uint64(64))
	*(*uint8)(unsafe.Pointer((_s + 40) + uintptr(postinc492(&_r)))) = uint8(0x80)
	if _r <= uint32(56) {
		goto _1
	}

	Xmemset(tls, (_s+40)+uintptr(_r), int32(0), uint64(uint32(64)-_r))
	_r = uint32(0)
	x1processblock(tls, _s, _s+40)
_1:
	Xmemset(tls, (_s+40)+uintptr(_r), int32(0), uint64(uint32(56)-_r))
	{
		p := (*uint64)(unsafe.Pointer(_s))
		*p = *p * uint64(8)
	}
	*(*uint8)(unsafe.Pointer((_s + 40) + 56)) = uint8(*(*uint64)(unsafe.Pointer(_s)) >> (uint(56) % 64))
	*(*uint8)(unsafe.Pointer((_s + 40) + 57)) = uint8(*(*uint64)(unsafe.Pointer(_s)) >> (uint(48) % 64))
	*(*uint8)(unsafe.Pointer((_s + 40) + 58)) = uint8(*(*uint64)(unsafe.Pointer(_s)) >> (uint(40) % 64))
	*(*uint8)(unsafe.Pointer((_s + 40) + 59)) = uint8(*(*uint64)(unsafe.Pointer(_s)) >> (uint(32) % 64))
	*(*uint8)(unsafe.Pointer((_s + 40) + 60)) = uint8(*(*uint64)(unsafe.Pointer(_s)) >> (uint(24) % 64))
	*(*uint8)(unsafe.Pointer((_s + 40) + 61)) = uint8(*(*uint64)(unsafe.Pointer(_s)) >> (uint(16) % 64))
	*(*uint8)(unsafe.Pointer((_s + 40) + 62)) = uint8(*(*uint64)(unsafe.Pointer(_s)) >> (uint(8) % 64))
	*(*uint8)(unsafe.Pointer((_s + 40) + 63)) = uint8(*(*uint64)(unsafe.Pointer(_s)))
	x1processblock(tls, _s, _s+40)
}

// xror is defined at crypt_sha256.c:25:17
func xror(tls TLS, _n uint32, _k int32) (r uint32) {
	return _n>>(uint(_k)%32) | _n<<(uint(int32(32)-_k)%32)
}

// xK [64]uint32, escapes: true, crypt_sha256.c:33:23
var xK = ds + 8384

// linking crypt_sha512.o

// X__crypt_sha512 is defined at crypt_sha512.c:359:6
func X__crypt_sha512(tls TLS, _key uintptr /* *int8 */, _setting uintptr /* *int8 */, _output uintptr /* *int8 */) (r uintptr /* *int8 */) {
	esc := MustMalloc(128)
	var (
		_testbuf = esc   // *[128]int8
		_p       uintptr // *int8
		_q       uintptr // *int8
	)
	defer Free(esc)
	_p = xsha512crypt(tls, _key, _setting, _output)
	_q = xsha512crypt(tls, x493testkey, x494testsetting, _testbuf)
	if _p != 0 && _q == _testbuf && Xmemcmp(tls, _testbuf, x495testhash, uint64(116)) == 0 {
		goto _1
	}

	return ts + 424 /* "*" */

_1:
	return _p
}

type t83__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t83__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// x1testkey [18]int8, escapes: true, crypt_sha512.c:361:20
var x493testkey = ds + 8640

// x2testsetting [30]int8, escapes: true, crypt_sha512.c:362:20
var x494testsetting = ds + 8664

// x3testhash [116]int8, escapes: true, crypt_sha512.c:363:20
var x495testhash = ds + 8696

// xsha512crypt is defined at crypt_sha512.c:209:13
func xsha512crypt(tls TLS, _key uintptr /* *int8 */, _setting uintptr /* *int8 */, _output uintptr /* *int8 */) (r uintptr /* *int8 */) {
	esc := MustMalloc(440)
	var (
		_ctx    = esc       // *Ssha512
		_md     = esc + 208 // *[64]uint8
		_kmd    = esc + 272 // *[64]uint8
		_smd    = esc + 336 // *[64]uint8
		_i      uint32
		_r      uint32
		_klen   uint32
		_slen   uint32
		_rounds = esc + 400 // *[20]int8
		_salt   uintptr     // *int8
		_p      uintptr     // *int8
		_u      uint64
		_end    = esc + 432 // **int8
	)
	defer Free(esc)
	*(*[20]int8)(unsafe.Pointer(_rounds)) = *(*[20]int8)(unsafe.Pointer(ts + 456 /* "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00..." */))
	_i = uint32(0)
_1:
	if _i > uint32(256) || *(*int8)(unsafe.Pointer(_key + uintptr(_i))) == 0 {
		goto _3
	}

	_i++
	goto _1

_3:
	if _i <= uint32(256) {
		goto _4
	}

	return null

_4:
	_klen = _i
	if Xstrncmp(tls, _setting, ts+540 /* "$6$" */, uint64(3)) == int32(0) {
		goto _5
	}

	return null

_5:
	_salt = _setting + uintptr(3)
	_r = uint32(5000)
	if Xstrncmp(tls, _salt, ts+480 /* "rounds=" */, uint64(7)) != int32(0) {
		goto _6
	}

	_salt += uintptr(7)
	if uint32(*(*int8)(unsafe.Pointer(_salt)))-uint32('0') < uint32(10) {
		goto _7
	}

	return null

_7:
	_u = Xstrtoul(tls, _salt, _end, int32(10))
	if int32(*(*int8)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_end))))) == int32('$') {
		goto _8
	}

	return null

_8:
	_salt = *(*uintptr)(unsafe.Pointer(_end)) + uintptr(1)
	if _u >= uint64(1000) {
		goto _9
	}

	_r = uint32(1000)
	goto _10

_9:
	if _u <= uint64(9999999) {
		goto _11
	}

	return null

	goto _12

_11:
	_r = uint32(_u)
_12:
_10:
	Xsprintf(tls, _rounds, ts+488 /* "rounds=%u$" */, _r)
_6:
	_i = uint32(0)
_13:
	if _i >= uint32(16) || *(*int8)(unsafe.Pointer(_salt + uintptr(_i))) == 0 || int32(*(*int8)(unsafe.Pointer(_salt + uintptr(_i)))) == int32('$') {
		goto _15
	}

	if int32(*(*int8)(unsafe.Pointer(_salt + uintptr(_i)))) != int32('\n') && int32(*(*int8)(unsafe.Pointer(_salt + uintptr(_i)))) != int32(':') {
		goto _16
	}

	return null

_16:
	_i++
	goto _13

_15:
	_slen = _i
	xsha512_init(tls, _ctx)
	xsha512_update(tls, _ctx, _key, uint64(_klen))
	xsha512_update(tls, _ctx, _salt, uint64(_slen))
	xsha512_update(tls, _ctx, _key, uint64(_klen))
	xsha512_sum(tls, _ctx, _md)
	xsha512_init(tls, _ctx)
	xsha512_update(tls, _ctx, _key, uint64(_klen))
	xsha512_update(tls, _ctx, _salt, uint64(_slen))
	x1hashmd(tls, _ctx, _klen, _md)
	_i = _klen
_17:
	if _i <= uint32(0) {
		goto _19
	}

	if (_i & uint32(1)) == 0 {
		goto _20
	}

	xsha512_update(tls, _ctx, _md, uint64(64))
	goto _21

_20:
	xsha512_update(tls, _ctx, _key, uint64(_klen))
_21:
	_i = _i >> uint32(1)
	goto _17

_19:
	xsha512_sum(tls, _ctx, _md)
	xsha512_init(tls, _ctx)
	_i = uint32(0)
_22:
	if _i >= _klen {
		goto _24
	}

	xsha512_update(tls, _ctx, _key, uint64(_klen))
	_i++
	goto _22

_24:
	xsha512_sum(tls, _ctx, _kmd)
	xsha512_init(tls, _ctx)
	_i = uint32(0)
_25:
	if _i >= uint32(int32(16)+int32(*(*uint8)(unsafe.Pointer(_md)))) {
		goto _27
	}

	xsha512_update(tls, _ctx, _salt, uint64(_slen))
	_i++
	goto _25

_27:
	xsha512_sum(tls, _ctx, _smd)
	_i = uint32(0)
_28:
	if _i >= _r {
		goto _30
	}

	xsha512_init(tls, _ctx)
	if (_i % uint32(2)) == 0 {
		goto _31
	}

	x1hashmd(tls, _ctx, _klen, _kmd)
	goto _32

_31:
	xsha512_update(tls, _ctx, _md, uint64(64))
_32:
	if (_i % uint32(3)) == 0 {
		goto _33
	}

	xsha512_update(tls, _ctx, _smd, uint64(_slen))
_33:
	if (_i % uint32(7)) == 0 {
		goto _34
	}

	x1hashmd(tls, _ctx, _klen, _kmd)
_34:
	if (_i % uint32(2)) == 0 {
		goto _35
	}

	xsha512_update(tls, _ctx, _md, uint64(64))
	goto _36

_35:
	x1hashmd(tls, _ctx, _klen, _kmd)
_36:
	xsha512_sum(tls, _ctx, _md)
	_i++
	goto _28

_30:
	_p = _output
	_p += uintptr(Xsprintf(tls, _p, ts+544 /* "$6$%s%.*s$" */, _rounds, _slen, _salt))
	X__assert_fail(tls, ts+0 /* "TODO(ccgo)" */, ts+556 /* "src/crypt/crypt_..." */, int32(322), x496__func__)
	_p = xto64(tls, _p, uint32(*(*uint8)(unsafe.Pointer(_md + 63))), int32(2))
	*(*int8)(unsafe.Pointer(_p)) = int8(0)
	return _output
}

// x5__func__ [12]int8, escapes: true, crypt_sha512.c:210:1
var x496__func__ = ds + 8816

type Ssha512 = struct {
	Flen uint64
	Fh   [8]uint64
	Fbuf [128]uint8
}

// xsha512_init is defined at crypt_sha512.c:127:13
func xsha512_init(tls TLS, _s uintptr /* *Ssha512 */) {
	*(*uint64)(unsafe.Pointer(_s)) = uint64(0)
	*(*uint64)(unsafe.Pointer(_s + 8)) = uint64(0x6a09e667f3bcc908)
	*(*uint64)(unsafe.Pointer((_s + 8) + 8)) = uint64(0xbb67ae8584caa73b)
	*(*uint64)(unsafe.Pointer((_s + 8) + 16)) = uint64(0x3c6ef372fe94f82b)
	*(*uint64)(unsafe.Pointer((_s + 8) + 24)) = uint64(0xa54ff53a5f1d36f1)
	*(*uint64)(unsafe.Pointer((_s + 8) + 32)) = uint64(0x510e527fade682d1)
	*(*uint64)(unsafe.Pointer((_s + 8) + 40)) = uint64(0x9b05688c2b3e6c1f)
	*(*uint64)(unsafe.Pointer((_s + 8) + 48)) = uint64(0x1f83d9abfb41bd6b)
	*(*uint64)(unsafe.Pointer((_s + 8) + 56)) = uint64(0x5be0cd19137e2179)
}

// xsha512_update is defined at crypt_sha512.c:157:13
func xsha512_update(tls TLS, _s uintptr /* *Ssha512 */, _m uintptr /* *void */, _len uint64) {
	var (
		_p uintptr // *Tuint8_t = uint8
		_r uint32
	)
	_p = _m
	_r = uint32(*(*uint64)(unsafe.Pointer(_s)) % uint64(128))
	{
		p := (*uint64)(unsafe.Pointer(_s))
		*p = *p + _len
	}
	if _r == 0 {
		goto _1
	}

	if _len >= uint64(uint32(128)-_r) {
		goto _2
	}

	Xmemcpy(tls, (_s+72)+uintptr(_r), _p, _len)
	return

_2:
	Xmemcpy(tls, (_s+72)+uintptr(_r), _p, uint64(uint32(128)-_r))
	_len = _len - uint64(uint32(128)-_r)
	_p += uintptr(uint32(128) - _r)
	x2processblock(tls, _s, _s+72)
_1:
_3:
	if _len < uint64(128) {
		goto _5
	}

	x2processblock(tls, _s, _p)
	_len = _len - uint64(128)
	_p += uintptr(128)
	goto _3

_5:
	Xmemcpy(tls, _s+72, _p, _len)
}

// xsha512_sum is defined at crypt_sha512.c:140:13
func xsha512_sum(tls TLS, _s uintptr /* *Ssha512 */, _md uintptr /* *Tuint8_t = uint8 */) {
	var _i int32

	x2pad(tls, _s)
	_i = int32(0)
_1:
	if _i >= int32(8) {
		goto _3
	}

	*(*uint8)(unsafe.Pointer(_md + uintptr(int32(8)*_i))) = uint8(*(*uint64)(unsafe.Pointer((_s + 8) + 8*uintptr(_i))) >> (uint(56) % 64))
	*(*uint8)(unsafe.Pointer(_md + uintptr(int32(8)*_i+int32(1)))) = uint8(*(*uint64)(unsafe.Pointer((_s + 8) + 8*uintptr(_i))) >> (uint(48) % 64))
	*(*uint8)(unsafe.Pointer(_md + uintptr(int32(8)*_i+int32(2)))) = uint8(*(*uint64)(unsafe.Pointer((_s + 8) + 8*uintptr(_i))) >> (uint(40) % 64))
	*(*uint8)(unsafe.Pointer(_md + uintptr(int32(8)*_i+int32(3)))) = uint8(*(*uint64)(unsafe.Pointer((_s + 8) + 8*uintptr(_i))) >> (uint(32) % 64))
	*(*uint8)(unsafe.Pointer(_md + uintptr(int32(8)*_i+int32(4)))) = uint8(*(*uint64)(unsafe.Pointer((_s + 8) + 8*uintptr(_i))) >> (uint(24) % 64))
	*(*uint8)(unsafe.Pointer(_md + uintptr(int32(8)*_i+int32(5)))) = uint8(*(*uint64)(unsafe.Pointer((_s + 8) + 8*uintptr(_i))) >> (uint(16) % 64))
	*(*uint8)(unsafe.Pointer(_md + uintptr(int32(8)*_i+int32(6)))) = uint8(*(*uint64)(unsafe.Pointer((_s + 8) + 8*uintptr(_i))) >> (uint(8) % 64))
	*(*uint8)(unsafe.Pointer(_md + uintptr(int32(8)*_i+int32(7)))) = uint8(*(*uint64)(unsafe.Pointer((_s + 8) + 8*uintptr(_i))))
	_i++
	goto _1

_3:
}

// xhashmd is defined at crypt_sha512.c:200:13
func x1hashmd(tls TLS, _s uintptr /* *Ssha512 */, _n uint32, _md uintptr /* *void */) {
	var _i uint32

	_i = _n
_1:
	if _i <= uint32(64) {
		goto _3
	}

	xsha512_update(tls, _s, _md, uint64(64))
	_i = _i - uint32(64)
	goto _1

_3:
	xsha512_update(tls, _s, _md, uint64(_i))
}

func preinc497(p *int32) int32 { *p += -1; return *p }

func postinc498(p *uintptr) uintptr { r := *p; *p += 1; return r }

// xto64 is defined at crypt_sha512.c:181:13
func xto64(tls TLS, _s uintptr /* *int8 */, _u uint32, _n int32) (r uintptr /* *int8 */) {
_1:
	if preinc497(&_n) < int32(0) {
		goto _2
	}

	*(*int8)(unsafe.Pointer(postinc498(&_s))) = int8(*(*uint8)(unsafe.Pointer(xb64 + uintptr(_u%uint32(64)))))
	_u = _u / uint32(64)
	goto _1

_2:
	return _s
}

type t8size_t = uint64

type t8uint64_t = uint64

type t2uint8_t = uint8

// xprocessblock is defined at crypt_sha512.c:57:13
func x2processblock(tls TLS, _s uintptr /* *Ssha512 */, _buf uintptr /* *Tuint8_t = uint8 */) {
	esc := MustMalloc(640)
	var (
		_W  = esc // *[80]uint64
		_t1 uint64
		_t2 uint64
		_a  uint64
		_b  uint64
		_c  uint64
		_d  uint64
		_e  uint64
		_f  uint64
		_g  uint64
		_h  uint64
		_i  int32
	)
	defer Free(esc)
	_i = int32(0)
_1:
	if _i >= int32(16) {
		goto _3
	}

	*(*uint64)(unsafe.Pointer(_W + 8*uintptr(_i))) = uint64(*(*uint8)(unsafe.Pointer(_buf + uintptr(int32(8)*_i)))) << (uint(56) % 64)
	{
		p := (*uint64)(unsafe.Pointer(_W + 8*uintptr(_i)))
		*p = *p | uint64(*(*uint8)(unsafe.Pointer(_buf + uintptr(int32(8)*_i+int32(1)))))<<(uint(48)%64)
	}
	{
		p := (*uint64)(unsafe.Pointer(_W + 8*uintptr(_i)))
		*p = *p | uint64(*(*uint8)(unsafe.Pointer(_buf + uintptr(int32(8)*_i+int32(2)))))<<(uint(40)%64)
	}
	{
		p := (*uint64)(unsafe.Pointer(_W + 8*uintptr(_i)))
		*p = *p | uint64(*(*uint8)(unsafe.Pointer(_buf + uintptr(int32(8)*_i+int32(3)))))<<(uint(32)%64)
	}
	{
		p := (*uint64)(unsafe.Pointer(_W + 8*uintptr(_i)))
		*p = *p | uint64(*(*uint8)(unsafe.Pointer(_buf + uintptr(int32(8)*_i+int32(4)))))<<(uint(24)%64)
	}
	{
		p := (*uint64)(unsafe.Pointer(_W + 8*uintptr(_i)))
		*p = *p | uint64(*(*uint8)(unsafe.Pointer(_buf + uintptr(int32(8)*_i+int32(5)))))<<(uint(16)%64)
	}
	{
		p := (*uint64)(unsafe.Pointer(_W + 8*uintptr(_i)))
		*p = *p | uint64(*(*uint8)(unsafe.Pointer(_buf + uintptr(int32(8)*_i+int32(6)))))<<(uint(8)%64)
	}
	{
		p := (*uint64)(unsafe.Pointer(_W + 8*uintptr(_i)))
		*p = *p | uint64(*(*uint8)(unsafe.Pointer(_buf + uintptr(int32(8)*_i+int32(7)))))
	}
	_i++
	goto _1

_3:
_4:
	if _i >= int32(80) {
		goto _6
	}

	*(*uint64)(unsafe.Pointer(_W + 8*uintptr(_i))) = x1ror(tls, *(*uint64)(unsafe.Pointer(_W + 8*uintptr(_i-int32(2)))), int32(19)) ^ x1ror(tls, *(*uint64)(unsafe.Pointer(_W + 8*uintptr(_i-int32(2)))), int32(61)) ^ *(*uint64)(unsafe.Pointer(_W + 8*uintptr(_i-int32(2))))>>(uint(6)%64) + *(*uint64)(unsafe.Pointer(_W + 8*uintptr(_i-int32(7)))) + (x1ror(tls, *(*uint64)(unsafe.Pointer(_W + 8*uintptr(_i-int32(15)))), int32(1)) ^ x1ror(tls, *(*uint64)(unsafe.Pointer(_W + 8*uintptr(_i-int32(15)))), int32(8)) ^ *(*uint64)(unsafe.Pointer(_W + 8*uintptr(_i-int32(15))))>>(uint(7)%64)) + *(*uint64)(unsafe.Pointer(_W + 8*uintptr(_i-int32(16))))
	_i++
	goto _4

_6:
	_a = *(*uint64)(unsafe.Pointer(_s + 8))
	_b = *(*uint64)(unsafe.Pointer((_s + 8) + 8))
	_c = *(*uint64)(unsafe.Pointer((_s + 8) + 16))
	_d = *(*uint64)(unsafe.Pointer((_s + 8) + 24))
	_e = *(*uint64)(unsafe.Pointer((_s + 8) + 32))
	_f = *(*uint64)(unsafe.Pointer((_s + 8) + 40))
	_g = *(*uint64)(unsafe.Pointer((_s + 8) + 48))
	_h = *(*uint64)(unsafe.Pointer((_s + 8) + 56))
	_i = int32(0)
_7:
	if _i >= int32(80) {
		goto _9
	}

	_t1 = _h + (x1ror(tls, _e, int32(14)) ^ x1ror(tls, _e, int32(18)) ^ x1ror(tls, _e, int32(41))) + (_g ^ _e&(_f^_g)) + *(*uint64)(unsafe.Pointer(x1K + 8*uintptr(_i))) + *(*uint64)(unsafe.Pointer(_W + 8*uintptr(_i)))
	_t2 = x1ror(tls, _a, int32(28)) ^ x1ror(tls, _a, int32(34)) ^ x1ror(tls, _a, int32(39)) + (_a&_b | _c&(_a|_b))
	_h = _g
	_g = _f
	_f = _e
	_e = _d + _t1
	_d = _c
	_c = _b
	_b = _a
	_a = _t1 + _t2
	_i++
	goto _7

_9:
	{
		p := (*uint64)(unsafe.Pointer(_s + 8))
		*p = *p + _a
	}
	{
		p := (*uint64)(unsafe.Pointer((_s + 8) + 8))
		*p = *p + _b
	}
	{
		p := (*uint64)(unsafe.Pointer((_s + 8) + 16))
		*p = *p + _c
	}
	{
		p := (*uint64)(unsafe.Pointer((_s + 8) + 24))
		*p = *p + _d
	}
	{
		p := (*uint64)(unsafe.Pointer((_s + 8) + 32))
		*p = *p + _e
	}
	{
		p := (*uint64)(unsafe.Pointer((_s + 8) + 40))
		*p = *p + _f
	}
	{
		p := (*uint64)(unsafe.Pointer((_s + 8) + 48))
		*p = *p + _g
	}
	{
		p := (*uint64)(unsafe.Pointer((_s + 8) + 56))
		*p = *p + _h
	}
}

func postinc499(p *uint32) uint32 { r := *p; *p += 1; return r }

// xpad is defined at crypt_sha512.c:104:13
func x2pad(tls TLS, _s uintptr /* *Ssha512 */) {
	var _r uint32

	_r = uint32(*(*uint64)(unsafe.Pointer(_s)) % uint64(128))
	*(*uint8)(unsafe.Pointer((_s + 72) + uintptr(postinc499(&_r)))) = uint8(0x80)
	if _r <= uint32(112) {
		goto _1
	}

	Xmemset(tls, (_s+72)+uintptr(_r), int32(0), uint64(uint32(128)-_r))
	_r = uint32(0)
	x2processblock(tls, _s, _s+72)
_1:
	Xmemset(tls, (_s+72)+uintptr(_r), int32(0), uint64(uint32(120)-_r))
	{
		p := (*uint64)(unsafe.Pointer(_s))
		*p = *p * uint64(8)
	}
	*(*uint8)(unsafe.Pointer((_s + 72) + 120)) = uint8(*(*uint64)(unsafe.Pointer(_s)) >> (uint(56) % 64))
	*(*uint8)(unsafe.Pointer((_s + 72) + 121)) = uint8(*(*uint64)(unsafe.Pointer(_s)) >> (uint(48) % 64))
	*(*uint8)(unsafe.Pointer((_s + 72) + 122)) = uint8(*(*uint64)(unsafe.Pointer(_s)) >> (uint(40) % 64))
	*(*uint8)(unsafe.Pointer((_s + 72) + 123)) = uint8(*(*uint64)(unsafe.Pointer(_s)) >> (uint(32) % 64))
	*(*uint8)(unsafe.Pointer((_s + 72) + 124)) = uint8(*(*uint64)(unsafe.Pointer(_s)) >> (uint(24) % 64))
	*(*uint8)(unsafe.Pointer((_s + 72) + 125)) = uint8(*(*uint64)(unsafe.Pointer(_s)) >> (uint(16) % 64))
	*(*uint8)(unsafe.Pointer((_s + 72) + 126)) = uint8(*(*uint64)(unsafe.Pointer(_s)) >> (uint(8) % 64))
	*(*uint8)(unsafe.Pointer((_s + 72) + 127)) = uint8(*(*uint64)(unsafe.Pointer(_s)))
	x2processblock(tls, _s, _s+72)
}

// xb64 [65]uint8, escapes: true, crypt_sha512.c:178:28
var xb64 = ds + 8832

// xror is defined at crypt_sha512.c:26:17
func x1ror(tls TLS, _n uint64, _k int32) (r uint64) {
	return _n>>(uint(_k)%64) | _n<<(uint(int32(64)-_k)%64)
}

// xK [80]uint64, escapes: true, crypt_sha512.c:34:23
var x1K = ds + 8904

// linking encrypt.o

// Xsetkey is defined at encrypt.c:17:6
func Xsetkey(tls TLS, _key uintptr /* *int8 */) {
	esc := MustMalloc(8)
	var (
		_bkey = esc // *[8]uint8
		_i    int32
		_j    int32
	)
	defer Free(esc)
	_i = int32(0)
_1:
	if _i >= int32(8) {
		goto _3
	}

	*(*uint8)(unsafe.Pointer(_bkey + uintptr(_i))) = uint8(0)
	_j = int32(7)
_4:
	if _j < int32(0) {
		goto _6
	}

	{
		p := (*uint8)(unsafe.Pointer(_bkey + uintptr(_i)))
		*p = uint8(uint32(*p) | uint32(int32(*(*int8)(unsafe.Pointer(_key)))&int32(1))<<(uint(_j)%32))
	}
	_j--
	_key++
	goto _4

_6:
	_i++
	goto _1

_3:
	X__des_setkey(tls, _bkey, x__encrypt_key)
}

func postinc500(p *uintptr) uintptr { r := *p; *p += 1; return r }

// Xencrypt is defined at encrypt.c:31:6
func Xencrypt(tls TLS, _block uintptr /* *int8 */, _edflag int32) {
	esc := MustMalloc(136)
	var (
		_decrypt_key = esc       // *Sexpanded_key
		_key         uintptr     // *Sexpanded_key
		_b           = esc + 128 // *[2]uint32
		_i           int32
		_j           int32
		_p           uintptr // *int8
	)
	defer Free(esc)
	_p = _block
	_i = int32(0)
_1:
	if _i >= int32(2) {
		goto _3
	}

	*(*uint32)(unsafe.Pointer(_b + 4*uintptr(_i))) = uint32(0)
	_j = int32(31)
_4:
	if _j < int32(0) {
		goto _6
	}

	{
		p := (*uint32)(unsafe.Pointer(_b + 4*uintptr(_i)))
		*p = *p | uint32(int32(*(*int8)(unsafe.Pointer(_p)))&int32(1))<<(uint(_j)%32)
	}
	_j--
	_p++
	goto _4

_6:
	_i++
	goto _1

_3:
	_key = x__encrypt_key
	if _edflag == 0 {
		goto _7
	}

	_key = _decrypt_key
	_i = int32(0)
_8:
	if _i >= int32(16) {
		goto _10
	}

	*(*uint32)(unsafe.Pointer(_decrypt_key + 4*uintptr(_i))) = *(*uint32)(unsafe.Pointer(x__encrypt_key + 4*uintptr(int32(15)-_i)))
	*(*uint32)(unsafe.Pointer((_decrypt_key + 64) + 4*uintptr(_i))) = *(*uint32)(unsafe.Pointer((x__encrypt_key + 64) + 4*uintptr(int32(15)-_i)))
	_i++
	goto _8

_10:
_7:
	X__do_des(tls, *(*uint32)(unsafe.Pointer(_b)), *(*uint32)(unsafe.Pointer(_b + 4)), _b, _b+4*uintptr(1), uint32(1), uint32(0), _key)
	_p = _block
	_i = int32(0)
_11:
	if _i >= int32(2) {
		goto _13
	}

	_j = int32(31)
_14:
	if _j < int32(0) {
		goto _16
	}

	*(*int8)(unsafe.Pointer(postinc500(&_p))) = int8(*(*uint32)(unsafe.Pointer(_b + 4*uintptr(_i))) >> (uint(_j) % 32) & uint32(1))
	_j--
	goto _14

_16:
	_i++
	goto _11

_13:
}

type t84__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t84__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t14uint32_t = uint32

// x__encrypt_key Sexpanded_key, escapes: true, encrypt.c:15:28
var x__encrypt_key = bss + 248

type s1expanded_key = struct {
	Fl [16]uint32
	Fr [16]uint32
}

// linking __ctype_b_loc.o

// X__ctype_b_loc is defined at __ctype_b_loc.c:38:22
func X__ctype_b_loc(tls TLS) (r uintptr /* **uint16 */) {
	return xptable
}

type t85__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t85__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// xptable *uint16, escapes: true, __ctype_b_loc.c:36:29
var xptable = bss + 376 // pointer to unsigned short

func init() { *(*uintptr)(unsafe.Pointer(xptable)) = xtable + 2*uintptr(128) }

// xtable [384]uint16, escapes: true, __ctype_b_loc.c:9:29
var xtable = ds + 9544

// linking __ctype_get_mb_cur_max.o

// X__ctype_get_mb_cur_max is defined at __ctype_get_mb_cur_max.c:4:8
func X__ctype_get_mb_cur_max(tls TLS) (r uint64) {
	return uint64(func() int32 {
		if *(*uintptr)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(x2__pthread_self(tls) + 192)))) != 0 {
			return int32(4)
		}
		return int32(1)
	}())
}

type t86__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t86__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t9size_t = uint64

// x__pthread_self is defined at pthread_arch.h:1:30
func x2__pthread_self(tls TLS) (r uintptr /* *S__pthread */) {
	return uintptr(tls)
	return r
}

type s4__pthread = struct {
	Fself          uintptr // *S__pthread
	Fdtv           uintptr // **void
	Funused1       uintptr // *void
	Funused2       uintptr // *void
	Fsysinfo       uint64
	Fcanary        uint64
	Fcanary2       uint64
	Ftid           int32
	Ferrno_val     int32
	Fdetach_state  int32
	Fcancel        int32
	Fcanceldisable uint8
	Fcancelasync   uint8
	F74            uint8
	Fmap_base      uintptr // *uint8
	Fmap_size      uint64
	Fstack         uintptr // *void
	Fstack_size    uint64
	Fguard_size    uint64
	Fstart_arg     uintptr // *void
	Fstart         uintptr // *func(TLS, uintptr) uintptr
	Fresult        uintptr // *void
	Fcancelbuf     uintptr // *S__ptcb
	Ftsd           uintptr // **void
	Frobust_list   struct {
		Fhead    uintptr
		Foff     int64
		Fpending uintptr
	}
	Ftimer_id      int32
	Flocale        uintptr // Tlocale_t = *S__locale_struct
	Fkilllock      [1]int32
	Fdlerror_buf   uintptr // *int8
	Fstdio_locks   uintptr // *void
	Fcanary_at_end uint64
	Fdtv_copy      uintptr // **void
}

type t3uintptr_t = uint64

type s3__ptcb = struct {
	F__f    uintptr // *func(TLS, uintptr)
	F__x    uintptr // *void
	F__next uintptr // *S__ptcb
}

type s3__locale_struct = struct{ Fcat [6]uintptr }

// linking __ctype_tolower_loc.o

// X__ctype_tolower_loc is defined at __ctype_tolower_loc.c:27:15
func X__ctype_tolower_loc(tls TLS) (r uintptr /* **Tint32_t = int32 */) {
	return x1ptable
}

type t87__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t87__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// xptable *Tint32_t = int32, escapes: true, __ctype_tolower_loc.c:25:22
var x1ptable = bss + 384 // pointer to int32_t

func init() { *(*uintptr)(unsafe.Pointer(x1ptable)) = x1table + 4*uintptr(128) }

// xtable [384]int32, escapes: true, __ctype_tolower_loc.c:3:22
var x1table = ds + 10312

type t4int32_t = int32

// linking __ctype_toupper_loc.o

// X__ctype_toupper_loc is defined at __ctype_toupper_loc.c:27:15
func X__ctype_toupper_loc(tls TLS) (r uintptr /* **Tint32_t = int32 */) {
	return x2ptable
}

type t88__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t88__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// xptable *Tint32_t = int32, escapes: true, __ctype_toupper_loc.c:25:22
var x2ptable = bss + 392 // pointer to int32_t

func init() { *(*uintptr)(unsafe.Pointer(x2ptable)) = x2table + 4*uintptr(128) }

// xtable [384]int32, escapes: true, __ctype_toupper_loc.c:3:22
var x2table = ds + 11848

type t5int32_t = int32

// linking isalnum.o

// Xisalnum is defined at isalnum.c:4:5
func Xisalnum(tls TLS, _c int32) (r int32) {
	return bool2int((uint32(_c)|uint32(32)-uint32('a') < uint32(26)) || (uint32(_c)-uint32('0') < uint32(10)))
}

// X__isalnum_l is defined at isalnum.c:9:5
func X__isalnum_l(tls TLS, _c int32, _l uintptr /* Tlocale_t = *S__locale_struct */) (r int32) {
	return Xisalnum(tls, _c)
}

type t89__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t89__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type s4__locale_struct = struct{ Fcat [6]uintptr }

// linking isalpha.o

// Xisalpha is defined at isalpha.c:5:5
func Xisalpha(tls TLS, _c int32) (r int32) {
	return bool2int(uint32(_c)|uint32(32)-uint32('a') < uint32(26))
}

// X__isalpha_l is defined at isalpha.c:10:5
func X__isalpha_l(tls TLS, _c int32, _l uintptr /* Tlocale_t = *S__locale_struct */) (r int32) {
	return Xisalpha(tls, _c)
}

type t90__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t90__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type s5__locale_struct = struct{ Fcat [6]uintptr }

// linking isascii.o

// Xisascii is defined at isascii.c:4:5
func Xisascii(tls TLS, _c int32) (r int32) {
	return bool2int(_c&int32(-128) == 0)
}

type t91__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t91__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// linking isblank.o

// Xisblank is defined at isblank.c:4:5
func Xisblank(tls TLS, _c int32) (r int32) {
	return bool2int((_c == int32(' ')) || (_c == int32('\t')))
}

// X__isblank_l is defined at isblank.c:9:5
func X__isblank_l(tls TLS, _c int32, _l uintptr /* Tlocale_t = *S__locale_struct */) (r int32) {
	return Xisblank(tls, _c)
}

type t92__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t92__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type s6__locale_struct = struct{ Fcat [6]uintptr }

// linking iscntrl.o

// Xiscntrl is defined at iscntrl.c:4:5
func Xiscntrl(tls TLS, _c int32) (r int32) {
	return bool2int((uint32(_c) < uint32(0x20)) || (_c == int32(0x7f)))
}

// X__iscntrl_l is defined at iscntrl.c:9:5
func X__iscntrl_l(tls TLS, _c int32, _l uintptr /* Tlocale_t = *S__locale_struct */) (r int32) {
	return Xiscntrl(tls, _c)
}

type t93__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t93__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type s7__locale_struct = struct{ Fcat [6]uintptr }

// linking isdigit.o

// Xisdigit is defined at isdigit.c:5:5
func Xisdigit(tls TLS, _c int32) (r int32) {
	return bool2int(uint32(_c)-uint32('0') < uint32(10))
}

// X__isdigit_l is defined at isdigit.c:10:5
func X__isdigit_l(tls TLS, _c int32, _l uintptr /* Tlocale_t = *S__locale_struct */) (r int32) {
	return Xisdigit(tls, _c)
}

type t94__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t94__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type s8__locale_struct = struct{ Fcat [6]uintptr }

// linking isgraph.o

// Xisgraph is defined at isgraph.c:5:5
func Xisgraph(tls TLS, _c int32) (r int32) {
	return bool2int(uint32(_c)-uint32(0x21) < uint32(0x5e))
}

// X__isgraph_l is defined at isgraph.c:10:5
func X__isgraph_l(tls TLS, _c int32, _l uintptr /* Tlocale_t = *S__locale_struct */) (r int32) {
	return Xisgraph(tls, _c)
}

type t95__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t95__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type s9__locale_struct = struct{ Fcat [6]uintptr }

// linking islower.o

// Xislower is defined at islower.c:5:5
func Xislower(tls TLS, _c int32) (r int32) {
	return bool2int(uint32(_c)-uint32('a') < uint32(26))
}

// X__islower_l is defined at islower.c:10:5
func X__islower_l(tls TLS, _c int32, _l uintptr /* Tlocale_t = *S__locale_struct */) (r int32) {
	return Xislower(tls, _c)
}

type t96__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t96__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type s10__locale_struct = struct{ Fcat [6]uintptr }

// linking isprint.o

// Xisprint is defined at isprint.c:5:5
func Xisprint(tls TLS, _c int32) (r int32) {
	return bool2int(uint32(_c)-uint32(0x20) < uint32(0x5f))
}

// X__isprint_l is defined at isprint.c:10:5
func X__isprint_l(tls TLS, _c int32, _l uintptr /* Tlocale_t = *S__locale_struct */) (r int32) {
	return Xisprint(tls, _c)
}

type t97__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t97__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type s11__locale_struct = struct{ Fcat [6]uintptr }

// linking ispunct.o

// Xispunct is defined at ispunct.c:4:5
func Xispunct(tls TLS, _c int32) (r int32) {
	return bool2int((uint32(_c)-uint32(0x21) < uint32(0x5e)) && (Xisalnum(tls, _c) == 0))
}

// X__ispunct_l is defined at ispunct.c:9:5
func X__ispunct_l(tls TLS, _c int32, _l uintptr /* Tlocale_t = *S__locale_struct */) (r int32) {
	return Xispunct(tls, _c)
}

type t98__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t98__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type s12__locale_struct = struct{ Fcat [6]uintptr }

// linking isspace.o

// Xisspace is defined at isspace.c:5:5
func Xisspace(tls TLS, _c int32) (r int32) {
	return bool2int((_c == int32(' ')) || (uint32(_c)-uint32('\t') < uint32(5)))
}

// X__isspace_l is defined at isspace.c:10:5
func X__isspace_l(tls TLS, _c int32, _l uintptr /* Tlocale_t = *S__locale_struct */) (r int32) {
	return Xisspace(tls, _c)
}

type t99__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t99__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type s13__locale_struct = struct{ Fcat [6]uintptr }

// linking isupper.o

// Xisupper is defined at isupper.c:5:5
func Xisupper(tls TLS, _c int32) (r int32) {
	return bool2int(uint32(_c)-uint32('A') < uint32(26))
}

// X__isupper_l is defined at isupper.c:10:5
func X__isupper_l(tls TLS, _c int32, _l uintptr /* Tlocale_t = *S__locale_struct */) (r int32) {
	return Xisupper(tls, _c)
}

type t100__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t100__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type s14__locale_struct = struct{ Fcat [6]uintptr }

// linking iswalnum.o

// Xiswalnum is defined at iswalnum.c:4:5
func Xiswalnum(tls TLS, _wc uint32) (r int32) {
	return bool2int((_wc-uint32('0') < uint32(10)) || (Xiswalpha(tls, _wc) != 0))
}

// X__iswalnum_l is defined at iswalnum.c:9:5
func X__iswalnum_l(tls TLS, _c uint32, _l uintptr /* Tlocale_t = *S__locale_struct */) (r int32) {
	return Xiswalnum(tls, _c)
}

type t101__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t101__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type Twint_t = uint32

type s15__locale_struct = struct{ Fcat [6]uintptr }

// linking iswalpha.o

// Xiswalpha is defined at iswalpha.c:8:5
func Xiswalpha(tls TLS, _wc uint32) (r int32) {
	if _wc >= uint32(0x20000) {
		goto _1
	}

	return int32(*(*uint8)(unsafe.Pointer(x3table + uintptr(uint32(int32(*(*uint8)(unsafe.Pointer(x3table + uintptr(_wc>>(uint(8)%32)))))*int32(32))+_wc&uint32(255)>>(uint(3)%32))))) >> (uint(_wc&uint32(7)) % 32) & int32(1)

_1:
	if _wc >= uint32(0x2fffe) {
		goto _2
	}

	return int32(1)

_2:
	return int32(0)
}

// X__iswalpha_l is defined at iswalpha.c:17:5
func X__iswalpha_l(tls TLS, _c uint32, _l uintptr /* Tlocale_t = *S__locale_struct */) (r int32) {
	return Xiswalpha(tls, _c)
}

type t102__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t102__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t1wint_t = uint32

// xtable [3680]uint8, escapes: true, iswalpha.c:4:28
var x3table = ds + 13384

type s16__locale_struct = struct{ Fcat [6]uintptr }

// linking iswblank.o

// Xiswblank is defined at iswblank.c:5:5
func Xiswblank(tls TLS, _wc uint32) (r int32) {
	return Xisblank(tls, int32(_wc))
}

// X__iswblank_l is defined at iswblank.c:10:5
func X__iswblank_l(tls TLS, _c uint32, _l uintptr /* Tlocale_t = *S__locale_struct */) (r int32) {
	return Xiswblank(tls, _c)
}

type t103__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t103__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t2wint_t = uint32

type s17__locale_struct = struct{ Fcat [6]uintptr }

// linking iswcntrl.o

// Xiswcntrl is defined at iswcntrl.c:4:5
func Xiswcntrl(tls TLS, _wc uint32) (r int32) {
	return bool2int((((_wc < uint32(32)) || (_wc-uint32(0x7f) < uint32(33))) || (_wc-uint32(0x2028) < uint32(2))) || (_wc-uint32(0xfff9) < uint32(3)))
}

// X__iswcntrl_l is defined at iswcntrl.c:12:5
func X__iswcntrl_l(tls TLS, _c uint32, _l uintptr /* Tlocale_t = *S__locale_struct */) (r int32) {
	return Xiswcntrl(tls, _c)
}

type t104__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t104__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t3wint_t = uint32

type s18__locale_struct = struct{ Fcat [6]uintptr }

// linking iswctype.o

// Xiswctype is defined at iswctype.c:18:5
func Xiswctype(tls TLS, _wc uint32, _type uint64) (r int32) {
	switch _type {
	case uint64(1):
		goto _2
	case uint64(2):
		goto _3
	case uint64(3):
		goto _4
	case uint64(4):
		goto _5
	case uint64(5):
		goto _6
	case uint64(6):
		goto _7
	case uint64(7):
		goto _8
	case uint64(8):
		goto _9
	case uint64(9):
		goto _10
	case uint64(10):
		goto _11
	case uint64(11):
		goto _12
	case uint64(12):
		goto _13
	}
	goto _1

_2:
	return Xiswalnum(tls, _wc)

_3:
	return Xiswalpha(tls, _wc)

_4:
	return Xiswblank(tls, _wc)

_5:
	return Xiswcntrl(tls, _wc)

_6:
	return bool2int(_wc-uint32('0') < uint32(10))

_7:
	return Xiswgraph(tls, _wc)

_8:
	return Xiswlower(tls, _wc)

_9:
	return Xiswprint(tls, _wc)

_10:
	return Xiswpunct(tls, _wc)

_11:
	return Xiswspace(tls, _wc)

_12:
	return Xiswupper(tls, _wc)

_13:
	return Xiswxdigit(tls, _wc)

_1:
	return int32(0)
}

// Xwctype is defined at iswctype.c:49:10
func Xwctype(tls TLS, _s uintptr /* *int8 */) (r uint64) {
	var (
		_i int32
		_p uintptr // *int8
	)
	_i = int32(1)
	_p = x501names
_1:
	if *(*int8)(unsafe.Pointer(_p)) == 0 {
		goto _3
	}

	if int32(*(*int8)(unsafe.Pointer(_s))) != int32(*(*int8)(unsafe.Pointer(_p))) || Xstrcmp(tls, _s, _p) != 0 {
		goto _4
	}

	return uint64(_i)

_4:
	_i++
	_p += uintptr(6)
	goto _1

_3:
	return uint64(0)
}

// X__iswctype_l is defined at iswctype.c:65:5
func X__iswctype_l(tls TLS, _c uint32, _t uint64, _l uintptr /* Tlocale_t = *S__locale_struct */) (r int32) {
	return Xiswctype(tls, _c, _t)
}

// X__wctype_l is defined at iswctype.c:70:10
func X__wctype_l(tls TLS, _s uintptr /* *int8 */, _l uintptr /* Tlocale_t = *S__locale_struct */) (r uint64) {
	return Xwctype(tls, _s)
}

type t105__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t105__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t4wint_t = uint32

type Twctype_t = uint64

// x1names [73]int8, escapes: true, iswctype.c:54:20
var x501names = ds + 17064

type s19__locale_struct = struct{ Fcat [6]uintptr }

// linking iswdigit.o

// Xiswdigit is defined at iswdigit.c:6:5
func Xiswdigit(tls TLS, _wc uint32) (r int32) {
	return bool2int(_wc-uint32('0') < uint32(10))
}

// X__iswdigit_l is defined at iswdigit.c:11:5
func X__iswdigit_l(tls TLS, _c uint32, _l uintptr /* Tlocale_t = *S__locale_struct */) (r int32) {
	return Xiswdigit(tls, _c)
}

type t106__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t106__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t5wint_t = uint32

type s20__locale_struct = struct{ Fcat [6]uintptr }

// linking iswgraph.o

// Xiswgraph is defined at iswgraph.c:4:5
func Xiswgraph(tls TLS, _wc uint32) (r int32) {
	return bool2int((Xiswspace(tls, _wc) == 0) && (Xiswprint(tls, _wc) != 0))
}

// X__iswgraph_l is defined at iswgraph.c:10:5
func X__iswgraph_l(tls TLS, _c uint32, _l uintptr /* Tlocale_t = *S__locale_struct */) (r int32) {
	return Xiswgraph(tls, _c)
}

type t107__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t107__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t6wint_t = uint32

type s21__locale_struct = struct{ Fcat [6]uintptr }

// linking iswlower.o

// Xiswlower is defined at iswlower.c:4:5
func Xiswlower(tls TLS, _wc uint32) (r int32) {
	return bool2int(Xtowupper(tls, _wc) != _wc)
}

// X__iswlower_l is defined at iswlower.c:9:5
func X__iswlower_l(tls TLS, _c uint32, _l uintptr /* Tlocale_t = *S__locale_struct */) (r int32) {
	return Xiswlower(tls, _c)
}

type t108__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t108__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t7wint_t = uint32

type s22__locale_struct = struct{ Fcat [6]uintptr }

// linking iswprint.o

// Xiswprint is defined at iswprint.c:11:5
func Xiswprint(tls TLS, _wc uint32) (r int32) {
	if _wc >= uint32(0xff) {
		goto _1
	}

	return bool2int((_wc+uint32(1))&uint32(0x7f) >= uint32(0x21))

_1:
	if _wc >= uint32(0x2028) && _wc-uint32(0x202a) >= uint32(47062) && _wc-uint32(0xe000) >= uint32(8185) {
		goto _2
	}

	return int32(1)

_2:
	if _wc-uint32(0xfffc) <= uint32(1048579) && _wc&uint32(0xfffe) != uint32(0xfffe) {
		goto _3
	}

	return int32(0)

_3:
	return int32(1)
}

// X__iswprint_l is defined at iswprint.c:22:5
func X__iswprint_l(tls TLS, _c uint32, _l uintptr /* Tlocale_t = *S__locale_struct */) (r int32) {
	return Xiswprint(tls, _c)
}

type t109__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t109__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t8wint_t = uint32

type s23__locale_struct = struct{ Fcat [6]uintptr }

// linking iswpunct.o

// Xiswpunct is defined at iswpunct.c:8:5
func Xiswpunct(tls TLS, _wc uint32) (r int32) {
	if _wc >= uint32(0x20000) {
		goto _1
	}

	return int32(*(*uint8)(unsafe.Pointer(x4table + uintptr(uint32(int32(*(*uint8)(unsafe.Pointer(x4table + uintptr(_wc>>(uint(8)%32)))))*int32(32))+_wc&uint32(255)>>(uint(3)%32))))) >> (uint(_wc&uint32(7)) % 32) & int32(1)

_1:
	return int32(0)
}

// X__iswpunct_l is defined at iswpunct.c:15:5
func X__iswpunct_l(tls TLS, _c uint32, _l uintptr /* Tlocale_t = *S__locale_struct */) (r int32) {
	return Xiswpunct(tls, _c)
}

type t110__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t110__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t9wint_t = uint32

// xtable [3648]uint8, escapes: true, iswpunct.c:4:28
var x4table = ds + 17144

type s24__locale_struct = struct{ Fcat [6]uintptr }

// linking iswspace.o

// Xiswspace is defined at iswspace.c:9:5
func Xiswspace(tls TLS, _wc uint32) (r int32) {
	return bool2int((_wc != 0) && (Xwcschr(tls, x502spaces, int32(_wc)) != 0))
}

// X__iswspace_l is defined at iswspace.c:20:5
func X__iswspace_l(tls TLS, _c uint32, _l uintptr /* Tlocale_t = *S__locale_struct */) (r int32) {
	return Xiswspace(tls, _c)
}

type t111__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t111__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t10wint_t = uint32

// x1spaces [22]int32, escapes: true, iswspace.c:11:23
var x502spaces = ds + 20792

type s25__locale_struct = struct{ Fcat [6]uintptr }

type Twchar_t = int32

// linking iswupper.o

// Xiswupper is defined at iswupper.c:4:5
func Xiswupper(tls TLS, _wc uint32) (r int32) {
	return bool2int(Xtowlower(tls, _wc) != _wc)
}

// X__iswupper_l is defined at iswupper.c:9:5
func X__iswupper_l(tls TLS, _c uint32, _l uintptr /* Tlocale_t = *S__locale_struct */) (r int32) {
	return Xiswupper(tls, _c)
}

type t112__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t112__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t11wint_t = uint32

type s26__locale_struct = struct{ Fcat [6]uintptr }

// linking iswxdigit.o

// Xiswxdigit is defined at iswxdigit.c:4:5
func Xiswxdigit(tls TLS, _wc uint32) (r int32) {
	return bool2int((_wc-uint32('0') < uint32(10)) || (_wc|uint32(32)-uint32('a') < uint32(6)))
}

// X__iswxdigit_l is defined at iswxdigit.c:9:5
func X__iswxdigit_l(tls TLS, _c uint32, _l uintptr /* Tlocale_t = *S__locale_struct */) (r int32) {
	return Xiswxdigit(tls, _c)
}

type t113__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t113__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t12wint_t = uint32

type s27__locale_struct = struct{ Fcat [6]uintptr }

// linking isxdigit.o

// Xisxdigit is defined at isxdigit.c:4:5
func Xisxdigit(tls TLS, _c int32) (r int32) {
	return bool2int((uint32(_c)-uint32('0') < uint32(10)) || (uint32(_c)|uint32(32)-uint32('a') < uint32(6)))
}

// X__isxdigit_l is defined at isxdigit.c:9:5
func X__isxdigit_l(tls TLS, _c int32, _l uintptr /* Tlocale_t = *S__locale_struct */) (r int32) {
	return Xisxdigit(tls, _c)
}

type t114__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t114__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type s28__locale_struct = struct{ Fcat [6]uintptr }

// linking toascii.o

// Xtoascii is defined at toascii.c:4:5
func Xtoascii(tls TLS, _c int32) (r int32) {
	return _c & int32(0x7f)
}

type t115__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t115__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// linking tolower.o

// Xtolower is defined at tolower.c:4:5
func Xtolower(tls TLS, _c int32) (r int32) {
	if uint32(_c)-uint32('A') >= uint32(26) {
		goto _1
	}

	return _c | int32(32)

_1:
	return _c
}

// X__tolower_l is defined at tolower.c:10:5
func X__tolower_l(tls TLS, _c int32, _l uintptr /* Tlocale_t = *S__locale_struct */) (r int32) {
	return Xtolower(tls, _c)
}

type t116__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t116__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type s29__locale_struct = struct{ Fcat [6]uintptr }

// linking toupper.o

// Xtoupper is defined at toupper.c:4:5
func Xtoupper(tls TLS, _c int32) (r int32) {
	if uint32(_c)-uint32('a') >= uint32(26) {
		goto _1
	}

	return _c & int32(0x5f)

_1:
	return _c
}

// X__toupper_l is defined at toupper.c:10:5
func X__toupper_l(tls TLS, _c int32, _l uintptr /* Tlocale_t = *S__locale_struct */) (r int32) {
	return Xtoupper(tls, _c)
}

type t117__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t117__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type s30__locale_struct = struct{ Fcat [6]uintptr }

// linking towctrans.o

// Xtowupper is defined at towctrans.c:297:8
func Xtowupper(tls TLS, _wc uint32) (r uint32) {
	if _wc < uint32(128) {
		return uint32(Xtoupper(tls, int32(_wc)))
	}

	return uint32(x__towcase(tls, int32(_wc), int32(0)))
}

// Xtowlower is defined at towctrans.c:302:8
func Xtowlower(tls TLS, _wc uint32) (r uint32) {
	if _wc < uint32(128) {
		return uint32(Xtolower(tls, int32(_wc)))
	}

	return uint32(x__towcase(tls, int32(_wc), int32(1)))
}

// X__towupper_l is defined at towctrans.c:307:8
func X__towupper_l(tls TLS, _c uint32, _l uintptr /* Tlocale_t = *S__locale_struct */) (r uint32) {
	return Xtowupper(tls, _c)
}

// X__towlower_l is defined at towctrans.c:312:8
func X__towlower_l(tls TLS, _c uint32, _l uintptr /* Tlocale_t = *S__locale_struct */) (r uint32) {
	return Xtowlower(tls, _c)
}

type t118__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t118__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t13wint_t = uint32

// x__towcase is defined at towctrans.c:249:16
func x__towcase(tls TLS, _wc int32, _lower int32) (r int32) {
	var (
		_i     int32
		_lmul  int32
		_lmask int32
		_base  int32
	)
	_lmul = int32(2)*_lower - int32(1)
	_lmask = _lower - int32(1)
	if Xiswalpha(tls, uint32(_wc)) != 0 && uint32(_wc)-uint32(0x600) > uint32(2559) && uint32(_wc)-uint32(0x2e00) > uint32(30783) && uint32(_wc)-uint32(0xa800) > uint32(850) && uint32(_wc)-uint32(0xabc0) > uint32(21311) {
		goto _1
	}

	return _wc

_1:
	if _lower == 0 || uint32(_wc)-uint32(0x10a0) >= uint32(0x2e) {
		goto _2
	}

	if _wc <= int32(0x10c5) || _wc == int32(0x10c7) || _wc == int32(0x10cd) {
		goto _3
	}

	return _wc

	goto _4

_3:
	return _wc + int32(0x2d00) - int32(0x10a0)

_4:
_2:
	if _lower != 0 || uint32(_wc)-uint32(0x2d00) >= uint32(0x26) {
		goto _5
	}

	if _wc <= int32(0x2d25) || _wc == int32(0x2d27) || _wc == int32(0x2d2d) {
		goto _6
	}

	return _wc

	goto _7

_6:
	return _wc + int32(0x10a0) - int32(0x2d00)

_7:
_5:
	if _lower == 0 || uint32(_wc)-uint32(0x13a0) >= uint32(0x50) {
		goto _8
	}

	return _wc + int32(0xab70) - int32(0x13a0)

_8:
	if _lower != 0 || uint32(_wc)-uint32(0xab70) >= uint32(0x50) {
		goto _9
	}

	return _wc + int32(0x13a0) - int32(0xab70)

_9:
	_i = int32(0)
_10:
	if *(*uint8)(unsafe.Pointer((xcasemaps + 4*uintptr(_i)) + 3)) == 0 {
		goto _12
	}

	_base = int32(*(*uint16)(unsafe.Pointer(xcasemaps + 4*uintptr(_i)))) + _lmask&int32(*(*int8)(unsafe.Pointer((xcasemaps + 4*uintptr(_i)) + 2)))
	if uint32(_wc)-uint32(_base) >= uint32(*(*uint8)(unsafe.Pointer((xcasemaps + 4*uintptr(_i)) + 3))) {
		goto _13
	}

	if int32(*(*int8)(unsafe.Pointer((xcasemaps + 4*uintptr(_i)) + 2))) != int32(1) {
		goto _14
	}

	return _wc + _lower - (_wc-int32(*(*uint16)(unsafe.Pointer(xcasemaps + 4*uintptr(_i)))))&int32(1)

_14:
	return _wc + _lmul*int32(*(*int8)(unsafe.Pointer((xcasemaps + 4*uintptr(_i)) + 2)))

_13:
	_i++
	goto _10

_12:
	_i = int32(0)
_15:
	if *(*uint16)(unsafe.Pointer((xpairs + 4*uintptr(_i)) + 2*uintptr(int32(1)-_lower))) == 0 {
		goto _17
	}

	if int32(*(*uint16)(unsafe.Pointer((xpairs + 4*uintptr(_i)) + 2*uintptr(int32(1)-_lower)))) != _wc {
		goto _18
	}

	return int32(*(*uint16)(unsafe.Pointer((xpairs + 4*uintptr(_i)) + 2*uintptr(_lower))))

_18:
	_i++
	goto _15

_17:
	if uint32(_wc)-uint32(int32(0x10428)-int32(0x28)*_lower) >= uint32(0x28) {
		goto _19
	}

	return _wc - int32(0x28) + int32(0x50)*_lower

_19:
	if uint32(_wc)-uint32(int32(0x104d8)-int32(0x28)*_lower) >= uint32(0x24) {
		goto _20
	}

	return _wc - int32(0x28) + int32(0x50)*_lower

_20:
	if uint32(_wc)-uint32(int32(0x10cc0)-int32(0x40)*_lower) >= uint32(0x33) {
		goto _21
	}

	return _wc - int32(0x40) + int32(0x80)*_lower

_21:
	if uint32(_wc)-uint32(int32(0x118c0)-int32(0x20)*_lower) >= uint32(0x20) {
		goto _22
	}

	return _wc - int32(0x20) + int32(0x40)*_lower

_22:
	if uint32(_wc)-uint32(int32(0x1e922)-int32(0x22)*_lower) >= uint32(0x22) {
		goto _23
	}

	return _wc - int32(0x22) + int32(0x44)*_lower

_23:
	return _wc
}

type s31__locale_struct = struct{ Fcat [6]uintptr }

type t1wchar_t = int32

// xcasemaps [65]struct{Fupper uint16;Flower int8;Flen uint8;}, escapes: true, towctrans.c:12:3
var xcasemaps = ds + 20880

// xpairs [139][2]uint16, escapes: true, towctrans.c:95:29
var xpairs = ds + 21144

// linking wcswidth.o

func postinc503(p *uint64) uint64 { r := *p; *p += 18446744073709551615; return r }

func set504(p *int32, v int32) int32 { *p = v; return v }

// Xwcswidth is defined at wcswidth.c:3:5
func Xwcswidth(tls TLS, _wcs uintptr /* *Twchar_t = int32 */, _n uint64) (r int32) {
	var (
		_l int32
		_k int32
	)
	_l = int32(0)
	_k = int32(0)

_1:
	if postinc503(&_n) == 0 || *(*int32)(unsafe.Pointer(_wcs)) == 0 || set504(&_k, Xwcwidth(tls, *(*int32)(unsafe.Pointer(_wcs)))) < int32(0) {
		goto _3
	}

	_l = _l + _k
	_wcs += 4
	goto _1

_3:
	if _k < int32(0) {
		return _k
	}

	return _l
}

type t119__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t119__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t10size_t = uint64

type t2wchar_t = int32

// linking wctrans.o

// Xwctrans is defined at wctrans.c:5:11
func Xwctrans(tls TLS, _class uintptr /* *int8 */) (r uintptr /* Twctrans_t = *int32 */) {
	if Xstrcmp(tls, _class, ts+584 /* "toupper" */) != 0 {
		goto _1
	}

	return uintptr(1)

_1:
	if Xstrcmp(tls, _class, ts+592 /* "tolower" */) != 0 {
		goto _2
	}

	return uintptr(2)

_2:
	return null
}

// Xtowctrans is defined at wctrans.c:12:8
func Xtowctrans(tls TLS, _wc uint32, _trans uintptr /* Twctrans_t = *int32 */) (r uint32) {
	if _trans != uintptr(1) {
		goto _1
	}

	return Xtowupper(tls, _wc)

_1:
	if _trans != uintptr(2) {
		goto _2
	}

	return Xtowlower(tls, _wc)

_2:
	return _wc
}

// X__wctrans_l is defined at wctrans.c:19:11
func X__wctrans_l(tls TLS, _s uintptr /* *int8 */, _l uintptr /* Tlocale_t = *S__locale_struct */) (r uintptr /* Twctrans_t = *int32 */) {
	return Xwctrans(tls, _s)
}

// X__towctrans_l is defined at wctrans.c:24:8
func X__towctrans_l(tls TLS, _c uint32, _t uintptr /* Twctrans_t = *int32 */, _l uintptr /* Tlocale_t = *S__locale_struct */) (r uint32) {
	return Xtowctrans(tls, _c, _t)
}

type t120__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t120__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t14wint_t = uint32

type s32__locale_struct = struct{ Fcat [6]uintptr }

// linking wcwidth.o

// Xwcwidth is defined at wcwidth.c:11:5
func Xwcwidth(tls TLS, _wc int32) (r int32) {
	if uint32(_wc) >= uint32(0xff) {
		goto _1
	}

	if (_wc+int32(1))&int32(0x7f) >= int32(0x21) {
		return int32(1)
	}

	return func() int32 {
		if _wc != 0 {
			return int32(-1)
		}
		return int32(0)
	}()

_1:
	if uint32(_wc)&uint32(0xfffeffff) >= uint32(0xfffe) {
		goto _2
	}

	if (int32(*(*uint8)(unsafe.Pointer(x5table + uintptr(int32(*(*uint8)(unsafe.Pointer(x5table + uintptr(_wc>>(uint(8)%32)))))*int32(32)+_wc&int32(255)>>(uint(3)%32))))) >> (uint(_wc&int32(7)) % 32) & int32(1)) == 0 {
		goto _3
	}

	return int32(0)

_3:
	if (int32(*(*uint8)(unsafe.Pointer(xwtable + uintptr(int32(*(*uint8)(unsafe.Pointer(xwtable + uintptr(_wc>>(uint(8)%32)))))*int32(32)+_wc&int32(255)>>(uint(3)%32))))) >> (uint(_wc&int32(7)) % 32) & int32(1)) == 0 {
		goto _4
	}

	return int32(2)

_4:
	return int32(1)

_2:
	if _wc&int32(0xfffe) != int32(0xfffe) {
		goto _5
	}

	return int32(-1)

_5:
	if uint32(_wc)-uint32(0x20000) >= uint32(0x20000) {
		goto _6
	}

	return int32(2)

_6:
	if _wc != int32(0xe0001) && uint32(_wc)-uint32(0xe0020) >= uint32(0x5f) && _wc-int32(0xe0100) >= int32(0xef) {
		goto _7
	}

	return int32(0)

_7:
	return int32(1)
}

type t121__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t121__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t3wchar_t = int32

// xtable [2464]uint8, escapes: true, wcwidth.c:3:28
var x5table = ds + 21704

// xwtable [1536]uint8, escapes: true, wcwidth.c:7:28
var xwtable = ds + 24168

// linking __getdents.o

// X__getdents is defined at __getdents.c:5:5
func X__getdents(tls TLS, _fd int32, _buf uintptr /* *Sdirent */, _len uint64) (r int32) {
	return int32(X__syscall_ret(tls, uint64(x2__syscall3(tls, int64(217), int64(_fd), int64(_buf), int64(_len)))))
}

type t122__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t122__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t11size_t = uint64

type Sdirent = struct {
	Fd_ino    uint64
	Fd_off    int64
	Fd_reclen uint16
	Fd_type   uint8
	Fd_name   [256]int8
}

// x__syscall3 is defined at syscall_arch.h:33:22
func x2__syscall3(tls TLS, _n int64, _a1 int64, _a2 int64, _a3 int64) (r int64) {
	return X__syscall(tls, _n, _a1, _a2, _a3, int64(0), int64(0), int64(0))
}

type Tino_t = uint64

type t3off_t = int64

// linking alphasort.o

// Xalphasort is defined at alphasort.c:5:5
func Xalphasort(tls TLS, _a uintptr /* **Sdirent */, _b uintptr /* **Sdirent */) (r int32) {
	return Xstrcoll(tls, *(*uintptr)(unsafe.Pointer(_a))+19, *(*uintptr)(unsafe.Pointer(_b))+19)
}

type t123__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t123__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type s1dirent = struct {
	Fd_ino    uint64
	Fd_off    int64
	Fd_reclen uint16
	Fd_type   uint8
	Fd_name   [256]int8
}

type t1ino_t = uint64

type t4off_t = int64

// linking closedir.o

// Xclosedir is defined at closedir.c:6:5
func Xclosedir(tls TLS, _dir uintptr /* *TDIR = S__dirstream */) (r int32) {
	var _ret int32

	_ret = Xclose(tls, *(*int32)(unsafe.Pointer(_dir + 8)))
	Xfree(tls, _dir)
	return _ret
}

type t124__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t124__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type S__dirstream = struct {
	Ftell    int64
	Ffd      int32
	Fbuf_pos int32
	Fbuf_end int32
	Flock    [1]int32
	Fbuf     [2048]int8
}

type t5off_t = int64

// linking dirfd.o

// Xdirfd is defined at dirfd.c:4:5
func Xdirfd(tls TLS, _d uintptr /* *TDIR = S__dirstream */) (r int32) {
	return *(*int32)(unsafe.Pointer(_d + 8))
}

type t125__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t125__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type s1__dirstream = struct {
	Ftell    int64
	Ffd      int32
	Fbuf_pos int32
	Fbuf_end int32
	Flock    [1]int32
	Fbuf     [2048]int8
}

type t6off_t = int64

// linking fdopendir.o

func set505(p *uintptr, v uintptr) uintptr { *p = v; return v }

// Xfdopendir is defined at fdopendir.c:8:5
func Xfdopendir(tls TLS, _fd int32) (r uintptr /* *TDIR = S__dirstream */) {
	esc := MustMalloc(144)
	var (
		_dir uintptr // *TDIR = S__dirstream
		_st  = esc   // *Sstat
	)
	defer Free(esc)
	if Xfstat(tls, _fd, _st) >= int32(0) {
		goto _1
	}

	return null

_1:
	if *(*uint32)(unsafe.Pointer(_st + 24))&uint32(0170000) == uint32(040000) {
		goto _2
	}

	*(*int32)(unsafe.Pointer(X__errno_location(tls))) = int32(20)
	return null

_2:
	if set505(&_dir, Xcalloc(tls, uint64(1), uint64(2072))) != 0 {
		goto _3
	}

	return null

_3:
	Xfcntl(tls, _fd, int32(2), int32(1))
	*(*int32)(unsafe.Pointer(_dir + 8)) = _fd
	return _dir
}

type t126__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t126__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type s2__dirstream = struct {
	Ftell    int64
	Ffd      int32
	Fbuf_pos int32
	Fbuf_end int32
	Flock    [1]int32
	Fbuf     [2048]int8
}

type Sstat = struct {
	Fst_dev     uint64
	Fst_ino     uint64
	Fst_nlink   uint64
	Fst_mode    uint32
	Fst_uid     uint32
	Fst_gid     uint32
	F__pad0     uint32
	Fst_rdev    uint64
	Fst_size    int64
	Fst_blksize int64
	Fst_blocks  int64
	Fst_atim    s1timespec
	Fst_mtim    s1timespec
	Fst_ctim    s1timespec
	F__unused   [3]int64
}

type Tmode_t = uint32

type t7off_t = int64

type Tdev_t = uint64

type t2ino_t = uint64

type Tnlink_t = uint64

type t1uid_t = uint32

type Tgid_t = uint32

type Tblksize_t = int64

type Tblkcnt_t = int64

type s1timespec = struct {
	Ftv_sec  int64
	Ftv_nsec int64
}

type t12size_t = uint64

type t1time_t = int64

// linking opendir.o

func set506(p *int32, v int32) int32 { *p = v; return v }

func set507(p *uintptr, v uintptr) uintptr { *p = v; return v }

// Xopendir is defined at opendir.c:8:5
func Xopendir(tls TLS, _name uintptr /* *int8 */) (r uintptr /* *TDIR = S__dirstream */) {
	var (
		_fd  int32
		_dir uintptr // *TDIR = S__dirstream
	)
	if set506(&_fd, Xopen(tls, _name, int32(589824))) >= int32(0) {
		goto _1
	}

	return null

_1:
	if set507(&_dir, Xcalloc(tls, uint64(1), uint64(2072))) != 0 {
		goto _2
	}

	x__syscall1(tls, int64(3), int64(_fd))
	return null

_2:
	*(*int32)(unsafe.Pointer(_dir + 8)) = _fd
	return _dir
}

type t127__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t127__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type s3__dirstream = struct {
	Ftell    int64
	Ffd      int32
	Fbuf_pos int32
	Fbuf_end int32
	Flock    [1]int32
	Fbuf     [2048]int8
}

// x__syscall1 is defined at syscall_arch.h:16:22
func x__syscall1(tls TLS, _n int64, _a1 int64) (r int64) {
	return X__syscall(tls, _n, _a1, int64(0), int64(0), int64(0), int64(0), int64(0))
}

type t8off_t = int64

type t13size_t = uint64

// linking readdir.o

// Xreaddir is defined at readdir.c:11:15
func Xreaddir(tls TLS, _dir uintptr /* *TDIR = S__dirstream */) (r uintptr /* *Sdirent */) {
	var (
		_de  uintptr // *Sdirent
		_len int32
	)
	if *(*int32)(unsafe.Pointer(_dir + 12)) < *(*int32)(unsafe.Pointer(_dir + 16)) {
		goto _1
	}

	_len = int32(x3__syscall3(tls, int64(217), int64(*(*int32)(unsafe.Pointer(_dir + 8))), int64(_dir+24), int64(2048)))
	if _len > int32(0) {
		goto _2
	}

	if _len >= int32(0) || _len == int32(-2) {
		goto _3
	}

	*(*int32)(unsafe.Pointer(X__errno_location(tls))) = -_len
_3:
	return null

_2:
	*(*int32)(unsafe.Pointer(_dir + 16)) = _len
	*(*int32)(unsafe.Pointer(_dir + 12)) = int32(0)
_1:
	_de = (_dir + 24) + uintptr(*(*int32)(unsafe.Pointer(_dir + 12)))
	{
		p := (*int32)(unsafe.Pointer(_dir + 12))
		*p = *p + int32(*(*uint16)(unsafe.Pointer(_de + 16)))
	}
	*(*int64)(unsafe.Pointer(_dir)) = *(*int64)(unsafe.Pointer(_de + 8))
	return _de
}

type t128__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t128__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type s4__dirstream = struct {
	Ftell    int64
	Ffd      int32
	Fbuf_pos int32
	Fbuf_end int32
	Flock    [1]int32
	Fbuf     [2048]int8
}

type s2dirent = struct {
	Fd_ino    uint64
	Fd_off    int64
	Fd_reclen uint16
	Fd_type   uint8
	Fd_name   [256]int8
}

// x__syscall3 is defined at syscall_arch.h:33:22
func x3__syscall3(tls TLS, _n int64, _a1 int64, _a2 int64, _a3 int64) (r int64) {
	return X__syscall(tls, _n, _a1, _a2, _a3, int64(0), int64(0), int64(0))
}

type t9off_t = int64

type t3ino_t = uint64

// linking readdir_r.o

func set508(p *int32, v int32) int32 { *p = v; return v }

// Xreaddir_r is defined at readdir_r.c:7:5
func Xreaddir_r(tls TLS, _dir uintptr /* *TDIR = S__dirstream */, _buf uintptr /* *Sdirent */, _result uintptr /* **Sdirent */) (r int32) {
	var (
		_de         uintptr // *Sdirent
		_errno_save int32
		_ret        int32
	)
	_errno_save = *(*int32)(unsafe.Pointer(X__errno_location(tls)))
	X__lock(tls, _dir+20)
	*(*int32)(unsafe.Pointer(X__errno_location(tls))) = int32(0)
	_de = Xreaddir(tls, _dir)
	if set508(&_ret, *(*int32)(unsafe.Pointer(X__errno_location(tls)))) == 0 {
		goto _1
	}

	X__unlock(tls, _dir+20)
	return _ret

_1:
	*(*int32)(unsafe.Pointer(X__errno_location(tls))) = _errno_save
	if _de == 0 {
		goto _2
	}

	Xmemcpy(tls, _buf, _de, uint64(*(*uint16)(unsafe.Pointer(_de + 16))))
	goto _3

_2:
	_buf = null
_3:
	X__unlock(tls, _dir+20)
	*(*uintptr)(unsafe.Pointer(_result)) = _buf
	return int32(0)
}

type t129__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t129__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type s5__dirstream = struct {
	Ftell    int64
	Ffd      int32
	Fbuf_pos int32
	Fbuf_end int32
	Flock    [1]int32
	Fbuf     [2048]int8
}

type s3dirent = struct {
	Fd_ino    uint64
	Fd_off    int64
	Fd_reclen uint16
	Fd_type   uint8
	Fd_name   [256]int8
}

type t10off_t = int64

type t4ino_t = uint64

type t14size_t = uint64

// linking rewinddir.o

func set509(p *int32, v int32) int32 { *p = v; return v }

// Xrewinddir is defined at rewinddir.c:6:6
func Xrewinddir(tls TLS, _dir uintptr /* *TDIR = S__dirstream */) {
	X__lock(tls, _dir+20)
	Xlseek(tls, *(*int32)(unsafe.Pointer(_dir + 8)), int64(0), int32(0))
	*(*int32)(unsafe.Pointer(_dir + 12)) = set509((*int32)(unsafe.Pointer(_dir+16)), int32(0))
	*(*int64)(unsafe.Pointer(_dir)) = int64(0)
	X__unlock(tls, _dir+20)
}

type t130__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t130__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type s6__dirstream = struct {
	Ftell    int64
	Ffd      int32
	Fbuf_pos int32
	Fbuf_end int32
	Flock    [1]int32
	Fbuf     [2048]int8
}

type t11off_t = int64

// linking scandir.o

func set510(p *uintptr, v uintptr) uintptr { *p = v; return v }

func fn511(p uintptr) func(TLS, uintptr) int32 {
	return *(*func(TLS, uintptr) int32)(unsafe.Pointer(&p))
}

func postinc512(p *uint64) uint64 { r := *p; *p += 1; return r }

func postinc513(p *uint64) uint64 { r := *p; *p += 18446744073709551615; return r }

// Xscandir is defined at scandir.c:9:5
func Xscandir(tls TLS, _path uintptr /* *int8 */, _res uintptr /* ***Sdirent */, _sel uintptr /* *func(TLS, uintptr) int32 */, _cmp uintptr /* *func(TLS, uintptr, uintptr) int32 */) (r int32) {
	var (
		_d         uintptr // *TDIR = S__dirstream
		_de        uintptr // *Sdirent
		_names     uintptr // **Sdirent
		_tmp       uintptr // **Sdirent
		_cnt       uint64
		_len       uint64
		_old_errno int32
	)
	_d = Xopendir(tls, _path)
	_names = 0
	_cnt = uint64(0)
	_len = uint64(0)
	_old_errno = *(*int32)(unsafe.Pointer(X__errno_location(tls)))
	if _d != 0 {
		goto _1
	}

	return int32(-1)

_1:
_2:
	if func() uintptr {
		*(*int32)(unsafe.Pointer(X__errno_location(tls))) = int32(0)
		return set510(&_de, Xreaddir(tls, _d))
	}() == 0 {
		goto _3
	}

	if _sel == 0 || fn511(_sel)(tls, _de) != 0 {
		goto _4
	}

	goto _2

_4:
	if _cnt < _len {
		goto _5
	}

	_len = uint64(2)*_len + uint64(1)
	if _len <= uint64(2305843009213693951) {
		goto _6
	}

	goto _3

_6:
	_tmp = Xrealloc(tls, _names, _len*uint64(8))
	if _tmp != 0 {
		goto _7
	}

	goto _3

_7:
	_names = _tmp
_5:
	*(*uintptr)(unsafe.Pointer(_names + 8*uintptr(_cnt))) = Xmalloc(tls, uint64(*(*uint16)(unsafe.Pointer(_de + 16))))
	if *(*uintptr)(unsafe.Pointer(_names + 8*uintptr(_cnt))) != 0 {
		goto _8
	}

	goto _3

_8:
	Xmemcpy(tls, *(*uintptr)(unsafe.Pointer(_names + 8*uintptr(postinc512(&_cnt)))), _de, uint64(*(*uint16)(unsafe.Pointer(_de + 16))))
	goto _2

_3:
	Xclosedir(tls, _d)
	if *(*int32)(unsafe.Pointer(X__errno_location(tls))) == 0 {
		goto _9
	}

	if _names == 0 {
		goto _10
	}

_11:
	if postinc513(&_cnt) <= uint64(0) {
		goto _12
	}

	Xfree(tls, *(*uintptr)(unsafe.Pointer(_names + 8*uintptr(_cnt))))
	goto _11

_12:
_10:
	Xfree(tls, _names)
	return int32(-1)

_9:
	*(*int32)(unsafe.Pointer(X__errno_location(tls))) = _old_errno
	if _cmp == 0 {
		goto _13
	}

	Xqsort(tls, _names, _cnt, uint64(8), _cmp)
_13:
	*(*uintptr)(unsafe.Pointer(_res)) = _names
	return int32(_cnt)
}

type t131__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t131__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type s4dirent = struct {
	Fd_ino    uint64
	Fd_off    int64
	Fd_reclen uint16
	Fd_type   uint8
	Fd_name   [256]int8
}

type t15size_t = uint64

type t5ino_t = uint64

type t12off_t = int64

type s7__dirstream struct{ uintptr }

// linking seekdir.o

func set514(p *int32, v int32) int32 { *p = v; return v }

// Xseekdir is defined at seekdir.c:6:6
func Xseekdir(tls TLS, _dir uintptr /* *TDIR = S__dirstream */, _off int64) {
	X__lock(tls, _dir+20)
	*(*int64)(unsafe.Pointer(_dir)) = Xlseek(tls, *(*int32)(unsafe.Pointer(_dir + 8)), _off, int32(0))
	*(*int32)(unsafe.Pointer(_dir + 12)) = set514((*int32)(unsafe.Pointer(_dir+16)), int32(0))
	X__unlock(tls, _dir+20)
}

type t132__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t132__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type s8__dirstream = struct {
	Ftell    int64
	Ffd      int32
	Fbuf_pos int32
	Fbuf_end int32
	Flock    [1]int32
	Fbuf     [2048]int8
}

type t13off_t = int64

// linking telldir.o

// Xtelldir is defined at telldir.c:4:6
func Xtelldir(tls TLS, _dir uintptr /* *TDIR = S__dirstream */) (r int64) {
	return *(*int64)(unsafe.Pointer(_dir))
}

type t133__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t133__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type s9__dirstream = struct {
	Ftell    int64
	Ffd      int32
	Fbuf_pos int32
	Fbuf_end int32
	Flock    [1]int32
	Fbuf     [2048]int8
}

type t14off_t = int64

// linking versionsort.o

// Xversionsort is defined at versionsort.c:6:5
func Xversionsort(tls TLS, _a uintptr /* **Sdirent */, _b uintptr /* **Sdirent */) (r int32) {
	return Xstrverscmp(tls, *(*uintptr)(unsafe.Pointer(_a))+19, *(*uintptr)(unsafe.Pointer(_b))+19)
}

type t134__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t134__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type s5dirent = struct {
	Fd_ino    uint64
	Fd_off    int64
	Fd_reclen uint16
	Fd_type   uint8
	Fd_name   [256]int8
}

type t6ino_t = uint64

type t15off_t = int64

// linking __environ.o

// X__environ **int8, escapes: true, __environ.c:3:6
var X__environ = bss + 400

type t135__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t135__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// linking __init_tls.o

// X__init_tp is defined at __init_tls.c:13:5
func X__init_tp(tls TLS, _p uintptr /* *void */) (r int32) {
	var (
		_td uintptr // Tpthread_t = *S__pthread
		_r  int32
	)
	_td = _p
	*(*uintptr)(unsafe.Pointer(X__ccgo_main_tls)) = _td
	*(*uintptr)(unsafe.Pointer(_td)) = _td
	_r = int32(0)
	if _r >= int32(0) {
		goto _1
	}

	return int32(-1)

_1:
	if _r != 0 {
		goto _2
	}

	*(*int32)(unsafe.Pointer(X__libc)) = int32(1)
_2:
	*(*int32)(unsafe.Pointer(_td + 64)) = int32(2)
	*(*uintptr)(unsafe.Pointer(_td + 192)) = X__libc + 64
	*(*uintptr)(unsafe.Pointer(_td + 160)) = _td + 160
	return int32(0)
}

func set515(p *uintptr, v uintptr) uintptr { *p = v; return v }

// X__copy_tls is defined at __init_tls.c:38:6
func X__copy_tls(tls TLS, _mem uintptr /* *uint8 */) (r uintptr /* *void */) {
	var (
		_td  uintptr // Tpthread_t = *S__pthread
		_p   uintptr // *Stls_module
		_i   uint64
		_dtv uintptr // **void
	)
	_dtv = _mem
	_mem += uintptr(*(*uint64)(unsafe.Pointer(X__libc + 32)) - uint64(240))
	_mem -= uintptr(uint64(_mem) & (*(*uint64)(unsafe.Pointer(X__libc + 40)) - uint64(1)))
	_td = _mem
	_i = uint64(1)
	_p = *(*uintptr)(unsafe.Pointer(X__libc + 24))
_1:
	if _p == 0 {
		goto _3
	}

	*(*uintptr)(unsafe.Pointer(_dtv + 8*uintptr(_i))) = _mem - uintptr(*(*uint64)(unsafe.Pointer(_p + 40)))
	Xmemcpy(tls, *(*uintptr)(unsafe.Pointer(_dtv + 8*uintptr(_i))), *(*uintptr)(unsafe.Pointer(_p + 8)), *(*uint64)(unsafe.Pointer(_p + 16)))
	_i++
	_p = *(*uintptr)(unsafe.Pointer(_p))
	goto _1

_3:
	*(*uintptr)(unsafe.Pointer(_dtv)) = uintptr(*(*uint64)(unsafe.Pointer(X__libc + 48)))
	*(*uintptr)(unsafe.Pointer(_td + 8)) = set515((*uintptr)(unsafe.Pointer(_td+232)), _dtv)
	return _td
}

type t136__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t136__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type s5__pthread = struct {
	Fself          uintptr // *S__pthread
	Fdtv           uintptr // **void
	Funused1       uintptr // *void
	Funused2       uintptr // *void
	Fsysinfo       uint64
	Fcanary        uint64
	Fcanary2       uint64
	Ftid           int32
	Ferrno_val     int32
	Fdetach_state  int32
	Fcancel        int32
	Fcanceldisable uint8
	Fcancelasync   uint8
	F74            uint8
	Fmap_base      uintptr // *uint8
	Fmap_size      uint64
	Fstack         uintptr // *void
	Fstack_size    uint64
	Fguard_size    uint64
	Fstart_arg     uintptr // *void
	Fstart         uintptr // *func(TLS, uintptr) uintptr
	Fresult        uintptr // *void
	Fcancelbuf     uintptr // *S__ptcb
	Ftsd           uintptr // **void
	Frobust_list   struct {
		Fhead    uintptr
		Foff     int64
		Fpending uintptr
	}
	Ftimer_id      int32
	Flocale        uintptr // Tlocale_t = *S__locale_struct
	Fkilllock      [1]int32
	Fdlerror_buf   uintptr // *int8
	Fstdio_locks   uintptr // *void
	Fcanary_at_end uint64
	Fdtv_copy      uintptr // **void
}

type Stls_module = struct {
	Fnext   uintptr // *Stls_module
	Fimage  uintptr // *void
	Flen    uint64
	Fsize   uint64
	Falign  uint64
	Foffset uint64
}

type t16size_t = uint64

type t4uintptr_t = uint64

// xstatic_init_tls is defined at __init_tls.c:82:13
func xstatic_init_tls(tls TLS, _aux uintptr /* *Tsize_t = uint64 */) {
	var (
		_p        uintptr // *uint8
		_n        uint64
		_phdr     uintptr // *TPhdr = TElf64_Phdr = struct{Fp...p_memsz uint64;Fp_align uint64;}
		_tls_phdr uintptr // *TPhdr = TElf64_Phdr = struct{Fp...p_memsz uint64;Fp_align uint64;}
		_base     uint64
		_mem      uintptr // *void
	)
	_tls_phdr = 0
	_base = uint64(0)
	_p = uintptr(*(*uint64)(unsafe.Pointer(_aux + 24)))
	_n = *(*uint64)(unsafe.Pointer(_aux + 40))
_1:
	if _n == 0 {
		goto _3
	}

	_phdr = _p
	if *(*uint32)(unsafe.Pointer(_phdr)) != uint32(6) {
		goto _4
	}

	_base = *(*uint64)(unsafe.Pointer(_aux + 24)) - *(*uint64)(unsafe.Pointer(_phdr + 16))
_4:
	if *(*uint32)(unsafe.Pointer(_phdr)) != uint32(2) || X_DYNAMIC == 0 {
		goto _5
	}

	_base = uint64(X_DYNAMIC) - *(*uint64)(unsafe.Pointer(_phdr + 16))
_5:
	if *(*uint32)(unsafe.Pointer(_phdr)) != uint32(7) {
		goto _6
	}

	_tls_phdr = _phdr
_6:
	_n--
	_p += uintptr(*(*uint64)(unsafe.Pointer(_aux + 32)))
	goto _1

_3:
	if _tls_phdr == 0 {
		goto _7
	}

	*(*uintptr)(unsafe.Pointer(xmain_tls + 8)) = uintptr(_base + *(*uint64)(unsafe.Pointer(_tls_phdr + 16)))
	*(*uint64)(unsafe.Pointer(xmain_tls + 16)) = *(*uint64)(unsafe.Pointer(_tls_phdr + 32))
	*(*uint64)(unsafe.Pointer(xmain_tls + 24)) = *(*uint64)(unsafe.Pointer(_tls_phdr + 40))
	*(*uint64)(unsafe.Pointer(xmain_tls + 32)) = *(*uint64)(unsafe.Pointer(_tls_phdr + 48))
	*(*uint64)(unsafe.Pointer(X__libc + 48)) = uint64(1)
	*(*uintptr)(unsafe.Pointer(X__libc + 24)) = xmain_tls
_7:
	{
		p := (*uint64)(unsafe.Pointer(xmain_tls + 24))
		*p = *p + (-*(*uint64)(unsafe.Pointer(xmain_tls + 24))-uint64(*(*uintptr)(unsafe.Pointer(xmain_tls + 8))))&(*(*uint64)(unsafe.Pointer(xmain_tls + 32))-uint64(1))
	}
	*(*uint64)(unsafe.Pointer(xmain_tls + 40)) = *(*uint64)(unsafe.Pointer(xmain_tls + 24))
	if *(*uint64)(unsafe.Pointer(xmain_tls + 32)) >= uint64(8) {
		goto _8
	}

	*(*uint64)(unsafe.Pointer(xmain_tls + 32)) = uint64(8)
_8:
	*(*uint64)(unsafe.Pointer(X__libc + 40)) = *(*uint64)(unsafe.Pointer(xmain_tls + 32))
	*(*uint64)(unsafe.Pointer(X__libc + 32)) = (uint64(256) + *(*uint64)(unsafe.Pointer(xmain_tls + 24)) + *(*uint64)(unsafe.Pointer(xmain_tls + 32)) + uint64(8) - uint64(1)) & uint64(18446744073709551608)
	if *(*uint64)(unsafe.Pointer(X__libc + 32)) <= uint64(376) {
		goto _9
	}

	_mem = uintptr(x1__syscall6(tls, int64(9), int64(0), int64(*(*uint64)(unsafe.Pointer(X__libc + 32))), int64(3), int64(34), int64(-1), int64(0)))
	goto _10

_9:
	_mem = xbuiltin_tls
_10:
	if X__init_tp(tls, X__copy_tls(tls, _mem)) >= int32(0) {
		goto _11
	}

	xa_crash(tls)
_11:
}

type s4__ptcb = struct {
	F__f    uintptr // *func(TLS, uintptr)
	F__x    uintptr // *void
	F__next uintptr // *S__ptcb
}

type s33__locale_struct = struct{ Fcat [6]uintptr }

type TElf64_Word = uint32

type t15uint32_t = uint32

type TElf64_Off = uint64

type t9uint64_t = uint64

type TElf64_Addr = uint64

type TElf64_Xword = uint64

// xmain_tls Stls_module, escapes: true, __init_tls.c:36:26
var xmain_tls = bss + 408

// x__syscall6 is defined at syscall_arch.h:63:22
func x1__syscall6(tls TLS, _n int64, _a1 int64, _a2 int64, _a3 int64, _a4 int64, _a5 int64, _a6 int64) (r int64) {
	return X__syscall(tls, _n, _a1, _a2, _a3, _a4, _a5, _a6)
}

// xbuiltin_tls [1]struct{Fc int8;Fpt S__pthread;Fspace [16]uintptr;}, escapes: true, __init_tls.c:33:3
var xbuiltin_tls = bss + 456

// xa_crash is defined at atomic_arch.h:121:20
func xa_crash(tls TLS) {
	panic(`hlt`)
}

// linking __libc_start_main.o

func set516(p *uintptr, v uintptr) uintptr { *p = v; return v }

// X__init_libc is defined at __libc_start_main.c:25:6
func X__init_libc(tls TLS, _envp uintptr /* **int8 */, _pn uintptr /* *int8 */) {
	esc := MustMalloc(328)
	var (
		_i    uint64
		_auxv uintptr     // *Tsize_t = uint64
		_aux  = esc       // *[38]uint64
		_tls  uintptr     // Tpthread_t = *S__pthread
		_pfd  = esc + 304 // *[3]Spollfd
		_r    int32
	)
	defer Free(esc)
	Copy(_aux, ts+600 /* "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00..." */, 304)
	*(*uintptr)(unsafe.Pointer(X__environ)) = _envp
	_i = uint64(0)
_1:
	if *(*uintptr)(unsafe.Pointer(_envp + 8*uintptr(_i))) == 0 {
		goto _3
	}

	_i++
	goto _1

_3:
	*(*uintptr)(unsafe.Pointer(X__libc + 16)) = set516(&_auxv, (_envp+8*uintptr(_i))+8*uintptr(1))
	_i = uint64(0)
_4:
	if *(*uint64)(unsafe.Pointer(_auxv + 8*uintptr(_i))) == 0 {
		goto _6
	}

	if *(*uint64)(unsafe.Pointer(_auxv + 8*uintptr(_i))) >= uint64(38) {
		goto _7
	}

	*(*uint64)(unsafe.Pointer(_aux + 8*uintptr(*(*uint64)(unsafe.Pointer(_auxv + 8*uintptr(_i)))))) = *(*uint64)(unsafe.Pointer(_auxv + 8*uintptr(_i+uint64(1))))
_7:
	_i = _i + uint64(2)
	goto _4

_6:
	*(*uint64)(unsafe.Pointer(X__hwcap)) = *(*uint64)(unsafe.Pointer(_aux + 128))
	*(*uint64)(unsafe.Pointer(X__sysinfo)) = *(*uint64)(unsafe.Pointer(_aux + 256))
	*(*uint64)(unsafe.Pointer(X__libc + 56)) = *(*uint64)(unsafe.Pointer(_aux + 48))
	if _pn != 0 {
		goto _8
	}

	_pn = uintptr(*(*uint64)(unsafe.Pointer(_aux + 248)))
_8:
	if _pn != 0 {
		goto _9
	}

	_pn = ts + 112 /* "" */
_9:
	*(*uintptr)(unsafe.Pointer(X__progname)) = set516((*uintptr)(unsafe.Pointer(X__progname_full)), _pn)
	_i = uint64(0)
_10:
	if *(*int8)(unsafe.Pointer(_pn + uintptr(_i))) == 0 {
		goto _12
	}

	if int32(*(*int8)(unsafe.Pointer(_pn + uintptr(_i)))) != int32('/') {
		goto _13
	}

	*(*uintptr)(unsafe.Pointer(X__progname)) = (_pn + uintptr(_i)) + uintptr(1)
_13:
	_i++
	goto _10

_12:
	X__init_tls(tls, _aux)
	_tls = *(*uintptr)(unsafe.Pointer(X__ccgo_main_tls))
	tls = TLS(_tls)

	X__init_ssp(tls, uintptr(*(*uint64)(unsafe.Pointer(_aux + 200))))
	if *(*uint64)(unsafe.Pointer(_aux + 88)) != *(*uint64)(unsafe.Pointer(_aux + 96)) || *(*uint64)(unsafe.Pointer(_aux + 104)) != *(*uint64)(unsafe.Pointer(_aux + 112)) || *(*uint64)(unsafe.Pointer(_aux + 184)) != 0 {
		goto _14
	}

	return

_14:
	Copy(_pfd, ts+908 /* "\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00..." */, 24)
	_r = int32(x4__syscall3(tls, int64(7), int64(_pfd), int64(3), int64(0)))
	if _r >= int32(0) {
		goto _15
	}

	x1a_crash(tls)
_15:
	X__assert_fail(tls, ts+0 /* "TODO(ccgo)" */, ts+936 /* "src/env/__libc_s..." */, int32(57), x517__func__)
}

// X__ccgo_argv **int8, escapes: true, __libc_start_main.c:78:6
var X__ccgo_argv = bss + 832

func postinc518(p *uintptr) uintptr { r := *p; *p += 8; return r }

// X__libc_start_main is defined at __libc_start_main.c:80:6
func X__libc_start_main(tls TLS) {
	var (
		_argc int32
		_envc int32
		_envp uintptr // **int8
		_p    uintptr // **int8
		_i    int32
		_1i   int32
		_tls  uintptr // Tpthread_t = *S__pthread
	)
	_argc = X__ccgo_argc(tls)
	_envc = X__ccgo_envc(tls)
	*(*uintptr)(unsafe.Pointer(X__ccgo_argv)) = Xmalloc(tls, uint64(8)*uint64(_argc+int32(1)+_envc+int32(1)))
	_envp = (*(*uintptr)(unsafe.Pointer(X__ccgo_argv)) + 8*uintptr(_argc)) + 8*uintptr(1)
	_p = *(*uintptr)(unsafe.Pointer(X__ccgo_argv))

	_i = int32(0)
_1:
	if _i >= _argc {
		goto _3
	}

	*(*uintptr)(unsafe.Pointer(postinc518(&_p))) = X__ccgo_arg(tls, _i)
	_i++
	goto _1

_3:
	*(*uintptr)(unsafe.Pointer(postinc518(&_p))) = null

	_1i = int32(0)
_4:
	if _1i >= _envc {
		goto _6
	}

	*(*uintptr)(unsafe.Pointer(postinc518(&_p))) = X__ccgo_env(tls, _1i)
	_1i++
	goto _4

_6:
	*(*uintptr)(unsafe.Pointer(_p)) = null
	X__init_libc(tls, _envp, *(*uintptr)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(X__ccgo_argv)))))
	_tls = *(*uintptr)(unsafe.Pointer(X__ccgo_main_tls))
	tls = TLS(_tls)

	X__libc_start_init(tls)
}

type t137__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t137__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// xdummy is defined at __libc_start_main.c:12:13
func xdummy(tls TLS) {
}

// xdummy1 is defined at __libc_start_main.c:18:13
func xdummy1(tls TLS, _p uintptr /* *void */) {
}

// x3__func__ [12]int8, escapes: true, __libc_start_main.c:26:1
var x517__func__ = ds + 25704

type t17size_t = uint64

type Spollfd = struct {
	Ffd      int32
	Fevents  int16
	Frevents int16
}

// x__syscall3 is defined at syscall_arch.h:33:22
func x4__syscall3(tls TLS, _n int64, _a1 int64, _a2 int64, _a3 int64) (r int64) {
	return X__syscall(tls, _n, _a1, _a2, _a3, int64(0), int64(0), int64(0))
}

// xa_crash is defined at atomic_arch.h:121:20
func x1a_crash(tls TLS) {
	panic(`hlt`)
}

func fn519(p uintptr) func(TLS) { return *(*func(TLS))(unsafe.Pointer(&p)) }

// xlibc_start_init is defined at __libc_start_main.c:64:13
func xlibc_start_init(tls TLS) {
	var _a uint64

	X_init(tls)
	_a = uint64(X__init_array_start)

_1:
	if _a >= uint64(X__init_array_end) {
		goto _3
	}

	fn519(*(*uintptr)(unsafe.Pointer(uintptr(_a))))(tls)
	_a = _a + uint64(8)
	goto _1

_3:
}

type t5uintptr_t = uint64

type s6__pthread struct{ uintptr }

// linking __reset_tls.o

// X__reset_tls is defined at __reset_tls.c:5:6
func X__reset_tls(tls TLS) {
	var (
		_self uintptr // Tpthread_t = *S__pthread
		_p    uintptr // *Stls_module
		_i    uint64
		_n    uint64
	)
	_self = x3__pthread_self(tls)
	_n = uint64(*(*uintptr)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_self + 8)))))
	if _n == 0 {
		goto _1
	}

	_p = *(*uintptr)(unsafe.Pointer(X__libc + 24))
	_i = uint64(1)
_2:
	if _i > _n {
		goto _4
	}

	if *(*uintptr)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_self + 8)) + 8*uintptr(_i))) != 0 {
		goto _5
	}

	goto _3

_5:
	Xmemcpy(tls, *(*uintptr)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_self + 8)) + 8*uintptr(_i))), *(*uintptr)(unsafe.Pointer(_p + 8)), *(*uint64)(unsafe.Pointer(_p + 16)))
	Xmemset(tls, *(*uintptr)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_self + 8)) + 8*uintptr(_i)))+uintptr(*(*uint64)(unsafe.Pointer(_p + 16))), int32(0), *(*uint64)(unsafe.Pointer(_p + 24))-*(*uint64)(unsafe.Pointer(_p + 16)))

_3:
	_i++
	_p = *(*uintptr)(unsafe.Pointer(_p))
	goto _2

_4:
_1:
}

type t138__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t138__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type s7__pthread = struct {
	Fself          uintptr // *S__pthread
	Fdtv           uintptr // **void
	Funused1       uintptr // *void
	Funused2       uintptr // *void
	Fsysinfo       uint64
	Fcanary        uint64
	Fcanary2       uint64
	Ftid           int32
	Ferrno_val     int32
	Fdetach_state  int32
	Fcancel        int32
	Fcanceldisable uint8
	Fcancelasync   uint8
	F74            uint8
	Fmap_base      uintptr // *uint8
	Fmap_size      uint64
	Fstack         uintptr // *void
	Fstack_size    uint64
	Fguard_size    uint64
	Fstart_arg     uintptr // *void
	Fstart         uintptr // *func(TLS, uintptr) uintptr
	Fresult        uintptr // *void
	Fcancelbuf     uintptr // *S__ptcb
	Ftsd           uintptr // **void
	Frobust_list   struct {
		Fhead    uintptr
		Foff     int64
		Fpending uintptr
	}
	Ftimer_id      int32
	Flocale        uintptr // Tlocale_t = *S__locale_struct
	Fkilllock      [1]int32
	Fdlerror_buf   uintptr // *int8
	Fstdio_locks   uintptr // *void
	Fcanary_at_end uint64
	Fdtv_copy      uintptr // **void
}

type s1tls_module = struct {
	Fnext   uintptr // *Stls_module
	Fimage  uintptr // *void
	Flen    uint64
	Fsize   uint64
	Falign  uint64
	Foffset uint64
}

type t18size_t = uint64

// x__pthread_self is defined at pthread_arch.h:1:30
func x3__pthread_self(tls TLS) (r uintptr /* *S__pthread */) {
	return uintptr(tls)
	return r
}

type t6uintptr_t = uint64

type s5__ptcb = struct {
	F__f    uintptr // *func(TLS, uintptr)
	F__x    uintptr // *void
	F__next uintptr // *S__ptcb
}

type s34__locale_struct = struct{ Fcat [6]uintptr }

// linking __stack_chk_fail.o

// X__stack_chk_guard Tuintptr_t = uint64, escapes: true, __stack_chk_fail.c:5:11
var X__stack_chk_guard = bss + 840

// X__init_ssp is defined at __stack_chk_fail.c:7:6
func X__init_ssp(tls TLS, _entropy uintptr /* *void */) {
	if _entropy == 0 {
		goto _1
	}

	Xmemcpy(tls, X__stack_chk_guard, _entropy, uint64(8))
	goto _2

_1:
	*(*uint64)(unsafe.Pointer(X__stack_chk_guard)) = uint64(X__stack_chk_guard) * uint64(1103515245)
_2:
	*(*uint64)(unsafe.Pointer(x4__pthread_self(tls) + 40)) = *(*uint64)(unsafe.Pointer(X__stack_chk_guard))
}

// X__stack_chk_fail is defined at __stack_chk_fail.c:15:6
func X__stack_chk_fail(tls TLS) {
	x2a_crash(tls)
}

type t139__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t139__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t7uintptr_t = uint64

// x__pthread_self is defined at pthread_arch.h:1:30
func x4__pthread_self(tls TLS) (r uintptr /* *S__pthread */) {
	return uintptr(tls)
	return r
}

// xa_crash is defined at atomic_arch.h:121:20
func x2a_crash(tls TLS) {
	panic(`hlt`)
}

type t19size_t = uint64

type s8__pthread = struct {
	Fself          uintptr // *S__pthread
	Fdtv           uintptr // **void
	Funused1       uintptr // *void
	Funused2       uintptr // *void
	Fsysinfo       uint64
	Fcanary        uint64
	Fcanary2       uint64
	Ftid           int32
	Ferrno_val     int32
	Fdetach_state  int32
	Fcancel        int32
	Fcanceldisable uint8
	Fcancelasync   uint8
	F74            uint8
	Fmap_base      uintptr // *uint8
	Fmap_size      uint64
	Fstack         uintptr // *void
	Fstack_size    uint64
	Fguard_size    uint64
	Fstart_arg     uintptr // *void
	Fstart         uintptr // *func(TLS, uintptr) uintptr
	Fresult        uintptr // *void
	Fcancelbuf     uintptr // *S__ptcb
	Ftsd           uintptr // **void
	Frobust_list   struct {
		Fhead    uintptr
		Foff     int64
		Fpending uintptr
	}
	Ftimer_id      int32
	Flocale        uintptr // Tlocale_t = *S__locale_struct
	Fkilllock      [1]int32
	Fdlerror_buf   uintptr // *int8
	Fstdio_locks   uintptr // *void
	Fcanary_at_end uint64
	Fdtv_copy      uintptr // **void
}

type s6__ptcb = struct {
	F__f    uintptr // *func(TLS, uintptr)
	F__x    uintptr // *void
	F__next uintptr // *S__ptcb
}

type s35__locale_struct = struct{ Fcat [6]uintptr }

// linking clearenv.o

func postinc520(p *uintptr) uintptr { r := *p; *p += 8; return r }

// Xclearenv is defined at clearenv.c:8:5
func Xclearenv(tls TLS) (r int32) {
	var _e uintptr // **int8

	_e = *(*uintptr)(unsafe.Pointer(X__environ))
	*(*uintptr)(unsafe.Pointer(X__environ)) = null
	if _e == 0 {
		goto _1
	}

_2:
	if *(*uintptr)(unsafe.Pointer(_e)) == 0 {
		goto _3
	}

	X__env_rm_add(tls, *(*uintptr)(unsafe.Pointer(postinc520(&_e))), null)
	goto _2

_3:
_1:
	return int32(0)
}

type t140__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t140__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// xdummy is defined at clearenv.c:5:13
func x1dummy(tls TLS, _old uintptr /* *int8 */, _new uintptr /* *int8 */) {
}

// linking getenv.o

// Xgetenv is defined at getenv.c:8:6
func Xgetenv(tls TLS, _name uintptr /* *int8 */) (r uintptr /* *int8 */) {
	var (
		_l uint64
		_e uintptr // **int8
	)
	_l = uint64(int64(X__strchrnul(tls, _name, int32('=')) - _name))
	if _l == 0 || *(*int8)(unsafe.Pointer(_name + uintptr(_l))) != 0 || *(*uintptr)(unsafe.Pointer(X__environ)) == 0 {
		goto _1
	}

	_e = *(*uintptr)(unsafe.Pointer(X__environ))
_2:
	if *(*uintptr)(unsafe.Pointer(_e)) == 0 {
		goto _4
	}

	if Xstrncmp(tls, _name, *(*uintptr)(unsafe.Pointer(_e)), _l) != 0 || int32(*(*int8)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_e)) + uintptr(_l)))) != int32('=') {
		goto _5
	}

	return (*(*uintptr)(unsafe.Pointer(_e)) + uintptr(_l)) + uintptr(1)

_5:
	_e += 8
	goto _2

_4:
_1:
	return null
}

type t141__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t141__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t20size_t = uint64

// linking putenv.o

func set521(p *uintptr, v uintptr) uintptr { *p = v; return v }

// X__putenv is defined at putenv.c:10:5
func X__putenv(tls TLS, _s uintptr /* *int8 */, _l uint64, _r uintptr /* *int8 */) (r int32) {
	var (
		_i      uint64
		_e      uintptr // **int8
		_tmp    uintptr // *int8
		_newenv uintptr // **int8
	)
	_i = uint64(0)
	if *(*uintptr)(unsafe.Pointer(X__environ)) == 0 {
		goto _1
	}

	_e = *(*uintptr)(unsafe.Pointer(X__environ))
_2:
	if *(*uintptr)(unsafe.Pointer(_e)) == 0 {
		goto _4
	}

	if Xstrncmp(tls, _s, *(*uintptr)(unsafe.Pointer(_e)), _l+uint64(1)) != 0 {
		goto _5
	}

	_tmp = *(*uintptr)(unsafe.Pointer(_e))
	*(*uintptr)(unsafe.Pointer(_e)) = _s
	X__env_rm_add(tls, _tmp, _r)
	return int32(0)

_5:
	_e += 8
	_i++
	goto _2

_4:
_1:
	if *(*uintptr)(unsafe.Pointer(X__environ)) != x522oldenv {
		goto _6
	}

	_newenv = Xrealloc(tls, x522oldenv, uint64(8)*(_i+uint64(2)))
	if _newenv != 0 {
		goto _8
	}

	goto loom

_8:
	goto _7

_6:
	_newenv = Xmalloc(tls, uint64(8)*(_i+uint64(2)))
	if _newenv != 0 {
		goto _9
	}

	goto loom

_9:
	if _i == 0 {
		goto _10
	}

	Xmemcpy(tls, _newenv, *(*uintptr)(unsafe.Pointer(X__environ)), uint64(8)*_i)
_10:
	Xfree(tls, x522oldenv)
_7:
	*(*uintptr)(unsafe.Pointer(_newenv + 8*uintptr(_i))) = _s
	*(*uintptr)(unsafe.Pointer(_newenv + 8*uintptr(_i+uint64(1)))) = null
	*(*uintptr)(unsafe.Pointer(X__environ)) = set521(&x522oldenv, _newenv)
	if _r == 0 {
		goto _11
	}

	X__env_rm_add(tls, null, _r)
_11:
	return int32(0)

	goto loom
loom:
	Xfree(tls, _r)
	return int32(-1)
}

// Xputenv is defined at putenv.c:43:5
func Xputenv(tls TLS, _s uintptr /* *int8 */) (r int32) {
	var _l uint64

	_l = uint64(int64(X__strchrnul(tls, _s, int32('=')) - _s))
	if _l != 0 && *(*int8)(unsafe.Pointer(_s + uintptr(_l))) != 0 {
		goto _1
	}

	return Xunsetenv(tls, _s)

_1:
	return X__putenv(tls, _s, _l, null)
}

type t142__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t142__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// xdummy is defined at putenv.c:7:13
func x2dummy(tls TLS, _old uintptr /* *int8 */, _new uintptr /* *int8 */) {
}

type t21size_t = uint64

// x2oldenv **int8, escapes: false, putenv.c:22:14
var x522oldenv uintptr

// linking setenv.o

func set523(p *uintptr, v uintptr) uintptr { *p = v; return v }

func postinc524(p *uint64) uint64 { r := *p; *p += 1; return r }

// X__env_rm_add is defined at setenv.c:8:6
func X__env_rm_add(tls TLS, _old uintptr /* *int8 */, _new uintptr /* *int8 */) {
	var (
		_i uint64
		_t uintptr // **int8
	)

	_i = uint64(0)
_1:
	if _i >= x525env_alloced_n {
		goto _3
	}

	if *(*uintptr)(unsafe.Pointer(x526env_alloced + 8*uintptr(_i))) != _old {
		goto _4
	}

	*(*uintptr)(unsafe.Pointer(x526env_alloced + 8*uintptr(_i))) = _new
	Xfree(tls, _old)
	return

	goto _5

_4:
	if *(*uintptr)(unsafe.Pointer(x526env_alloced + 8*uintptr(_i))) != 0 || _new == 0 {
		goto _6
	}

	*(*uintptr)(unsafe.Pointer(x526env_alloced + 8*uintptr(_i))) = _new
	_new = null
_6:
_5:
	_i++
	goto _1

_3:
	if _new != 0 {
		goto _7
	}

	return

_7:
	_t = Xrealloc(tls, x526env_alloced, uint64(8)*(x525env_alloced_n+uint64(1)))
	if _t != 0 {
		goto _8
	}

	return

_8:
	*(*uintptr)(unsafe.Pointer(set523(&x526env_alloced, _t) + 8*uintptr(postinc524(&x525env_alloced_n)))) = _new
}

func set527(p *uint64, v uint64) uint64 { *p = v; return v }

// Xsetenv is defined at setenv.c:27:5
func Xsetenv(tls TLS, _var uintptr /* *int8 */, _value uintptr /* *int8 */, _overwrite int32) (r int32) {
	var (
		_s  uintptr // *int8
		_l1 uint64
		_l2 uint64
	)
	if _var != 0 && set527(&_l1, uint64(int64(X__strchrnul(tls, _var, int32('='))-_var))) != 0 && *(*int8)(unsafe.Pointer(_var + uintptr(_l1))) == 0 {
		goto _1
	}

	*(*int32)(unsafe.Pointer(X__errno_location(tls))) = int32(22)
	return int32(-1)

_1:
	if _overwrite != 0 || Xgetenv(tls, _var) == 0 {
		goto _2
	}

	return int32(0)

_2:
	_l2 = Xstrlen(tls, _value)
	_s = Xmalloc(tls, _l1+_l2+uint64(2))
	if _s != 0 {
		goto _3
	}

	return int32(-1)

_3:
	Xmemcpy(tls, _s, _var, _l1)
	*(*int8)(unsafe.Pointer(_s + uintptr(_l1))) = int8('=')
	Xmemcpy(tls, (_s+uintptr(_l1))+uintptr(1), _value, _l2+uint64(1))
	return X__putenv(tls, _s, _l1, _s)
}

type t143__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t143__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// x1env_alloced **int8, escapes: false, setenv.c:10:14
var x526env_alloced uintptr

// x2env_alloced_n Tsize_t = uint64, escapes: false, setenv.c:11:16
var x525env_alloced_n uint64

type t22size_t = uint64

// linking unsetenv.o

// Xunsetenv is defined at unsetenv.c:12:5
func Xunsetenv(tls TLS, _name uintptr /* *int8 */) (r int32) {
	var (
		_l  uint64
		_e  uintptr // **int8
		_eo uintptr // **int8
	)
	_l = uint64(int64(X__strchrnul(tls, _name, int32('=')) - _name))
	if _l != 0 && *(*int8)(unsafe.Pointer(_name + uintptr(_l))) == 0 {
		goto _1
	}

	*(*int32)(unsafe.Pointer(X__errno_location(tls))) = int32(22)
	return int32(-1)

_1:
	if *(*uintptr)(unsafe.Pointer(X__environ)) == 0 {
		goto _2
	}

	_e = *(*uintptr)(unsafe.Pointer(X__environ))
	_eo = _e

_3:
	if *(*uintptr)(unsafe.Pointer(_e)) == 0 {
		goto _5
	}

	X__assert_fail(tls, ts+0 /* "TODO(ccgo)" */, ts+964 /* "src/env/unsetenv..." */, int32(22), x528__func__)
	_e += 8
	goto _3

_5:
	X__assert_fail(tls, ts+0 /* "TODO(ccgo)" */, ts+964 /* "src/env/unsetenv..." */, int32(24), x528__func__)
	X__assert_fail(tls, ts+0 /* "TODO(ccgo)" */, ts+964 /* "src/env/unsetenv..." */, int32(26), x528__func__)
	X__assert_fail(tls, ts+0 /* "TODO(ccgo)" */, ts+964 /* "src/env/unsetenv..." */, int32(28), x528__func__)
	X__assert_fail(tls, ts+0 /* "TODO(ccgo)" */, ts+964 /* "src/env/unsetenv..." */, int32(30), x528__func__)
	X__assert_fail(tls, ts+0 /* "TODO(ccgo)" */, ts+964 /* "src/env/unsetenv..." */, int32(32), x528__func__)
	if _eo == _e {
		goto _6
	}

	*(*uintptr)(unsafe.Pointer(_eo)) = null
_6:
_2:
	return int32(0)
}

type t144__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t144__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// xdummy is defined at unsetenv.c:9:13
func x3dummy(tls TLS, _old uintptr /* *int8 */, _new uintptr /* *int8 */) {
}

// x2__func__ [9]int8, escapes: true, unsetenv.c:13:1
var x528__func__ = ds + 25720

type t23size_t = uint64

// linking __errno_location.o

// X__errno_location is defined at __errno_location.c:4:5
func X__errno_location(tls TLS) (r uintptr /* *int32 */) {
	return x5__pthread_self(tls) + 60
}

type t145__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t145__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// x__pthread_self is defined at pthread_arch.h:1:30
func x5__pthread_self(tls TLS) (r uintptr /* *S__pthread */) {
	return uintptr(tls)
	return r
}

type s9__pthread = struct {
	Fself          uintptr // *S__pthread
	Fdtv           uintptr // **void
	Funused1       uintptr // *void
	Funused2       uintptr // *void
	Fsysinfo       uint64
	Fcanary        uint64
	Fcanary2       uint64
	Ftid           int32
	Ferrno_val     int32
	Fdetach_state  int32
	Fcancel        int32
	Fcanceldisable uint8
	Fcancelasync   uint8
	F74            uint8
	Fmap_base      uintptr // *uint8
	Fmap_size      uint64
	Fstack         uintptr // *void
	Fstack_size    uint64
	Fguard_size    uint64
	Fstart_arg     uintptr // *void
	Fstart         uintptr // *func(TLS, uintptr) uintptr
	Fresult        uintptr // *void
	Fcancelbuf     uintptr // *S__ptcb
	Ftsd           uintptr // **void
	Frobust_list   struct {
		Fhead    uintptr
		Foff     int64
		Fpending uintptr
	}
	Ftimer_id      int32
	Flocale        uintptr // Tlocale_t = *S__locale_struct
	Fkilllock      [1]int32
	Fdlerror_buf   uintptr // *int8
	Fstdio_locks   uintptr // *void
	Fcanary_at_end uint64
	Fdtv_copy      uintptr // **void
}

type t8uintptr_t = uint64

type t24size_t = uint64

type s7__ptcb = struct {
	F__f    uintptr // *func(TLS, uintptr)
	F__x    uintptr // *void
	F__next uintptr // *S__ptcb
}

type s36__locale_struct = struct{ Fcat [6]uintptr }

// linking strerror.o

// X__strerror_l is defined at strerror.c:17:6
func X__strerror_l(tls TLS, _e int32, _loc uintptr /* Tlocale_t = *S__locale_struct */) (r uintptr /* *int8 */) {
	var (
		_s uintptr // *int8
		_i int32
	)

	goto _1

	if _e != int32(109) {
		goto _2
	}

	_e = int32(-1)
	goto _3

_2:
	if _e != int32(122) {
		goto _4
	}

	_e = int32(109)
_4:
_3:
_1:
	_i = int32(0)
_5:
	if *(*uint8)(unsafe.Pointer(xerrid + uintptr(_i))) == 0 || int32(*(*uint8)(unsafe.Pointer(xerrid + uintptr(_i)))) == _e {
		goto _7
	}

	_i++
	goto _5

_7:
	_s = xerrmsg
_8:
	if _i == 0 {
		goto _10
	}

_11:
	if *(*int8)(unsafe.Pointer(_s)) == 0 {
		goto _13
	}

	_s++
	goto _11

_13:
	_s++
	_i--
	goto _8

_10:
	return X__lctrans(tls, _s, *(*uintptr)(unsafe.Pointer(_loc + 40)))
}

// Xstrerror is defined at strerror.c:32:6
func Xstrerror(tls TLS, _e int32) (r uintptr /* *int8 */) {
	return X__strerror_l(tls, _e, *(*uintptr)(unsafe.Pointer(x6__pthread_self(tls) + 192)))
}

type t146__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t146__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type s37__locale_struct = struct{ Fcat [6]uintptr }

// xerrid [88]uint8, escapes: true, strerror.c:7:28
var xerrid = ds + 25736

// xerrmsg [1804]int8, escapes: true, strerror.c:13:19
var xerrmsg = ds + 25824

// x__pthread_self is defined at pthread_arch.h:1:30
func x6__pthread_self(tls TLS) (r uintptr /* *S__pthread */) {
	return uintptr(tls)
	return r
}

type s10__pthread = struct {
	Fself          uintptr // *S__pthread
	Fdtv           uintptr // **void
	Funused1       uintptr // *void
	Funused2       uintptr // *void
	Fsysinfo       uint64
	Fcanary        uint64
	Fcanary2       uint64
	Ftid           int32
	Ferrno_val     int32
	Fdetach_state  int32
	Fcancel        int32
	Fcanceldisable uint8
	Fcancelasync   uint8
	F74            uint8
	Fmap_base      uintptr // *uint8
	Fmap_size      uint64
	Fstack         uintptr // *void
	Fstack_size    uint64
	Fguard_size    uint64
	Fstart_arg     uintptr // *void
	Fstart         uintptr // *func(TLS, uintptr) uintptr
	Fresult        uintptr // *void
	Fcancelbuf     uintptr // *S__ptcb
	Ftsd           uintptr // **void
	Frobust_list   struct {
		Fhead    uintptr
		Foff     int64
		Fpending uintptr
	}
	Ftimer_id      int32
	Flocale        uintptr // Tlocale_t = *S__locale_struct
	Fkilllock      [1]int32
	Fdlerror_buf   uintptr // *int8
	Fstdio_locks   uintptr // *void
	Fcanary_at_end uint64
	Fdtv_copy      uintptr // **void
}

type t9uintptr_t = uint64

type t25size_t = uint64

type s8__ptcb = struct {
	F__f    uintptr // *func(TLS, uintptr)
	F__x    uintptr // *void
	F__next uintptr // *S__ptcb
}

// linking _Exit.o

// X_Exit is defined at _Exit.c:4:16
func X_Exit(tls TLS, _ec int32) {
	os.Exit(int(_ec))
}

type t147__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t147__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// linking abort.o

// Xabort is defined at abort.c:7:16
func Xabort(tls TLS) {
	println(string(debug.Stack()))
	X_Exit(tls, int32(127))
}

type t148__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t148__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// linking assert.o

// X__assert_fail is defined at assert.c:4:16
func X__assert_fail(tls TLS, _expr uintptr /* *int8 */, _file uintptr /* *int8 */, _line int32, _func uintptr /* *int8 */) {
	Xfprintf(tls, *(*uintptr)(unsafe.Pointer(Xstderr)), ts+984 /* "Assertion failed..." */, _expr, _file, _func, _line)
	Xfflush(tls, null)
	Xabort(tls)
}

type t149__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t149__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// linking at_quick_exit.o

func preinc529(p *int32) int32 { *p += -1; return *p }

func fn530(p uintptr) func(TLS) { return *(*func(TLS))(unsafe.Pointer(&p)) }

// X__funcs_on_quick_exit is defined at at_quick_exit.c:10:6
func X__funcs_on_quick_exit(tls TLS) {
	var _func uintptr // *func(TLS)

	X__lock(tls, xlock)
_1:
	if xcount <= int32(0) {
		goto _2
	}

	_func = *(*uintptr)(unsafe.Pointer(xfuncs + 8*uintptr(preinc529(&xcount))))
	X__unlock(tls, xlock)
	fn530(_func)(tls)
	X__lock(tls, xlock)
	goto _1

_2:
}

func postinc531(p *int32) int32 { r := *p; *p += 1; return r }

// Xat_quick_exit is defined at at_quick_exit.c:22:5
func Xat_quick_exit(tls TLS, _func uintptr /* *func(TLS) */) (r int32) {
	var _r int32

	_r = int32(0)
	X__lock(tls, xlock)
	if xcount != int32(32) {
		goto _1
	}

	_r = int32(-1)
	goto _2

_1:
	*(*uintptr)(unsafe.Pointer(xfuncs + 8*uintptr(postinc531(&xcount)))) = _func
_2:
	X__unlock(tls, xlock)
	return _r
}

type t150__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t150__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// xlock [1]int32, escapes: true, at_quick_exit.c:8:21
var xlock = bss + 848

// xcount int32, escapes: false, at_quick_exit.c:7:12
var xcount int32

// xfuncs [32]*func(TLS), escapes: true, at_quick_exit.c:6:13
var xfuncs = bss + 856

// linking atexit.o

func postinc532(p *int32) int32 { r := *p; *p += -1; return r }

func fn533(p uintptr) func(TLS, uintptr) { return *(*func(TLS, uintptr))(unsafe.Pointer(&p)) }

// X__funcs_on_exit is defined at atexit.c:18:6
func X__funcs_on_exit(tls TLS) {
	var (
		_func uintptr // *func(TLS, uintptr)
		_arg  uintptr // *void
	)
	X__lock(tls, x1lock)

_1:
	if xhead == 0 {
		goto _3
	}

_4:
	if postinc532(&xslot) <= int32(0) {
		goto _5
	}

	_func = *(*uintptr)(unsafe.Pointer((xhead + 8) + 8*uintptr(xslot)))
	_arg = *(*uintptr)(unsafe.Pointer((xhead + 264) + 8*uintptr(xslot)))
	X__unlock(tls, x1lock)
	fn533(_func)(tls, _arg)
	X__lock(tls, x1lock)
	goto _4

_5:
	xhead = *(*uintptr)(unsafe.Pointer(xhead))
	xslot = int32(32)
	goto _1

_3:
}

// X__cxa_finalize is defined at atexit.c:31:6
func X__cxa_finalize(tls TLS, _dso uintptr /* *void */) {
}

// X__cxa_atexit is defined at atexit.c:35:5
func X__cxa_atexit(tls TLS, _func uintptr /* *func(TLS, uintptr) */, _arg uintptr /* *void */, _dso uintptr /* *void */) (r int32) {
	var _new_fl uintptr // *Sfl

	X__lock(tls, x1lock)
	if xhead != 0 {
		goto _1
	}

	xhead = xbuiltin
_1:
	if xslot != int32(32) {
		goto _2
	}

	_new_fl = Xcalloc(tls, uint64(520), uint64(1))
	if _new_fl != 0 {
		goto _3
	}

	X__unlock(tls, x1lock)
	return int32(-1)

_3:
	*(*uintptr)(unsafe.Pointer(_new_fl)) = xhead
	xhead = _new_fl
	xslot = int32(0)
_2:
	*(*uintptr)(unsafe.Pointer((xhead + 8) + 8*uintptr(xslot))) = _func
	*(*uintptr)(unsafe.Pointer((xhead + 264) + 8*uintptr(xslot))) = _arg
	xslot++
	X__unlock(tls, x1lock)
	return int32(0)
}

func fp534(f func(TLS, uintptr)) uintptr { return *(*uintptr)(unsafe.Pointer(&f)) }

// Xatexit is defined at atexit.c:68:5
func Xatexit(tls TLS, _func uintptr /* *func(TLS) */) (r int32) {
	return X__cxa_atexit(tls, fp534(xcall), uintptr(uint64(_func)), null)
}

type t151__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t151__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// xlock [1]int32, escapes: true, atexit.c:16:21
var x1lock = bss + 1112

// xhead *struct{Fnext *Sfl;Ff [32]*func(TLS, uintptr);Fa [32]uintptr;}, escapes: false, atexit.c:13:12
var xhead uintptr

// xslot int32, escapes: false, atexit.c:15:12
var xslot int32

type Sfl = struct {
	Fnext uintptr // *Sfl
	Ff    [32]uintptr
	Fa    [32]uintptr
}

// xbuiltin struct{Fnext *Sfl;Ff [32]*func(TLS, uintptr);Fa [32]uintptr;}, escapes: true, atexit.c:13:3
var xbuiltin = bss + 1120

func fn535(p uintptr) func(TLS) { return *(*func(TLS))(unsafe.Pointer(&p)) }

// xcall is defined at atexit.c:63:13
func xcall(tls TLS, _p uintptr /* *void */) {
	fn535(uintptr(uint64(_p)))(tls)
}

type t10uintptr_t = uint64

type t26size_t = uint64

// linking exit.o

// Xexit is defined at exit.c:29:16
func Xexit(tls TLS, _code int32) {
	X__funcs_on_exit(tls)
	X__libc_exit_fini(tls)
	X__stdio_exit(tls)
	X_Exit(tls, _code)
}

type t152__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t152__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// xdummy is defined at exit.c:6:13
func x4dummy(tls TLS) {
}

func fn536(p uintptr) func(TLS) { return *(*func(TLS))(unsafe.Pointer(&p)) }

// xlibc_exit_fini is defined at exit.c:19:13
func xlibc_exit_fini(tls TLS) {
	var _a uint64

	_a = uint64(X__fini_array_end)

_1:
	if _a <= uint64(X__fini_array_start) {
		goto _3
	}

	fn536(*(*uintptr)(unsafe.Pointer(uintptr(_a - uint64(8)))))(tls)
	_a = _a - uint64(8)
	goto _1

_3:
	X_fini(tls)
}

type t11uintptr_t = uint64

// linking quick_exit.o

// Xquick_exit is defined at quick_exit.c:7:16
func Xquick_exit(tls TLS, _code int32) {
	X__funcs_on_quick_exit(tls)
	X_Exit(tls, _code)
}

type t153__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t153__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// xdummy is defined at quick_exit.c:4:13
func x5dummy(tls TLS) {
}

// linking creat.o

// Xcreat is defined at creat.c:4:5
func Xcreat(tls TLS, _filename uintptr /* *int8 */, _mode uint32) (r int32) {
	return Xopen(tls, _filename, int32(577), _mode)
}

type t154__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t154__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t1mode_t = uint32

// linking fcntl.o

// Xfcntl is defined at fcntl.c:9:5
func Xfcntl(tls TLS, _fd int32, _cmd int32, ap ...interface{}) (r int32) {
	esc := MustMalloc(8)
	var (
		_arg  uint64
		_ap   uintptr // Tva_list = T__builtin_va_list = ...truct{Fsize int32;Fdata int8;};}
		_ex   = esc   // *Sf_owner_ex
		_ret  int32
		_1ret int32
	)
	defer Free(esc)
	_ap = X__builtin_va_start(tls, ap)
	_arg = VAuint64(_ap)
	X__builtin_free(tls, _ap)
	if _cmd != int32(4) {
		goto _1
	}

	_arg = _arg | uint64(0)
_1:
	if _cmd != int32(7) {
		goto _2
	}

	return int32(X__syscall_ret(tls, uint64(X__syscall_cp(tls, int64(72), int64(_fd), int64(_cmd), int64(uintptr(_arg)), int64(0), int64(0), int64(0)))))

_2:
	if _cmd != int32(9) {
		goto _3
	}

	_ret = int32(x5__syscall3(tls, int64(72), int64(_fd), int64(16), int64(_ex)))
	if _ret != int32(-22) {
		goto _4
	}

	return int32(x5__syscall3(tls, int64(72), int64(_fd), int64(_cmd), int64(uintptr(_arg))))

_4:
	if _ret == 0 {
		goto _5
	}

	return int32(X__syscall_ret(tls, uint64(_ret)))

_5:
	if *(*int32)(unsafe.Pointer(_ex)) == int32(2) {
		return -*(*int32)(unsafe.Pointer(_ex + 4))
	}

	return *(*int32)(unsafe.Pointer(_ex + 4))

_3:
	if _cmd != int32(1030) {
		goto _6
	}

	_1ret = int32(x5__syscall3(tls, int64(72), int64(_fd), int64(1030), int64(_arg)))
	if _1ret == int32(-22) {
		goto _7
	}

	if _1ret < int32(0) {
		goto _8
	}

	x5__syscall3(tls, int64(72), int64(_1ret), int64(2), int64(1))
_8:
	return int32(X__syscall_ret(tls, uint64(_1ret)))

_7:
	_1ret = int32(x5__syscall3(tls, int64(72), int64(_fd), int64(1030), int64(0)))
	if _1ret == int32(-22) {
		goto _9
	}

	if _1ret < int32(0) {
		goto _10
	}

	x1__syscall1(tls, int64(3), int64(_1ret))
_10:
	return int32(X__syscall_ret(tls, uint64(18446744073709551594)))

_9:
	_1ret = int32(x5__syscall3(tls, int64(72), int64(_fd), int64(0), int64(_arg)))
	if _1ret < int32(0) {
		goto _11
	}

	x5__syscall3(tls, int64(72), int64(_1ret), int64(2), int64(1))
_11:
	return int32(X__syscall_ret(tls, uint64(_1ret)))

_6:
	switch _cmd {
	case int32(6):
		goto _13
	case int32(5):
		goto _14
	case int32(16):
		goto _15
	case int32(15):
		goto _16
	default:
		goto _17
	}
_13:
_14:
_15:
_16:
	return int32(X__syscall_ret(tls, uint64(x5__syscall3(tls, int64(72), int64(_fd), int64(_cmd), int64(uintptr(_arg))))))

_17:
	return int32(X__syscall_ret(tls, uint64(x5__syscall3(tls, int64(72), int64(_fd), int64(_cmd), int64(_arg)))))
	return r
}

type t155__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t155__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type Sf_owner_ex = struct {
	Ftype int32
	Fpid  int32
}

// x__syscall3 is defined at syscall_arch.h:33:22
func x5__syscall3(tls TLS, _n int64, _a1 int64, _a2 int64, _a3 int64) (r int64) {
	return X__syscall(tls, _n, _a1, _a2, _a3, int64(0), int64(0), int64(0))
}

type t1pid_t = int32

// x__syscall1 is defined at syscall_arch.h:16:22
func x1__syscall1(tls TLS, _n int64, _a1 int64) (r int64) {
	return X__syscall(tls, _n, _a1, int64(0), int64(0), int64(0), int64(0), int64(0))
}

type t1syscall_arg_t = int64

// linking open.o

// Xopen is defined at open.c:7:5
func Xopen(tls TLS, _filename uintptr /* *int8 */, _flags int32, ap ...interface{}) (r int32) {
	var (
		_mode uint32
		_ap   uintptr // Tva_list = T__builtin_va_list = ...truct{Fsize int32;Fdata int8;};}
		_fd   int32
	)
	_mode = uint32(0)
	if _flags&int32(0100) == 0 && _flags&int32(020200000) != int32(020200000) {
		goto _1
	}

	_ap = X__builtin_va_start(tls, ap)
	_mode = VAuint32(_ap)
	X__builtin_free(tls, _ap)
_1:
	_fd = int32(X__syscall_cp(tls, int64(2), int64(_filename), int64(_flags|int32(0)), int64(_mode), int64(0), int64(0), int64(0)))
	if _fd < int32(0) || _flags&int32(02000000) == 0 {
		goto _2
	}

	x6__syscall3(tls, int64(72), int64(_fd), int64(2), int64(1))
_2:
	return int32(X__syscall_ret(tls, uint64(_fd)))
}

type t156__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t156__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t2mode_t = uint32

// x__syscall3 is defined at syscall_arch.h:33:22
func x6__syscall3(tls TLS, _n int64, _a1 int64, _a2 int64, _a3 int64) (r int64) {
	return X__syscall(tls, _n, _a1, _a2, _a3, int64(0), int64(0), int64(0))
}

type t2syscall_arg_t = int64

// linking openat.o

// Xopenat is defined at openat.c:7:5
func Xopenat(tls TLS, _fd int32, _filename uintptr /* *int8 */, _flags int32, ap ...interface{}) (r int32) {
	var (
		_mode uint32
		_     = _mode
		_ap   uintptr // Tva_list = T__builtin_va_list = ...truct{Fsize int32;Fdata int8;};}
	)
	_mode = uint32(0)
	if _flags&int32(0100) == 0 && _flags&int32(020200000) != int32(020200000) {
		goto _1
	}

	_ap = X__builtin_va_start(tls, ap)
	_mode = VAuint32(_ap)
	X__builtin_free(tls, _ap)
_1:
	X__assert_fail(tls, ts+0 /* "TODO(ccgo)" */, ts+1020 /* "src/fcntl/openat..." */, int32(18), x537__func__)
	return r
}

type t157__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t157__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// x1__func__ [7]int8, escapes: true, openat.c:8:1
var x537__func__ = ds + 27632

type t3mode_t = uint32

// linking posix_fadvise.o

// Xposix_fadvise is defined at posix_fadvise.c:5:5
func Xposix_fadvise(tls TLS, _fd int32, _base int64, _len int64, _advice int32) (r int32) {
	return int32(-x__syscall4(tls, int64(221), int64(_fd), _base, _len, int64(_advice)))
}

type t158__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t158__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t16off_t = int64

// x__syscall4 is defined at syscall_arch.h:42:22
func x__syscall4(tls TLS, _n int64, _a1 int64, _a2 int64, _a3 int64, _a4 int64) (r int64) {
	return X__syscall(tls, _n, _a1, _a2, _a3, _a4, int64(0), int64(0))
}

// linking posix_fallocate.o

// Xposix_fallocate is defined at posix_fallocate.c:5:5
func Xposix_fallocate(tls TLS, _fd int32, _base int64, _len int64) (r int32) {
	return int32(-x1__syscall4(tls, int64(285), int64(_fd), int64(0), _base, _len))
}

type t159__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t159__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t17off_t = int64

// x__syscall4 is defined at syscall_arch.h:42:22
func x1__syscall4(tls TLS, _n int64, _a1 int64, _a2 int64, _a3 int64, _a4 int64) (r int64) {
	return X__syscall(tls, _n, _a1, _a2, _a3, _a4, int64(0), int64(0))
}

// linking __flt_rounds.o

// X__flt_rounds is defined at __flt_rounds.c:4:5
func X__flt_rounds(tls TLS) (r int32) {
	switch Xfegetround(tls) {
	case int32(0xc00):
		goto _2
	case int32(0):
		goto _3
	case int32(0x800):
		goto _4
	case int32(0x400):
		goto _5
	}
	goto _1

_2:
	return int32(0)

_3:
	return int32(1)

_4:
	return int32(2)

_5:
	return int32(3)

_1:
	return int32(-1)
}

type t160__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t160__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// linking fegetexceptflag.o

// Xfegetexceptflag is defined at fegetexceptflag.c:3:5
func Xfegetexceptflag(tls TLS, _fp uintptr /* *Tfexcept_t = uint16 */, _mask int32) (r int32) {
	*(*uint16)(unsafe.Pointer(_fp)) = uint16(Xfetestexcept(tls, _mask))
	return int32(0)
}

type t161__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t161__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type Tfexcept_t = uint16

// linking feholdexcept.o

// Xfeholdexcept is defined at feholdexcept.c:3:5
func Xfeholdexcept(tls TLS, _envp uintptr /* *Tfenv_t = struct{F__control_wor...unused5 uint16;F__mxcsr uint32;} */) (r int32) {
	Xfegetenv(tls, _envp)
	Xfeclearexcept(tls, int32(63))
	return int32(0)
}

type t162__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t162__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// linking fenv.o

// Xfeclearexcept is defined at fenv.c:7:5
func Xfeclearexcept(tls TLS, _mask int32) (r int32) {
	return int32(0)
}

// Xferaiseexcept is defined at fenv.c:12:5
func Xferaiseexcept(tls TLS, _mask int32) (r int32) {
	return int32(0)
}

// Xfetestexcept is defined at fenv.c:17:5
func Xfetestexcept(tls TLS, _mask int32) (r int32) {
	return int32(0)
}

// Xfegetround is defined at fenv.c:22:5
func Xfegetround(tls TLS) (r int32) {
	return int32(0)
}

// X__fesetround is defined at fenv.c:27:5
func X__fesetround(tls TLS, _r int32) (r int32) {
	return int32(0)
}

// Xfegetenv is defined at fenv.c:32:5
func Xfegetenv(tls TLS, _envp uintptr /* *Tfenv_t = struct{F__control_wor...unused5 uint16;F__mxcsr uint32;} */) (r int32) {
	return int32(0)
}

// Xfesetenv is defined at fenv.c:37:5
func Xfesetenv(tls TLS, _envp uintptr /* *Tfenv_t = struct{F__control_wor...unused5 uint16;F__mxcsr uint32;} */) (r int32) {
	return int32(0)
}

type t163__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t163__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// linking fesetexceptflag.o

// Xfesetexceptflag is defined at fesetexceptflag.c:3:5
func Xfesetexceptflag(tls TLS, _fp uintptr /* *Tfexcept_t = uint16 */, _mask int32) (r int32) {
	Xfeclearexcept(tls, ^int32(*(*uint16)(unsafe.Pointer(_fp)))&_mask)
	Xferaiseexcept(tls, int32(*(*uint16)(unsafe.Pointer(_fp)))&_mask)
	return int32(0)
}

type t164__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t164__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t1fexcept_t = uint16

// linking fesetround.o

// Xfesetround is defined at fesetround.c:7:5
func Xfesetround(tls TLS, _r int32) (r int32) {
	if (_r & int32(-3073)) == 0 {
		goto _1
	}

	return int32(-1)

_1:
	return X__fesetround(tls, _r)
}

type t165__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t165__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// linking feupdateenv.o

// Xfeupdateenv is defined at feupdateenv.c:3:5
func Xfeupdateenv(tls TLS, _envp uintptr /* *Tfenv_t = struct{F__control_wor...unused5 uint16;F__mxcsr uint32;} */) (r int32) {
	var _ex int32

	_ex = Xfetestexcept(tls, int32(63))
	Xfesetenv(tls, _envp)
	Xferaiseexcept(tls, _ex)
	return int32(0)
}

type t166__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t166__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// linking floatscan.o

func set538(p *int32, v int32) int32 { *p = v; return v }

func postinc539(p *uintptr) uintptr { r := *p; *p += 1; return r }

func postinc540(p *uint64) uint64 { r := *p; *p += 18446744073709551615; return r }

// X__floatscan is defined at floatscan.c:429:13
func X__floatscan(tls TLS, _f uintptr /* *TFILE = S_IO_FILE */, _prec int32, _pok int32) (r float64) {
	var (
		_sign int32
		_i    uint64
		_bits int32
		_emin int32
		_c    int32
	)
	_sign = int32(1)
	switch _prec {
	case int32(0):
		goto _2
	case int32(1):
		goto _3
	case int32(2):
		goto _4
	default:
		goto _5
	}
_2:
	_bits = int32(24)
	_emin = int32(-125) - _bits
	goto _1

_3:
	_bits = int32(53)
	_emin = int32(-1021) - _bits
	goto _1

_4:
	_bits = int32(53)
	_emin = int32(-1021) - _bits
	goto _1

_5:
	return float64(0)

_1:
_6:
	if x__isspace(tls, set538(&_c, func() int32 {
		if *(*uintptr)(unsafe.Pointer(_f + 8)) < *(*uintptr)(unsafe.Pointer(_f + 184)) {
			return int32(*(*uint8)(unsafe.Pointer(postinc539((*uintptr)(unsafe.Pointer(_f + 8))))))
		}
		return X__shgetc(tls, _f)
	}())) == 0 {
		goto _7
	}

	goto _6

_7:
	if _c != int32('+') && _c != int32('-') {
		goto _8
	}

	_sign = _sign - int32(2)*bool2int(_c == int32('-'))
	_c = func() int32 {
		if *(*uintptr)(unsafe.Pointer(_f + 8)) < *(*uintptr)(unsafe.Pointer(_f + 184)) {
			return int32(*(*uint8)(unsafe.Pointer(postinc539((*uintptr)(unsafe.Pointer(_f + 8))))))
		}
		return X__shgetc(tls, _f)
	}()
_8:
	_i = uint64(0)
_9:
	if _i >= uint64(8) || _c|int32(32) != int32(*(*int8)(unsafe.Pointer(ts + 1040 /* "infinity" */ + uintptr(_i)))) {
		goto _11
	}

	if _i >= uint64(7) {
		goto _12
	}

	_c = func() int32 {
		if *(*uintptr)(unsafe.Pointer(_f + 8)) < *(*uintptr)(unsafe.Pointer(_f + 184)) {
			return int32(*(*uint8)(unsafe.Pointer(postinc539((*uintptr)(unsafe.Pointer(_f + 8))))))
		}
		return X__shgetc(tls, _f)
	}()
_12:
	_i++
	goto _9

_11:
	if _i != uint64(3) && _i != uint64(8) && (_i <= uint64(3) || _pok == 0) {
		goto _13
	}

	if _i == uint64(8) {
		goto _14
	}

	if *(*uintptr)(unsafe.Pointer(_f + 184)) != 0 {
		*(*uintptr)(unsafe.Pointer(_f + 8))--
	} else {
	}
	if _pok == 0 {
		goto _15
	}

_16:
	if _i <= uint64(3) {
		goto _18
	}

	if *(*uintptr)(unsafe.Pointer(_f + 184)) != 0 {
		*(*uintptr)(unsafe.Pointer(_f + 8))--
	} else {
	}
	_i--
	goto _16

_18:
_15:
_14:
	return float64(float32(_sign) * float32(math.Inf(1)))

_13:
	if _i != 0 {
		goto _19
	}

	_i = uint64(0)
_20:
	if _i >= uint64(3) || _c|int32(32) != int32(*(*int8)(unsafe.Pointer(ts + 1052 /* "nan" */ + uintptr(_i)))) {
		goto _22
	}

	if _i >= uint64(2) {
		goto _23
	}

	_c = func() int32 {
		if *(*uintptr)(unsafe.Pointer(_f + 8)) < *(*uintptr)(unsafe.Pointer(_f + 184)) {
			return int32(*(*uint8)(unsafe.Pointer(postinc539((*uintptr)(unsafe.Pointer(_f + 8))))))
		}
		return X__shgetc(tls, _f)
	}()
_23:
	_i++
	goto _20

_22:
_19:
	if _i != uint64(3) {
		goto _24
	}

	if func() int32 {
		if *(*uintptr)(unsafe.Pointer(_f + 8)) < *(*uintptr)(unsafe.Pointer(_f + 184)) {
			return int32(*(*uint8)(unsafe.Pointer(postinc539((*uintptr)(unsafe.Pointer(_f + 8))))))
		}
		return X__shgetc(tls, _f)
	}() == int32('(') {
		goto _25
	}

	if *(*uintptr)(unsafe.Pointer(_f + 184)) != 0 {
		*(*uintptr)(unsafe.Pointer(_f + 8))--
	} else {
	}
	return math.NaN()

_25:
	_i = uint64(1)
_26:
	_c = func() int32 {
		if *(*uintptr)(unsafe.Pointer(_f + 8)) < *(*uintptr)(unsafe.Pointer(_f + 184)) {
			return int32(*(*uint8)(unsafe.Pointer(postinc539((*uintptr)(unsafe.Pointer(_f + 8))))))
		}
		return X__shgetc(tls, _f)
	}()
	if uint32(_c-int32('0')) >= uint32(10) && uint32(_c-int32('A')) >= uint32(26) && uint32(_c-int32('a')) >= uint32(26) && _c != int32('_') {
		goto _29
	}

	goto _27

_29:
	if _c != int32(')') {
		goto _30
	}

	return math.NaN()

_30:
	if *(*uintptr)(unsafe.Pointer(_f + 184)) != 0 {
		*(*uintptr)(unsafe.Pointer(_f + 8))--
	} else {
	}
	if _pok != 0 {
		goto _31
	}

	*(*int32)(unsafe.Pointer(X__errno_location(tls))) = int32(22)
	X__shlim(tls, _f, int64(0))
	return float64(0)

_31:
_32:
	if postinc540(&_i) == 0 {
		goto _33
	}

	if *(*uintptr)(unsafe.Pointer(_f + 184)) != 0 {
		*(*uintptr)(unsafe.Pointer(_f + 8))--
	} else {
	}
	goto _32

_33:
	return math.NaN()

_27:
	_i++
	goto _26

	return math.NaN()

_24:
	if _i == 0 {
		goto _34
	}

	if *(*uintptr)(unsafe.Pointer(_f + 184)) != 0 {
		*(*uintptr)(unsafe.Pointer(_f + 8))--
	} else {
	}
	*(*int32)(unsafe.Pointer(X__errno_location(tls))) = int32(22)
	X__shlim(tls, _f, int64(0))
	return float64(0)

_34:
	if _c != int32('0') {
		goto _35
	}

	_c = func() int32 {
		if *(*uintptr)(unsafe.Pointer(_f + 8)) < *(*uintptr)(unsafe.Pointer(_f + 184)) {
			return int32(*(*uint8)(unsafe.Pointer(postinc539((*uintptr)(unsafe.Pointer(_f + 8))))))
		}
		return X__shgetc(tls, _f)
	}()
	if _c|int32(32) != int32('x') {
		goto _36
	}

	return xhexfloat(tls, _f, _bits, _emin, _sign, _pok)

_36:
	if *(*uintptr)(unsafe.Pointer(_f + 184)) != 0 {
		*(*uintptr)(unsafe.Pointer(_f + 8))--
	} else {
	}
	_c = int32('0')
_35:
	return xdecfloat(tls, _f, _c, _bits, _emin, _sign, _pok)
}

type t167__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t167__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type S_IO_FILE = struct {
	Fflags        uint32
	Frpos         uintptr // *uint8
	Frend         uintptr // *uint8
	Fclose        uintptr // *func(TLS, uintptr) int32
	Fwend         uintptr // *uint8
	Fwpos         uintptr // *uint8
	Fmustbezero_1 uintptr // *uint8
	Fwbase        uintptr // *uint8
	Fread         uintptr // *func(TLS, uintptr, uintptr, uint64) uint64
	Fwrite        uintptr // *func(TLS, uintptr, uintptr, uint64) uint64
	Fseek         uintptr // *func(TLS, uintptr, int64, int32) int64
	Fbuf          uintptr // *uint8
	Fbuf_size     uint64
	Fprev         uintptr // *TFILE = S_IO_FILE
	Fnext         uintptr // *TFILE = S_IO_FILE
	Ffd           int32
	Fpipe_pid     int32
	Flockcount    int64
	Fdummy3       int16
	Fmode         int8
	Flbf          int8
	Flock         int32
	Fwaiters      int32
	Fcookie       uintptr // *void
	Foff          int64
	Fgetln_buf    uintptr // *int8
	Fmustbezero_2 uintptr // *void
	Fshend        uintptr // *uint8
	Fshlim        int64
	Fshcnt        int64
	Fprev_locked  uintptr // *TFILE = S_IO_FILE
	Fnext_locked  uintptr // *TFILE = S_IO_FILE
	Flocale       uintptr // *S__locale_struct
}

type t27size_t = uint64

// x__isspace is defined at ctype.h:26:21
func x__isspace(tls TLS, __c int32) (r int32) {
	return bool2int((__c == int32(' ')) || (uint32(__c)-uint32('\t') < uint32(5)))
}

func div541(p *float64, v int32) (r float64) { r = *p / float64(v); *p = r; return r }

// xhexfloat is defined at floatscan.c:317:20
func xhexfloat(tls TLS, _f uintptr /* *TFILE = S_IO_FILE */, _bits int32, _emin int32, _sign int32, _pok int32) (r float64) {
	var (
		_x       uint32
		_y       float64
		_scale   float64
		_bias    float64
		_gottail int32
		_gotrad  int32
		_gotdig  int32
		_rp      int64
		_dc      int64
		_e2      int64
		_d       int32
		_c       int32
	)
	_x = uint32(0)
	_y = float64(0)
	_scale = float64(1)
	_bias = float64(0)
	_gottail = int32(0)
	_gotrad = int32(0)
	_gotdig = int32(0)
	_rp = int64(0)
	_dc = int64(0)
	_e2 = int64(0)
	_c = func() int32 {
		if *(*uintptr)(unsafe.Pointer(_f + 8)) < *(*uintptr)(unsafe.Pointer(_f + 184)) {
			return int32(*(*uint8)(unsafe.Pointer(postinc539((*uintptr)(unsafe.Pointer(_f + 8))))))
		}
		return X__shgetc(tls, _f)
	}()

_1:
	if _c != int32('0') {
		goto _3
	}

	_gotdig = int32(1)
	_c = func() int32 {
		if *(*uintptr)(unsafe.Pointer(_f + 8)) < *(*uintptr)(unsafe.Pointer(_f + 184)) {
			return int32(*(*uint8)(unsafe.Pointer(postinc539((*uintptr)(unsafe.Pointer(_f + 8))))))
		}
		return X__shgetc(tls, _f)
	}()
	goto _1

_3:
	if _c != int32('.') {
		goto _4
	}

	_gotrad = int32(1)
	_c = func() int32 {
		if *(*uintptr)(unsafe.Pointer(_f + 8)) < *(*uintptr)(unsafe.Pointer(_f + 184)) {
			return int32(*(*uint8)(unsafe.Pointer(postinc539((*uintptr)(unsafe.Pointer(_f + 8))))))
		}
		return X__shgetc(tls, _f)
	}()
	_rp = int64(0)
_5:
	if _c != int32('0') {
		goto _7
	}

	_gotdig = int32(1)
	_c = func() int32 {
		if *(*uintptr)(unsafe.Pointer(_f + 8)) < *(*uintptr)(unsafe.Pointer(_f + 184)) {
			return int32(*(*uint8)(unsafe.Pointer(postinc539((*uintptr)(unsafe.Pointer(_f + 8))))))
		}
		return X__shgetc(tls, _f)
	}()
	_rp--
	goto _5

_7:
_4:
_8:
	if uint32(_c-int32('0')) >= uint32(10) && uint32(_c|int32(32)-int32('a')) >= uint32(6) && _c != int32('.') {
		goto _10
	}

	if _c != int32('.') {
		goto _11
	}

	if _gotrad == 0 {
		goto _13
	}

	goto _10

_13:
	_rp = _dc
	_gotrad = int32(1)
	goto _12

_11:
	_gotdig = int32(1)
	if _c <= int32('9') {
		goto _14
	}

	_d = _c | int32(32) + int32(10) - int32('a')
	goto _15

_14:
	_d = _c - int32('0')
_15:
	if _dc >= int64(8) {
		goto _16
	}

	_x = _x*uint32(16) + uint32(_d)
	goto _17

_16:
	if _dc >= int64(14) {
		goto _18
	}

	_y = _y + float64(float64(_d)*div541(&_scale, 16))
	goto _19

_18:
	if _d == 0 || _gottail != 0 {
		goto _20
	}

	_y = _y + float64(float64(0.5)*_scale)
	_gottail = int32(1)
_20:
_19:
_17:
	_dc++
_12:
	_c = func() int32 {
		if *(*uintptr)(unsafe.Pointer(_f + 8)) < *(*uintptr)(unsafe.Pointer(_f + 184)) {
			return int32(*(*uint8)(unsafe.Pointer(postinc539((*uintptr)(unsafe.Pointer(_f + 8))))))
		}
		return X__shgetc(tls, _f)
	}()
	goto _8

_10:
	if _gotdig != 0 {
		goto _21
	}

	if *(*uintptr)(unsafe.Pointer(_f + 184)) != 0 {
		*(*uintptr)(unsafe.Pointer(_f + 8))--
	} else {
	}
	if _pok == 0 {
		goto _22
	}

	if *(*uintptr)(unsafe.Pointer(_f + 184)) != 0 {
		*(*uintptr)(unsafe.Pointer(_f + 8))--
	} else {
	}
	if _gotrad == 0 {
		goto _24
	}

	if *(*uintptr)(unsafe.Pointer(_f + 184)) != 0 {
		*(*uintptr)(unsafe.Pointer(_f + 8))--
	} else {
	}
_24:
	goto _23

_22:
	X__shlim(tls, _f, int64(0))
_23:
	return float64(_sign) * float64(0)

_21:
	if _gotrad != 0 {
		goto _25
	}

	_rp = _dc
_25:
_26:
	if _dc >= int64(8) {
		goto _27
	}

	_x = _x * uint32(16)
	_dc++
	goto _26

_27:
	if _c|int32(32) != int32('p') {
		goto _28
	}

	_e2 = xscanexp(tls, _f, _pok)
	if _e2 != int64(-9223372036854775808) {
		goto _30
	}

	if _pok == 0 {
		goto _31
	}

	if *(*uintptr)(unsafe.Pointer(_f + 184)) != 0 {
		*(*uintptr)(unsafe.Pointer(_f + 8))--
	} else {
	}
	goto _32

_31:
	X__shlim(tls, _f, int64(0))
	return float64(0)

_32:
	_e2 = int64(0)
_30:
	goto _29

_28:
	if *(*uintptr)(unsafe.Pointer(_f + 184)) != 0 {
		*(*uintptr)(unsafe.Pointer(_f + 8))--
	} else {
	}
_29:
	_e2 = _e2 + (int64(4)*_rp - int64(32))
	if _x != 0 {
		goto _33
	}

	return float64(_sign) * float64(0)

_33:
	if _e2 <= int64(-_emin) {
		goto _34
	}

	*(*int32)(unsafe.Pointer(X__errno_location(tls))) = int32(34)
	return float64(float64(_sign)*float64(1.7976931348623157e+308)) * float64(1.7976931348623157e+308)

_34:
	if _e2 >= int64(_emin-int32(106)) {
		goto _35
	}

	*(*int32)(unsafe.Pointer(X__errno_location(tls))) = int32(34)
	return float64(float64(_sign)*float64(2.2250738585072014e-308)) * float64(2.2250738585072014e-308)

_35:
_36:
	if _x >= uint32(0x80000000) {
		goto _37
	}

	if _y < float64(0.5) {
		goto _38
	}

	_x = _x + (_x + uint32(1))
	_y = _y + float64(_y-float64(1))
	goto _39

_38:
	_x = _x + _x
	_y = _y + _y
_39:
	_e2--
	goto _36

_37:
	if int64(_bits) <= int64(32)+_e2-int64(_emin) {
		goto _40
	}

	_bits = int32(int64(32) + _e2 - int64(_emin))
	if _bits >= int32(0) {
		goto _41
	}

	_bits = int32(0)
_41:
_40:
	if _bits >= int32(53) {
		goto _42
	}

	_bias = Xcopysignl(tls, Xscalbn(tls, float64(1), int32(85)-_bits-int32(1)), float64(_sign))
_42:
	if _bits >= int32(32) || _y == 0 || _x&uint32(1) != 0 {
		goto _43
	}

	_x++
	_y = float64(0)
_43:
	_y = float64(_bias+float64(float64(_sign)*float64(_x))) + float64(float64(_sign)*_y)
	_y = _y - _bias
	if _y != 0 {
		goto _44
	}

	*(*int32)(unsafe.Pointer(X__errno_location(tls))) = int32(34)
_44:
	return Xscalbnl(tls, _y, int32(_e2))
}

func preinc542(p *int32) int32 { *p += 1; return *p }

func postinc543(p *int32) int32 { r := *p; *p += 1; return r }

// xdecfloat is defined at floatscan.c:66:20
func xdecfloat(tls TLS, _f uintptr /* *TFILE = S_IO_FILE */, _c int32, _bits int32, _emin int32, _sign int32, _pok int32) (r float64) {
	esc := MustMalloc(512)
	var (
		_x        = esc // *[128]uint32
		_i        int32
		_j        int32
		_k        int32
		_a        int32
		_z        int32
		_lrp      int64
		_dc       int64
		_e10      int64
		_lnz      int32
		_gotdig   int32
		_gotrad   int32
		_rp       int32
		_e2       int32
		_emax     int32
		_denormal int32
		_y        float64
		_frac     float64
		_bias     float64
		_bitlim   int32
		_rpm9     int32
		_p10      int32
		_carry    uint32
		_tmp      uint32
		_1carry   uint32
		_2tmp     uint64
		_3carry   uint32
		_sh       int32
		_4tmp     uint32
		_t        uint32
	)
	defer Free(esc)
	_lrp = int64(0)
	_dc = int64(0)
	_e10 = int64(0)
	_lnz = int32(0)
	_gotdig = int32(0)
	_gotrad = int32(0)
	_emax = -_emin - _bits + int32(3)
	_denormal = int32(0)
	_frac = float64(0)
	_bias = float64(0)
	_j = int32(0)
	_k = int32(0)

_1:
	if _c != int32('0') {
		goto _3
	}

	_gotdig = int32(1)
	_c = func() int32 {
		if *(*uintptr)(unsafe.Pointer(_f + 8)) < *(*uintptr)(unsafe.Pointer(_f + 184)) {
			return int32(*(*uint8)(unsafe.Pointer(postinc539((*uintptr)(unsafe.Pointer(_f + 8))))))
		}
		return X__shgetc(tls, _f)
	}()
	goto _1

_3:
	if _c != int32('.') {
		goto _4
	}

	_gotrad = int32(1)
	_c = func() int32 {
		if *(*uintptr)(unsafe.Pointer(_f + 8)) < *(*uintptr)(unsafe.Pointer(_f + 184)) {
			return int32(*(*uint8)(unsafe.Pointer(postinc539((*uintptr)(unsafe.Pointer(_f + 8))))))
		}
		return X__shgetc(tls, _f)
	}()
_5:
	if _c != int32('0') {
		goto _7
	}

	_gotdig = int32(1)
	_lrp--
	_c = func() int32 {
		if *(*uintptr)(unsafe.Pointer(_f + 8)) < *(*uintptr)(unsafe.Pointer(_f + 184)) {
			return int32(*(*uint8)(unsafe.Pointer(postinc539((*uintptr)(unsafe.Pointer(_f + 8))))))
		}
		return X__shgetc(tls, _f)
	}()
	goto _5

_7:
_4:
	*(*uint32)(unsafe.Pointer(_x)) = uint32(0)

_8:
	if uint32(_c-int32('0')) >= uint32(10) && _c != int32('.') {
		goto _10
	}

	if _c != int32('.') {
		goto _11
	}

	if _gotrad == 0 {
		goto _13
	}

	goto _10

_13:
	_gotrad = int32(1)
	_lrp = _dc
	goto _12

_11:
	if _k >= int32(125) {
		goto _14
	}

	_dc++
	if _c == int32('0') {
		goto _16
	}

	_lnz = int32(_dc)
_16:
	if _j == 0 {
		goto _17
	}

	*(*uint32)(unsafe.Pointer(_x + 4*uintptr(_k))) = *(*uint32)(unsafe.Pointer(_x + 4*uintptr(_k)))*uint32(10) + uint32(_c) - uint32('0')
	goto _18

_17:
	*(*uint32)(unsafe.Pointer(_x + 4*uintptr(_k))) = uint32(_c - int32('0'))
_18:
	if preinc542(&_j) != int32(9) {
		goto _19
	}

	_k++
	_j = int32(0)
_19:
	_gotdig = int32(1)
	goto _15

_14:
	_dc++
	if _c == int32('0') {
		goto _20
	}

	_lnz = int32(1116)
	{
		p := (*uint32)(unsafe.Pointer(_x + 496))
		*p = *p | uint32(1)
	}
_20:
_15:
_12:
	_c = func() int32 {
		if *(*uintptr)(unsafe.Pointer(_f + 8)) < *(*uintptr)(unsafe.Pointer(_f + 184)) {
			return int32(*(*uint8)(unsafe.Pointer(postinc539((*uintptr)(unsafe.Pointer(_f + 8))))))
		}
		return X__shgetc(tls, _f)
	}()
	goto _8

_10:
	if _gotrad != 0 {
		goto _21
	}

	_lrp = _dc
_21:
	if _gotdig == 0 || _c|int32(32) != int32('e') {
		goto _22
	}

	_e10 = xscanexp(tls, _f, _pok)
	if _e10 != int64(-9223372036854775808) {
		goto _24
	}

	if _pok == 0 {
		goto _25
	}

	if *(*uintptr)(unsafe.Pointer(_f + 184)) != 0 {
		*(*uintptr)(unsafe.Pointer(_f + 8))--
	} else {
	}
	goto _26

_25:
	X__shlim(tls, _f, int64(0))
	return float64(0)

_26:
	_e10 = int64(0)
_24:
	_lrp = _lrp + _e10
	goto _23

_22:
	if _c < int32(0) {
		goto _27
	}

	if *(*uintptr)(unsafe.Pointer(_f + 184)) != 0 {
		*(*uintptr)(unsafe.Pointer(_f + 8))--
	} else {
	}
_27:
_23:
	if _gotdig != 0 {
		goto _28
	}

	*(*int32)(unsafe.Pointer(X__errno_location(tls))) = int32(22)
	X__shlim(tls, _f, int64(0))
	return float64(0)

_28:
	if *(*uint32)(unsafe.Pointer(_x)) != 0 {
		goto _29
	}

	return float64(_sign) * float64(0)

_29:
	if _lrp != _dc || _dc >= int64(10) || _bits <= int32(30) && *(*uint32)(unsafe.Pointer(_x))>>(uint(_bits)%32) != uint32(0) {
		goto _30
	}

	return float64(_sign) * float64(*(*uint32)(unsafe.Pointer(_x)))

_30:
	if _lrp <= int64(-_emin/int32(2)) {
		goto _31
	}

	*(*int32)(unsafe.Pointer(X__errno_location(tls))) = int32(34)
	return float64(float64(_sign)*float64(1.7976931348623157e+308)) * float64(1.7976931348623157e+308)

_31:
	if _lrp >= int64(_emin-int32(106)) {
		goto _32
	}

	*(*int32)(unsafe.Pointer(X__errno_location(tls))) = int32(34)
	return float64(float64(_sign)*float64(2.2250738585072014e-308)) * float64(2.2250738585072014e-308)

_32:
	if _j == 0 {
		goto _33
	}

_34:
	if _j >= int32(9) {
		goto _36
	}

	{
		p := (*uint32)(unsafe.Pointer(_x + 4*uintptr(_k)))
		*p = *p * uint32(10)
	}
	_j++
	goto _34

_36:
	_k++
	_j = int32(0)
_33:
	_a = int32(0)
	_z = _k
	_e2 = int32(0)
	_rp = int32(_lrp)
	if _lnz >= int32(9) || _lnz > _rp || _rp >= int32(18) {
		goto _37
	}

	if _rp != int32(9) {
		goto _38
	}

	return float64(_sign) * float64(*(*uint32)(unsafe.Pointer(_x)))

_38:
	if _rp >= int32(9) {
		goto _39
	}

	return float64(float64(_sign)*float64(*(*uint32)(unsafe.Pointer(_x)))) / float64(*(*int32)(unsafe.Pointer(x544p10s + 4*uintptr(int32(8)-_rp))))

_39:
	_bitlim = _bits - int32(3)*(_rp-int32(9))
	if _bitlim <= int32(30) && *(*uint32)(unsafe.Pointer(_x))>>(uint(_bitlim)%32) != uint32(0) {
		goto _40
	}

	return float64(float64(_sign)*float64(*(*uint32)(unsafe.Pointer(_x)))) * float64(*(*int32)(unsafe.Pointer(x544p10s + 4*uintptr(_rp-int32(10)))))

_40:
_37:
_41:
	if *(*uint32)(unsafe.Pointer(_x + 4*uintptr(_z-int32(1)))) != 0 {
		goto _43
	}

	_z--
	goto _41

_43:
	if (_rp % int32(9)) == 0 {
		goto _44
	}

	_rpm9 = func() int32 {
		if _rp >= int32(0) {
			return _rp % int32(9)
		}
		return _rp%int32(9) + int32(9)
	}()
	_p10 = *(*int32)(unsafe.Pointer(x544p10s + 4*uintptr(int32(8)-_rpm9)))
	_carry = uint32(0)
	_k = _a
_45:
	if _k == _z {
		goto _47
	}

	_tmp = *(*uint32)(unsafe.Pointer(_x + 4*uintptr(_k))) % uint32(_p10)
	*(*uint32)(unsafe.Pointer(_x + 4*uintptr(_k))) = *(*uint32)(unsafe.Pointer(_x + 4*uintptr(_k)))/uint32(_p10) + _carry
	_carry = uint32(int32(1000000000)/_p10) * _tmp
	if _k != _a || *(*uint32)(unsafe.Pointer(_x + 4*uintptr(_k))) != 0 {
		goto _48
	}

	_a = (_a + int32(1)) & int32(127)
	_rp = _rp - int32(9)
_48:
	_k++
	goto _45

_47:
	if _carry == 0 {
		goto _49
	}

	*(*uint32)(unsafe.Pointer(_x + 4*uintptr(postinc543(&_z)))) = _carry
_49:
	_rp = _rp + (int32(9) - _rpm9)
_44:
_50:
	if _rp >= int32(18) && (_rp != int32(18) || *(*uint32)(unsafe.Pointer(_x + 4*uintptr(_a))) >= *(*uint32)(unsafe.Pointer(x545th))) {
		goto _51
	}

	_1carry = uint32(0)
	_e2 = _e2 - int32(29)
	_k = (_z - int32(1)) & int32(127)
_52:
	_2tmp = uint64(*(*uint32)(unsafe.Pointer(_x + 4*uintptr(_k))))<<(uint(29)%64) + uint64(_1carry)
	if _2tmp <= uint64(1000000000) {
		goto _55
	}

	_1carry = uint32(_2tmp / uint64(1000000000))
	*(*uint32)(unsafe.Pointer(_x + 4*uintptr(_k))) = uint32(_2tmp % uint64(1000000000))
	goto _56

_55:
	_1carry = uint32(0)
	*(*uint32)(unsafe.Pointer(_x + 4*uintptr(_k))) = uint32(_2tmp)
_56:
	if _k != (_z-int32(1))&int32(127) || _k == _a || *(*uint32)(unsafe.Pointer(_x + 4*uintptr(_k))) != 0 {
		goto _57
	}

	_z = _k
_57:
	if _k != _a {
		goto _58
	}

	goto _54

_58:
	_k = (_k - int32(1)) & int32(127)
	goto _52

_54:
	if _1carry == 0 {
		goto _59
	}

	_rp = _rp + int32(9)
	_a = (_a - int32(1)) & int32(127)
	if _a != _z {
		goto _60
	}

	_z = (_z - int32(1)) & int32(127)
	{
		p := (*uint32)(unsafe.Pointer(_x + 4*uintptr((_z-int32(1))&int32(127))))
		*p = *p | *(*uint32)(unsafe.Pointer(_x + 4*uintptr(_z)))
	}
_60:
	*(*uint32)(unsafe.Pointer(_x + 4*uintptr(_a))) = _1carry
_59:
	goto _50

_51:
_61:
	_3carry = uint32(0)
	_sh = int32(1)
	_i = int32(0)
_64:
	if _i >= int32(2) {
		goto _66
	}

	_k = (_a + _i) & int32(127)
	if _k != _z && *(*uint32)(unsafe.Pointer(_x + 4*uintptr(_k))) >= *(*uint32)(unsafe.Pointer(x545th + 4*uintptr(_i))) {
		goto _67
	}

	_i = int32(2)
	goto _66

_67:
	if *(*uint32)(unsafe.Pointer(_x + 4*uintptr((_a+_i)&int32(127)))) <= *(*uint32)(unsafe.Pointer(x545th + 4*uintptr(_i))) {
		goto _68
	}

	goto _66

_68:
	_i++
	goto _64

_66:
	if _i != int32(2) || _rp != int32(18) {
		goto _69
	}

	goto _63

_69:
	if _rp <= int32(27) {
		goto _70
	}

	_sh = int32(9)
_70:
	_e2 = _e2 + _sh
	_k = _a
_71:
	if _k == _z {
		goto _73
	}

	_4tmp = *(*uint32)(unsafe.Pointer(_x + 4*uintptr(_k))) & uint32(int32(1)<<(uint(_sh)%32)-int32(1))
	*(*uint32)(unsafe.Pointer(_x + 4*uintptr(_k))) = *(*uint32)(unsafe.Pointer(_x + 4*uintptr(_k)))>>(uint(_sh)%32) + _3carry
	_3carry = uint32(int32(1000000000)>>(uint(_sh)%32)) * _4tmp
	if _k != _a || *(*uint32)(unsafe.Pointer(_x + 4*uintptr(_k))) != 0 {
		goto _74
	}

	_a = (_a + int32(1)) & int32(127)
	_i--
	_rp = _rp - int32(9)
_74:
	_k = (_k + int32(1)) & int32(127)
	goto _71

_73:
	if _3carry == 0 {
		goto _75
	}

	if (_z+int32(1))&int32(127) == _a {
		goto _76
	}

	*(*uint32)(unsafe.Pointer(_x + 4*uintptr(_z))) = _3carry
	_z = (_z + int32(1)) & int32(127)
	goto _77

_76:
	{
		p := (*uint32)(unsafe.Pointer(_x + 4*uintptr((_z-int32(1))&int32(127))))
		*p = *p | uint32(1)
	}
_77:
_75:
	goto _61

_63:
	_y = float64(set538(&_i, int32(0)))
_78:
	if _i >= int32(2) {
		goto _80
	}

	if (_a+_i)&int32(127) != _z {
		goto _81
	}

	*(*uint32)(unsafe.Pointer(_x + 4*uintptr(set538(&_z, (_z+int32(1))&int32(127))-int32(1)))) = uint32(0)
_81:
	_y = float64(float64(1e+09)*_y) + float64(*(*uint32)(unsafe.Pointer(_x + 4*uintptr((_a+_i)&int32(127)))))
	_i++
	goto _78

_80:
	_y = _y * float64(_sign)
	if _bits <= int32(53)+_e2-_emin {
		goto _82
	}

	_bits = int32(53) + _e2 - _emin
	if _bits >= int32(0) {
		goto _83
	}

	_bits = int32(0)
_83:
	_denormal = int32(1)
_82:
	if _bits >= int32(53) {
		goto _84
	}

	_bias = Xcopysignl(tls, Xscalbn(tls, float64(1), int32(106)-_bits-int32(1)), _y)
	_frac = Xfmodl(tls, _y, Xscalbn(tls, float64(1), int32(53)-_bits))
	_y = _y - _frac
	_y = _y + _bias
_84:
	if (_a+_i)&int32(127) == _z {
		goto _85
	}

	_t = *(*uint32)(unsafe.Pointer(_x + 4*uintptr((_a+_i)&int32(127))))
	if _t >= uint32(500000000) || _t == 0 && (_a+_i+int32(1))&int32(127) == _z {
		goto _86
	}

	_frac = _frac + float64(float64(0.25)*float64(_sign))
	goto _87

_86:
	if _t <= uint32(500000000) {
		goto _88
	}

	_frac = _frac + float64(float64(0.75)*float64(_sign))
	goto _89

_88:
	if _t != uint32(500000000) {
		goto _90
	}

	if (_a+_i+int32(1))&int32(127) != _z {
		goto _91
	}

	_frac = _frac + float64(float64(0.5)*float64(_sign))
	goto _92

_91:
	_frac = _frac + float64(float64(0.75)*float64(_sign))
_92:
_90:
_89:
_87:
	if int32(53)-_bits < int32(2) || Xfmodl(tls, _frac, float64(1)) != 0 {
		goto _93
	}

	_frac++
_93:
_85:
	_y = _y + _frac
	_y = _y - _bias
	if (_e2+int32(53))&int32(0x7fffffff) <= _emax-int32(5) {
		goto _94
	}

	if Xfabs(tls, _y) < float64(9.007199254740992e+15) {
		goto _95
	}

	if _denormal == 0 || _bits != int32(53)+_e2-_emin {
		goto _96
	}

	_denormal = int32(0)
_96:
	_y = _y * float64(0.5)
	_e2++
_95:
	if _e2+int32(53) <= _emax && (_denormal == 0 || _frac == 0) {
		goto _97
	}

	*(*int32)(unsafe.Pointer(X__errno_location(tls))) = int32(34)
_97:
_94:
	return Xscalbnl(tls, _y, _e2)
}

type t18off_t = int64

type s38__locale_struct = struct{ Fcat [6]uintptr }

type t16uint32_t = uint32

// xscanexp is defined at floatscan.c:39:18
func xscanexp(tls TLS, _f uintptr /* *TFILE = S_IO_FILE */, _pok int32) (r int64) {
	var (
		_c   int32
		_x   int32
		_y   int64
		_neg int32
	)
	_neg = int32(0)
	_c = func() int32 {
		if *(*uintptr)(unsafe.Pointer(_f + 8)) < *(*uintptr)(unsafe.Pointer(_f + 184)) {
			return int32(*(*uint8)(unsafe.Pointer(postinc539((*uintptr)(unsafe.Pointer(_f + 8))))))
		}
		return X__shgetc(tls, _f)
	}()
	if _c != int32('+') && _c != int32('-') {
		goto _1
	}

	_neg = bool2int(_c == int32('-'))
	_c = func() int32 {
		if *(*uintptr)(unsafe.Pointer(_f + 8)) < *(*uintptr)(unsafe.Pointer(_f + 184)) {
			return int32(*(*uint8)(unsafe.Pointer(postinc539((*uintptr)(unsafe.Pointer(_f + 8))))))
		}
		return X__shgetc(tls, _f)
	}()
	if uint32(_c-int32('0')) < uint32(10) || _pok == 0 {
		goto _2
	}

	if *(*uintptr)(unsafe.Pointer(_f + 184)) != 0 {
		*(*uintptr)(unsafe.Pointer(_f + 8))--
	} else {
	}
_2:
_1:
	if uint32(_c-int32('0')) < uint32(10) {
		goto _3
	}

	if *(*uintptr)(unsafe.Pointer(_f + 184)) != 0 {
		*(*uintptr)(unsafe.Pointer(_f + 8))--
	} else {
	}
	return int64(-9223372036854775808)

_3:
	_x = int32(0)
_4:
	if uint32(_c-int32('0')) >= uint32(10) || _x >= int32(214748364) {
		goto _6
	}

	_x = int32(10)*_x + _c - int32('0')
	_c = func() int32 {
		if *(*uintptr)(unsafe.Pointer(_f + 8)) < *(*uintptr)(unsafe.Pointer(_f + 184)) {
			return int32(*(*uint8)(unsafe.Pointer(postinc539((*uintptr)(unsafe.Pointer(_f + 8))))))
		}
		return X__shgetc(tls, _f)
	}()
	goto _4

_6:
	_y = int64(_x)
_7:
	if uint32(_c-int32('0')) >= uint32(10) || _y >= int64(92233720368547758) {
		goto _9
	}

	_y = int64(10)*_y + int64(_c) - int64('0')
	_c = func() int32 {
		if *(*uintptr)(unsafe.Pointer(_f + 8)) < *(*uintptr)(unsafe.Pointer(_f + 184)) {
			return int32(*(*uint8)(unsafe.Pointer(postinc539((*uintptr)(unsafe.Pointer(_f + 8))))))
		}
		return X__shgetc(tls, _f)
	}()
	goto _7

_9:
_10:
	if uint32(_c-int32('0')) >= uint32(10) {
		goto _12
	}

	_c = func() int32 {
		if *(*uintptr)(unsafe.Pointer(_f + 8)) < *(*uintptr)(unsafe.Pointer(_f + 184)) {
			return int32(*(*uint8)(unsafe.Pointer(postinc539((*uintptr)(unsafe.Pointer(_f + 8))))))
		}
		return X__shgetc(tls, _f)
	}()
	goto _10

_12:
	if *(*uintptr)(unsafe.Pointer(_f + 184)) != 0 {
		*(*uintptr)(unsafe.Pointer(_f + 8))--
	} else {
	}
	if _neg != 0 {
		return -_y
	}

	return _y
}

// x5th [2]uint32, escapes: true, floatscan.c:69:24
var x545th = ds + 27640

// x6p10s [8]int32, escapes: true, floatscan.c:82:19
var x544p10s = ds + 27648

type t10uint64_t = uint64

// linking intscan.o

func set546(p *int32, v int32) int32 { *p = v; return v }

func postinc547(p *uintptr) uintptr { r := *p; *p += 1; return r }

// X__intscan is defined at intscan.c:26:20
func X__intscan(tls TLS, _f uintptr /* *TFILE = S_IO_FILE */, _base uint32, _pok int32, _lim uint64) (r uint64) {
	var (
		_val uintptr // *uint8
		_c   int32
		_neg int32
		_x   uint32
		_y   uint64
		_bs  int32
	)
	_val = x6table + uintptr(1)
	_neg = int32(0)
	if _base <= uint32(36) && _base != uint32(1) {
		goto _1
	}

	*(*int32)(unsafe.Pointer(X__errno_location(tls))) = int32(22)
	return uint64(0)

_1:
_2:
	if x1__isspace(tls, set546(&_c, func() int32 {
		if *(*uintptr)(unsafe.Pointer(_f + 8)) < *(*uintptr)(unsafe.Pointer(_f + 184)) {
			return int32(*(*uint8)(unsafe.Pointer(postinc547((*uintptr)(unsafe.Pointer(_f + 8))))))
		}
		return X__shgetc(tls, _f)
	}())) == 0 {
		goto _3
	}

	goto _2

_3:
	if _c != int32('+') && _c != int32('-') {
		goto _4
	}

	_neg = -bool2int(_c == int32('-'))
	_c = func() int32 {
		if *(*uintptr)(unsafe.Pointer(_f + 8)) < *(*uintptr)(unsafe.Pointer(_f + 184)) {
			return int32(*(*uint8)(unsafe.Pointer(postinc547((*uintptr)(unsafe.Pointer(_f + 8))))))
		}
		return X__shgetc(tls, _f)
	}()
_4:
	if _base != uint32(0) && _base != uint32(16) || _c != int32('0') {
		goto _5
	}

	_c = func() int32 {
		if *(*uintptr)(unsafe.Pointer(_f + 8)) < *(*uintptr)(unsafe.Pointer(_f + 184)) {
			return int32(*(*uint8)(unsafe.Pointer(postinc547((*uintptr)(unsafe.Pointer(_f + 8))))))
		}
		return X__shgetc(tls, _f)
	}()
	if _c|int32(32) != int32('x') {
		goto _7
	}

	_c = func() int32 {
		if *(*uintptr)(unsafe.Pointer(_f + 8)) < *(*uintptr)(unsafe.Pointer(_f + 184)) {
			return int32(*(*uint8)(unsafe.Pointer(postinc547((*uintptr)(unsafe.Pointer(_f + 8))))))
		}
		return X__shgetc(tls, _f)
	}()
	if int32(*(*uint8)(unsafe.Pointer(_val + uintptr(_c)))) < int32(16) {
		goto _9
	}

	if *(*uintptr)(unsafe.Pointer(_f + 184)) != 0 {
		*(*uintptr)(unsafe.Pointer(_f + 8))--
	} else {
	}
	if _pok == 0 {
		goto _10
	}

	if *(*uintptr)(unsafe.Pointer(_f + 184)) != 0 {
		*(*uintptr)(unsafe.Pointer(_f + 8))--
	} else {
	}
	goto _11

_10:
	X__shlim(tls, _f, int64(0))
_11:
	return uint64(0)

_9:
	_base = uint32(16)
	goto _8

_7:
	if _base != uint32(0) {
		goto _12
	}

	_base = uint32(8)
_12:
_8:
	goto _6

_5:
	if _base != uint32(0) {
		goto _13
	}

	_base = uint32(10)
_13:
	if uint32(*(*uint8)(unsafe.Pointer(_val + uintptr(_c)))) < _base {
		goto _14
	}

	if *(*uintptr)(unsafe.Pointer(_f + 184)) != 0 {
		*(*uintptr)(unsafe.Pointer(_f + 8))--
	} else {
	}
	X__shlim(tls, _f, int64(0))
	*(*int32)(unsafe.Pointer(X__errno_location(tls))) = int32(22)
	return uint64(0)

_14:
_6:
	if _base != uint32(10) {
		goto _15
	}

	_x = uint32(0)
_17:
	if uint32(_c-int32('0')) >= uint32(10) || _x > uint32(429496728) {
		goto _19
	}

	_x = _x*uint32(10) + uint32(_c-int32('0'))
	_c = func() int32 {
		if *(*uintptr)(unsafe.Pointer(_f + 8)) < *(*uintptr)(unsafe.Pointer(_f + 184)) {
			return int32(*(*uint8)(unsafe.Pointer(postinc547((*uintptr)(unsafe.Pointer(_f + 8))))))
		}
		return X__shgetc(tls, _f)
	}()
	goto _17

_19:
	_y = uint64(_x)
_20:
	if uint32(_c-int32('0')) >= uint32(10) || _y > uint64(1844674407370955161) || uint64(10)*_y > uint64(18446744073709551615)-uint64(_c-int32('0')) {
		goto _22
	}

	_y = _y*uint64(10) + uint64(_c-int32('0'))
	_c = func() int32 {
		if *(*uintptr)(unsafe.Pointer(_f + 8)) < *(*uintptr)(unsafe.Pointer(_f + 184)) {
			return int32(*(*uint8)(unsafe.Pointer(postinc547((*uintptr)(unsafe.Pointer(_f + 8))))))
		}
		return X__shgetc(tls, _f)
	}()
	goto _20

_22:
	if uint32(_c-int32('0')) < uint32(10) {
		goto _23
	}

	goto ldone

_23:
	goto _16

_15:
	if _base&(_base-uint32(1)) != 0 {
		goto _24
	}

	_bs = int32(*(*int8)(unsafe.Pointer(ts + 1056 /* "\x00\x01\x02\x04\a\x03\x06\x05" */ + uintptr(uint32(0x17)*_base>>(uint(5)%32)&uint32(7)))))
	_x = uint32(0)
_26:
	if uint32(*(*uint8)(unsafe.Pointer(_val + uintptr(_c)))) >= _base || _x > uint32(134217727) {
		goto _28
	}

	_x = _x<<(uint(_bs)%32) | uint32(*(*uint8)(unsafe.Pointer(_val + uintptr(_c))))
	_c = func() int32 {
		if *(*uintptr)(unsafe.Pointer(_f + 8)) < *(*uintptr)(unsafe.Pointer(_f + 184)) {
			return int32(*(*uint8)(unsafe.Pointer(postinc547((*uintptr)(unsafe.Pointer(_f + 8))))))
		}
		return X__shgetc(tls, _f)
	}()
	goto _26

_28:
	_y = uint64(_x)
_29:
	if uint32(*(*uint8)(unsafe.Pointer(_val + uintptr(_c)))) >= _base || _y > uint64(18446744073709551615)>>(uint(_bs)%64) {
		goto _31
	}

	_y = _y<<(uint(_bs)%64) | uint64(*(*uint8)(unsafe.Pointer(_val + uintptr(_c))))
	_c = func() int32 {
		if *(*uintptr)(unsafe.Pointer(_f + 8)) < *(*uintptr)(unsafe.Pointer(_f + 184)) {
			return int32(*(*uint8)(unsafe.Pointer(postinc547((*uintptr)(unsafe.Pointer(_f + 8))))))
		}
		return X__shgetc(tls, _f)
	}()
	goto _29

_31:
	goto _25

_24:
	_x = uint32(0)
_32:
	if uint32(*(*uint8)(unsafe.Pointer(_val + uintptr(_c)))) >= _base || _x > uint32(119304646) {
		goto _34
	}

	_x = _x*_base + uint32(*(*uint8)(unsafe.Pointer(_val + uintptr(_c))))
	_c = func() int32 {
		if *(*uintptr)(unsafe.Pointer(_f + 8)) < *(*uintptr)(unsafe.Pointer(_f + 184)) {
			return int32(*(*uint8)(unsafe.Pointer(postinc547((*uintptr)(unsafe.Pointer(_f + 8))))))
		}
		return X__shgetc(tls, _f)
	}()
	goto _32

_34:
	_y = uint64(_x)
_35:
	if uint32(*(*uint8)(unsafe.Pointer(_val + uintptr(_c)))) >= _base || _y > uint64(18446744073709551615)/uint64(_base) || uint64(_base)*_y > uint64(18446744073709551615)-uint64(*(*uint8)(unsafe.Pointer(_val + uintptr(_c)))) {
		goto _37
	}

	_y = _y*uint64(_base) + uint64(*(*uint8)(unsafe.Pointer(_val + uintptr(_c))))
	_c = func() int32 {
		if *(*uintptr)(unsafe.Pointer(_f + 8)) < *(*uintptr)(unsafe.Pointer(_f + 184)) {
			return int32(*(*uint8)(unsafe.Pointer(postinc547((*uintptr)(unsafe.Pointer(_f + 8))))))
		}
		return X__shgetc(tls, _f)
	}()
	goto _35

_37:
_25:
_16:
	if uint32(*(*uint8)(unsafe.Pointer(_val + uintptr(_c)))) >= _base {
		goto _38
	}

_39:
	if uint32(*(*uint8)(unsafe.Pointer(_val + uintptr(_c)))) >= _base {
		goto _41
	}

	_c = func() int32 {
		if *(*uintptr)(unsafe.Pointer(_f + 8)) < *(*uintptr)(unsafe.Pointer(_f + 184)) {
			return int32(*(*uint8)(unsafe.Pointer(postinc547((*uintptr)(unsafe.Pointer(_f + 8))))))
		}
		return X__shgetc(tls, _f)
	}()
	goto _39

_41:
	*(*int32)(unsafe.Pointer(X__errno_location(tls))) = int32(34)
	_y = _lim
	if (_lim & uint64(1)) == 0 {
		goto _42
	}

	_neg = int32(0)
_42:
_38:
	goto ldone
ldone:
	if *(*uintptr)(unsafe.Pointer(_f + 184)) != 0 {
		*(*uintptr)(unsafe.Pointer(_f + 8))--
	} else {
	}
	if _y < _lim {
		goto _43
	}

	if _lim&uint64(1) != 0 || _neg != 0 {
		goto _44
	}

	*(*int32)(unsafe.Pointer(X__errno_location(tls))) = int32(34)
	return _lim - uint64(1)

	goto _45

_44:
	if _y <= _lim {
		goto _46
	}

	*(*int32)(unsafe.Pointer(X__errno_location(tls))) = int32(34)
	return _lim

_46:
_45:
_43:
	return _y ^ uint64(_neg) - uint64(_neg)
}

type t168__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t168__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type s1_IO_FILE = struct {
	Fflags        uint32
	Frpos         uintptr // *uint8
	Frend         uintptr // *uint8
	Fclose        uintptr // *func(TLS, uintptr) int32
	Fwend         uintptr // *uint8
	Fwpos         uintptr // *uint8
	Fmustbezero_1 uintptr // *uint8
	Fwbase        uintptr // *uint8
	Fread         uintptr // *func(TLS, uintptr, uintptr, uint64) uint64
	Fwrite        uintptr // *func(TLS, uintptr, uintptr, uint64) uint64
	Fseek         uintptr // *func(TLS, uintptr, int64, int32) int64
	Fbuf          uintptr // *uint8
	Fbuf_size     uint64
	Fprev         uintptr // *TFILE = S_IO_FILE
	Fnext         uintptr // *TFILE = S_IO_FILE
	Ffd           int32
	Fpipe_pid     int32
	Flockcount    int64
	Fdummy3       int16
	Fmode         int8
	Flbf          int8
	Flock         int32
	Fwaiters      int32
	Fcookie       uintptr // *void
	Foff          int64
	Fgetln_buf    uintptr // *int8
	Fmustbezero_2 uintptr // *void
	Fshend        uintptr // *uint8
	Fshlim        int64
	Fshcnt        int64
	Fprev_locked  uintptr // *TFILE = S_IO_FILE
	Fnext_locked  uintptr // *TFILE = S_IO_FILE
	Flocale       uintptr // *S__locale_struct
}

// xtable [257]uint8, escapes: true, intscan.c:7:28
var x6table = ds + 27680

// x__isspace is defined at ctype.h:26:21
func x1__isspace(tls TLS, __c int32) (r int32) {
	return bool2int((__c == int32(' ')) || (uint32(__c)-uint32('\t') < uint32(5)))
}

type t28size_t = uint64

type t19off_t = int64

type s39__locale_struct = struct{ Fcat [6]uintptr }

// linking libc.o

// X__libc S__libc, escapes: true, libc.c:3:15
var X__libc = bss + 1640

// X__hwcap Tsize_t = uint64, escapes: true, libc.c:5:8
var X__hwcap = bss + 1752

// X__sysinfo Tsize_t = uint64, escapes: true, libc.c:6:8
var X__sysinfo = bss + 1760

// X__progname *int8, escapes: true, libc.c:7:6
var X__progname = bss + 1768

// X__progname_full *int8, escapes: true, libc.c:7:21
var X__progname_full = bss + 1776

type t169__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t169__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type S__libc = struct {
	Fcan_do_threads  int32
	Fthreaded        int32
	Fsecure          int32
	Fthreads_minus_1 int32
	Fauxv            uintptr // *Tsize_t = uint64
	Ftls_head        uintptr // *Stls_module
	Ftls_size        uint64
	Ftls_align       uint64
	Ftls_cnt         uint64
	Fpage_size       uint64
	Fglobal_locale   s40__locale_struct
}

type t29size_t = uint64

type s2tls_module = struct {
	Fnext   uintptr // *Stls_module
	Fimage  uintptr // *void
	Flen    uint64
	Fsize   uint64
	Falign  uint64
	Foffset uint64
}

type s40__locale_struct = struct{ Fcat [6]uintptr }

// linking procfdname.o

func set548(p *int8, v int8) int8 { *p = v; return v }

func preinc549(p *uint32) uint32 { *p += 4294967295; return *p }

// X__procfdname is defined at procfdname.c:1:6
func X__procfdname(tls TLS, _buf uintptr /* *int8 */, _fd uint32) {
	var (
		_i uint32
		_j uint32
	)
	_i = uint32(0)
_1:
	if set548((*int8)(unsafe.Pointer(_buf+uintptr(_i))), *(*int8)(unsafe.Pointer(ts + 1068 /* "/proc/self/fd/" */ + uintptr(_i)))) == 0 {
		goto _3
	}

	_i++
	goto _1

_3:
	if _fd != 0 {
		goto _4
	}

	*(*int8)(unsafe.Pointer(_buf + uintptr(_i))) = int8('0')
	*(*int8)(unsafe.Pointer(_buf + uintptr(_i+uint32(1)))) = int8(0)
	return

_4:
	_j = _fd
_5:
	if _j == 0 {
		goto _7
	}

	_j = _j / uint32(10)
	_i++
	goto _5

_7:
	*(*int8)(unsafe.Pointer(_buf + uintptr(_i))) = int8(0)

_8:
	if _fd == 0 {
		goto _10
	}

	*(*int8)(unsafe.Pointer(_buf + uintptr(preinc549(&_i)))) = int8(uint32('0') + _fd%uint32(10))
	_fd = _fd / uint32(10)
	goto _8

_10:
}

type t170__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t170__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// linking shgetc.o

// X__shlim is defined at shgetc.c:3:6
func X__shlim(tls TLS, _f uintptr /* *TFILE = S_IO_FILE */, _lim int64) {
	*(*int64)(unsafe.Pointer(_f + 192)) = _lim
	*(*int64)(unsafe.Pointer(_f + 200)) = int64(*(*uintptr)(unsafe.Pointer(_f + 16)) - *(*uintptr)(unsafe.Pointer(_f + 8)))
	if _lim == 0 || *(*int64)(unsafe.Pointer(_f + 200)) <= _lim {
		goto _1
	}

	*(*uintptr)(unsafe.Pointer(_f + 184)) = *(*uintptr)(unsafe.Pointer(_f + 8)) + uintptr(_lim)
	goto _2

_1:
	*(*uintptr)(unsafe.Pointer(_f + 184)) = *(*uintptr)(unsafe.Pointer(_f + 16))
_2:
}

func set550(p *int32, v int32) int32 { *p = v; return v }

// X__shgetc is defined at shgetc.c:13:5
func X__shgetc(tls TLS, _f uintptr /* *TFILE = S_IO_FILE */) (r int32) {
	var _c int32

	if (*(*int64)(unsafe.Pointer(_f + 192)) == 0 || *(*int64)(unsafe.Pointer(_f + 200)) < *(*int64)(unsafe.Pointer(_f + 192))) && set550(&_c, X__uflow(tls, _f)) >= int32(0) {
		goto _1
	}

	*(*uintptr)(unsafe.Pointer(_f + 184)) = null
	return int32(-1)

_1:
	if *(*int64)(unsafe.Pointer(_f + 192)) == 0 || int64(*(*uintptr)(unsafe.Pointer(_f + 16))-*(*uintptr)(unsafe.Pointer(_f + 8))) <= *(*int64)(unsafe.Pointer(_f + 192))-*(*int64)(unsafe.Pointer(_f + 200))-int64(1) {
		goto _2
	}

	*(*uintptr)(unsafe.Pointer(_f + 184)) = *(*uintptr)(unsafe.Pointer(_f + 8)) + uintptr(*(*int64)(unsafe.Pointer(_f + 192))-*(*int64)(unsafe.Pointer(_f + 200))-int64(1))
	goto _3

_2:
	*(*uintptr)(unsafe.Pointer(_f + 184)) = *(*uintptr)(unsafe.Pointer(_f + 16))
_3:
	if *(*uintptr)(unsafe.Pointer(_f + 16)) == 0 {
		goto _4
	}

	{
		p := (*int64)(unsafe.Pointer(_f + 200))
		*p = *p + (int64(*(*uintptr)(unsafe.Pointer(_f + 16))-*(*uintptr)(unsafe.Pointer(_f + 8))) + int64(1))
	}
_4:
	if int32(*(*uint8)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_f + 8)) - 1))) == _c {
		goto _5
	}

	*(*uint8)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_f + 8)) - 1)) = uint8(_c)
_5:
	return _c
}

type t171__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t171__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t20off_t = int64

type s2_IO_FILE = struct {
	Fflags        uint32
	Frpos         uintptr // *uint8
	Frend         uintptr // *uint8
	Fclose        uintptr // *func(TLS, uintptr) int32
	Fwend         uintptr // *uint8
	Fwpos         uintptr // *uint8
	Fmustbezero_1 uintptr // *uint8
	Fwbase        uintptr // *uint8
	Fread         uintptr // *func(TLS, uintptr, uintptr, uint64) uint64
	Fwrite        uintptr // *func(TLS, uintptr, uintptr, uint64) uint64
	Fseek         uintptr // *func(TLS, uintptr, int64, int32) int64
	Fbuf          uintptr // *uint8
	Fbuf_size     uint64
	Fprev         uintptr // *TFILE = S_IO_FILE
	Fnext         uintptr // *TFILE = S_IO_FILE
	Ffd           int32
	Fpipe_pid     int32
	Flockcount    int64
	Fdummy3       int16
	Fmode         int8
	Flbf          int8
	Flock         int32
	Fwaiters      int32
	Fcookie       uintptr // *void
	Foff          int64
	Fgetln_buf    uintptr // *int8
	Fmustbezero_2 uintptr // *void
	Fshend        uintptr // *uint8
	Fshlim        int64
	Fshcnt        int64
	Fprev_locked  uintptr // *TFILE = S_IO_FILE
	Fnext_locked  uintptr // *TFILE = S_IO_FILE
	Flocale       uintptr // *S__locale_struct
}

type t30size_t = uint64

type s41__locale_struct = struct{ Fcat [6]uintptr }

// linking syscall_ret.o

// X__syscall_ret is defined at syscall_ret.c:4:6
func X__syscall_ret(tls TLS, _r uint64) (r int64) {
	if _r <= uint64(18446744073709547520) {
		goto _1
	}

	*(*int32)(unsafe.Pointer(X__errno_location(tls))) = int32(-_r)
	return int64(-1)

_1:
	return int64(_r)
}

type t172__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t172__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// linking vdso.o

// X__vdsosym is defined at vdso.c:43:6
func X__vdsosym(tls TLS, _vername uintptr /* *int8 */, _name uintptr /* *int8 */) (r uintptr /* *void */) {
	var (
		_i       uint64
		_eh      uintptr // *TEhdr = TElf64_Ehdr = struct{Fe...hnum uint16;Fe_shstrndx uint16;}
		_ph      uintptr // *TPhdr = TElf64_Phdr = struct{Fp...p_memsz uint64;Fp_align uint64;}
		_dynv    uintptr // *Tsize_t = uint64
		_base    uint64
		_strings uintptr // *int8
		_syms    uintptr // *TSym = TElf64_Sym = struct{Fst_...t_value uint64;Fst_size uint64;}
		_hashtab uintptr // *TElf_Symndx = Tuint32_t = uint32
		_versym  uintptr // *Tuint16_t = uint16
		_verdef  uintptr // *TVerdef = TElf64_Verdef = struc...Fvd_aux uint32;Fvd_next uint32;}
		_p       uintptr // *void
	)
	return 0

	_i = uint64(0)
_1:
	if *(*uint64)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(X__libc + 16)) + 8*uintptr(_i))) == uint64(33) {
		goto _3
	}

	if *(*uint64)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(X__libc + 16)) + 8*uintptr(_i))) != 0 {
		goto _4
	}

	return null

_4:
	_i = _i + uint64(2)
	goto _1

_3:
	if *(*uint64)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(X__libc + 16)) + 8*uintptr(_i+uint64(1)))) != 0 {
		goto _5
	}

	return null

_5:
	_eh = uintptr(*(*uint64)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(X__libc + 16)) + 8*uintptr(_i+uint64(1)))))
	_ph = _eh + uintptr(*(*uint64)(unsafe.Pointer(_eh + 32)))
	_dynv = 0
	_base = uint64(18446744073709551615)
	_i = uint64(0)
_6:
	if _i >= uint64(*(*uint16)(unsafe.Pointer(_eh + 56))) {
		goto _8
	}

	if *(*uint32)(unsafe.Pointer(_ph)) != uint32(1) {
		goto _9
	}

	_base = uint64(_eh) + *(*uint64)(unsafe.Pointer(_ph + 8)) - *(*uint64)(unsafe.Pointer(_ph + 16))
	goto _10

_9:
	if *(*uint32)(unsafe.Pointer(_ph)) != uint32(2) {
		goto _11
	}

	_dynv = _eh + uintptr(*(*uint64)(unsafe.Pointer(_ph + 8)))
_11:
_10:
	_i++
	_ph = _ph + uintptr(*(*uint16)(unsafe.Pointer(_eh + 54)))
	goto _6

_8:
	if _dynv != 0 && _base != uint64(18446744073709551615) {
		goto _12
	}

	return null

_12:
	_strings = 0
	_syms = 0
	_hashtab = 0
	_versym = 0
	_verdef = 0
	_i = uint64(0)
_13:
	if *(*uint64)(unsafe.Pointer(_dynv + 8*uintptr(_i))) == 0 {
		goto _15
	}

	_p = uintptr(_base + *(*uint64)(unsafe.Pointer(_dynv + 8*uintptr(_i+uint64(1)))))
	switch *(*uint64)(unsafe.Pointer(_dynv + 8*uintptr(_i))) {
	case uint64(5):
		goto _17
	case uint64(6):
		goto _18
	case uint64(4):
		goto _19
	case uint64(0x6ffffff0):
		goto _20
	case uint64(0x6ffffffc):
		goto _21
	}
	goto _16

_17:
	_strings = _p
	goto _16

_18:
	_syms = _p
	goto _16

_19:
	_hashtab = _p
	goto _16

_20:
	_versym = _p
	goto _16

_21:
	_verdef = _p
	goto _16

_16:
	_i = _i + uint64(2)
	goto _13

_15:
	if _strings != 0 && _syms != 0 && _hashtab != 0 {
		goto _22
	}

	return null

_22:
	if _verdef != 0 {
		goto _23
	}

	_versym = null
_23:
	_i = uint64(0)
_24:
	if _i >= uint64(*(*uint32)(unsafe.Pointer(_hashtab + 4))) {
		goto _26
	}

	if int32(1)<<(uint(int32(*(*uint8)(unsafe.Pointer((_syms + 24*uintptr(_i)) + 4)))&int32(0xf))%32)&int32(39) != 0 {
		goto _27
	}

	goto _25

_27:
	if int32(1)<<(uint(int32(*(*uint8)(unsafe.Pointer((_syms + 24*uintptr(_i)) + 4)))>>(uint(4)%32))%32)&int32(1030) != 0 {
		goto _28
	}

	goto _25

_28:
	if *(*uint16)(unsafe.Pointer((_syms + 24*uintptr(_i)) + 6)) != 0 {
		goto _29
	}

	goto _25

_29:
	if Xstrcmp(tls, _name, _strings+uintptr(*(*uint32)(unsafe.Pointer(_syms + 24*uintptr(_i))))) == 0 {
		goto _30
	}

	goto _25

_30:
	if _versym == 0 || xcheckver(tls, _verdef, int32(*(*uint16)(unsafe.Pointer(_versym + 2*uintptr(_i)))), _vername, _strings) != 0 {
		goto _31
	}

	goto _25

_31:
	return uintptr(_base + *(*uint64)(unsafe.Pointer((_syms + 24*uintptr(_i)) + 8)))

_25:
	_i++
	goto _24

_26:
	return null
}

type t173__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t173__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t31size_t = uint64

type TElf64_Half = uint16

type Tuint16_t = uint16

type t1Elf64_Word = uint32

type t17uint32_t = uint32

type t1Elf64_Addr = uint64

type t11uint64_t = uint64

type t1Elf64_Off = uint64

type t1Elf64_Xword = uint64

type TElf64_Section = uint16

type TElf_Symndx = uint32

// xcheckver is defined at vdso.c:25:12
func xcheckver(tls TLS, _def uintptr /* *TVerdef = TElf64_Verdef = struc...Fvd_aux uint32;Fvd_next uint32;} */, _vsym int32, _vername uintptr /* *int8 */, _strings uintptr /* *int8 */) (r int32) {
	var _aux uintptr // *TVerdaux = TElf64_Verdaux = str...a_name uint32;Fvda_next uint32;}

	_vsym = _vsym & int32(0x7fff)

_1:
	if int32(*(*uint16)(unsafe.Pointer(_def + 2)))&int32(0x1) != 0 || int32(*(*uint16)(unsafe.Pointer(_def + 4)))&int32(0x7fff) != _vsym {
		goto _4
	}

	goto _3

_4:
	if *(*uint32)(unsafe.Pointer(_def + 16)) != uint32(0) {
		goto _5
	}

	return int32(0)

_5:
	_def = _def + uintptr(*(*uint32)(unsafe.Pointer(_def + 16)))
	goto _1

_3:
	_aux = _def + uintptr(*(*uint32)(unsafe.Pointer(_def + 12)))
	return bool2int(Xstrcmp(tls, _vername, _strings+uintptr(*(*uint32)(unsafe.Pointer(_aux)))) == 0)
}

// linking version.o

// X__libc_get_version is defined at version.c:6:12
func X__libc_get_version(tls TLS) (r uintptr /* *int8 */) {
	return xversion
}

type t174__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t174__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// xversion [7]int8, escapes: true, version.c:3:19
var xversion = ds + 27944

// linking syscall.o

// linking src/internal/x86_64/syscall.s

// .global __syscall
// .hidden __syscall
// .type __syscall,@function
// __syscall:
// 	movq %rdi,%rax
// 	movq %rsi,%rdi
// 	movq %rdx,%rsi
// 	movq %rcx,%rdx
// 	movq %r8,%r10
// 	movq %r9,%r8
// 	movq 8(%rsp),%r9
// 	syscall
// 	ret

// linking ftok.o

// Xftok is defined at ftok.c:4:7
func Xftok(tls TLS, _path uintptr /* *int8 */, _id int32) (r int32) {
	esc := MustMalloc(144)
	var _st = esc // *Sstat
	defer Free(esc)
	if Xstat(tls, _path, _st) >= int32(0) {
		goto _1
	}

	return int32(-1)

_1:
	return int32(*(*uint64)(unsafe.Pointer(_st + 8))&uint64(0xffff) | *(*uint64)(unsafe.Pointer(_st))&uint64(0xff)<<(uint(16)%64) | uint64(uint32(_id)&uint32(0xff)<<(uint(24)%32)))
}

type t175__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t175__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type Tkey_t = int32

type s1stat = struct {
	Fst_dev     uint64
	Fst_ino     uint64
	Fst_nlink   uint64
	Fst_mode    uint32
	Fst_uid     uint32
	Fst_gid     uint32
	F__pad0     uint32
	Fst_rdev    uint64
	Fst_size    int64
	Fst_blksize int64
	Fst_blocks  int64
	Fst_atim    s2timespec
	Fst_mtim    s2timespec
	Fst_ctim    s2timespec
	F__unused   [3]int64
}

type t7ino_t = uint64

type t1dev_t = uint64

type t1nlink_t = uint64

type t4mode_t = uint32

type t2uid_t = uint32

type t1gid_t = uint32

type t21off_t = int64

type t1blksize_t = int64

type t1blkcnt_t = int64

type s2timespec = struct {
	Ftv_sec  int64
	Ftv_nsec int64
}

type t2time_t = int64

// linking msgctl.o

// Xmsgctl is defined at msgctl.c:10:5
func Xmsgctl(tls TLS, _q int32, _cmd int32, _buf uintptr /* *Smsqid_ds */) (r int32) {
	var _r int32

	_r = int32(x7__syscall3(tls, int64(71), int64(_q), int64(_cmd|int32(0)), int64(_buf)))
	return int32(X__syscall_ret(tls, uint64(_r)))
}

type t176__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t176__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type Smsqid_ds = struct {
	Fmsg_perm   Sipc_perm
	Fmsg_stime  int64
	Fmsg_rtime  int64
	Fmsg_ctime  int64
	Fmsg_cbytes uint64
	Fmsg_qnum   uint64
	Fmsg_qbytes uint64
	Fmsg_lspid  int32
	Fmsg_lrpid  int32
	F__unused   [2]uint64
}

// x__syscall3 is defined at syscall_arch.h:33:22
func x7__syscall3(tls TLS, _n int64, _a1 int64, _a2 int64, _a3 int64) (r int64) {
	return X__syscall(tls, _n, _a1, _a2, _a3, int64(0), int64(0), int64(0))
}

type Sipc_perm = struct {
	Fkey    int32
	Fuid    uint32
	Fgid    uint32
	Fcuid   uint32
	Fcgid   uint32
	Fmode   uint32
	Fseq    int32
	F__pad1 int64
	F__pad2 int64
}

type t3time_t = int64

type Tmsgqnum_t = uint64

type Tmsglen_t = uint64

type t2pid_t = int32

type t1key_t = int32

type t3uid_t = uint32

type t2gid_t = uint32

type t5mode_t = uint32

// linking msgget.o

// Xmsgget is defined at msgget.c:5:5
func Xmsgget(tls TLS, _k int32, _flag int32) (r int32) {
	return int32(X__syscall_ret(tls, uint64(x__syscall2(tls, int64(68), int64(_k), int64(_flag)))))
}

type t177__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t177__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t2key_t = int32

// x__syscall2 is defined at syscall_arch.h:24:22
func x__syscall2(tls TLS, _n int64, _a1 int64, _a2 int64) (r int64) {
	return X__syscall(tls, _n, _a1, _a2, int64(0), int64(0), int64(0), int64(0))
}

// linking msgrcv.o

// Xmsgrcv is defined at msgrcv.c:7:9
func Xmsgrcv(tls TLS, _q int32, _m uintptr /* *void */, _len uint64, _type int64, _flag int32) (r int64) {
	X__assert_fail(tls, ts+0 /* "TODO(ccgo)" */, ts+1084 /* "src/ipc/msgrcv.c" */, int32(10), x551__func__)
	return r
}

type t178__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t178__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t32size_t = uint64

type t3ssize_t = int64

// x1__func__ [7]int8, escapes: true, msgrcv.c:8:1
var x551__func__ = ds + 27952

// linking msgsnd.o

// Xmsgsnd is defined at msgsnd.c:7:5
func Xmsgsnd(tls TLS, _q int32, _m uintptr /* *void */, _len uint64, _flag int32) (r int32) {
	X__assert_fail(tls, ts+0 /* "TODO(ccgo)" */, ts+1104 /* "src/ipc/msgsnd.c" */, int32(10), x552__func__)
	return r
}

type t179__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t179__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t33size_t = uint64

// x1__func__ [7]int8, escapes: true, msgsnd.c:8:1
var x552__func__ = ds + 27960

// linking semctl.o

// Xsemctl is defined at semctl.c:18:5
func Xsemctl(tls TLS, _id int32, _num int32, _cmd int32, ap ...interface{}) (r int32) {
	esc := MustMalloc(8)
	var (
		_arg = esc   // *Usemun
		_ap  uintptr // Tva_list = T__builtin_va_list = ...truct{Fsize int32;Fdata int8;};}
		_r   int32
	)
	defer Free(esc)
	Copy(_arg, ts+1124 /* "\x00\x00\x00\x00\x00\x00\x00\x00" */, 8)
	switch _cmd {
	case int32(16):
		goto _2
	case int32(13):
		goto _3
	case int32(17):
		goto _4
	case int32(2):
		goto _5
	case int32(1):
		goto _6
	case int32(3):
		goto _7
	case int32(19):
		goto _8
	case int32(18):
		goto _9
	}
	goto _1

_2:
_3:
_4:
_5:
_6:
_7:
_8:
_9:
	_ap = X__builtin_va_start(tls, ap)
	X__assert_fail(tls, ts+0 /* "TODO(ccgo)" */, ts+1136 /* "src/ipc/semctl.c" */, int32(26), x553__func__)
	X__builtin_free(tls, _ap)
_1:
	_r = int32(x2__syscall4(tls, int64(66), int64(_id), int64(_num), int64(_cmd|int32(0)), int64(*(*uintptr)(unsafe.Pointer(_arg)))))
	return int32(X__syscall_ret(tls, uint64(_r)))
}

type t180__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t180__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// x1__func__ [7]int8, escapes: true, semctl.c:19:1
var x553__func__ = ds + 27968

type Usemun = struct {
	Fval   [0]int32
	Fbuf   [0]uintptr // *Ssemid_ds
	Farray [0]uintptr // *uint16
	F      int64
}

// x__syscall4 is defined at syscall_arch.h:42:22
func x2__syscall4(tls TLS, _n int64, _a1 int64, _a2 int64, _a3 int64, _a4 int64) (r int64) {
	return X__syscall(tls, _n, _a1, _a2, _a3, _a4, int64(0), int64(0))
}

type Ssemid_ds = struct {
	Fsem_perm        s1ipc_perm
	Fsem_otime       int64
	F__unused1       int64
	Fsem_ctime       int64
	F__unused2       int64
	Fsem_nsems       uint16
	F__sem_nsems_pad [6]int8
	F__unused3       int64
	F__unused4       int64
}

type s1ipc_perm = struct {
	Fkey    int32
	Fuid    uint32
	Fgid    uint32
	Fcuid   uint32
	Fcgid   uint32
	Fmode   uint32
	Fseq    int32
	F__pad1 int64
	F__pad2 int64
}

type t4time_t = int64

type t3key_t = int32

type t4uid_t = uint32

type t3gid_t = uint32

type t6mode_t = uint32

// linking semget.o

// Xsemget is defined at semget.c:7:5
func Xsemget(tls TLS, _key int32, _n int32, _fl int32) (r int32) {
	if _n <= int32(0xffff) {
		goto _1
	}

	return int32(X__syscall_ret(tls, uint64(18446744073709551594)))

_1:
	return int32(X__syscall_ret(tls, uint64(x8__syscall3(tls, int64(64), int64(_key), int64(_n), int64(_fl)))))
}

type t181__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t181__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t4key_t = int32

// x__syscall3 is defined at syscall_arch.h:33:22
func x8__syscall3(tls TLS, _n int64, _a1 int64, _a2 int64, _a3 int64) (r int64) {
	return X__syscall(tls, _n, _a1, _a2, _a3, int64(0), int64(0), int64(0))
}

// linking semop.o

// Xsemop is defined at semop.c:5:5
func Xsemop(tls TLS, _id int32, _buf uintptr /* *Ssembuf */, _n uint64) (r int32) {
	return int32(X__syscall_ret(tls, uint64(x9__syscall3(tls, int64(65), int64(_id), int64(_buf), int64(_n)))))
}

type t182__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t182__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t34size_t = uint64

type Ssembuf = struct {
	Fsem_num uint16
	Fsem_op  int16
	Fsem_flg int16
}

// x__syscall3 is defined at syscall_arch.h:33:22
func x9__syscall3(tls TLS, _n int64, _a1 int64, _a2 int64, _a3 int64) (r int64) {
	return X__syscall(tls, _n, _a1, _a2, _a3, int64(0), int64(0), int64(0))
}

// linking semtimedop.o

// Xsemtimedop is defined at semtimedop.c:6:5
func Xsemtimedop(tls TLS, _id int32, _buf uintptr /* *Ssembuf */, _n uint64, _ts uintptr /* *Stimespec */) (r int32) {
	return int32(X__syscall_ret(tls, uint64(x3__syscall4(tls, int64(220), int64(_id), int64(_buf), int64(_n), int64(_ts)))))
}

type t183__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t183__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t35size_t = uint64

type s1sembuf = struct {
	Fsem_num uint16
	Fsem_op  int16
	Fsem_flg int16
}

type s3timespec = struct {
	Ftv_sec  int64
	Ftv_nsec int64
}

// x__syscall4 is defined at syscall_arch.h:42:22
func x3__syscall4(tls TLS, _n int64, _a1 int64, _a2 int64, _a3 int64, _a4 int64) (r int64) {
	return X__syscall(tls, _n, _a1, _a2, _a3, _a4, int64(0), int64(0))
}

type t5time_t = int64

// linking shmat.o

// Xshmat is defined at shmat.c:6:6
func Xshmat(tls TLS, _id int32, _addr uintptr /* *void */, _flag int32) (r uintptr /* *void */) {
	return uintptr(X__syscall_ret(tls, uint64(x10__syscall3(tls, int64(30), int64(_id), int64(_addr), int64(_flag)))))
}

type t184__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t184__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// x__syscall3 is defined at syscall_arch.h:33:22
func x10__syscall3(tls TLS, _n int64, _a1 int64, _a2 int64, _a3 int64) (r int64) {
	return X__syscall(tls, _n, _a1, _a2, _a3, int64(0), int64(0), int64(0))
}

// linking shmctl.o

// Xshmctl is defined at shmctl.c:10:5
func Xshmctl(tls TLS, _id int32, _cmd int32, _buf uintptr /* *Sshmid_ds */) (r int32) {
	var _r int32

	_r = int32(x11__syscall3(tls, int64(31), int64(_id), int64(_cmd|int32(0)), int64(_buf)))
	return int32(X__syscall_ret(tls, uint64(_r)))
}

type t185__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t185__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type Sshmid_ds = struct {
	Fshm_perm   s2ipc_perm
	Fshm_segsz  uint64
	Fshm_atime  int64
	Fshm_dtime  int64
	Fshm_ctime  int64
	Fshm_cpid   int32
	Fshm_lpid   int32
	Fshm_nattch uint64
	F__pad1     uint64
	F__pad2     uint64
}

// x__syscall3 is defined at syscall_arch.h:33:22
func x11__syscall3(tls TLS, _n int64, _a1 int64, _a2 int64, _a3 int64) (r int64) {
	return X__syscall(tls, _n, _a1, _a2, _a3, int64(0), int64(0), int64(0))
}

type s2ipc_perm = struct {
	Fkey    int32
	Fuid    uint32
	Fgid    uint32
	Fcuid   uint32
	Fcgid   uint32
	Fmode   uint32
	Fseq    int32
	F__pad1 int64
	F__pad2 int64
}

type t36size_t = uint64

type t6time_t = int64

type t3pid_t = int32

type t5key_t = int32

type t5uid_t = uint32

type t4gid_t = uint32

type t7mode_t = uint32

// linking shmdt.o

// Xshmdt is defined at shmdt.c:5:5
func Xshmdt(tls TLS, _addr uintptr /* *void */) (r int32) {
	return int32(X__syscall_ret(tls, uint64(x2__syscall1(tls, int64(67), int64(_addr)))))
}

type t186__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t186__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// x__syscall1 is defined at syscall_arch.h:16:22
func x2__syscall1(tls TLS, _n int64, _a1 int64) (r int64) {
	return X__syscall(tls, _n, _a1, int64(0), int64(0), int64(0), int64(0), int64(0))
}

// linking shmget.o

// Xshmget is defined at shmget.c:6:5
func Xshmget(tls TLS, _key int32, _size uint64, _flag int32) (r int32) {
	if _size <= uint64(0x7fffffffffffffff) {
		goto _1
	}

	_size = uint64(0xffffffffffffffff)
_1:
	return int32(X__syscall_ret(tls, uint64(x12__syscall3(tls, int64(29), int64(_key), int64(_size), int64(_flag)))))
}

type t187__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t187__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t6key_t = int32

type t37size_t = uint64

// x__syscall3 is defined at syscall_arch.h:33:22
func x12__syscall3(tls TLS, _n int64, _a1 int64, _a2 int64, _a3 int64) (r int64) {
	return X__syscall(tls, _n, _a1, _a2, _a3, int64(0), int64(0), int64(0))
}

// linking __dlsym.o

type t188__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t188__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// xstub_dlsym is defined at __dlsym.c:7:13
func xstub_dlsym(tls TLS, _p uintptr /* *void */, _s uintptr /* *int8 */, _ra uintptr /* *void */) (r uintptr /* *void */) {
	X__dl_seterr(tls, ts+1156 /* "Symbol not found..." */, _s)
	return null
}

// linking dl_iterate_phdr.o

type t189__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t189__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

func fn554(p uintptr) func(TLS, uintptr, uint64, uintptr) int32 {
	return *(*func(TLS, uintptr, uint64, uintptr) int32)(unsafe.Pointer(&p))
}

// xstatic_dl_iterate_phdr is defined at dl_iterate_phdr.c:10:12
func xstatic_dl_iterate_phdr(tls TLS, _callback uintptr /* *func(TLS, uintptr, uint64, uintptr) int32 */, _data uintptr /* *void */) (r int32) {
	esc := MustMalloc(368)
	var (
		_p        uintptr // *uint8
		_phdr     uintptr // *TElf64_Phdr = struct{Fp_type ui...p_memsz uint64;Fp_align uint64;}
		_tls_phdr uintptr // *TElf64_Phdr = struct{Fp_type ui...p_memsz uint64;Fp_align uint64;}
		_base     uint64
		_n        uint64
		_info     = esc // *Sdl_phdr_info
		_i        uint64
		_aux      = esc + 64 // *[38]uint64
	)
	defer Free(esc)
	_tls_phdr = 0
	_base = uint64(0)
	Copy(_aux, ts+600 /* "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00..." */, 304)
	_i = uint64(0)
_1:
	if *(*uint64)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(X__libc + 16)) + 8*uintptr(_i))) == 0 {
		goto _3
	}

	if *(*uint64)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(X__libc + 16)) + 8*uintptr(_i))) >= uint64(38) {
		goto _4
	}

	*(*uint64)(unsafe.Pointer(_aux + 8*uintptr(*(*uint64)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(X__libc + 16)) + 8*uintptr(_i)))))) = *(*uint64)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(X__libc + 16)) + 8*uintptr(_i+uint64(1))))
_4:
	_i = _i + uint64(2)
	goto _1

_3:
	_p = uintptr(*(*uint64)(unsafe.Pointer(_aux + 24)))
	_n = *(*uint64)(unsafe.Pointer(_aux + 40))
_5:
	if _n == 0 {
		goto _7
	}

	_phdr = _p
	if *(*uint32)(unsafe.Pointer(_phdr)) != uint32(6) {
		goto _8
	}

	_base = *(*uint64)(unsafe.Pointer(_aux + 24)) - *(*uint64)(unsafe.Pointer(_phdr + 16))
_8:
	if *(*uint32)(unsafe.Pointer(_phdr)) != uint32(2) || X_DYNAMIC == 0 {
		goto _9
	}

	_base = uint64(X_DYNAMIC) - *(*uint64)(unsafe.Pointer(_phdr + 16))
_9:
	if *(*uint32)(unsafe.Pointer(_phdr)) != uint32(7) {
		goto _10
	}

	_tls_phdr = _phdr
_10:
	_n--
	_p += uintptr(*(*uint64)(unsafe.Pointer(_aux + 32)))
	goto _5

_7:
	*(*uint64)(unsafe.Pointer(_info)) = _base
	*(*uintptr)(unsafe.Pointer(_info + 8)) = ts + 1180 /* "/proc/self/exe" */
	*(*uintptr)(unsafe.Pointer(_info + 16)) = uintptr(*(*uint64)(unsafe.Pointer(_aux + 24)))
	*(*uint16)(unsafe.Pointer(_info + 24)) = uint16(*(*uint64)(unsafe.Pointer(_aux + 40)))
	*(*uint64)(unsafe.Pointer(_info + 32)) = uint64(0)
	*(*uint64)(unsafe.Pointer(_info + 40)) = uint64(0)
	if _tls_phdr == 0 {
		goto _11
	}

	*(*uint64)(unsafe.Pointer(_info + 48)) = uint64(1)
	*(*uintptr)(unsafe.Pointer(_info + 56)) = uintptr(_base + *(*uint64)(unsafe.Pointer(_tls_phdr + 16)))
	goto _12

_11:
	*(*uint64)(unsafe.Pointer(_info + 48)) = uint64(0)
	*(*uintptr)(unsafe.Pointer(_info + 56)) = null
_12:
	return fn554(_callback)(tls, _info, uint64(64), _data)
}

type t38size_t = uint64

type t2Elf64_Word = uint32

type t18uint32_t = uint32

type t2Elf64_Off = uint64

type t12uint64_t = uint64

type t2Elf64_Addr = uint64

type t2Elf64_Xword = uint64

type Sdl_phdr_info = struct {
	Fdlpi_addr      uint64
	Fdlpi_name      uintptr // *int8
	Fdlpi_phdr      uintptr // *TElf64_Phdr = struct{Fp_type ui...p_memsz uint64;Fp_align uint64;}
	Fdlpi_phnum     uint16
	Fdlpi_adds      uint64
	Fdlpi_subs      uint64
	Fdlpi_tls_modid uint64
	Fdlpi_tls_data  uintptr // *void
}

type t1Elf64_Half = uint16

type t1uint16_t = uint16

// linking dladdr.o

type t190__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t190__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// xstub_dladdr is defined at dladdr.c:5:12
func xstub_dladdr(tls TLS, _addr uintptr /* *void */, _info uintptr /* *TDl_info = struct{Fdli_fname *i...sname *int8;Fdli_saddr uintptr;} */) (r int32) {
	return int32(0)
}

// linking dlclose.o

// Xdlclose is defined at dlclose.c:7:5
func Xdlclose(tls TLS, _p uintptr /* *void */) (r int32) {
	X__assert_fail(tls, ts+0 /* "TODO(ccgo)" */, ts+1196 /* "src/ldso/dlclose..." */, int32(9), x555__func__)
	return r
}

type t191__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t191__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// x1__func__ [8]int8, escapes: true, dlclose.c:8:1
var x555__func__ = ds + 27976

// linking dlerror.o

func setb556(p *uint8, v int32) uint8 {
	w := uint8(v) & (1<<1 - 1)
	*p = (*p &^ ((1<<1 - 1) << 2)) | (w << 2)
	return w << (8 - 1) >> (8 - 1)
}

// Xdlerror is defined at dlerror.c:7:6
func Xdlerror(tls TLS) (r uintptr /* *int8 */) {
	var (
		_self uintptr // Tpthread_t = *S__pthread
		_s    uintptr // *int8
	)
	_self = x7__pthread_self(tls)
	if (*(*uint8)(unsafe.Pointer(_self + 74)) >> 2 << 7 >> 7) != 0 {
		goto _1
	}

	return null

_1:
	setb556((*uint8)(unsafe.Pointer(_self+74)), 0)
	_s = *(*uintptr)(unsafe.Pointer(_self + 208))
	if _s != uintptr(18446744073709551615) {
		goto _2
	}

	return ts + 1216 /* "Dynamic linker f..." */

	goto _3

_2:
	return _s

_3:
	return r
}

// X__dl_thread_cleanup is defined at dlerror.c:19:6
func X__dl_thread_cleanup(tls TLS) {
	var _self uintptr // Tpthread_t = *S__pthread

	_self = x7__pthread_self(tls)
	if *(*uintptr)(unsafe.Pointer(_self + 208)) == uintptr(18446744073709551615) {
		goto _1
	}

	Xfree(tls, *(*uintptr)(unsafe.Pointer(_self + 208)))
_1:
}

// X__dl_vseterr is defined at dlerror.c:27:6
func X__dl_vseterr(tls TLS, _fmt uintptr /* *int8 */, _ap uintptr) {
	var (
		_ap2  uintptr // Tva_list = T__builtin_va_list = ...truct{Fsize int32;Fdata int8;};}
		_self uintptr // Tpthread_t = *S__pthread
		_len  uint64
		_buf  uintptr // *int8
	)
	_ap2 = X__builtin_va_copy(tls, _ap)
	_self = x7__pthread_self(tls)
	if *(*uintptr)(unsafe.Pointer(_self + 208)) == uintptr(18446744073709551615) {
		goto _1
	}

	Xfree(tls, *(*uintptr)(unsafe.Pointer(_self + 208)))
_1:
	_len = uint64(Xvsnprintf(tls, null, uint64(0), _fmt, _ap2))
	X__builtin_free(tls, _ap2)
	_buf = Xmalloc(tls, _len+uint64(1))
	if _buf == 0 {
		goto _2
	}

	Xvsnprintf(tls, _buf, _len+uint64(1), _fmt, _ap)
	goto _3

_2:
	_buf = uintptr(18446744073709551615)
_3:
	*(*uintptr)(unsafe.Pointer(_self + 208)) = _buf
	setb556((*uint8)(unsafe.Pointer(_self+74)), 1)
}

// X__dl_seterr is defined at dlerror.c:47:6
func X__dl_seterr(tls TLS, _fmt uintptr /* *int8 */, ap ...interface{}) {
	var _ap uintptr // Tva_list = T__builtin_va_list = ...truct{Fsize int32;Fdata int8;};}

	_ap = X__builtin_va_start(tls, ap)
	X__dl_vseterr(tls, _fmt, _ap)
	X__builtin_free(tls, _ap)
}

type t192__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t192__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type s11__pthread = struct {
	Fself          uintptr // *S__pthread
	Fdtv           uintptr // **void
	Funused1       uintptr // *void
	Funused2       uintptr // *void
	Fsysinfo       uint64
	Fcanary        uint64
	Fcanary2       uint64
	Ftid           int32
	Ferrno_val     int32
	Fdetach_state  int32
	Fcancel        int32
	Fcanceldisable uint8
	Fcancelasync   uint8
	F74            uint8
	Fmap_base      uintptr // *uint8
	Fmap_size      uint64
	Fstack         uintptr // *void
	Fstack_size    uint64
	Fguard_size    uint64
	Fstart_arg     uintptr // *void
	Fstart         uintptr // *func(TLS, uintptr) uintptr
	Fresult        uintptr // *void
	Fcancelbuf     uintptr // *S__ptcb
	Ftsd           uintptr // **void
	Frobust_list   struct {
		Fhead    uintptr
		Foff     int64
		Fpending uintptr
	}
	Ftimer_id      int32
	Flocale        uintptr // Tlocale_t = *S__locale_struct
	Fkilllock      [1]int32
	Fdlerror_buf   uintptr // *int8
	Fstdio_locks   uintptr // *void
	Fcanary_at_end uint64
	Fdtv_copy      uintptr // **void
}

// x__pthread_self is defined at pthread_arch.h:1:30
func x7__pthread_self(tls TLS) (r uintptr /* *S__pthread */) {
	return uintptr(tls)
	return r
}

type t39size_t = uint64

// xstub_invalid_handle is defined at dlerror.c:58:12
func xstub_invalid_handle(tls TLS, _h uintptr /* *void */) (r int32) {
	X__dl_seterr(tls, ts+1276 /* "Invalid library ..." */, _h)
	return int32(1)
}

type t12uintptr_t = uint64

type s9__ptcb = struct {
	F__f    uintptr // *func(TLS, uintptr)
	F__x    uintptr // *void
	F__next uintptr // *S__ptcb
}

type s42__locale_struct = struct{ Fcat [6]uintptr }

// linking dlinfo.o

// Xdlinfo is defined at dlinfo.c:11:5
func Xdlinfo(tls TLS, _dso uintptr /* *void */, _req int32, _res uintptr /* *void */) (r int32) {
	X__assert_fail(tls, ts+0 /* "TODO(ccgo)" */, ts+1304 /* "src/ldso/dlinfo...." */, int32(13), x557__func__)
	if _req == int32(2) {
		goto _1
	}

	X__dl_seterr(tls, ts+1324 /* "Unsupported requ..." */, _req)
	return int32(-1)

_1:
	*(*uintptr)(unsafe.Pointer(_res)) = _dso
	return int32(0)
}

type t193__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t193__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// x1__func__ [7]int8, escapes: true, dlinfo.c:12:1
var x557__func__ = ds + 27984

// linking dlopen.o

type t194__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t194__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// xstub_dlopen is defined at dlopen.c:7:13
func xstub_dlopen(tls TLS, _file uintptr /* *int8 */, _mode int32) (r uintptr /* *void */) {
	X__dl_seterr(tls, ts+1348 /* "Dynamic loading ..." */)
	return null
}

// linking dlsym.o

// linking src/ldso/x86_64/dlsym.s

// .text
// .global dlsym
// .hidden __dlsym
// .type dlsym,@function
// dlsym:
// 	mov (%rsp),%rdx
// 	jmp __dlsym

// linking tlsdesc.o

// linking src/ldso/x86_64/tlsdesc.s

// .text
// .global __tlsdesc_static
// .hidden __tlsdesc_static
// .type __tlsdesc_static,@function
// __tlsdesc_static:
// 	mov 8(%rax),%rax
// 	ret
//
// .hidden __tls_get_new
//
// .global __tlsdesc_dynamic
// .hidden __tlsdesc_dynamic
// .type __tlsdesc_dynamic,@function
// __tlsdesc_dynamic:
// 	mov 8(%rax),%rax
// 	push %rdx
// 	mov %fs:8,%rdx
// 	push %rcx
// 	mov (%rax),%rcx
// 	cmp %rcx,(%rdx)
// 	jc 1f
// 	mov 8(%rax),%rax
// 	add (%rdx,%rcx,8),%rax
// 2:	pop %rcx
// 	sub %fs:0,%rax
// 	pop %rdx
// 	ret
// 1:	push %rdi
// 	push %rdi
// 	push %rsi
// 	push %r8
// 	push %r9
// 	push %r10
// 	push %r11
// 	mov %rax,%rdi
// 	call __tls_get_new
// 	pop %r11
// 	pop %r10
// 	pop %r9
// 	pop %r8
// 	pop %rsi
// 	pop %rdi
// 	pop %rdi
// 	jmp 2b

// linking cuserid.o

// Xcuserid is defined at cuserid.c:6:6
func Xcuserid(tls TLS, _buf uintptr /* *int8 */) (r uintptr /* *int8 */) {
	esc := MustMalloc(2112)
	var (
		_pw  = esc      // *Spasswd
		_ppw = esc + 48 // **Spasswd
		_pwb = esc + 64 // *[256]int64
	)
	defer Free(esc)
	if Xgetpwuid_r(tls, Xgeteuid(tls), _pw, _pwb, uint64(2048), _ppw) == 0 {
		goto _1
	}

	return null

_1:
	Xsnprintf(tls, _buf, uint64(20), ts+132 /* "%s" */, *(*uintptr)(unsafe.Pointer(_pw)))
	return _buf
}

type t195__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t195__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type Spasswd = struct {
	Fpw_name   uintptr // *int8
	Fpw_passwd uintptr // *int8
	Fpw_uid    uint32
	Fpw_gid    uint32
	Fpw_gecos  uintptr // *int8
	Fpw_dir    uintptr // *int8
	Fpw_shell  uintptr // *int8
}

type t6uid_t = uint32

type t5gid_t = uint32

type t40size_t = uint64

// linking daemon.o

func set558(p *int32, v int32) int32 { *p = v; return v }

// Xdaemon is defined at daemon.c:5:5
func Xdaemon(tls TLS, _nochdir int32, _noclose int32) (r int32) {
	var (
		_fd     int32
		_failed int32
	)
	if _nochdir != 0 || Xchdir(tls, ts+1380 /* "/" */) == 0 {
		goto _1
	}

	return int32(-1)

_1:
	if _noclose != 0 {
		goto _2
	}

	_failed = int32(0)
	if set558(&_fd, Xopen(tls, ts+1384 /* "/dev/null" */, int32(02))) >= int32(0) {
		goto _3
	}

	return int32(-1)

_3:
	if Xdup2(tls, _fd, int32(0)) >= int32(0) && Xdup2(tls, _fd, int32(1)) >= int32(0) && Xdup2(tls, _fd, int32(2)) >= int32(0) {
		goto _4
	}

	_failed++
_4:
	if _fd <= int32(2) {
		goto _5
	}

	Xclose(tls, _fd)
_5:
	if _failed == 0 {
		goto _6
	}

	return int32(-1)

_6:
_2:
	switch Xfork(tls) {
	case int32(0):
		goto _8
	case int32(-1):
		goto _9
	default:
		goto _10
	}
_8:
	goto _7

_9:
	return int32(-1)

_10:
	X_exit(tls, int32(0))
_7:
	if Xsetsid(tls) >= int32(0) {
		goto _11
	}

	return int32(-1)

_11:
	switch Xfork(tls) {
	case int32(0):
		goto _13
	case int32(-1):
		goto _14
	default:
		goto _15
	}
_13:
	goto _12

_14:
	return int32(-1)

_15:
	X_exit(tls, int32(0))
_12:
	return int32(0)
}

type t196__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t196__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t4pid_t = int32

// linking err.o

// Xvwarn is defined at err.c:8:6
func Xvwarn(tls TLS, _fmt uintptr /* *int8 */, _ap uintptr) {
	Xfprintf(tls, *(*uintptr)(unsafe.Pointer(Xstderr)), ts+1396 /* "%s: " */, *(*uintptr)(unsafe.Pointer(X__progname)))
	if _fmt == 0 {
		goto _1
	}

	Xvfprintf(tls, *(*uintptr)(unsafe.Pointer(Xstderr)), _fmt, _ap)
	Xfputs(tls, ts+1404 /* ": " */, *(*uintptr)(unsafe.Pointer(Xstderr)))
_1:
	Xperror(tls, null)
}

// Xvwarnx is defined at err.c:18:6
func Xvwarnx(tls TLS, _fmt uintptr /* *int8 */, _ap uintptr) {
	Xfprintf(tls, *(*uintptr)(unsafe.Pointer(Xstderr)), ts+1396 /* "%s: " */, *(*uintptr)(unsafe.Pointer(X__progname)))
	if _fmt == 0 {
		goto _1
	}

	Xvfprintf(tls, *(*uintptr)(unsafe.Pointer(Xstderr)), _fmt, _ap)
_1:
	Xputc(tls, int32('\n'), *(*uintptr)(unsafe.Pointer(Xstderr)))
}

// Xverr is defined at err.c:25:16
func Xverr(tls TLS, _status int32, _fmt uintptr /* *int8 */, _ap uintptr) {
	Xvwarn(tls, _fmt, _ap)
	Xexit(tls, _status)
}

// Xverrx is defined at err.c:31:16
func Xverrx(tls TLS, _status int32, _fmt uintptr /* *int8 */, _ap uintptr) {
	Xvwarnx(tls, _fmt, _ap)
	Xexit(tls, _status)
}

// Xwarn is defined at err.c:37:6
func Xwarn(tls TLS, _fmt uintptr /* *int8 */, ap ...interface{}) {
	var _ap uintptr // Tva_list = T__builtin_va_list = ...truct{Fsize int32;Fdata int8;};}

	_ap = X__builtin_va_start(tls, ap)
	Xvwarn(tls, _fmt, _ap)
	X__builtin_free(tls, _ap)
}

// Xwarnx is defined at err.c:45:6
func Xwarnx(tls TLS, _fmt uintptr /* *int8 */, ap ...interface{}) {
	var _ap uintptr // Tva_list = T__builtin_va_list = ...truct{Fsize int32;Fdata int8;};}

	_ap = X__builtin_va_start(tls, ap)
	Xvwarnx(tls, _fmt, _ap)
	X__builtin_free(tls, _ap)
}

// Xerr is defined at err.c:53:16
func Xerr(tls TLS, _status int32, _fmt uintptr /* *int8 */, ap ...interface{}) {
	var _ap uintptr // Tva_list = T__builtin_va_list = ...truct{Fsize int32;Fdata int8;};}

	_ap = X__builtin_va_start(tls, ap)
	Xverr(tls, _status, _fmt, _ap)
	X__builtin_free(tls, _ap)
}

// Xerrx is defined at err.c:61:16
func Xerrx(tls TLS, _status int32, _fmt uintptr /* *int8 */, ap ...interface{}) {
	var _ap uintptr // Tva_list = T__builtin_va_list = ...truct{Fsize int32;Fdata int8;};}

	_ap = X__builtin_va_start(tls, ap)
	Xverrx(tls, _status, _fmt, _ap)
	X__builtin_free(tls, _ap)
}

type t197__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t197__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// linking euidaccess.o

// Xeuidaccess is defined at euidaccess.c:6:5
func Xeuidaccess(tls TLS, _filename uintptr /* *int8 */, _amode int32) (r int32) {
	return Xfaccessat(tls, int32(-100), _filename, _amode, int32(0x200))
}

type t198__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t198__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// linking ftw.o

// Xftw is defined at ftw.c:5:5
func Xftw(tls TLS, _path uintptr /* *int8 */, _fn uintptr /* *func(TLS, uintptr, uintptr, int32) int32 */, _fd_limit int32) (r int32) {
	X__assert_fail(tls, ts+0 /* "TODO(ccgo)" */, ts+1408 /* "src/legacy/ftw.c" */, int32(10), x559__func__)
	return r
}

type t199__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t199__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// x1__func__ [4]int8, escapes: true, ftw.c:6:1
var x559__func__ = ds + 27992

// linking futimes.o

// Xfutimes is defined at futimes.c:5:5
func Xfutimes(tls TLS, _fd int32, _tv uintptr /* [2]Stimeval */) (r int32) {
	esc := MustMalloc(32)
	var _times = esc // *[2]Stimespec
	defer Free(esc)
	if _tv != 0 {
		goto _1
	}

	return Xfutimens(tls, _fd, null)

_1:
	*(*int64)(unsafe.Pointer(_times)) = *(*int64)(unsafe.Pointer(_tv))
	*(*int64)(unsafe.Pointer(_times + 8)) = *(*int64)(unsafe.Pointer(_tv + 8)) * int64(1000)
	*(*int64)(unsafe.Pointer(_times + 16)) = *(*int64)(unsafe.Pointer(_tv + 16))
	*(*int64)(unsafe.Pointer((_times + 16) + 8)) = *(*int64)(unsafe.Pointer((_tv + 16) + 8)) * int64(1000)
	return Xfutimens(tls, _fd, _times)
}

type t200__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t200__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type Stimeval = struct {
	Ftv_sec  int64
	Ftv_usec int64
}

type s4timespec = struct {
	Ftv_sec  int64
	Ftv_nsec int64
}

type t7time_t = int64

type Tsuseconds_t = int64

// linking getdtablesize.o

// Xgetdtablesize is defined at getdtablesize.c:6:5
func Xgetdtablesize(tls TLS) (r int32) {
	esc := MustMalloc(16)
	var _rl = esc // *Srlimit
	defer Free(esc)
	Xgetrlimit(tls, int32(7), _rl)
	if *(*uint64)(unsafe.Pointer(_rl)) < uint64(0x7fffffff) {
		return int32(*(*uint64)(unsafe.Pointer(_rl)))
	}

	return int32(0x7fffffff)
}

type t201__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t201__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type s1rlimit = struct {
	Frlim_cur uint64
	Frlim_max uint64
}

type t1rlim_t = uint64

// linking getloadavg.o

// Xgetloadavg is defined at getloadavg.c:5:5
func Xgetloadavg(tls TLS, _a uintptr /* *float64 */, _n int32) (r int32) {
	esc := MustMalloc(368)
	var (
		_si = esc // *Ssysinfo
		_i  int32
	)
	defer Free(esc)
	if _n > int32(0) {
		goto _1
	}

	if _n != 0 {
		return int32(-1)
	}

	return int32(0)

_1:
	Xsysinfo(tls, _si)
	if _n <= int32(3) {
		goto _2
	}

	_n = int32(3)
_2:
	_i = int32(0)
_3:
	if _i >= _n {
		goto _5
	}

	*(*float64)(unsafe.Pointer(_a + 8*uintptr(_i))) = float64(1.52587890625e-05) * float64(*(*uint64)(unsafe.Pointer((_si + 8) + 8*uintptr(_i))))
	_i++
	goto _3

_5:
	return _n
}

type t202__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t202__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type s1sysinfo = struct {
	Fuptime     uint64
	Floads      [3]uint64
	Ftotalram   uint64
	Ffreeram    uint64
	Fsharedram  uint64
	Fbufferram  uint64
	Ftotalswap  uint64
	Ffreeswap   uint64
	Fprocs      uint16
	Fpad        uint16
	Ftotalhigh  uint64
	Ffreehigh   uint64
	Fmem_unit   uint32
	F__reserved [256]int8
}

// linking getpagesize.o

// Xgetpagesize is defined at getpagesize.c:5:5
func Xgetpagesize(tls TLS) (r int32) {
	return int32(4096)
}

type t203__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t203__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// linking getpass.o

func set560(p *int32, v int32) int32 { *p = v; return v }

// Xgetpass is defined at getpass.c:8:6
func Xgetpass(tls TLS, _prompt uintptr /* *int8 */) (r uintptr /* *int8 */) {
	esc := MustMalloc(124)
	var (
		_fd int32
		_s  = esc      // *Stermios
		_t  = esc + 64 // *Stermios
		_l  int64
	)
	defer Free(esc)
	if set560(&_fd, Xopen(tls, ts+1428 /* "/dev/tty" */, int32(524546))) >= int32(0) {
		goto _1
	}

	return null

_1:
	Xtcgetattr(tls, _fd, _t)
	*(*Stermios)(unsafe.Pointer(_s)) = *(*Stermios)(unsafe.Pointer(_t))
	{
		p := (*uint32)(unsafe.Pointer(_t + 12))
		*p = *p & uint32(4294967286)
	}
	{
		p := (*uint32)(unsafe.Pointer(_t + 12))
		*p = *p | uint32(02)
	}
	{
		p := (*uint32)(unsafe.Pointer(_t))
		*p = *p & uint32(4294967103)
	}
	{
		p := (*uint32)(unsafe.Pointer(_t))
		*p = *p | uint32(0400)
	}
	Xtcsetattr(tls, _fd, int32(2), _t)
	Xtcdrain(tls, _fd)
	Xdprintf(tls, _fd, ts+132 /* "%s" */, _prompt)
	_l = Xread(tls, _fd, x561password, uint64(128))
	if _l < int64(0) {
		goto _2
	}

	if (_l <= int64(0) || int32(*(*int8)(unsafe.Pointer(x561password + uintptr(_l-int64(1))))) != int32('\n')) && uint64(_l) != uint64(128) {
		goto _3
	}

	_l--
_3:
	*(*int8)(unsafe.Pointer(x561password + uintptr(_l))) = int8(0)
_2:
	Xtcsetattr(tls, _fd, int32(2), _s)
	Xdprintf(tls, _fd, ts+1440 /* "\n" */)
	Xclose(tls, _fd)
	if _l < int64(0) {
		return null
	}

	return x561password
}

type t204__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t204__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// x1password [128]int8, escapes: true, getpass.c:13:14
var x561password = bss + 1784

type Stermios = struct {
	Fc_iflag    uint32
	Fc_oflag    uint32
	Fc_cflag    uint32
	Fc_lflag    uint32
	Fc_line     uint8
	Fc_cc       [32]uint8
	F__c_ispeed uint32
	F__c_ospeed uint32
}

type t4ssize_t = int64

type Ttcflag_t = uint32

type Tcc_t = uint8

type Tspeed_t = uint32

type t41size_t = uint64

// linking getusershell.o

// Xendusershell is defined at getusershell.c:11:6
func Xendusershell(tls TLS) {
	if xf == 0 {
		goto _1
	}

	Xfclose(tls, xf)
_1:
	xf = null
}

// Xsetusershell is defined at getusershell.c:17:6
func Xsetusershell(tls TLS) {
	if xf != 0 {
		goto _1
	}

	xf = Xfopen(tls, ts+1444 /* "/etc/shells" */, ts+1456 /* "rbe" */)
_1:
	if xf != 0 {
		goto _2
	}

	xf = Xfmemopen(tls, xdefshells, uint64(17), ts+1460 /* "rb" */)
_2:
}

// Xgetusershell is defined at getusershell.c:23:6
func Xgetusershell(tls TLS) (r uintptr /* *int8 */) {
	var _l int64

	if xf != 0 {
		goto _1
	}

	Xsetusershell(tls)
_1:
	if xf != 0 {
		goto _2
	}

	return null

_2:
	_l = Xgetline(tls, xline, xlinesize, xf)
	if _l > int64(0) {
		goto _3
	}

	return null

_3:
	if int32(*(*int8)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(xline)) + uintptr(_l-int64(1))))) != int32('\n') {
		goto _4
	}

	*(*int8)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(xline)) + uintptr(_l-int64(1)))) = int8(0)
_4:
	return *(*uintptr)(unsafe.Pointer(xline))
}

type t205__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t205__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// xf *TFILE = S_IO_FILE, escapes: false, getusershell.c:9:13
var xf uintptr

// xdefshells [18]int8, escapes: true, getusershell.c:5:19
var xdefshells = ds + 28000

type t5ssize_t = int64

// xline *int8, escapes: true, getusershell.c:7:13
var xline = bss + 1912

// xlinesize Tsize_t = uint64, escapes: true, getusershell.c:8:15
var xlinesize = bss + 1920

type t42size_t = uint64

type s3_IO_FILE struct{ uintptr }

// linking isastream.o

// Xisastream is defined at isastream.c:4:5
func Xisastream(tls TLS, _fd int32) (r int32) {
	if Xfcntl(tls, _fd, int32(1)) < int32(0) {
		return int32(-1)
	}

	return int32(0)
}

type t206__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t206__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// linking lutimes.o

// Xlutimes is defined at lutimes.c:6:5
func Xlutimes(tls TLS, _filename uintptr /* *int8 */, _tv uintptr /* [2]Stimeval */) (r int32) {
	esc := MustMalloc(32)
	var _times = esc // *[2]Stimespec
	defer Free(esc)
	*(*int64)(unsafe.Pointer(_times)) = *(*int64)(unsafe.Pointer(_tv))
	*(*int64)(unsafe.Pointer(_times + 8)) = *(*int64)(unsafe.Pointer(_tv + 8)) * int64(1000)
	*(*int64)(unsafe.Pointer(_times + 16)) = *(*int64)(unsafe.Pointer(_tv + 16))
	*(*int64)(unsafe.Pointer((_times + 16) + 8)) = *(*int64)(unsafe.Pointer((_tv + 16) + 8)) * int64(1000)
	return Xutimensat(tls, int32(-100), _filename, _times, int32(0x100))
}

type t207__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t207__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type s1timeval = struct {
	Ftv_sec  int64
	Ftv_usec int64
}

type s5timespec = struct {
	Ftv_sec  int64
	Ftv_nsec int64
}

type t8time_t = int64

type t1suseconds_t = int64

// linking ulimit.o

// Xulimit is defined at ulimit.c:5:6
func Xulimit(tls TLS, _cmd int32, ap ...interface{}) (r int64) {
	esc := MustMalloc(16)
	var (
		_rl  = esc // *Srlimit
		_val int64
		_ap  uintptr // Tva_list = T__builtin_va_list = ...truct{Fsize int32;Fdata int8;};}
	)
	defer Free(esc)
	Xgetrlimit(tls, int32(1), _rl)
	if _cmd != int32(2) {
		goto _1
	}

	_ap = X__builtin_va_start(tls, ap)
	_val = VAint64(_ap)
	X__builtin_free(tls, _ap)
	*(*uint64)(unsafe.Pointer(_rl)) = uint64(512) * uint64(_val)
	if Xsetrlimit(tls, int32(1), _rl) == 0 {
		goto _2
	}

	return int64(-1)

_2:
_1:
	return int64(*(*uint64)(unsafe.Pointer(_rl)) / uint64(512))
}

type t208__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t208__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type s2rlimit = struct {
	Frlim_cur uint64
	Frlim_max uint64
}

type t2rlim_t = uint64

// linking utmpx.o

// Xendutxent is defined at utmpx.c:6:6
func Xendutxent(tls TLS) {
}

// Xsetutxent is defined at utmpx.c:10:6
func Xsetutxent(tls TLS) {
}

// Xgetutxent is defined at utmpx.c:14:14
func Xgetutxent(tls TLS) (r uintptr /* *Sutmpx */) {
	return null
}

// Xgetutxid is defined at utmpx.c:19:14
func Xgetutxid(tls TLS, _ut uintptr /* *Sutmpx */) (r uintptr /* *Sutmpx */) {
	return null
}

// Xgetutxline is defined at utmpx.c:24:14
func Xgetutxline(tls TLS, _ut uintptr /* *Sutmpx */) (r uintptr /* *Sutmpx */) {
	return null
}

// Xpututxline is defined at utmpx.c:29:14
func Xpututxline(tls TLS, _ut uintptr /* *Sutmpx */) (r uintptr /* *Sutmpx */) {
	return null
}

// Xupdwtmpx is defined at utmpx.c:34:6
func Xupdwtmpx(tls TLS, _f uintptr /* *int8 */, _u uintptr /* *Sutmpx */) {
}

// X__utmpxname is defined at utmpx.c:38:5
func X__utmpxname(tls TLS, _f uintptr /* *int8 */) (r int32) {
	*(*int32)(unsafe.Pointer(X__errno_location(tls))) = int32(95)
	return int32(-1)
}

type t209__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t209__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type Sutmpx = struct {
	Fut_type int16
	Fut_pid  int32
	Fut_line [32]int8
	Fut_id   [4]int8
	Fut_user [32]int8
	Fut_host [256]int8
	Fut_exit struct {
		F__e_termination int16
		F__e_exit        int16
	}
	Fut_session int64
	Fut_tv      s2timeval
	Fut_addr_v6 [4]uint32
	F__unused   [20]int8
}

type t5pid_t = int32

type s2timeval = struct {
	Ftv_sec  int64
	Ftv_usec int64
}

type t9time_t = int64

type t2suseconds_t = int64

// linking valloc.o

type t210__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t210__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// linking adjtime.o

func set562(p *int64, v int64) int64 { *p = v; return v }

// Xadjtime is defined at adjtime.c:7:5
func Xadjtime(tls TLS, _in uintptr /* *Stimeval */, _out uintptr /* *Stimeval */) (r int32) {
	esc := MustMalloc(208)
	var _tx = esc // *Stimex
	defer Free(esc)
	Copy(_tx, ts+1464 /* "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00..." */, 208)
	if _in == 0 {
		goto _1
	}

	if *(*int64)(unsafe.Pointer(_in)) <= int64(1000) && *(*int64)(unsafe.Pointer(_in + 8)) <= int64(1000000000) {
		goto _2
	}

	*(*int32)(unsafe.Pointer(X__errno_location(tls))) = int32(22)
	return int32(-1)

_2:
	*(*int64)(unsafe.Pointer(_tx + 8)) = *(*int64)(unsafe.Pointer(_in))*int64(1000000) + *(*int64)(unsafe.Pointer(_in + 8))
	*(*uint32)(unsafe.Pointer(_tx)) = uint32(0x8001)
_1:
	if X__syscall_ret(tls, uint64(x3__syscall1(tls, int64(159), int64(_tx)))) >= int64(0) {
		goto _3
	}

	return int32(-1)

_3:
	if _out == 0 {
		goto _4
	}

	*(*int64)(unsafe.Pointer(_out)) = *(*int64)(unsafe.Pointer(_tx + 8)) / int64(1000000)
	if set562((*int64)(unsafe.Pointer(_out+8)), *(*int64)(unsafe.Pointer(_tx + 8))%int64(1000000)) >= int64(0) {
		goto _5
	}

	*(*int64)(unsafe.Pointer(_out))--
	{
		p := (*int64)(unsafe.Pointer(_out + 8))
		*p = *p + int64(1000000)
	}
_5:
_4:
	return int32(0)
}

type t211__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t211__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type s3timeval = struct {
	Ftv_sec  int64
	Ftv_usec int64
}

type Stimex = struct {
	Fmodes     uint32
	Foffset    int64
	Ffreq      int64
	Fmaxerror  int64
	Festerror  int64
	Fstatus    int32
	Fconstant  int64
	Fprecision int64
	Ftolerance int64
	Ftime      s3timeval
	Ftick      int64
	Fppsfreq   int64
	Fjitter    int64
	Fshift     int32
	Fstabil    int64
	Fjitcnt    int64
	Fcalcnt    int64
	Ferrcnt    int64
	Fstbcnt    int64
	Ftai       int32
	F__padding [11]int32
}

type t10time_t = int64

type t3suseconds_t = int64

// x__syscall1 is defined at syscall_arch.h:16:22
func x3__syscall1(tls TLS, _n int64, _a1 int64) (r int64) {
	return X__syscall(tls, _n, _a1, int64(0), int64(0), int64(0), int64(0), int64(0))
}

// linking adjtimex.o

// Xadjtimex is defined at adjtimex.c:4:5
func Xadjtimex(tls TLS, _tx uintptr /* *Stimex */) (r int32) {
	return int32(X__syscall_ret(tls, uint64(x4__syscall1(tls, int64(159), int64(_tx)))))
}

type t212__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t212__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type s1timex = struct {
	Fmodes     uint32
	Foffset    int64
	Ffreq      int64
	Fmaxerror  int64
	Festerror  int64
	Fstatus    int32
	Fconstant  int64
	Fprecision int64
	Ftolerance int64
	Ftime      s4timeval
	Ftick      int64
	Fppsfreq   int64
	Fjitter    int64
	Fshift     int32
	Fstabil    int64
	Fjitcnt    int64
	Fcalcnt    int64
	Ferrcnt    int64
	Fstbcnt    int64
	Ftai       int32
	F__padding [11]int32
}

// x__syscall1 is defined at syscall_arch.h:16:22
func x4__syscall1(tls TLS, _n int64, _a1 int64) (r int64) {
	return X__syscall(tls, _n, _a1, int64(0), int64(0), int64(0), int64(0), int64(0))
}

type s4timeval = struct {
	Ftv_sec  int64
	Ftv_usec int64
}

type t11time_t = int64

type t4suseconds_t = int64

// linking arch_prctl.o

// Xarch_prctl is defined at arch_prctl.c:3:5
func Xarch_prctl(tls TLS, _code int32, _addr uint64) (r int32) {
	return int32(X__syscall_ret(tls, uint64(x1__syscall2(tls, int64(158), int64(_code), int64(_addr)))))
}

type t213__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t213__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// x__syscall2 is defined at syscall_arch.h:24:22
func x1__syscall2(tls TLS, _n int64, _a1 int64, _a2 int64) (r int64) {
	return X__syscall(tls, _n, _a1, _a2, int64(0), int64(0), int64(0), int64(0))
}

// linking brk.o

// Xbrk is defined at brk.c:4:5
func Xbrk(tls TLS, _end uintptr /* *void */) (r int32) {
	return int32(X__syscall_ret(tls, uint64(18446744073709551604)))
}

type t214__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t214__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// linking cache.o

type t215__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t215__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// linking cap.o

// Xcapset is defined at cap.c:3:5
func Xcapset(tls TLS, _a uintptr /* *void */, _b uintptr /* *void */) (r int32) {
	return int32(X__syscall_ret(tls, uint64(x2__syscall2(tls, int64(126), int64(_a), int64(_b)))))
}

// Xcapget is defined at cap.c:8:5
func Xcapget(tls TLS, _a uintptr /* *void */, _b uintptr /* *void */) (r int32) {
	return int32(X__syscall_ret(tls, uint64(x2__syscall2(tls, int64(125), int64(_a), int64(_b)))))
}

type t216__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t216__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// x__syscall2 is defined at syscall_arch.h:24:22
func x2__syscall2(tls TLS, _n int64, _a1 int64, _a2 int64) (r int64) {
	return X__syscall(tls, _n, _a1, _a2, int64(0), int64(0), int64(0), int64(0))
}

// linking chroot.o

// Xchroot is defined at chroot.c:5:5
func Xchroot(tls TLS, _path uintptr /* *int8 */) (r int32) {
	return int32(X__syscall_ret(tls, uint64(x5__syscall1(tls, int64(161), int64(_path)))))
}

type t217__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t217__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// x__syscall1 is defined at syscall_arch.h:16:22
func x5__syscall1(tls TLS, _n int64, _a1 int64) (r int64) {
	return X__syscall(tls, _n, _a1, int64(0), int64(0), int64(0), int64(0), int64(0))
}

// linking clock_adjtime.o

// Xclock_adjtime is defined at clock_adjtime.c:4:5
func Xclock_adjtime(tls TLS, _clock_id int32, _utx uintptr /* *Stimex */) (r int32) {
	return int32(X__syscall_ret(tls, uint64(x3__syscall2(tls, int64(305), int64(_clock_id), int64(_utx)))))
}

type t218__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t218__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t1clockid_t = int32

type s2timex = struct {
	Fmodes     uint32
	Foffset    int64
	Ffreq      int64
	Fmaxerror  int64
	Festerror  int64
	Fstatus    int32
	Fconstant  int64
	Fprecision int64
	Ftolerance int64
	Ftime      s5timeval
	Ftick      int64
	Fppsfreq   int64
	Fjitter    int64
	Fshift     int32
	Fstabil    int64
	Fjitcnt    int64
	Fcalcnt    int64
	Ferrcnt    int64
	Fstbcnt    int64
	Ftai       int32
	F__padding [11]int32
}

// x__syscall2 is defined at syscall_arch.h:24:22
func x3__syscall2(tls TLS, _n int64, _a1 int64, _a2 int64) (r int64) {
	return X__syscall(tls, _n, _a1, _a2, int64(0), int64(0), int64(0), int64(0))
}

type s5timeval = struct {
	Ftv_sec  int64
	Ftv_usec int64
}

type t12time_t = int64

type t5suseconds_t = int64

// linking clone.o

// Xclone is defined at clone.c:6:5
func Xclone(tls TLS, _func uintptr /* *func(TLS, uintptr) int32 */, _stack uintptr /* *void */, _flags int32, _arg uintptr /* *void */, ap ...interface{}) (r int32) {
	var (
		_ap   uintptr // Tva_list = T__builtin_va_list = ...truct{Fsize int32;Fdata int8;};}
		_ptid uintptr // *Tpid_t = int32
		_ctid uintptr // *Tpid_t = int32
		_tls  uintptr // *void
	)
	_ap = X__builtin_va_start(tls, ap)
	_ptid = VAuintptr(_ap)
	_tls = VAuintptr(_ap)
	_ctid = VAuintptr(_ap)
	X__builtin_free(tls, _ap)
	return int32(X__syscall_ret(tls, uint64(X__clone(tls, _func, _stack, _flags, _arg, _ptid, _tls, _ctid))))
}

type t219__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t219__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// linking epoll.o

// Xepoll_create is defined at epoll.c:6:5
func Xepoll_create(tls TLS, _size int32) (r int32) {
	return Xepoll_create1(tls, int32(0))
}

// Xepoll_create1 is defined at epoll.c:11:5
func Xepoll_create1(tls TLS, _flags int32) (r int32) {
	var _r int32

	_r = int32(x6__syscall1(tls, int64(291), int64(_flags)))
	if _r != int32(-38) || _flags != 0 {
		goto _1
	}

	_r = int32(x6__syscall1(tls, int64(213), int64(1)))
_1:
	return int32(X__syscall_ret(tls, uint64(_r)))
}

// Xepoll_ctl is defined at epoll.c:20:5
func Xepoll_ctl(tls TLS, _fd int32, _op int32, _fd2 int32, _ev uintptr /* *Sepoll_event */) (r int32) {
	return int32(X__syscall_ret(tls, uint64(x4__syscall4(tls, int64(233), int64(_fd), int64(_op), int64(_fd2), int64(_ev)))))
}

// Xepoll_pwait is defined at epoll.c:25:5
func Xepoll_pwait(tls TLS, _fd int32, _ev uintptr /* *Sepoll_event */, _cnt int32, _to int32, _sigs uintptr /* *Tsigset_t = struct{F__bits [16]uint64;} */) (r int32) {
	var _r int32

	_r = int32(x2__syscall6(tls, int64(281), int64(_fd), int64(_ev), int64(_cnt), int64(_to), int64(_sigs), int64(8)))
	if _r != int32(-38) || _sigs != 0 {
		goto _1
	}

	_r = int32(x4__syscall4(tls, int64(232), int64(_fd), int64(_ev), int64(_cnt), int64(_to)))
_1:
	return int32(X__syscall_ret(tls, uint64(_r)))
}

// Xepoll_wait is defined at epoll.c:34:5
func Xepoll_wait(tls TLS, _fd int32, _ev uintptr /* *Sepoll_event */, _cnt int32, _to int32) (r int32) {
	return Xepoll_pwait(tls, _fd, _ev, _cnt, _to, null)
}

type t220__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t220__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// x__syscall1 is defined at syscall_arch.h:16:22
func x6__syscall1(tls TLS, _n int64, _a1 int64) (r int64) {
	return X__syscall(tls, _n, _a1, int64(0), int64(0), int64(0), int64(0), int64(0))
}

type Sepoll_event = struct {
	Fevents uint32
	Fdata   struct {
		Fptr [0]uintptr
		Ffd  [0]int32
		Fu32 [0]uint32
		Fu64 [0]uint64
		F    int64
	}
}

// x__syscall4 is defined at syscall_arch.h:42:22
func x4__syscall4(tls TLS, _n int64, _a1 int64, _a2 int64, _a3 int64, _a4 int64) (r int64) {
	return X__syscall(tls, _n, _a1, _a2, _a3, _a4, int64(0), int64(0))
}

// x__syscall6 is defined at syscall_arch.h:63:22
func x2__syscall6(tls TLS, _n int64, _a1 int64, _a2 int64, _a3 int64, _a4 int64, _a5 int64, _a6 int64) (r int64) {
	return X__syscall(tls, _n, _a1, _a2, _a3, _a4, _a5, _a6)
}

type t19uint32_t = uint32

type Tepoll_data_t = struct {
	Fptr [0]uintptr
	Ffd  [0]int32
	Fu32 [0]uint32
	Fu64 [0]uint64
	F    int64
}

type t13uint64_t = uint64

// linking eventfd.o

// Xeventfd is defined at eventfd.c:6:5
func Xeventfd(tls TLS, _count uint32, _flags int32) (r int32) {
	var _r int32

	_r = int32(x4__syscall2(tls, int64(290), int64(_count), int64(_flags)))
	if _r != int32(-38) || _flags != 0 {
		goto _1
	}

	_r = int32(x7__syscall1(tls, int64(284), int64(_count)))
_1:
	return int32(X__syscall_ret(tls, uint64(_r)))
}

// Xeventfd_read is defined at eventfd.c:15:5
func Xeventfd_read(tls TLS, _fd int32, _value uintptr /* *Teventfd_t = Tuint64_t = uint64 */) (r int32) {
	if uint64(8) == uint64(Xread(tls, _fd, _value, uint64(8))) {
		return int32(0)
	}

	return int32(-1)
}

// Xeventfd_write is defined at eventfd.c:20:5
func Xeventfd_write(tls TLS, _fd int32, avalue uint64) (r int32) {
	esc := MustMalloc(8)
	var _value = esc // *uint64
	defer Free(esc)
	*(*uint64)(unsafe.Pointer(_value)) = avalue
	if uint64(8) == uint64(Xwrite(tls, _fd, _value, uint64(8))) {
		return int32(0)
	}

	return int32(-1)
}

type t221__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t221__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// x__syscall2 is defined at syscall_arch.h:24:22
func x4__syscall2(tls TLS, _n int64, _a1 int64, _a2 int64) (r int64) {
	return X__syscall(tls, _n, _a1, _a2, int64(0), int64(0), int64(0), int64(0))
}

// x__syscall1 is defined at syscall_arch.h:16:22
func x7__syscall1(tls TLS, _n int64, _a1 int64) (r int64) {
	return X__syscall(tls, _n, _a1, int64(0), int64(0), int64(0), int64(0), int64(0))
}

type Teventfd_t = uint64

type t14uint64_t = uint64

type t43size_t = uint64

type t6ssize_t = int64

// linking fallocate.o

// Xfallocate is defined at fallocate.c:6:5
func Xfallocate(tls TLS, _fd int32, _mode int32, _base int64, _len int64) (r int32) {
	return int32(X__syscall_ret(tls, uint64(x5__syscall4(tls, int64(285), int64(_fd), int64(_mode), _base, _len))))
}

type t222__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t222__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t22off_t = int64

// x__syscall4 is defined at syscall_arch.h:42:22
func x5__syscall4(tls TLS, _n int64, _a1 int64, _a2 int64, _a3 int64, _a4 int64) (r int64) {
	return X__syscall(tls, _n, _a1, _a2, _a3, _a4, int64(0), int64(0))
}

// linking fanotify.o

// Xfanotify_init is defined at fanotify.c:4:5
func Xfanotify_init(tls TLS, _flags uint32, _event_f_flags uint32) (r int32) {
	return int32(X__syscall_ret(tls, uint64(x5__syscall2(tls, int64(300), int64(_flags), int64(_event_f_flags)))))
}

// Xfanotify_mark is defined at fanotify.c:9:5
func Xfanotify_mark(tls TLS, _fanotify_fd int32, _flags uint32, _mask uint64, _dfd int32, _pathname uintptr /* *int8 */) (r int32) {
	return int32(X__syscall_ret(tls, uint64(x__syscall5(tls, int64(301), int64(_fanotify_fd), int64(_flags), int64(_mask), int64(_dfd), int64(_pathname)))))
}

type t223__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t223__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// x__syscall2 is defined at syscall_arch.h:24:22
func x5__syscall2(tls TLS, _n int64, _a1 int64, _a2 int64) (r int64) {
	return X__syscall(tls, _n, _a1, _a2, int64(0), int64(0), int64(0), int64(0))
}

// x__syscall5 is defined at syscall_arch.h:52:22
func x__syscall5(tls TLS, _n int64, _a1 int64, _a2 int64, _a3 int64, _a4 int64, _a5 int64) (r int64) {
	return X__syscall(tls, _n, _a1, _a2, _a3, _a4, _a5, int64(0))
}

// linking flock.o

// Xflock is defined at flock.c:4:5
func Xflock(tls TLS, _fd int32, _op int32) (r int32) {
	return int32(X__syscall_ret(tls, uint64(x6__syscall2(tls, int64(73), int64(_fd), int64(_op)))))
}

type t224__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t224__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// x__syscall2 is defined at syscall_arch.h:24:22
func x6__syscall2(tls TLS, _n int64, _a1 int64, _a2 int64) (r int64) {
	return X__syscall(tls, _n, _a1, _a2, int64(0), int64(0), int64(0), int64(0))
}

// linking getrandom.o

// Xgetrandom is defined at getrandom.c:5:9
func Xgetrandom(tls TLS, _buf uintptr /* *void */, _buflen uint64, _flags uint32) (r int64) {
	X__assert_fail(tls, ts+0 /* "TODO(ccgo)" */, ts+1676 /* "src/linux/getran..." */, int32(7), x563__func__)
	return r
}

type t225__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t225__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t44size_t = uint64

type t7ssize_t = int64

// x1__func__ [10]int8, escapes: true, getrandom.c:6:1
var x563__func__ = ds + 28024

// linking inotify.o

// Xinotify_init is defined at inotify.c:5:5
func Xinotify_init(tls TLS) (r int32) {
	return Xinotify_init1(tls, int32(0))
}

// Xinotify_init1 is defined at inotify.c:9:5
func Xinotify_init1(tls TLS, _flags int32) (r int32) {
	var _r int32

	_r = int32(x8__syscall1(tls, int64(294), int64(_flags)))
	if _r != int32(-38) || _flags != 0 {
		goto _1
	}

	_r = int32(x__syscall0(tls, int64(253)))
_1:
	return int32(X__syscall_ret(tls, uint64(_r)))
}

// Xinotify_add_watch is defined at inotify.c:18:5
func Xinotify_add_watch(tls TLS, _fd int32, _pathname uintptr /* *int8 */, _mask uint32) (r int32) {
	return int32(X__syscall_ret(tls, uint64(x13__syscall3(tls, int64(254), int64(_fd), int64(_pathname), int64(_mask)))))
}

// Xinotify_rm_watch is defined at inotify.c:23:5
func Xinotify_rm_watch(tls TLS, _fd int32, _wd int32) (r int32) {
	return int32(X__syscall_ret(tls, uint64(x7__syscall2(tls, int64(255), int64(_fd), int64(_wd)))))
}

type t226__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t226__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// x__syscall1 is defined at syscall_arch.h:16:22
func x8__syscall1(tls TLS, _n int64, _a1 int64) (r int64) {
	return X__syscall(tls, _n, _a1, int64(0), int64(0), int64(0), int64(0), int64(0))
}

// x__syscall0 is defined at syscall_arch.h:8:22
func x__syscall0(tls TLS, _n int64) (r int64) {
	return X__syscall(tls, _n, int64(0), int64(0), int64(0), int64(0), int64(0), int64(0))
}

type t20uint32_t = uint32

// x__syscall3 is defined at syscall_arch.h:33:22
func x13__syscall3(tls TLS, _n int64, _a1 int64, _a2 int64, _a3 int64) (r int64) {
	return X__syscall(tls, _n, _a1, _a2, _a3, int64(0), int64(0), int64(0))
}

// x__syscall2 is defined at syscall_arch.h:24:22
func x7__syscall2(tls TLS, _n int64, _a1 int64, _a2 int64) (r int64) {
	return X__syscall(tls, _n, _a1, _a2, int64(0), int64(0), int64(0), int64(0))
}

// linking ioperm.o

// Xioperm is defined at ioperm.c:6:5
func Xioperm(tls TLS, _from uint64, _num uint64, _turn_on int32) (r int32) {
	return int32(X__syscall_ret(tls, uint64(x14__syscall3(tls, int64(173), int64(_from), int64(_num), int64(_turn_on)))))
}

type t227__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t227__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// x__syscall3 is defined at syscall_arch.h:33:22
func x14__syscall3(tls TLS, _n int64, _a1 int64, _a2 int64, _a3 int64) (r int64) {
	return X__syscall(tls, _n, _a1, _a2, _a3, int64(0), int64(0), int64(0))
}

// linking iopl.o

// Xiopl is defined at iopl.c:6:5
func Xiopl(tls TLS, _level int32) (r int32) {
	return int32(X__syscall_ret(tls, uint64(x9__syscall1(tls, int64(172), int64(_level)))))
}

type t228__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t228__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// x__syscall1 is defined at syscall_arch.h:16:22
func x9__syscall1(tls TLS, _n int64, _a1 int64) (r int64) {
	return X__syscall(tls, _n, _a1, int64(0), int64(0), int64(0), int64(0), int64(0))
}

// linking klogctl.o

// Xklogctl is defined at klogctl.c:4:5
func Xklogctl(tls TLS, _type int32, _buf uintptr /* *int8 */, _len int32) (r int32) {
	return int32(X__syscall_ret(tls, uint64(x15__syscall3(tls, int64(103), int64(_type), int64(_buf), int64(_len)))))
}

type t229__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t229__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// x__syscall3 is defined at syscall_arch.h:33:22
func x15__syscall3(tls TLS, _n int64, _a1 int64, _a2 int64, _a3 int64) (r int64) {
	return X__syscall(tls, _n, _a1, _a2, _a3, int64(0), int64(0), int64(0))
}

// linking memfd_create.o

// Xmemfd_create is defined at memfd_create.c:5:5
func Xmemfd_create(tls TLS, _name uintptr /* *int8 */, _flags uint32) (r int32) {
	return int32(X__syscall_ret(tls, uint64(x8__syscall2(tls, int64(319), int64(_name), int64(_flags)))))
}

type t230__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t230__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// x__syscall2 is defined at syscall_arch.h:24:22
func x8__syscall2(tls TLS, _n int64, _a1 int64, _a2 int64) (r int64) {
	return X__syscall(tls, _n, _a1, _a2, int64(0), int64(0), int64(0), int64(0))
}

// linking mlock2.o

// Xmlock2 is defined at mlock2.c:5:5
func Xmlock2(tls TLS, _addr uintptr /* *void */, _len uint64, _flags uint32) (r int32) {
	if _flags != uint32(0) {
		goto _1
	}

	return Xmlock(tls, _addr, _len)

_1:
	return int32(X__syscall_ret(tls, uint64(x16__syscall3(tls, int64(325), int64(_addr), int64(_len), int64(_flags)))))
}

type t231__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t231__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t45size_t = uint64

// x__syscall3 is defined at syscall_arch.h:33:22
func x16__syscall3(tls TLS, _n int64, _a1 int64, _a2 int64, _a3 int64) (r int64) {
	return X__syscall(tls, _n, _a1, _a2, _a3, int64(0), int64(0), int64(0))
}

// linking module.o

// Xinit_module is defined at module.c:3:5
func Xinit_module(tls TLS, _a uintptr /* *void */, _b uint64, _c uintptr /* *int8 */) (r int32) {
	return int32(X__syscall_ret(tls, uint64(x17__syscall3(tls, int64(175), int64(_a), int64(_b), int64(_c)))))
}

// Xdelete_module is defined at module.c:8:5
func Xdelete_module(tls TLS, _a uintptr /* *int8 */, _b uint32) (r int32) {
	return int32(X__syscall_ret(tls, uint64(x9__syscall2(tls, int64(176), int64(_a), int64(_b)))))
}

type t232__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t232__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// x__syscall3 is defined at syscall_arch.h:33:22
func x17__syscall3(tls TLS, _n int64, _a1 int64, _a2 int64, _a3 int64) (r int64) {
	return X__syscall(tls, _n, _a1, _a2, _a3, int64(0), int64(0), int64(0))
}

// x__syscall2 is defined at syscall_arch.h:24:22
func x9__syscall2(tls TLS, _n int64, _a1 int64, _a2 int64) (r int64) {
	return X__syscall(tls, _n, _a1, _a2, int64(0), int64(0), int64(0), int64(0))
}

// linking mount.o

// Xmount is defined at mount.c:4:5
func Xmount(tls TLS, _special uintptr /* *int8 */, _dir uintptr /* *int8 */, _fstype uintptr /* *int8 */, _flags uint64, _data uintptr /* *void */) (r int32) {
	return int32(X__syscall_ret(tls, uint64(x1__syscall5(tls, int64(165), int64(_special), int64(_dir), int64(_fstype), int64(_flags), int64(_data)))))
}

// Xumount is defined at mount.c:9:5
func Xumount(tls TLS, _special uintptr /* *int8 */) (r int32) {
	return int32(X__syscall_ret(tls, uint64(x10__syscall2(tls, int64(166), int64(_special), int64(0)))))
}

// Xumount2 is defined at mount.c:14:5
func Xumount2(tls TLS, _special uintptr /* *int8 */, _flags int32) (r int32) {
	return int32(X__syscall_ret(tls, uint64(x10__syscall2(tls, int64(166), int64(_special), int64(_flags)))))
}

type t233__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t233__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// x__syscall5 is defined at syscall_arch.h:52:22
func x1__syscall5(tls TLS, _n int64, _a1 int64, _a2 int64, _a3 int64, _a4 int64, _a5 int64) (r int64) {
	return X__syscall(tls, _n, _a1, _a2, _a3, _a4, _a5, int64(0))
}

// x__syscall2 is defined at syscall_arch.h:24:22
func x10__syscall2(tls TLS, _n int64, _a1 int64, _a2 int64) (r int64) {
	return X__syscall(tls, _n, _a1, _a2, int64(0), int64(0), int64(0), int64(0))
}

// linking personality.o

// Xpersonality is defined at personality.c:4:5
func Xpersonality(tls TLS, _persona uint64) (r int32) {
	return int32(X__syscall_ret(tls, uint64(x10__syscall1(tls, int64(135), int64(_persona)))))
}

type t234__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t234__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// x__syscall1 is defined at syscall_arch.h:16:22
func x10__syscall1(tls TLS, _n int64, _a1 int64) (r int64) {
	return X__syscall(tls, _n, _a1, int64(0), int64(0), int64(0), int64(0), int64(0))
}

// linking pivot_root.o

// Xpivot_root is defined at pivot_root.c:3:5
func Xpivot_root(tls TLS, _new uintptr /* *int8 */, _old uintptr /* *int8 */) (r int32) {
	return int32(X__syscall_ret(tls, uint64(x11__syscall2(tls, int64(155), int64(_new), int64(_old)))))
}

type t235__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t235__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// x__syscall2 is defined at syscall_arch.h:24:22
func x11__syscall2(tls TLS, _n int64, _a1 int64, _a2 int64) (r int64) {
	return X__syscall(tls, _n, _a1, _a2, int64(0), int64(0), int64(0), int64(0))
}

// linking ppoll.o

// Xppoll is defined at ppoll.c:7:5
func Xppoll(tls TLS, _fds uintptr /* *Spollfd */, _n uint64, _to uintptr /* *Stimespec */, _mask uintptr /* *Tsigset_t = struct{F__bits [16]uint64;} */) (r int32) {
	X__assert_fail(tls, ts+0 /* "TODO(ccgo)" */, ts+1700 /* "src/linux/ppoll...." */, int32(9), x564__func__)
	X__assert_fail(tls, ts+0 /* "TODO(ccgo)" */, ts+1700 /* "src/linux/ppoll...." */, int32(11), x564__func__)
	return r
}

type t236__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t236__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type Tnfds_t = uint64

type s1pollfd = struct {
	Ffd      int32
	Fevents  int16
	Frevents int16
}

type s6timespec = struct {
	Ftv_sec  int64
	Ftv_nsec int64
}

// x1__func__ [6]int8, escapes: true, ppoll.c:8:1
var x564__func__ = ds + 28040

type t13time_t = int64

// linking prctl.o

// Xprctl is defined at prctl.c:5:5
func Xprctl(tls TLS, _op int32, ap ...interface{}) (r int32) {
	esc := MustMalloc(32)
	var (
		_x  = esc // *[4]uint64
		_i  int32
		_ap uintptr // Tva_list = T__builtin_va_list = ...truct{Fsize int32;Fdata int8;};}
	)
	defer Free(esc)
	_ap = X__builtin_va_start(tls, ap)
	_i = int32(0)
_1:
	if _i >= int32(4) {
		goto _3
	}

	*(*uint64)(unsafe.Pointer(_x + 8*uintptr(_i))) = VAuint64(_ap)
	_i++
	goto _1

_3:
	X__builtin_free(tls, _ap)
	return int32(X__syscall_ret(tls, uint64(x2__syscall5(tls, int64(157), int64(_op), int64(*(*uint64)(unsafe.Pointer(_x))), int64(*(*uint64)(unsafe.Pointer(_x + 8))), int64(*(*uint64)(unsafe.Pointer(_x + 16))), int64(*(*uint64)(unsafe.Pointer(_x + 24)))))))
}

type t237__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t237__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// x__syscall5 is defined at syscall_arch.h:52:22
func x2__syscall5(tls TLS, _n int64, _a1 int64, _a2 int64, _a3 int64, _a4 int64, _a5 int64) (r int64) {
	return X__syscall(tls, _n, _a1, _a2, _a3, _a4, _a5, int64(0))
}

// linking prlimit.o

// Xprlimit is defined at prlimit.c:8:5
func Xprlimit(tls TLS, _pid int32, _resource int32, _new_limit uintptr /* *Srlimit */, _old_limit uintptr /* *Srlimit */) (r int32) {
	esc := MustMalloc(16)
	var (
		_tmp = esc // *Srlimit
		_r   int32
	)
	defer Free(esc)

	goto _1

	*(*s3rlimit)(unsafe.Pointer(_tmp)) = *(*s3rlimit)(unsafe.Pointer(_new_limit))
	if *(*uint64)(unsafe.Pointer(_tmp)) < uint64(18446744073709551615) {
		goto _3
	}

	*(*uint64)(unsafe.Pointer(_tmp)) = uint64(18446744073709551615)
_3:
	if *(*uint64)(unsafe.Pointer(_tmp + 8)) < uint64(18446744073709551615) {
		goto _5
	}

	*(*uint64)(unsafe.Pointer(_tmp + 8)) = uint64(18446744073709551615)
_5:
	_new_limit = _tmp
_1:
	_r = int32(X__syscall_ret(tls, uint64(x6__syscall4(tls, int64(302), int64(_pid), int64(_resource), int64(_new_limit), int64(_old_limit)))))

	goto _6

	if *(*uint64)(unsafe.Pointer(_old_limit)) < uint64(18446744073709551615) {
		goto _8
	}

	*(*uint64)(unsafe.Pointer(_old_limit)) = uint64(18446744073709551615)
_8:
	if *(*uint64)(unsafe.Pointer(_old_limit + 8)) < uint64(18446744073709551615) {
		goto _10
	}

	*(*uint64)(unsafe.Pointer(_old_limit + 8)) = uint64(18446744073709551615)
_10:
_6:
	return _r
}

type t238__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t238__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t6pid_t = int32

type s3rlimit = struct {
	Frlim_cur uint64
	Frlim_max uint64
}

type t3rlim_t = uint64

// x__syscall4 is defined at syscall_arch.h:42:22
func x6__syscall4(tls TLS, _n int64, _a1 int64, _a2 int64, _a3 int64, _a4 int64) (r int64) {
	return X__syscall(tls, _n, _a1, _a2, _a3, _a4, int64(0), int64(0))
}

// linking process_vm.o

// Xprocess_vm_writev is defined at process_vm.c:5:9
func Xprocess_vm_writev(tls TLS, _pid int32, _lvec uintptr /* *Siovec */, _liovcnt uint64, _rvec uintptr /* *Siovec */, _riovcnt uint64, _flags uint64) (r int64) {
	return X__syscall_ret(tls, uint64(x3__syscall6(tls, int64(311), int64(_pid), int64(_lvec), int64(_liovcnt), int64(_rvec), int64(_riovcnt), int64(_flags))))
}

// Xprocess_vm_readv is defined at process_vm.c:10:9
func Xprocess_vm_readv(tls TLS, _pid int32, _lvec uintptr /* *Siovec */, _liovcnt uint64, _rvec uintptr /* *Siovec */, _riovcnt uint64, _flags uint64) (r int64) {
	return X__syscall_ret(tls, uint64(x3__syscall6(tls, int64(310), int64(_pid), int64(_lvec), int64(_liovcnt), int64(_rvec), int64(_riovcnt), int64(_flags))))
}

type t239__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t239__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t7pid_t = int32

type t8ssize_t = int64

type Siovec = struct {
	Fiov_base uintptr // *void
	Fiov_len  uint64
}

// x__syscall6 is defined at syscall_arch.h:63:22
func x3__syscall6(tls TLS, _n int64, _a1 int64, _a2 int64, _a3 int64, _a4 int64, _a5 int64, _a6 int64) (r int64) {
	return X__syscall(tls, _n, _a1, _a2, _a3, _a4, _a5, _a6)
}

type t46size_t = uint64

// linking ptrace.o

// Xptrace is defined at ptrace.c:6:6
func Xptrace(tls TLS, _req int32, ap ...interface{}) (r int64) {
	esc := MustMalloc(8)
	var (
		_ap     uintptr // Tva_list = T__builtin_va_list = ...truct{Fsize int32;Fdata int8;};}
		_pid    int32
		_addr   uintptr // *void
		_data   uintptr // *void
		_addr2  uintptr // *void
		_ret    int64
		_result = esc // *int64
	)
	defer Free(esc)
	_addr2 = 0
	_ap = X__builtin_va_start(tls, ap)
	_pid = VAint32(_ap)
	_addr = VAuintptr(_ap)
	_data = VAuintptr(_ap)
	X__builtin_free(tls, _ap)
	if uint32(_req)-uint32(1) >= uint32(3) {
		goto _1
	}

	_data = _result
_1:
	_ret = X__syscall_ret(tls, uint64(x3__syscall5(tls, int64(101), int64(_req), int64(_pid), int64(_addr), int64(_data), int64(_addr2))))
	if _ret >= int64(0) && uint32(_req)-uint32(1) < uint32(3) {
		goto _2
	}

	return _ret

_2:
	return *(*int64)(unsafe.Pointer(_result))
}

type t240__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t240__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t8pid_t = int32

// x__syscall5 is defined at syscall_arch.h:52:22
func x3__syscall5(tls TLS, _n int64, _a1 int64, _a2 int64, _a3 int64, _a4 int64, _a5 int64) (r int64) {
	return X__syscall(tls, _n, _a1, _a2, _a3, _a4, _a5, int64(0))
}

// linking quotactl.o

// Xquotactl is defined at quotactl.c:4:5
func Xquotactl(tls TLS, _cmd int32, _special uintptr /* *int8 */, _id int32, _addr uintptr /* *int8 */) (r int32) {
	return int32(X__syscall_ret(tls, uint64(x7__syscall4(tls, int64(179), int64(_cmd), int64(_special), int64(_id), int64(_addr)))))
}

type t241__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t241__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// x__syscall4 is defined at syscall_arch.h:42:22
func x7__syscall4(tls TLS, _n int64, _a1 int64, _a2 int64, _a3 int64, _a4 int64) (r int64) {
	return X__syscall(tls, _n, _a1, _a2, _a3, _a4, int64(0), int64(0))
}

// linking readahead.o

// Xreadahead is defined at readahead.c:5:9
func Xreadahead(tls TLS, _fd int32, _pos int64, _len uint64) (r int64) {
	return X__syscall_ret(tls, uint64(x18__syscall3(tls, int64(187), int64(_fd), _pos, int64(_len))))
}

type t242__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t242__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t23off_t = int64

type t47size_t = uint64

type t9ssize_t = int64

// x__syscall3 is defined at syscall_arch.h:33:22
func x18__syscall3(tls TLS, _n int64, _a1 int64, _a2 int64, _a3 int64) (r int64) {
	return X__syscall(tls, _n, _a1, _a2, _a3, int64(0), int64(0), int64(0))
}

// linking reboot.o

// Xreboot is defined at reboot.c:4:5
func Xreboot(tls TLS, _type int32) (r int32) {
	return int32(X__syscall_ret(tls, uint64(x19__syscall3(tls, int64(169), int64(4276215469), int64(672274793), int64(_type)))))
}

type t243__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t243__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// x__syscall3 is defined at syscall_arch.h:33:22
func x19__syscall3(tls TLS, _n int64, _a1 int64, _a2 int64, _a3 int64) (r int64) {
	return X__syscall(tls, _n, _a1, _a2, _a3, int64(0), int64(0), int64(0))
}

// linking remap_file_pages.o

// Xremap_file_pages is defined at remap_file_pages.c:5:5
func Xremap_file_pages(tls TLS, _addr uintptr /* *void */, _size uint64, _prot int32, _pgoff uint64, _flags int32) (r int32) {
	return int32(X__syscall_ret(tls, uint64(x4__syscall5(tls, int64(216), int64(_addr), int64(_size), int64(_prot), int64(_pgoff), int64(_flags)))))
}

type t244__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t244__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t48size_t = uint64

// x__syscall5 is defined at syscall_arch.h:52:22
func x4__syscall5(tls TLS, _n int64, _a1 int64, _a2 int64, _a3 int64, _a4 int64, _a5 int64) (r int64) {
	return X__syscall(tls, _n, _a1, _a2, _a3, _a4, _a5, int64(0))
}

// linking sbrk.o

// Xsbrk is defined at sbrk.c:5:6
func Xsbrk(tls TLS, _inc int64) (r uintptr /* *void */) {
	if _inc == 0 {
		goto _1
	}

	return uintptr(X__syscall_ret(tls, uint64(18446744073709551604)))

_1:
	return uintptr(x11__syscall1(tls, int64(12), int64(0)))
}

type t245__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t245__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type Tintptr_t = int64

// x__syscall1 is defined at syscall_arch.h:16:22
func x11__syscall1(tls TLS, _n int64, _a1 int64) (r int64) {
	return X__syscall(tls, _n, _a1, int64(0), int64(0), int64(0), int64(0), int64(0))
}

// linking sendfile.o

// Xsendfile is defined at sendfile.c:5:9
func Xsendfile(tls TLS, _out_fd int32, _in_fd int32, _ofs uintptr /* *Toff_t = int64 */, _count uint64) (r int64) {
	return X__syscall_ret(tls, uint64(x8__syscall4(tls, int64(40), int64(_out_fd), int64(_in_fd), int64(_ofs), int64(_count))))
}

type t246__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t246__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t49size_t = uint64

type t10ssize_t = int64

// x__syscall4 is defined at syscall_arch.h:42:22
func x8__syscall4(tls TLS, _n int64, _a1 int64, _a2 int64, _a3 int64, _a4 int64) (r int64) {
	return X__syscall(tls, _n, _a1, _a2, _a3, _a4, int64(0), int64(0))
}

// linking setfsgid.o

// Xsetfsgid is defined at setfsgid.c:5:5
func Xsetfsgid(tls TLS, _gid uint32) (r int32) {
	return int32(X__syscall_ret(tls, uint64(x12__syscall1(tls, int64(123), int64(_gid)))))
}

type t247__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t247__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t6gid_t = uint32

// x__syscall1 is defined at syscall_arch.h:16:22
func x12__syscall1(tls TLS, _n int64, _a1 int64) (r int64) {
	return X__syscall(tls, _n, _a1, int64(0), int64(0), int64(0), int64(0), int64(0))
}

// linking setfsuid.o

// Xsetfsuid is defined at setfsuid.c:5:5
func Xsetfsuid(tls TLS, _uid uint32) (r int32) {
	return int32(X__syscall_ret(tls, uint64(x13__syscall1(tls, int64(122), int64(_uid)))))
}

type t248__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t248__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t7uid_t = uint32

// x__syscall1 is defined at syscall_arch.h:16:22
func x13__syscall1(tls TLS, _n int64, _a1 int64) (r int64) {
	return X__syscall(tls, _n, _a1, int64(0), int64(0), int64(0), int64(0), int64(0))
}

// linking setgroups.o

// Xsetgroups is defined at setgroups.c:5:5
func Xsetgroups(tls TLS, _count uint64, _list uintptr /* uintptr */) (r int32) {
	return int32(X__syscall_ret(tls, uint64(x12__syscall2(tls, int64(116), int64(_count), int64(_list)))))
}

type t249__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t249__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t50size_t = uint64

// x__syscall2 is defined at syscall_arch.h:24:22
func x12__syscall2(tls TLS, _n int64, _a1 int64, _a2 int64) (r int64) {
	return X__syscall(tls, _n, _a1, _a2, int64(0), int64(0), int64(0), int64(0))
}

// linking sethostname.o

// Xsethostname is defined at sethostname.c:5:5
func Xsethostname(tls TLS, _name uintptr /* *int8 */, _len uint64) (r int32) {
	return int32(X__syscall_ret(tls, uint64(x13__syscall2(tls, int64(170), int64(_name), int64(_len)))))
}

type t250__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t250__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t51size_t = uint64

// x__syscall2 is defined at syscall_arch.h:24:22
func x13__syscall2(tls TLS, _n int64, _a1 int64, _a2 int64) (r int64) {
	return X__syscall(tls, _n, _a1, _a2, int64(0), int64(0), int64(0), int64(0))
}

// linking setns.o

// Xsetns is defined at setns.c:5:5
func Xsetns(tls TLS, _fd int32, _nstype int32) (r int32) {
	return int32(X__syscall_ret(tls, uint64(x14__syscall2(tls, int64(308), int64(_fd), int64(_nstype)))))
}

type t251__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t251__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// x__syscall2 is defined at syscall_arch.h:24:22
func x14__syscall2(tls TLS, _n int64, _a1 int64, _a2 int64) (r int64) {
	return X__syscall(tls, _n, _a1, _a2, int64(0), int64(0), int64(0), int64(0))
}

// linking settimeofday.o

// Xsettimeofday is defined at settimeofday.c:5:5
func Xsettimeofday(tls TLS, _tv uintptr /* *Stimeval */, _tz uintptr /* *Stimezone */) (r int32) {
	return int32(X__syscall_ret(tls, uint64(x15__syscall2(tls, int64(164), int64(_tv), int64(0)))))
}

type t252__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t252__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type s6timeval = struct {
	Ftv_sec  int64
	Ftv_usec int64
}

type Stimezone = struct {
	Ftz_minuteswest int32
	Ftz_dsttime     int32
}

// x__syscall2 is defined at syscall_arch.h:24:22
func x15__syscall2(tls TLS, _n int64, _a1 int64, _a2 int64) (r int64) {
	return X__syscall(tls, _n, _a1, _a2, int64(0), int64(0), int64(0), int64(0))
}

type t14time_t = int64

type t6suseconds_t = int64

// linking signalfd.o

// Xsignalfd is defined at signalfd.c:7:5
func Xsignalfd(tls TLS, _fd int32, _sigs uintptr /* *Tsigset_t = struct{F__bits [16]uint64;} */, _flags int32) (r int32) {
	var _ret int32

	_ret = int32(x9__syscall4(tls, int64(289), int64(_fd), int64(_sigs), int64(8), int64(_flags)))
	if _ret == int32(-38) {
		goto _1
	}

	return int32(X__syscall_ret(tls, uint64(_ret)))

_1:
	_ret = int32(x20__syscall3(tls, int64(282), int64(_fd), int64(_sigs), int64(8)))
	if _ret < int32(0) {
		goto _2
	}

	if (_flags & int32(02000000)) == 0 {
		goto _3
	}

	x20__syscall3(tls, int64(72), int64(_ret), int64(2), int64(1))
_3:
	if (_flags & int32(04000)) == 0 {
		goto _4
	}

	x20__syscall3(tls, int64(72), int64(_ret), int64(4), int64(2048))
_4:
_2:
	return int32(X__syscall_ret(tls, uint64(_ret)))
}

type t253__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t253__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// x__syscall4 is defined at syscall_arch.h:42:22
func x9__syscall4(tls TLS, _n int64, _a1 int64, _a2 int64, _a3 int64, _a4 int64) (r int64) {
	return X__syscall(tls, _n, _a1, _a2, _a3, _a4, int64(0), int64(0))
}

// x__syscall3 is defined at syscall_arch.h:33:22
func x20__syscall3(tls TLS, _n int64, _a1 int64, _a2 int64, _a3 int64) (r int64) {
	return X__syscall(tls, _n, _a1, _a2, _a3, int64(0), int64(0), int64(0))
}

// linking splice.o

// Xsplice is defined at splice.c:5:9
func Xsplice(tls TLS, _fd_in int32, _off_in uintptr /* *Toff_t = int64 */, _fd_out int32, _off_out uintptr /* *Toff_t = int64 */, _len uint64, _flags uint32) (r int64) {
	return X__syscall_ret(tls, uint64(x4__syscall6(tls, int64(275), int64(_fd_in), int64(_off_in), int64(_fd_out), int64(_off_out), int64(_len), int64(_flags))))
}

type t254__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t254__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t52size_t = uint64

type t11ssize_t = int64

// x__syscall6 is defined at syscall_arch.h:63:22
func x4__syscall6(tls TLS, _n int64, _a1 int64, _a2 int64, _a3 int64, _a4 int64, _a5 int64, _a6 int64) (r int64) {
	return X__syscall(tls, _n, _a1, _a2, _a3, _a4, _a5, _a6)
}

// linking stime.o

// Xstime is defined at stime.c:5:5
func Xstime(tls TLS, _t uintptr /* *Ttime_t = int64 */) (r int32) {
	esc := MustMalloc(16)
	var _tv = esc // *Stimeval
	defer Free(esc)
	*(*s7timeval)(unsafe.Pointer(_tv)) = s7timeval{
		Ftv_sec: *(*int64)(unsafe.Pointer(_t)),
	}
	return Xsettimeofday(tls, _tv, null)
}

type t255__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t255__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type s7timeval = struct {
	Ftv_sec  int64
	Ftv_usec int64
}

type t15time_t = int64

type t7suseconds_t = int64

// linking swap.o

// Xswapon is defined at swap.c:4:5
func Xswapon(tls TLS, _path uintptr /* *int8 */, _flags int32) (r int32) {
	return int32(X__syscall_ret(tls, uint64(x16__syscall2(tls, int64(167), int64(_path), int64(_flags)))))
}

// Xswapoff is defined at swap.c:9:5
func Xswapoff(tls TLS, _path uintptr /* *int8 */) (r int32) {
	return int32(X__syscall_ret(tls, uint64(x14__syscall1(tls, int64(168), int64(_path)))))
}

type t256__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t256__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// x__syscall2 is defined at syscall_arch.h:24:22
func x16__syscall2(tls TLS, _n int64, _a1 int64, _a2 int64) (r int64) {
	return X__syscall(tls, _n, _a1, _a2, int64(0), int64(0), int64(0), int64(0))
}

// x__syscall1 is defined at syscall_arch.h:16:22
func x14__syscall1(tls TLS, _n int64, _a1 int64) (r int64) {
	return X__syscall(tls, _n, _a1, int64(0), int64(0), int64(0), int64(0), int64(0))
}

// linking sync_file_range.o

// Xsync_file_range is defined at sync_file_range.c:6:5
func Xsync_file_range(tls TLS, _fd int32, _pos int64, _len int64, _flags uint32) (r int32) {
	return int32(X__syscall_ret(tls, uint64(x10__syscall4(tls, int64(277), int64(_fd), _pos, _len, int64(_flags)))))
}

type t257__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t257__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t24off_t = int64

// x__syscall4 is defined at syscall_arch.h:42:22
func x10__syscall4(tls TLS, _n int64, _a1 int64, _a2 int64, _a3 int64, _a4 int64) (r int64) {
	return X__syscall(tls, _n, _a1, _a2, _a3, _a4, int64(0), int64(0))
}

// linking syncfs.o

// Xsyncfs is defined at syncfs.c:5:5
func Xsyncfs(tls TLS, _fd int32) (r int32) {
	return int32(X__syscall_ret(tls, uint64(x15__syscall1(tls, int64(306), int64(_fd)))))
}

type t258__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t258__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// x__syscall1 is defined at syscall_arch.h:16:22
func x15__syscall1(tls TLS, _n int64, _a1 int64) (r int64) {
	return X__syscall(tls, _n, _a1, int64(0), int64(0), int64(0), int64(0), int64(0))
}

// linking sysinfo.o

// X__lsysinfo is defined at sysinfo.c:5:5
func X__lsysinfo(tls TLS, _info uintptr /* *Ssysinfo */) (r int32) {
	return int32(X__syscall_ret(tls, uint64(x16__syscall1(tls, int64(99), int64(_info)))))
}

type t259__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t259__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type s2sysinfo = struct {
	Fuptime     uint64
	Floads      [3]uint64
	Ftotalram   uint64
	Ffreeram    uint64
	Fsharedram  uint64
	Fbufferram  uint64
	Ftotalswap  uint64
	Ffreeswap   uint64
	Fprocs      uint16
	Fpad        uint16
	Ftotalhigh  uint64
	Ffreehigh   uint64
	Fmem_unit   uint32
	F__reserved [256]int8
}

// x__syscall1 is defined at syscall_arch.h:16:22
func x16__syscall1(tls TLS, _n int64, _a1 int64) (r int64) {
	return X__syscall(tls, _n, _a1, int64(0), int64(0), int64(0), int64(0), int64(0))
}

// linking tee.o

// Xtee is defined at tee.c:5:9
func Xtee(tls TLS, _src int32, _dest int32, _len uint64, _flags uint32) (r int64) {
	return X__syscall_ret(tls, uint64(x11__syscall4(tls, int64(276), int64(_src), int64(_dest), int64(_len), int64(_flags))))
}

type t260__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t260__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t53size_t = uint64

type t12ssize_t = int64

// x__syscall4 is defined at syscall_arch.h:42:22
func x11__syscall4(tls TLS, _n int64, _a1 int64, _a2 int64, _a3 int64, _a4 int64) (r int64) {
	return X__syscall(tls, _n, _a1, _a2, _a3, _a4, int64(0), int64(0))
}

// linking timerfd.o

// Xtimerfd_create is defined at timerfd.c:4:5
func Xtimerfd_create(tls TLS, _clockid int32, _flags int32) (r int32) {
	return int32(X__syscall_ret(tls, uint64(x17__syscall2(tls, int64(283), int64(_clockid), int64(_flags)))))
}

// Xtimerfd_settime is defined at timerfd.c:9:5
func Xtimerfd_settime(tls TLS, _fd int32, _flags int32, _new uintptr /* *Sitimerspec */, _old uintptr /* *Sitimerspec */) (r int32) {
	return int32(X__syscall_ret(tls, uint64(x12__syscall4(tls, int64(286), int64(_fd), int64(_flags), int64(_new), int64(_old)))))
}

// Xtimerfd_gettime is defined at timerfd.c:14:5
func Xtimerfd_gettime(tls TLS, _fd int32, _cur uintptr /* *Sitimerspec */) (r int32) {
	return int32(X__syscall_ret(tls, uint64(x17__syscall2(tls, int64(287), int64(_fd), int64(_cur)))))
}

type t261__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t261__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// x__syscall2 is defined at syscall_arch.h:24:22
func x17__syscall2(tls TLS, _n int64, _a1 int64, _a2 int64) (r int64) {
	return X__syscall(tls, _n, _a1, _a2, int64(0), int64(0), int64(0), int64(0))
}

type Sitimerspec = struct {
	Fit_interval s7timespec
	Fit_value    s7timespec
}

// x__syscall4 is defined at syscall_arch.h:42:22
func x12__syscall4(tls TLS, _n int64, _a1 int64, _a2 int64, _a3 int64, _a4 int64) (r int64) {
	return X__syscall(tls, _n, _a1, _a2, _a3, _a4, int64(0), int64(0))
}

type s7timespec = struct {
	Ftv_sec  int64
	Ftv_nsec int64
}

type t16time_t = int64

// linking unshare.o

// Xunshare is defined at unshare.c:5:5
func Xunshare(tls TLS, _flags int32) (r int32) {
	return int32(X__syscall_ret(tls, uint64(x17__syscall1(tls, int64(272), int64(_flags)))))
}

type t262__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t262__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// x__syscall1 is defined at syscall_arch.h:16:22
func x17__syscall1(tls TLS, _n int64, _a1 int64) (r int64) {
	return X__syscall(tls, _n, _a1, int64(0), int64(0), int64(0), int64(0), int64(0))
}

// linking utimes.o

// Xutimes is defined at utimes.c:7:5
func Xutimes(tls TLS, _path uintptr /* *int8 */, _times uintptr /* [2]Stimeval */) (r int32) {
	return X__futimesat(tls, int32(-100), _path, _times)
}

type t263__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t263__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type s8timeval = struct {
	Ftv_sec  int64
	Ftv_usec int64
}

type t17time_t = int64

type t8suseconds_t = int64

// linking vhangup.o

// Xvhangup is defined at vhangup.c:5:5
func Xvhangup(tls TLS) (r int32) {
	return int32(X__syscall_ret(tls, uint64(x1__syscall0(tls, int64(153)))))
}

type t264__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t264__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// x__syscall0 is defined at syscall_arch.h:8:22
func x1__syscall0(tls TLS, _n int64) (r int64) {
	return X__syscall(tls, _n, int64(0), int64(0), int64(0), int64(0), int64(0), int64(0))
}

// linking vmsplice.o

// Xvmsplice is defined at vmsplice.c:5:9
func Xvmsplice(tls TLS, _fd int32, _iov uintptr /* *Siovec */, _cnt uint64, _flags uint32) (r int64) {
	return X__syscall_ret(tls, uint64(x13__syscall4(tls, int64(278), int64(_fd), int64(_iov), int64(_cnt), int64(_flags))))
}

type t265__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t265__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t54size_t = uint64

type t13ssize_t = int64

type s1iovec = struct {
	Fiov_base uintptr // *void
	Fiov_len  uint64
}

// x__syscall4 is defined at syscall_arch.h:42:22
func x13__syscall4(tls TLS, _n int64, _a1 int64, _a2 int64, _a3 int64, _a4 int64) (r int64) {
	return X__syscall(tls, _n, _a1, _a2, _a3, _a4, int64(0), int64(0))
}

// linking wait3.o

// Xwait3 is defined at wait3.c:6:7
func Xwait3(tls TLS, _status uintptr /* *int32 */, _options int32, _usage uintptr /* *Srusage */) (r int32) {
	return Xwait4(tls, int32(-1), _status, _options, _usage)
}

type t266__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t266__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t9pid_t = int32

type Srusage = struct {
	Fru_utime    s9timeval
	Fru_stime    s9timeval
	Fru_maxrss   int64
	Fru_ixrss    int64
	Fru_idrss    int64
	Fru_isrss    int64
	Fru_minflt   int64
	Fru_majflt   int64
	Fru_nswap    int64
	Fru_inblock  int64
	Fru_oublock  int64
	Fru_msgsnd   int64
	Fru_msgrcv   int64
	Fru_nsignals int64
	Fru_nvcsw    int64
	Fru_nivcsw   int64
	F__reserved  [16]int64
}

type s9timeval = struct {
	Ftv_sec  int64
	Ftv_usec int64
}

type t18time_t = int64

type t9suseconds_t = int64

// linking wait4.o

// Xwait4 is defined at wait4.c:6:7
func Xwait4(tls TLS, _pid int32, _status uintptr /* *int32 */, _options int32, _usage uintptr /* *Srusage */) (r int32) {
	return int32(X__syscall_ret(tls, uint64(x14__syscall4(tls, int64(61), int64(_pid), int64(_status), int64(_options), int64(_usage)))))
}

type t267__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t267__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t10pid_t = int32

type s1rusage = struct {
	Fru_utime    s10timeval
	Fru_stime    s10timeval
	Fru_maxrss   int64
	Fru_ixrss    int64
	Fru_idrss    int64
	Fru_isrss    int64
	Fru_minflt   int64
	Fru_majflt   int64
	Fru_nswap    int64
	Fru_inblock  int64
	Fru_oublock  int64
	Fru_msgsnd   int64
	Fru_msgrcv   int64
	Fru_nsignals int64
	Fru_nvcsw    int64
	Fru_nivcsw   int64
	F__reserved  [16]int64
}

// x__syscall4 is defined at syscall_arch.h:42:22
func x14__syscall4(tls TLS, _n int64, _a1 int64, _a2 int64, _a3 int64, _a4 int64) (r int64) {
	return X__syscall(tls, _n, _a1, _a2, _a3, _a4, int64(0), int64(0))
}

type s10timeval = struct {
	Ftv_sec  int64
	Ftv_usec int64
}

type t19time_t = int64

type t10suseconds_t = int64

// linking xattr.o

// Xgetxattr is defined at xattr.c:4:9
func Xgetxattr(tls TLS, _path uintptr /* *int8 */, _name uintptr /* *int8 */, _value uintptr /* *void */, _size uint64) (r int64) {
	return X__syscall_ret(tls, uint64(x15__syscall4(tls, int64(191), int64(_path), int64(_name), int64(_value), int64(_size))))
}

// Xlgetxattr is defined at xattr.c:9:9
func Xlgetxattr(tls TLS, _path uintptr /* *int8 */, _name uintptr /* *int8 */, _value uintptr /* *void */, _size uint64) (r int64) {
	return X__syscall_ret(tls, uint64(x15__syscall4(tls, int64(192), int64(_path), int64(_name), int64(_value), int64(_size))))
}

// Xfgetxattr is defined at xattr.c:14:9
func Xfgetxattr(tls TLS, _filedes int32, _name uintptr /* *int8 */, _value uintptr /* *void */, _size uint64) (r int64) {
	return X__syscall_ret(tls, uint64(x15__syscall4(tls, int64(193), int64(_filedes), int64(_name), int64(_value), int64(_size))))
}

// Xlistxattr is defined at xattr.c:19:9
func Xlistxattr(tls TLS, _path uintptr /* *int8 */, _list uintptr /* *int8 */, _size uint64) (r int64) {
	return X__syscall_ret(tls, uint64(x21__syscall3(tls, int64(194), int64(_path), int64(_list), int64(_size))))
}

// Xllistxattr is defined at xattr.c:24:9
func Xllistxattr(tls TLS, _path uintptr /* *int8 */, _list uintptr /* *int8 */, _size uint64) (r int64) {
	return X__syscall_ret(tls, uint64(x21__syscall3(tls, int64(195), int64(_path), int64(_list), int64(_size))))
}

// Xflistxattr is defined at xattr.c:29:9
func Xflistxattr(tls TLS, _filedes int32, _list uintptr /* *int8 */, _size uint64) (r int64) {
	return X__syscall_ret(tls, uint64(x21__syscall3(tls, int64(196), int64(_filedes), int64(_list), int64(_size))))
}

// Xsetxattr is defined at xattr.c:34:5
func Xsetxattr(tls TLS, _path uintptr /* *int8 */, _name uintptr /* *int8 */, _value uintptr /* *void */, _size uint64, _flags int32) (r int32) {
	return int32(X__syscall_ret(tls, uint64(x5__syscall5(tls, int64(188), int64(_path), int64(_name), int64(_value), int64(_size), int64(_flags)))))
}

// Xlsetxattr is defined at xattr.c:39:5
func Xlsetxattr(tls TLS, _path uintptr /* *int8 */, _name uintptr /* *int8 */, _value uintptr /* *void */, _size uint64, _flags int32) (r int32) {
	return int32(X__syscall_ret(tls, uint64(x5__syscall5(tls, int64(189), int64(_path), int64(_name), int64(_value), int64(_size), int64(_flags)))))
}

// Xfsetxattr is defined at xattr.c:44:5
func Xfsetxattr(tls TLS, _filedes int32, _name uintptr /* *int8 */, _value uintptr /* *void */, _size uint64, _flags int32) (r int32) {
	return int32(X__syscall_ret(tls, uint64(x5__syscall5(tls, int64(190), int64(_filedes), int64(_name), int64(_value), int64(_size), int64(_flags)))))
}

// Xremovexattr is defined at xattr.c:49:5
func Xremovexattr(tls TLS, _path uintptr /* *int8 */, _name uintptr /* *int8 */) (r int32) {
	return int32(X__syscall_ret(tls, uint64(x18__syscall2(tls, int64(197), int64(_path), int64(_name)))))
}

// Xlremovexattr is defined at xattr.c:54:5
func Xlremovexattr(tls TLS, _path uintptr /* *int8 */, _name uintptr /* *int8 */) (r int32) {
	return int32(X__syscall_ret(tls, uint64(x18__syscall2(tls, int64(198), int64(_path), int64(_name)))))
}

// Xfremovexattr is defined at xattr.c:59:5
func Xfremovexattr(tls TLS, _fd int32, _name uintptr /* *int8 */) (r int32) {
	return int32(X__syscall_ret(tls, uint64(x18__syscall2(tls, int64(199), int64(_fd), int64(_name)))))
}

type t268__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t268__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t55size_t = uint64

type t14ssize_t = int64

// x__syscall4 is defined at syscall_arch.h:42:22
func x15__syscall4(tls TLS, _n int64, _a1 int64, _a2 int64, _a3 int64, _a4 int64) (r int64) {
	return X__syscall(tls, _n, _a1, _a2, _a3, _a4, int64(0), int64(0))
}

// x__syscall3 is defined at syscall_arch.h:33:22
func x21__syscall3(tls TLS, _n int64, _a1 int64, _a2 int64, _a3 int64) (r int64) {
	return X__syscall(tls, _n, _a1, _a2, _a3, int64(0), int64(0), int64(0))
}

// x__syscall5 is defined at syscall_arch.h:52:22
func x5__syscall5(tls TLS, _n int64, _a1 int64, _a2 int64, _a3 int64, _a4 int64, _a5 int64) (r int64) {
	return X__syscall(tls, _n, _a1, _a2, _a3, _a4, _a5, int64(0))
}

// x__syscall2 is defined at syscall_arch.h:24:22
func x18__syscall2(tls TLS, _n int64, _a1 int64, _a2 int64) (r int64) {
	return X__syscall(tls, _n, _a1, _a2, int64(0), int64(0), int64(0), int64(0))
}

// linking __lctrans.o

// X__lctrans is defined at __lctrans.c:12:12
func X__lctrans(tls TLS, _msg uintptr /* *int8 */, _lm uintptr /* *S__locale_map */) (r uintptr /* *int8 */) {
	return X__lctrans_impl(tls, _msg, _lm)
}

// X__lctrans_cur is defined at __lctrans.c:17:12
func X__lctrans_cur(tls TLS, _msg uintptr /* *int8 */) (r uintptr /* *int8 */) {
	return X__lctrans_impl(tls, _msg, *(*uintptr)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(x8__pthread_self(tls) + 192)) + 40)))
}

type t269__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t269__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// xdummy is defined at __lctrans.c:5:19
func x6dummy(tls TLS, _msg uintptr /* *int8 */, _lm uintptr /* *S__locale_map */) (r uintptr /* *int8 */) {
	return _msg
}

type S__locale_map = struct {
	Fmap      uintptr // *void
	Fmap_size uint64
	Fname     [24]int8
	Fnext     uintptr // *S__locale_map
}

// x__pthread_self is defined at pthread_arch.h:1:30
func x8__pthread_self(tls TLS) (r uintptr /* *S__pthread */) {
	return uintptr(tls)
	return r
}

type t56size_t = uint64

type s12__pthread = struct {
	Fself          uintptr // *S__pthread
	Fdtv           uintptr // **void
	Funused1       uintptr // *void
	Funused2       uintptr // *void
	Fsysinfo       uint64
	Fcanary        uint64
	Fcanary2       uint64
	Ftid           int32
	Ferrno_val     int32
	Fdetach_state  int32
	Fcancel        int32
	Fcanceldisable uint8
	Fcancelasync   uint8
	F74            uint8
	Fmap_base      uintptr // *uint8
	Fmap_size      uint64
	Fstack         uintptr // *void
	Fstack_size    uint64
	Fguard_size    uint64
	Fstart_arg     uintptr // *void
	Fstart         uintptr // *func(TLS, uintptr) uintptr
	Fresult        uintptr // *void
	Fcancelbuf     uintptr // *S__ptcb
	Ftsd           uintptr // **void
	Frobust_list   struct {
		Fhead    uintptr
		Foff     int64
		Fpending uintptr
	}
	Ftimer_id      int32
	Flocale        uintptr // Tlocale_t = *S__locale_struct
	Fkilllock      [1]int32
	Fdlerror_buf   uintptr // *int8
	Fstdio_locks   uintptr // *void
	Fcanary_at_end uint64
	Fdtv_copy      uintptr // **void
}

type t13uintptr_t = uint64

type s10__ptcb = struct {
	F__f    uintptr // *func(TLS, uintptr)
	F__x    uintptr // *void
	F__next uintptr // *S__ptcb
}

type s43__locale_struct = struct{ Fcat [6]uintptr }

// linking __mo_lookup.o

// X__mo_lookup is defined at __mo_lookup.c:9:12
func X__mo_lookup(tls TLS, _p uintptr /* *void */, _size uint64, _s uintptr /* *int8 */) (r uintptr /* *int8 */) {
	var (
		_mo   uintptr // *Tuint32_t = uint32
		_sw   int32
		_b    uint32
		_n    uint32
		_o    uint32
		_t    uint32
		_ol   uint32
		_os   uint32
		_sign int32
		_tl   uint32
		_ts   uint32
	)
	_mo = _p
	_sw = int32(*(*uint32)(unsafe.Pointer(_mo)) - uint32(0x950412de))
	_b = uint32(0)
	_n = xswapc(tls, *(*uint32)(unsafe.Pointer(_mo + 8)), _sw)
	_o = xswapc(tls, *(*uint32)(unsafe.Pointer(_mo + 12)), _sw)
	_t = xswapc(tls, *(*uint32)(unsafe.Pointer(_mo + 16)), _sw)
	if uint64(_n) < _size/uint64(4) && uint64(_o) < _size-uint64(uint32(4)*_n) && uint64(_t) < _size-uint64(uint32(4)*_n) && (_o|_t)%uint32(4) == 0 {
		goto _1
	}

	return null

_1:
	_o = _o / uint32(4)
	_t = _t / uint32(4)

_2:
	_ol = xswapc(tls, *(*uint32)(unsafe.Pointer(_mo + 4*uintptr(_o+uint32(2)*(_b+_n/uint32(2))))), _sw)
	_os = xswapc(tls, *(*uint32)(unsafe.Pointer(_mo + 4*uintptr(_o+uint32(2)*(_b+_n/uint32(2))+uint32(1)))), _sw)
	if uint64(_os) < _size && uint64(_ol) < _size-uint64(_os) && *(*int8)(unsafe.Pointer(_p + uintptr(_os+_ol))) == 0 {
		goto _5
	}

	return null

_5:
	_sign = Xstrcmp(tls, _s, _p+uintptr(_os))
	if _sign != 0 {
		goto _6
	}

	_tl = xswapc(tls, *(*uint32)(unsafe.Pointer(_mo + 4*uintptr(_t+uint32(2)*(_b+_n/uint32(2))))), _sw)
	_ts = xswapc(tls, *(*uint32)(unsafe.Pointer(_mo + 4*uintptr(_t+uint32(2)*(_b+_n/uint32(2))+uint32(1)))), _sw)
	if uint64(_ts) < _size && uint64(_tl) < _size-uint64(_ts) && *(*int8)(unsafe.Pointer(_p + uintptr(_ts+_tl))) == 0 {
		goto _8
	}

	return null

_8:
	return _p + uintptr(_ts)

	goto _7

_6:
	if _n != uint32(1) {
		goto _9
	}

	return null

	goto _10

_9:
	if _sign >= int32(0) {
		goto _11
	}

	_n = _n / uint32(2)
	goto _12

_11:
	_b = _b + _n/uint32(2)
	_n = _n - _n/uint32(2)
_12:
_10:
_7:
	goto _2

	return null
}

type t270__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t270__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t57size_t = uint64

type t21uint32_t = uint32

// xswapc is defined at __mo_lookup.c:4:24
func xswapc(tls TLS, _x uint32, _c int32) (r uint32) {
	if _c != 0 {
		return _x>>(uint(24)%32) | _x>>(uint(8)%32)&uint32(0xff00) | _x<<(uint(8)%32)&uint32(0xff0000) | _x<<(uint(24)%32)
	}

	return _x
}

// linking bind_textdomain_codeset.o

// Xbind_textdomain_codeset is defined at bind_textdomain_codeset.c:6:6
func Xbind_textdomain_codeset(tls TLS, _domainname uintptr /* *int8 */, _codeset uintptr /* *int8 */) (r uintptr /* *int8 */) {
	if _codeset == 0 || Xstrcasecmp(tls, _codeset, ts+1720 /* "UTF-8" */) == 0 {
		goto _1
	}

	*(*int32)(unsafe.Pointer(X__errno_location(tls))) = int32(22)
_1:
	return null
}

type t271__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t271__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// linking c_locale.o

// X__c_dot_utf8 S__locale_map, escapes: true, c_locale.c:6:27
var X__c_dot_utf8 = bss + 1928 // struct __locale_map

func init() {
	*(*s1__locale_map)(unsafe.Pointer(X__c_dot_utf8)) = s1__locale_map{
		Fmap:      xempty_mo,
		Fmap_size: uint64(20),
		Fname:     *(*[24]int8)(unsafe.Pointer(ts + 1728 /* "C.UTF-8\x00\x00\x00\x00\x00\x00\x00\x00\x00..." */)),
	}
}

// X__c_locale S__locale_struct, escapes: true, c_locale.c:12:30
var X__c_locale = bss + 1976

type t272__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t272__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type s1__locale_map = struct {
	Fmap      uintptr // *void
	Fmap_size uint64
	Fname     [24]int8
	Fnext     uintptr // *S__locale_map
}

// xempty_mo [5]uint32, escapes: true, c_locale.c:4:23
var xempty_mo = ds + 28048

type t58size_t = uint64

type s44__locale_struct = struct{ Fcat [6]uintptr }

type t22uint32_t = uint32

// linking catclose.o

// Xcatclose is defined at catclose.c:3:5
func Xcatclose(tls TLS, _catd uintptr /* Tnl_catd = *void */) (r int32) {
	return int32(0)
}

type t273__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t273__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// linking catgets.o

// Xcatgets is defined at catgets.c:3:6
func Xcatgets(tls TLS, _catd uintptr /* Tnl_catd = *void */, _set_id int32, _msg_id int32, _s uintptr /* *int8 */) (r uintptr /* *int8 */) {
	return _s
}

type t274__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t274__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// linking catopen.o

// Xcatopen is defined at catopen.c:4:9
func Xcatopen(tls TLS, _name uintptr /* *int8 */, _oflag int32) (r uintptr /* Tnl_catd = *void */) {
	*(*int32)(unsafe.Pointer(X__errno_location(tls))) = int32(95)
	return uintptr(18446744073709551615)
}

type t275__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t275__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// linking dcngettext.o

// Xbindtextdomain is defined at dcngettext.c:36:6
func Xbindtextdomain(tls TLS, _domainname uintptr /* *int8 */, _dirname uintptr /* *int8 */) (r uintptr /* *int8 */) {
	var (
		_p      uintptr // *Sbinding
		_q      uintptr // *Sbinding
		_domlen uint64
		_dirlen uint64
	)
	if _domainname != 0 {
		goto _1
	}

	return null

_1:
	X__assert_fail(tls, ts+0 /* "TODO(ccgo)" */, ts+1752 /* "src/locale/dcnge..." */, int32(42), x565__func__)
	_domlen = Xstrnlen(tls, _domainname, uint64(256))
	_dirlen = Xstrnlen(tls, _dirname, uint64(4096))
	if _domlen <= uint64(255) && _dirlen < uint64(4096) {
		goto _2
	}

	*(*int32)(unsafe.Pointer(X__errno_location(tls))) = int32(22)
	return null

_2:
	X__lock(tls, x566lock)
	_p = *(*uintptr)(unsafe.Pointer(xbindings))
_3:
	if _p == 0 {
		goto _5
	}

	if Xstrcmp(tls, *(*uintptr)(unsafe.Pointer(_p + 16)), _domainname) != 0 || Xstrcmp(tls, *(*uintptr)(unsafe.Pointer(_p + 24)), _dirname) != 0 {
		goto _6
	}

	goto _5

_6:
	_p = *(*uintptr)(unsafe.Pointer(_p))
	goto _3

_5:
	if _p != 0 {
		goto _7
	}

	_p = Xcalloc(tls, uint64(40)+_domlen+_dirlen+uint64(2), uint64(1))
	if _p != 0 {
		goto _8
	}

	X__unlock(tls, x566lock)
	return null

_8:
	*(*uintptr)(unsafe.Pointer(_p)) = *(*uintptr)(unsafe.Pointer(xbindings))
	*(*int32)(unsafe.Pointer(_p + 8)) = int32(_dirlen)
	*(*uintptr)(unsafe.Pointer(_p + 16)) = _p + 32
	*(*uintptr)(unsafe.Pointer(_p + 24)) = ((_p + 32) + uintptr(_domlen)) + uintptr(1)
	Xmemcpy(tls, *(*uintptr)(unsafe.Pointer(_p + 16)), _domainname, _domlen+uint64(1))
	Xmemcpy(tls, *(*uintptr)(unsafe.Pointer(_p + 24)), _dirname, _dirlen+uint64(1))
	xa_cas_p(tls, xbindings, *(*uintptr)(unsafe.Pointer(xbindings)), _p)
_7:
	x1a_store(tls, _p+12, int32(1))
	_q = *(*uintptr)(unsafe.Pointer(xbindings))
_9:
	if _q == 0 {
		goto _11
	}

	if Xstrcmp(tls, *(*uintptr)(unsafe.Pointer(_q + 16)), _domainname) != 0 || _q == _p {
		goto _12
	}

	x1a_store(tls, _q+12, int32(0))
_12:
	_q = *(*uintptr)(unsafe.Pointer(_q))
	goto _9

_11:
	X__unlock(tls, x566lock)
	return *(*uintptr)(unsafe.Pointer(_p + 24))
}

// Xdcngettext is defined at dcngettext.c:121:6
func Xdcngettext(tls TLS, _domainname uintptr /* *int8 */, _msgid1 uintptr /* *int8 */, _msgid2 uintptr /* *int8 */, _n uint64, _category int32) (r uintptr /* *int8 */) {
	X__assert_fail(tls, ts+0 /* "TODO(ccgo)" */, ts+1752 /* "src/locale/dcnge..." */, int32(123), x567__func__)
	return r
}

// Xdcgettext is defined at dcngettext.c:266:6
func Xdcgettext(tls TLS, _domainname uintptr /* *int8 */, _msgid uintptr /* *int8 */, _category int32) (r uintptr /* *int8 */) {
	return Xdcngettext(tls, _domainname, _msgid, null, uint64(1), _category)
}

// Xdngettext is defined at dcngettext.c:271:6
func Xdngettext(tls TLS, _domainname uintptr /* *int8 */, _msgid1 uintptr /* *int8 */, _msgid2 uintptr /* *int8 */, _n uint64) (r uintptr /* *int8 */) {
	return Xdcngettext(tls, _domainname, _msgid1, _msgid2, _n, int32(5))
}

// Xdgettext is defined at dcngettext.c:276:6
func Xdgettext(tls TLS, _domainname uintptr /* *int8 */, _msgid uintptr /* *int8 */) (r uintptr /* *int8 */) {
	return Xdcngettext(tls, _domainname, _msgid, null, uint64(1), int32(5))
}

type t276__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t276__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// x1__func__ [15]int8, escapes: true, dcngettext.c:37:1
var x565__func__ = ds + 28072

// x2lock [1]int32, escapes: true, dcngettext.c:38:22
var x566lock = bss + 2024

type Sbinding = struct {
	Fnext       uintptr // *Sbinding
	Fdirlen     int32
	Factive     int32
	Fdomainname uintptr // *int8
	Fdirname    uintptr // *int8
	Fbuf        uintptr
}

type t59size_t = uint64

// xbindings *void, escapes: true, dcngettext.c:22:13
var xbindings = bss + 2032

// xa_cas_p is defined at atomic_arch.h:14:20
func xa_cas_p(tls TLS, _p uintptr /* *void */, _t uintptr /* *void */, _s uintptr /* *void */) (r uintptr /* *void */) {
	return a_cas_p(_p, _t, _s)
	return r
}

// xa_store is defined at atomic_arch.h:98:20
func x1a_store(tls TLS, _p uintptr /* *int32 */, _x int32) {
	X__assert_fail(tls, ts+0 /* "TODO(ccgo)" */, ts+36 /* "arch/x86_64/atom..." */, int32(100), x568__func__)
}

// xdummy_gettextdomain is defined at dcngettext.c:110:13
func xdummy_gettextdomain(tls TLS) (r uintptr /* *int8 */) {
	return ts + 1776 /* "messages" */
}

// x7__func__ [11]int8, escapes: true, dcngettext.c:122:1
var x567__func__ = ds + 28088

// x8__func__ [8]int8, escapes: true, atomic_arch.h:99:1
var x568__func__ = ds + 28104

// linking duplocale.o

// X__duplocale is defined at duplocale.c:6:10
func X__duplocale(tls TLS, _old uintptr /* Tlocale_t = *S__locale_struct */) (r uintptr /* Tlocale_t = *S__locale_struct */) {
	var _new uintptr // Tlocale_t = *S__locale_struct

	_new = Xmalloc(tls, uint64(48))
	if _new != 0 {
		goto _1
	}

	return null

_1:
	if _old != uintptr(18446744073709551615) {
		goto _2
	}

	_old = X__libc + 64
_2:
	*(*s45__locale_struct)(unsafe.Pointer(_new)) = *(*s45__locale_struct)(unsafe.Pointer(_old))
	return _new
}

type t277__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t277__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type s45__locale_struct = struct{ Fcat [6]uintptr }

type t60size_t = uint64

// linking freelocale.o

// Xfreelocale is defined at freelocale.c:7:6
func Xfreelocale(tls TLS, _l uintptr /* Tlocale_t = *S__locale_struct */) {
	if X__loc_is_allocated(tls, _l) == 0 {
		goto _1
	}

	Xfree(tls, _l)
_1:
}

type t278__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t278__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type s46__locale_struct = struct{ Fcat [6]uintptr }

// linking iconv.o

func set569(p *uint64, v uint64) uint64 { *p = v; return v }

// Xiconv_open is defined at iconv.c:141:9
func Xiconv_open(tls TLS, _to uintptr /* *int8 */, _from uintptr /* *int8 */) (r uintptr /* Ticonv_t = *void */) {
	var (
		_f   uint64
		_t   uint64
		_scd uintptr // *Sstateful_cd
		_cd  uintptr // Ticonv_t = *void
	)
	if set569(&_t, xfind_charmap(tls, _to)) != uint64(18446744073709551615) && set569(&_f, xfind_charmap(tls, _from)) != uint64(18446744073709551615) && int32(*(*uint8)(unsafe.Pointer(xcharmaps + uintptr(_t)))) < int32(0330) {
		goto _1
	}

	*(*int32)(unsafe.Pointer(X__errno_location(tls))) = int32(22)
	return uintptr(18446744073709551615)

_1:
	_cd = xcombine_to_from(tls, _t, _f)
	switch int32(*(*uint8)(unsafe.Pointer(xcharmaps + uintptr(_f)))) {
	case int32(0312):
		goto _3
	case int32(0313):
		goto _4
	case int32(0314):
		goto _5
	case int32(0322):
		goto _6
	}
	goto _2

_3:
_4:
_5:
_6:
	_scd = Xmalloc(tls, uint64(16))
	if _scd != 0 {
		goto _7
	}

	return uintptr(18446744073709551615)

_7:
	*(*uintptr)(unsafe.Pointer(_scd)) = _cd
	*(*uint32)(unsafe.Pointer(_scd + 8)) = uint32(0)
	_cd = _scd
_2:
	return _cd
}

func postinc570(p *uintptr) uintptr { r := *p; *p += 1; return r }

// Xiconv is defined at iconv.c:240:8
func Xiconv(tls TLS, _cd uintptr /* Ticonv_t = *void */, _in uintptr /* **int8 */, _inb uintptr /* *Tsize_t = uint64 */, _out uintptr /* **int8 */, _outb uintptr /* *Tsize_t = uint64 */) (r uint64) {
	esc := MustMalloc(52)
	var (
		_x      uint64
		_scd    uintptr // *Sstateful_cd
		_to     uint32
		_from   uint32
		_map    uintptr    // *uint8
		_tomap  uintptr    // *uint8
		_st     = esc      // *Tmbstate_t = struct{F__opaque1 uint32;F__opaque2 uint32;}
		_wc     = esc + 16 // *Twchar_t = int32
		_c      uint32
		_d      uint32
		_k      uint64
		_l      uint64
		_err    int32
		_type   uint8
		_totype uint8
		_ploc   uintptr    // **S__locale_struct
		_loc    uintptr    // Tlocale_t = *S__locale_struct
		_tmp    = esc + 32 // *struct{Fc [0][8]int8;Fwc [0][2]int32;F int32; _ [4]byte}
		_ptmp   uintptr    // *int8
		_tmplen uint64
		_1tmp   = esc + 48 // *[4]int8
	)
	defer Free(esc)
	_x = uint64(0)
	_scd = 0
	if uint64(_cd)&uint64(1) != 0 {
		goto _1
	}

	_scd = _cd
	_cd = *(*uintptr)(unsafe.Pointer(_scd))
_1:
	_to = uint32(xextract_to(tls, _cd))
	_from = uint32(xextract_from(tls, _cd))
	_map = (xcharmaps + uintptr(_from)) + uintptr(1)
	_tomap = (xcharmaps + uintptr(_to)) + uintptr(1)
	Copy(_st, ts+1124 /* "\x00\x00\x00\x00\x00\x00\x00\x00" */, 8)
	_type = *(*uint8)(unsafe.Pointer(_map - 1))
	_totype = *(*uint8)(unsafe.Pointer(_tomap - 1))
	_ploc = x9__pthread_self(tls) + 192
	_loc = *(*uintptr)(unsafe.Pointer(_ploc))
	if _in != 0 && *(*uintptr)(unsafe.Pointer(_in)) != 0 && *(*uint64)(unsafe.Pointer(_inb)) != 0 {
		goto _2
	}

	return uint64(0)

_2:
	X__assert_fail(tls, ts+0 /* "TODO(ccgo)" */, ts+1788 /* "src/locale/iconv..." */, int32(263), x571__func__)

_3:
	if *(*uint64)(unsafe.Pointer(_inb)) == 0 {
		goto _5
	}

	_c = uint32(*(*uint8)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_in)))))
	_l = uint64(1)
	switch int32(_type) {
	case int32(0310):
		goto _7
	case int32(0307):
		goto _8
	case int32(0306):
		goto _9
	case int32(0300):
		goto _10
	case int32(0303):
		goto _11
	case int32(0304):
		goto _12
	case int32(0305):
		goto _13
	case int32(0302):
		goto _14
	case int32(0301):
		goto _15
	case int32(0314):
		goto _16
	case int32(0312):
		goto _17
	case int32(0313):
		goto _18
	case int32(0321):
		goto _19
	case int32(0320):
		goto _20
	case int32(0322):
		goto _21
	case int32(0332):
		goto _22
	case int32(0331):
		goto _23
	case int32(0330):
		goto _24
	case int32(0340):
		goto _25
	case int32(0350):
		goto _26
	default:
		goto _27
	}
_7:
	if _c >= uint32(128) {
		goto _28
	}

	goto _6

_28:
	_l = Xmbrtowc(tls, _wc, *(*uintptr)(unsafe.Pointer(_in)), *(*uint64)(unsafe.Pointer(_inb)), _st)
	if _l != uint64(18446744073709551615) {
		goto _29
	}

	goto lilseq

_29:
	if _l != uint64(18446744073709551614) {
		goto _30
	}

	goto lstarved

_30:
	_c = uint32(*(*int32)(unsafe.Pointer(_wc)))
	goto _6

_8:
	if _c < uint32(128) {
		goto _31
	}

	goto lilseq

_31:
	goto _6

_9:
	_l = uint64(4)
	if *(*uint64)(unsafe.Pointer(_inb)) >= _l {
		goto _32
	}

	goto lstarved

_32:
	_c = uint32(*(*int32)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_in)))))

	goto _33

_10:
_11:
	_l = uint64(4)
	if *(*uint64)(unsafe.Pointer(_inb)) >= uint64(4) {
		goto _34
	}

	goto lstarved

_34:
	_c = xget_32(tls, *(*uintptr)(unsafe.Pointer(_in)), int32(_type))
_33:
	if _c-uint32(0xd800) >= uint32(0x800) && _c < uint32(0x110000) {
		goto _35
	}

	goto lilseq

_35:
	goto _6

_12:
_13:
_14:
_15:
	_l = uint64(2)
	if *(*uint64)(unsafe.Pointer(_inb)) >= uint64(2) {
		goto _36
	}

	goto lstarved

_36:
	_c = xget_16(tls, *(*uintptr)(unsafe.Pointer(_in)), int32(_type))
	if _c-uint32(0xdc00) >= uint32(0x400) {
		goto _37
	}

	goto lilseq

_37:
	if _c-uint32(0xd800) >= uint32(0x400) {
		goto _38
	}

	if uint32(int32(_type)-int32(0304)) >= uint32(2) {
		goto _39
	}

	goto lilseq

_39:
	_l = uint64(4)
	if *(*uint64)(unsafe.Pointer(_inb)) >= uint64(4) {
		goto _40
	}

	goto lstarved

_40:
	_d = xget_16(tls, *(*uintptr)(unsafe.Pointer(_in))+uintptr(2), int32(_type))
	if _d-uint32(0xdc00) < uint32(0x400) {
		goto _41
	}

	goto lilseq

_41:
	_c = (_c-uint32(0xd7c0))<<(uint(10)%32) + (_d - uint32(0xdc00))
_38:
	goto _6

_16:
_17:
	_l = uint64(0)
	if *(*uint32)(unsafe.Pointer(_scd + 8)) != 0 {
		goto _42
	}

	if *(*uint64)(unsafe.Pointer(_inb)) >= uint64(2) {
		goto _43
	}

	goto lstarved

_43:
	_c = xget_16(tls, *(*uintptr)(unsafe.Pointer(_in)), int32(0))
	*(*uint32)(unsafe.Pointer(_scd + 8)) = uint32(func() int32 {
		if int32(_type) == int32(0314) {
			return func() int32 {
				if _c == uint32(0xfffe) {
					return int32(0305)
				}
				return int32(0304)
			}()
		}
		return func() int32 {
			if _c == uint32(0xfffe) {
				return int32(0301)
			}
			return int32(0302)
		}()
	}())
	if _c != uint32(0xfffe) && _c != uint32(0xfeff) {
		goto _44
	}

	_l = uint64(2)
_44:
_42:
	_type = uint8(*(*uint32)(unsafe.Pointer(_scd + 8)))
	goto _4

_18:
	_l = uint64(0)
	if *(*uint32)(unsafe.Pointer(_scd + 8)) != 0 {
		goto _45
	}

	if *(*uint64)(unsafe.Pointer(_inb)) >= uint64(4) {
		goto _46
	}

	goto lstarved

_46:
	_c = xget_32(tls, *(*uintptr)(unsafe.Pointer(_in)), int32(0))
	*(*uint32)(unsafe.Pointer(_scd + 8)) = uint32(func() int32 {
		if _c == uint32(0xfffe0000) {
			return int32(0303)
		}
		return int32(0300)
	}())
	if _c != uint32(0xfffe0000) && _c != uint32(0xfeff) {
		goto _47
	}

	_l = uint64(4)
_47:
_45:
	_type = uint8(*(*uint32)(unsafe.Pointer(_scd + 8)))
	goto _4

_19:
	if _c >= uint32(128) {
		goto _48
	}

	goto _6

_48:
	if _c-uint32(0xa1) > uint32(62) {
		goto _49
	}

	_c = _c + uint32(65216)
	goto _6

_49:
	_l = uint64(2)
	if *(*uint64)(unsafe.Pointer(_inb)) >= uint64(2) {
		goto _50
	}

	goto lstarved

_50:
	_d = uint32(*(*uint8)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_in)) + uintptr(1))))
	if _c-uint32(129) > uint32(30) {
		goto _51
	}

	_c = _c - uint32(129)
	goto _52

_51:
	if _c-uint32(224) > uint32(15) {
		goto _53
	}

	_c = _c - uint32(193)
	goto _54

_53:
	goto lilseq

_54:
_52:
	_c = _c * uint32(2)
	if _d-uint32(64) > uint32(94) {
		goto _55
	}

	if _d != uint32(127) {
		goto _57
	}

	goto lilseq

_57:
	if _d <= uint32(127) {
		goto _58
	}

	_d--
_58:
	_d = _d - uint32(64)
	goto _56

_55:
	if _d-uint32(159) > uint32(93) {
		goto _59
	}

	_c++
	_d = _d - uint32(159)
_59:
_56:
	X__assert_fail(tls, ts+0 /* "TODO(ccgo)" */, ts+1788 /* "src/locale/iconv..." */, int32(357), x571__func__)
	if _c != 0 {
		goto _60
	}

	goto lilseq

_60:
	goto _6

_20:
	if _c >= uint32(128) {
		goto _61
	}

	goto _6

_61:
	_l = uint64(2)
	if *(*uint64)(unsafe.Pointer(_inb)) >= uint64(2) {
		goto _62
	}

	goto lstarved

_62:
	_d = uint32(*(*uint8)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_in)) + uintptr(1))))
	if _c != uint32(0x8e) {
		goto _63
	}

	_c = _d
	if _c-uint32(0xa1) <= uint32(62) {
		goto _64
	}

	goto lilseq

_64:
	_c = _c + uint32(65216)
	goto _6

_63:
	_c = _c - uint32(0xa1)
	_d = _d - uint32(0xa1)
	if _c < uint32(84) && _d < uint32(94) {
		goto _65
	}

	goto lilseq

_65:
	X__assert_fail(tls, ts+0 /* "TODO(ccgo)" */, ts+1788 /* "src/locale/iconv..." */, int32(375), x571__func__)
	if _c != 0 {
		goto _66
	}

	goto lilseq

_66:
	goto _6

_21:
	if _c < uint32(128) {
		goto _67
	}

	goto lilseq

_67:
	if _c != uint32('\x1b') {
		goto _68
	}

	_l = uint64(3)
	if *(*uint64)(unsafe.Pointer(_inb)) >= uint64(3) {
		goto _69
	}

	goto lstarved

_69:
	_c = uint32(*(*uint8)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_in)) + uintptr(1))))
	_d = uint32(*(*uint8)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_in)) + uintptr(2))))
	if _c == uint32('(') || _c == uint32('$') {
		goto _70
	}

	goto lilseq

_70:
	switch uint32(int32(128)*bool2int(_c == uint32('$'))) + _d {
	case uint32('B'):
		goto _72
	case uint32('J'):
		goto _73
	case uint32('I'):
		goto _74
	case uint32(192):
		goto _75
	case uint32(194):
		goto _76
	}
	goto _71

_72:
	*(*uint32)(unsafe.Pointer(_scd + 8)) = uint32(0)
	goto _4

_73:
	*(*uint32)(unsafe.Pointer(_scd + 8)) = uint32(1)
	goto _4

_74:
	*(*uint32)(unsafe.Pointer(_scd + 8)) = uint32(4)
	goto _4

_75:
	*(*uint32)(unsafe.Pointer(_scd + 8)) = uint32(2)
	goto _4

_76:
	*(*uint32)(unsafe.Pointer(_scd + 8)) = uint32(3)
	goto _4

_71:
	goto lilseq

_68:
	switch *(*uint32)(unsafe.Pointer(_scd + 8)) {
	case uint32(1):
		goto _78
	case uint32(2):
		goto _79
	case uint32(3):
		goto _80
	case uint32(4):
		goto _81
	}
	goto _77

_78:
	if _c != uint32('\\') {
		goto _82
	}

	_c = uint32(0xa5)
_82:
	if _c != uint32('~') {
		goto _83
	}

	_c = uint32(0x203e)
_83:
	goto _77

_79:
_80:
	_l = uint64(2)
	if *(*uint64)(unsafe.Pointer(_inb)) >= uint64(2) {
		goto _84
	}

	goto lstarved

_84:
	_d = uint32(*(*uint8)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_in)) + uintptr(1))))
	_c = _c - uint32(0x21)
	_d = _d - uint32(0x21)
	if _c < uint32(84) && _d < uint32(94) {
		goto _85
	}

	goto lilseq

_85:
	X__assert_fail(tls, ts+0 /* "TODO(ccgo)" */, ts+1788 /* "src/locale/iconv..." */, int32(409), x571__func__)
	if _c != 0 {
		goto _86
	}

	goto lilseq

_86:
	goto _77

_81:
	if _c-uint32(0x60) >= uint32(0x1f) {
		goto _87
	}

	goto lilseq

_87:
	if _c-uint32(0x21) >= uint32(0x5e) {
		goto _88
	}

	_c = _c + uint32(65344)
_88:
	goto _77

_77:
	goto _6

_22:
	if _c >= uint32(128) {
		goto _89
	}

	goto _6

_89:
	if _c >= uint32(0xa1) {
		goto _90
	}

	goto lilseq

_90:
_23:
_24:
	if _c >= uint32(128) {
		goto _91
	}

	goto _6

_91:
	_c = _c - uint32(0x81)
	if _c < uint32(126) {
		goto _92
	}

	goto lilseq

_92:
	_l = uint64(2)
	if *(*uint64)(unsafe.Pointer(_inb)) >= uint64(2) {
		goto _93
	}

	goto lstarved

_93:
	_d = uint32(*(*uint8)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_in)) + uintptr(1))))
	if _d >= uint32(0xa1) || int32(_type) != int32(0332) {
		goto _94
	}

	goto lilseq

_94:
	if _d-uint32(0x40) < uint32(191) && _d != uint32(127) {
		goto _95
	}

	if _d-uint32('0') <= uint32(9) && int32(_type) == int32(0330) {
		goto _96
	}

	goto lilseq

_96:
	_l = uint64(4)
	if *(*uint64)(unsafe.Pointer(_inb)) >= uint64(4) {
		goto _97
	}

	goto lstarved

_97:
	_c = (uint32(10)*_c + _d - uint32('0')) * uint32(1260)
	_d = uint32(*(*uint8)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_in)) + uintptr(2))))
	if _d-uint32(0x81) <= uint32(126) {
		goto _98
	}

	goto lilseq

_98:
	_c = _c + uint32(10)*(_d-uint32(0x81))
	_d = uint32(*(*uint8)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_in)) + uintptr(3))))
	if _d-uint32('0') <= uint32(9) {
		goto _99
	}

	goto lilseq

_99:
	_c = _c + (_d - uint32('0'))
	_c = _c + uint32(128)
	X__assert_fail(tls, ts+0 /* "TODO(ccgo)" */, ts+1788 /* "src/locale/iconv..." */, int32(444), x571__func__)
	X__assert_fail(tls, ts+0 /* "TODO(ccgo)" */, ts+1788 /* "src/locale/iconv..." */, int32(446), x571__func__)
	X__assert_fail(tls, ts+0 /* "TODO(ccgo)" */, ts+1788 /* "src/locale/iconv..." */, int32(448), x571__func__)
	X__assert_fail(tls, ts+0 /* "TODO(ccgo)" */, ts+1788 /* "src/locale/iconv..." */, int32(450), x571__func__)
	X__assert_fail(tls, ts+0 /* "TODO(ccgo)" */, ts+1788 /* "src/locale/iconv..." */, int32(452), x571__func__)
	X__assert_fail(tls, ts+0 /* "TODO(ccgo)" */, ts+1788 /* "src/locale/iconv..." */, int32(454), x571__func__)
	X__assert_fail(tls, ts+0 /* "TODO(ccgo)" */, ts+1788 /* "src/locale/iconv..." */, int32(456), x571__func__)
	X__assert_fail(tls, ts+0 /* "TODO(ccgo)" */, ts+1788 /* "src/locale/iconv..." */, int32(458), x571__func__)
	X__assert_fail(tls, ts+0 /* "TODO(ccgo)" */, ts+1788 /* "src/locale/iconv..." */, int32(460), x571__func__)
	goto _6

_95:
	_d = _d - uint32(0x40)
	if _d <= uint32(63) {
		goto _100
	}

	_d--
_100:
	X__assert_fail(tls, ts+0 /* "TODO(ccgo)" */, ts+1788 /* "src/locale/iconv..." */, int32(466), x571__func__)
	goto _6

_25:
	if _c >= uint32(128) {
		goto _101
	}

	goto _6

_101:
	_l = uint64(2)
	if *(*uint64)(unsafe.Pointer(_inb)) >= uint64(2) {
		goto _102
	}

	goto lstarved

_102:
	_d = uint32(*(*uint8)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_in)) + uintptr(1))))
	if _d-uint32(0x40) < uint32(191) && _d-uint32(0x7f) >= uint32(34) {
		goto _103
	}

	goto lilseq

_103:
	_d = _d - uint32(0x40)
	if _d <= uint32(0x3e) {
		goto _104
	}

	_d = _d - uint32(0x22)
_104:
	if _c-uint32(0xa1) < uint32(89) {
		goto _105
	}

	if _c-uint32(0x87) < uint32(120) {
		goto _106
	}

	goto lilseq

_106:
	if _c >= uint32(0xa1) {
		goto _107
	}

	_c = _c - uint32(0x87)
	goto _108

_107:
	_c = _c - uint32(224)
_108:
	X__assert_fail(tls, ts+0 /* "TODO(ccgo)" */, ts+1788 /* "src/locale/iconv..." */, int32(481), x571__func__)
	X__assert_fail(tls, ts+0 /* "TODO(ccgo)" */, ts+1788 /* "src/locale/iconv..." */, int32(483), x571__func__)
	if _c/uint32(256) != uint32(0xdc) {
		goto _109
	}

	_ptmp = _tmp
	X__assert_fail(tls, ts+0 /* "TODO(ccgo)" */, ts+1788 /* "src/locale/iconv..." */, int32(495), x571__func__)
	X__assert_fail(tls, ts+0 /* "TODO(ccgo)" */, ts+1788 /* "src/locale/iconv..." */, int32(497), x571__func__)
	X__assert_fail(tls, ts+0 /* "TODO(ccgo)" */, ts+1788 /* "src/locale/iconv..." */, int32(499), x571__func__)
	X__assert_fail(tls, ts+0 /* "TODO(ccgo)" */, ts+1788 /* "src/locale/iconv..." */, int32(501), x571__func__)
	X__assert_fail(tls, ts+0 /* "TODO(ccgo)" */, ts+1788 /* "src/locale/iconv..." */, int32(503), x571__func__)
	X__assert_fail(tls, ts+0 /* "TODO(ccgo)" */, ts+1788 /* "src/locale/iconv..." */, int32(505), x571__func__)
	X__assert_fail(tls, ts+0 /* "TODO(ccgo)" */, ts+1788 /* "src/locale/iconv..." */, int32(507), x571__func__)
	_tmplen = uint64(int64(_ptmp - _tmp))
	if _tmplen <= *(*uint64)(unsafe.Pointer(_outb)) {
		goto _110
	}

	goto ltoobig

_110:
	X__assert_fail(tls, ts+0 /* "TODO(ccgo)" */, ts+1788 /* "src/locale/iconv..." */, int32(511), x571__func__)
	Xmemcpy(tls, *(*uintptr)(unsafe.Pointer(_out)), _tmp, _tmplen)
	*(*uintptr)(unsafe.Pointer(_out)) += uintptr(_tmplen)
	{
		p := (*uint64)(unsafe.Pointer(_outb))
		*p = *p - _tmplen
	}
	goto _4

_109:
	if _c != 0 {
		goto _111
	}

	goto lilseq

_111:
	goto _6

_105:
	_c = _c - uint32(0xa1)
	X__assert_fail(tls, ts+0 /* "TODO(ccgo)" */, ts+1788 /* "src/locale/iconv..." */, int32(522), x571__func__)
	if _c != 0 {
		goto _112
	}

	goto lilseq

_112:
	goto _6

_26:
	if _c >= uint32(128) {
		goto _113
	}

	goto _6

_113:
	_l = uint64(2)
	if *(*uint64)(unsafe.Pointer(_inb)) >= uint64(2) {
		goto _114
	}

	goto lstarved

_114:
	_d = uint32(*(*uint8)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_in)) + uintptr(1))))
	_c = _c - uint32(0xa1)
	_d = _d - uint32(0xa1)
	if _c < uint32(93) && _d < uint32(94) {
		goto _115
	}

	_c = _c + uint32(32)
	_d = _d + uint32(0xa1)
	if _c < uint32(93) && (_c < uint32(69) || _d <= uint32(0x52)) {
		goto _116
	}

	goto lilseq

_116:
	if _d-uint32('A') >= uint32(26) {
		goto _117
	}

	_d = _d - uint32('A')
	goto _118

_117:
	if _d-uint32('a') >= uint32(26) {
		goto _119
	}

	_d = _d - uint32('a') + uint32(26)
	goto _120

_119:
	if _d-uint32(0x81) >= uint32(126) {
		goto _121
	}

	_d = _d - uint32(0x81) + uint32(52)
	goto _122

_121:
	goto lilseq

_122:
_120:
_118:
	if _c >= uint32(0x20) {
		goto _123
	}

	_c = uint32(178)*_c + _d
	goto _124

_123:
	_c = uint32(5696) + uint32(84)*(_c-uint32(0x20)) + _d
_124:
	_c = _c + uint32(0xac00)
	X__assert_fail(tls, ts+0 /* "TODO(ccgo)" */, ts+1788 /* "src/locale/iconv..." */, int32(545), x571__func__)
	X__assert_fail(tls, ts+0 /* "TODO(ccgo)" */, ts+1788 /* "src/locale/iconv..." */, int32(547), x571__func__)
	X__assert_fail(tls, ts+0 /* "TODO(ccgo)" */, ts+1788 /* "src/locale/iconv..." */, int32(549), x571__func__)
	X__assert_fail(tls, ts+0 /* "TODO(ccgo)" */, ts+1788 /* "src/locale/iconv..." */, int32(551), x571__func__)
	X__assert_fail(tls, ts+0 /* "TODO(ccgo)" */, ts+1788 /* "src/locale/iconv..." */, int32(553), x571__func__)
	X__assert_fail(tls, ts+0 /* "TODO(ccgo)" */, ts+1788 /* "src/locale/iconv..." */, int32(555), x571__func__)
	X__assert_fail(tls, ts+0 /* "TODO(ccgo)" */, ts+1788 /* "src/locale/iconv..." */, int32(557), x571__func__)
	X__assert_fail(tls, ts+0 /* "TODO(ccgo)" */, ts+1788 /* "src/locale/iconv..." */, int32(559), x571__func__)
	X__assert_fail(tls, ts+0 /* "TODO(ccgo)" */, ts+1788 /* "src/locale/iconv..." */, int32(561), x571__func__)
	goto _6

_115:
	X__assert_fail(tls, ts+0 /* "TODO(ccgo)" */, ts+1788 /* "src/locale/iconv..." */, int32(565), x571__func__)
	if _c != 0 {
		goto _125
	}

	goto lilseq

_125:
	goto _6

_27:
	if _c != 0 {
		goto _126
	}

	goto _6

_126:
	_c = xlegacy_map(tls, _map, _c)
	if _c != 0 {
		goto _127
	}

	goto lilseq

_127:
_6:
	switch int32(_totype) {
	case int32(0306):
		goto _129
	case int32(0310):
		goto _130
	case int32(0307):
		goto _131
	default:
		goto _132

	case int32(0321):
		goto _133
	case int32(0320):
		goto _134
	case int32(0322):
		goto _135
	case int32(0314):
		goto _136
	case int32(0304):
		goto _137
	case int32(0305):
		goto _138
	case int32(0312):
		goto _139
	case int32(0302):
		goto _140
	case int32(0301):
		goto _141
	case int32(0313):
		goto _142
	case int32(0300):
		goto _143
	case int32(0303):
		goto _144
	}
_129:
	if *(*uint64)(unsafe.Pointer(_outb)) >= uint64(4) {
		goto _145
	}

	goto ltoobig

_145:
	*(*int32)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_out)))) = int32(_c)
	*(*uintptr)(unsafe.Pointer(_out)) += uintptr(4)
	{
		p := (*uint64)(unsafe.Pointer(_outb))
		*p = *p - uint64(4)
	}
	goto _128

_130:
	if *(*uint64)(unsafe.Pointer(_outb)) >= uint64(4) {
		goto _146
	}

	_k = uint64(Xwctomb(tls, _1tmp, int32(_c)))
	if *(*uint64)(unsafe.Pointer(_outb)) >= _k {
		goto _148
	}

	goto ltoobig

_148:
	Xmemcpy(tls, *(*uintptr)(unsafe.Pointer(_out)), _1tmp, _k)
	goto _147

_146:
	_k = uint64(Xwctomb(tls, *(*uintptr)(unsafe.Pointer(_out)), int32(_c)))
_147:
	*(*uintptr)(unsafe.Pointer(_out)) += uintptr(_k)
	{
		p := (*uint64)(unsafe.Pointer(_outb))
		*p = *p - _k
	}
	goto _128

_131:
	if _c <= uint32(0x7f) {
		goto _149
	}

	goto lsubst
lsubst:
	_x++
	_c = uint32('*')
_149:
_132:
	if *(*uint64)(unsafe.Pointer(_outb)) >= uint64(1) {
		goto _150
	}

	goto ltoobig

_150:
	if _c >= uint32(256) || _c != xlegacy_map(tls, _tomap, _c) {
		goto _151
	}

	goto lrevout
lrevout:
	if *(*uint64)(unsafe.Pointer(_outb)) >= uint64(1) {
		goto _152
	}

	goto ltoobig

_152:
	*(*int8)(unsafe.Pointer(postinc570((*uintptr)(unsafe.Pointer(_out))))) = int8(_c)
	{
		p := (*uint64)(unsafe.Pointer(_outb))
		*p = *p - uint64(1)
	}
	goto _128

_151:
	_d = _c
	_c = uint32(int32(4) * int32(_totype))
_153:
	if _c >= uint32(256) {
		goto _155
	}

	if _d != xlegacy_map(tls, _tomap, _c) {
		goto _156
	}

	goto lrevout

_156:
	_c++
	goto _153

_155:
	goto lsubst

_133:
	if _c >= uint32(128) {
		goto _157
	}

	goto lrevout

_157:
	if _c != uint32(0xa5) {
		goto _158
	}

	_x++
	_c = uint32('\\')
	goto lrevout

_158:
	if _c != uint32(0x203e) {
		goto _159
	}

	_x++
	_c = uint32('~')
	goto lrevout

_159:
	if _c-uint32(0xff61) > uint32(62) {
		goto _160
	}

	_c = _c + uint32(4294902080)
	goto lrevout

_160:
	_c = xuni_to_jis(tls, _c)
	if _c != 0 {
		goto _161
	}

	goto lsubst

_161:
	if *(*uint64)(unsafe.Pointer(_outb)) >= uint64(2) {
		goto _162
	}

	goto ltoobig

_162:
	_d = _c % uint32(256)
	_c = _c / uint32(256)
	*(*int8)(unsafe.Pointer(postinc570((*uintptr)(unsafe.Pointer(_out))))) = int8((_c+uint32(1))/uint32(2) + uint32(func() int32 {
		if _c < uint32(95) {
			return int32(112)
		}
		return int32(176)
	}()))
	*(*int8)(unsafe.Pointer(postinc570((*uintptr)(unsafe.Pointer(_out))))) = int8(func() uint32 {
		if (_c % uint32(2)) != 0 {
			return _d + uint32(31) + _d/uint32(96)
		}
		return _d + uint32(126)
	}())
	{
		p := (*uint64)(unsafe.Pointer(_outb))
		*p = *p - uint64(2)
	}
	goto _128

_134:
	if _c >= uint32(128) {
		goto _163
	}

	goto lrevout

_163:
	if _c-uint32(0xff61) > uint32(62) {
		goto _164
	}

	_c = _c + uint32(4294905536)
	goto _165

_164:
	_c = xuni_to_jis(tls, _c)
_165:
	if _c != 0 {
		goto _166
	}

	goto lsubst

_166:
	if *(*uint64)(unsafe.Pointer(_outb)) >= uint64(2) {
		goto _167
	}

	goto ltoobig

_167:
	*(*int8)(unsafe.Pointer(postinc570((*uintptr)(unsafe.Pointer(_out))))) = int8(_c/uint32(256) + uint32(0x80))
	*(*int8)(unsafe.Pointer(postinc570((*uintptr)(unsafe.Pointer(_out))))) = int8(_c%uint32(256) + uint32(0x80))
	{
		p := (*uint64)(unsafe.Pointer(_outb))
		*p = *p - uint64(2)
	}
	goto _128

_135:
	if _c >= uint32(128) {
		goto _168
	}

	goto lrevout

_168:
	if _c-uint32(0xff61) > uint32(62) && _c != uint32(0xa5) && _c != uint32(0x203e) {
		goto _169
	}

	if *(*uint64)(unsafe.Pointer(_outb)) >= uint64(7) {
		goto _170
	}

	goto ltoobig

_170:
	*(*int8)(unsafe.Pointer(postinc570((*uintptr)(unsafe.Pointer(_out))))) = int8('\x1b')
	*(*int8)(unsafe.Pointer(postinc570((*uintptr)(unsafe.Pointer(_out))))) = int8('(')
	if _c != uint32(0xa5) {
		goto _171
	}

	*(*int8)(unsafe.Pointer(postinc570((*uintptr)(unsafe.Pointer(_out))))) = int8('J')
	*(*int8)(unsafe.Pointer(postinc570((*uintptr)(unsafe.Pointer(_out))))) = int8('\\')
	goto _172

_171:
	if _c != uint32(0x203e) {
		goto _173
	}

	*(*int8)(unsafe.Pointer(postinc570((*uintptr)(unsafe.Pointer(_out))))) = int8('J')
	*(*int8)(unsafe.Pointer(postinc570((*uintptr)(unsafe.Pointer(_out))))) = int8('~')
	goto _174

_173:
	*(*int8)(unsafe.Pointer(postinc570((*uintptr)(unsafe.Pointer(_out))))) = int8('I')
	*(*int8)(unsafe.Pointer(postinc570((*uintptr)(unsafe.Pointer(_out))))) = int8(_c - uint32(0xff61) + uint32(0x21))
_174:
_172:
	*(*int8)(unsafe.Pointer(postinc570((*uintptr)(unsafe.Pointer(_out))))) = int8('\x1b')
	*(*int8)(unsafe.Pointer(postinc570((*uintptr)(unsafe.Pointer(_out))))) = int8('(')
	*(*int8)(unsafe.Pointer(postinc570((*uintptr)(unsafe.Pointer(_out))))) = int8('B')
	{
		p := (*uint64)(unsafe.Pointer(_outb))
		*p = *p - uint64(7)
	}
	goto _128

_169:
	_c = xuni_to_jis(tls, _c)
	if _c != 0 {
		goto _175
	}

	goto lsubst

_175:
	if *(*uint64)(unsafe.Pointer(_outb)) >= uint64(8) {
		goto _176
	}

	goto ltoobig

_176:
	*(*int8)(unsafe.Pointer(postinc570((*uintptr)(unsafe.Pointer(_out))))) = int8('\x1b')
	*(*int8)(unsafe.Pointer(postinc570((*uintptr)(unsafe.Pointer(_out))))) = int8('$')
	*(*int8)(unsafe.Pointer(postinc570((*uintptr)(unsafe.Pointer(_out))))) = int8('B')
	*(*int8)(unsafe.Pointer(postinc570((*uintptr)(unsafe.Pointer(_out))))) = int8(_c / uint32(256))
	*(*int8)(unsafe.Pointer(postinc570((*uintptr)(unsafe.Pointer(_out))))) = int8(_c % uint32(256))
	*(*int8)(unsafe.Pointer(postinc570((*uintptr)(unsafe.Pointer(_out))))) = int8('\x1b')
	*(*int8)(unsafe.Pointer(postinc570((*uintptr)(unsafe.Pointer(_out))))) = int8('(')
	*(*int8)(unsafe.Pointer(postinc570((*uintptr)(unsafe.Pointer(_out))))) = int8('B')
	{
		p := (*uint64)(unsafe.Pointer(_outb))
		*p = *p - uint64(8)
	}
	goto _128

_136:
	_totype = uint8(0304)
_137:
_138:
_139:
_140:
_141:
	if _c >= uint32(0x10000) && uint32(int32(_totype)-int32(0304)) >= uint32(2) {
		goto _177
	}

	if _c < uint32(0x10000) {
		goto _178
	}

	_c = uint32(0xfffd)
_178:
	if *(*uint64)(unsafe.Pointer(_outb)) >= uint64(2) {
		goto _179
	}

	goto ltoobig

_179:
	xput_16(tls, *(*uintptr)(unsafe.Pointer(_out)), _c, int32(_totype))
	*(*uintptr)(unsafe.Pointer(_out)) += uintptr(2)
	{
		p := (*uint64)(unsafe.Pointer(_outb))
		*p = *p - uint64(2)
	}
	goto _128

_177:
	if *(*uint64)(unsafe.Pointer(_outb)) >= uint64(4) {
		goto _180
	}

	goto ltoobig

_180:
	_c = _c - uint32(0x10000)
	xput_16(tls, *(*uintptr)(unsafe.Pointer(_out)), _c>>(uint(10)%32)|uint32(0xd800), int32(_totype))
	xput_16(tls, *(*uintptr)(unsafe.Pointer(_out))+uintptr(2), _c&uint32(0x3ff)|uint32(0xdc00), int32(_totype))
	*(*uintptr)(unsafe.Pointer(_out)) += uintptr(4)
	{
		p := (*uint64)(unsafe.Pointer(_outb))
		*p = *p - uint64(4)
	}
	goto _128

_142:
	_totype = uint8(0300)
_143:
_144:
	if *(*uint64)(unsafe.Pointer(_outb)) >= uint64(4) {
		goto _181
	}

	goto ltoobig

_181:
	xput_32(tls, *(*uintptr)(unsafe.Pointer(_out)), _c, int32(_totype))
	*(*uintptr)(unsafe.Pointer(_out)) += uintptr(4)
	{
		p := (*uint64)(unsafe.Pointer(_outb))
		*p = *p - uint64(4)
	}
	goto _128

_128:
_4:
	*(*uintptr)(unsafe.Pointer(_in)) += uintptr(_l)
	{
		p := (*uint64)(unsafe.Pointer(_inb))
		*p = *p - _l
	}
	goto _3

_5:
	*(*uintptr)(unsafe.Pointer(_ploc)) = _loc
	return _x

	goto lilseq
lilseq:
	_err = int32(84)
	_x = uint64(18446744073709551615)
	goto lend

	goto ltoobig
ltoobig:
	_err = int32(7)
	_x = uint64(18446744073709551615)
	goto lend

	goto lstarved
lstarved:
	_err = int32(22)
	_x = uint64(18446744073709551615)
	goto lend
lend:
	*(*int32)(unsafe.Pointer(X__errno_location(tls))) = _err
	*(*uintptr)(unsafe.Pointer(_ploc)) = _loc
	return _x
}

type t279__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t279__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t61size_t = uint64

type Sstateful_cd = struct {
	Fbase_cd uintptr // Ticonv_t = *void
	Fstate   uint32
}

// xfind_charmap is defined at iconv.c:103:15
func xfind_charmap(tls TLS, _name uintptr /* *void */) (r uint64) {
	var _s uintptr // *uint8

	if *(*int8)(unsafe.Pointer(_name)) != 0 {
		goto _1
	}

	_name = xcharmaps
_1:
	_s = xcharmaps
_2:
	if *(*uint8)(unsafe.Pointer(_s)) == 0 {
		goto _4
	}

	if xfuzzycmp(tls, _name, _s) != 0 {
		goto _5
	}

_6:
	if *(*uint8)(unsafe.Pointer(_s)) == 0 {
		goto _8
	}

	_s += uintptr(Xstrlen(tls, _s) + uint64(1))
	goto _6

_8:
	return uint64(int64((_s + uintptr(1)) - xcharmaps))

_5:
	_s += uintptr(Xstrlen(tls, _s) + uint64(1))
	if *(*uint8)(unsafe.Pointer(_s)) != 0 {
		goto _9
	}

	if int32(*(*uint8)(unsafe.Pointer(_s + 1))) <= int32(0200) {
		goto _10
	}

	_s += uintptr(2)
	goto _11

_10:
	_s += uintptr(uint32(2) + (uint32(64)-uint32(*(*uint8)(unsafe.Pointer(_s + 1))))*uint32(5))
_11:
_9:
	goto _2

_4:
	return uint64(18446744073709551615)
}

// xcharmaps [4884]uint8, escapes: true, iconv.c:39:28
var xcharmaps = ds + 28112

// xcombine_to_from is defined at iconv.c:126:16
func xcombine_to_from(tls TLS, _t uint64, _f uint64) (r uintptr /* Ticonv_t = *void */) {
	return uintptr(_f<<(uint(16)%64) | _t<<(uint(1)%64) | uint64(1))
}

// x4__func__ [6]int8, escapes: true, iconv.c:241:1
var x571__func__ = ds + 33000

type s47__locale_struct = struct{ Fcat [6]uintptr }

type t4wchar_t = int32

// xextract_to is defined at iconv.c:136:15
func xextract_to(tls TLS, _cd uintptr /* Ticonv_t = *void */) (r uint64) {
	return uint64(_cd) >> (uint(1) % 64) & uint64(0x7fff)
}

// xextract_from is defined at iconv.c:131:15
func xextract_from(tls TLS, _cd uintptr /* Ticonv_t = *void */) (r uint64) {
	return uint64(_cd) >> (uint(16) % 64)
}

// x__pthread_self is defined at pthread_arch.h:1:30
func x9__pthread_self(tls TLS) (r uintptr /* *S__pthread */) {
	return uintptr(tls)
	return r
}

// xget_32 is defined at iconv.c:182:17
func xget_32(tls TLS, _s uintptr /* *uint8 */, _e int32) (r uint32) {
	_e = _e & int32(3)
	return (uint32(*(*uint8)(unsafe.Pointer(_s + uintptr(_e))))+uint32(0))<<(uint(24)%32) | uint32(int32(*(*uint8)(unsafe.Pointer(_s + uintptr(_e^int32(1)))))<<(uint(16)%32)) | uint32(int32(*(*uint8)(unsafe.Pointer(_s + uintptr(_e^int32(2)))))<<(uint(8)%32)) | uint32(*(*uint8)(unsafe.Pointer(_s + uintptr(_e^int32(3)))))
}

// xget_16 is defined at iconv.c:169:17
func xget_16(tls TLS, _s uintptr /* *uint8 */, _e int32) (r uint32) {
	_e = _e & int32(1)
	return uint32(int32(*(*uint8)(unsafe.Pointer(_s + uintptr(_e))))<<(uint(8)%32) | int32(*(*uint8)(unsafe.Pointer(_s + uintptr(int32(1)-_e)))))
}

// xlegacy_map is defined at iconv.c:201:17
func xlegacy_map(tls TLS, _map uintptr /* *uint8 */, _c uint32) (r uint32) {
	var _x uint32

	if _c >= uint32(int32(4)*int32(*(*uint8)(unsafe.Pointer(_map - 1)))) {
		goto _1
	}

	return _c

_1:
	_x = _c - uint32(int32(4)*int32(*(*uint8)(unsafe.Pointer(_map - 1))))
	_x = uint32(int32(*(*uint8)(unsafe.Pointer(_map + uintptr(_x*uint32(5)/uint32(4)))))>>(uint(uint32(2)*_x%uint32(8))%32) | int32(*(*uint8)(unsafe.Pointer(_map + uintptr(_x*uint32(5)/uint32(4)+uint32(1)))))<<(uint(uint32(8)-uint32(2)*_x%uint32(8))%32)&int32(1023))
	if _x < uint32(256) {
		return _x
	}

	return uint32(*(*uint16)(unsafe.Pointer(xlegacy_chars + 2*uintptr(_x-uint32(256)))))
}

// xuni_to_jis is defined at iconv.c:209:17
func xuni_to_jis(tls TLS, _c uint32) (r uint32) {
	var _b uint32
	_ = _b
	X__assert_fail(tls, ts+0 /* "TODO(ccgo)" */, ts+1788 /* "src/locale/iconv..." */, int32(211), x572__func__)
	_b = uint32(0)

_1:
	X__assert_fail(tls, ts+0 /* "TODO(ccgo)" */, ts+1788 /* "src/locale/iconv..." */, int32(215), x572__func__)
	X__assert_fail(tls, ts+0 /* "TODO(ccgo)" */, ts+1788 /* "src/locale/iconv..." */, int32(217), x572__func__)
	X__assert_fail(tls, ts+0 /* "TODO(ccgo)" */, ts+1788 /* "src/locale/iconv..." */, int32(219), x572__func__)
	X__assert_fail(tls, ts+0 /* "TODO(ccgo)" */, ts+1788 /* "src/locale/iconv..." */, int32(221), x572__func__)
	X__assert_fail(tls, ts+0 /* "TODO(ccgo)" */, ts+1788 /* "src/locale/iconv..." */, int32(223), x572__func__)
	X__assert_fail(tls, ts+0 /* "TODO(ccgo)" */, ts+1788 /* "src/locale/iconv..." */, int32(225), x572__func__)
	X__assert_fail(tls, ts+0 /* "TODO(ccgo)" */, ts+1788 /* "src/locale/iconv..." */, int32(227), x572__func__)
	X__assert_fail(tls, ts+0 /* "TODO(ccgo)" */, ts+1788 /* "src/locale/iconv..." */, int32(229), x572__func__)
	X__assert_fail(tls, ts+0 /* "TODO(ccgo)" */, ts+1788 /* "src/locale/iconv..." */, int32(231), x572__func__)
	X__assert_fail(tls, ts+0 /* "TODO(ccgo)" */, ts+1788 /* "src/locale/iconv..." */, int32(233), x572__func__)
	X__assert_fail(tls, ts+0 /* "TODO(ccgo)" */, ts+1788 /* "src/locale/iconv..." */, int32(235), x572__func__)
	goto _1
	return r
}

// xput_16 is defined at iconv.c:175:13
func xput_16(tls TLS, _s uintptr /* *uint8 */, _c uint32, _e int32) {
	_e = _e & int32(1)
	*(*uint8)(unsafe.Pointer(_s + uintptr(_e))) = uint8(_c >> (uint(8) % 32))
	*(*uint8)(unsafe.Pointer(_s + uintptr(int32(1)-_e))) = uint8(_c)
}

// xput_32 is defined at iconv.c:188:13
func xput_32(tls TLS, _s uintptr /* *uint8 */, _c uint32, _e int32) {
	_e = _e & int32(3)
	*(*uint8)(unsafe.Pointer(_s + uintptr(_e^int32(0)))) = uint8(_c >> (uint(24) % 32))
	*(*uint8)(unsafe.Pointer(_s + uintptr(_e^int32(1)))) = uint8(_c >> (uint(16) % 32))
	*(*uint8)(unsafe.Pointer(_s + uintptr(_e^int32(2)))) = uint8(_c >> (uint(8) % 32))
	*(*uint8)(unsafe.Pointer(_s + uintptr(_e^int32(3)))) = uint8(_c)
}

// xfuzzycmp is defined at iconv.c:94:12
func xfuzzycmp(tls TLS, _a uintptr /* *uint8 */, _b uintptr /* *uint8 */) (r int32) {
_1:
	if *(*uint8)(unsafe.Pointer(_a)) == 0 || *(*uint8)(unsafe.Pointer(_b)) == 0 {
		goto _3
	}

_4:
	if *(*uint8)(unsafe.Pointer(_a)) == 0 || uint32(*(*uint8)(unsafe.Pointer(_a)))|uint32(32)-uint32('a') <= uint32(26) || uint32(int32(*(*uint8)(unsafe.Pointer(_a)))-int32('0')) <= uint32(10) {
		goto _5
	}

	_a++
	goto _4

_5:
	if uint32(*(*uint8)(unsafe.Pointer(_a)))|uint32(32) == uint32(*(*uint8)(unsafe.Pointer(_b))) {
		goto _6
	}

	return int32(1)

_6:
	_a++
	_b++
	goto _1

_3:
	return bool2int(int32(*(*uint8)(unsafe.Pointer(_a))) != int32(*(*uint8)(unsafe.Pointer(_b))))
}

type s13__pthread = struct {
	Fself          uintptr // *S__pthread
	Fdtv           uintptr // **void
	Funused1       uintptr // *void
	Funused2       uintptr // *void
	Fsysinfo       uint64
	Fcanary        uint64
	Fcanary2       uint64
	Ftid           int32
	Ferrno_val     int32
	Fdetach_state  int32
	Fcancel        int32
	Fcanceldisable uint8
	Fcancelasync   uint8
	F74            uint8
	Fmap_base      uintptr // *uint8
	Fmap_size      uint64
	Fstack         uintptr // *void
	Fstack_size    uint64
	Fguard_size    uint64
	Fstart_arg     uintptr // *void
	Fstart         uintptr // *func(TLS, uintptr) uintptr
	Fresult        uintptr // *void
	Fcancelbuf     uintptr // *S__ptcb
	Ftsd           uintptr // **void
	Frobust_list   struct {
		Fhead    uintptr
		Foff     int64
		Fpending uintptr
	}
	Ftimer_id      int32
	Flocale        uintptr // Tlocale_t = *S__locale_struct
	Fkilllock      [1]int32
	Fdlerror_buf   uintptr // *int8
	Fstdio_locks   uintptr // *void
	Fcanary_at_end uint64
	Fdtv_copy      uintptr // **void
}

// xlegacy_chars [612]uint16, escapes: true, iconv.c:66:29
var xlegacy_chars = ds + 33008

// x16__func__ [11]int8, escapes: true, iconv.c:210:1
var x572__func__ = ds + 34232

type t14uintptr_t = uint64

type s11__ptcb = struct {
	F__f    uintptr // *func(TLS, uintptr)
	F__x    uintptr // *void
	F__next uintptr // *S__ptcb
}

// linking iconv_close.o

// Xiconv_close is defined at iconv_close.c:4:5
func Xiconv_close(tls TLS, _cd uintptr /* Ticonv_t = *void */) (r int32) {
	if uint64(_cd)&uint64(1) != 0 {
		goto _1
	}

	Xfree(tls, _cd)
_1:
	return int32(0)
}

type t280__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t280__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t62size_t = uint64

// linking langinfo.o

// X__nl_langinfo_l is defined at langinfo.c:30:6
func X__nl_langinfo_l(tls TLS, _item int32, _loc uintptr /* Tlocale_t = *S__locale_struct */) (r uintptr /* *int8 */) {
	var (
		_cat int32
		_idx int32
		_str uintptr // *int8
	)
	_cat = _item >> (uint(16) % 32)
	_idx = _item & int32(65535)
	if _item != int32(14) {
		goto _1
	}

	if *(*uintptr)(unsafe.Pointer(_loc)) != 0 {
		return ts + 1720 /* "UTF-8" */
	}

	return ts + 1808 /* "ASCII" */

_1:
	if _idx != int32(65535) || _cat >= int32(6) {
		goto _2
	}

	if *(*uintptr)(unsafe.Pointer(_loc + 8*uintptr(_cat))) != 0 {
		return *(*uintptr)(unsafe.Pointer(_loc + 8*uintptr(_cat))) + 16
	}

	return ts + 1816 /* "C" */

_2:
	switch _cat {
	case int32(1):
		goto _4
	case int32(2):
		goto _5
	case int32(4):
		goto _6
	case int32(5):
		goto _7
	default:
		goto _8
	}
_4:
	if _idx <= int32(1) {
		goto _9
	}

	return ts + 112 /* "" */

_9:
	_str = xc_numeric
	goto _3

_5:
	if _idx <= int32(0x31) {
		goto _10
	}

	return ts + 112 /* "" */

_10:
	_str = xc_time
	goto _3

_6:
	if _idx <= int32(0) {
		goto _11
	}

	return ts + 112 /* "" */

_11:
	_str = ts + 112 /* "" */
	goto _3

_7:
	if _idx <= int32(3) {
		goto _12
	}

	return ts + 112 /* "" */

_12:
	_str = xc_messages
	goto _3

_8:
	return ts + 112 /* "" */

_3:
_13:
	if _idx == 0 {
		goto _15
	}

_16:
	if *(*int8)(unsafe.Pointer(_str)) == 0 {
		goto _18
	}

	_str++
	goto _16

_18:
	_idx--
	_str++
	goto _13

_15:
	if _cat == int32(1) || *(*int8)(unsafe.Pointer(_str)) == 0 {
		goto _19
	}

	_str = X__lctrans(tls, _str, *(*uintptr)(unsafe.Pointer(_loc + 8*uintptr(_cat))))
_19:
	return _str
}

// X__nl_langinfo is defined at langinfo.c:68:6
func X__nl_langinfo(tls TLS, _item int32) (r uintptr /* *int8 */) {
	return X__nl_langinfo_l(tls, _item, *(*uintptr)(unsafe.Pointer(x10__pthread_self(tls) + 192)))
}

type t281__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t281__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type Tnl_item = int32

type s48__locale_struct = struct{ Fcat [6]uintptr }

// xc_numeric [3]int8, escapes: true, langinfo.c:28:19
var xc_numeric = ds + 34248

// xc_time [308]int8, escapes: true, langinfo.c:6:19
var xc_time = ds + 34256

// xc_messages [19]int8, escapes: true, langinfo.c:27:19
var xc_messages = ds + 34568

// x__pthread_self is defined at pthread_arch.h:1:30
func x10__pthread_self(tls TLS) (r uintptr /* *S__pthread */) {
	return uintptr(tls)
	return r
}

type s14__pthread = struct {
	Fself          uintptr // *S__pthread
	Fdtv           uintptr // **void
	Funused1       uintptr // *void
	Funused2       uintptr // *void
	Fsysinfo       uint64
	Fcanary        uint64
	Fcanary2       uint64
	Ftid           int32
	Ferrno_val     int32
	Fdetach_state  int32
	Fcancel        int32
	Fcanceldisable uint8
	Fcancelasync   uint8
	F74            uint8
	Fmap_base      uintptr // *uint8
	Fmap_size      uint64
	Fstack         uintptr // *void
	Fstack_size    uint64
	Fguard_size    uint64
	Fstart_arg     uintptr // *void
	Fstart         uintptr // *func(TLS, uintptr) uintptr
	Fresult        uintptr // *void
	Fcancelbuf     uintptr // *S__ptcb
	Ftsd           uintptr // **void
	Frobust_list   struct {
		Fhead    uintptr
		Foff     int64
		Fpending uintptr
	}
	Ftimer_id      int32
	Flocale        uintptr // Tlocale_t = *S__locale_struct
	Fkilllock      [1]int32
	Fdlerror_buf   uintptr // *int8
	Fstdio_locks   uintptr // *void
	Fcanary_at_end uint64
	Fdtv_copy      uintptr // **void
}

type t15uintptr_t = uint64

type t63size_t = uint64

type s12__ptcb = struct {
	F__f    uintptr // *func(TLS, uintptr)
	F__x    uintptr // *void
	F__next uintptr // *S__ptcb
}

// linking locale_map.o

// X__lctrans_impl is defined at locale_map.c:8:12
func X__lctrans_impl(tls TLS, _msg uintptr /* *int8 */, _lm uintptr /* *S__locale_map */) (r uintptr /* *int8 */) {
	var _trans uintptr // *int8

	_trans = 0
	if _lm == 0 {
		goto _1
	}

	_trans = X__mo_lookup(tls, *(*uintptr)(unsafe.Pointer(_lm)), *(*uint64)(unsafe.Pointer(_lm + 8)), _msg)
_1:
	if _trans != 0 {
		return _trans
	}

	return _msg
}

func set573(p *uintptr, v uintptr) uintptr { *p = v; return v }

// X__get_locale is defined at locale_map.c:28:27
func X__get_locale(tls TLS, _cat int32, _val uintptr /* *int8 */) (r uintptr /* *S__locale_map */) {
	esc := MustMalloc(264)
	var (
		_p        uintptr // *S__locale_map
		_new      uintptr // *S__locale_map
		_path     uintptr // *int8
		_z        uintptr // *int8
		_buf      = esc   // *[256]int8
		_l        uint64
		_n        uint64
		_builtin  int32
		_map_size = esc + 256 // *Tsize_t = uint64
		_map      uintptr     // *void
	)
	defer Free(esc)
	_new = 0
	_path = 0
	if *(*int8)(unsafe.Pointer(_val)) != 0 {
		goto _1
	}

	if (set573(&_val, Xgetenv(tls, ts+1820 /* "LC_ALL" */)) == 0 || *(*int8)(unsafe.Pointer(_val)) == 0) && (set573(&_val, Xgetenv(tls, xenvvars+12*uintptr(_cat))) == 0 || *(*int8)(unsafe.Pointer(_val)) == 0) && (set573(&_val, Xgetenv(tls, ts+1828 /* "LANG" */)) == 0 || *(*int8)(unsafe.Pointer(_val)) == 0) {
		_val = ts + 1836 /* "C.UTF-8" */
	}
_1:
	_n = uint64(0)
_2:
	if _n >= uint64(23) || *(*int8)(unsafe.Pointer(_val + uintptr(_n))) == 0 || int32(*(*int8)(unsafe.Pointer(_val + uintptr(_n)))) == int32('/') {
		goto _4
	}

	_n++
	goto _2

_4:
	if int32(*(*int8)(unsafe.Pointer(_val))) != int32('.') && *(*int8)(unsafe.Pointer(_val + uintptr(_n))) == 0 {
		goto _5
	}

	_val = ts + 1836 /* "C.UTF-8" */
_5:
	_builtin = bool2int((((int32(*(*int8)(unsafe.Pointer(_val))) == int32('C')) && (*(*int8)(unsafe.Pointer(_val + 1)) == 0)) || (Xstrcmp(tls, _val, ts+1836 /* "C.UTF-8" */) == 0)) || (Xstrcmp(tls, _val, ts+1844 /* "POSIX" */) == 0))
	if _builtin == 0 {
		goto _6
	}

	if _cat != int32(0) || int32(*(*int8)(unsafe.Pointer(_val + 1))) != int32('.') {
		goto _7
	}

	return X__c_dot_utf8

_7:
	return null

_6:
	_p = x574loc_head
_8:
	if _p == 0 {
		goto _10
	}

	if Xstrcmp(tls, _val, _p+16) != 0 {
		goto _11
	}

	return _p

_11:
	_p = *(*uintptr)(unsafe.Pointer(_p + 40))
	goto _8

_10:
	X__lock(tls, x575lock)
	_p = x574loc_head
_12:
	if _p == 0 {
		goto _14
	}

	if Xstrcmp(tls, _val, _p+16) != 0 {
		goto _15
	}

	X__unlock(tls, x575lock)
	return _p

_15:
	_p = *(*uintptr)(unsafe.Pointer(_p + 40))
	goto _12

_14:
	if *(*int32)(unsafe.Pointer(X__libc + 8)) != 0 {
		goto _16
	}

	_path = Xgetenv(tls, ts+1852 /* "MUSL_LOCPATH" */)
_16:
	if _path == 0 {
		goto _17
	}

_18:
	if *(*int8)(unsafe.Pointer(_path)) == 0 {
		goto _20
	}

	_z = X__strchrnul(tls, _path, int32(':'))
	_l = uint64(int64(_z-_path) - int64(bool2int(*(*int8)(unsafe.Pointer(_z)) != 0)))
	if _l < uint64(256)-_n-uint64(2) {
		goto _21
	}

	goto _19

_21:
	Xmemcpy(tls, _buf, _path, _l)
	*(*int8)(unsafe.Pointer(_buf + uintptr(_l))) = int8('/')
	Xmemcpy(tls, (_buf+uintptr(_l))+uintptr(1), _val, _n)
	*(*int8)(unsafe.Pointer(_buf + uintptr(_l+uint64(1)+_n))) = int8(0)
	_map = X__map_file(tls, _buf, _map_size)
	if _map == 0 {
		goto _22
	}

	_new = Xmalloc(tls, uint64(48))
	if _new != 0 {
		goto _23
	}

	X__munmap(tls, _map, *(*uint64)(unsafe.Pointer(_map_size)))
	goto _20

_23:
	*(*uintptr)(unsafe.Pointer(_new)) = _map
	*(*uint64)(unsafe.Pointer(_new + 8)) = *(*uint64)(unsafe.Pointer(_map_size))
	Xmemcpy(tls, _new+16, _val, _n)
	*(*int8)(unsafe.Pointer((_new + 16) + uintptr(_n))) = int8(0)
	*(*uintptr)(unsafe.Pointer(_new + 40)) = x574loc_head
	x574loc_head = _new
	goto _20

_22:
_19:
	_path = _z + uintptr(bool2int(*(*int8)(unsafe.Pointer(_z)) != 0))
	goto _18

_20:
_17:
	if _new != 0 || set573(&_new, Xmalloc(tls, uint64(48))) == 0 {
		goto _24
	}

	*(*uintptr)(unsafe.Pointer(_new)) = *(*uintptr)(unsafe.Pointer(X__c_dot_utf8))
	*(*uint64)(unsafe.Pointer(_new + 8)) = *(*uint64)(unsafe.Pointer(X__c_dot_utf8 + 8))
	Xmemcpy(tls, _new+16, _val, _n)
	*(*int8)(unsafe.Pointer((_new + 16) + uintptr(_n))) = int8(0)
	*(*uintptr)(unsafe.Pointer(_new + 40)) = x574loc_head
	x574loc_head = _new
_24:
	if _new != 0 || _cat != int32(0) {
		goto _25
	}

	_new = X__c_dot_utf8
_25:
	X__unlock(tls, x575lock)
	return _new
}

type t282__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t282__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type s2__locale_map = struct {
	Fmap      uintptr // *void
	Fmap_size uint64
	Fname     [24]int8
	Fnext     uintptr // *S__locale_map
}

type t64size_t = uint64

// x1lock [1]int32, escapes: true, locale_map.c:30:22
var x575lock = bss + 2040

// x2loc_head *void, escapes: false, locale_map.c:31:14
var x574loc_head uintptr

// xenvvars [6][12]int8, escapes: true, locale_map.c:19:19
var xenvvars = ds + 34592

// linking localeconv.o

// Xlocaleconv is defined at localeconv.c:31:14
func Xlocaleconv(tls TLS) (r uintptr /* *Slconv */) {
	return xposix_lconv
}

type t283__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t283__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type Slconv = struct {
	Fdecimal_point      uintptr // *int8
	Fthousands_sep      uintptr // *int8
	Fgrouping           uintptr // *int8
	Fint_curr_symbol    uintptr // *int8
	Fcurrency_symbol    uintptr // *int8
	Fmon_decimal_point  uintptr // *int8
	Fmon_thousands_sep  uintptr // *int8
	Fmon_grouping       uintptr // *int8
	Fpositive_sign      uintptr // *int8
	Fnegative_sign      uintptr // *int8
	Fint_frac_digits    int8
	Ffrac_digits        int8
	Fp_cs_precedes      int8
	Fp_sep_by_space     int8
	Fn_cs_precedes      int8
	Fn_sep_by_space     int8
	Fp_sign_posn        int8
	Fn_sign_posn        int8
	Fint_p_cs_precedes  int8
	Fint_p_sep_by_space int8
	Fint_n_cs_precedes  int8
	Fint_n_sep_by_space int8
	Fint_p_sign_posn    int8
	Fint_n_sign_posn    int8
}

// xposix_lconv Slconv, escapes: true, localeconv.c:4:27
var xposix_lconv = bss + 2048 // struct lconv

func init() {
	*(*Slconv)(unsafe.Pointer(xposix_lconv)) = Slconv{
		Fdecimal_point:      ts + 1868, /* "." */
		Fthousands_sep:      ts + 112,  /* "" */
		Fgrouping:           ts + 112,  /* "" */
		Fint_curr_symbol:    ts + 112,  /* "" */
		Fcurrency_symbol:    ts + 112,  /* "" */
		Fmon_decimal_point:  ts + 112,  /* "" */
		Fmon_thousands_sep:  ts + 112,  /* "" */
		Fmon_grouping:       ts + 112,  /* "" */
		Fpositive_sign:      ts + 112,  /* "" */
		Fnegative_sign:      ts + 112,  /* "" */
		Fint_frac_digits:    int8(127),
		Ffrac_digits:        int8(127),
		Fp_cs_precedes:      int8(127),
		Fp_sep_by_space:     int8(127),
		Fn_cs_precedes:      int8(127),
		Fn_sep_by_space:     int8(127),
		Fp_sign_posn:        int8(127),
		Fn_sign_posn:        int8(127),
		Fint_p_cs_precedes:  int8(127),
		Fint_p_sep_by_space: int8(127),
		Fint_n_cs_precedes:  int8(127),
		Fint_n_sep_by_space: int8(127),
		Fint_p_sign_posn:    int8(127),
		Fint_n_sign_posn:    int8(127),
	}
}

// linking newlocale.o

// X__loc_is_allocated is defined at newlocale.c:7:5
func X__loc_is_allocated(tls TLS, _loc uintptr /* Tlocale_t = *S__locale_struct */) (r int32) {
	X__assert_fail(tls, ts+0 /* "TODO(ccgo)" */, ts+1872 /* "src/locale/newlo..." */, int32(9), x576__func__)
	return r
}

func set577(p *int32, v int32) int32 { *p = v; return v }

func set578(p *uintptr, v uintptr) uintptr { *p = v; return v }

// X__newlocale is defined at newlocale.c:13:10
func X__newlocale(tls TLS, _mask int32, _name uintptr /* *int8 */, _loc uintptr /* Tlocale_t = *S__locale_struct */) (r uintptr /* Tlocale_t = *S__locale_struct */) {
	esc := MustMalloc(48)
	var (
		_i   int32
		_j   int32
		_tmp = esc   // *S__locale_struct
		_lm  uintptr // *S__locale_map
	)
	defer Free(esc)
	if X__loc_is_allocated(tls, _loc) == 0 {
		goto _1
	}

	_i = int32(0)
_2:
	if _i >= int32(6) {
		goto _4
	}

	if (_mask & (int32(1) << (uint(_i) % 32))) == 0 {
		goto _5
	}

	*(*uintptr)(unsafe.Pointer(_loc + 8*uintptr(_i))) = X__get_locale(tls, _i, _name)
_5:
	_i++
	goto _2

_4:
	return _loc

_1:
	_j = set577(&_i, int32(0))
_6:
	if _i >= int32(6) {
		goto _8
	}

	if _loc == 0 || _mask&(int32(1)<<(uint(_i)%32)) != 0 {
		goto _9
	}

	_lm = *(*uintptr)(unsafe.Pointer(_loc + 8*uintptr(_i)))
	goto _10

_9:
	_lm = X__get_locale(tls, _i, func() uintptr {
		if (_mask & (int32(1) << (uint(_i) % 32))) != 0 {
			return _name
		}
		return ts + 112 /* "" */
	}())
_10:
	if _lm == 0 {
		goto _11
	}

	_j++
_11:
	*(*uintptr)(unsafe.Pointer(_tmp + 8*uintptr(_i))) = _lm
	_i++
	goto _6

_8:
	if _j != 0 {
		goto _12
	}

	return X__c_locale

_12:
	X__assert_fail(tls, ts+0 /* "TODO(ccgo)" */, ts+1872 /* "src/locale/newlo..." */, int32(43), x579__func__)
	X__assert_fail(tls, ts+0 /* "TODO(ccgo)" */, ts+1872 /* "src/locale/newlo..." */, int32(45), x579__func__)
	if set578(&_loc, Xmalloc(tls, uint64(48))) == 0 {
		goto _13
	}

	*(*s49__locale_struct)(unsafe.Pointer(_loc)) = *(*s49__locale_struct)(unsafe.Pointer(_tmp))
_13:
	return _loc
}

type t284__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t284__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type s49__locale_struct = struct{ Fcat [6]uintptr }

// x1__func__ [19]int8, escapes: true, newlocale.c:8:1
var x576__func__ = ds + 34664

// x2__func__ [12]int8, escapes: true, newlocale.c:14:1
var x579__func__ = ds + 34688

type s3__locale_map = struct {
	Fmap      uintptr // *void
	Fmap_size uint64
	Fname     [24]int8
	Fnext     uintptr // *S__locale_map
}

type t65size_t = uint64

// linking pleval.o

// X__pleval is defined at pleval.c:151:15
func X__pleval(tls TLS, _s uintptr /* *int8 */, _n uint64) (r uint64) {
	esc := MustMalloc(24)
	var _st = esc // *Sst
	defer Free(esc)
	*(*uint64)(unsafe.Pointer(_st + 8)) = _n
	_s = xevalexpr(tls, _st, _s, int32(100))
	if int32(*(*int8)(unsafe.Pointer(_s))) == int32(';') {
		return *(*uint64)(unsafe.Pointer(_st))
	}

	return uint64(18446744073709551615)
}

type t285__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t285__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type Sst = struct {
	Fr  uint64
	Fn  uint64
	Fop int32
}

func preinc580(p *int32) int32 { *p += -1; return *p }

// xevalexpr is defined at pleval.c:133:19
func xevalexpr(tls TLS, _st uintptr /* *Sst */, _s uintptr /* *int8 */, _d int32) (r uintptr /* *int8 */) {
	var (
		_a uint64
		_b uint64
	)
	if preinc580(&_d) >= int32(0) {
		goto _1
	}

	return ts + 112 /* "" */

_1:
	_s = xevalbinop(tls, _st, _s, int32(0), _d)
	if int32(*(*int8)(unsafe.Pointer(_s))) == int32('?') {
		goto _2
	}

	return _s

_2:
	_a = *(*uint64)(unsafe.Pointer(_st))
	_s = xevalexpr(tls, _st, _s+uintptr(1), _d)
	if int32(*(*int8)(unsafe.Pointer(_s))) == int32(':') {
		goto _3
	}

	return ts + 112 /* "" */

_3:
	_b = *(*uint64)(unsafe.Pointer(_st))
	_s = xevalexpr(tls, _st, _s+uintptr(1), _d)
	*(*uint64)(unsafe.Pointer(_st)) = func() uint64 {
		if _a != 0 {
			return _b
		}
		return *(*uint64)(unsafe.Pointer(_st))
	}()
	return _s
}

// xevalbinop is defined at pleval.c:109:19
func xevalbinop(tls TLS, _st uintptr /* *Sst */, _s uintptr /* *int8 */, _minprec int32, _d int32) (r uintptr /* *int8 */) {
	var (
		_left uint64
		_op   int32
	)
	_d--
	_s = xevalprim(tls, _st, _s, _d)
	_s = xparseop(tls, _st, _s)

_1:
	_op = *(*int32)(unsafe.Pointer(_st + 16))
	if int32(*(*int8)(unsafe.Pointer(x581prec + uintptr(_op)))) > _minprec {
		goto _4
	}

	return _s

_4:
	_left = *(*uint64)(unsafe.Pointer(_st))
	_s = xevalbinop(tls, _st, _s, int32(*(*int8)(unsafe.Pointer(x581prec + uintptr(_op)))), _d)
	if xbinop(tls, _st, _op, _left) == 0 {
		goto _5
	}

	return ts + 112 /* "" */

_5:
	goto _1
	return r
}

// x3prec [14]int8, escapes: true, pleval.c:111:20
var x581prec = ds + 34704

// xevalprim is defined at pleval.c:39:19
func xevalprim(tls TLS, _st uintptr /* *Sst */, _s uintptr /* *int8 */, _d int32) (r uintptr /* *int8 */) {
	esc := MustMalloc(8)
	var _e = esc // **int8
	defer Free(esc)
	if preinc580(&_d) >= int32(0) {
		goto _1
	}

	return ts + 112 /* "" */

_1:
	_s = xskipspace(tls, _s)
	if uint32(*(*int8)(unsafe.Pointer(_s)))-uint32('0') >= uint32(10) {
		goto _2
	}

	*(*uint64)(unsafe.Pointer(_st)) = Xstrtoul(tls, _s, _e, int32(10))
	if *(*uintptr)(unsafe.Pointer(_e)) != _s && *(*uint64)(unsafe.Pointer(_st)) != uint64(18446744073709551615) {
		goto _3
	}

	return ts + 112 /* "" */

_3:
	return xskipspace(tls, *(*uintptr)(unsafe.Pointer(_e)))

_2:
	if int32(*(*int8)(unsafe.Pointer(_s))) != int32('n') {
		goto _4
	}

	*(*uint64)(unsafe.Pointer(_st)) = *(*uint64)(unsafe.Pointer(_st + 8))
	return xskipspace(tls, _s+uintptr(1))

_4:
	if int32(*(*int8)(unsafe.Pointer(_s))) != int32('(') {
		goto _5
	}

	_s = xevalexpr(tls, _st, _s+uintptr(1), _d)
	if int32(*(*int8)(unsafe.Pointer(_s))) == int32(')') {
		goto _6
	}

	return ts + 112 /* "" */

_6:
	return xskipspace(tls, _s+uintptr(1))

_5:
	if int32(*(*int8)(unsafe.Pointer(_s))) != int32('!') {
		goto _7
	}

	_s = xevalprim(tls, _st, _s+uintptr(1), _d)
	*(*uint64)(unsafe.Pointer(_st)) = uint64(bool2int(*(*uint64)(unsafe.Pointer(_st)) == 0))
	return _s

_7:
	return ts + 112 /* "" */
}

// xparseop is defined at pleval.c:87:19
func xparseop(tls TLS, _st uintptr /* *Sst */, _s uintptr /* *int8 */) (r uintptr /* *int8 */) {
	var _i int32

	_i = int32(0)
_1:
	if _i >= int32(11) {
		goto _3
	}

	if int32(*(*int8)(unsafe.Pointer(_s))) != int32(*(*int8)(unsafe.Pointer(x582opch + uintptr(_i)))) {
		goto _4
	}

	if _i >= int32(6) || int32(*(*int8)(unsafe.Pointer(_s + 1))) != int32(*(*int8)(unsafe.Pointer(x583opch2 + uintptr(_i)))) {
		goto _5
	}

	*(*int32)(unsafe.Pointer(_st + 16)) = _i
	return _s + uintptr(2)

_5:
	if _i < int32(4) {
		goto _6
	}

	*(*int32)(unsafe.Pointer(_st + 16)) = _i + int32(2)
	return _s + uintptr(1)

_6:
	goto _3

_4:
	_i++
	goto _1

_3:
	*(*int32)(unsafe.Pointer(_st + 16)) = int32(13)
	return _s
}

// xbinop is defined at pleval.c:66:12
func xbinop(tls TLS, _st uintptr /* *Sst */, _op int32, _left uint64) (r int32) {
	var (
		_a uint64
		_b uint64
	)
	_a = _left
	_b = *(*uint64)(unsafe.Pointer(_st))
	switch _op {
	case int32(0):
		goto _2
	case int32(1):
		goto _3
	case int32(2):
		goto _4
	case int32(3):
		goto _5
	case int32(4):
		goto _6
	case int32(5):
		goto _7
	case int32(6):
		goto _8
	case int32(7):
		goto _9
	case int32(8):
		goto _10
	case int32(9):
		goto _11
	case int32(10):
		goto _12
	case int32(11):
		goto _13
	case int32(12):
		goto _14
	}
	goto _1

_2:
	*(*uint64)(unsafe.Pointer(_st)) = uint64(bool2int((_a != 0) || (_b != 0)))
	return int32(0)

_3:
	*(*uint64)(unsafe.Pointer(_st)) = uint64(bool2int((_a != 0) && (_b != 0)))
	return int32(0)

_4:
	*(*uint64)(unsafe.Pointer(_st)) = uint64(bool2int(_a == _b))
	return int32(0)

_5:
	*(*uint64)(unsafe.Pointer(_st)) = uint64(bool2int(_a != _b))
	return int32(0)

_6:
	*(*uint64)(unsafe.Pointer(_st)) = uint64(bool2int(_a >= _b))
	return int32(0)

_7:
	*(*uint64)(unsafe.Pointer(_st)) = uint64(bool2int(_a <= _b))
	return int32(0)

_8:
	*(*uint64)(unsafe.Pointer(_st)) = uint64(bool2int(_a > _b))
	return int32(0)

_9:
	*(*uint64)(unsafe.Pointer(_st)) = uint64(bool2int(_a < _b))
	return int32(0)

_10:
	*(*uint64)(unsafe.Pointer(_st)) = _a + _b
	return int32(0)

_11:
	*(*uint64)(unsafe.Pointer(_st)) = _a - _b
	return int32(0)

_12:
	*(*uint64)(unsafe.Pointer(_st)) = _a * _b
	return int32(0)

_13:
	if _b == 0 {
		goto _15
	}

	*(*uint64)(unsafe.Pointer(_st)) = _a % _b
	return int32(0)

_15:
	return int32(1)

_14:
	if _b == 0 {
		goto _16
	}

	*(*uint64)(unsafe.Pointer(_st)) = _a / _b
	return int32(0)

_16:
	return int32(1)

_1:
	return int32(1)
}

// xskipspace is defined at pleval.c:31:19
func xskipspace(tls TLS, _s uintptr /* *int8 */) (r uintptr /* *int8 */) {
_1:
	if x2__isspace(tls, int32(*(*int8)(unsafe.Pointer(_s)))) == 0 {
		goto _2
	}

	_s++
	goto _1

_2:
	return _s
}

// x9opch [11]int8, escapes: true, pleval.c:89:20
var x582opch = ds + 34720

// x10opch2 [6]int8, escapes: true, pleval.c:90:20
var x583opch2 = ds + 34736

// x__isspace is defined at ctype.h:26:21
func x2__isspace(tls TLS, __c int32) (r int32) {
	return bool2int((__c == int32(' ')) || (uint32(__c)-uint32('\t') < uint32(5)))
}

// linking setlocale.o

func preinc584(p *uintptr) uintptr { *p += 18446744073709551615; return *p }

// Xsetlocale is defined at setlocale.c:22:6
func Xsetlocale(tls TLS, _cat int32, _name uintptr /* *int8 */) (r uintptr /* *int8 */) {
	esc := MustMalloc(24)
	var (
		_i     int32
		_part  = esc   // *[24]int8
		_p     uintptr // *int8
		_z     uintptr // *int8
		_s     uintptr // *int8
		_1part uintptr // *int8
		_same  int32
		_lm    uintptr // *S__locale_map
		_l     uint64
		_ret   uintptr // *int8
	)
	defer Free(esc)
	if uint32(_cat) <= uint32(6) {
		goto _1
	}

	return null

_1:
	X__lock(tls, x585lock)
	if _cat != int32(6) {
		goto _2
	}

	if _name == 0 {
		goto _3
	}

	*(*[24]int8)(unsafe.Pointer(_part)) = *(*[24]int8)(unsafe.Pointer(ts + 1728 /* "C.UTF-8\x00\x00\x00\x00\x00\x00\x00\x00\x00..." */))
	_p = _name
	_i = int32(0)
_4:
	if _i >= int32(6) {
		goto _6
	}

	_z = X__strchrnul(tls, _p, int32(';'))
	if int64(_z-_p) > int64(23) {
		goto _7
	}

	Xmemcpy(tls, _part, _p, uint64(int64(_z-_p)))
	*(*int8)(unsafe.Pointer(_part + uintptr(int64(_z-_p)))) = int8(0)
	if *(*int8)(unsafe.Pointer(_z)) == 0 {
		goto _8
	}

	_p = _z + uintptr(1)
_8:
_7:
	xsetlocale_one_unlocked(tls, _i, _part)
	_i++
	goto _4

_6:
_3:
	_s = xbuf
	_same = int32(0)
	_i = int32(0)
_9:
	if _i >= int32(6) {
		goto _11
	}

	_lm = *(*uintptr)(unsafe.Pointer(X__libc + 64 + 8*uintptr(_i)))
	if _lm != *(*uintptr)(unsafe.Pointer(X__libc + 64)) {
		goto _12
	}

	_same++
_12:
	_1part = func() uintptr {
		if _lm != 0 {
			return _lm + 16
		}
		return ts + 1816 /* "C" */
	}()
	_l = Xstrlen(tls, _1part)
	Xmemcpy(tls, _s, _1part, _l)
	*(*int8)(unsafe.Pointer(_s + uintptr(_l))) = int8(';')
	_s += uintptr(_l + uint64(1))
	_i++
	goto _9

_11:
	*(*int8)(unsafe.Pointer(preinc584(&_s))) = int8(0)
	X__unlock(tls, x585lock)
	if _same == int32(6) {
		return _1part
	}

	return xbuf

_2:
	_ret = xsetlocale_one_unlocked(tls, _cat, _name)
	X__unlock(tls, x585lock)
	return _ret
}

type t286__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t286__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// x1lock [1]int32, escapes: true, setlocale.c:24:22
var x585lock = bss + 2144

type s4__locale_map = struct {
	Fmap      uintptr // *void
	Fmap_size uint64
	Fname     [24]int8
	Fnext     uintptr // *S__locale_map
}

type t66size_t = uint64

func set586(p *uintptr, v uintptr) uintptr { *p = v; return v }

// xsetlocale_one_unlocked is defined at setlocale.c:10:13
func xsetlocale_one_unlocked(tls TLS, _cat int32, _name uintptr /* *int8 */) (r uintptr /* *int8 */) {
	var _lm uintptr // *S__locale_map

	if _name == 0 {
		goto _1
	}

	*(*uintptr)(unsafe.Pointer(X__libc + 64 + 8*uintptr(_cat))) = set586(&_lm, X__get_locale(tls, _cat, _name))
	goto _2

_1:
	_lm = *(*uintptr)(unsafe.Pointer(X__libc + 64 + 8*uintptr(_cat)))
_2:
	if _lm != 0 {
		return _lm + 16
	}

	return ts + 1816 /* "C" */
}

// xbuf [144]int8, escapes: true, setlocale.c:8:13
var xbuf = bss + 2152

// linking strcoll.o

// X__strcoll_l is defined at strcoll.c:6:5
func X__strcoll_l(tls TLS, _l uintptr /* *int8 */, _r uintptr /* *int8 */, _loc uintptr /* Tlocale_t = *S__locale_struct */) (r int32) {
	return Xstrcmp(tls, _l, _r)
}

// Xstrcoll is defined at strcoll.c:11:5
func Xstrcoll(tls TLS, _l uintptr /* *int8 */, _r uintptr /* *int8 */) (r int32) {
	return X__strcoll_l(tls, _l, _r, *(*uintptr)(unsafe.Pointer(x11__pthread_self(tls) + 192)))
}

type t287__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t287__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type s50__locale_struct = struct{ Fcat [6]uintptr }

// x__pthread_self is defined at pthread_arch.h:1:30
func x11__pthread_self(tls TLS) (r uintptr /* *S__pthread */) {
	return uintptr(tls)
	return r
}

type s15__pthread = struct {
	Fself          uintptr // *S__pthread
	Fdtv           uintptr // **void
	Funused1       uintptr // *void
	Funused2       uintptr // *void
	Fsysinfo       uint64
	Fcanary        uint64
	Fcanary2       uint64
	Ftid           int32
	Ferrno_val     int32
	Fdetach_state  int32
	Fcancel        int32
	Fcanceldisable uint8
	Fcancelasync   uint8
	F74            uint8
	Fmap_base      uintptr // *uint8
	Fmap_size      uint64
	Fstack         uintptr // *void
	Fstack_size    uint64
	Fguard_size    uint64
	Fstart_arg     uintptr // *void
	Fstart         uintptr // *func(TLS, uintptr) uintptr
	Fresult        uintptr // *void
	Fcancelbuf     uintptr // *S__ptcb
	Ftsd           uintptr // **void
	Frobust_list   struct {
		Fhead    uintptr
		Foff     int64
		Fpending uintptr
	}
	Ftimer_id      int32
	Flocale        uintptr // Tlocale_t = *S__locale_struct
	Fkilllock      [1]int32
	Fdlerror_buf   uintptr // *int8
	Fstdio_locks   uintptr // *void
	Fcanary_at_end uint64
	Fdtv_copy      uintptr // **void
}

type t16uintptr_t = uint64

type t67size_t = uint64

type s13__ptcb = struct {
	F__f    uintptr // *func(TLS, uintptr)
	F__x    uintptr // *void
	F__next uintptr // *S__ptcb
}

// linking strfmon.o

// Xstrfmon_l is defined at strfmon.c:78:9
func Xstrfmon_l(tls TLS, _s uintptr /* *int8 */, _n uint64, _loc uintptr /* Tlocale_t = *S__locale_struct */, _fmt uintptr /* *int8 */, ap ...interface{}) (r int64) {
	var (
		_ap  uintptr // Tva_list = T__builtin_va_list = ...truct{Fsize int32;Fdata int8;};}
		_ret int64
	)
	_ap = X__builtin_va_start(tls, ap)
	_ret = xvstrfmon_l(tls, _s, _n, _loc, _fmt, _ap)
	X__builtin_free(tls, _ap)
	return _ret
}

// Xstrfmon is defined at strfmon.c:91:9
func Xstrfmon(tls TLS, _s uintptr /* *int8 */, _n uint64, _fmt uintptr /* *int8 */, ap ...interface{}) (r int64) {
	var (
		_ap  uintptr // Tva_list = T__builtin_va_list = ...truct{Fsize int32;Fdata int8;};}
		_ret int64
	)
	_ap = X__builtin_va_start(tls, ap)
	_ret = xvstrfmon_l(tls, _s, _n, *(*uintptr)(unsafe.Pointer(x12__pthread_self(tls) + 192)), _fmt, _ap)
	X__builtin_free(tls, _ap)
	return _ret
}

type t288__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t288__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t68size_t = uint64

type t15ssize_t = int64

type s51__locale_struct = struct{ Fcat [6]uintptr }

func postinc587(p *uintptr) uintptr { r := *p; *p += 1; return r }

func preinc588(p *uintptr) uintptr { *p += 1; return *p }

// xvstrfmon_l is defined at strfmon.c:8:16
func xvstrfmon_l(tls TLS, _s uintptr /* *int8 */, _n uint64, _loc uintptr /* Tlocale_t = *S__locale_struct */, _fmt uintptr /* *int8 */, _ap uintptr) (r int64) {
	var (
		_l      uint64
		_x      float64
		_fill   int32
		_       = _fill
		_nogrp  int32
		_       = _nogrp
		_negpar int32
		_       = _negpar
		_nosym  int32
		_       = _nosym
		_left   int32
		_intl   int32
		_       = _intl
		_lp     int32
		_rp     int32
		_w      int32
		_fw     int32
		_s0     uintptr // *int8
	)
	_s0 = _s

_1:
	if _n == 0 || *(*int8)(unsafe.Pointer(_fmt)) == 0 {
		goto _3
	}

	if int32(*(*int8)(unsafe.Pointer(_fmt))) == int32('%') {
		goto _4
	}

	goto lliteral
lliteral:
	*(*int8)(unsafe.Pointer(postinc587(&_s))) = *(*int8)(unsafe.Pointer(postinc587(&_fmt)))
	_n--
	goto _2

_4:
	_fmt++
	if int32(*(*int8)(unsafe.Pointer(_fmt))) != int32('%') {
		goto _5
	}

	goto lliteral

_5:
	_fill = int32(' ')
	_nogrp = int32(0)
	_negpar = int32(0)
	_nosym = int32(0)
	_left = int32(0)

_6:
	switch int32(*(*int8)(unsafe.Pointer(_fmt))) {
	case int32('='):
		goto _10
	case int32('^'):
		goto _11
	case int32('('):
		goto _12
	case int32('+'):
		goto _13
	case int32('!'):
		goto _14
	case int32('-'):
		goto _15
	}
	goto _9

_10:
	_fill = int32(*(*int8)(unsafe.Pointer(preinc588(&_fmt))))
	goto _7

_11:
	_nogrp = int32(1)
	goto _7

_12:
	_negpar = int32(1)
_13:
	goto _7

_14:
	_nosym = int32(1)
	goto _7

_15:
	_left = int32(1)
	goto _7

_9:
	goto _8

_7:
	_fmt++
	goto _6

_8:
	_fw = int32(0)
_16:
	if uint32(*(*int8)(unsafe.Pointer(_fmt)))-uint32('0') >= uint32(10) {
		goto _18
	}

	_fw = int32(10)*_fw + (int32(*(*int8)(unsafe.Pointer(_fmt))) - int32('0'))
	_fmt++
	goto _16

_18:
	_lp = int32(0)
	_rp = int32(2)
	if int32(*(*int8)(unsafe.Pointer(_fmt))) != int32('#') {
		goto _19
	}

	_lp = int32(0)
	_fmt++
_20:
	if uint32(*(*int8)(unsafe.Pointer(_fmt)))-uint32('0') >= uint32(10) {
		goto _22
	}

	_lp = int32(10)*_lp + (int32(*(*int8)(unsafe.Pointer(_fmt))) - int32('0'))
	_fmt++
	goto _20

_22:
_19:
	if int32(*(*int8)(unsafe.Pointer(_fmt))) != int32('.') {
		goto _23
	}

	_rp = int32(0)
	_fmt++
_24:
	if uint32(*(*int8)(unsafe.Pointer(_fmt)))-uint32('0') >= uint32(10) {
		goto _26
	}

	_rp = int32(10)*_rp + (int32(*(*int8)(unsafe.Pointer(_fmt))) - int32('0'))
	_fmt++
	goto _24

_26:
_23:
	_intl = bool2int(int32(*(*int8)(unsafe.Pointer(postinc587(&_fmt)))) == int32('i'))
	_w = _lp + int32(1) + _rp
	if _left != 0 || _fw <= _w {
		goto _27
	}

	_w = _fw
_27:
	_x = VAfloat64(_ap)
	_l = uint64(Xsnprintf(tls, _s, _n, ts+1896 /* "%*.*f" */, _w, _rp, _x))
	if _l < _n {
		goto _28
	}

	*(*int32)(unsafe.Pointer(X__errno_location(tls))) = int32(7)
	return int64(-1)

_28:
	_s += uintptr(_l)
	_n = _n - _l
_2:
	goto _1

_3:
	return int64(_s - _s0)
}

// x__pthread_self is defined at pthread_arch.h:1:30
func x12__pthread_self(tls TLS) (r uintptr /* *S__pthread */) {
	return uintptr(tls)
	return r
}

type s16__pthread = struct {
	Fself          uintptr // *S__pthread
	Fdtv           uintptr // **void
	Funused1       uintptr // *void
	Funused2       uintptr // *void
	Fsysinfo       uint64
	Fcanary        uint64
	Fcanary2       uint64
	Ftid           int32
	Ferrno_val     int32
	Fdetach_state  int32
	Fcancel        int32
	Fcanceldisable uint8
	Fcancelasync   uint8
	F74            uint8
	Fmap_base      uintptr // *uint8
	Fmap_size      uint64
	Fstack         uintptr // *void
	Fstack_size    uint64
	Fguard_size    uint64
	Fstart_arg     uintptr // *void
	Fstart         uintptr // *func(TLS, uintptr) uintptr
	Fresult        uintptr // *void
	Fcancelbuf     uintptr // *S__ptcb
	Ftsd           uintptr // **void
	Frobust_list   struct {
		Fhead    uintptr
		Foff     int64
		Fpending uintptr
	}
	Ftimer_id      int32
	Flocale        uintptr // Tlocale_t = *S__locale_struct
	Fkilllock      [1]int32
	Fdlerror_buf   uintptr // *int8
	Fstdio_locks   uintptr // *void
	Fcanary_at_end uint64
	Fdtv_copy      uintptr // **void
}

type t17uintptr_t = uint64

type s14__ptcb = struct {
	F__f    uintptr // *func(TLS, uintptr)
	F__x    uintptr // *void
	F__next uintptr // *S__ptcb
}

// linking strxfrm.o

// X__strxfrm_l is defined at strxfrm.c:7:8
func X__strxfrm_l(tls TLS, _dest uintptr /* *int8 */, _src uintptr /* *int8 */, _n uint64, _loc uintptr /* Tlocale_t = *S__locale_struct */) (r uint64) {
	var _l uint64

	_l = Xstrlen(tls, _src)
	if _n <= _l {
		goto _1
	}

	Xstrcpy(tls, _dest, _src)
_1:
	return _l
}

// Xstrxfrm is defined at strxfrm.c:14:8
func Xstrxfrm(tls TLS, _dest uintptr /* *int8 */, _src uintptr /* *int8 */, _n uint64) (r uint64) {
	return X__strxfrm_l(tls, _dest, _src, _n, *(*uintptr)(unsafe.Pointer(x13__pthread_self(tls) + 192)))
}

type t289__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t289__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t69size_t = uint64

type s52__locale_struct = struct{ Fcat [6]uintptr }

// x__pthread_self is defined at pthread_arch.h:1:30
func x13__pthread_self(tls TLS) (r uintptr /* *S__pthread */) {
	return uintptr(tls)
	return r
}

type s17__pthread = struct {
	Fself          uintptr // *S__pthread
	Fdtv           uintptr // **void
	Funused1       uintptr // *void
	Funused2       uintptr // *void
	Fsysinfo       uint64
	Fcanary        uint64
	Fcanary2       uint64
	Ftid           int32
	Ferrno_val     int32
	Fdetach_state  int32
	Fcancel        int32
	Fcanceldisable uint8
	Fcancelasync   uint8
	F74            uint8
	Fmap_base      uintptr // *uint8
	Fmap_size      uint64
	Fstack         uintptr // *void
	Fstack_size    uint64
	Fguard_size    uint64
	Fstart_arg     uintptr // *void
	Fstart         uintptr // *func(TLS, uintptr) uintptr
	Fresult        uintptr // *void
	Fcancelbuf     uintptr // *S__ptcb
	Ftsd           uintptr // **void
	Frobust_list   struct {
		Fhead    uintptr
		Foff     int64
		Fpending uintptr
	}
	Ftimer_id      int32
	Flocale        uintptr // Tlocale_t = *S__locale_struct
	Fkilllock      [1]int32
	Fdlerror_buf   uintptr // *int8
	Fstdio_locks   uintptr // *void
	Fcanary_at_end uint64
	Fdtv_copy      uintptr // **void
}

type t18uintptr_t = uint64

type s15__ptcb = struct {
	F__f    uintptr // *func(TLS, uintptr)
	F__x    uintptr // *void
	F__next uintptr // *S__ptcb
}

// linking textdomain.o

// X__gettextdomain is defined at textdomain.c:11:6
func X__gettextdomain(tls TLS) (r uintptr /* *int8 */) {
	if xcurrent_domain != 0 {
		return xcurrent_domain
	}

	return ts + 1776 /* "messages" */
}

// Xtextdomain is defined at textdomain.c:16:6
func Xtextdomain(tls TLS, _domainname uintptr /* *int8 */) (r uintptr /* *int8 */) {
	var _domlen uint64

	if _domainname != 0 {
		goto _1
	}

	return X__gettextdomain(tls)

_1:
	_domlen = Xstrlen(tls, _domainname)
	if _domlen <= uint64(255) {
		goto _2
	}

	*(*int32)(unsafe.Pointer(X__errno_location(tls))) = int32(22)
	return null

_2:
	if xcurrent_domain != 0 {
		goto _3
	}

	xcurrent_domain = Xmalloc(tls, uint64(256))
	if xcurrent_domain != 0 {
		goto _4
	}

	return null

_4:
_3:
	Xmemcpy(tls, xcurrent_domain, _domainname, _domlen+uint64(1))
	return xcurrent_domain
}

// Xgettext is defined at textdomain.c:36:6
func Xgettext(tls TLS, _msgid uintptr /* *int8 */) (r uintptr /* *int8 */) {
	return Xdgettext(tls, null, _msgid)
}

// Xngettext is defined at textdomain.c:41:6
func Xngettext(tls TLS, _msgid1 uintptr /* *int8 */, _msgid2 uintptr /* *int8 */, _n uint64) (r uintptr /* *int8 */) {
	return Xdngettext(tls, null, _msgid1, _msgid2, _n)
}

type t290__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t290__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// xcurrent_domain *int8, escapes: false, textdomain.c:9:13
var xcurrent_domain uintptr

type t70size_t = uint64

// linking uselocale.o

// X__uselocale is defined at uselocale.c:5:10
func X__uselocale(tls TLS, _new uintptr /* Tlocale_t = *S__locale_struct */) (r uintptr /* Tlocale_t = *S__locale_struct */) {
	var (
		_self   uintptr // Tpthread_t = *S__pthread
		_old    uintptr // Tlocale_t = *S__locale_struct
		_global uintptr // Tlocale_t = *S__locale_struct
	)
	_self = x14__pthread_self(tls)
	_old = *(*uintptr)(unsafe.Pointer(_self + 192))
	_global = X__libc + 64
	if _new == 0 {
		goto _1
	}

	*(*uintptr)(unsafe.Pointer(_self + 192)) = func() uintptr {
		if _new == uintptr(18446744073709551615) {
			return _global
		}
		return _new
	}()
_1:
	if _old == _global {
		return uintptr(18446744073709551615)
	}

	return _old
}

type t291__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t291__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type s53__locale_struct = struct{ Fcat [6]uintptr }

type s18__pthread = struct {
	Fself          uintptr // *S__pthread
	Fdtv           uintptr // **void
	Funused1       uintptr // *void
	Funused2       uintptr // *void
	Fsysinfo       uint64
	Fcanary        uint64
	Fcanary2       uint64
	Ftid           int32
	Ferrno_val     int32
	Fdetach_state  int32
	Fcancel        int32
	Fcanceldisable uint8
	Fcancelasync   uint8
	F74            uint8
	Fmap_base      uintptr // *uint8
	Fmap_size      uint64
	Fstack         uintptr // *void
	Fstack_size    uint64
	Fguard_size    uint64
	Fstart_arg     uintptr // *void
	Fstart         uintptr // *func(TLS, uintptr) uintptr
	Fresult        uintptr // *void
	Fcancelbuf     uintptr // *S__ptcb
	Ftsd           uintptr // **void
	Frobust_list   struct {
		Fhead    uintptr
		Foff     int64
		Fpending uintptr
	}
	Ftimer_id      int32
	Flocale        uintptr // Tlocale_t = *S__locale_struct
	Fkilllock      [1]int32
	Fdlerror_buf   uintptr // *int8
	Fstdio_locks   uintptr // *void
	Fcanary_at_end uint64
	Fdtv_copy      uintptr // **void
}

// x__pthread_self is defined at pthread_arch.h:1:30
func x14__pthread_self(tls TLS) (r uintptr /* *S__pthread */) {
	return uintptr(tls)
	return r
}

type t19uintptr_t = uint64

type t71size_t = uint64

type s16__ptcb = struct {
	F__f    uintptr // *func(TLS, uintptr)
	F__x    uintptr // *void
	F__next uintptr // *S__ptcb
}

// linking wcscoll.o

// X__wcscoll_l is defined at wcscoll.c:7:5
func X__wcscoll_l(tls TLS, _l uintptr /* *Twchar_t = int32 */, _r uintptr /* *Twchar_t = int32 */, _locale uintptr /* Tlocale_t = *S__locale_struct */) (r int32) {
	return Xwcscmp(tls, _l, _r)
}

// Xwcscoll is defined at wcscoll.c:12:5
func Xwcscoll(tls TLS, _l uintptr /* *Twchar_t = int32 */, _r uintptr /* *Twchar_t = int32 */) (r int32) {
	return X__wcscoll_l(tls, _l, _r, *(*uintptr)(unsafe.Pointer(x15__pthread_self(tls) + 192)))
}

type t292__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t292__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type s54__locale_struct = struct{ Fcat [6]uintptr }

// x__pthread_self is defined at pthread_arch.h:1:30
func x15__pthread_self(tls TLS) (r uintptr /* *S__pthread */) {
	return uintptr(tls)
	return r
}

type s19__pthread = struct {
	Fself          uintptr // *S__pthread
	Fdtv           uintptr // **void
	Funused1       uintptr // *void
	Funused2       uintptr // *void
	Fsysinfo       uint64
	Fcanary        uint64
	Fcanary2       uint64
	Ftid           int32
	Ferrno_val     int32
	Fdetach_state  int32
	Fcancel        int32
	Fcanceldisable uint8
	Fcancelasync   uint8
	F74            uint8
	Fmap_base      uintptr // *uint8
	Fmap_size      uint64
	Fstack         uintptr // *void
	Fstack_size    uint64
	Fguard_size    uint64
	Fstart_arg     uintptr // *void
	Fstart         uintptr // *func(TLS, uintptr) uintptr
	Fresult        uintptr // *void
	Fcancelbuf     uintptr // *S__ptcb
	Ftsd           uintptr // **void
	Frobust_list   struct {
		Fhead    uintptr
		Foff     int64
		Fpending uintptr
	}
	Ftimer_id      int32
	Flocale        uintptr // Tlocale_t = *S__locale_struct
	Fkilllock      [1]int32
	Fdlerror_buf   uintptr // *int8
	Fstdio_locks   uintptr // *void
	Fcanary_at_end uint64
	Fdtv_copy      uintptr // **void
}

type t20uintptr_t = uint64

type t72size_t = uint64

type s17__ptcb = struct {
	F__f    uintptr // *func(TLS, uintptr)
	F__x    uintptr // *void
	F__next uintptr // *S__ptcb
}

// linking wcsxfrm.o

// X__wcsxfrm_l is defined at wcsxfrm.c:7:8
func X__wcsxfrm_l(tls TLS, _dest uintptr /* *Twchar_t = int32 */, _src uintptr /* *Twchar_t = int32 */, _n uint64, _loc uintptr /* Tlocale_t = *S__locale_struct */) (r uint64) {
	var _l uint64

	_l = Xwcslen(tls, _src)
	if _l >= _n {
		goto _1
	}

	Xwmemcpy(tls, _dest, _src, _l+uint64(1))
	goto _2

_1:
	if _n == 0 {
		goto _3
	}

	Xwmemcpy(tls, _dest, _src, _n-uint64(1))
	*(*int32)(unsafe.Pointer(_dest + 4*uintptr(_n-uint64(1)))) = int32(0)
_3:
_2:
	return _l
}

// Xwcsxfrm is defined at wcsxfrm.c:19:8
func Xwcsxfrm(tls TLS, _dest uintptr /* *Twchar_t = int32 */, _src uintptr /* *Twchar_t = int32 */, _n uint64) (r uint64) {
	return X__wcsxfrm_l(tls, _dest, _src, _n, *(*uintptr)(unsafe.Pointer(x16__pthread_self(tls) + 192)))
}

type t293__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t293__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t73size_t = uint64

type s55__locale_struct = struct{ Fcat [6]uintptr }

type t5wchar_t = int32

// x__pthread_self is defined at pthread_arch.h:1:30
func x16__pthread_self(tls TLS) (r uintptr /* *S__pthread */) {
	return uintptr(tls)
	return r
}

type s20__pthread = struct {
	Fself          uintptr // *S__pthread
	Fdtv           uintptr // **void
	Funused1       uintptr // *void
	Funused2       uintptr // *void
	Fsysinfo       uint64
	Fcanary        uint64
	Fcanary2       uint64
	Ftid           int32
	Ferrno_val     int32
	Fdetach_state  int32
	Fcancel        int32
	Fcanceldisable uint8
	Fcancelasync   uint8
	F74            uint8
	Fmap_base      uintptr // *uint8
	Fmap_size      uint64
	Fstack         uintptr // *void
	Fstack_size    uint64
	Fguard_size    uint64
	Fstart_arg     uintptr // *void
	Fstart         uintptr // *func(TLS, uintptr) uintptr
	Fresult        uintptr // *void
	Fcancelbuf     uintptr // *S__ptcb
	Ftsd           uintptr // **void
	Frobust_list   struct {
		Fhead    uintptr
		Foff     int64
		Fpending uintptr
	}
	Ftimer_id      int32
	Flocale        uintptr // Tlocale_t = *S__locale_struct
	Fkilllock      [1]int32
	Fdlerror_buf   uintptr // *int8
	Fstdio_locks   uintptr // *void
	Fcanary_at_end uint64
	Fdtv_copy      uintptr // **void
}

type t21uintptr_t = uint64

type s18__ptcb = struct {
	F__f    uintptr // *func(TLS, uintptr)
	F__x    uintptr // *void
	F__next uintptr // *S__ptcb
}

// linking aligned_alloc.o

type t294__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t294__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// linking expand_heap.o

// X__expand_heap is defined at expand_heap.c:40:6
func X__expand_heap(tls TLS, _pn uintptr /* *Tsize_t = uint64 */) (r uintptr /* *void */) {
	var (
		_n    uint64
		_min  uint64
		_area uintptr // *void
	)
	_n = *(*uint64)(unsafe.Pointer(_pn))
	if _n <= uint64(9223372036854771711) {
		goto _1
	}

	*(*int32)(unsafe.Pointer(X__errno_location(tls))) = int32(12)
	return null

_1:
	_n = _n + -_n&uint64(4095)
	if x589brk != 0 {
		goto _2
	}

	x589brk = uint64(x18__syscall1(tls, int64(12), int64(0)))
	x589brk = x589brk + -x589brk&uint64(4095)
_2:
	if _n >= uint64(0xffffffffffffffff)-x589brk || xtraverses_stack_p(tls, x589brk, x589brk+_n) != 0 || uint64(x18__syscall1(tls, int64(12), int64(x589brk+_n))) != x589brk+_n {
		goto _3
	}

	*(*uint64)(unsafe.Pointer(_pn)) = _n
	x589brk = x589brk + _n
	return uintptr(x589brk - _n)

_3:
	_min = uint64(4096) << (uint(x590mmap_step/uint32(2)) % 64)
	if _n >= _min {
		goto _4
	}

	_n = _min
_4:
	_area = X__mmap(tls, null, _n, int32(3), int32(34), int32(-1), int64(0))
	if _area != uintptr(18446744073709551615) {
		goto _5
	}

	return null

_5:
	*(*uint64)(unsafe.Pointer(_pn)) = _n
	x590mmap_step++
	return _area
}

type t295__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t295__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// x1brk Tuintptr_t = uint64, escapes: false, expand_heap.c:42:19
var x589brk uint64

// x2mmap_step uint32, escapes: false, expand_heap.c:43:18
var x590mmap_step uint32

type t74size_t = uint64

type t22uintptr_t = uint64

// x__syscall1 is defined at syscall_arch.h:16:22
func x18__syscall1(tls TLS, _n int64, _a1 int64) (r int64) {
	return X__syscall(tls, _n, _a1, int64(0), int64(0), int64(0), int64(0), int64(0))
}

// xtraverses_stack_p is defined at expand_heap.c:14:12
func xtraverses_stack_p(tls TLS, _old uint64, _new uint64) (r int32) {
	esc := MustMalloc(8)
	var (
		_len uint64
		_a   uint64
		_b   = esc // *Tuintptr_t = uint64
	)
	defer Free(esc)
	_len = uint64(8388608)
	*(*uint64)(unsafe.Pointer(_b)) = uint64(*(*uintptr)(unsafe.Pointer(X__libc + 16)))
	_a = func() uint64 {
		if *(*uint64)(unsafe.Pointer(_b)) > _len {
			return *(*uint64)(unsafe.Pointer(_b)) - _len
		}
		return uint64(0)
	}()
	if _new <= _a || _old >= *(*uint64)(unsafe.Pointer(_b)) {
		goto _1
	}

	return int32(1)

_1:
	*(*uint64)(unsafe.Pointer(_b)) = uint64(_b)
	_a = func() uint64 {
		if *(*uint64)(unsafe.Pointer(_b)) > _len {
			return *(*uint64)(unsafe.Pointer(_b)) - _len
		}
		return uint64(0)
	}()
	if _new <= _a || _old >= *(*uint64)(unsafe.Pointer(_b)) {
		goto _2
	}

	return int32(1)

_2:
	return int32(0)
}

type t25off_t = int64

// linking lite_malloc.o

type t296__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t296__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// linking malloc.o

// Xmalloc is defined at malloc.c:292:6
func Xmalloc(tls TLS, _n uint64) (r uintptr /* *void */) {
	p, err := Malloc(int(_n))
	if err != nil {
		panic(err)
	}
	return p
	return r
}

// Xcalloc is defined at malloc.c:365:6
func Xcalloc(tls TLS, _m uint64, _n uint64) (r uintptr /* *void */) {
	p, err := Calloc(int(_n * _m))
	if err != nil {
		panic(err)
	}
	return p
	return r
}

// Xrealloc is defined at malloc.c:390:6
func Xrealloc(tls TLS, _p uintptr /* *void */, _n uint64) (r uintptr /* *void */) {
	_p, err := Realloc(_p, int(_n))
	if err != nil {
		panic(err)
	}

	return _p
}

// Xfree is defined at malloc.c:546:6
func Xfree(tls TLS, _p uintptr /* *void */) {
	if err := Free(_p); err != nil {
		panic(err)
	}
}

type t297__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t297__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t75size_t = uint64

// linking malloc_usable_size.o

type t298__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t298__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// linking memalign.o

type t299__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t299__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// linking posix_memalign.o

type t300__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t300__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// linking __cos.o

// X__cos is defined at __cos.c:61:8
func X__cos(tls TLS, _x float64, _y float64) (r float64) {
	var (
		_hz float64
		_z  float64
		_r  float64
		_w  float64
	)
	_z = _x * _x
	_w = _z * _z
	_r = float64(_z*float64(xC1+float64(_z*float64(xC2+float64(_z*xC3))))) + float64(float64(_w*_w)*float64(xC4+float64(_z*float64(xC5+float64(_z*xC6)))))
	_hz = float64(0.5) * _z
	_w = float64(1) - _hz
	return _w + float64(float64(float64(float64(1)-_w)-_hz)+float64(float64(_z*_r)-float64(_x*_y)))
}

type t301__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t301__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type Tdouble_t = float64

// xC1 float64, escapes: false, __cos.c:54:1
var xC1 = float64(0.0416666666666666)

// xC2 float64, escapes: false, __cos.c:55:1
var xC2 = float64(-0.001388888888887411)

// xC3 float64, escapes: false, __cos.c:56:1
var xC3 = float64(2.480158728947673e-05)

// xC4 float64, escapes: false, __cos.c:57:1
var xC4 = float64(-2.7557314351390663e-07)

// xC5 float64, escapes: false, __cos.c:58:1
var xC5 = float64(2.087572321298175e-09)

// xC6 float64, escapes: false, __cos.c:59:1
var xC6 = float64(-1.1359647557788195e-11)

// linking __cosdf.o

// X__cosdf is defined at __cosdf.c:26:7
func X__cosdf(tls TLS, _x float64) (r float32) {
	var (
		_r float64
		_w float64
		_z float64
	)
	_z = _x * _x
	_w = _z * _z
	_r = x1C2 + float64(_z*x1C3)
	return float32(float64(float64(float64(1)+float64(_z*xC0))+float64(_w*x1C1)) + float64(float64(_w*_z)*_r))
}

type t302__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t302__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t1double_t = float64

// xC2 float64, escapes: false, __cosdf.c:23:1
var x1C2 = float64(-0.001388676377460993)

// xC3 float64, escapes: false, __cosdf.c:24:1
var x1C3 = float64(2.439044879627741e-05)

// xC0 float64, escapes: false, __cosdf.c:21:1
var xC0 = float64(-0.499999997251031)

// xC1 float64, escapes: false, __cosdf.c:22:1
var x1C1 = float64(0.04166662332373906)

// linking __cosl.o

type t303__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t303__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// linking __expo2.o

// X__expo2 is defined at __expo2.c:8:8
func X__expo2(tls TLS, _x float64) (r float64) {
	esc := MustMalloc(8)
	var (
		_scale float64
		___u   = esc // *struct{Ff [0]float64;Fi [0]uint64;F int64}
	)
	defer Free(esc)
	*(*uint64)(unsafe.Pointer(___u)) = uint64(uint32(int32(0x3ff)+x2k/int32(2))<<(uint(20)%32))<<(uint(32)%64) | uint64(0)
	_scale = *(*float64)(unsafe.Pointer(___u))
	return float64(Xexp(tls, _x-x2kln2)*_scale) * _scale
}

type t304__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t304__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t15uint64_t = uint64

type t23uint32_t = uint32

// xk int32, escapes: false, __expo2.c:4:18
var x2k = int32(2043)

// xkln2 float64, escapes: false, __expo2.c:5:21
var x2kln2 = float64(1416.0996898839683)

// linking __expo2f.o

// X__expo2f is defined at __expo2f.c:8:7
func X__expo2f(tls TLS, _x float32) (r float32) {
	esc := MustMalloc(4)
	var (
		_scale float32
		___u   = esc // *struct{Ff [0]float32;Fi [0]uint32;F int32}
	)
	defer Free(esc)
	*(*uint32)(unsafe.Pointer(___u)) = uint32(int32(0x7f)+x3k/int32(2)) << (uint(23) % 32)
	_scale = *(*float32)(unsafe.Pointer(___u))
	return float32(Xexpf(tls, _x-x3kln2)*_scale) * _scale
}

type t305__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t305__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t24uint32_t = uint32

// xk int32, escapes: false, __expo2f.c:4:18
var x3k = int32(235)

// xkln2 float32, escapes: false, __expo2f.c:5:20
var x3kln2 = float32(162.88959)

// linking __fpclassify.o

// X__fpclassify is defined at __fpclassify.c:4:5
func X__fpclassify(tls TLS, _x float64) (r int32) {
	esc := MustMalloc(8)
	var (
		_u = esc // *struct{Ff [0]float64;Fi [0]uint64;F int64}
		_e int32
	)
	defer Free(esc)
	*(*struct {
		Ff [0]float64
		Fi [0]uint64
		F  int64
	})(unsafe.Pointer(_u)) = *(*struct {
		Ff [0]float64
		Fi [0]uint64
		F  int64
	})(unsafe.Pointer(&struct{ f float64 }{_x}))
	_e = int32(*(*uint64)(unsafe.Pointer(_u)) >> (uint(52) % 64) & uint64(0x7ff))
	if _e != 0 {
		goto _1
	}

	if (*(*uint64)(unsafe.Pointer(_u)) << (uint(1) % 64)) != 0 {
		return int32(3)
	}

	return int32(2)

_1:
	if _e != int32(0x7ff) {
		goto _2
	}

	if (*(*uint64)(unsafe.Pointer(_u)) << (uint(12) % 64)) != 0 {
		return int32(0)
	}

	return int32(1)

_2:
	return int32(4)
}

type t306__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t306__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t16uint64_t = uint64

// linking __fpclassifyf.o

// X__fpclassifyf is defined at __fpclassifyf.c:4:5
func X__fpclassifyf(tls TLS, _x float32) (r int32) {
	esc := MustMalloc(4)
	var (
		_u = esc // *struct{Ff [0]float32;Fi [0]uint32;F int32}
		_e int32
	)
	defer Free(esc)
	*(*struct {
		Ff [0]float32
		Fi [0]uint32
		F  int32
	})(unsafe.Pointer(_u)) = *(*struct {
		Ff [0]float32
		Fi [0]uint32
		F  int32
	})(unsafe.Pointer(&struct{ f float32 }{_x}))
	_e = int32(*(*uint32)(unsafe.Pointer(_u)) >> (uint(23) % 32) & uint32(0xff))
	if _e != 0 {
		goto _1
	}

	if (*(*uint32)(unsafe.Pointer(_u)) << (uint(1) % 32)) != 0 {
		return int32(3)
	}

	return int32(2)

_1:
	if _e != int32(0xff) {
		goto _2
	}

	if (*(*uint32)(unsafe.Pointer(_u)) << (uint(9) % 32)) != 0 {
		return int32(0)
	}

	return int32(1)

_2:
	return int32(4)
}

type t307__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t307__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t25uint32_t = uint32

// linking __fpclassifyl.o

// X__fpclassifyl is defined at __fpclassifyl.c:4:5
func X__fpclassifyl(tls TLS, _x float64) (r int32) {
	return X__fpclassify(tls, _x)
}

type t308__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t308__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// linking __invtrigl.o

type t309__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t309__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// linking __polevll.o

type t310__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t310__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// linking __rem_pio2.o

func set591(p *float64, v float64) float64 { *p = v; return v }

// X__rem_pio2 is defined at __rem_pio2.c:48:5
func X__rem_pio2(tls TLS, _x float64, _y uintptr /* *float64 */) (r int32) {
	esc := MustMalloc(64)
	var (
		_u    = esc // *struct{Ff [0]float64;Fi [0]uint64;F int64}
		_z    float64
		_w    float64
		_t    float64
		_r    float64
		_fn   float64
		_tx   = esc + 16 // *[3]float64
		_ty   = esc + 48 // *[2]float64
		_ix   uint32
		_sign int32
		_n    int32
		_ex   int32
		_ey   int32
		_i    int32
	)
	defer Free(esc)
	*(*struct {
		Ff [0]float64
		Fi [0]uint64
		F  int64
	})(unsafe.Pointer(_u)) = *(*struct {
		Ff [0]float64
		Fi [0]uint64
		F  int64
	})(unsafe.Pointer(&struct{ f float64 }{_x}))
	_sign = int32(*(*uint64)(unsafe.Pointer(_u)) >> (uint(63) % 64))
	_ix = uint32(*(*uint64)(unsafe.Pointer(_u)) >> (uint(32) % 64) & uint64(0x7fffffff))
	if _ix > uint32(0x400f6a7a) {
		goto _1
	}

	if _ix&uint32(0xfffff) != uint32(0x921fb) {
		goto _2
	}

	goto lmedium

_2:
	if _ix > uint32(0x4002d97c) {
		goto _3
	}

	if _sign != 0 {
		goto _5
	}

	_z = _x - xpio2_1
	*(*float64)(unsafe.Pointer(_y)) = _z - xpio2_1t
	*(*float64)(unsafe.Pointer(_y + 8)) = float64(_z-*(*float64)(unsafe.Pointer(_y))) - xpio2_1t
	return int32(1)

	goto _6

_5:
	_z = _x + xpio2_1
	*(*float64)(unsafe.Pointer(_y)) = _z + xpio2_1t
	*(*float64)(unsafe.Pointer(_y + 8)) = float64(_z-*(*float64)(unsafe.Pointer(_y))) + xpio2_1t
	return int32(-1)

_6:
	goto _4

_3:
	if _sign != 0 {
		goto _7
	}

	_z = _x - float64(float64(2)*xpio2_1)
	*(*float64)(unsafe.Pointer(_y)) = _z - float64(float64(2)*xpio2_1t)
	*(*float64)(unsafe.Pointer(_y + 8)) = float64(_z-*(*float64)(unsafe.Pointer(_y))) - float64(float64(2)*xpio2_1t)
	return int32(2)

	goto _8

_7:
	_z = _x + float64(float64(2)*xpio2_1)
	*(*float64)(unsafe.Pointer(_y)) = _z + float64(float64(2)*xpio2_1t)
	*(*float64)(unsafe.Pointer(_y + 8)) = float64(_z-*(*float64)(unsafe.Pointer(_y))) + float64(float64(2)*xpio2_1t)
	return int32(-2)

_8:
_4:
_1:
	if _ix > uint32(0x401c463b) {
		goto _9
	}

	if _ix > uint32(0x4015fdbc) {
		goto _10
	}

	if _ix != uint32(0x4012d97c) {
		goto _12
	}

	goto lmedium

_12:
	if _sign != 0 {
		goto _13
	}

	_z = _x - float64(float64(3)*xpio2_1)
	*(*float64)(unsafe.Pointer(_y)) = _z - float64(float64(3)*xpio2_1t)
	*(*float64)(unsafe.Pointer(_y + 8)) = float64(_z-*(*float64)(unsafe.Pointer(_y))) - float64(float64(3)*xpio2_1t)
	return int32(3)

	goto _14

_13:
	_z = _x + float64(float64(3)*xpio2_1)
	*(*float64)(unsafe.Pointer(_y)) = _z + float64(float64(3)*xpio2_1t)
	*(*float64)(unsafe.Pointer(_y + 8)) = float64(_z-*(*float64)(unsafe.Pointer(_y))) + float64(float64(3)*xpio2_1t)
	return int32(-3)

_14:
	goto _11

_10:
	if _ix != uint32(0x401921fb) {
		goto _15
	}

	goto lmedium

_15:
	if _sign != 0 {
		goto _16
	}

	_z = _x - float64(float64(4)*xpio2_1)
	*(*float64)(unsafe.Pointer(_y)) = _z - float64(float64(4)*xpio2_1t)
	*(*float64)(unsafe.Pointer(_y + 8)) = float64(_z-*(*float64)(unsafe.Pointer(_y))) - float64(float64(4)*xpio2_1t)
	return int32(4)

	goto _17

_16:
	_z = _x + float64(float64(4)*xpio2_1)
	*(*float64)(unsafe.Pointer(_y)) = _z + float64(float64(4)*xpio2_1t)
	*(*float64)(unsafe.Pointer(_y + 8)) = float64(_z-*(*float64)(unsafe.Pointer(_y))) + float64(float64(4)*xpio2_1t)
	return int32(-4)

_17:
_11:
_9:
	if _ix >= uint32(0x413921fb) {
		goto _18
	}

	goto lmedium
lmedium:
	_fn = float64(float64(_x*xinvpio2)+xtoint) - xtoint
	_n = int32(_fn)
	_r = _x - float64(_fn*xpio2_1)
	_w = _fn * xpio2_1t
	*(*float64)(unsafe.Pointer(_y)) = _r - _w
	*(*float64)(unsafe.Pointer(_u)) = *(*float64)(unsafe.Pointer(_y))
	_ey = int32(*(*uint64)(unsafe.Pointer(_u)) >> (uint(52) % 64) & uint64(0x7ff))
	_ex = int32(_ix >> (uint(20) % 32))
	if _ex-_ey <= int32(16) {
		goto _19
	}

	_t = _r
	_w = _fn * xpio2_2
	_r = _t - _w
	_w = float64(_fn*xpio2_2t) - float64(float64(_t-_r)-_w)
	*(*float64)(unsafe.Pointer(_y)) = _r - _w
	*(*float64)(unsafe.Pointer(_u)) = *(*float64)(unsafe.Pointer(_y))
	_ey = int32(*(*uint64)(unsafe.Pointer(_u)) >> (uint(52) % 64) & uint64(0x7ff))
	if _ex-_ey <= int32(49) {
		goto _20
	}

	_t = _r
	_w = _fn * xpio2_3
	_r = _t - _w
	_w = float64(_fn*xpio2_3t) - float64(float64(_t-_r)-_w)
	*(*float64)(unsafe.Pointer(_y)) = _r - _w
_20:
_19:
	*(*float64)(unsafe.Pointer(_y + 8)) = float64(_r-*(*float64)(unsafe.Pointer(_y))) - _w
	return _n

_18:
	if _ix < uint32(0x7ff00000) {
		goto _21
	}

	*(*float64)(unsafe.Pointer(_y)) = set591((*float64)(unsafe.Pointer(_y+8)), _x-_x)
	return int32(0)

_21:
	*(*float64)(unsafe.Pointer(_u)) = _x
	{
		p := (*uint64)(unsafe.Pointer(_u))
		*p = *p & uint64(4503599627370495)
	}
	{
		p := (*uint64)(unsafe.Pointer(_u))
		*p = *p | uint64(4710765210229538816)
	}
	_z = *(*float64)(unsafe.Pointer(_u))
	_i = int32(0)
_22:
	if _i >= int32(2) {
		goto _24
	}

	*(*float64)(unsafe.Pointer(_tx + 8*uintptr(_i))) = float64(int32(_z))
	_z = float64(_z-*(*float64)(unsafe.Pointer(_tx + 8*uintptr(_i)))) * float64(1.6777216e+07)
	_i++
	goto _22

_24:
	*(*float64)(unsafe.Pointer(_tx + 8*uintptr(_i))) = _z
_25:
	if *(*float64)(unsafe.Pointer(_tx + 8*uintptr(_i))) != float64(0) {
		goto _26
	}

	_i--
	goto _25

_26:
	_n = X__rem_pio2_large(tls, _tx, _ty, int32(_ix>>(uint(20)%32))-int32(1046), _i+int32(1), int32(1))
	if _sign == 0 {
		goto _27
	}

	*(*float64)(unsafe.Pointer(_y)) = -*(*float64)(unsafe.Pointer(_ty))
	*(*float64)(unsafe.Pointer(_y + 8)) = -*(*float64)(unsafe.Pointer(_ty + 8))
	return -_n

_27:
	*(*float64)(unsafe.Pointer(_y)) = *(*float64)(unsafe.Pointer(_ty))
	*(*float64)(unsafe.Pointer(_y + 8)) = *(*float64)(unsafe.Pointer(_ty + 8))
	return _n
}

type t311__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t311__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t17uint64_t = uint64

type t2double_t = float64

type t26uint32_t = uint32

// xpio2_1 float64, escapes: false, __rem_pio2.c:40:1
var xpio2_1 = float64(1.5707963267341256)

// xpio2_1t float64, escapes: false, __rem_pio2.c:41:1
var xpio2_1t = float64(6.077100506506192e-11)

// xinvpio2 float64, escapes: false, __rem_pio2.c:39:1
var xinvpio2 = float64(0.6366197723675814)

// xtoint float64, escapes: false, __rem_pio2.c:38:1
var xtoint = float64(6.755399441055744e+15)

type t6int32_t = int32

// xpio2_2 float64, escapes: false, __rem_pio2.c:42:1
var xpio2_2 = float64(6.077100506303966e-11)

// xpio2_2t float64, escapes: false, __rem_pio2.c:43:1
var xpio2_2t = float64(2.0222662487959506e-21)

// xpio2_3 float64, escapes: false, __rem_pio2.c:44:1
var xpio2_3 = float64(2.0222662487111665e-21)

// xpio2_3t float64, escapes: false, __rem_pio2.c:45:1
var xpio2_3t = float64(8.4784276603689e-32)

// linking __rem_pio2_large.o

// X__rem_pio2_large is defined at __rem_pio2_large.c:273:5
func X__rem_pio2_large(tls TLS, _x uintptr /* *float64 */, _y uintptr /* *float64 */, _e0 int32, _nx int32, _prec int32) (r int32) {
	esc := MustMalloc(560)
	var (
		_jz    int32
		_jx    int32
		_jv    int32
		_jp    int32
		_jk    int32
		_carry int32
		_n     int32
		_iq    = esc // *[20]int32
		_i     int32
		_j     int32
		_k     int32
		_m     int32
		_q0    int32
		_ih    int32
		_z     float64
		_fw    float64
		_f     = esc + 80  // *[20]float64
		_fq    = esc + 240 // *[20]float64
		_q     = esc + 400 // *[20]float64
	)
	defer Free(esc)
	_jk = *(*int32)(unsafe.Pointer(xinit_jk + 4*uintptr(_prec)))
	_jp = _jk
	_jx = _nx - int32(1)
	_jv = (_e0 - int32(3)) / int32(24)
	if _jv >= int32(0) {
		goto _1
	}

	_jv = int32(0)
_1:
	_q0 = _e0 - int32(24)*(_jv+int32(1))
	_j = _jv - _jx
	_m = _jx + _jk
	_i = int32(0)
_2:
	if _i > _m {
		goto _4
	}

	*(*float64)(unsafe.Pointer(_f + 8*uintptr(_i))) = func() float64 {
		if _j < int32(0) {
			return float64(0)
		}
		return float64(*(*int32)(unsafe.Pointer(xipio2 + 4*uintptr(_j))))
	}()
	_i++
	_j++
	goto _2

_4:
	_i = int32(0)
_5:
	if _i > _jk {
		goto _7
	}

	_j = int32(0)
	_fw = float64(0)
_8:
	if _j > _jx {
		goto _10
	}

	_fw = _fw + float64(*(*float64)(unsafe.Pointer(_x + 8*uintptr(_j)))**(*float64)(unsafe.Pointer(_f + 8*uintptr(_jx+_i-_j))))
	_j++
	goto _8

_10:
	*(*float64)(unsafe.Pointer(_q + 8*uintptr(_i))) = _fw
	_i++
	goto _5

_7:
	_jz = _jk
	goto lrecompute
lrecompute:
	_i = int32(0)
	_j = _jz
	_z = *(*float64)(unsafe.Pointer(_q + 8*uintptr(_jz)))
_11:
	if _j <= int32(0) {
		goto _13
	}

	_fw = float64(int32(float64(5.960464477539063e-08) * _z))
	*(*int32)(unsafe.Pointer(_iq + 4*uintptr(_i))) = int32(_z - float64(float64(1.6777216e+07)*_fw))
	_z = *(*float64)(unsafe.Pointer(_q + 8*uintptr(_j-int32(1)))) + _fw
	_i++
	_j--
	goto _11

_13:
	_z = Xscalbn(tls, _z, _q0)
	_z = _z - float64(float64(8)*Xfloor(tls, _z*float64(0.125)))
	_n = int32(_z)
	_z = _z - float64(_n)
	_ih = int32(0)
	if _q0 <= int32(0) {
		goto _14
	}

	_i = *(*int32)(unsafe.Pointer(_iq + 4*uintptr(_jz-int32(1)))) >> (uint(int32(24)-_q0) % 32)
	_n = _n + _i
	{
		p := (*int32)(unsafe.Pointer(_iq + 4*uintptr(_jz-int32(1))))
		*p = *p - _i<<(uint(int32(24)-_q0)%32)
	}
	_ih = *(*int32)(unsafe.Pointer(_iq + 4*uintptr(_jz-int32(1)))) >> (uint(int32(23)-_q0) % 32)
	goto _15

_14:
	if _q0 != int32(0) {
		goto _16
	}

	_ih = *(*int32)(unsafe.Pointer(_iq + 4*uintptr(_jz-int32(1)))) >> (uint(23) % 32)
	goto _17

_16:
	if _z < float64(0.5) {
		goto _18
	}

	_ih = int32(2)
_18:
_17:
_15:
	if _ih <= int32(0) {
		goto _19
	}

	_n = _n + int32(1)
	_carry = int32(0)
	_i = int32(0)
_20:
	if _i >= _jz {
		goto _22
	}

	_j = *(*int32)(unsafe.Pointer(_iq + 4*uintptr(_i)))
	if _carry != int32(0) {
		goto _23
	}

	if _j == int32(0) {
		goto _25
	}

	_carry = int32(1)
	*(*int32)(unsafe.Pointer(_iq + 4*uintptr(_i))) = int32(0x1000000) - _j
_25:
	goto _24

_23:
	*(*int32)(unsafe.Pointer(_iq + 4*uintptr(_i))) = int32(0xffffff) - _j
_24:
	_i++
	goto _20

_22:
	if _q0 <= int32(0) {
		goto _26
	}

	switch _q0 {
	case int32(1):
		goto _28
	case int32(2):
		goto _29
	}
	goto _27

_28:
	{
		p := (*int32)(unsafe.Pointer(_iq + 4*uintptr(_jz-int32(1))))
		*p = *p & int32(0x7fffff)
	}
	goto _27

_29:
	{
		p := (*int32)(unsafe.Pointer(_iq + 4*uintptr(_jz-int32(1))))
		*p = *p & int32(0x3fffff)
	}
	goto _27

_27:
_26:
	if _ih != int32(2) {
		goto _30
	}

	_z = float64(1) - _z
	if _carry == int32(0) {
		goto _31
	}

	_z = _z - Xscalbn(tls, float64(1), _q0)
_31:
_30:
_19:
	if _z != float64(0) {
		goto _32
	}

	_j = int32(0)
	_i = _jz - int32(1)
_33:
	if _i < _jk {
		goto _35
	}

	_j = _j | *(*int32)(unsafe.Pointer(_iq + 4*uintptr(_i)))
	_i--
	goto _33

_35:
	if _j != int32(0) {
		goto _36
	}

	_k = int32(1)
_37:
	if *(*int32)(unsafe.Pointer(_iq + 4*uintptr(_jk-_k))) != int32(0) {
		goto _39
	}

	_k++
	goto _37

_39:
	_i = _jz + int32(1)
_40:
	if _i > _jz+_k {
		goto _42
	}

	*(*float64)(unsafe.Pointer(_f + 8*uintptr(_jx+_i))) = float64(*(*int32)(unsafe.Pointer(xipio2 + 4*uintptr(_jv+_i))))
	_j = int32(0)
	_fw = float64(0)
_43:
	if _j > _jx {
		goto _45
	}

	_fw = _fw + float64(*(*float64)(unsafe.Pointer(_x + 8*uintptr(_j)))**(*float64)(unsafe.Pointer(_f + 8*uintptr(_jx+_i-_j))))
	_j++
	goto _43

_45:
	*(*float64)(unsafe.Pointer(_q + 8*uintptr(_i))) = _fw
	_i++
	goto _40

_42:
	_jz = _jz + _k
	goto lrecompute

_36:
_32:
	if _z != float64(0) {
		goto _46
	}

	_jz = _jz - int32(1)
	_q0 = _q0 - int32(24)
_48:
	if *(*int32)(unsafe.Pointer(_iq + 4*uintptr(_jz))) != int32(0) {
		goto _49
	}

	_jz--
	_q0 = _q0 - int32(24)
	goto _48

_49:
	goto _47

_46:
	_z = Xscalbn(tls, _z, -_q0)
	if _z < float64(1.6777216e+07) {
		goto _50
	}

	_fw = float64(int32(float64(5.960464477539063e-08) * _z))
	*(*int32)(unsafe.Pointer(_iq + 4*uintptr(_jz))) = int32(_z - float64(float64(1.6777216e+07)*_fw))
	_jz = _jz + int32(1)
	_q0 = _q0 + int32(24)
	*(*int32)(unsafe.Pointer(_iq + 4*uintptr(_jz))) = int32(_fw)
	goto _51

_50:
	*(*int32)(unsafe.Pointer(_iq + 4*uintptr(_jz))) = int32(_z)
_51:
_47:
	_fw = Xscalbn(tls, float64(1), _q0)
	_i = _jz
_52:
	if _i < int32(0) {
		goto _54
	}

	*(*float64)(unsafe.Pointer(_q + 8*uintptr(_i))) = _fw * float64(*(*int32)(unsafe.Pointer(_iq + 4*uintptr(_i))))
	_fw = _fw * float64(5.960464477539063e-08)
	_i--
	goto _52

_54:
	_i = _jz
_55:
	if _i < int32(0) {
		goto _57
	}

	_fw = float64(0)
	_k = int32(0)
_58:
	if _k > _jp || _k > _jz-_i {
		goto _60
	}

	_fw = _fw + float64(*(*float64)(unsafe.Pointer(xPIo2 + 8*uintptr(_k)))**(*float64)(unsafe.Pointer(_q + 8*uintptr(_i+_k))))
	_k++
	goto _58

_60:
	*(*float64)(unsafe.Pointer(_fq + 8*uintptr(_jz-_i))) = _fw
	_i--
	goto _55

_57:
	switch _prec {
	case int32(0):
		goto _62
	case int32(1):
		goto _63
	case int32(2):
		goto _64
	case int32(3):
		goto _65
	}
	goto _61

_62:
	_fw = float64(0)
	_i = _jz
_66:
	if _i < int32(0) {
		goto _68
	}

	_fw = _fw + *(*float64)(unsafe.Pointer(_fq + 8*uintptr(_i)))
	_i--
	goto _66

_68:
	*(*float64)(unsafe.Pointer(_y)) = func() float64 {
		if _ih == int32(0) {
			return _fw
		}
		return -_fw
	}()
	goto _61

_63:
_64:
	_fw = float64(0)
	_i = _jz
_69:
	if _i < int32(0) {
		goto _71
	}

	_fw = _fw + *(*float64)(unsafe.Pointer(_fq + 8*uintptr(_i)))
	_i--
	goto _69

_71:
	_fw = _fw
	*(*float64)(unsafe.Pointer(_y)) = func() float64 {
		if _ih == int32(0) {
			return _fw
		}
		return -_fw
	}()
	_fw = *(*float64)(unsafe.Pointer(_fq)) - _fw
	_i = int32(1)
_72:
	if _i > _jz {
		goto _74
	}

	_fw = _fw + *(*float64)(unsafe.Pointer(_fq + 8*uintptr(_i)))
	_i++
	goto _72

_74:
	*(*float64)(unsafe.Pointer(_y + 8)) = func() float64 {
		if _ih == int32(0) {
			return _fw
		}
		return -_fw
	}()
	goto _61

_65:
	_i = _jz
_75:
	if _i <= int32(0) {
		goto _77
	}

	_fw = *(*float64)(unsafe.Pointer(_fq + 8*uintptr(_i-int32(1)))) + *(*float64)(unsafe.Pointer(_fq + 8*uintptr(_i)))
	{
		p := (*float64)(unsafe.Pointer(_fq + 8*uintptr(_i)))
		*p = *p + float64(*(*float64)(unsafe.Pointer(_fq + 8*uintptr(_i-int32(1))))-_fw)
	}
	*(*float64)(unsafe.Pointer(_fq + 8*uintptr(_i-int32(1)))) = _fw
	_i--
	goto _75

_77:
	_i = _jz
_78:
	if _i <= int32(1) {
		goto _80
	}

	_fw = *(*float64)(unsafe.Pointer(_fq + 8*uintptr(_i-int32(1)))) + *(*float64)(unsafe.Pointer(_fq + 8*uintptr(_i)))
	{
		p := (*float64)(unsafe.Pointer(_fq + 8*uintptr(_i)))
		*p = *p + float64(*(*float64)(unsafe.Pointer(_fq + 8*uintptr(_i-int32(1))))-_fw)
	}
	*(*float64)(unsafe.Pointer(_fq + 8*uintptr(_i-int32(1)))) = _fw
	_i--
	goto _78

_80:
	_fw = float64(0)
	_i = _jz
_81:
	if _i < int32(2) {
		goto _83
	}

	_fw = _fw + *(*float64)(unsafe.Pointer(_fq + 8*uintptr(_i)))
	_i--
	goto _81

_83:
	if _ih != int32(0) {
		goto _84
	}

	*(*float64)(unsafe.Pointer(_y)) = *(*float64)(unsafe.Pointer(_fq))
	*(*float64)(unsafe.Pointer(_y + 8)) = *(*float64)(unsafe.Pointer(_fq + 8))
	*(*float64)(unsafe.Pointer(_y + 16)) = _fw
	goto _85

_84:
	*(*float64)(unsafe.Pointer(_y)) = -*(*float64)(unsafe.Pointer(_fq))
	*(*float64)(unsafe.Pointer(_y + 8)) = -*(*float64)(unsafe.Pointer(_fq + 8))
	*(*float64)(unsafe.Pointer(_y + 16)) = -_fw
_85:
_61:
	return _n & int32(7)
}

type t312__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t312__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t7int32_t = int32

// xinit_jk [4]int32, escapes: true, __rem_pio2_large.c:127:18
var xinit_jk = ds + 34744

// xipio2 [66]int32, escapes: true, __rem_pio2_large.c:141:22
var xipio2 = ds + 34760

// xPIo2 [8]float64, escapes: true, __rem_pio2_large.c:262:21
var xPIo2 = ds + 35024

// linking __rem_pio2f.o

// X__rem_pio2f is defined at __rem_pio2f.c:42:5
func X__rem_pio2f(tls TLS, _x float32, _y uintptr /* *float64 */) (r int32) {
	esc := MustMalloc(40)
	var (
		_u    = esc      // *struct{Ff [0]float32;Fi [0]uint32;F int32}
		_tx   = esc + 16 // *[1]float64
		_ty   = esc + 32 // *[1]float64
		_fn   float64
		_ix   uint32
		_n    int32
		_sign int32
		_e0   int32
	)
	defer Free(esc)
	*(*struct {
		Ff [0]float32
		Fi [0]uint32
		F  int32
	})(unsafe.Pointer(_u)) = *(*struct {
		Ff [0]float32
		Fi [0]uint32
		F  int32
	})(unsafe.Pointer(&struct{ f float32 }{_x}))
	_ix = *(*uint32)(unsafe.Pointer(_u)) & uint32(0x7fffffff)
	if _ix >= uint32(0x4dc90fdb) {
		goto _1
	}

	_fn = float64(float64(float64(_x)*x1invpio2)+x1toint) - x1toint
	_n = int32(_fn)
	*(*float64)(unsafe.Pointer(_y)) = float64(float64(_x)-float64(_fn*x1pio2_1)) - float64(_fn*x1pio2_1t)
	return _n

_1:
	if _ix < uint32(0x7f800000) {
		goto _2
	}

	*(*float64)(unsafe.Pointer(_y)) = float64(_x - _x)
	return int32(0)

_2:
	_sign = int32(*(*uint32)(unsafe.Pointer(_u)) >> (uint(31) % 32))
	_e0 = int32(_ix>>(uint(23)%32) - uint32(150))
	*(*uint32)(unsafe.Pointer(_u)) = _ix - uint32(_e0<<(uint(23)%32))
	*(*float64)(unsafe.Pointer(_tx)) = float64(*(*float32)(unsafe.Pointer(_u)))
	_n = X__rem_pio2_large(tls, _tx, _ty, _e0, int32(1), int32(0))
	if _sign == 0 {
		goto _3
	}

	*(*float64)(unsafe.Pointer(_y)) = -*(*float64)(unsafe.Pointer(_ty))
	return -_n

_3:
	*(*float64)(unsafe.Pointer(_y)) = *(*float64)(unsafe.Pointer(_ty))
	return _n
}

type t313__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t313__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t27uint32_t = uint32

type t3double_t = float64

// xinvpio2 float64, escapes: false, __rem_pio2f.c:38:1
var x1invpio2 = float64(0.6366197723675814)

// xtoint float64, escapes: false, __rem_pio2f.c:37:1
var x1toint = float64(6.755399441055744e+15)

type t8int32_t = int32

// xpio2_1 float64, escapes: false, __rem_pio2f.c:39:1
var x1pio2_1 = float64(1.5707963109016418)

// xpio2_1t float64, escapes: false, __rem_pio2f.c:40:1
var x1pio2_1t = float64(1.5893254773528196e-08)

// linking __rem_pio2l.o

type t314__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t314__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// linking __signbit.o

// X__signbit is defined at __signbit.c:4:5
func X__signbit(tls TLS, _x float64) (r int32) {
	esc := MustMalloc(8)
	var _y = esc // *struct{Fd [0]float64;Fi [0]uint64;F int64}
	defer Free(esc)
	*(*struct {
		Fd [0]float64
		Fi [0]uint64
		F  int64
	})(unsafe.Pointer(_y)) = *(*struct {
		Fd [0]float64
		Fi [0]uint64
		F  int64
	})(unsafe.Pointer(&struct{ f float64 }{_x}))
	return int32(*(*uint64)(unsafe.Pointer(_y)) >> (uint(63) % 64))
}

type t315__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t315__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t18uint64_t = uint64

// linking __signbitf.o

// X__signbitf is defined at __signbitf.c:4:5
func X__signbitf(tls TLS, _x float32) (r int32) {
	esc := MustMalloc(4)
	var _y = esc // *struct{Ff [0]float32;Fi [0]uint32;F int32}
	defer Free(esc)
	*(*struct {
		Ff [0]float32
		Fi [0]uint32
		F  int32
	})(unsafe.Pointer(_y)) = *(*struct {
		Ff [0]float32
		Fi [0]uint32
		F  int32
	})(unsafe.Pointer(&struct{ f float32 }{_x}))
	return int32(*(*uint32)(unsafe.Pointer(_y)) >> (uint(31) % 32))
}

type t316__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t316__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t28uint32_t = uint32

// linking __signbitl.o

// X__signbitl is defined at __signbitl.c:10:5
func X__signbitl(tls TLS, _x float64) (r int32) {
	return X__signbit(tls, _x)
}

type t317__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t317__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// linking __sin.o

// X__sin is defined at __sin.c:52:8
func X__sin(tls TLS, _x float64, _y float64, _iy int32) (r float64) {
	var (
		_z float64
		_r float64
		_v float64
		_w float64
	)
	_z = _x * _x
	_w = _z * _z
	_r = float64(xS2+float64(_z*float64(xS3+float64(_z*xS4)))) + float64(float64(_z*_w)*float64(xS5+float64(_z*xS6)))
	_v = _z * _x
	if _iy != int32(0) {
		goto _1
	}

	return _x + float64(_v*float64(xS1+float64(_z*_r)))

	goto _2

_1:
	return _x - float64(float64(float64(_z*float64(float64(float64(0.5)*_y)-float64(_v*_r)))-_y)-float64(_v*xS1))

_2:
	return r
}

type t318__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t318__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t4double_t = float64

// xS2 float64, escapes: false, __sin.c:46:1
var xS2 = float64(0.00833333333332249)

// xS3 float64, escapes: false, __sin.c:47:1
var xS3 = float64(-0.0001984126982985795)

// xS4 float64, escapes: false, __sin.c:48:1
var xS4 = float64(2.7557313707070068e-06)

// xS5 float64, escapes: false, __sin.c:49:1
var xS5 = float64(-2.5050760253406863e-08)

// xS6 float64, escapes: false, __sin.c:50:1
var xS6 = float64(1.58969099521155e-10)

// xS1 float64, escapes: false, __sin.c:45:1
var xS1 = float64(-0.16666666666666632)

// linking __sindf.o

// X__sindf is defined at __sindf.c:26:7
func X__sindf(tls TLS, _x float64) (r float32) {
	var (
		_r float64
		_s float64
		_w float64
		_z float64
	)
	_z = _x * _x
	_w = _z * _z
	_r = x1S3 + float64(_z*x1S4)
	_s = _z * _x
	return float32(float64(_x+float64(_s*float64(x1S1+float64(_z*x1S2)))) + float64(float64(_s*_w)*_r))
}

type t319__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t319__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t5double_t = float64

// xS3 float64, escapes: false, __sindf.c:23:1
var x1S3 = float64(-0.00019839334836096632)

// xS4 float64, escapes: false, __sindf.c:24:1
var x1S4 = float64(2.718311493989822e-06)

// xS1 float64, escapes: false, __sindf.c:21:1
var x1S1 = float64(-0.16666666641626524)

// xS2 float64, escapes: false, __sindf.c:22:1
var x1S2 = float64(0.008333329385889463)

// linking __sinl.o

type t320__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t320__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// linking __tan.o

func set592(p *float64, v float64) float64 { *p = v; return v }

// X__tan is defined at __tan.c:66:8
func X__tan(tls TLS, _x float64, _y float64, _odd int32) (r float64) {
	esc := MustMalloc(40)
	var (
		_z    float64
		_r    float64
		_v    float64
		_w    float64
		_s    float64
		_a    float64
		_w0   float64
		_a0   float64
		_hx   uint32
		_big  int32
		_sign int32
		___u  = esc      // *struct{Ff [0]float64;Fi [0]uint64;F int64}
		_1__u = esc + 16 // *struct{Ff [0]float64;Fi [0]uint64;F int64}
		_2__u = esc + 32 // *struct{Ff [0]float64;Fi [0]uint64;F int64}
	)
	defer Free(esc)
	*(*float64)(unsafe.Pointer(___u)) = _x
	_hx = uint32(*(*uint64)(unsafe.Pointer(___u)) >> (uint(32) % 64))
	_big = bool2int(_hx&uint32(0x7fffffff) >= uint32(0x3fe59428))
	if _big == 0 {
		goto _2
	}

	_sign = int32(_hx >> (uint(31) % 32))
	if _sign == 0 {
		goto _3
	}

	_x = -_x
	_y = -_y
_3:
	_x = float64(xpio4-_x) + float64(xpio4lo-_y)
	_y = float64(0)
_2:
	_z = _x * _x
	_w = _z * _z
	_r = *(*float64)(unsafe.Pointer(xT + 8)) + float64(_w*float64(*(*float64)(unsafe.Pointer(xT + 24))+float64(_w*float64(*(*float64)(unsafe.Pointer(xT + 40))+float64(_w*float64(*(*float64)(unsafe.Pointer(xT + 56))+float64(_w*float64(*(*float64)(unsafe.Pointer(xT + 72))+float64(_w**(*float64)(unsafe.Pointer(xT + 88)))))))))))
	_v = _z * float64(*(*float64)(unsafe.Pointer(xT + 16))+float64(_w*float64(*(*float64)(unsafe.Pointer(xT + 32))+float64(_w*float64(*(*float64)(unsafe.Pointer(xT + 48))+float64(_w*float64(*(*float64)(unsafe.Pointer(xT + 64))+float64(_w*float64(*(*float64)(unsafe.Pointer(xT + 80))+float64(_w**(*float64)(unsafe.Pointer(xT + 96))))))))))))
	_s = _z * _x
	_r = float64(_y+float64(_z*float64(float64(_s*float64(_r+_v))+_y))) + float64(_s**(*float64)(unsafe.Pointer(xT)))
	_w = _x + _r
	if _big == 0 {
		goto _4
	}

	_s = float64(int32(1) - int32(2)*_odd)
	_v = _s - float64(float64(2)*float64(_x+float64(_r-float64(float64(_w*_w)/float64(_w+_s)))))
	if _sign != 0 {
		return -_v
	}

	return _v

_4:
	if _odd != 0 {
		goto _5
	}

	return _w

_5:
	_w0 = _w
	*(*float64)(unsafe.Pointer(_1__u)) = _w0
	{
		p := (*uint64)(unsafe.Pointer(_1__u))
		*p = *p & uint64(0xffffffff00000000)
	}
	{
		p := (*uint64)(unsafe.Pointer(_1__u))
		*p = *p | uint64(0)
	}
	_w0 = *(*float64)(unsafe.Pointer(_1__u))
	_v = _r - float64(_w0-_x)
	_a0 = set592(&_a, float64(-1)/_w)
	*(*float64)(unsafe.Pointer(_2__u)) = _a0
	{
		p := (*uint64)(unsafe.Pointer(_2__u))
		*p = *p & uint64(0xffffffff00000000)
	}
	{
		p := (*uint64)(unsafe.Pointer(_2__u))
		*p = *p | uint64(0)
	}
	_a0 = *(*float64)(unsafe.Pointer(_2__u))
	return _a0 + float64(_a*float64(float64(float64(1)+float64(_a0*_w0))+float64(_a0*_v)))
}

type t321__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t321__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t6double_t = float64

type t29uint32_t = uint32

type t19uint64_t = uint64

// xpio4 float64, escapes: false, __tan.c:63:1
var xpio4 = float64(0.7853981633974483)

// xpio4lo float64, escapes: false, __tan.c:64:1
var xpio4lo = float64(3.061616997868383e-17)

// xT [13]float64, escapes: true, __tan.c:48:21
var xT = ds + 35088

// linking __tandf.o

// X__tandf is defined at __tandf.c:28:7
func X__tandf(tls TLS, _x float64, _odd int32) (r float32) {
	var (
		_z float64
		_r float64
		_w float64
		_s float64
		_t float64
		_u float64
	)
	_z = _x * _x
	_r = *(*float64)(unsafe.Pointer(x1T + 32)) + float64(_z**(*float64)(unsafe.Pointer(x1T + 40)))
	_t = *(*float64)(unsafe.Pointer(x1T + 16)) + float64(_z**(*float64)(unsafe.Pointer(x1T + 24)))
	_w = _z * _z
	_s = _z * _x
	_u = *(*float64)(unsafe.Pointer(x1T)) + float64(_z**(*float64)(unsafe.Pointer(x1T + 8)))
	_r = float64(_x+float64(_s*_u)) + float64(float64(_s*_w)*float64(_t+float64(_w*_r)))
	if _odd != 0 {
		return float32(float64(-1) / _r)
	}

	return float32(_r)
}

type t322__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t322__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t7double_t = float64

// xT [6]float64, escapes: true, __tandf.c:19:21
var x1T = ds + 35192

// linking __tanl.o

type t323__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t323__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// linking acos.o

// Xacos is defined at acos.c:60:8
func Xacos(tls TLS, _x float64) (r float64) {
	esc := MustMalloc(40)
	var (
		_z    float64
		_w    float64
		_s    float64
		_c    float64
		_df   float64
		_hx   uint32
		_ix   uint32
		___u  = esc // *struct{Ff [0]float64;Fi [0]uint64;F int64}
		_lx   uint32
		_1__u = esc + 16 // *struct{Ff [0]float64;Fi [0]uint64;F int64}
		_2__u = esc + 32 // *struct{Ff [0]float64;Fi [0]uint64;F int64}
	)
	defer Free(esc)
	*(*float64)(unsafe.Pointer(___u)) = _x
	_hx = uint32(*(*uint64)(unsafe.Pointer(___u)) >> (uint(32) % 64))
	_ix = _hx & uint32(0x7fffffff)
	if _ix < uint32(0x3ff00000) {
		goto _2
	}

	*(*float64)(unsafe.Pointer(_1__u)) = _x
	_lx = uint32(*(*uint64)(unsafe.Pointer(_1__u)))
	if _ix-uint32(0x3ff00000)|_lx != uint32(0) {
		goto _4
	}

	if (_hx >> (uint(31) % 32)) == 0 {
		goto _5
	}

	return float64(float64(2)*xpio2_hi) + float64(7.52316384526264e-37)

_5:
	return float64(0)

_4:
	return float64(0) / float64(_x-_x)

_2:
	if _ix >= uint32(0x3fe00000) {
		goto _6
	}

	if _ix > uint32(0x3c600000) {
		goto _7
	}

	return xpio2_hi + float64(7.52316384526264e-37)

_7:
	return xpio2_hi - float64(_x-float64(xpio2_lo-float64(_x*xR(tls, _x*_x))))

_6:
	if (_hx >> (uint(31) % 32)) == 0 {
		goto _8
	}

	_z = float64(float64(1)+_x) * float64(0.5)
	_s = Xsqrt(tls, _z)
	_w = float64(xR(tls, _z)*_s) - xpio2_lo
	return float64(2) * float64(xpio2_hi-float64(_s+_w))

_8:
	_z = float64(float64(1)-_x) * float64(0.5)
	_s = Xsqrt(tls, _z)
	_df = _s
	*(*float64)(unsafe.Pointer(_2__u)) = _df
	{
		p := (*uint64)(unsafe.Pointer(_2__u))
		*p = *p & uint64(0xffffffff00000000)
	}
	{
		p := (*uint64)(unsafe.Pointer(_2__u))
		*p = *p | uint64(0)
	}
	_df = *(*float64)(unsafe.Pointer(_2__u))
	_c = float64(_z-float64(_df*_df)) / float64(_s+_df)
	_w = float64(xR(tls, _z)*_s) + _c
	return float64(2) * float64(_df+_w)
}

type t324__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t324__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t30uint32_t = uint32

type t20uint64_t = uint64

// xpio2_hi float64, escapes: false, acos.c:39:1
var xpio2_hi = float64(1.5707963267948966)

// xpio2_lo float64, escapes: false, acos.c:40:1
var xpio2_lo = float64(6.123233995736766e-17)

// xR is defined at acos.c:52:15
func xR(tls TLS, _z float64) (r float64) {
	var (
		_p float64
		_q float64
	)
	_p = _z * float64(xpS0+float64(_z*float64(xpS1+float64(_z*float64(xpS2+float64(_z*float64(xpS3+float64(_z*float64(xpS4+float64(_z*xpS5))))))))))
	_q = float64(1) + float64(_z*float64(xqS1+float64(_z*float64(xqS2+float64(_z*float64(xqS3+float64(_z*xqS4)))))))
	return _p / _q
}

type t8double_t = float64

// xpS0 float64, escapes: false, acos.c:41:1
var xpS0 = float64(0.16666666666666666)

// xpS1 float64, escapes: false, acos.c:42:1
var xpS1 = float64(-0.3255658186224009)

// xpS2 float64, escapes: false, acos.c:43:1
var xpS2 = float64(0.20121253213486293)

// xpS3 float64, escapes: false, acos.c:44:1
var xpS3 = float64(-0.04005553450067941)

// xpS4 float64, escapes: false, acos.c:45:1
var xpS4 = float64(0.0007915349942898145)

// xpS5 float64, escapes: false, acos.c:46:1
var xpS5 = float64(3.479331075960212e-05)

// xqS1 float64, escapes: false, acos.c:47:1
var xqS1 = float64(-2.403394911734414)

// xqS2 float64, escapes: false, acos.c:48:1
var xqS2 = float64(2.0209457602335057)

// xqS3 float64, escapes: false, acos.c:49:1
var xqS3 = float64(-0.6882839716054533)

// xqS4 float64, escapes: false, acos.c:50:1
var xqS4 = float64(0.07703815055590194)

// linking acosf.o

// Xacosf is defined at acosf.c:34:7
func Xacosf(tls TLS, _x float32) (r float32) {
	esc := MustMalloc(36)
	var (
		_z    float32
		_w    float32
		_s    float32
		_c    float32
		_df   float32
		_hx   uint32
		_ix   uint32
		___u  = esc      // *struct{Ff [0]float32;Fi [0]uint32;F int32}
		_1__u = esc + 16 // *struct{Ff [0]float32;Fi [0]uint32;F int32}
		_2__u = esc + 32 // *struct{Ff [0]float32;Fi [0]uint32;F int32}
	)
	defer Free(esc)
	*(*float32)(unsafe.Pointer(___u)) = _x
	_hx = *(*uint32)(unsafe.Pointer(___u))
	_ix = _hx & uint32(0x7fffffff)
	if _ix < uint32(0x3f800000) {
		goto _2
	}

	if _ix != uint32(0x3f800000) {
		goto _3
	}

	if (_hx >> (uint(31) % 32)) == 0 {
		goto _4
	}

	return float32(float32(2)*x1pio2_hi) + float32(7.523164e-37)

_4:
	return float32(0)

_3:
	return float32(0) / float32(_x-_x)

_2:
	if _ix >= uint32(0x3f000000) {
		goto _5
	}

	if _ix > uint32(0x32800000) {
		goto _6
	}

	return x1pio2_hi + float32(7.523164e-37)

_6:
	return x1pio2_hi - float32(_x-float32(x1pio2_lo-float32(_x*x1R(tls, _x*_x))))

_5:
	if (_hx >> (uint(31) % 32)) == 0 {
		goto _7
	}

	_z = float32(float32(1)+_x) * float32(0.5)
	_s = Xsqrtf(tls, _z)
	_w = float32(x1R(tls, _z)*_s) - x1pio2_lo
	return float32(2) * float32(x1pio2_hi-float32(_s+_w))

_7:
	_z = float32(float32(1)-_x) * float32(0.5)
	_s = Xsqrtf(tls, _z)
	*(*float32)(unsafe.Pointer(_1__u)) = _s
	_hx = *(*uint32)(unsafe.Pointer(_1__u))
	*(*uint32)(unsafe.Pointer(_2__u)) = _hx & uint32(0xfffff000)
	_df = *(*float32)(unsafe.Pointer(_2__u))
	_c = float32(_z-float32(_df*_df)) / float32(_s+_df)
	_w = float32(x1R(tls, _z)*_s) + _c
	return float32(2) * float32(_df+_w)
}

type t325__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t325__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t31uint32_t = uint32

// xpio2_hi float32, escapes: false, acosf.c:19:1
var x1pio2_hi = float32(1.5707963)

// xpio2_lo float32, escapes: false, acosf.c:20:1
var x1pio2_lo = float32(7.5497894e-08)

// xR is defined at acosf.c:26:14
func x1R(tls TLS, _z float32) (r float32) {
	var (
		_p float32
		_q float32
	)
	_p = _z * float32(x1pS0+float32(_z*float32(x1pS1+float32(_z*x1pS2))))
	_q = float32(1) + float32(_z*x1qS1)
	return _p / _q
}

type Tfloat_t = float32

// xpS0 float32, escapes: false, acosf.c:21:1
var x1pS0 = float32(0.16666587)

// xpS1 float32, escapes: false, acosf.c:22:1
var x1pS1 = float32(-0.042743422)

// xpS2 float32, escapes: false, acosf.c:23:1
var x1pS2 = float32(-0.008656363)

// xqS1 float32, escapes: false, acosf.c:24:1
var x1qS1 = float32(-0.70662963)

// linking acosh.o

// Xacosh is defined at acosh.c:9:8
func Xacosh(tls TLS, _x float64) (r float64) {
	esc := MustMalloc(8)
	var (
		_u = esc // *struct{Ff [0]float64;Fi [0]uint64;F int64}
		_e uint32
	)
	defer Free(esc)
	*(*struct {
		Ff [0]float64
		Fi [0]uint64
		F  int64
	})(unsafe.Pointer(_u)) = *(*struct {
		Ff [0]float64
		Fi [0]uint64
		F  int64
	})(unsafe.Pointer(&struct{ f float64 }{_x}))
	_e = uint32(*(*uint64)(unsafe.Pointer(_u)) >> (uint(52) % 64) & uint64(0x7ff))
	if _e >= uint32(1024) {
		goto _1
	}

	return Xlog1p(tls, float64(_x-float64(1))+Xsqrt(tls, float64(float64(_x-float64(1))*float64(_x-float64(1)))+float64(float64(2)*float64(_x-float64(1)))))

_1:
	if _e >= uint32(1049) {
		goto _2
	}

	return Xlog(tls, float64(float64(2)*_x)-float64(float64(1)/float64(_x+Xsqrt(tls, float64(_x*_x)-float64(1)))))

_2:
	return Xlog(tls, _x) + float64(0.6931471805599453)
}

type t326__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t326__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t21uint64_t = uint64

// linking acoshf.o

// Xacoshf is defined at acoshf.c:12:7
func Xacoshf(tls TLS, _x float32) (r float32) {
	esc := MustMalloc(4)
	var (
		_u = esc // *struct{Ff [0]float32;Fi [0]uint32;F int32}
		_a uint32
	)
	defer Free(esc)
	*(*struct {
		Ff [0]float32
		Fi [0]uint32
		F  int32
	})(unsafe.Pointer(_u)) = *(*struct {
		Ff [0]float32
		Fi [0]uint32
		F  int32
	})(unsafe.Pointer(&struct{ f float32 }{_x}))
	_a = *(*uint32)(unsafe.Pointer(_u)) & uint32(0x7fffffff)
	if _a >= uint32(1073741824) {
		goto _1
	}

	return Xlog1pf(tls, float32(_x-float32(1))+Xsqrtf(tls, float32(float32(_x-float32(1))*float32(_x-float32(1)))+float32(float32(2)*float32(_x-float32(1)))))

_1:
	if _a >= uint32(1166016512) {
		goto _2
	}

	return Xlogf(tls, float32(float32(2)*_x)-float32(float32(1)/float32(_x+Xsqrtf(tls, float32(_x*_x)-float32(1)))))

_2:
	return Xlogf(tls, _x) + float32(0.6931472)
}

type t327__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t327__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t32uint32_t = uint32

// linking acoshl.o

// Xacoshl is defined at acoshl.c:4:13
func Xacoshl(tls TLS, _x float64) (r float64) {
	return Xacosh(tls, _x)
}

type t328__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t328__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// linking acosl.o

// Xacosl is defined at acosl.c:20:13
func Xacosl(tls TLS, _x float64) (r float64) {
	return Xacos(tls, _x)
}

type t329__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t329__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// linking asin.o

// Xasin is defined at asin.c:67:8
func Xasin(tls TLS, _x float64) (r float64) {
	esc := MustMalloc(40)
	var (
		_z    float64
		_r    float64
		_s    float64
		_hx   uint32
		_ix   uint32
		___u  = esc // *struct{Ff [0]float64;Fi [0]uint64;F int64}
		_lx   uint32
		_1__u = esc + 16 // *struct{Ff [0]float64;Fi [0]uint64;F int64}
		_f    float64
		_c    float64
		_2__u = esc + 32 // *struct{Ff [0]float64;Fi [0]uint64;F int64}
	)
	defer Free(esc)
	*(*float64)(unsafe.Pointer(___u)) = _x
	_hx = uint32(*(*uint64)(unsafe.Pointer(___u)) >> (uint(32) % 64))
	_ix = _hx & uint32(0x7fffffff)
	if _ix < uint32(0x3ff00000) {
		goto _2
	}

	*(*float64)(unsafe.Pointer(_1__u)) = _x
	_lx = uint32(*(*uint64)(unsafe.Pointer(_1__u)))
	if _ix-uint32(0x3ff00000)|_lx != uint32(0) {
		goto _4
	}

	return float64(_x*x2pio2_hi) + float64(7.52316384526264e-37)

_4:
	return float64(0) / float64(_x-_x)

_2:
	if _ix >= uint32(0x3fe00000) {
		goto _5
	}

	if _ix >= uint32(0x3e500000) || _ix < uint32(0x100000) {
		goto _6
	}

	return _x

_6:
	return _x + float64(_x*x2R(tls, _x*_x))

_5:
	_z = float64(float64(1)-Xfabs(tls, _x)) * float64(0.5)
	_s = Xsqrt(tls, _z)
	_r = x2R(tls, _z)
	if _ix < uint32(0x3fef3333) {
		goto _7
	}

	_x = x2pio2_hi - float64(float64(float64(2)*float64(_s+float64(_s*_r)))-x2pio2_lo)
	goto _8

_7:
	_f = _s
	*(*float64)(unsafe.Pointer(_2__u)) = _f
	{
		p := (*uint64)(unsafe.Pointer(_2__u))
		*p = *p & uint64(0xffffffff00000000)
	}
	{
		p := (*uint64)(unsafe.Pointer(_2__u))
		*p = *p | uint64(0)
	}
	_f = *(*float64)(unsafe.Pointer(_2__u))
	_c = float64(_z-float64(_f*_f)) / float64(_s+_f)
	_x = float64(float64(0.5)*x2pio2_hi) - float64(float64(float64(float64(float64(2)*_s)*_r)-float64(x2pio2_lo-float64(float64(2)*_c)))-float64(float64(float64(0.5)*x2pio2_hi)-float64(float64(2)*_f)))
_8:
	if (_hx >> (uint(31) % 32)) == 0 {
		goto _10
	}

	return -_x

_10:
	return _x
}

type t330__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t330__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t33uint32_t = uint32

type t22uint64_t = uint64

// xpio2_hi float64, escapes: false, asin.c:45:1
var x2pio2_hi = float64(1.5707963267948966)

// xR is defined at asin.c:59:15
func x2R(tls TLS, _z float64) (r float64) {
	var (
		_p float64
		_q float64
	)
	_p = _z * float64(x2pS0+float64(_z*float64(x2pS1+float64(_z*float64(x2pS2+float64(_z*float64(x1pS3+float64(_z*float64(x1pS4+float64(_z*x1pS5))))))))))
	_q = float64(1) + float64(_z*float64(x2qS1+float64(_z*float64(x1qS2+float64(_z*float64(x1qS3+float64(_z*x1qS4)))))))
	return _p / _q
}

// xpio2_lo float64, escapes: false, asin.c:46:1
var x2pio2_lo = float64(6.123233995736766e-17)

type t9double_t = float64

// xpS0 float64, escapes: false, asin.c:48:1
var x2pS0 = float64(0.16666666666666666)

// xpS1 float64, escapes: false, asin.c:49:1
var x2pS1 = float64(-0.3255658186224009)

// xpS2 float64, escapes: false, asin.c:50:1
var x2pS2 = float64(0.20121253213486293)

// xpS3 float64, escapes: false, asin.c:51:1
var x1pS3 = float64(-0.04005553450067941)

// xpS4 float64, escapes: false, asin.c:52:1
var x1pS4 = float64(0.0007915349942898145)

// xpS5 float64, escapes: false, asin.c:53:1
var x1pS5 = float64(3.479331075960212e-05)

// xqS1 float64, escapes: false, asin.c:54:1
var x2qS1 = float64(-2.403394911734414)

// xqS2 float64, escapes: false, asin.c:55:1
var x1qS2 = float64(2.0209457602335057)

// xqS3 float64, escapes: false, asin.c:56:1
var x1qS3 = float64(-0.6882839716054533)

// xqS4 float64, escapes: false, asin.c:57:1
var x1qS4 = float64(0.07703815055590194)

// linking asinf.o

// Xasinf is defined at asinf.c:35:7
func Xasinf(tls TLS, _x float32) (r float32) {
	esc := MustMalloc(4)
	var (
		_s   float64
		_z   float32
		_hx  uint32
		_ix  uint32
		___u = esc // *struct{Ff [0]float32;Fi [0]uint32;F int32}
	)
	defer Free(esc)
	*(*float32)(unsafe.Pointer(___u)) = _x
	_hx = *(*uint32)(unsafe.Pointer(___u))
	_ix = _hx & uint32(0x7fffffff)
	if _ix < uint32(0x3f800000) {
		goto _2
	}

	if _ix != uint32(0x3f800000) {
		goto _3
	}

	return float32(float64(float64(_x)*xpio2) + float64(7.52316384526264e-37))

_3:
	return float32(0) / float32(_x-_x)

_2:
	if _ix >= uint32(0x3f000000) {
		goto _4
	}

	if _ix >= uint32(0x39800000) || _ix < uint32(0x800000) {
		goto _5
	}

	return _x

_5:
	return _x + float32(_x*x3R(tls, _x*_x))

_4:
	_z = float32(float32(1)-Xfabsf(tls, _x)) * float32(0.5)
	_s = Xsqrt(tls, float64(_z))
	_x = float32(xpio2 - float64(float64(2)*float64(_s+float64(_s*float64(x3R(tls, _z))))))
	if (_hx >> (uint(31) % 32)) == 0 {
		goto _6
	}

	return -_x

_6:
	return _x
}

type t331__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t331__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t34uint32_t = uint32

// xpio2 float64, escapes: false, asinf.c:18:1
var xpio2 = float64(1.5707963267948966)

// xR is defined at asinf.c:27:14
func x3R(tls TLS, _z float32) (r float32) {
	var (
		_p float32
		_q float32
	)
	_p = _z * float32(x3pS0+float32(_z*float32(x3pS1+float32(_z*x3pS2))))
	_q = float32(1) + float32(_z*x3qS1)
	return _p / _q
}

type t1float_t = float32

// xpS0 float32, escapes: false, asinf.c:22:1
var x3pS0 = float32(0.16666587)

// xpS1 float32, escapes: false, asinf.c:23:1
var x3pS1 = float32(-0.042743422)

// xpS2 float32, escapes: false, asinf.c:24:1
var x3pS2 = float32(-0.008656363)

// xqS1 float32, escapes: false, asinf.c:25:1
var x3qS1 = float32(-0.70662963)

// linking asinh.o

// Xasinh is defined at asinh.c:4:8
func Xasinh(tls TLS, _x float64) (r float64) {
	esc := MustMalloc(8)
	var (
		_u    = esc // *struct{Ff [0]float64;Fi [0]uint64;F int64}
		_e    uint32
		_s    uint32
		___x  float32
		_     = ___x
		_1__x float64
		_     = _1__x
		_2__x float64
		_     = _2__x
	)
	defer Free(esc)
	*(*struct {
		Ff [0]float64
		Fi [0]uint64
		F  int64
	})(unsafe.Pointer(_u)) = *(*struct {
		Ff [0]float64
		Fi [0]uint64
		F  int64
	})(unsafe.Pointer(&struct{ f float64 }{_x}))
	_e = uint32(*(*uint64)(unsafe.Pointer(_u)) >> (uint(52) % 64) & uint64(0x7ff))
	_s = uint32(*(*uint64)(unsafe.Pointer(_u)) >> (uint(63) % 64))
	{
		p := (*uint64)(unsafe.Pointer(_u))
		*p = *p & uint64(9223372036854775807)
	}
	_x = *(*float64)(unsafe.Pointer(_u))
	if _e < uint32(1049) {
		goto _1
	}

	_x = Xlog(tls, _x) + float64(0.6931471805599453)
	goto _2

_1:
	if _e < uint32(1024) {
		goto _3
	}

	_x = Xlog(tls, float64(float64(2)*_x)+float64(float64(1)/float64(Xsqrt(tls, float64(_x*_x)+float64(1))+_x)))
	goto _4

_3:
	if _e < uint32(997) {
		goto _5
	}

	_x = Xlog1p(tls, _x+float64(float64(_x*_x)/float64(Xsqrt(tls, float64(_x*_x)+float64(1))+float64(1))))
	goto _6

_5:
	goto _8

	___x = float32(_x + float64(1.329227995784916e+36))
	goto _9

_8:
	_1__x = _x + float64(1.329227995784916e+36)
	goto _10

	_2__x = _x + float64(1.329227995784916e+36)
_10:
_9:
_6:
_4:
_2:
	if _s != 0 {
		return -_x
	}

	return _x
}

type t332__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t332__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t23uint64_t = uint64

// linking asinhf.o

// Xasinhf is defined at asinhf.c:4:7
func Xasinhf(tls TLS, _x float32) (r float32) {
	esc := MustMalloc(4)
	var (
		_u    = esc // *struct{Ff [0]float32;Fi [0]uint32;F int32}
		_i    uint32
		_s    uint32
		___x  float32
		_     = ___x
		_1__x float64
		_     = _1__x
		_2__x float64
		_     = _2__x
	)
	defer Free(esc)
	*(*struct {
		Ff [0]float32
		Fi [0]uint32
		F  int32
	})(unsafe.Pointer(_u)) = *(*struct {
		Ff [0]float32
		Fi [0]uint32
		F  int32
	})(unsafe.Pointer(&struct{ f float32 }{_x}))
	_i = *(*uint32)(unsafe.Pointer(_u)) & uint32(0x7fffffff)
	_s = *(*uint32)(unsafe.Pointer(_u)) >> (uint(31) % 32)
	*(*uint32)(unsafe.Pointer(_u)) = _i
	_x = *(*float32)(unsafe.Pointer(_u))
	if _i < uint32(1166016512) {
		goto _1
	}

	_x = Xlogf(tls, _x) + float32(0.6931472)
	goto _2

_1:
	if _i < uint32(1073741824) {
		goto _3
	}

	_x = Xlogf(tls, float32(float32(2)*_x)+float32(float32(1)/float32(Xsqrtf(tls, float32(_x*_x)+float32(1))+_x)))
	goto _4

_3:
	if _i < uint32(964689920) {
		goto _5
	}

	_x = Xlog1pf(tls, _x+float32(float32(_x*_x)/float32(Xsqrtf(tls, float32(_x*_x)+float32(1))+float32(1))))
	goto _6

_5:
	___x = _x + float32(1.329228e+36)
	goto _8

	goto _9

	_1__x = float64(_x + float32(1.329228e+36))
	goto _10

_9:
	_2__x = float64(_x + float32(1.329228e+36))
_10:
_8:
_6:
_4:
_2:
	if _s != 0 {
		return -_x
	}

	return _x
}

type t333__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t333__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t35uint32_t = uint32

// linking asinhl.o

// Xasinhl is defined at asinhl.c:4:13
func Xasinhl(tls TLS, _x float64) (r float64) {
	return Xasinh(tls, _x)
}

type t334__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t334__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// linking asinl.o

// Xasinl is defined at asinl.c:20:13
func Xasinl(tls TLS, _x float64) (r float64) {
	return Xasin(tls, _x)
}

type t335__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t335__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// linking atan.o

// Xatan is defined at atan.c:63:8
func Xatan(tls TLS, _x float64) (r float64) {
	esc := MustMalloc(8)
	var (
		_w    float64
		_s1   float64
		_s2   float64
		_z    float64
		_ix   uint32
		_sign uint32
		_id   int32
		___u  = esc // *struct{Ff [0]float64;Fi [0]uint64;F int64}
		___x  float32
		_     = ___x
		_1__x float64
		_     = _1__x
		_2__x float64
		_     = _2__x
	)
	defer Free(esc)
	*(*float64)(unsafe.Pointer(___u)) = _x
	_ix = uint32(*(*uint64)(unsafe.Pointer(___u)) >> (uint(32) % 64))
	_sign = _ix >> (uint(31) % 32)
	_ix = _ix & uint32(0x7fffffff)
	if _ix < uint32(0x44100000) {
		goto _2
	}

	if x3__DOUBLE_BITS(tls, _x)&uint64(9223372036854775807) <= uint64(9218868437227405312) {
		goto _3
	}

	return _x

_3:
	_z = *(*float64)(unsafe.Pointer(xatanhi + 24)) + float64(7.52316384526264e-37)
	if _sign != 0 {
		return -_z
	}

	return _z

_2:
	if _ix >= uint32(0x3fdc0000) {
		goto _4
	}

	if _ix >= uint32(0x3e400000) {
		goto _6
	}

	if _ix >= uint32(0x100000) {
		goto _7
	}

	___x = float32(_x)
	goto _9

	goto _10

	_1__x = float64(float32(_x))
	goto _11

_10:
	_2__x = float64(float32(_x))
_11:
_9:
_7:
	return _x

_6:
	_id = int32(-1)
	goto _5

_4:
	_x = Xfabs(tls, _x)
	if _ix >= uint32(0x3ff30000) {
		goto _12
	}

	if _ix >= uint32(0x3fe60000) {
		goto _14
	}

	_id = int32(0)
	_x = float64(float64(float64(2)*_x)-float64(1)) / float64(float64(2)+_x)
	goto _15

_14:
	_id = int32(1)
	_x = float64(_x-float64(1)) / float64(_x+float64(1))
_15:
	goto _13

_12:
	if _ix >= uint32(0x40038000) {
		goto _16
	}

	_id = int32(2)
	_x = float64(_x-float64(1.5)) / float64(float64(1)+float64(float64(1.5)*_x))
	goto _17

_16:
	_id = int32(3)
	_x = float64(-1) / _x
_17:
_13:
_5:
	_z = _x * _x
	_w = _z * _z
	_s1 = _z * float64(*(*float64)(unsafe.Pointer(xaT))+float64(_w*float64(*(*float64)(unsafe.Pointer(xaT + 16))+float64(_w*float64(*(*float64)(unsafe.Pointer(xaT + 32))+float64(_w*float64(*(*float64)(unsafe.Pointer(xaT + 48))+float64(_w*float64(*(*float64)(unsafe.Pointer(xaT + 64))+float64(_w**(*float64)(unsafe.Pointer(xaT + 80))))))))))))
	_s2 = _w * float64(*(*float64)(unsafe.Pointer(xaT + 8))+float64(_w*float64(*(*float64)(unsafe.Pointer(xaT + 24))+float64(_w*float64(*(*float64)(unsafe.Pointer(xaT + 40))+float64(_w*float64(*(*float64)(unsafe.Pointer(xaT + 56))+float64(_w**(*float64)(unsafe.Pointer(xaT + 72))))))))))
	if _id >= int32(0) {
		goto _18
	}

	return _x - float64(_x*float64(_s1+_s2))

_18:
	_z = *(*float64)(unsafe.Pointer(xatanhi + 8*uintptr(_id))) - float64(float64(float64(_x*float64(_s1+_s2))-*(*float64)(unsafe.Pointer(xatanlo + 8*uintptr(_id))))-_x)
	if _sign != 0 {
		return -_z
	}

	return _z
}

type t336__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t336__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t10double_t = float64

type t36uint32_t = uint32

type t24uint64_t = uint64

// x__DOUBLE_BITS is defined at math.h:49:36
func x3__DOUBLE_BITS(tls TLS, ___f float64) (r uint64) {
	esc := MustMalloc(8)
	var ___u = esc // *struct{F__f [0]float64;F__i [0]uint64;F int64}
	defer Free(esc)
	*(*float64)(unsafe.Pointer(___u)) = ___f
	return *(*uint64)(unsafe.Pointer(___u))
}

// xatanhi [4]float64, escapes: true, atan.c:35:21
var xatanhi = ds + 35240

// xaT [11]float64, escapes: true, atan.c:49:21
var xaT = ds + 35272

// xatanlo [4]float64, escapes: true, atan.c:42:21
var xatanlo = ds + 35360

// linking atan2.o

// Xatan2 is defined at atan2.c:46:8
func Xatan2(tls TLS, _y float64, _x float64) (r float64) {
	esc := MustMalloc(24)
	var (
		_z    float64
		_m    uint32
		_lx   uint32
		_ly   uint32
		_ix   uint32
		_iy   uint32
		___u  = esc      // *struct{Ff [0]float64;Fi [0]uint64;F int64}
		_1__u = esc + 16 // *struct{Ff [0]float64;Fi [0]uint64;F int64}
	)
	defer Free(esc)
	if x4__DOUBLE_BITS(tls, _x)&uint64(9223372036854775807) <= uint64(9218868437227405312) && x4__DOUBLE_BITS(tls, _y)&uint64(9223372036854775807) <= uint64(9218868437227405312) {
		goto _1
	}

	return _x + _y

_1:
	*(*float64)(unsafe.Pointer(___u)) = _x
	_ix = uint32(*(*uint64)(unsafe.Pointer(___u)) >> (uint(32) % 64))
	_lx = uint32(*(*uint64)(unsafe.Pointer(___u)))
	*(*float64)(unsafe.Pointer(_1__u)) = _y
	_iy = uint32(*(*uint64)(unsafe.Pointer(_1__u)) >> (uint(32) % 64))
	_ly = uint32(*(*uint64)(unsafe.Pointer(_1__u)))
	if _ix-uint32(0x3ff00000)|_lx != uint32(0) {
		goto _4
	}

	return Xatan(tls, _y)

_4:
	_m = _iy>>(uint(31)%32)&uint32(1) | _ix>>(uint(30)%32)&uint32(2)
	_ix = _ix & uint32(0x7fffffff)
	_iy = _iy & uint32(0x7fffffff)
	if _iy|_ly != uint32(0) {
		goto _5
	}

	switch _m {
	case uint32(0):
		goto _7
	case uint32(1):
		goto _8
	case uint32(2):
		goto _9
	case uint32(3):
		goto _10
	}
	goto _6

_7:
_8:
	return _y

_9:
	return xpi

_10:
	return -xpi

_6:
_5:
	if _ix|_lx != uint32(0) {
		goto _11
	}

	if (_m & uint32(1)) != 0 {
		return float64(-xpi) / float64(2)
	}

	return xpi / float64(2)

_11:
	if _ix != uint32(0x7ff00000) {
		goto _12
	}

	if _iy != uint32(0x7ff00000) {
		goto _13
	}

	switch _m {
	case uint32(0):
		goto _16
	case uint32(1):
		goto _17
	case uint32(2):
		goto _18
	case uint32(3):
		goto _19
	}
	goto _15

_16:
	return xpi / float64(4)

_17:
	return float64(-xpi) / float64(4)

_18:
	return float64(float64(3)*xpi) / float64(4)

_19:
	return float64(float64(-3)*xpi) / float64(4)

_15:
	goto _14

_13:
	switch _m {
	case uint32(0):
		goto _21
	case uint32(1):
		goto _22
	case uint32(2):
		goto _23
	case uint32(3):
		goto _24
	}
	goto _20

_21:
	return float64(0)

_22:
	return Nz64

_23:
	return xpi

_24:
	return -xpi

_20:
_14:
_12:
	if _ix+uint32(67108864) >= _iy && _iy != uint32(0x7ff00000) {
		goto _25
	}

	if (_m & uint32(1)) != 0 {
		return float64(-xpi) / float64(2)
	}

	return xpi / float64(2)

_25:
	if _m&uint32(2) == 0 || _iy+uint32(67108864) >= _ix {
		goto _26
	}

	_z = float64(0)
	goto _27

_26:
	_z = Xatan(tls, Xfabs(tls, _y/_x))
_27:
	switch _m {
	case uint32(0):
		goto _29
	case uint32(1):
		goto _30
	case uint32(2):
		goto _31
	default:
		goto _32
	}
_29:
	return _z

_30:
	return -_z

_31:
	return xpi - float64(_z-xpi_lo)

_32:
	return float64(_z-xpi_lo) - xpi
	return r
}

type t337__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t337__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t37uint32_t = uint32

type t25uint64_t = uint64

// x__DOUBLE_BITS is defined at math.h:49:36
func x4__DOUBLE_BITS(tls TLS, ___f float64) (r uint64) {
	esc := MustMalloc(8)
	var ___u = esc // *struct{F__f [0]float64;F__i [0]uint64;F int64}
	defer Free(esc)
	*(*float64)(unsafe.Pointer(___u)) = ___f
	return *(*uint64)(unsafe.Pointer(___u))
}

// xpi float64, escapes: false, atan2.c:43:1
var xpi = float64(3.141592653589793)

// xpi_lo float64, escapes: false, atan2.c:44:1
var xpi_lo = float64(1.2246467991473532e-16)

// linking atan2f.o

// Xatan2f is defined at atan2f.c:22:7
func Xatan2f(tls TLS, _y float32, _x float32) (r float32) {
	esc := MustMalloc(20)
	var (
		_z    float32
		_m    uint32
		_ix   uint32
		_iy   uint32
		___u  = esc      // *struct{Ff [0]float32;Fi [0]uint32;F int32}
		_1__u = esc + 16 // *struct{Ff [0]float32;Fi [0]uint32;F int32}
	)
	defer Free(esc)
	if x3__FLOAT_BITS(tls, _x)&uint32(0x7fffffff) <= uint32(0x7f800000) && x3__FLOAT_BITS(tls, _y)&uint32(0x7fffffff) <= uint32(0x7f800000) {
		goto _1
	}

	return _x + _y

_1:
	*(*float32)(unsafe.Pointer(___u)) = _x
	_ix = *(*uint32)(unsafe.Pointer(___u))
	*(*float32)(unsafe.Pointer(_1__u)) = _y
	_iy = *(*uint32)(unsafe.Pointer(_1__u))
	if _ix != uint32(0x3f800000) {
		goto _4
	}

	return Xatanf(tls, _y)

_4:
	_m = _iy>>(uint(31)%32)&uint32(1) | _ix>>(uint(30)%32)&uint32(2)
	_ix = _ix & uint32(0x7fffffff)
	_iy = _iy & uint32(0x7fffffff)
	if _iy != uint32(0) {
		goto _5
	}

	switch _m {
	case uint32(0):
		goto _7
	case uint32(1):
		goto _8
	case uint32(2):
		goto _9
	case uint32(3):
		goto _10
	}
	goto _6

_7:
_8:
	return _y

_9:
	return x1pi

_10:
	return -x1pi

_6:
_5:
	if _ix != uint32(0) {
		goto _11
	}

	if (_m & uint32(1)) != 0 {
		return float32(-x1pi) / float32(2)
	}

	return x1pi / float32(2)

_11:
	if _ix != uint32(0x7f800000) {
		goto _12
	}

	if _iy != uint32(0x7f800000) {
		goto _13
	}

	switch _m {
	case uint32(0):
		goto _16
	case uint32(1):
		goto _17
	case uint32(2):
		goto _18
	case uint32(3):
		goto _19
	}
	goto _15

_16:
	return x1pi / float32(4)

_17:
	return float32(-x1pi) / float32(4)

_18:
	return float32(float32(3)*x1pi) / float32(4)

_19:
	return float32(float32(-3)*x1pi) / float32(4)

_15:
	goto _14

_13:
	switch _m {
	case uint32(0):
		goto _21
	case uint32(1):
		goto _22
	case uint32(2):
		goto _23
	case uint32(3):
		goto _24
	}
	goto _20

_21:
	return float32(0)

_22:
	return Nz32

_23:
	return x1pi

_24:
	return -x1pi

_20:
_14:
_12:
	if _ix+uint32(218103808) >= _iy && _iy != uint32(0x7f800000) {
		goto _25
	}

	if (_m & uint32(1)) != 0 {
		return float32(-x1pi) / float32(2)
	}

	return x1pi / float32(2)

_25:
	if _m&uint32(2) == 0 || _iy+uint32(218103808) >= _ix {
		goto _26
	}

	_z = float32(0)
	goto _27

_26:
	_z = Xatanf(tls, Xfabsf(tls, _y/_x))
_27:
	switch _m {
	case uint32(0):
		goto _29
	case uint32(1):
		goto _30
	case uint32(2):
		goto _31
	default:
		goto _32
	}
_29:
	return _z

_30:
	return -_z

_31:
	return x1pi - float32(_z-x1pi_lo)

_32:
	return float32(_z-x1pi_lo) - x1pi
	return r
}

type t338__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t338__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t38uint32_t = uint32

// x__FLOAT_BITS is defined at math.h:43:26
func x3__FLOAT_BITS(tls TLS, ___f float32) (r uint32) {
	esc := MustMalloc(4)
	var ___u = esc // *struct{F__f [0]float32;F__i [0]uint32;F int32}
	defer Free(esc)
	*(*float32)(unsafe.Pointer(___u)) = ___f
	return *(*uint32)(unsafe.Pointer(___u))
}

// xpi float32, escapes: false, atan2f.c:19:1
var x1pi = float32(3.1415927)

// xpi_lo float32, escapes: false, atan2f.c:20:1
var x1pi_lo = float32(-8.742278e-08)

// linking atan2l.o

// Xatan2l is defined at atan2l.c:21:13
func Xatan2l(tls TLS, _y float64, _x float64) (r float64) {
	return Xatan2(tls, _y, _x)
}

type t339__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t339__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// linking atanf.o

// Xatanf is defined at atanf.c:41:7
func Xatanf(tls TLS, _x float32) (r float32) {
	esc := MustMalloc(4)
	var (
		_w    float32
		_s1   float32
		_s2   float32
		_z    float32
		_ix   uint32
		_sign uint32
		_id   int32
		___u  = esc // *struct{Ff [0]float32;Fi [0]uint32;F int32}
		___x  float32
		_     = ___x
		_1__x float64
		_     = _1__x
		_2__x float64
		_     = _2__x
	)
	defer Free(esc)
	*(*float32)(unsafe.Pointer(___u)) = _x
	_ix = *(*uint32)(unsafe.Pointer(___u))
	_sign = _ix >> (uint(31) % 32)
	_ix = _ix & uint32(0x7fffffff)
	if _ix < uint32(0x4c800000) {
		goto _2
	}

	if x4__FLOAT_BITS(tls, _x)&uint32(0x7fffffff) <= uint32(0x7f800000) {
		goto _3
	}

	return _x

_3:
	_z = *(*float32)(unsafe.Pointer(x1atanhi + 12)) + float32(7.523164e-37)
	if _sign != 0 {
		return -_z
	}

	return _z

_2:
	if _ix >= uint32(0x3ee00000) {
		goto _4
	}

	if _ix >= uint32(0x39800000) {
		goto _6
	}

	if _ix >= uint32(0x800000) {
		goto _7
	}

	___x = _x * _x
	goto _9

	goto _10

	_1__x = float64(_x * _x)
	goto _11

_10:
	_2__x = float64(_x * _x)
_11:
_9:
_7:
	return _x

_6:
	_id = int32(-1)
	goto _5

_4:
	_x = Xfabsf(tls, _x)
	if _ix >= uint32(0x3f980000) {
		goto _12
	}

	if _ix >= uint32(0x3f300000) {
		goto _14
	}

	_id = int32(0)
	_x = float32(float32(float32(2)*_x)-float32(1)) / float32(float32(2)+_x)
	goto _15

_14:
	_id = int32(1)
	_x = float32(_x-float32(1)) / float32(_x+float32(1))
_15:
	goto _13

_12:
	if _ix >= uint32(0x401c0000) {
		goto _16
	}

	_id = int32(2)
	_x = float32(_x-float32(1.5)) / float32(float32(1)+float32(float32(1.5)*_x))
	goto _17

_16:
	_id = int32(3)
	_x = float32(-1) / _x
_17:
_13:
_5:
	_z = _x * _x
	_w = _z * _z
	_s1 = _z * float32(*(*float32)(unsafe.Pointer(x1aT))+float32(_w*float32(*(*float32)(unsafe.Pointer(x1aT + 8))+float32(_w**(*float32)(unsafe.Pointer(x1aT + 16))))))
	_s2 = _w * float32(*(*float32)(unsafe.Pointer(x1aT + 4))+float32(_w**(*float32)(unsafe.Pointer(x1aT + 12))))
	if _id >= int32(0) {
		goto _18
	}

	return _x - float32(_x*float32(_s1+_s2))

_18:
	_z = *(*float32)(unsafe.Pointer(x1atanhi + 4*uintptr(_id))) - float32(float32(float32(_x*float32(_s1+_s2))-*(*float32)(unsafe.Pointer(x1atanlo + 4*uintptr(_id))))-_x)
	if _sign != 0 {
		return -_z
	}

	return _z
}

type t340__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t340__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t2float_t = float32

type t39uint32_t = uint32

// x__FLOAT_BITS is defined at math.h:43:26
func x4__FLOAT_BITS(tls TLS, ___f float32) (r uint32) {
	esc := MustMalloc(4)
	var ___u = esc // *struct{F__f [0]float32;F__i [0]uint32;F int32}
	defer Free(esc)
	*(*float32)(unsafe.Pointer(___u)) = ___f
	return *(*uint32)(unsafe.Pointer(___u))
}

// xatanhi [4]float32, escapes: true, atanf.c:19:20
var x1atanhi = ds + 35392

// xaT [5]float32, escapes: true, atanf.c:33:20
var x1aT = ds + 35408

// xatanlo [4]float32, escapes: true, atanf.c:26:20
var x1atanlo = ds + 35432

// linking atanh.o

// Xatanh is defined at atanh.c:4:8
func Xatanh(tls TLS, _x float64) (r float64) {
	esc := MustMalloc(8)
	var (
		_u    = esc // *struct{Ff [0]float64;Fi [0]uint64;F int64}
		_e    uint32
		_s    uint32
		_y    float64
		___x  float32
		_     = ___x
		_1__x float64
		_     = _1__x
		_2__x float64
		_     = _2__x
	)
	defer Free(esc)
	*(*struct {
		Ff [0]float64
		Fi [0]uint64
		F  int64
	})(unsafe.Pointer(_u)) = *(*struct {
		Ff [0]float64
		Fi [0]uint64
		F  int64
	})(unsafe.Pointer(&struct{ f float64 }{_x}))
	_e = uint32(*(*uint64)(unsafe.Pointer(_u)) >> (uint(52) % 64) & uint64(0x7ff))
	_s = uint32(*(*uint64)(unsafe.Pointer(_u)) >> (uint(63) % 64))
	{
		p := (*uint64)(unsafe.Pointer(_u))
		*p = *p & uint64(9223372036854775807)
	}
	_y = *(*float64)(unsafe.Pointer(_u))
	if _e >= uint32(1022) {
		goto _1
	}

	if _e >= uint32(991) {
		goto _3
	}

	if _e != uint32(0) {
		goto _5
	}

	___x = float32(_y)
	goto _7

	goto _8

	_1__x = float64(float32(_y))
	goto _9

_8:
	_2__x = float64(float32(_y))
_9:
_7:
_5:
	goto _4

_3:
	_y = float64(0.5) * Xlog1p(tls, float64(float64(2)*_y)+float64(float64(float64(float64(2)*_y)*_y)/float64(float64(1)-_y)))
_4:
	goto _2

_1:
	_y = float64(0.5) * Xlog1p(tls, float64(2)*float64(_y/float64(float64(1)-_y)))
_2:
	if _s != 0 {
		return -_y
	}

	return _y
}

type t341__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t341__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t26uint64_t = uint64

type t11double_t = float64

// linking atanhf.o

// Xatanhf is defined at atanhf.c:4:7
func Xatanhf(tls TLS, _x float32) (r float32) {
	esc := MustMalloc(4)
	var (
		_u    = esc // *struct{Ff [0]float32;Fi [0]uint32;F int32}
		_s    uint32
		_y    float32
		___x  float32
		_     = ___x
		_1__x float64
		_     = _1__x
		_2__x float64
		_     = _2__x
	)
	defer Free(esc)
	*(*struct {
		Ff [0]float32
		Fi [0]uint32
		F  int32
	})(unsafe.Pointer(_u)) = *(*struct {
		Ff [0]float32
		Fi [0]uint32
		F  int32
	})(unsafe.Pointer(&struct{ f float32 }{_x}))
	_s = *(*uint32)(unsafe.Pointer(_u)) >> (uint(31) % 32)
	{
		p := (*uint32)(unsafe.Pointer(_u))
		*p = *p & uint32(0x7fffffff)
	}
	_y = *(*float32)(unsafe.Pointer(_u))
	if *(*uint32)(unsafe.Pointer(_u)) >= uint32(1056964608) {
		goto _1
	}

	if *(*uint32)(unsafe.Pointer(_u)) >= uint32(796917760) {
		goto _3
	}

	if *(*uint32)(unsafe.Pointer(_u)) >= uint32(8388608) {
		goto _5
	}

	___x = _y * _y
	goto _7

	goto _8

	_1__x = float64(_y * _y)
	goto _9

_8:
	_2__x = float64(_y * _y)
_9:
_7:
_5:
	goto _4

_3:
	_y = float32(0.5) * Xlog1pf(tls, float32(float32(2)*_y)+float32(float32(float32(float32(2)*_y)*_y)/float32(float32(1)-_y)))
_4:
	goto _2

_1:
	_y = float32(0.5) * Xlog1pf(tls, float32(2)*float32(_y/float32(float32(1)-_y)))
_2:
	if _s != 0 {
		return -_y
	}

	return _y
}

type t342__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t342__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t40uint32_t = uint32

type t3float_t = float32

// linking atanhl.o

// Xatanhl is defined at atanhl.c:4:13
func Xatanhl(tls TLS, _x float64) (r float64) {
	return Xatanh(tls, _x)
}

type t343__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t343__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// linking atanl.o

// Xatanl is defined at atanl.c:20:13
func Xatanl(tls TLS, _x float64) (r float64) {
	return Xatan(tls, _x)
}

type t344__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t344__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// linking cbrt.o

// Xcbrt is defined at cbrt.c:33:8
func Xcbrt(tls TLS, _x float64) (r float64) {
	esc := MustMalloc(8)
	var (
		_u  = esc // *struct{Ff [0]float64;Fi [0]uint64;F int64}
		_r  float64
		_s  float64
		_t  float64
		_w  float64
		_hx uint32
	)
	defer Free(esc)
	*(*struct {
		Ff [0]float64
		Fi [0]uint64
		F  int64
	})(unsafe.Pointer(_u)) = *(*struct {
		Ff [0]float64
		Fi [0]uint64
		F  int64
	})(unsafe.Pointer(&struct{ f float64 }{_x}))
	_hx = uint32(*(*uint64)(unsafe.Pointer(_u)) >> (uint(32) % 64) & uint64(0x7fffffff))
	if _hx < uint32(0x7ff00000) {
		goto _1
	}

	return _x + _x

_1:
	if _hx >= uint32(0x100000) {
		goto _2
	}

	*(*float64)(unsafe.Pointer(_u)) = _x * float64(1.8014398509481984e+16)
	_hx = uint32(*(*uint64)(unsafe.Pointer(_u)) >> (uint(32) % 64) & uint64(0x7fffffff))
	if _hx != uint32(0) {
		goto _4
	}

	return _x

_4:
	_hx = _hx/uint32(3) + xB2
	goto _3

_2:
	_hx = _hx/uint32(3) + xB1
_3:
	{
		p := (*uint64)(unsafe.Pointer(_u))
		*p = *p & uint64(9223372036854775808)
	}
	{
		p := (*uint64)(unsafe.Pointer(_u))
		*p = *p | uint64(_hx)<<(uint(32)%64)
	}
	_t = *(*float64)(unsafe.Pointer(_u))
	_r = float64(_t*_t) * float64(_t/_x)
	_t = _t * float64(float64(xP0+float64(_r*float64(xP1+float64(_r*xP2))))+float64(float64(float64(_r*_r)*_r)*float64(xP3+float64(_r*xP4))))
	*(*float64)(unsafe.Pointer(_u)) = _t
	*(*uint64)(unsafe.Pointer(_u)) = (*(*uint64)(unsafe.Pointer(_u)) + uint64(0x80000000)) & uint64(0xffffffffc0000000)
	_t = *(*float64)(unsafe.Pointer(_u))
	_s = _t * _t
	_r = _x / _s
	_w = _t + _t
	_r = float64(_r-_t) / float64(_w+_r)
	_t = _t + float64(_t*_r)
	return _t
}

type t345__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t345__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t27uint64_t = uint64

type t12double_t = float64

type t41uint32_t = uint32

// xB2 Tuint32_t = uint32, escapes: false, cbrt.c:23:1
var xB2 = uint32(696219795)

// xB1 Tuint32_t = uint32, escapes: false, cbrt.c:22:1
var xB1 = uint32(715094163)

// xP0 float64, escapes: false, cbrt.c:27:1
var xP0 = float64(1.87595182427177)

// xP1 float64, escapes: false, cbrt.c:28:1
var xP1 = float64(-1.8849797954337717)

// xP2 float64, escapes: false, cbrt.c:29:1
var xP2 = float64(1.6214297201053545)

// xP3 float64, escapes: false, cbrt.c:30:1
var xP3 = float64(-0.758397934778766)

// xP4 float64, escapes: false, cbrt.c:31:1
var xP4 = float64(0.14599619288661245)

// linking cbrtf.o

// Xcbrtf is defined at cbrtf.c:27:7
func Xcbrtf(tls TLS, _x float32) (r float32) {
	esc := MustMalloc(4)
	var (
		_r  float64
		_T  float64
		_u  = esc // *struct{Ff [0]float32;Fi [0]uint32;F int32}
		_hx uint32
	)
	defer Free(esc)
	*(*struct {
		Ff [0]float32
		Fi [0]uint32
		F  int32
	})(unsafe.Pointer(_u)) = *(*struct {
		Ff [0]float32
		Fi [0]uint32
		F  int32
	})(unsafe.Pointer(&struct{ f float32 }{_x}))
	_hx = *(*uint32)(unsafe.Pointer(_u)) & uint32(0x7fffffff)
	if _hx < uint32(0x7f800000) {
		goto _1
	}

	return _x + _x

_1:
	if _hx >= uint32(0x800000) {
		goto _2
	}

	if _hx != uint32(0) {
		goto _4
	}

	return _x

_4:
	*(*float32)(unsafe.Pointer(_u)) = _x * float32(1.6777216e+07)
	_hx = *(*uint32)(unsafe.Pointer(_u)) & uint32(0x7fffffff)
	_hx = _hx/uint32(3) + x1B2
	goto _3

_2:
	_hx = _hx/uint32(3) + x1B1
_3:
	{
		p := (*uint32)(unsafe.Pointer(_u))
		*p = *p & uint32(0x80000000)
	}
	{
		p := (*uint32)(unsafe.Pointer(_u))
		*p = *p | _hx
	}
	_T = float64(*(*float32)(unsafe.Pointer(_u)))
	_r = float64(_T*_T) * _T
	_T = float64(_T*float64(float64(float64(_x)+float64(_x))+_r)) / float64(float64(float64(_x)+_r)+_r)
	_r = float64(_T*_T) * _T
	_T = float64(_T*float64(float64(float64(_x)+float64(_x))+_r)) / float64(float64(float64(_x)+_r)+_r)
	return float32(_T)
}

type t346__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t346__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t13double_t = float64

type t42uint32_t = uint32

// xB2 uint32, escapes: false, cbrtf.c:25:1
var x1B2 = uint32(642849266)

// xB1 uint32, escapes: false, cbrtf.c:24:1
var x1B1 = uint32(709958130)

// linking cbrtl.o

// Xcbrtl is defined at cbrtl.c:21:13
func Xcbrtl(tls TLS, _x float64) (r float64) {
	return Xcbrt(tls, _x)
}

type t347__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t347__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// linking ceil.o

// Xceil is defined at ceil.c:10:8
func Xceil(tls TLS, _x float64) (r float64) {
	esc := MustMalloc(8)
	var (
		_u    = esc // *struct{Ff [0]float64;Fi [0]uint64;F int64}
		_e    int32
		_y    float64
		___x  float32
		_     = ___x
		_1__x float64
		_     = _1__x
		_2__x float64
		_     = _2__x
	)
	defer Free(esc)
	*(*struct {
		Ff [0]float64
		Fi [0]uint64
		F  int64
	})(unsafe.Pointer(_u)) = *(*struct {
		Ff [0]float64
		Fi [0]uint64
		F  int64
	})(unsafe.Pointer(&struct{ f float64 }{_x}))
	_e = int32(*(*uint64)(unsafe.Pointer(_u)) >> (uint(52) % 64) & uint64(0x7ff))
	if _e < int32(1075) && _x != float64(0) {
		goto _1
	}

	return _x

_1:
	if (*(*uint64)(unsafe.Pointer(_u)) >> (uint(63) % 64)) == 0 {
		goto _2
	}

	_y = float64(float64(_x-x2toint)+x2toint) - _x
	goto _3

_2:
	_y = float64(float64(_x+x2toint)-x2toint) - _x
_3:
	if _e > int32(1022) {
		goto _4
	}

	goto _6

	___x = float32(_y)
	goto _7

_6:
	_1__x = _y
	goto _8

	_2__x = _y
_8:
_7:
	if (*(*uint64)(unsafe.Pointer(_u)) >> (uint(63) % 64)) != 0 {
		return Nz64
	}

	return float64(1)

_4:
	if _y >= float64(0) {
		goto _9
	}

	return float64(_x+_y) + float64(1)

_9:
	return _x + _y
}

type t348__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t348__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t28uint64_t = uint64

type t14double_t = float64

// xtoint Tdouble_t = float64, escapes: false, ceil.c:8:23
var x2toint = float64(4.503599627370496e+15)

// linking ceilf.o

// Xceilf is defined at ceilf.c:3:7
func Xceilf(tls TLS, _x float32) (r float32) {
	esc := MustMalloc(4)
	var (
		_u    = esc // *struct{Ff [0]float32;Fi [0]uint32;F int32}
		_e    int32
		_m    uint32
		___x  float32
		_     = ___x
		_1__x float64
		_     = _1__x
		_2__x float64
		_     = _2__x
		_3__x float32
		_     = _3__x
		_4__x float64
		_     = _4__x
		_5__x float64
		_     = _5__x
	)
	defer Free(esc)
	*(*struct {
		Ff [0]float32
		Fi [0]uint32
		F  int32
	})(unsafe.Pointer(_u)) = *(*struct {
		Ff [0]float32
		Fi [0]uint32
		F  int32
	})(unsafe.Pointer(&struct{ f float32 }{_x}))
	_e = int32(*(*uint32)(unsafe.Pointer(_u))>>(uint(23)%32)&uint32(0xff)) - int32(0x7f)
	if _e < int32(23) {
		goto _1
	}

	return _x

_1:
	if _e < int32(0) {
		goto _2
	}

	_m = uint32(int32(0x7fffff) >> (uint(_e) % 32))
	if *(*uint32)(unsafe.Pointer(_u))&_m != uint32(0) {
		goto _4
	}

	return _x

_4:
	___x = _x + float32(1.329228e+36)
	goto _6

	goto _7

	_1__x = float64(_x + float32(1.329228e+36))
	goto _8

_7:
	_2__x = float64(_x + float32(1.329228e+36))
_8:
_6:
	if *(*uint32)(unsafe.Pointer(_u))>>(uint(31)%32) != uint32(0) {
		goto _9
	}

	{
		p := (*uint32)(unsafe.Pointer(_u))
		*p = *p + _m
	}
_9:
	{
		p := (*uint32)(unsafe.Pointer(_u))
		*p = *p & ^_m
	}
	goto _3

_2:
	_3__x = _x + float32(1.329228e+36)
	goto _11

	goto _12

	_4__x = float64(_x + float32(1.329228e+36))
	goto _13

_12:
	_5__x = float64(_x + float32(1.329228e+36))
_13:
_11:
	if (*(*uint32)(unsafe.Pointer(_u)) >> (uint(31) % 32)) == 0 {
		goto _14
	}

	*(*float32)(unsafe.Pointer(_u)) = Nz32
	goto _15

_14:
	if (*(*uint32)(unsafe.Pointer(_u)) << (uint(1) % 32)) == 0 {
		goto _16
	}

	*(*float32)(unsafe.Pointer(_u)) = float32(1)
_16:
_15:
_3:
	return *(*float32)(unsafe.Pointer(_u))
}

type t349__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t349__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t43uint32_t = uint32

// linking ceill.o

// Xceill is defined at ceill.c:4:13
func Xceill(tls TLS, _x float64) (r float64) {
	return Xceil(tls, _x)
}

type t350__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t350__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// linking copysign.o

// Xcopysign is defined at copysign.c:4:8
func Xcopysign(tls TLS, _x float64, _y float64) (r float64) {
	esc := MustMalloc(24)
	var (
		_ux = esc      // *struct{Ff [0]float64;Fi [0]uint64;F int64}
		_uy = esc + 16 // *struct{Ff [0]float64;Fi [0]uint64;F int64}
	)
	defer Free(esc)
	*(*struct {
		Ff [0]float64
		Fi [0]uint64
		F  int64
	})(unsafe.Pointer(_ux)) = *(*struct {
		Ff [0]float64
		Fi [0]uint64
		F  int64
	})(unsafe.Pointer(&struct{ f float64 }{_x}))
	*(*struct {
		Ff [0]float64
		Fi [0]uint64
		F  int64
	})(unsafe.Pointer(_uy)) = *(*struct {
		Ff [0]float64
		Fi [0]uint64
		F  int64
	})(unsafe.Pointer(&struct{ f float64 }{_y}))
	{
		p := (*uint64)(unsafe.Pointer(_ux))
		*p = *p & uint64(9223372036854775807)
	}
	{
		p := (*uint64)(unsafe.Pointer(_ux))
		*p = *p | *(*uint64)(unsafe.Pointer(_uy))&uint64(9223372036854775808)
	}
	return *(*float64)(unsafe.Pointer(_ux))
}

type t351__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t351__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t29uint64_t = uint64

// linking copysignf.o

// Xcopysignf is defined at copysignf.c:4:7
func Xcopysignf(tls TLS, _x float32, _y float32) (r float32) {
	esc := MustMalloc(20)
	var (
		_ux = esc      // *struct{Ff [0]float32;Fi [0]uint32;F int32}
		_uy = esc + 16 // *struct{Ff [0]float32;Fi [0]uint32;F int32}
	)
	defer Free(esc)
	*(*struct {
		Ff [0]float32
		Fi [0]uint32
		F  int32
	})(unsafe.Pointer(_ux)) = *(*struct {
		Ff [0]float32
		Fi [0]uint32
		F  int32
	})(unsafe.Pointer(&struct{ f float32 }{_x}))
	*(*struct {
		Ff [0]float32
		Fi [0]uint32
		F  int32
	})(unsafe.Pointer(_uy)) = *(*struct {
		Ff [0]float32
		Fi [0]uint32
		F  int32
	})(unsafe.Pointer(&struct{ f float32 }{_y}))
	{
		p := (*uint32)(unsafe.Pointer(_ux))
		*p = *p & uint32(0x7fffffff)
	}
	{
		p := (*uint32)(unsafe.Pointer(_ux))
		*p = *p | *(*uint32)(unsafe.Pointer(_uy))&uint32(0x80000000)
	}
	return *(*float32)(unsafe.Pointer(_ux))
}

type t352__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t352__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t44uint32_t = uint32

// linking copysignl.o

// Xcopysignl is defined at copysignl.c:4:13
func Xcopysignl(tls TLS, _x float64, _y float64) (r float64) {
	return Xcopysign(tls, _x, _y)
}

type t353__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t353__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// linking cos.o

// Xcos is defined at cos.c:45:8
func Xcos(tls TLS, _x float64) (r float64) {
	esc := MustMalloc(24)
	var (
		_y    = esc // *[2]float64
		_ix   uint32
		_n    uint32
		___u  = esc + 16 // *struct{Ff [0]float64;Fi [0]uint64;F int64}
		___x  float32
		_     = ___x
		_1__x float64
		_     = _1__x
		_2__x float64
		_     = _2__x
	)
	defer Free(esc)
	*(*float64)(unsafe.Pointer(___u)) = _x
	_ix = uint32(*(*uint64)(unsafe.Pointer(___u)) >> (uint(32) % 64))
	_ix = _ix & uint32(0x7fffffff)
	if _ix > uint32(0x3fe921fb) {
		goto _2
	}

	if _ix >= uint32(0x3e46a09e) {
		goto _3
	}

	goto _5

	___x = float32(_x + float64(1.329227995784916e+36))
	goto _6

_5:
	_1__x = _x + float64(1.329227995784916e+36)
	goto _7

	_2__x = _x + float64(1.329227995784916e+36)
_7:
_6:
	return float64(1)

_3:
	return X__cos(tls, _x, float64(0))

_2:
	if _ix < uint32(0x7ff00000) {
		goto _8
	}

	return _x - _x

_8:
	_n = uint32(X__rem_pio2(tls, _x, _y))
	switch _n & uint32(3) {
	case uint32(0):
		goto _10
	case uint32(1):
		goto _11
	case uint32(2):
		goto _12
	default:
		goto _13
	}
_10:
	return X__cos(tls, *(*float64)(unsafe.Pointer(_y)), *(*float64)(unsafe.Pointer(_y + 8)))

_11:
	return -X__sin(tls, *(*float64)(unsafe.Pointer(_y)), *(*float64)(unsafe.Pointer(_y + 8)), int32(1))

_12:
	return -X__cos(tls, *(*float64)(unsafe.Pointer(_y)), *(*float64)(unsafe.Pointer(_y + 8)))

_13:
	return X__sin(tls, *(*float64)(unsafe.Pointer(_y)), *(*float64)(unsafe.Pointer(_y + 8)), int32(1))
	return r
}

type t354__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t354__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t45uint32_t = uint32

type t30uint64_t = uint64

// linking cosf.o

// Xcosf is defined at cosf.c:26:7
func Xcosf(tls TLS, _x float32) (r float32) {
	esc := MustMalloc(20)
	var (
		_y    = esc // *float64
		_ix   uint32
		_n    uint32
		_sign uint32
		___u  = esc + 16 // *struct{Ff [0]float32;Fi [0]uint32;F int32}
		___x  float32
		_     = ___x
		_1__x float64
		_     = _1__x
		_2__x float64
		_     = _2__x
	)
	defer Free(esc)
	*(*float32)(unsafe.Pointer(___u)) = _x
	_ix = *(*uint32)(unsafe.Pointer(___u))
	_sign = _ix >> (uint(31) % 32)
	_ix = _ix & uint32(0x7fffffff)
	if _ix > uint32(0x3f490fda) {
		goto _2
	}

	if _ix >= uint32(0x39800000) {
		goto _3
	}

	___x = _x + float32(1.329228e+36)
	goto _5

	goto _6

	_1__x = float64(_x + float32(1.329228e+36))
	goto _7

_6:
	_2__x = float64(_x + float32(1.329228e+36))
_7:
_5:
	return float32(1)

_3:
	return X__cosdf(tls, float64(_x))

_2:
	if _ix > uint32(0x407b53d1) {
		goto _8
	}

	if _ix <= uint32(0x4016cbe3) {
		goto _9
	}

	return -X__cosdf(tls, func() float64 {
		if _sign != 0 {
			return float64(_x) + xc2pio2
		}
		return float64(_x) - xc2pio2
	}())

	goto _10

_9:
	if _sign == 0 {
		goto _11
	}

	return X__sindf(tls, float64(_x)+xc1pio2)

	goto _12

_11:
	return X__sindf(tls, xc1pio2-float64(_x))

_12:
_10:
_8:
	if _ix > uint32(0x40e231d5) {
		goto _13
	}

	if _ix <= uint32(0x40afeddf) {
		goto _14
	}

	return X__cosdf(tls, func() float64 {
		if _sign != 0 {
			return float64(_x) + xc4pio2
		}
		return float64(_x) - xc4pio2
	}())

	goto _15

_14:
	if _sign == 0 {
		goto _16
	}

	return X__sindf(tls, float64(-_x)-xc3pio2)

	goto _17

_16:
	return X__sindf(tls, float64(_x)-xc3pio2)

_17:
_15:
_13:
	if _ix < uint32(0x7f800000) {
		goto _18
	}

	return _x - _x

_18:
	_n = uint32(X__rem_pio2f(tls, _x, _y))
	switch _n & uint32(3) {
	case uint32(0):
		goto _20
	case uint32(1):
		goto _21
	case uint32(2):
		goto _22
	default:
		goto _23
	}
_20:
	return X__cosdf(tls, *(*float64)(unsafe.Pointer(_y)))

_21:
	return X__sindf(tls, -*(*float64)(unsafe.Pointer(_y)))

_22:
	return -X__cosdf(tls, *(*float64)(unsafe.Pointer(_y)))

_23:
	return X__sindf(tls, *(*float64)(unsafe.Pointer(_y)))
	return r
}

type t355__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t355__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t46uint32_t = uint32

// xc2pio2 float64, escapes: false, cosf.c:22:1
var xc2pio2 = float64(3.141592653589793)

// xc1pio2 float64, escapes: false, cosf.c:21:1
var xc1pio2 = float64(1.5707963267948966)

// xc4pio2 float64, escapes: false, cosf.c:24:1
var xc4pio2 = float64(6.283185307179586)

// xc3pio2 float64, escapes: false, cosf.c:23:1
var xc3pio2 = float64(4.71238898038469)

// linking cosh.o

// Xcosh is defined at cosh.c:7:8
func Xcosh(tls TLS, _x float64) (r float64) {
	esc := MustMalloc(8)
	var (
		_u    = esc // *struct{Ff [0]float64;Fi [0]uint64;F int64}
		_w    uint32
		_t    float64
		___x  float32
		_     = ___x
		_1__x float64
		_     = _1__x
		_2__x float64
		_     = _2__x
	)
	defer Free(esc)
	*(*struct {
		Ff [0]float64
		Fi [0]uint64
		F  int64
	})(unsafe.Pointer(_u)) = *(*struct {
		Ff [0]float64
		Fi [0]uint64
		F  int64
	})(unsafe.Pointer(&struct{ f float64 }{_x}))
	{
		p := (*uint64)(unsafe.Pointer(_u))
		*p = *p & uint64(9223372036854775807)
	}
	_x = *(*float64)(unsafe.Pointer(_u))
	_w = uint32(*(*uint64)(unsafe.Pointer(_u)) >> (uint(32) % 64))
	if _w >= uint32(0x3fe62e42) {
		goto _1
	}

	if _w >= uint32(1045430272) {
		goto _2
	}

	goto _4

	___x = float32(_x + float64(1.329227995784916e+36))
	goto _5

_4:
	_1__x = _x + float64(1.329227995784916e+36)
	goto _6

	_2__x = _x + float64(1.329227995784916e+36)
_6:
_5:
	return float64(1)

_2:
	_t = Xexpm1(tls, _x)
	return float64(1) + float64(float64(_t*_t)/float64(float64(2)*float64(float64(1)+_t)))

_1:
	if _w >= uint32(0x40862e42) {
		goto _7
	}

	_t = Xexp(tls, _x)
	return float64(0.5) * float64(_t+float64(float64(1)/_t))

_7:
	_t = X__expo2(tls, _x)
	return _t
}

type t356__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t356__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t31uint64_t = uint64

type t47uint32_t = uint32

// linking coshf.o

// Xcoshf is defined at coshf.c:3:7
func Xcoshf(tls TLS, _x float32) (r float32) {
	esc := MustMalloc(4)
	var (
		_u    = esc // *struct{Ff [0]float32;Fi [0]uint32;F int32}
		_w    uint32
		_t    float32
		___x  float32
		_     = ___x
		_1__x float64
		_     = _1__x
		_2__x float64
		_     = _2__x
	)
	defer Free(esc)
	*(*struct {
		Ff [0]float32
		Fi [0]uint32
		F  int32
	})(unsafe.Pointer(_u)) = *(*struct {
		Ff [0]float32
		Fi [0]uint32
		F  int32
	})(unsafe.Pointer(&struct{ f float32 }{_x}))
	{
		p := (*uint32)(unsafe.Pointer(_u))
		*p = *p & uint32(0x7fffffff)
	}
	_x = *(*float32)(unsafe.Pointer(_u))
	_w = *(*uint32)(unsafe.Pointer(_u))
	if _w >= uint32(0x3f317217) {
		goto _1
	}

	if _w >= uint32(964689920) {
		goto _2
	}

	___x = _x + float32(1.329228e+36)
	goto _4

	goto _5

	_1__x = float64(_x + float32(1.329228e+36))
	goto _6

_5:
	_2__x = float64(_x + float32(1.329228e+36))
_6:
_4:
	return float32(1)

_2:
	_t = Xexpm1f(tls, _x)
	return float32(1) + float32(float32(_t*_t)/float32(float32(2)*float32(float32(1)+_t)))

_1:
	if _w >= uint32(0x42b17217) {
		goto _7
	}

	_t = Xexpf(tls, _x)
	return float32(0.5) * float32(_t+float32(float32(1)/_t))

_7:
	_t = X__expo2f(tls, _x)
	return _t
}

type t357__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t357__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t48uint32_t = uint32

// linking coshl.o

// Xcoshl is defined at coshl.c:4:13
func Xcoshl(tls TLS, _x float64) (r float64) {
	return Xcosh(tls, _x)
}

type t358__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t358__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// linking cosl.o

// Xcosl is defined at cosl.c:4:13
func Xcosl(tls TLS, _x float64) (r float64) {
	return Xcos(tls, _x)
}

type t359__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t359__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// linking erf.o

// Xerf is defined at erf.c:213:8
func Xerf(tls TLS, _x float64) (r float64) {
	esc := MustMalloc(8)
	var (
		_r    float64
		_s    float64
		_z    float64
		_y    float64
		_ix   uint32
		_sign int32
		___u  = esc // *struct{Ff [0]float64;Fi [0]uint64;F int64}
	)
	defer Free(esc)
	*(*float64)(unsafe.Pointer(___u)) = _x
	_ix = uint32(*(*uint64)(unsafe.Pointer(___u)) >> (uint(32) % 64))
	_sign = int32(_ix >> (uint(31) % 32))
	_ix = _ix & uint32(0x7fffffff)
	if _ix < uint32(0x7ff00000) {
		goto _2
	}

	return float64(int32(1)-int32(2)*_sign) + float64(float64(1)/_x)

_2:
	if _ix >= uint32(0x3feb0000) {
		goto _3
	}

	if _ix >= uint32(0x3e300000) {
		goto _4
	}

	return float64(0.125) * float64(float64(float64(8)*_x)+float64(xefx8*_x))

_4:
	_z = _x * _x
	_r = xpp0 + float64(_z*float64(xpp1+float64(_z*float64(xpp2+float64(_z*float64(xpp3+float64(_z*xpp4)))))))
	_s = float64(1) + float64(_z*float64(xqq1+float64(_z*float64(xqq2+float64(_z*float64(xqq3+float64(_z*float64(xqq4+float64(_z*xqq5)))))))))
	_y = _r / _s
	return _x + float64(_x*_y)

_3:
	if _ix >= uint32(0x40180000) {
		goto _5
	}

	_y = float64(1) - xerfc2(tls, _ix, _x)
	goto _6

_5:
	_y = float64(1)
_6:
	if _sign != 0 {
		return -_y
	}

	return _y
}

// Xerfc is defined at erf.c:244:8
func Xerfc(tls TLS, _x float64) (r float64) {
	esc := MustMalloc(8)
	var (
		_r    float64
		_s    float64
		_z    float64
		_y    float64
		_ix   uint32
		_sign int32
		___u  = esc // *struct{Ff [0]float64;Fi [0]uint64;F int64}
	)
	defer Free(esc)
	*(*float64)(unsafe.Pointer(___u)) = _x
	_ix = uint32(*(*uint64)(unsafe.Pointer(___u)) >> (uint(32) % 64))
	_sign = int32(_ix >> (uint(31) % 32))
	_ix = _ix & uint32(0x7fffffff)
	if _ix < uint32(0x7ff00000) {
		goto _2
	}

	return float64(int32(2)*_sign) + float64(float64(1)/_x)

_2:
	if _ix >= uint32(0x3feb0000) {
		goto _3
	}

	if _ix >= uint32(0x3c700000) {
		goto _4
	}

	return float64(1) - _x

_4:
	_z = _x * _x
	_r = xpp0 + float64(_z*float64(xpp1+float64(_z*float64(xpp2+float64(_z*float64(xpp3+float64(_z*xpp4)))))))
	_s = float64(1) + float64(_z*float64(xqq1+float64(_z*float64(xqq2+float64(_z*float64(xqq3+float64(_z*float64(xqq4+float64(_z*xqq5)))))))))
	_y = _r / _s
	if _sign == 0 && _ix >= uint32(0x3fd00000) {
		goto _5
	}

	return float64(1) - float64(_x+float64(_x*_y))

_5:
	return float64(0.5) - float64(float64(_x-float64(0.5))+float64(_x*_y))

_3:
	if _ix >= uint32(0x403c0000) {
		goto _6
	}

	if _sign != 0 {
		return float64(2) - xerfc2(tls, _ix, _x)
	}

	return xerfc2(tls, _ix, _x)

_6:
	if _sign != 0 {
		return float64(2)
	}

	return float64(0)
}

type t360__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t360__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t49uint32_t = uint32

type t32uint64_t = uint64

// xefx8 float64, escapes: false, erf.c:113:1
var xefx8 = float64(1.0270333367641007)

// xpp0 float64, escapes: false, erf.c:114:1
var xpp0 = float64(0.12837916709551256)

// xpp1 float64, escapes: false, erf.c:115:1
var xpp1 = float64(-0.3250421072470015)

// xpp2 float64, escapes: false, erf.c:116:1
var xpp2 = float64(-0.02848174957559851)

// xpp3 float64, escapes: false, erf.c:117:1
var xpp3 = float64(-0.005770270296489442)

// xpp4 float64, escapes: false, erf.c:118:1
var xpp4 = float64(-2.3763016656650163e-05)

// xqq1 float64, escapes: false, erf.c:119:1
var xqq1 = float64(0.39791722395915535)

// xqq2 float64, escapes: false, erf.c:120:1
var xqq2 = float64(0.0650222499887673)

// xqq3 float64, escapes: false, erf.c:121:1
var xqq3 = float64(0.005081306281875766)

// xqq4 float64, escapes: false, erf.c:122:1
var xqq4 = float64(0.00013249473800432164)

// xqq5 float64, escapes: false, erf.c:123:1
var xqq5 = float64(-3.960228278775368e-06)

// xerfc2 is defined at erf.c:187:15
func xerfc2(tls TLS, _ix uint32, _x float64) (r float64) {
	esc := MustMalloc(8)
	var (
		_s   float64
		_R   float64
		_S   float64
		_z   float64
		___u = esc // *struct{Ff [0]float64;Fi [0]uint64;F int64}
	)
	defer Free(esc)
	if _ix >= uint32(0x3ff40000) {
		goto _1
	}

	return xerfc1(tls, _x)

_1:
	_x = Xfabs(tls, _x)
	_s = float64(1) / float64(_x*_x)
	if _ix >= uint32(0x4006db6d) {
		goto _2
	}

	_R = xra0 + float64(_s*float64(xra1+float64(_s*float64(xra2+float64(_s*float64(xra3+float64(_s*float64(xra4+float64(_s*float64(xra5+float64(_s*float64(xra6+float64(_s*xra7)))))))))))))
	_S = float64(1) + float64(_s*float64(xsa1+float64(_s*float64(xsa2+float64(_s*float64(xsa3+float64(_s*float64(xsa4+float64(_s*float64(xsa5+float64(_s*float64(xsa6+float64(_s*float64(xsa7+float64(_s*xsa8)))))))))))))))
	goto _3

_2:
	_R = xrb0 + float64(_s*float64(xrb1+float64(_s*float64(xrb2+float64(_s*float64(xrb3+float64(_s*float64(xrb4+float64(_s*float64(xrb5+float64(_s*xrb6)))))))))))
	_S = float64(1) + float64(_s*float64(xsb1+float64(_s*float64(xsb2+float64(_s*float64(xsb3+float64(_s*float64(xsb4+float64(_s*float64(xsb5+float64(_s*float64(xsb6+float64(_s*xsb7)))))))))))))
_3:
	_z = _x
	*(*float64)(unsafe.Pointer(___u)) = _z
	{
		p := (*uint64)(unsafe.Pointer(___u))
		*p = *p & uint64(0xffffffff00000000)
	}
	{
		p := (*uint64)(unsafe.Pointer(___u))
		*p = *p | uint64(0)
	}
	_z = *(*float64)(unsafe.Pointer(___u))
	return float64(Xexp(tls, float64(float64(-_z)*_z)-float64(0.5625))*Xexp(tls, float64(float64(_z-_x)*float64(_z+_x))+float64(_R/_S))) / _x
}

type t15double_t = float64

// xerfc1 is defined at erf.c:177:15
func xerfc1(tls TLS, _x float64) (r float64) {
	var (
		_s float64
		_P float64
		_Q float64
	)
	_s = Xfabs(tls, _x) - float64(1)
	_P = xpa0 + float64(_s*float64(xpa1+float64(_s*float64(xpa2+float64(_s*float64(xpa3+float64(_s*float64(xpa4+float64(_s*float64(xpa5+float64(_s*xpa6)))))))))))
	_Q = float64(1) + float64(_s*float64(xqa1+float64(_s*float64(xqa2+float64(_s*float64(xqa3+float64(_s*float64(xqa4+float64(_s*float64(xqa5+float64(_s*xqa6)))))))))))
	return float64(float64(1)-xerx) - float64(_P/_Q)
}

// xra0 float64, escapes: false, erf.c:143:1
var xra0 = float64(-0.009864944034847148)

// xra1 float64, escapes: false, erf.c:144:1
var xra1 = float64(-0.6938585727071818)

// xra2 float64, escapes: false, erf.c:145:1
var xra2 = float64(-10.558626225323291)

// xra3 float64, escapes: false, erf.c:146:1
var xra3 = float64(-62.375332450326006)

// xra4 float64, escapes: false, erf.c:147:1
var xra4 = float64(-162.39666946257347)

// xra5 float64, escapes: false, erf.c:148:1
var xra5 = float64(-184.60509290671104)

// xra6 float64, escapes: false, erf.c:149:1
var xra6 = float64(-81.2874355063066)

// xra7 float64, escapes: false, erf.c:150:1
var xra7 = float64(-9.814329344169145)

// xsa1 float64, escapes: false, erf.c:151:1
var xsa1 = float64(19.651271667439257)

// xsa2 float64, escapes: false, erf.c:152:1
var xsa2 = float64(137.65775414351904)

// xsa3 float64, escapes: false, erf.c:153:1
var xsa3 = float64(434.56587747522923)

// xsa4 float64, escapes: false, erf.c:154:1
var xsa4 = float64(645.3872717332679)

// xsa5 float64, escapes: false, erf.c:155:1
var xsa5 = float64(429.00814002756783)

// xsa6 float64, escapes: false, erf.c:156:1
var xsa6 = float64(108.63500554177944)

// xsa7 float64, escapes: false, erf.c:157:1
var xsa7 = float64(6.570249770319282)

// xsa8 float64, escapes: false, erf.c:158:1
var xsa8 = float64(-0.0604244152148581)

// xrb0 float64, escapes: false, erf.c:162:1
var xrb0 = float64(-0.0098649429247001)

// xrb1 float64, escapes: false, erf.c:163:1
var xrb1 = float64(-0.799283237680523)

// xrb2 float64, escapes: false, erf.c:164:1
var xrb2 = float64(-17.757954917754752)

// xrb3 float64, escapes: false, erf.c:165:1
var xrb3 = float64(-160.63638485582192)

// xrb4 float64, escapes: false, erf.c:166:1
var xrb4 = float64(-637.5664433683896)

// xrb5 float64, escapes: false, erf.c:167:1
var xrb5 = float64(-1025.0951316110772)

// xrb6 float64, escapes: false, erf.c:168:1
var xrb6 = float64(-483.5191916086514)

// xsb1 float64, escapes: false, erf.c:169:1
var xsb1 = float64(30.33806074348246)

// xsb2 float64, escapes: false, erf.c:170:1
var xsb2 = float64(325.7925129965739)

// xsb3 float64, escapes: false, erf.c:171:1
var xsb3 = float64(1536.729586084437)

// xsb4 float64, escapes: false, erf.c:172:1
var xsb4 = float64(3199.8582195085955)

// xsb5 float64, escapes: false, erf.c:173:1
var xsb5 = float64(2553.0504064331644)

// xsb6 float64, escapes: false, erf.c:174:1
var xsb6 = float64(474.52854120695537)

// xsb7 float64, escapes: false, erf.c:175:1
var xsb7 = float64(-22.44095244658582)

// xpa0 float64, escapes: false, erf.c:127:1
var xpa0 = float64(-0.0023621185607526594)

// xpa1 float64, escapes: false, erf.c:128:1
var xpa1 = float64(0.41485611868374833)

// xpa2 float64, escapes: false, erf.c:129:1
var xpa2 = float64(-0.3722078760357013)

// xpa3 float64, escapes: false, erf.c:130:1
var xpa3 = float64(0.31834661990116175)

// xpa4 float64, escapes: false, erf.c:131:1
var xpa4 = float64(-0.11089469428239668)

// xpa5 float64, escapes: false, erf.c:132:1
var xpa5 = float64(0.035478304325618236)

// xpa6 float64, escapes: false, erf.c:133:1
var xpa6 = float64(-0.002166375594868791)

// xqa1 float64, escapes: false, erf.c:134:1
var xqa1 = float64(0.10642088040084423)

// xqa2 float64, escapes: false, erf.c:135:1
var xqa2 = float64(0.540397917702171)

// xqa3 float64, escapes: false, erf.c:136:1
var xqa3 = float64(0.07182865441419627)

// xqa4 float64, escapes: false, erf.c:137:1
var xqa4 = float64(0.12617121980876164)

// xqa5 float64, escapes: false, erf.c:138:1
var xqa5 = float64(0.01363708391202905)

// xqa6 float64, escapes: false, erf.c:139:1
var xqa6 = float64(0.011984499846799107)

// xerx float64, escapes: false, erf.c:109:1
var xerx = float64(0.8450629115104675)

// linking erff.o

// Xerff is defined at erff.c:123:7
func Xerff(tls TLS, _x float32) (r float32) {
	esc := MustMalloc(4)
	var (
		_r    float32
		_s    float32
		_z    float32
		_y    float32
		_ix   uint32
		_sign int32
		___u  = esc // *struct{Ff [0]float32;Fi [0]uint32;F int32}
	)
	defer Free(esc)
	*(*float32)(unsafe.Pointer(___u)) = _x
	_ix = *(*uint32)(unsafe.Pointer(___u))
	_sign = int32(_ix >> (uint(31) % 32))
	_ix = _ix & uint32(0x7fffffff)
	if _ix < uint32(0x7f800000) {
		goto _2
	}

	return float32(int32(1)-int32(2)*_sign) + float32(float32(1)/_x)

_2:
	if _ix >= uint32(0x3f580000) {
		goto _3
	}

	if _ix >= uint32(0x31800000) {
		goto _4
	}

	return float32(0.125) * float32(float32(float32(8)*_x)+float32(x1efx8*_x))

_4:
	_z = _x * _x
	_r = x1pp0 + float32(_z*float32(x1pp1+float32(_z*float32(x1pp2+float32(_z*float32(x1pp3+float32(_z*x1pp4)))))))
	_s = float32(1) + float32(_z*float32(x1qq1+float32(_z*float32(x1qq2+float32(_z*float32(x1qq3+float32(_z*float32(x1qq4+float32(_z*x1qq5)))))))))
	_y = _r / _s
	return _x + float32(_x*_y)

_3:
	if _ix >= uint32(0x40c00000) {
		goto _5
	}

	_y = float32(1) - x1erfc2(tls, _ix, _x)
	goto _6

_5:
	_y = float32(1)
_6:
	if _sign != 0 {
		return -_y
	}

	return _y
}

// Xerfcf is defined at erff.c:154:7
func Xerfcf(tls TLS, _x float32) (r float32) {
	esc := MustMalloc(4)
	var (
		_r    float32
		_s    float32
		_z    float32
		_y    float32
		_ix   uint32
		_sign int32
		___u  = esc // *struct{Ff [0]float32;Fi [0]uint32;F int32}
	)
	defer Free(esc)
	*(*float32)(unsafe.Pointer(___u)) = _x
	_ix = *(*uint32)(unsafe.Pointer(___u))
	_sign = int32(_ix >> (uint(31) % 32))
	_ix = _ix & uint32(0x7fffffff)
	if _ix < uint32(0x7f800000) {
		goto _2
	}

	return float32(int32(2)*_sign) + float32(float32(1)/_x)

_2:
	if _ix >= uint32(0x3f580000) {
		goto _3
	}

	if _ix >= uint32(0x23800000) {
		goto _4
	}

	return float32(1) - _x

_4:
	_z = _x * _x
	_r = x1pp0 + float32(_z*float32(x1pp1+float32(_z*float32(x1pp2+float32(_z*float32(x1pp3+float32(_z*x1pp4)))))))
	_s = float32(1) + float32(_z*float32(x1qq1+float32(_z*float32(x1qq2+float32(_z*float32(x1qq3+float32(_z*float32(x1qq4+float32(_z*x1qq5)))))))))
	_y = _r / _s
	if _sign == 0 && _ix >= uint32(0x3e800000) {
		goto _5
	}

	return float32(1) - float32(_x+float32(_x*_y))

_5:
	return float32(0.5) - float32(float32(_x-float32(0.5))+float32(_x*_y))

_3:
	if _ix >= uint32(0x41e00000) {
		goto _6
	}

	if _sign != 0 {
		return float32(2) - x1erfc2(tls, _ix, _x)
	}

	return x1erfc2(tls, _ix, _x)

_6:
	if _sign != 0 {
		return float32(2)
	}

	return float32(0)
}

type t361__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t361__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t50uint32_t = uint32

// xefx8 float32, escapes: false, erff.c:23:1
var x1efx8 = float32(1.0270333)

// xpp0 float32, escapes: false, erff.c:24:1
var x1pp0 = float32(0.12837917)

// xpp1 float32, escapes: false, erff.c:25:1
var x1pp1 = float32(-0.3250421)

// xpp2 float32, escapes: false, erff.c:26:1
var x1pp2 = float32(-0.02848175)

// xpp3 float32, escapes: false, erff.c:27:1
var x1pp3 = float32(-0.0057702702)

// xpp4 float32, escapes: false, erff.c:28:1
var x1pp4 = float32(-2.3763017e-05)

// xqq1 float32, escapes: false, erff.c:29:1
var x1qq1 = float32(0.3979172)

// xqq2 float32, escapes: false, erff.c:30:1
var x1qq2 = float32(0.06502225)

// xqq3 float32, escapes: false, erff.c:31:1
var x1qq3 = float32(0.005081306)

// xqq4 float32, escapes: false, erff.c:32:1
var x1qq4 = float32(0.00013249474)

// xqq5 float32, escapes: false, erff.c:33:1
var x1qq5 = float32(-3.9602282e-06)

// xerfc2 is defined at erff.c:97:14
func x1erfc2(tls TLS, _ix uint32, _x float32) (r float32) {
	esc := MustMalloc(20)
	var (
		_s    float32
		_R    float32
		_S    float32
		_z    float32
		___u  = esc      // *struct{Ff [0]float32;Fi [0]uint32;F int32}
		_1__u = esc + 16 // *struct{Ff [0]float32;Fi [0]uint32;F int32}
	)
	defer Free(esc)
	if _ix >= uint32(0x3fa00000) {
		goto _1
	}

	return x1erfc1(tls, _x)

_1:
	_x = Xfabsf(tls, _x)
	_s = float32(1) / float32(_x*_x)
	if _ix >= uint32(0x4036db6d) {
		goto _2
	}

	_R = x1ra0 + float32(_s*float32(x1ra1+float32(_s*float32(x1ra2+float32(_s*float32(x1ra3+float32(_s*float32(x1ra4+float32(_s*float32(x1ra5+float32(_s*float32(x1ra6+float32(_s*x1ra7)))))))))))))
	_S = float32(1) + float32(_s*float32(x1sa1+float32(_s*float32(x1sa2+float32(_s*float32(x1sa3+float32(_s*float32(x1sa4+float32(_s*float32(x1sa5+float32(_s*float32(x1sa6+float32(_s*float32(x1sa7+float32(_s*x1sa8)))))))))))))))
	goto _3

_2:
	_R = x1rb0 + float32(_s*float32(x1rb1+float32(_s*float32(x1rb2+float32(_s*float32(x1rb3+float32(_s*float32(x1rb4+float32(_s*float32(x1rb5+float32(_s*x1rb6)))))))))))
	_S = float32(1) + float32(_s*float32(x1sb1+float32(_s*float32(x1sb2+float32(_s*float32(x1sb3+float32(_s*float32(x1sb4+float32(_s*float32(x1sb5+float32(_s*float32(x1sb6+float32(_s*x1sb7)))))))))))))
_3:
	*(*float32)(unsafe.Pointer(___u)) = _x
	_ix = *(*uint32)(unsafe.Pointer(___u))
	*(*uint32)(unsafe.Pointer(_1__u)) = _ix & uint32(0xffffe000)
	_z = *(*float32)(unsafe.Pointer(_1__u))
	return float32(Xexpf(tls, float32(float32(-_z)*_z)-float32(0.5625))*Xexpf(tls, float32(float32(_z-_x)*float32(_z+_x))+float32(_R/_S))) / _x
}

type t4float_t = float32

// xerfc1 is defined at erff.c:87:14
func x1erfc1(tls TLS, _x float32) (r float32) {
	var (
		_s float32
		_P float32
		_Q float32
	)
	_s = Xfabsf(tls, _x) - float32(1)
	_P = x1pa0 + float32(_s*float32(x1pa1+float32(_s*float32(x1pa2+float32(_s*float32(x1pa3+float32(_s*float32(x1pa4+float32(_s*float32(x1pa5+float32(_s*x1pa6)))))))))))
	_Q = float32(1) + float32(_s*float32(x1qa1+float32(_s*float32(x1qa2+float32(_s*float32(x1qa3+float32(_s*float32(x1qa4+float32(_s*float32(x1qa5+float32(_s*x1qa6)))))))))))
	return float32(float32(1)-x1erx) - float32(_P/_Q)
}

// xra0 float32, escapes: false, erff.c:53:1
var x1ra0 = float32(-0.009864944)

// xra1 float32, escapes: false, erff.c:54:1
var x1ra1 = float32(-0.69385856)

// xra2 float32, escapes: false, erff.c:55:1
var x1ra2 = float32(-10.558626)

// xra3 float32, escapes: false, erff.c:56:1
var x1ra3 = float32(-62.37533)

// xra4 float32, escapes: false, erff.c:57:1
var x1ra4 = float32(-162.39667)

// xra5 float32, escapes: false, erff.c:58:1
var x1ra5 = float32(-184.60509)

// xra6 float32, escapes: false, erff.c:59:1
var x1ra6 = float32(-81.28744)

// xra7 float32, escapes: false, erff.c:60:1
var x1ra7 = float32(-9.814329)

// xsa1 float32, escapes: false, erff.c:61:1
var x1sa1 = float32(19.651272)

// xsa2 float32, escapes: false, erff.c:62:1
var x1sa2 = float32(137.65776)

// xsa3 float32, escapes: false, erff.c:63:1
var x1sa3 = float32(434.5659)

// xsa4 float32, escapes: false, erff.c:64:1
var x1sa4 = float32(645.38727)

// xsa5 float32, escapes: false, erff.c:65:1
var x1sa5 = float32(429.00815)

// xsa6 float32, escapes: false, erff.c:66:1
var x1sa6 = float32(108.635)

// xsa7 float32, escapes: false, erff.c:67:1
var x1sa7 = float32(6.5702496)

// xsa8 float32, escapes: false, erff.c:68:1
var x1sa8 = float32(-0.060424414)

// xrb0 float32, escapes: false, erff.c:72:1
var x1rb0 = float32(-0.009864943)

// xrb1 float32, escapes: false, erff.c:73:1
var x1rb1 = float32(-0.79928327)

// xrb2 float32, escapes: false, erff.c:74:1
var x1rb2 = float32(-17.757956)

// xrb3 float32, escapes: false, erff.c:75:1
var x1rb3 = float32(-160.63638)

// xrb4 float32, escapes: false, erff.c:76:1
var x1rb4 = float32(-637.56647)

// xrb5 float32, escapes: false, erff.c:77:1
var x1rb5 = float32(-1025.0951)

// xrb6 float32, escapes: false, erff.c:78:1
var x1rb6 = float32(-483.5192)

// xsb1 float32, escapes: false, erff.c:79:1
var x1sb1 = float32(30.33806)

// xsb2 float32, escapes: false, erff.c:80:1
var x1sb2 = float32(325.7925)

// xsb3 float32, escapes: false, erff.c:81:1
var x1sb3 = float32(1536.7296)

// xsb4 float32, escapes: false, erff.c:82:1
var x1sb4 = float32(3199.8582)

// xsb5 float32, escapes: false, erff.c:83:1
var x1sb5 = float32(2553.0503)

// xsb6 float32, escapes: false, erff.c:84:1
var x1sb6 = float32(474.52853)

// xsb7 float32, escapes: false, erff.c:85:1
var x1sb7 = float32(-22.440952)

// xpa0 float32, escapes: false, erff.c:37:1
var x1pa0 = float32(-0.0023621186)

// xpa1 float32, escapes: false, erff.c:38:1
var x1pa1 = float32(0.4148561)

// xpa2 float32, escapes: false, erff.c:39:1
var x1pa2 = float32(-0.37220788)

// xpa3 float32, escapes: false, erff.c:40:1
var x1pa3 = float32(0.31834662)

// xpa4 float32, escapes: false, erff.c:41:1
var x1pa4 = float32(-0.110894695)

// xpa5 float32, escapes: false, erff.c:42:1
var x1pa5 = float32(0.035478305)

// xpa6 float32, escapes: false, erff.c:43:1
var x1pa6 = float32(-0.0021663755)

// xqa1 float32, escapes: false, erff.c:44:1
var x1qa1 = float32(0.10642088)

// xqa2 float32, escapes: false, erff.c:45:1
var x1qa2 = float32(0.54039794)

// xqa3 float32, escapes: false, erff.c:46:1
var x1qa3 = float32(0.071828656)

// xqa4 float32, escapes: false, erff.c:47:1
var x1qa4 = float32(0.12617122)

// xqa5 float32, escapes: false, erff.c:48:1
var x1qa5 = float32(0.013637084)

// xqa6 float32, escapes: false, erff.c:49:1
var x1qa6 = float32(0.0119845)

// xerx float32, escapes: false, erff.c:19:1
var x1erx = float32(0.8450629)

// linking erfl.o

// Xerfl is defined at erfl.c:104:13
func Xerfl(tls TLS, _x float64) (r float64) {
	return Xerf(tls, _x)
}

// Xerfcl is defined at erfl.c:108:13
func Xerfcl(tls TLS, _x float64) (r float64) {
	return Xerfc(tls, _x)
}

type t362__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t362__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// linking exp.o

// Xexp is defined at exp.c:81:8
func Xexp(tls TLS, _x float64) (r float64) {
	esc := MustMalloc(8)
	var (
		_hi   float64
		_lo   float64
		_c    float64
		_xx   float64
		_y    float64
		_k    int32
		_sign int32
		_hx   uint32
		___u  = esc // *struct{Ff [0]float64;Fi [0]uint64;F int64}
		___x  float32
		_     = ___x
		_1__x float64
		_     = _1__x
		_2__x float64
		_     = _2__x
		_3__x float32
		_     = _3__x
		_4__x float64
		_     = _4__x
		_5__x float64
		_     = _5__x
	)
	defer Free(esc)
	*(*float64)(unsafe.Pointer(___u)) = _x
	_hx = uint32(*(*uint64)(unsafe.Pointer(___u)) >> (uint(32) % 64))
	_sign = int32(_hx >> (uint(31) % 32))
	_hx = _hx & uint32(0x7fffffff)
	if _hx < uint32(0x4086232b) {
		goto _2
	}

	if x5__DOUBLE_BITS(tls, _x)&uint64(9223372036854775807) <= uint64(9218868437227405312) {
		goto _3
	}

	return _x

_3:
	if _x <= float64(709.782712893384) {
		goto _4
	}

	_x = _x * float64(8.98846567431158e+307)
	return _x

_4:
	if _x >= float64(-708.3964185322641) {
		goto _5
	}

	___x = float32(float64(-1.401298464324817e-45) / _x)
	goto _7

	goto _8

	_1__x = float64(float32(float64(-1.401298464324817e-45) / _x))
	goto _9

_8:
	_2__x = float64(float32(float64(-1.401298464324817e-45) / _x))
_9:
_7:
	if _x >= float64(-745.1332191019411) {
		goto _10
	}

	return float64(0)

_10:
_5:
_2:
	if _hx <= uint32(0x3fd62e42) {
		goto _11
	}

	if _hx < uint32(0x3ff0a2b2) {
		goto _13
	}

	_k = int32(float64(xinvln2*_x) + *(*float64)(unsafe.Pointer(xhalf + 8*uintptr(_sign))))
	goto _14

_13:
	_k = int32(1) - _sign - _sign
_14:
	_hi = _x - float64(float64(_k)*xln2hi)
	_lo = float64(_k) * xln2lo
	_x = _hi - _lo
	goto _12

_11:
	if _hx <= uint32(0x3e300000) {
		goto _15
	}

	_k = int32(0)
	_hi = _x
	_lo = float64(0)
	goto _16

_15:
	goto _18

	_3__x = float32(float64(8.98846567431158e+307) + _x)
	goto _19

_18:
	_4__x = float64(8.98846567431158e+307) + _x
	goto _20

	_5__x = float64(8.98846567431158e+307) + _x
_20:
_19:
	return float64(1) + _x

_16:
_12:
	_xx = _x * _x
	_c = _x - float64(_xx*float64(x1P1+float64(_xx*float64(x1P2+float64(_xx*float64(x1P3+float64(_xx*float64(x1P4+float64(_xx*xP5)))))))))
	_y = float64(1) + float64(float64(float64(float64(_x*_c)/float64(float64(2)-_c))-_lo)+_hi)
	if _k != int32(0) {
		goto _21
	}

	return _y

_21:
	return Xscalbn(tls, _y, _k)
}

type t363__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t363__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t16double_t = float64

type t51uint32_t = uint32

type t33uint64_t = uint64

// x__DOUBLE_BITS is defined at math.h:49:36
func x5__DOUBLE_BITS(tls TLS, ___f float64) (r uint64) {
	esc := MustMalloc(8)
	var ___u = esc // *struct{F__f [0]float64;F__i [0]uint64;F int64}
	defer Free(esc)
	*(*float64)(unsafe.Pointer(___u)) = ___f
	return *(*uint64)(unsafe.Pointer(___u))
}

// xinvln2 float64, escapes: false, exp.c:74:1
var xinvln2 = float64(1.4426950408889634)

// xhalf [2]float64, escapes: true, exp.c:71:1
var xhalf = ds + 35448

// xln2hi float64, escapes: false, exp.c:72:1
var xln2hi = float64(0.6931471803691238)

// xln2lo float64, escapes: false, exp.c:73:1
var xln2lo = float64(1.9082149292705877e-10)

// xP1 float64, escapes: false, exp.c:75:1
var x1P1 = float64(0.16666666666666602)

// xP2 float64, escapes: false, exp.c:76:1
var x1P2 = float64(-0.0027777777777015593)

// xP3 float64, escapes: false, exp.c:77:1
var x1P3 = float64(6.613756321437934e-05)

// xP4 float64, escapes: false, exp.c:78:1
var x1P4 = float64(-1.6533902205465252e-06)

// xP5 float64, escapes: false, exp.c:79:1
var xP5 = float64(4.1381367970572385e-08)

// linking exp10.o

// Xexp10 is defined at exp10.c:6:8
func Xexp10(tls TLS, _x float64) (r float64) {
	esc := MustMalloc(24)
	var (
		_n = esc // *float64
		_y float64
		_u = esc + 16 // *struct{Ff [0]float64;Fi [0]uint64;F int64}
	)
	defer Free(esc)
	_y = Xmodf(tls, _x, _n)
	*(*struct {
		Ff [0]float64
		Fi [0]uint64
		F  int64
	})(unsafe.Pointer(_u)) = *(*struct {
		Ff [0]float64
		Fi [0]uint64
		F  int64
	})(unsafe.Pointer(&struct{ f float64 }{*(*float64)(unsafe.Pointer(_n))}))
	if *(*uint64)(unsafe.Pointer(_u))>>(uint(52)%64)&uint64(0x7ff) >= uint64(1027) {
		goto _1
	}

	if _y != 0 {
		goto _2
	}

	return *(*float64)(unsafe.Pointer(x593p10 + 8*uintptr(int32(*(*float64)(unsafe.Pointer(_n)))+int32(15))))

_2:
	_y = Xexp2(tls, float64(3.321928094887362)*_y)
	return _y * *(*float64)(unsafe.Pointer(x593p10 + 8*uintptr(int32(*(*float64)(unsafe.Pointer(_n)))+int32(15))))

_1:
	return Xpow(tls, float64(10), _x)
}

type t364__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t364__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// x1p10 [31]float64, escapes: true, exp10.c:8:22
var x593p10 = ds + 35464

type t34uint64_t = uint64

// linking exp10f.o

// Xexp10f is defined at exp10f.c:6:7
func Xexp10f(tls TLS, _x float32) (r float32) {
	esc := MustMalloc(20)
	var (
		_n = esc // *float32
		_y float32
		_u = esc + 16 // *struct{Ff [0]float32;Fi [0]uint32;F int32}
	)
	defer Free(esc)
	_y = Xmodff(tls, _x, _n)
	*(*struct {
		Ff [0]float32
		Fi [0]uint32
		F  int32
	})(unsafe.Pointer(_u)) = *(*struct {
		Ff [0]float32
		Fi [0]uint32
		F  int32
	})(unsafe.Pointer(&struct{ f float32 }{*(*float32)(unsafe.Pointer(_n))}))
	if *(*uint32)(unsafe.Pointer(_u))>>(uint(23)%32)&uint32(0xff) >= uint32(130) {
		goto _1
	}

	if _y != 0 {
		goto _2
	}

	return *(*float32)(unsafe.Pointer(x594p10 + 4*uintptr(int32(*(*float32)(unsafe.Pointer(_n)))+int32(7))))

_2:
	_y = Xexp2f(tls, float32(3.321928)*_y)
	return _y * *(*float32)(unsafe.Pointer(x594p10 + 4*uintptr(int32(*(*float32)(unsafe.Pointer(_n)))+int32(7))))

_1:
	return float32(Xexp2(tls, float64(3.321928094887362)*float64(_x)))
}

type t365__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t365__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// x1p10 [15]float32, escapes: true, exp10f.c:8:21
var x594p10 = ds + 35712

type t52uint32_t = uint32

// linking exp10l.o

// Xexp10l is defined at exp10l.c:8:13
func Xexp10l(tls TLS, _x float64) (r float64) {
	return Xexp10(tls, _x)
}

type t366__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t366__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// linking exp2.o

// Xexp2 is defined at exp2.c:331:8
func Xexp2(tls TLS, _x float64) (r float64) {
	esc := MustMalloc(20)
	var (
		_r    float64
		_t    float64
		_z    float64
		_ix   uint32
		_i0   uint32
		_u    = esc      // *struct{Ff [0]float64;Fi [0]uint64;F int64}
		_k    = esc + 16 // *struct{Fu [0]uint32;Fi [0]int32;F int32}
		___x  float32
		_     = ___x
		_1__x float64
		_     = _1__x
		_2__x float64
		_     = _2__x
	)
	defer Free(esc)
	*(*struct {
		Ff [0]float64
		Fi [0]uint64
		F  int64
	})(unsafe.Pointer(_u)) = *(*struct {
		Ff [0]float64
		Fi [0]uint64
		F  int64
	})(unsafe.Pointer(&struct{ f float64 }{_x}))
	_ix = uint32(*(*uint64)(unsafe.Pointer(_u)) >> (uint(32) % 64) & uint64(0x7fffffff))
	if _ix < uint32(0x408ff000) {
		goto _1
	}

	if _ix < uint32(0x40900000) || *(*uint64)(unsafe.Pointer(_u))>>(uint(63)%64) != uint64(0) {
		goto _3
	}

	_x = _x * float64(8.98846567431158e+307)
	return _x

_3:
	if _ix < uint32(0x7ff00000) {
		goto _4
	}

	return float64(-1) / _x

_4:
	if (*(*uint64)(unsafe.Pointer(_u)) >> (uint(63) % 64)) == 0 {
		goto _5
	}

	if _x > float64(-1075) && float64(float64(_x-float64(4.503599627370496e+15))+float64(4.503599627370496e+15)) == _x {
		goto _6
	}

	___x = float32(float64(-1.401298464324817e-45) / _x)
	goto _8

	goto _9

	_1__x = float64(float32(float64(-1.401298464324817e-45) / _x))
	goto _10

_9:
	_2__x = float64(float32(float64(-1.401298464324817e-45) / _x))
_10:
_8:
_6:
	if _x > float64(-1075) {
		goto _11
	}

	return float64(0)

_11:
_5:
	goto _2

_1:
	if _ix >= uint32(0x3c900000) {
		goto _12
	}

	return float64(1) + _x

_12:
_2:
	*(*float64)(unsafe.Pointer(_u)) = _x + xredux
	_i0 = uint32(*(*uint64)(unsafe.Pointer(_u)))
	_i0 = _i0 + uint32(128)
	*(*uint32)(unsafe.Pointer(_k)) = _i0 / uint32(256) * uint32(256)
	{
		p := (*int32)(unsafe.Pointer(_k))
		*p = *p / int32(256)
	}
	_i0 = _i0 % uint32(256)
	{
		p := (*float64)(unsafe.Pointer(_u))
		*p = *p - xredux
	}
	_z = _x - *(*float64)(unsafe.Pointer(_u))
	_t = *(*float64)(unsafe.Pointer(xtbl + 8*uintptr(uint32(2)*_i0)))
	_z = _z - *(*float64)(unsafe.Pointer(xtbl + 8*uintptr(uint32(2)*_i0+uint32(1))))
	_r = _t + float64(float64(_t*_z)*float64(x2P1+float64(_z*float64(x2P2+float64(_z*float64(x2P3+float64(_z*float64(x2P4+float64(_z*x1P5)))))))))
	return Xscalbn(tls, _r, *(*int32)(unsafe.Pointer(_k)))
}

type t367__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t367__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t17double_t = float64

type t53uint32_t = uint32

type t35uint64_t = uint64

type t9int32_t = int32

// xredux float64, escapes: false, exp2.c:33:1
var xredux = float64(2.6388279066624e+13)

// xtbl [512]float64, escapes: true, exp2.c:40:21
var xtbl = ds + 35776

// xP1 float64, escapes: false, exp2.c:34:1
var x2P1 = float64(0.6931471805599453)

// xP2 float64, escapes: false, exp2.c:35:1
var x2P2 = float64(0.2402265069591)

// xP3 float64, escapes: false, exp2.c:36:1
var x2P3 = float64(0.0555041086648214)

// xP4 float64, escapes: false, exp2.c:37:1
var x2P4 = float64(0.009618129842126066)

// xP5 float64, escapes: false, exp2.c:38:1
var x1P5 = float64(0.0013333559164630223)

// linking exp2f.o

// Xexp2f is defined at exp2f.c:84:7
func Xexp2f(tls TLS, _x float32) (r float32) {
	esc := MustMalloc(24)
	var (
		_t    float64
		_r    float64
		_z    float64
		_u    = esc      // *struct{Ff [0]float32;Fi [0]uint32;F int32}
		_uk   = esc + 16 // *struct{Ff [0]float64;Fi [0]uint64;F int64}
		_ix   uint32
		_i0   uint32
		_k    uint32
		___x  float32
		_     = ___x
		_1__x float64
		_     = _1__x
		_2__x float64
		_     = _2__x
	)
	defer Free(esc)
	*(*struct {
		Ff [0]float32
		Fi [0]uint32
		F  int32
	})(unsafe.Pointer(_u)) = *(*struct {
		Ff [0]float32
		Fi [0]uint32
		F  int32
	})(unsafe.Pointer(&struct{ f float32 }{_x}))
	_ix = *(*uint32)(unsafe.Pointer(_u)) & uint32(0x7fffffff)
	if _ix <= uint32(0x42fc0000) {
		goto _1
	}

	if _ix <= uint32(0x7f800000) {
		goto _3
	}

	return _x

_3:
	if *(*uint32)(unsafe.Pointer(_u)) < uint32(0x43000000) || *(*uint32)(unsafe.Pointer(_u)) >= uint32(0x80000000) {
		goto _4
	}

	_x = _x * float32(1.7014118e+38)
	return _x

_4:
	if *(*uint32)(unsafe.Pointer(_u)) < uint32(0x80000000) {
		goto _5
	}

	if *(*uint32)(unsafe.Pointer(_u)) < uint32(0xc3160000) && *(*uint32)(unsafe.Pointer(_u))&uint32(0xffff) == 0 {
		goto _6
	}

	___x = float32(-1e-45) / _x
	goto _8

	goto _9

	_1__x = float64(float32(-1e-45) / _x)
	goto _10

_9:
	_2__x = float64(float32(-1e-45) / _x)
_10:
_8:
_6:
	if *(*uint32)(unsafe.Pointer(_u)) < uint32(0xc3160000) {
		goto _11
	}

	return float32(0)

_11:
_5:
	goto _2

_1:
	if _ix > uint32(0x33000000) {
		goto _12
	}

	return float32(1) + _x

_12:
_2:
	*(*float32)(unsafe.Pointer(_u)) = _x + x1redux
	_i0 = *(*uint32)(unsafe.Pointer(_u))
	_i0 = _i0 + uint32(8)
	_k = _i0 / uint32(16)
	*(*uint64)(unsafe.Pointer(_uk)) = uint64(uint32(0x3ff)+_k) << (uint(52) % 64)
	_i0 = _i0 & uint32(15)
	{
		p := (*float32)(unsafe.Pointer(_u))
		*p = *p - x1redux
	}
	_z = float64(_x - *(*float32)(unsafe.Pointer(_u)))
	_r = *(*float64)(unsafe.Pointer(xexp2ft + 8*uintptr(_i0)))
	_t = _r * _z
	_r = float64(_r+float64(_t*float64(float64(x3P1)+float64(_z*float64(x3P2))))) + float64(float64(_t*float64(_z*_z))*float64(float64(x3P3)+float64(_z*float64(x3P4))))
	return float32(_r * *(*float64)(unsafe.Pointer(_uk)))
}

type t368__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t368__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t18double_t = float64

type t54uint32_t = uint32

type t36uint64_t = uint64

// xredux float32, escapes: false, exp2f.c:33:1
var x1redux = float32(786432)

// xexp2ft [16]float64, escapes: true, exp2f.c:39:21
var xexp2ft = ds + 39872

// xP1 float32, escapes: false, exp2f.c:34:1
var x3P1 = float32(0.6931472)

// xP2 float32, escapes: false, exp2f.c:35:1
var x3P2 = float32(0.2402265)

// xP3 float32, escapes: false, exp2f.c:36:1
var x3P3 = float32(0.05550541)

// xP4 float32, escapes: false, exp2f.c:37:1
var x3P4 = float32(0.009618355)

// linking exp2l.o

// Xexp2l is defined at exp2l.c:31:13
func Xexp2l(tls TLS, _x float64) (r float64) {
	return Xexp2(tls, _x)
}

type t369__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t369__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// linking expf.o

// Xexpf is defined at expf.c:30:7
func Xexpf(tls TLS, _x float32) (r float32) {
	esc := MustMalloc(4)
	var (
		_hi   float32
		_lo   float32
		_c    float32
		_xx   float32
		_y    float32
		_k    int32
		_sign int32
		_hx   uint32
		___u  = esc // *struct{Ff [0]float32;Fi [0]uint32;F int32}
		___x  float32
		_     = ___x
		_1__x float64
		_     = _1__x
		_2__x float64
		_     = _2__x
		_3__x float32
		_     = _3__x
		_4__x float64
		_     = _4__x
		_5__x float64
		_     = _5__x
	)
	defer Free(esc)
	*(*float32)(unsafe.Pointer(___u)) = _x
	_hx = *(*uint32)(unsafe.Pointer(___u))
	_sign = int32(_hx >> (uint(31) % 32))
	_hx = _hx & uint32(0x7fffffff)
	if _hx < uint32(0x42aeac50) {
		goto _2
	}

	if _hx <= uint32(0x7f800000) {
		goto _3
	}

	return _x

_3:
	if _hx < uint32(0x42b17218) || _sign != 0 {
		goto _4
	}

	_x = _x * float32(1.7014118e+38)
	return _x

_4:
	if _sign == 0 {
		goto _5
	}

	___x = float32(-1e-45) / _x
	goto _7

	goto _8

	_1__x = float64(float32(-1e-45) / _x)
	goto _9

_8:
	_2__x = float64(float32(-1e-45) / _x)
_9:
_7:
	if _hx < uint32(0x42cff1b5) {
		goto _10
	}

	return float32(0)

_10:
_5:
_2:
	if _hx <= uint32(0x3eb17218) {
		goto _11
	}

	if _hx <= uint32(0x3f851592) {
		goto _13
	}

	_k = int32(float32(x1invln2*_x) + *(*float32)(unsafe.Pointer(x1half + 4*uintptr(_sign))))
	goto _14

_13:
	_k = int32(1) - _sign - _sign
_14:
	_hi = _x - float32(float32(_k)*x1ln2hi)
	_lo = float32(_k) * x1ln2lo
	_x = _hi - _lo
	goto _12

_11:
	if _hx <= uint32(0x39000000) {
		goto _15
	}

	_k = int32(0)
	_hi = _x
	_lo = float32(0)
	goto _16

_15:
	_3__x = float32(1.7014118e+38) + _x
	goto _18

	goto _19

	_4__x = float64(float32(1.7014118e+38) + _x)
	goto _20

_19:
	_5__x = float64(float32(1.7014118e+38) + _x)
_20:
_18:
	return float32(1) + _x

_16:
_12:
	_xx = _x * _x
	_c = _x - float32(_xx*float32(x4P1+float32(_xx*x4P2)))
	_y = float32(1) + float32(float32(float32(float32(_x*_c)/float32(float32(2)-_c))-_lo)+_hi)
	if _k != int32(0) {
		goto _21
	}

	return _y

_21:
	return Xscalbnf(tls, _y, _k)
}

type t370__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t370__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t5float_t = float32

type t55uint32_t = uint32

// xinvln2 float32, escapes: false, expf.c:22:1
var x1invln2 = float32(1.442695)

// xhalf [2]float32, escapes: true, expf.c:19:1
var x1half = ds + 40000

// xln2hi float32, escapes: false, expf.c:20:1
var x1ln2hi = float32(0.69314575)

// xln2lo float32, escapes: false, expf.c:21:1
var x1ln2lo = float32(1.4286068e-06)

// xP1 float32, escapes: false, expf.c:27:1
var x4P1 = float32(0.16666625)

// xP2 float32, escapes: false, expf.c:28:1
var x4P2 = float32(-0.0027667333)

// linking expl.o

// Xexpl is defined at expl.c:71:13
func Xexpl(tls TLS, _x float64) (r float64) {
	return Xexp(tls, _x)
}

type t371__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t371__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// linking expm1.o

// Xexpm1 is defined at expm1.c:121:8
func Xexpm1(tls TLS, _x float64) (r float64) {
	esc := MustMalloc(8)
	var (
		_y     float64
		_hi    float64
		_lo    float64
		_c     float64
		_t     float64
		_e     float64
		_hxs   float64
		_hfx   float64
		_r1    float64
		_twopk float64
		_u     = esc // *struct{Ff [0]float64;Fi [0]uint64;F int64}
		_hx    uint32
		_k     int32
		_sign  int32
		___x   float32
		_      = ___x
		_1__x  float64
		_      = _1__x
		_2__x  float64
		_      = _2__x
	)
	defer Free(esc)
	*(*struct {
		Ff [0]float64
		Fi [0]uint64
		F  int64
	})(unsafe.Pointer(_u)) = *(*struct {
		Ff [0]float64
		Fi [0]uint64
		F  int64
	})(unsafe.Pointer(&struct{ f float64 }{_x}))
	_hx = uint32(*(*uint64)(unsafe.Pointer(_u)) >> (uint(32) % 64) & uint64(0x7fffffff))
	_sign = int32(*(*uint64)(unsafe.Pointer(_u)) >> (uint(63) % 64))
	if _hx < uint32(0x4043687a) {
		goto _1
	}

	if x6__DOUBLE_BITS(tls, _x)&uint64(9223372036854775807) <= uint64(9218868437227405312) {
		goto _2
	}

	return _x

_2:
	if _sign == 0 {
		goto _3
	}

	return float64(-1)

_3:
	if _x <= xo_threshold {
		goto _4
	}

	_x = _x * float64(8.98846567431158e+307)
	return _x

_4:
_1:
	if _hx <= uint32(0x3fd62e42) {
		goto _5
	}

	if _hx >= uint32(0x3ff0a2b2) {
		goto _7
	}

	if _sign != 0 {
		goto _9
	}

	_hi = _x - xln2_hi
	_lo = xln2_lo
	_k = int32(1)
	goto _10

_9:
	_hi = _x + xln2_hi
	_lo = -xln2_lo
	_k = int32(-1)
_10:
	goto _8

_7:
	_k = int32(float64(x2invln2*_x) + func() float64 {
		if _sign != 0 {
			return float64(-0.5)
		}
		return float64(0.5)
	}())
	_t = float64(_k)
	_hi = _x - float64(_t*xln2_hi)
	_lo = _t * xln2_lo
_8:
	_x = _hi - _lo
	_c = float64(_hi-_x) - _lo
	goto _6

_5:
	if _hx >= uint32(0x3c900000) {
		goto _11
	}

	if _hx >= uint32(0x100000) {
		goto _13
	}

	___x = float32(_x)
	goto _15

	goto _16

	_1__x = float64(float32(_x))
	goto _17

_16:
	_2__x = float64(float32(_x))
_17:
_15:
_13:
	return _x

	goto _12

_11:
	_k = int32(0)
_12:
_6:
	_hfx = float64(0.5) * _x
	_hxs = _x * _hfx
	_r1 = float64(1) + float64(_hxs*float64(xQ1+float64(_hxs*float64(xQ2+float64(_hxs*float64(xQ3+float64(_hxs*float64(xQ4+float64(_hxs*xQ5)))))))))
	_t = float64(3) - float64(_r1*_hfx)
	_e = _hxs * float64(float64(_r1-_t)/float64(float64(6)-float64(_x*_t)))
	if _k != int32(0) {
		goto _18
	}

	return _x - float64(float64(_x*_e)-_hxs)

_18:
	_e = float64(_x*float64(_e-_c)) - _c
	_e = _e - _hxs
	if _k != int32(-1) {
		goto _19
	}

	return float64(float64(0.5)*float64(_x-_e)) - float64(0.5)

_19:
	if _k != int32(1) {
		goto _20
	}

	if _x >= float64(-0.25) {
		goto _21
	}

	return float64(-2) * float64(_e-float64(_x+float64(0.5)))

_21:
	return float64(1) + float64(float64(2)*float64(_x-_e))

_20:
	*(*uint64)(unsafe.Pointer(_u)) = uint64(int32(0x3ff)+_k) << (uint(52) % 64)
	_twopk = *(*float64)(unsafe.Pointer(_u))
	if _k >= int32(0) && _k <= int32(56) {
		goto _22
	}

	_y = float64(_x-_e) + float64(1)
	if _k != int32(1024) {
		goto _23
	}

	_y = float64(_y*float64(2)) * float64(8.98846567431158e+307)
	goto _24

_23:
	_y = _y * _twopk
_24:
	return _y - float64(1)

_22:
	*(*uint64)(unsafe.Pointer(_u)) = uint64(int32(0x3ff)-_k) << (uint(52) % 64)
	if _k >= int32(20) {
		goto _25
	}

	_y = float64(float64(_x-_e)+float64(float64(1)-*(*float64)(unsafe.Pointer(_u)))) * _twopk
	goto _26

_25:
	_y = float64(float64(_x-float64(_e+*(*float64)(unsafe.Pointer(_u))))+float64(1)) * _twopk
_26:
	return _y
}

type t372__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t372__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t19double_t = float64

type t37uint64_t = uint64

type t56uint32_t = uint32

// x__DOUBLE_BITS is defined at math.h:49:36
func x6__DOUBLE_BITS(tls TLS, ___f float64) (r uint64) {
	esc := MustMalloc(8)
	var ___u = esc // *struct{F__f [0]float64;F__i [0]uint64;F int64}
	defer Free(esc)
	*(*float64)(unsafe.Pointer(___u)) = ___f
	return *(*uint64)(unsafe.Pointer(___u))
}

// xo_threshold float64, escapes: false, expm1.c:110:1
var xo_threshold = float64(709.782712893384)

// xln2_hi float64, escapes: false, expm1.c:111:1
var xln2_hi = float64(0.6931471803691238)

// xln2_lo float64, escapes: false, expm1.c:112:1
var xln2_lo = float64(1.9082149292705877e-10)

// xinvln2 float64, escapes: false, expm1.c:113:1
var x2invln2 = float64(1.4426950408889634)

// xQ1 float64, escapes: false, expm1.c:115:1
var xQ1 = float64(-0.03333333333333313)

// xQ2 float64, escapes: false, expm1.c:116:1
var xQ2 = float64(0.0015873015872548146)

// xQ3 float64, escapes: false, expm1.c:117:1
var xQ3 = float64(-7.93650757867488e-05)

// xQ4 float64, escapes: false, expm1.c:118:1
var xQ4 = float64(4.008217827329362e-06)

// xQ5 float64, escapes: false, expm1.c:119:1
var xQ5 = float64(-2.0109921818362437e-07)

// linking expm1f.o

// Xexpm1f is defined at expm1f.c:31:7
func Xexpm1f(tls TLS, _x float32) (r float32) {
	esc := MustMalloc(4)
	var (
		_y     float32
		_hi    float32
		_lo    float32
		_c     float32
		_t     float32
		_e     float32
		_hxs   float32
		_hfx   float32
		_r1    float32
		_twopk float32
		_u     = esc // *struct{Ff [0]float32;Fi [0]uint32;F int32}
		_hx    uint32
		_k     int32
		_sign  int32
		___x   float32
		_      = ___x
		_1__x  float64
		_      = _1__x
		_2__x  float64
		_      = _2__x
	)
	defer Free(esc)
	*(*struct {
		Ff [0]float32
		Fi [0]uint32
		F  int32
	})(unsafe.Pointer(_u)) = *(*struct {
		Ff [0]float32
		Fi [0]uint32
		F  int32
	})(unsafe.Pointer(&struct{ f float32 }{_x}))
	_hx = *(*uint32)(unsafe.Pointer(_u)) & uint32(0x7fffffff)
	_sign = int32(*(*uint32)(unsafe.Pointer(_u)) >> (uint(31) % 32))
	if _hx < uint32(0x4195b844) {
		goto _1
	}

	if _hx <= uint32(0x7f800000) {
		goto _2
	}

	return _x

_2:
	if _sign == 0 {
		goto _3
	}

	return float32(-1)

_3:
	if _x <= x1o_threshold {
		goto _4
	}

	_x = _x * float32(1.7014118e+38)
	return _x

_4:
_1:
	if _hx <= uint32(0x3eb17218) {
		goto _5
	}

	if _hx >= uint32(0x3f851592) {
		goto _7
	}

	if _sign != 0 {
		goto _9
	}

	_hi = _x - x1ln2_hi
	_lo = x1ln2_lo
	_k = int32(1)
	goto _10

_9:
	_hi = _x + x1ln2_hi
	_lo = -x1ln2_lo
	_k = int32(-1)
_10:
	goto _8

_7:
	_k = int32(float32(x3invln2*_x) + func() float32 {
		if _sign != 0 {
			return float32(-0.5)
		}
		return float32(0.5)
	}())
	_t = float32(_k)
	_hi = _x - float32(_t*x1ln2_hi)
	_lo = _t * x1ln2_lo
_8:
	_x = _hi - _lo
	_c = float32(_hi-_x) - _lo
	goto _6

_5:
	if _hx >= uint32(0x33000000) {
		goto _11
	}

	if _hx >= uint32(0x800000) {
		goto _13
	}

	___x = _x * _x
	goto _15

	goto _16

	_1__x = float64(_x * _x)
	goto _17

_16:
	_2__x = float64(_x * _x)
_17:
_15:
_13:
	return _x

	goto _12

_11:
	_k = int32(0)
_12:
_6:
	_hfx = float32(0.5) * _x
	_hxs = _x * _hfx
	_r1 = float32(1) + float32(_hxs*float32(x1Q1+float32(_hxs*x1Q2)))
	_t = float32(3) - float32(_r1*_hfx)
	_e = _hxs * float32(float32(_r1-_t)/float32(float32(6)-float32(_x*_t)))
	if _k != int32(0) {
		goto _18
	}

	return _x - float32(float32(_x*_e)-_hxs)

_18:
	_e = float32(_x*float32(_e-_c)) - _c
	_e = _e - _hxs
	if _k != int32(-1) {
		goto _19
	}

	return float32(float32(0.5)*float32(_x-_e)) - float32(0.5)

_19:
	if _k != int32(1) {
		goto _20
	}

	if _x >= float32(-0.25) {
		goto _21
	}

	return float32(-2) * float32(_e-float32(_x+float32(0.5)))

_21:
	return float32(1) + float32(float32(2)*float32(_x-_e))

_20:
	*(*uint32)(unsafe.Pointer(_u)) = uint32((int32(0x7f) + _k) << (uint(23) % 32))
	_twopk = *(*float32)(unsafe.Pointer(_u))
	if _k >= int32(0) && _k <= int32(56) {
		goto _22
	}

	_y = float32(_x-_e) + float32(1)
	if _k != int32(128) {
		goto _23
	}

	_y = float32(_y*float32(2)) * float32(1.7014118e+38)
	goto _24

_23:
	_y = _y * _twopk
_24:
	return _y - float32(1)

_22:
	*(*uint32)(unsafe.Pointer(_u)) = uint32((int32(0x7f) - _k) << (uint(23) % 32))
	if _k >= int32(23) {
		goto _25
	}

	_y = float32(float32(_x-_e)+float32(float32(1)-*(*float32)(unsafe.Pointer(_u)))) * _twopk
	goto _26

_25:
	_y = float32(float32(_x-float32(_e+*(*float32)(unsafe.Pointer(_u))))+float32(1)) * _twopk
_26:
	return _y
}

type t373__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t373__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t6float_t = float32

type t57uint32_t = uint32

// xo_threshold float32, escapes: false, expm1f.c:19:1
var x1o_threshold = float32(88.72168)

// xln2_hi float32, escapes: false, expm1f.c:20:1
var x1ln2_hi = float32(0.6931381)

// xln2_lo float32, escapes: false, expm1f.c:21:1
var x1ln2_lo = float32(9.058001e-06)

// xinvln2 float32, escapes: false, expm1f.c:22:1
var x3invln2 = float32(1.442695)

// xQ1 float32, escapes: false, expm1f.c:28:1
var x1Q1 = float32(-0.033333212)

// xQ2 float32, escapes: false, expm1f.c:29:1
var x1Q2 = float32(0.001580717)

// linking expm1l.o

// Xexpm1l is defined at expm1l.c:53:13
func Xexpm1l(tls TLS, _x float64) (r float64) {
	return Xexpm1(tls, _x)
}

type t374__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t374__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// linking fabs.o

// Xfabs is defined at fabs.c:4:8
func Xfabs(tls TLS, _x float64) (r float64) {
	esc := MustMalloc(8)
	var _u = esc // *struct{Ff [0]float64;Fi [0]uint64;F int64}
	defer Free(esc)
	*(*struct {
		Ff [0]float64
		Fi [0]uint64
		F  int64
	})(unsafe.Pointer(_u)) = *(*struct {
		Ff [0]float64
		Fi [0]uint64
		F  int64
	})(unsafe.Pointer(&struct{ f float64 }{_x}))
	{
		p := (*uint64)(unsafe.Pointer(_u))
		*p = *p & uint64(9223372036854775807)
	}
	return *(*float64)(unsafe.Pointer(_u))
}

type t375__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t375__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t38uint64_t = uint64

// linking fabsf.o

// Xfabsf is defined at fabsf.c:4:7
func Xfabsf(tls TLS, _x float32) (r float32) {
	esc := MustMalloc(4)
	var _u = esc // *struct{Ff [0]float32;Fi [0]uint32;F int32}
	defer Free(esc)
	*(*struct {
		Ff [0]float32
		Fi [0]uint32
		F  int32
	})(unsafe.Pointer(_u)) = *(*struct {
		Ff [0]float32
		Fi [0]uint32
		F  int32
	})(unsafe.Pointer(&struct{ f float32 }{_x}))
	{
		p := (*uint32)(unsafe.Pointer(_u))
		*p = *p & uint32(0x7fffffff)
	}
	return *(*float32)(unsafe.Pointer(_u))
}

type t376__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t376__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t58uint32_t = uint32

// linking fabsl.o

// Xfabsl is defined at fabsl.c:3:13
func Xfabsl(tls TLS, _x float64) (r float64) {
	return Xfabs(tls, _x)
}

type t377__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t377__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// linking fdim.o

// Xfdim is defined at fdim.c:3:8
func Xfdim(tls TLS, _x float64, _y float64) (r float64) {
	if x7__DOUBLE_BITS(tls, _x)&uint64(9223372036854775807) <= uint64(9218868437227405312) {
		goto _1
	}

	return _x

_1:
	if x7__DOUBLE_BITS(tls, _y)&uint64(9223372036854775807) <= uint64(9218868437227405312) {
		goto _2
	}

	return _y

_2:
	if _x > _y {
		return _x - _y
	}

	return float64(0)
}

type t378__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t378__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// x__DOUBLE_BITS is defined at math.h:49:36
func x7__DOUBLE_BITS(tls TLS, ___f float64) (r uint64) {
	esc := MustMalloc(8)
	var ___u = esc // *struct{F__f [0]float64;F__i [0]uint64;F int64}
	defer Free(esc)
	*(*float64)(unsafe.Pointer(___u)) = ___f
	return *(*uint64)(unsafe.Pointer(___u))
}

// linking fdimf.o

// Xfdimf is defined at fdimf.c:3:7
func Xfdimf(tls TLS, _x float32, _y float32) (r float32) {
	if x5__FLOAT_BITS(tls, _x)&uint32(0x7fffffff) <= uint32(0x7f800000) {
		goto _1
	}

	return _x

_1:
	if x5__FLOAT_BITS(tls, _y)&uint32(0x7fffffff) <= uint32(0x7f800000) {
		goto _2
	}

	return _y

_2:
	if _x > _y {
		return _x - _y
	}

	return float32(0)
}

type t379__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t379__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// x__FLOAT_BITS is defined at math.h:43:26
func x5__FLOAT_BITS(tls TLS, ___f float32) (r uint32) {
	esc := MustMalloc(4)
	var ___u = esc // *struct{F__f [0]float32;F__i [0]uint32;F int32}
	defer Free(esc)
	*(*float32)(unsafe.Pointer(___u)) = ___f
	return *(*uint32)(unsafe.Pointer(___u))
}

// linking fdiml.o

// Xfdiml is defined at fdiml.c:5:13
func Xfdiml(tls TLS, _x float64, _y float64) (r float64) {
	return Xfdim(tls, _x, _y)
}

type t380__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t380__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// linking finite.o

// Xfinite is defined at finite.c:4:5
func Xfinite(tls TLS, _x float64) (r int32) {
	return bool2int(x8__DOUBLE_BITS(tls, _x)&uint64(9223372036854775807) < uint64(9218868437227405312))
}

type t381__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t381__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// x__DOUBLE_BITS is defined at math.h:49:36
func x8__DOUBLE_BITS(tls TLS, ___f float64) (r uint64) {
	esc := MustMalloc(8)
	var ___u = esc // *struct{F__f [0]float64;F__i [0]uint64;F int64}
	defer Free(esc)
	*(*float64)(unsafe.Pointer(___u)) = ___f
	return *(*uint64)(unsafe.Pointer(___u))
}

// linking finitef.o

// Xfinitef is defined at finitef.c:4:5
func Xfinitef(tls TLS, _x float32) (r int32) {
	return bool2int(x6__FLOAT_BITS(tls, _x)&uint32(0x7fffffff) < uint32(0x7f800000))
}

type t382__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t382__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// x__FLOAT_BITS is defined at math.h:43:26
func x6__FLOAT_BITS(tls TLS, ___f float32) (r uint32) {
	esc := MustMalloc(4)
	var ___u = esc // *struct{F__f [0]float32;F__i [0]uint32;F int32}
	defer Free(esc)
	*(*float32)(unsafe.Pointer(___u)) = ___f
	return *(*uint32)(unsafe.Pointer(___u))
}

// linking floor.o

// Xfloor is defined at floor.c:10:8
func Xfloor(tls TLS, _x float64) (r float64) {
	esc := MustMalloc(8)
	var (
		_u    = esc // *struct{Ff [0]float64;Fi [0]uint64;F int64}
		_e    int32
		_y    float64
		___x  float32
		_     = ___x
		_1__x float64
		_     = _1__x
		_2__x float64
		_     = _2__x
	)
	defer Free(esc)
	*(*struct {
		Ff [0]float64
		Fi [0]uint64
		F  int64
	})(unsafe.Pointer(_u)) = *(*struct {
		Ff [0]float64
		Fi [0]uint64
		F  int64
	})(unsafe.Pointer(&struct{ f float64 }{_x}))
	_e = int32(*(*uint64)(unsafe.Pointer(_u)) >> (uint(52) % 64) & uint64(0x7ff))
	if _e < int32(1075) && _x != float64(0) {
		goto _1
	}

	return _x

_1:
	if (*(*uint64)(unsafe.Pointer(_u)) >> (uint(63) % 64)) == 0 {
		goto _2
	}

	_y = float64(float64(_x-x3toint)+x3toint) - _x
	goto _3

_2:
	_y = float64(float64(_x+x3toint)-x3toint) - _x
_3:
	if _e > int32(1022) {
		goto _4
	}

	goto _6

	___x = float32(_y)
	goto _7

_6:
	_1__x = _y
	goto _8

	_2__x = _y
_8:
_7:
	if (*(*uint64)(unsafe.Pointer(_u)) >> (uint(63) % 64)) != 0 {
		return float64(-1)
	}

	return float64(0)

_4:
	if _y <= float64(0) {
		goto _9
	}

	return float64(_x+_y) - float64(1)

_9:
	return _x + _y
}

type t383__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t383__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t39uint64_t = uint64

type t20double_t = float64

// xtoint Tdouble_t = float64, escapes: false, floor.c:8:23
var x3toint = float64(4.503599627370496e+15)

// linking floorf.o

// Xfloorf is defined at floorf.c:3:7
func Xfloorf(tls TLS, _x float32) (r float32) {
	esc := MustMalloc(4)
	var (
		_u    = esc // *struct{Ff [0]float32;Fi [0]uint32;F int32}
		_e    int32
		_m    uint32
		___x  float32
		_     = ___x
		_1__x float64
		_     = _1__x
		_2__x float64
		_     = _2__x
		_3__x float32
		_     = _3__x
		_4__x float64
		_     = _4__x
		_5__x float64
		_     = _5__x
	)
	defer Free(esc)
	*(*struct {
		Ff [0]float32
		Fi [0]uint32
		F  int32
	})(unsafe.Pointer(_u)) = *(*struct {
		Ff [0]float32
		Fi [0]uint32
		F  int32
	})(unsafe.Pointer(&struct{ f float32 }{_x}))
	_e = int32(*(*uint32)(unsafe.Pointer(_u))>>(uint(23)%32)&uint32(0xff)) - int32(0x7f)
	if _e < int32(23) {
		goto _1
	}

	return _x

_1:
	if _e < int32(0) {
		goto _2
	}

	_m = uint32(int32(0x7fffff) >> (uint(_e) % 32))
	if *(*uint32)(unsafe.Pointer(_u))&_m != uint32(0) {
		goto _4
	}

	return _x

_4:
	___x = _x + float32(1.329228e+36)
	goto _6

	goto _7

	_1__x = float64(_x + float32(1.329228e+36))
	goto _8

_7:
	_2__x = float64(_x + float32(1.329228e+36))
_8:
_6:
	if (*(*uint32)(unsafe.Pointer(_u)) >> (uint(31) % 32)) == 0 {
		goto _9
	}

	{
		p := (*uint32)(unsafe.Pointer(_u))
		*p = *p + _m
	}
_9:
	{
		p := (*uint32)(unsafe.Pointer(_u))
		*p = *p & ^_m
	}
	goto _3

_2:
	_3__x = _x + float32(1.329228e+36)
	goto _11

	goto _12

	_4__x = float64(_x + float32(1.329228e+36))
	goto _13

_12:
	_5__x = float64(_x + float32(1.329228e+36))
_13:
_11:
	if *(*uint32)(unsafe.Pointer(_u))>>(uint(31)%32) != uint32(0) {
		goto _14
	}

	*(*uint32)(unsafe.Pointer(_u)) = uint32(0)
	goto _15

_14:
	if (*(*uint32)(unsafe.Pointer(_u)) << (uint(1) % 32)) == 0 {
		goto _16
	}

	*(*float32)(unsafe.Pointer(_u)) = float32(-1)
_16:
_15:
_3:
	return *(*float32)(unsafe.Pointer(_u))
}

type t384__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t384__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t59uint32_t = uint32

// linking floorl.o

// Xfloorl is defined at floorl.c:4:13
func Xfloorl(tls TLS, _x float64) (r float64) {
	return Xfloor(tls, _x)
}

type t385__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t385__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// linking fma.o

// Xfma is defined at fma.c:42:8
func Xfma(tls TLS, _x float64, _y float64, _z float64) (r float64) {
	esc := MustMalloc(72)
	var (
		_nx       = esc      // *Snum
		_ny       = esc + 16 // *Snum
		_nz       = esc + 32 // *Snum
		_rhi      = esc + 48 // *Tuint64_t = uint64
		_rlo      = esc + 64 // *Tuint64_t = uint64
		_zhi      uint64
		_zlo      uint64
		_e        int32
		_d        int32
		_sign     int32
		_samesign int32
		_nonzero  int32
		_t        uint64
		_i        int64
		_r        float64
		_c        float64
		_fltmin   float32
		_tiny     float64
	)
	defer Free(esc)
	*(*Snum)(unsafe.Pointer(_nx)) = xnormalize(tls, _x)
	*(*Snum)(unsafe.Pointer(_ny)) = xnormalize(tls, _y)
	*(*Snum)(unsafe.Pointer(_nz)) = xnormalize(tls, _z)
	if *(*int32)(unsafe.Pointer(_nx + 8)) < int32(971) && *(*int32)(unsafe.Pointer(_ny + 8)) < int32(971) {
		goto _1
	}

	return float64(_x*_y) + _z

_1:
	if *(*int32)(unsafe.Pointer(_nz + 8)) < int32(971) {
		goto _2
	}

	if *(*int32)(unsafe.Pointer(_nz + 8)) <= int32(971) {
		goto _3
	}

	return float64(_x*_y) + _z

_3:
	return _z

_2:
	xmul(tls, _rhi, _rlo, *(*uint64)(unsafe.Pointer(_nx)), *(*uint64)(unsafe.Pointer(_ny)))
	_e = *(*int32)(unsafe.Pointer(_nx + 8)) + *(*int32)(unsafe.Pointer(_ny + 8))
	_d = *(*int32)(unsafe.Pointer(_nz + 8)) - _e
	if _d <= int32(0) {
		goto _4
	}

	if _d >= int32(64) {
		goto _6
	}

	_zlo = *(*uint64)(unsafe.Pointer(_nz)) << (uint(_d) % 64)
	_zhi = *(*uint64)(unsafe.Pointer(_nz)) >> (uint(int32(64)-_d) % 64)
	goto _7

_6:
	_zlo = uint64(0)
	_zhi = *(*uint64)(unsafe.Pointer(_nz))
	_e = *(*int32)(unsafe.Pointer(_nz + 8)) - int32(64)
	_d = _d - int32(64)
	if _d != int32(0) {
		goto _8
	}

	goto _9

_8:
	if _d >= int32(64) {
		goto _10
	}

	*(*uint64)(unsafe.Pointer(_rlo)) = *(*uint64)(unsafe.Pointer(_rhi))<<(uint(int32(64)-_d)%64) | *(*uint64)(unsafe.Pointer(_rlo))>>(uint(_d)%64) | uint64(bool2int(*(*uint64)(unsafe.Pointer(_rlo))<<(uint(int32(64)-_d)%64) != 0))
	*(*uint64)(unsafe.Pointer(_rhi)) = *(*uint64)(unsafe.Pointer(_rhi)) >> (uint(_d) % 64)
	goto _11

_10:
	*(*uint64)(unsafe.Pointer(_rlo)) = uint64(1)
	*(*uint64)(unsafe.Pointer(_rhi)) = uint64(0)
_11:
_9:
_7:
	goto _5

_4:
	_zhi = uint64(0)
	_d = -_d
	if _d != int32(0) {
		goto _12
	}

	_zlo = *(*uint64)(unsafe.Pointer(_nz))
	goto _13

_12:
	if _d >= int32(64) {
		goto _14
	}

	_zlo = *(*uint64)(unsafe.Pointer(_nz))>>(uint(_d)%64) | uint64(bool2int(*(*uint64)(unsafe.Pointer(_nz))<<(uint(int32(64)-_d)%64) != 0))
	goto _15

_14:
	_zlo = uint64(1)
_15:
_13:
_5:
	_sign = *(*int32)(unsafe.Pointer(_nx + 12)) ^ *(*int32)(unsafe.Pointer(_ny + 12))
	_samesign = bool2int(_sign^*(*int32)(unsafe.Pointer(_nz + 12)) == 0)
	_nonzero = int32(1)
	if _samesign == 0 {
		goto _16
	}

	*(*uint64)(unsafe.Pointer(_rlo)) = *(*uint64)(unsafe.Pointer(_rlo)) + _zlo
	*(*uint64)(unsafe.Pointer(_rhi)) = *(*uint64)(unsafe.Pointer(_rhi)) + (_zhi + uint64(bool2int(*(*uint64)(unsafe.Pointer(_rlo)) < _zlo)))
	goto _17

_16:
	_t = *(*uint64)(unsafe.Pointer(_rlo))
	*(*uint64)(unsafe.Pointer(_rlo)) = *(*uint64)(unsafe.Pointer(_rlo)) - _zlo
	*(*uint64)(unsafe.Pointer(_rhi)) = *(*uint64)(unsafe.Pointer(_rhi)) - _zhi - uint64(bool2int(_t < *(*uint64)(unsafe.Pointer(_rlo))))
	if (*(*uint64)(unsafe.Pointer(_rhi)) >> (uint(63) % 64)) == 0 {
		goto _18
	}

	*(*uint64)(unsafe.Pointer(_rlo)) = -*(*uint64)(unsafe.Pointer(_rlo))
	*(*uint64)(unsafe.Pointer(_rhi)) = -*(*uint64)(unsafe.Pointer(_rhi)) - uint64(bool2int(*(*uint64)(unsafe.Pointer(_rlo)) != 0))
	_sign = bool2int(_sign == 0)
_18:
	_nonzero = bool2int(*(*uint64)(unsafe.Pointer(_rhi)) != 0)
_17:
	if _nonzero == 0 {
		goto _19
	}

	_e = _e + int32(64)
	_d = xa_clz_64(tls, *(*uint64)(unsafe.Pointer(_rhi))) - int32(1)
	*(*uint64)(unsafe.Pointer(_rhi)) = *(*uint64)(unsafe.Pointer(_rhi))<<(uint(_d)%64) | *(*uint64)(unsafe.Pointer(_rlo))>>(uint(int32(64)-_d)%64) | uint64(bool2int(*(*uint64)(unsafe.Pointer(_rlo))<<(uint(_d)%64) != 0))
	goto _20

_19:
	if *(*uint64)(unsafe.Pointer(_rlo)) == 0 {
		goto _21
	}

	_d = xa_clz_64(tls, *(*uint64)(unsafe.Pointer(_rlo))) - int32(1)
	if _d >= int32(0) {
		goto _23
	}

	*(*uint64)(unsafe.Pointer(_rhi)) = *(*uint64)(unsafe.Pointer(_rlo))>>(uint(1)%64) | *(*uint64)(unsafe.Pointer(_rlo))&uint64(1)
	goto _24

_23:
	*(*uint64)(unsafe.Pointer(_rhi)) = *(*uint64)(unsafe.Pointer(_rlo)) << (uint(_d) % 64)
_24:
	goto _22

_21:
	return float64(_x*_y) + _z

_22:
_20:
	_e = _e - _d
	_i = int64(*(*uint64)(unsafe.Pointer(_rhi)))
	if _sign == 0 {
		goto _25
	}

	_i = -_i
_25:
	_r = float64(_i)
	if _e >= int32(-1084) {
		goto _26
	}

	if _e != int32(-1085) {
		goto _27
	}

	_c = float64(9.223372036854776e+18)
	if _sign == 0 {
		goto _29
	}

	_c = -_c
_29:
	if _r != _c {
		goto _30
	}

	_fltmin = float32(float64(1.2744734909236908e-57) * _r)
	return float64(1.8928834978668395e-270) * float64(_fltmin)

_30:
	if (*(*uint64)(unsafe.Pointer(_rhi)) << (uint(53) % 64)) == 0 {
		goto _31
	}

	_i = int64(*(*uint64)(unsafe.Pointer(_rhi))>>(uint(1)%64) | *(*uint64)(unsafe.Pointer(_rhi))&uint64(1) | uint64(4611686018427387904))
	if _sign == 0 {
		goto _32
	}

	_i = -_i
_32:
	_r = float64(_i)
	_r = float64(float64(2)*_r) - _c
	_tiny = float64(1.8928834978668395e-270) * _r
	_r = _r + float64(float64(_tiny*_tiny)*float64(_r-_r))
_31:
	goto _28

_27:
	_d = int32(10)
	_i = int64((*(*uint64)(unsafe.Pointer(_rhi))>>(uint(_d)%64) | uint64(bool2int(*(*uint64)(unsafe.Pointer(_rhi))<<(uint(int32(64)-_d)%64) != 0))) << (uint(_d) % 64))
	if _sign == 0 {
		goto _33
	}

	_i = -_i
_33:
	_r = float64(_i)
_28:
_26:
	return Xscalbn(tls, _r, _e)
}

type t386__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t386__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type Snum = struct {
	Fm    uint64
	Fe    int32
	Fsign int32
}

type t40uint64_t = uint64

type Tint64_t = int64

type t21double_t = float64

// xnormalize is defined at fma.c:11:19
func xnormalize(tls TLS, _x float64) (r struct {
	Fm    uint64
	Fe    int32
	Fsign int32
}) {
	esc := MustMalloc(24)
	var (
		_ix       uint64
		_unnamed1 = esc // *struct{Ff [0]float64;Fi [0]uint64;F int64}
		_e        int32
		_sign     int32
		_unnamed2 = esc + 16 // *struct{Ff [0]float64;Fi [0]uint64;F int64}
		_unnamed3 Snum
		_         = _unnamed3
	)
	defer Free(esc)
	_ix = *(*uint64)(unsafe.Pointer(func() uintptr {
		*(*struct {
			Ff [0]float64
			Fi [0]uint64
			F  int64
		})(unsafe.Pointer(_unnamed1)) = *(*struct {
			Ff [0]float64
			Fi [0]uint64
			F  int64
		})(unsafe.Pointer(&struct{ f float64 }{_x}))
		return _unnamed1
	}()))
	_e = int32(_ix >> (uint(52) % 64))
	_sign = _e & int32(0x800)
	_e = _e & int32(0x7ff)
	if _e != 0 {
		goto _1
	}

	_ix = *(*uint64)(unsafe.Pointer(func() uintptr {
		*(*struct {
			Ff [0]float64
			Fi [0]uint64
			F  int64
		})(unsafe.Pointer(_unnamed2)) = *(*struct {
			Ff [0]float64
			Fi [0]uint64
			F  int64
		})(unsafe.Pointer(&struct{ f float64 }{_x * float64(9.223372036854776e+18)}))
		return _unnamed2
	}()))
	_e = int32(_ix >> (uint(52) % 64) & uint64(0x7ff))
	_e = func() int32 {
		if _e != 0 {
			return _e - int32(63)
		}
		return int32(0x800)
	}()
_1:
	_ix = _ix & uint64(4503599627370495)
	_ix = _ix | uint64(4503599627370496)
	_ix = _ix << uint32(1)
	_e = _e - int32(1076)
	return Snum{
		Fm:    _ix,
		Fe:    _e,
		Fsign: _sign,
	}
}

// xmul is defined at fma.c:29:13
func xmul(tls TLS, _hi uintptr /* *Tuint64_t = uint64 */, _lo uintptr /* *Tuint64_t = uint64 */, _x uint64, _y uint64) {
	var (
		_t1  uint64
		_t2  uint64
		_t3  uint64
		_xlo uint64
		_xhi uint64
		_ylo uint64
		_yhi uint64
	)
	_xlo = uint64(uint32(_x))
	_xhi = _x >> (uint(32) % 64)
	_ylo = uint64(uint32(_y))
	_yhi = _y >> (uint(32) % 64)
	_t1 = _xlo * _ylo
	_t2 = _xlo*_yhi + _xhi*_ylo
	_t3 = _xhi * _yhi
	*(*uint64)(unsafe.Pointer(_lo)) = _t1 + _t2<<(uint(32)%64)
	*(*uint64)(unsafe.Pointer(_hi)) = _t3 + _t2>>(uint(32)%64) + uint64(bool2int(_t1 > *(*uint64)(unsafe.Pointer(_lo))))
}

// xa_clz_64 is defined at atomic_arch.h:140:19
func xa_clz_64(tls TLS, _x uint64) (r int32) {
	X__assert_fail(tls, ts+0 /* "TODO(ccgo)" */, ts+36 /* "arch/x86_64/atom..." */, int32(142), x595__func__)
	return r
}

type t60uint32_t = uint32

// x4__func__ [9]int8, escapes: true, atomic_arch.h:141:1
var x595__func__ = ds + 40008

// linking fmaf.o

// Xfmaf is defined at fmaf.c:39:7
func Xfmaf(tls TLS, _x float32, _y float32, _z float32) (r float32) {
	esc := MustMalloc(8)
	var (
		_xy              float64
		_result          float64
		_u               = esc // *struct{Ff [0]float64;Fi [0]uint64;F int64}
		_e               int32
		_vz              float32
		_vxy             float64
		_adjusted_result float64
	)
	defer Free(esc)
	_xy = float64(_x) * float64(_y)
	_result = _xy + float64(_z)
	*(*float64)(unsafe.Pointer(_u)) = _result
	_e = int32(*(*uint64)(unsafe.Pointer(_u)) >> (uint(52) % 64) & uint64(0x7ff))
	if *(*uint64)(unsafe.Pointer(_u))&uint64(0x1fffffff) == uint64(0x10000000) && _e != int32(0x7ff) && (float64(_result-_xy) != float64(_z) || float64(_result-float64(_z)) != _xy) && Xfegetround(tls) == int32(0) {
		goto _1
	}

	if _e >= int32(897) || _e < int32(874) || Xfetestexcept(tls, int32(32)) == 0 {
		goto _2
	}

	Xfeclearexcept(tls, int32(32))
	_vz = _z
	_result = _xy + float64(_vz)
	if Xfetestexcept(tls, int32(32)) == 0 {
		goto _3
	}

	Xferaiseexcept(tls, int32(16))
	goto _4

_3:
	Xferaiseexcept(tls, int32(32))
_4:
_2:
	_z = float32(_result)
	return _z

_1:
	Xfesetround(tls, int32(0xc00))
	_vxy = _xy
	_adjusted_result = _vxy + float64(_z)
	Xfesetround(tls, int32(0))
	if _result != _adjusted_result {
		goto _5
	}

	*(*float64)(unsafe.Pointer(_u)) = _adjusted_result
	*(*uint64)(unsafe.Pointer(_u))++
	_adjusted_result = *(*float64)(unsafe.Pointer(_u))
_5:
	_z = float32(_adjusted_result)
	return _z
}

type t387__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t387__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t41uint64_t = uint64

// linking fmal.o

// Xfmal is defined at fmal.c:31:13
func Xfmal(tls TLS, _x float64, _y float64, _z float64) (r float64) {
	return Xfma(tls, _x, _y, _z)
}

type t388__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t388__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// linking fmax.o

// Xfmax is defined at fmax.c:3:8
func Xfmax(tls TLS, _x float64, _y float64) (r float64) {
	if x9__DOUBLE_BITS(tls, _x)&uint64(9223372036854775807) <= uint64(9218868437227405312) {
		goto _1
	}

	return _y

_1:
	if x9__DOUBLE_BITS(tls, _y)&uint64(9223372036854775807) <= uint64(9218868437227405312) {
		goto _2
	}

	return _x

_2:
	if int32(x9__DOUBLE_BITS(tls, _x)>>(uint(63)%64)) == int32(x9__DOUBLE_BITS(tls, _y)>>(uint(63)%64)) {
		goto _3
	}

	if int32(x9__DOUBLE_BITS(tls, _x)>>(uint(63)%64)) != 0 {
		return _y
	}

	return _x

_3:
	if _x < _y {
		return _y
	}

	return _x
}

type t389__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t389__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// x__DOUBLE_BITS is defined at math.h:49:36
func x9__DOUBLE_BITS(tls TLS, ___f float64) (r uint64) {
	esc := MustMalloc(8)
	var ___u = esc // *struct{F__f [0]float64;F__i [0]uint64;F int64}
	defer Free(esc)
	*(*float64)(unsafe.Pointer(___u)) = ___f
	return *(*uint64)(unsafe.Pointer(___u))
}

// linking fmaxf.o

// Xfmaxf is defined at fmaxf.c:3:7
func Xfmaxf(tls TLS, _x float32, _y float32) (r float32) {
	if x7__FLOAT_BITS(tls, _x)&uint32(0x7fffffff) <= uint32(0x7f800000) {
		goto _1
	}

	return _y

_1:
	if x7__FLOAT_BITS(tls, _y)&uint32(0x7fffffff) <= uint32(0x7f800000) {
		goto _2
	}

	return _x

_2:
	if int32(x7__FLOAT_BITS(tls, _x)>>(uint(31)%32)) == int32(x7__FLOAT_BITS(tls, _y)>>(uint(31)%32)) {
		goto _3
	}

	if int32(x7__FLOAT_BITS(tls, _x)>>(uint(31)%32)) != 0 {
		return _y
	}

	return _x

_3:
	if _x < _y {
		return _y
	}

	return _x
}

type t390__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t390__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// x__FLOAT_BITS is defined at math.h:43:26
func x7__FLOAT_BITS(tls TLS, ___f float32) (r uint32) {
	esc := MustMalloc(4)
	var ___u = esc // *struct{F__f [0]float32;F__i [0]uint32;F int32}
	defer Free(esc)
	*(*float32)(unsafe.Pointer(___u)) = ___f
	return *(*uint32)(unsafe.Pointer(___u))
}

// linking fmaxl.o

// Xfmaxl is defined at fmaxl.c:5:13
func Xfmaxl(tls TLS, _x float64, _y float64) (r float64) {
	return Xfmax(tls, _x, _y)
}

type t391__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t391__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// linking fmin.o

// Xfmin is defined at fmin.c:3:8
func Xfmin(tls TLS, _x float64, _y float64) (r float64) {
	if x10__DOUBLE_BITS(tls, _x)&uint64(9223372036854775807) <= uint64(9218868437227405312) {
		goto _1
	}

	return _y

_1:
	if x10__DOUBLE_BITS(tls, _y)&uint64(9223372036854775807) <= uint64(9218868437227405312) {
		goto _2
	}

	return _x

_2:
	if int32(x10__DOUBLE_BITS(tls, _x)>>(uint(63)%64)) == int32(x10__DOUBLE_BITS(tls, _y)>>(uint(63)%64)) {
		goto _3
	}

	if int32(x10__DOUBLE_BITS(tls, _x)>>(uint(63)%64)) != 0 {
		return _x
	}

	return _y

_3:
	if _x < _y {
		return _x
	}

	return _y
}

type t392__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t392__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// x__DOUBLE_BITS is defined at math.h:49:36
func x10__DOUBLE_BITS(tls TLS, ___f float64) (r uint64) {
	esc := MustMalloc(8)
	var ___u = esc // *struct{F__f [0]float64;F__i [0]uint64;F int64}
	defer Free(esc)
	*(*float64)(unsafe.Pointer(___u)) = ___f
	return *(*uint64)(unsafe.Pointer(___u))
}

// linking fminf.o

// Xfminf is defined at fminf.c:3:7
func Xfminf(tls TLS, _x float32, _y float32) (r float32) {
	if x8__FLOAT_BITS(tls, _x)&uint32(0x7fffffff) <= uint32(0x7f800000) {
		goto _1
	}

	return _y

_1:
	if x8__FLOAT_BITS(tls, _y)&uint32(0x7fffffff) <= uint32(0x7f800000) {
		goto _2
	}

	return _x

_2:
	if int32(x8__FLOAT_BITS(tls, _x)>>(uint(31)%32)) == int32(x8__FLOAT_BITS(tls, _y)>>(uint(31)%32)) {
		goto _3
	}

	if int32(x8__FLOAT_BITS(tls, _x)>>(uint(31)%32)) != 0 {
		return _x
	}

	return _y

_3:
	if _x < _y {
		return _x
	}

	return _y
}

type t393__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t393__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// x__FLOAT_BITS is defined at math.h:43:26
func x8__FLOAT_BITS(tls TLS, ___f float32) (r uint32) {
	esc := MustMalloc(4)
	var ___u = esc // *struct{F__f [0]float32;F__i [0]uint32;F int32}
	defer Free(esc)
	*(*float32)(unsafe.Pointer(___u)) = ___f
	return *(*uint32)(unsafe.Pointer(___u))
}

// linking fminl.o

// Xfminl is defined at fminl.c:5:13
func Xfminl(tls TLS, _x float64, _y float64) (r float64) {
	return Xfmin(tls, _x, _y)
}

type t394__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t394__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// linking fmod.o

// Xfmod is defined at fmod.c:4:8
func Xfmod(tls TLS, _x float64, _y float64) (r float64) {
	esc := MustMalloc(24)
	var (
		_ux  = esc      // *struct{Ff [0]float64;Fi [0]uint64;F int64}
		_uy  = esc + 16 // *struct{Ff [0]float64;Fi [0]uint64;F int64}
		_ex  int32
		_ey  int32
		_sx  int32
		_i   uint64
		_uxi uint64
	)
	defer Free(esc)
	*(*struct {
		Ff [0]float64
		Fi [0]uint64
		F  int64
	})(unsafe.Pointer(_ux)) = *(*struct {
		Ff [0]float64
		Fi [0]uint64
		F  int64
	})(unsafe.Pointer(&struct{ f float64 }{_x}))
	*(*struct {
		Ff [0]float64
		Fi [0]uint64
		F  int64
	})(unsafe.Pointer(_uy)) = *(*struct {
		Ff [0]float64
		Fi [0]uint64
		F  int64
	})(unsafe.Pointer(&struct{ f float64 }{_y}))
	_ex = int32(*(*uint64)(unsafe.Pointer(_ux)) >> (uint(52) % 64) & uint64(0x7ff))
	_ey = int32(*(*uint64)(unsafe.Pointer(_uy)) >> (uint(52) % 64) & uint64(0x7ff))
	_sx = int32(*(*uint64)(unsafe.Pointer(_ux)) >> (uint(63) % 64))
	_uxi = *(*uint64)(unsafe.Pointer(_ux))
	if *(*uint64)(unsafe.Pointer(_uy))<<(uint(1)%64) != uint64(0) && x11__DOUBLE_BITS(tls, _y)&uint64(9223372036854775807) <= uint64(9218868437227405312) && _ex != int32(0x7ff) {
		goto _1
	}

	return float64(_x*_y) / float64(_x*_y)

_1:
	if _uxi<<(uint(1)%64) > *(*uint64)(unsafe.Pointer(_uy))<<(uint(1)%64) {
		goto _2
	}

	if _uxi<<(uint(1)%64) != *(*uint64)(unsafe.Pointer(_uy))<<(uint(1)%64) {
		goto _3
	}

	return float64(0) * _x

_3:
	return _x

_2:
	if _ex != 0 {
		goto _4
	}

	_i = _uxi << (uint(12) % 64)
_6:
	if _i>>(uint(63)%64) != uint64(0) {
		goto _8
	}

	_ex--
	_i = _i << uint32(1)
	goto _6

_8:
	_uxi = _uxi << uint32(-_ex+int32(1))
	goto _5

_4:
	_uxi = _uxi & uint64(4503599627370495)
	_uxi = _uxi | uint64(4503599627370496)
_5:
	if _ey != 0 {
		goto _9
	}

	_i = *(*uint64)(unsafe.Pointer(_uy)) << (uint(12) % 64)
_11:
	if _i>>(uint(63)%64) != uint64(0) {
		goto _13
	}

	_ey--
	_i = _i << uint32(1)
	goto _11

_13:
	{
		p := (*uint64)(unsafe.Pointer(_uy))
		*p = *p << uint32(-_ey+int32(1))
	}
	goto _10

_9:
	{
		p := (*uint64)(unsafe.Pointer(_uy))
		*p = *p & uint64(4503599627370495)
	}
	{
		p := (*uint64)(unsafe.Pointer(_uy))
		*p = *p | uint64(4503599627370496)
	}
_10:
_14:
	if _ex <= _ey {
		goto _16
	}

	_i = _uxi - *(*uint64)(unsafe.Pointer(_uy))
	if _i>>(uint(63)%64) != uint64(0) {
		goto _17
	}

	if _i != uint64(0) {
		goto _18
	}

	return float64(0) * _x

_18:
	_uxi = _i
_17:
	_uxi = _uxi << uint32(1)
	_ex--
	goto _14

_16:
	_i = _uxi - *(*uint64)(unsafe.Pointer(_uy))
	if _i>>(uint(63)%64) != uint64(0) {
		goto _19
	}

	if _i != uint64(0) {
		goto _20
	}

	return float64(0) * _x

_20:
	_uxi = _i
_19:
_21:
	if _uxi>>(uint(52)%64) != uint64(0) {
		goto _23
	}

	_uxi = _uxi << uint32(1)
	_ex--
	goto _21

_23:
	if _ex <= int32(0) {
		goto _24
	}

	_uxi = _uxi - uint64(4503599627370496)
	_uxi = _uxi | uint64(_ex)<<(uint(52)%64)
	goto _25

_24:
	_uxi = _uxi >> uint32(-_ex+int32(1))
_25:
	_uxi = _uxi | uint64(_sx)<<(uint(63)%64)
	*(*uint64)(unsafe.Pointer(_ux)) = _uxi
	return *(*float64)(unsafe.Pointer(_ux))
}

type t395__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t395__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t42uint64_t = uint64

// x__DOUBLE_BITS is defined at math.h:49:36
func x11__DOUBLE_BITS(tls TLS, ___f float64) (r uint64) {
	esc := MustMalloc(8)
	var ___u = esc // *struct{F__f [0]float64;F__i [0]uint64;F int64}
	defer Free(esc)
	*(*float64)(unsafe.Pointer(___u)) = ___f
	return *(*uint64)(unsafe.Pointer(___u))
}

// linking fmodf.o

// Xfmodf is defined at fmodf.c:4:7
func Xfmodf(tls TLS, _x float32, _y float32) (r float32) {
	esc := MustMalloc(20)
	var (
		_ux  = esc      // *struct{Ff [0]float32;Fi [0]uint32;F int32}
		_uy  = esc + 16 // *struct{Ff [0]float32;Fi [0]uint32;F int32}
		_ex  int32
		_ey  int32
		_sx  uint32
		_i   uint32
		_uxi uint32
	)
	defer Free(esc)
	*(*struct {
		Ff [0]float32
		Fi [0]uint32
		F  int32
	})(unsafe.Pointer(_ux)) = *(*struct {
		Ff [0]float32
		Fi [0]uint32
		F  int32
	})(unsafe.Pointer(&struct{ f float32 }{_x}))
	*(*struct {
		Ff [0]float32
		Fi [0]uint32
		F  int32
	})(unsafe.Pointer(_uy)) = *(*struct {
		Ff [0]float32
		Fi [0]uint32
		F  int32
	})(unsafe.Pointer(&struct{ f float32 }{_y}))
	_ex = int32(*(*uint32)(unsafe.Pointer(_ux)) >> (uint(23) % 32) & uint32(0xff))
	_ey = int32(*(*uint32)(unsafe.Pointer(_uy)) >> (uint(23) % 32) & uint32(0xff))
	_sx = *(*uint32)(unsafe.Pointer(_ux)) & uint32(0x80000000)
	_uxi = *(*uint32)(unsafe.Pointer(_ux))
	if *(*uint32)(unsafe.Pointer(_uy))<<(uint(1)%32) != uint32(0) && x9__FLOAT_BITS(tls, _y)&uint32(0x7fffffff) <= uint32(0x7f800000) && _ex != int32(0xff) {
		goto _1
	}

	return float32(_x*_y) / float32(_x*_y)

_1:
	if _uxi<<(uint(1)%32) > *(*uint32)(unsafe.Pointer(_uy))<<(uint(1)%32) {
		goto _2
	}

	if _uxi<<(uint(1)%32) != *(*uint32)(unsafe.Pointer(_uy))<<(uint(1)%32) {
		goto _3
	}

	return float32(0) * _x

_3:
	return _x

_2:
	if _ex != 0 {
		goto _4
	}

	_i = _uxi << (uint(9) % 32)
_6:
	if _i>>(uint(31)%32) != uint32(0) {
		goto _8
	}

	_ex--
	_i = _i << uint32(1)
	goto _6

_8:
	_uxi = _uxi << uint32(-_ex+int32(1))
	goto _5

_4:
	_uxi = _uxi & uint32(8388607)
	_uxi = _uxi | uint32(8388608)
_5:
	if _ey != 0 {
		goto _9
	}

	_i = *(*uint32)(unsafe.Pointer(_uy)) << (uint(9) % 32)
_11:
	if _i>>(uint(31)%32) != uint32(0) {
		goto _13
	}

	_ey--
	_i = _i << uint32(1)
	goto _11

_13:
	{
		p := (*uint32)(unsafe.Pointer(_uy))
		*p = *p << uint32(-_ey+int32(1))
	}
	goto _10

_9:
	{
		p := (*uint32)(unsafe.Pointer(_uy))
		*p = *p & uint32(8388607)
	}
	{
		p := (*uint32)(unsafe.Pointer(_uy))
		*p = *p | uint32(8388608)
	}
_10:
_14:
	if _ex <= _ey {
		goto _16
	}

	_i = _uxi - *(*uint32)(unsafe.Pointer(_uy))
	if _i>>(uint(31)%32) != uint32(0) {
		goto _17
	}

	if _i != uint32(0) {
		goto _18
	}

	return float32(0) * _x

_18:
	_uxi = _i
_17:
	_uxi = _uxi << uint32(1)
	_ex--
	goto _14

_16:
	_i = _uxi - *(*uint32)(unsafe.Pointer(_uy))
	if _i>>(uint(31)%32) != uint32(0) {
		goto _19
	}

	if _i != uint32(0) {
		goto _20
	}

	return float32(0) * _x

_20:
	_uxi = _i
_19:
_21:
	if _uxi>>(uint(23)%32) != uint32(0) {
		goto _23
	}

	_uxi = _uxi << uint32(1)
	_ex--
	goto _21

_23:
	if _ex <= int32(0) {
		goto _24
	}

	_uxi = _uxi - uint32(8388608)
	_uxi = _uxi | uint32(_ex)<<(uint(23)%32)
	goto _25

_24:
	_uxi = _uxi >> uint32(-_ex+int32(1))
_25:
	_uxi = _uxi | _sx
	*(*uint32)(unsafe.Pointer(_ux)) = _uxi
	return *(*float32)(unsafe.Pointer(_ux))
}

type t396__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t396__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t61uint32_t = uint32

// x__FLOAT_BITS is defined at math.h:43:26
func x9__FLOAT_BITS(tls TLS, ___f float32) (r uint32) {
	esc := MustMalloc(4)
	var ___u = esc // *struct{F__f [0]float32;F__i [0]uint32;F int32}
	defer Free(esc)
	*(*float32)(unsafe.Pointer(___u)) = ___f
	return *(*uint32)(unsafe.Pointer(___u))
}

// linking fmodl.o

// Xfmodl is defined at fmodl.c:4:13
func Xfmodl(tls TLS, _x float64, _y float64) (r float64) {
	return Xfmod(tls, _x, _y)
}

type t397__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t397__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// linking frexp.o

// Xfrexp is defined at frexp.c:4:8
func Xfrexp(tls TLS, _x float64, _e uintptr /* *int32 */) (r float64) {
	esc := MustMalloc(8)
	var (
		_y  = esc // *struct{Fd [0]float64;Fi [0]uint64;F int64}
		_ee int32
	)
	defer Free(esc)
	*(*struct {
		Fd [0]float64
		Fi [0]uint64
		F  int64
	})(unsafe.Pointer(_y)) = *(*struct {
		Fd [0]float64
		Fi [0]uint64
		F  int64
	})(unsafe.Pointer(&struct{ f float64 }{_x}))
	_ee = int32(*(*uint64)(unsafe.Pointer(_y)) >> (uint(52) % 64) & uint64(0x7ff))
	if _ee != 0 {
		goto _1
	}

	if _x == 0 {
		goto _3
	}

	_x = Xfrexp(tls, _x*float64(1.8446744073709552e+19), _e)
	{
		p := (*int32)(unsafe.Pointer(_e))
		*p = *p - int32(64)
	}
	goto _4

_3:
	*(*int32)(unsafe.Pointer(_e)) = int32(0)
_4:
	return _x

	goto _2

_1:
	if _ee != int32(0x7ff) {
		goto _5
	}

	return _x

_5:
_2:
	*(*int32)(unsafe.Pointer(_e)) = _ee - int32(0x3fe)
	{
		p := (*uint64)(unsafe.Pointer(_y))
		*p = *p & uint64(0x800fffffffffffff)
	}
	{
		p := (*uint64)(unsafe.Pointer(_y))
		*p = *p | uint64(0x3fe0000000000000)
	}
	return *(*float64)(unsafe.Pointer(_y))
}

type t398__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t398__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t43uint64_t = uint64

// linking frexpf.o

// Xfrexpf is defined at frexpf.c:4:7
func Xfrexpf(tls TLS, _x float32, _e uintptr /* *int32 */) (r float32) {
	esc := MustMalloc(4)
	var (
		_y  = esc // *struct{Ff [0]float32;Fi [0]uint32;F int32}
		_ee int32
	)
	defer Free(esc)
	*(*struct {
		Ff [0]float32
		Fi [0]uint32
		F  int32
	})(unsafe.Pointer(_y)) = *(*struct {
		Ff [0]float32
		Fi [0]uint32
		F  int32
	})(unsafe.Pointer(&struct{ f float32 }{_x}))
	_ee = int32(*(*uint32)(unsafe.Pointer(_y)) >> (uint(23) % 32) & uint32(0xff))
	if _ee != 0 {
		goto _1
	}

	if _x == 0 {
		goto _3
	}

	_x = Xfrexpf(tls, float32(float64(_x)*float64(1.8446744073709552e+19)), _e)
	{
		p := (*int32)(unsafe.Pointer(_e))
		*p = *p - int32(64)
	}
	goto _4

_3:
	*(*int32)(unsafe.Pointer(_e)) = int32(0)
_4:
	return _x

	goto _2

_1:
	if _ee != int32(0xff) {
		goto _5
	}

	return _x

_5:
_2:
	*(*int32)(unsafe.Pointer(_e)) = _ee - int32(0x7e)
	{
		p := (*uint32)(unsafe.Pointer(_y))
		*p = uint32(uint64(*p) & uint64(0x807fffff))
	}
	{
		p := (*uint32)(unsafe.Pointer(_y))
		*p = uint32(uint64(*p) | uint64(0x3f000000))
	}
	return *(*float32)(unsafe.Pointer(_y))
}

type t399__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t399__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t62uint32_t = uint32

// linking frexpl.o

// Xfrexpl is defined at frexpl.c:4:13
func Xfrexpl(tls TLS, _x float64, _e uintptr /* *int32 */) (r float64) {
	return Xfrexp(tls, _x, _e)
}

type t400__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t400__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// linking hypot.o

// Xhypot is defined at hypot.c:22:8
func Xhypot(tls TLS, _x float64, _y float64) (r float64) {
	esc := MustMalloc(88)
	var (
		_ux = esc      // *struct{Ff [0]float64;Fi [0]uint64;F int64}
		_uy = esc + 16 // *struct{Ff [0]float64;Fi [0]uint64;F int64}
		_ut struct {
			Ff [0]float64
			Fi [0]uint64
			F  int64
		}
		_ex int32
		_ey int32
		_hx = esc + 32 // *Tdouble_t = float64
		_lx = esc + 48 // *Tdouble_t = float64
		_hy = esc + 64 // *Tdouble_t = float64
		_ly = esc + 80 // *Tdouble_t = float64
		_z  float64
	)
	defer Free(esc)
	*(*struct {
		Ff [0]float64
		Fi [0]uint64
		F  int64
	})(unsafe.Pointer(_ux)) = *(*struct {
		Ff [0]float64
		Fi [0]uint64
		F  int64
	})(unsafe.Pointer(&struct{ f float64 }{_x}))
	*(*struct {
		Ff [0]float64
		Fi [0]uint64
		F  int64
	})(unsafe.Pointer(_uy)) = *(*struct {
		Ff [0]float64
		Fi [0]uint64
		F  int64
	})(unsafe.Pointer(&struct{ f float64 }{_y}))
	{
		p := (*uint64)(unsafe.Pointer(_ux))
		*p = *p & uint64(9223372036854775807)
	}
	{
		p := (*uint64)(unsafe.Pointer(_uy))
		*p = *p & uint64(9223372036854775807)
	}
	if *(*uint64)(unsafe.Pointer(_ux)) >= *(*uint64)(unsafe.Pointer(_uy)) {
		goto _1
	}

	_ut = *(*struct {
		Ff [0]float64
		Fi [0]uint64
		F  int64
	})(unsafe.Pointer(_ux))
	*(*struct {
		Ff [0]float64
		Fi [0]uint64
		F  int64
	})(unsafe.Pointer(_ux)) = *(*struct {
		Ff [0]float64
		Fi [0]uint64
		F  int64
	})(unsafe.Pointer(_uy))
	*(*struct {
		Ff [0]float64
		Fi [0]uint64
		F  int64
	})(unsafe.Pointer(_uy)) = _ut
_1:
	_ex = int32(*(*uint64)(unsafe.Pointer(_ux)) >> (uint(52) % 64))
	_ey = int32(*(*uint64)(unsafe.Pointer(_uy)) >> (uint(52) % 64))
	_x = *(*float64)(unsafe.Pointer(_ux))
	_y = *(*float64)(unsafe.Pointer(_uy))
	if _ey != int32(0x7ff) {
		goto _2
	}

	return _y

_2:
	if _ex != int32(0x7ff) && *(*uint64)(unsafe.Pointer(_uy)) != uint64(0) {
		goto _3
	}

	return _x

_3:
	if _ex-_ey <= int32(64) {
		goto _4
	}

	return _x + _y

_4:
	_z = float64(1)
	if _ex <= int32(1533) {
		goto _5
	}

	_z = float64(5.260135901548374e+210)
	_x = _x * float64(1.90109156629516e-211)
	_y = _y * float64(1.90109156629516e-211)
	goto _6

_5:
	if _ey >= int32(573) {
		goto _7
	}

	_z = float64(1.90109156629516e-211)
	_x = _x * float64(5.260135901548374e+210)
	_y = _y * float64(5.260135901548374e+210)
_7:
_6:
	xsq(tls, _hx, _lx, _x)
	xsq(tls, _hy, _ly, _y)
	return _z * Xsqrt(tls, float64(float64(*(*float64)(unsafe.Pointer(_ly))+*(*float64)(unsafe.Pointer(_lx)))+*(*float64)(unsafe.Pointer(_hy)))+*(*float64)(unsafe.Pointer(_hx)))
}

type t401__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t401__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t44uint64_t = uint64

type t22double_t = float64

// xsq is defined at hypot.c:11:13
func xsq(tls TLS, _hi uintptr /* *Tdouble_t = float64 */, _lo uintptr /* *Tdouble_t = float64 */, _x float64) {
	var (
		_xh float64
		_xl float64
		_xc float64
	)
	_xc = _x * float64(1.34217729e+08)
	_xh = float64(_x-_xc) + _xc
	_xl = _x - _xh
	*(*float64)(unsafe.Pointer(_hi)) = _x * _x
	*(*float64)(unsafe.Pointer(_lo)) = float64(float64(float64(_xh*_xh)-*(*float64)(unsafe.Pointer(_hi)))+float64(float64(float64(2)*_xh)*_xl)) + float64(_xl*_xl)
}

// linking hypotf.o

// Xhypotf is defined at hypotf.c:4:7
func Xhypotf(tls TLS, _x float32, _y float32) (r float32) {
	esc := MustMalloc(20)
	var (
		_ux = esc      // *struct{Ff [0]float32;Fi [0]uint32;F int32}
		_uy = esc + 16 // *struct{Ff [0]float32;Fi [0]uint32;F int32}
		_ut struct {
			Ff [0]float32
			Fi [0]uint32
			F  int32
		}
		_z float32
	)
	defer Free(esc)
	*(*struct {
		Ff [0]float32
		Fi [0]uint32
		F  int32
	})(unsafe.Pointer(_ux)) = *(*struct {
		Ff [0]float32
		Fi [0]uint32
		F  int32
	})(unsafe.Pointer(&struct{ f float32 }{_x}))
	*(*struct {
		Ff [0]float32
		Fi [0]uint32
		F  int32
	})(unsafe.Pointer(_uy)) = *(*struct {
		Ff [0]float32
		Fi [0]uint32
		F  int32
	})(unsafe.Pointer(&struct{ f float32 }{_y}))
	{
		p := (*uint32)(unsafe.Pointer(_ux))
		*p = *p & uint32(2147483647)
	}
	{
		p := (*uint32)(unsafe.Pointer(_uy))
		*p = *p & uint32(2147483647)
	}
	if *(*uint32)(unsafe.Pointer(_ux)) >= *(*uint32)(unsafe.Pointer(_uy)) {
		goto _1
	}

	_ut = *(*struct {
		Ff [0]float32
		Fi [0]uint32
		F  int32
	})(unsafe.Pointer(_ux))
	*(*struct {
		Ff [0]float32
		Fi [0]uint32
		F  int32
	})(unsafe.Pointer(_ux)) = *(*struct {
		Ff [0]float32
		Fi [0]uint32
		F  int32
	})(unsafe.Pointer(_uy))
	*(*struct {
		Ff [0]float32
		Fi [0]uint32
		F  int32
	})(unsafe.Pointer(_uy)) = _ut
_1:
	_x = *(*float32)(unsafe.Pointer(_ux))
	_y = *(*float32)(unsafe.Pointer(_uy))
	if *(*uint32)(unsafe.Pointer(_uy)) != uint32(2139095040) {
		goto _2
	}

	return _y

_2:
	if *(*uint32)(unsafe.Pointer(_ux)) < uint32(2139095040) && *(*uint32)(unsafe.Pointer(_uy)) != uint32(0) && *(*uint32)(unsafe.Pointer(_ux))-*(*uint32)(unsafe.Pointer(_uy)) < uint32(209715200) {
		goto _3
	}

	return _x + _y

_3:
	_z = float32(1)
	if *(*uint32)(unsafe.Pointer(_ux)) < uint32(1568669696) {
		goto _4
	}

	_z = float32(1.2379401e+27)
	_x = _x * float32(8.077936e-28)
	_y = _y * float32(8.077936e-28)
	goto _5

_4:
	if *(*uint32)(unsafe.Pointer(_uy)) >= uint32(562036736) {
		goto _6
	}

	_z = float32(8.077936e-28)
	_x = _x * float32(1.2379401e+27)
	_y = _y * float32(1.2379401e+27)
_6:
_5:
	return _z * Xsqrtf(tls, float32(float64(float64(_x)*float64(_x))+float64(float64(_y)*float64(_y))))
}

type t402__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t402__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t63uint32_t = uint32

type t7float_t = float32

// linking hypotl.o

// Xhypotl is defined at hypotl.c:4:13
func Xhypotl(tls TLS, _x float64, _y float64) (r float64) {
	return Xhypot(tls, _x, _y)
}

type t403__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t403__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// linking ilogb.o

// Xilogb is defined at ilogb.c:4:5
func Xilogb(tls TLS, _x float64) (r int32) {
	esc := MustMalloc(8)
	var (
		_u    = esc // *struct{Ff [0]float64;Fi [0]uint64;F int64}
		_i    uint64
		_e    int32
		___x  float32
		_     = ___x
		_1__x float64
		_     = _1__x
		_2__x float64
		_     = _2__x
		_3__x float32
		_     = _3__x
		_4__x float64
		_     = _4__x
		_5__x float64
		_     = _5__x
	)
	defer Free(esc)
	*(*struct {
		Ff [0]float64
		Fi [0]uint64
		F  int64
	})(unsafe.Pointer(_u)) = *(*struct {
		Ff [0]float64
		Fi [0]uint64
		F  int64
	})(unsafe.Pointer(&struct{ f float64 }{_x}))
	_i = *(*uint64)(unsafe.Pointer(_u))
	_e = int32(_i >> (uint(52) % 64) & uint64(0x7ff))
	if _e != 0 {
		goto _1
	}

	_i = _i << uint32(12)
	if _i != uint64(0) {
		goto _2
	}

	___x = float32(math.NaN())
	goto _4

	goto _5

	_1__x = math.NaN()
	goto _6

_5:
	_2__x = math.NaN()
_6:
_4:
	return int32(-2147483648)

_2:
	_e = int32(-0x3ff)
_7:
	if _i>>(uint(63)%64) != uint64(0) {
		goto _9
	}

	_e--
	_i = _i << uint32(1)
	goto _7

_9:
	return _e

_1:
	if _e != int32(0x7ff) {
		goto _10
	}

	_3__x = float32(math.NaN())
	goto _12

	goto _13

	_4__x = math.NaN()
	goto _14

_13:
	_5__x = math.NaN()
_14:
_12:
	if (_i << (uint(12) % 64)) != 0 {
		return int32(-2147483648)
	}

	return int32(0x7fffffff)

_10:
	return _e - int32(0x3ff)
}

type t404__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t404__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t45uint64_t = uint64

// linking ilogbf.o

// Xilogbf is defined at ilogbf.c:4:5
func Xilogbf(tls TLS, _x float32) (r int32) {
	esc := MustMalloc(4)
	var (
		_u    = esc // *struct{Ff [0]float32;Fi [0]uint32;F int32}
		_i    uint32
		_e    int32
		___x  float32
		_     = ___x
		_1__x float64
		_     = _1__x
		_2__x float64
		_     = _2__x
		_3__x float32
		_     = _3__x
		_4__x float64
		_     = _4__x
		_5__x float64
		_     = _5__x
	)
	defer Free(esc)
	*(*struct {
		Ff [0]float32
		Fi [0]uint32
		F  int32
	})(unsafe.Pointer(_u)) = *(*struct {
		Ff [0]float32
		Fi [0]uint32
		F  int32
	})(unsafe.Pointer(&struct{ f float32 }{_x}))
	_i = *(*uint32)(unsafe.Pointer(_u))
	_e = int32(_i >> (uint(23) % 32) & uint32(0xff))
	if _e != 0 {
		goto _1
	}

	_i = _i << uint32(9)
	if _i != uint32(0) {
		goto _2
	}

	___x = float32(math.NaN())
	goto _4

	goto _5

	_1__x = math.NaN()
	goto _6

_5:
	_2__x = math.NaN()
_6:
_4:
	return int32(-2147483648)

_2:
	_e = int32(-0x7f)
_7:
	if _i>>(uint(31)%32) != uint32(0) {
		goto _9
	}

	_e--
	_i = _i << uint32(1)
	goto _7

_9:
	return _e

_1:
	if _e != int32(0xff) {
		goto _10
	}

	_3__x = float32(math.NaN())
	goto _12

	goto _13

	_4__x = math.NaN()
	goto _14

_13:
	_5__x = math.NaN()
_14:
_12:
	if (_i << (uint(9) % 32)) != 0 {
		return int32(-2147483648)
	}

	return int32(0x7fffffff)

_10:
	return _e - int32(0x7f)
}

type t405__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t405__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t64uint32_t = uint32

// linking ilogbl.o

// Xilogbl is defined at ilogbl.c:5:5
func Xilogbl(tls TLS, _x float64) (r int32) {
	return Xilogb(tls, _x)
}

type t406__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t406__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// linking j0.o

// Xj0 is defined at j0.c:111:8
func Xj0(tls TLS, _x float64) (r float64) {
	esc := MustMalloc(8)
	var (
		_z   float64
		_r   float64
		_s   float64
		_ix  uint32
		___u = esc // *struct{Ff [0]float64;Fi [0]uint64;F int64}
	)
	defer Free(esc)
	*(*float64)(unsafe.Pointer(___u)) = _x
	_ix = uint32(*(*uint64)(unsafe.Pointer(___u)) >> (uint(32) % 64))
	_ix = _ix & uint32(0x7fffffff)
	if _ix < uint32(0x7ff00000) {
		goto _2
	}

	return float64(1) / float64(_x*_x)

_2:
	_x = Xfabs(tls, _x)
	if _ix < uint32(0x40000000) {
		goto _3
	}

	return xcommon(tls, _ix, _x, int32(0))

_3:
	if _ix < uint32(0x3f200000) {
		goto _4
	}

	_z = _x * _x
	_r = _z * float64(xR02+float64(_z*float64(xR03+float64(_z*float64(xR04+float64(_z*xR05))))))
	_s = float64(1) + float64(_z*float64(xS01+float64(_z*float64(xS02+float64(_z*float64(xS03+float64(_z*xS04)))))))
	return float64(float64(float64(1)+float64(_x/float64(2)))*float64(float64(1)-float64(_x/float64(2)))) + float64(_z*float64(_r/_s))

_4:
	if _ix < uint32(0x38000000) {
		goto _5
	}

	_x = float64(float64(0.25)*_x) * _x
_5:
	return float64(1) - _x
}

// Xy0 is defined at j0.c:159:8
func Xy0(tls TLS, _x float64) (r float64) {
	esc := MustMalloc(8)
	var (
		_z   float64
		_u   float64
		_v   float64
		_ix  uint32
		_lx  uint32
		___u = esc // *struct{Ff [0]float64;Fi [0]uint64;F int64}
	)
	defer Free(esc)
	*(*float64)(unsafe.Pointer(___u)) = _x
	_ix = uint32(*(*uint64)(unsafe.Pointer(___u)) >> (uint(32) % 64))
	_lx = uint32(*(*uint64)(unsafe.Pointer(___u)))
	if _ix<<(uint(1)%32)|_lx != uint32(0) {
		goto _2
	}

	return math.Inf(-1)

_2:
	if (_ix >> (uint(31) % 32)) == 0 {
		goto _3
	}

	return math.NaN()

_3:
	if _ix < uint32(0x7ff00000) {
		goto _4
	}

	return float64(1) / _x

_4:
	if _ix < uint32(0x40000000) {
		goto _5
	}

	return xcommon(tls, _ix, _x, int32(1))

_5:
	if _ix < uint32(0x3e400000) {
		goto _6
	}

	_z = _x * _x
	_u = xu00 + float64(_z*float64(xu01+float64(_z*float64(xu02+float64(_z*float64(xu03+float64(_z*float64(xu04+float64(_z*float64(xu05+float64(_z*xu06)))))))))))
	_v = float64(1) + float64(_z*float64(xv01+float64(_z*float64(xv02+float64(_z*float64(xv03+float64(_z*xv04)))))))
	return float64(_u/_v) + float64(xtpi*float64(Xj0(tls, _x)*Xlog(tls, _x)))

_6:
	return xu00 + float64(xtpi*Xlog(tls, _x))
}

type t407__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t407__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t65uint32_t = uint32

type t46uint64_t = uint64

// xcommon is defined at j0.c:66:15
func xcommon(tls TLS, _ix uint32, _x float64, _y0 int32) (r float64) {
	var (
		_s  float64
		_c  float64
		_ss float64
		_cc float64
		_z  float64
	)
	_s = Xsin(tls, _x)
	_c = Xcos(tls, _x)
	if _y0 == 0 {
		goto _1
	}

	_c = -_c
_1:
	_cc = _s + _c
	if _ix >= uint32(0x7fe00000) {
		goto _2
	}

	_ss = _s - _c
	_z = -Xcos(tls, float64(2)*_x)
	if float64(_s*_c) >= float64(0) {
		goto _3
	}

	_cc = _z / _ss
	goto _4

_3:
	_ss = _z / _cc
_4:
	if _ix >= uint32(0x48000000) {
		goto _5
	}

	if _y0 == 0 {
		goto _6
	}

	_ss = -_ss
_6:
	_cc = float64(xpzero(tls, _x)*_cc) - float64(xqzero(tls, _x)*_ss)
_5:
_2:
	return float64(xinvsqrtpi*_cc) / Xsqrt(tls, _x)
}

// xR02 float64, escapes: false, j0.c:102:1
var xR02 = float64(0.015624999999999995)

// xR03 float64, escapes: false, j0.c:103:1
var xR03 = float64(-0.00018997929423885472)

// xR04 float64, escapes: false, j0.c:104:1
var xR04 = float64(1.8295404953270067e-06)

// xR05 float64, escapes: false, j0.c:105:1
var xR05 = float64(-4.618326885321032e-09)

// xS01 float64, escapes: false, j0.c:106:1
var xS01 = float64(0.015619102946489001)

// xS02 float64, escapes: false, j0.c:107:1
var xS02 = float64(0.00011692678466333745)

// xS03 float64, escapes: false, j0.c:108:1
var xS03 = float64(5.135465502073181e-07)

// xS04 float64, escapes: false, j0.c:109:1
var xS04 = float64(1.1661400333379e-09)

// xu00 float64, escapes: false, j0.c:147:1
var xu00 = float64(-0.07380429510868723)

// xu01 float64, escapes: false, j0.c:148:1
var xu01 = float64(0.17666645250918112)

// xu02 float64, escapes: false, j0.c:149:1
var xu02 = float64(-0.01381856719455969)

// xu03 float64, escapes: false, j0.c:150:1
var xu03 = float64(0.00034745343209368365)

// xu04 float64, escapes: false, j0.c:151:1
var xu04 = float64(-3.8140705372436416e-06)

// xu05 float64, escapes: false, j0.c:152:1
var xu05 = float64(1.9559013703502292e-08)

// xu06 float64, escapes: false, j0.c:153:1
var xu06 = float64(-3.982051941321034e-11)

// xv01 float64, escapes: false, j0.c:154:1
var xv01 = float64(0.01273048348341237)

// xv02 float64, escapes: false, j0.c:155:1
var xv02 = float64(7.600686273503533e-05)

// xv03 float64, escapes: false, j0.c:156:1
var xv03 = float64(2.591508518404578e-07)

// xv04 float64, escapes: false, j0.c:157:1
var xv04 = float64(4.4111031133267547e-10)

// xtpi float64, escapes: false, j0.c:63:1
var xtpi = float64(0.6366197723675814)

// xpzero is defined at j0.c:263:15
func xpzero(tls TLS, _x float64) (r float64) {
	esc := MustMalloc(8)
	var (
		_p   uintptr // *float64
		_q   uintptr // *float64
		_z   float64
		_r   float64
		_s   float64
		_ix  uint32
		___u = esc // *struct{Ff [0]float64;Fi [0]uint64;F int64}
	)
	defer Free(esc)
	*(*float64)(unsafe.Pointer(___u)) = _x
	_ix = uint32(*(*uint64)(unsafe.Pointer(___u)) >> (uint(32) % 64))
	_ix = _ix & uint32(0x7fffffff)
	if _ix < uint32(0x40200000) {
		goto _2
	}

	_p = xpR8
	_q = xpS8
	goto _3

_2:
	if _ix < uint32(0x40122e8b) {
		goto _4
	}

	_p = xpR5
	_q = x2pS5
	goto _5

_4:
	if _ix < uint32(0x4006db6d) {
		goto _6
	}

	_p = xpR3
	_q = x2pS3
	goto _7

_6:
	_p = xpR2
	_q = x4pS2
_7:
_5:
_3:
	_z = float64(1) / float64(_x*_x)
	_r = *(*float64)(unsafe.Pointer(_p)) + float64(_z*float64(*(*float64)(unsafe.Pointer(_p + 8))+float64(_z*float64(*(*float64)(unsafe.Pointer(_p + 16))+float64(_z*float64(*(*float64)(unsafe.Pointer(_p + 24))+float64(_z*float64(*(*float64)(unsafe.Pointer(_p + 32))+float64(_z**(*float64)(unsafe.Pointer(_p + 40)))))))))))
	_s = float64(1) + float64(_z*float64(*(*float64)(unsafe.Pointer(_q))+float64(_z*float64(*(*float64)(unsafe.Pointer(_q + 8))+float64(_z*float64(*(*float64)(unsafe.Pointer(_q + 16))+float64(_z*float64(*(*float64)(unsafe.Pointer(_q + 24))+float64(_z**(*float64)(unsafe.Pointer(_q + 32)))))))))))
	return float64(1) + float64(_r/_s)
}

// xqzero is defined at j0.c:359:15
func xqzero(tls TLS, _x float64) (r float64) {
	esc := MustMalloc(8)
	var (
		_p   uintptr // *float64
		_q   uintptr // *float64
		_s   float64
		_r   float64
		_z   float64
		_ix  uint32
		___u = esc // *struct{Ff [0]float64;Fi [0]uint64;F int64}
	)
	defer Free(esc)
	*(*float64)(unsafe.Pointer(___u)) = _x
	_ix = uint32(*(*uint64)(unsafe.Pointer(___u)) >> (uint(32) % 64))
	_ix = _ix & uint32(0x7fffffff)
	if _ix < uint32(0x40200000) {
		goto _2
	}

	_p = xqR8
	_q = xqS8
	goto _3

_2:
	if _ix < uint32(0x40122e8b) {
		goto _4
	}

	_p = xqR5
	_q = xqS5
	goto _5

_4:
	if _ix < uint32(0x4006db6d) {
		goto _6
	}

	_p = xqR3
	_q = x2qS3
	goto _7

_6:
	_p = xqR2
	_q = x2qS2
_7:
_5:
_3:
	_z = float64(1) / float64(_x*_x)
	_r = *(*float64)(unsafe.Pointer(_p)) + float64(_z*float64(*(*float64)(unsafe.Pointer(_p + 8))+float64(_z*float64(*(*float64)(unsafe.Pointer(_p + 16))+float64(_z*float64(*(*float64)(unsafe.Pointer(_p + 24))+float64(_z*float64(*(*float64)(unsafe.Pointer(_p + 32))+float64(_z**(*float64)(unsafe.Pointer(_p + 40)))))))))))
	_s = float64(1) + float64(_z*float64(*(*float64)(unsafe.Pointer(_q))+float64(_z*float64(*(*float64)(unsafe.Pointer(_q + 8))+float64(_z*float64(*(*float64)(unsafe.Pointer(_q + 16))+float64(_z*float64(*(*float64)(unsafe.Pointer(_q + 24))+float64(_z*float64(*(*float64)(unsafe.Pointer(_q + 32))+float64(_z**(*float64)(unsafe.Pointer(_q + 40)))))))))))))
	return float64(float64(-0.125)+float64(_r/_s)) / _x
}

// xinvsqrtpi float64, escapes: false, j0.c:62:1
var xinvsqrtpi = float64(0.5641895835477563)

type t23double_t = float64

// xpR8 [6]float64, escapes: true, j0.c:199:21
var xpR8 = ds + 40024

// xpS8 [5]float64, escapes: true, j0.c:207:21
var xpS8 = ds + 40072

// xpR5 [6]float64, escapes: true, j0.c:215:21
var xpR5 = ds + 40112

// xpS5 [5]float64, escapes: true, j0.c:223:21
var x2pS5 = ds + 40160

// xpR3 [6]float64, escapes: true, j0.c:231:21
var xpR3 = ds + 40200

// xpS3 [5]float64, escapes: true, j0.c:239:21
var x2pS3 = ds + 40248

// xpR2 [6]float64, escapes: true, j0.c:247:21
var xpR2 = ds + 40288

// xpS2 [5]float64, escapes: true, j0.c:255:21
var x4pS2 = ds + 40336

// xqR8 [6]float64, escapes: true, j0.c:291:21
var xqR8 = ds + 40376

// xqS8 [6]float64, escapes: true, j0.c:299:21
var xqS8 = ds + 40424

// xqR5 [6]float64, escapes: true, j0.c:308:21
var xqR5 = ds + 40472

// xqS5 [6]float64, escapes: true, j0.c:316:21
var xqS5 = ds + 40520

// xqR3 [6]float64, escapes: true, j0.c:325:21
var xqR3 = ds + 40568

// xqS3 [6]float64, escapes: true, j0.c:333:21
var x2qS3 = ds + 40616

// xqR2 [6]float64, escapes: true, j0.c:342:21
var xqR2 = ds + 40664

// xqS2 [6]float64, escapes: true, j0.c:350:21
var x2qS2 = ds + 40712

// linking j0f.o

// Xj0f is defined at j0f.c:64:7
func Xj0f(tls TLS, _x float32) (r float32) {
	esc := MustMalloc(4)
	var (
		_z   float32
		_r   float32
		_s   float32
		_ix  uint32
		___u = esc // *struct{Ff [0]float32;Fi [0]uint32;F int32}
	)
	defer Free(esc)
	*(*float32)(unsafe.Pointer(___u)) = _x
	_ix = *(*uint32)(unsafe.Pointer(___u))
	_ix = _ix & uint32(0x7fffffff)
	if _ix < uint32(0x7f800000) {
		goto _2
	}

	return float32(1) / float32(_x*_x)

_2:
	_x = Xfabsf(tls, _x)
	if _ix < uint32(0x40000000) {
		goto _3
	}

	return x1common(tls, _ix, _x, int32(0))

_3:
	if _ix < uint32(0x3a000000) {
		goto _4
	}

	_z = _x * _x
	_r = _z * float32(x1R02+float32(_z*float32(x1R03+float32(_z*float32(x1R04+float32(_z*x1R05))))))
	_s = float32(1) + float32(_z*float32(x1S01+float32(_z*float32(x1S02+float32(_z*float32(x1S03+float32(_z*x1S04)))))))
	return float32(float32(float32(1)+float32(_x/float32(2)))*float32(float32(1)-float32(_x/float32(2)))) + float32(_z*float32(_r/_s))

_4:
	if _ix < uint32(0x21800000) {
		goto _5
	}

	_x = float32(float32(0.25)*_x) * _x
_5:
	return float32(1) - _x
}

// Xy0f is defined at j0f.c:104:7
func Xy0f(tls TLS, _x float32) (r float32) {
	esc := MustMalloc(4)
	var (
		_z   float32
		_u   float32
		_v   float32
		_ix  uint32
		___u = esc // *struct{Ff [0]float32;Fi [0]uint32;F int32}
	)
	defer Free(esc)
	*(*float32)(unsafe.Pointer(___u)) = _x
	_ix = *(*uint32)(unsafe.Pointer(___u))
	if _ix&uint32(0x7fffffff) != uint32(0) {
		goto _2
	}

	return float32(math.Inf(-1))

_2:
	if (_ix >> (uint(31) % 32)) == 0 {
		goto _3
	}

	return float32(math.NaN())

_3:
	if _ix < uint32(0x7f800000) {
		goto _4
	}

	return float32(1) / _x

_4:
	if _ix < uint32(0x40000000) {
		goto _5
	}

	return x1common(tls, _ix, _x, int32(1))

_5:
	if _ix < uint32(0x39000000) {
		goto _6
	}

	_z = _x * _x
	_u = x1u00 + float32(_z*float32(x1u01+float32(_z*float32(x1u02+float32(_z*float32(x1u03+float32(_z*float32(x1u04+float32(_z*float32(x1u05+float32(_z*x1u06)))))))))))
	_v = float32(1) + float32(_z*float32(x1v01+float32(_z*float32(x1v02+float32(_z*float32(x1v03+float32(_z*x1v04)))))))
	return float32(_u/_v) + float32(x1tpi*float32(Xj0f(tls, _x)*Xlogf(tls, _x)))

_6:
	return x1u00 + float32(x1tpi*Xlogf(tls, _x))
}

type t408__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t408__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t66uint32_t = uint32

// xcommon is defined at j0f.c:25:14
func x1common(tls TLS, _ix uint32, _x float32, _y0 int32) (r float32) {
	var (
		_z  float32
		_s  float32
		_c  float32
		_ss float32
		_cc float32
	)
	_s = Xsinf(tls, _x)
	_c = Xcosf(tls, _x)
	if _y0 == 0 {
		goto _1
	}

	_c = -_c
_1:
	_cc = _s + _c
	if _ix >= uint32(0x7f000000) {
		goto _2
	}

	_ss = _s - _c
	_z = -Xcosf(tls, float32(2)*_x)
	if float32(_s*_c) >= float32(0) {
		goto _3
	}

	_cc = _z / _ss
	goto _4

_3:
	_ss = _z / _cc
_4:
	if _ix >= uint32(0x58800000) {
		goto _5
	}

	if _y0 == 0 {
		goto _6
	}

	_ss = -_ss
_6:
	_cc = float32(xpzerof(tls, _x)*_cc) - float32(xqzerof(tls, _x)*_ss)
_5:
_2:
	return float32(x1invsqrtpi*_cc) / Xsqrtf(tls, _x)
}

// xR02 float32, escapes: false, j0f.c:55:1
var x1R02 = float32(0.015625)

// xR03 float32, escapes: false, j0f.c:56:1
var x1R03 = float32(-0.0001899793)

// xR04 float32, escapes: false, j0f.c:57:1
var x1R04 = float32(1.8295405e-06)

// xR05 float32, escapes: false, j0f.c:58:1
var x1R05 = float32(-4.618327e-09)

// xS01 float32, escapes: false, j0f.c:59:1
var x1S01 = float32(0.015619103)

// xS02 float32, escapes: false, j0f.c:60:1
var x1S02 = float32(0.000116926785)

// xS03 float32, escapes: false, j0f.c:61:1
var x1S03 = float32(5.135465e-07)

// xS04 float32, escapes: false, j0f.c:62:1
var x1S04 = float32(1.1661401e-09)

// xu00 float32, escapes: false, j0f.c:92:1
var x1u00 = float32(-0.0738043)

// xu01 float32, escapes: false, j0f.c:93:1
var x1u01 = float32(0.17666645)

// xu02 float32, escapes: false, j0f.c:94:1
var x1u02 = float32(-0.013818568)

// xu03 float32, escapes: false, j0f.c:95:1
var x1u03 = float32(0.00034745343)

// xu04 float32, escapes: false, j0f.c:96:1
var x1u04 = float32(-3.8140706e-06)

// xu05 float32, escapes: false, j0f.c:97:1
var x1u05 = float32(1.9559014e-08)

// xu06 float32, escapes: false, j0f.c:98:1
var x1u06 = float32(-3.982052e-11)

// xv01 float32, escapes: false, j0f.c:99:1
var x1v01 = float32(0.012730484)

// xv02 float32, escapes: false, j0f.c:100:1
var x1v02 = float32(7.6006865e-05)

// xv03 float32, escapes: false, j0f.c:101:1
var x1v03 = float32(2.5915085e-07)

// xv04 float32, escapes: false, j0f.c:102:1
var x1v04 = float32(4.4111031e-10)

// xtpi float32, escapes: false, j0f.c:23:1
var x1tpi = float32(0.63661975)

// xpzerof is defined at j0f.c:202:14
func xpzerof(tls TLS, _x float32) (r float32) {
	esc := MustMalloc(4)
	var (
		_p   uintptr // *float32
		_q   uintptr // *float32
		_z   float32
		_r   float32
		_s   float32
		_ix  uint32
		___u = esc // *struct{Ff [0]float32;Fi [0]uint32;F int32}
	)
	defer Free(esc)
	*(*float32)(unsafe.Pointer(___u)) = _x
	_ix = *(*uint32)(unsafe.Pointer(___u))
	_ix = _ix & uint32(0x7fffffff)
	if _ix < uint32(0x41000000) {
		goto _2
	}

	_p = x1pR8
	_q = x1pS8
	goto _3

_2:
	if _ix < uint32(0x409173eb) {
		goto _4
	}

	_p = x1pR5
	_q = x3pS5
	goto _5

_4:
	if _ix < uint32(0x4036d917) {
		goto _6
	}

	_p = x1pR3
	_q = x3pS3
	goto _7

_6:
	_p = x1pR2
	_q = x5pS2
_7:
_5:
_3:
	_z = float32(1) / float32(_x*_x)
	_r = *(*float32)(unsafe.Pointer(_p)) + float32(_z*float32(*(*float32)(unsafe.Pointer(_p + 4))+float32(_z*float32(*(*float32)(unsafe.Pointer(_p + 8))+float32(_z*float32(*(*float32)(unsafe.Pointer(_p + 12))+float32(_z*float32(*(*float32)(unsafe.Pointer(_p + 16))+float32(_z**(*float32)(unsafe.Pointer(_p + 20)))))))))))
	_s = float32(1) + float32(_z*float32(*(*float32)(unsafe.Pointer(_q))+float32(_z*float32(*(*float32)(unsafe.Pointer(_q + 4))+float32(_z*float32(*(*float32)(unsafe.Pointer(_q + 8))+float32(_z*float32(*(*float32)(unsafe.Pointer(_q + 12))+float32(_z**(*float32)(unsafe.Pointer(_q + 16)))))))))))
	return float32(1) + float32(_r/_s)
}

// xqzerof is defined at j0f.c:298:14
func xqzerof(tls TLS, _x float32) (r float32) {
	esc := MustMalloc(4)
	var (
		_p   uintptr // *float32
		_q   uintptr // *float32
		_s   float32
		_r   float32
		_z   float32
		_ix  uint32
		___u = esc // *struct{Ff [0]float32;Fi [0]uint32;F int32}
	)
	defer Free(esc)
	*(*float32)(unsafe.Pointer(___u)) = _x
	_ix = *(*uint32)(unsafe.Pointer(___u))
	_ix = _ix & uint32(0x7fffffff)
	if _ix < uint32(0x41000000) {
		goto _2
	}

	_p = x1qR8
	_q = x1qS8
	goto _3

_2:
	if _ix < uint32(0x409173eb) {
		goto _4
	}

	_p = x1qR5
	_q = x1qS5
	goto _5

_4:
	if _ix < uint32(0x4036d917) {
		goto _6
	}

	_p = x1qR3
	_q = x3qS3
	goto _7

_6:
	_p = x1qR2
	_q = x3qS2
_7:
_5:
_3:
	_z = float32(1) / float32(_x*_x)
	_r = *(*float32)(unsafe.Pointer(_p)) + float32(_z*float32(*(*float32)(unsafe.Pointer(_p + 4))+float32(_z*float32(*(*float32)(unsafe.Pointer(_p + 8))+float32(_z*float32(*(*float32)(unsafe.Pointer(_p + 12))+float32(_z*float32(*(*float32)(unsafe.Pointer(_p + 16))+float32(_z**(*float32)(unsafe.Pointer(_p + 20)))))))))))
	_s = float32(1) + float32(_z*float32(*(*float32)(unsafe.Pointer(_q))+float32(_z*float32(*(*float32)(unsafe.Pointer(_q + 4))+float32(_z*float32(*(*float32)(unsafe.Pointer(_q + 8))+float32(_z*float32(*(*float32)(unsafe.Pointer(_q + 12))+float32(_z*float32(*(*float32)(unsafe.Pointer(_q + 16))+float32(_z**(*float32)(unsafe.Pointer(_q + 20)))))))))))))
	return float32(float32(-0.125)+float32(_r/_s)) / _x
}

// xinvsqrtpi float32, escapes: false, j0f.c:22:1
var x1invsqrtpi = float32(0.5641896)

type t8float_t = float32

// xpR8 [6]float32, escapes: true, j0f.c:139:20
var x1pR8 = ds + 40760

// xpS8 [5]float32, escapes: true, j0f.c:147:20
var x1pS8 = ds + 40784

// xpR5 [6]float32, escapes: true, j0f.c:154:20
var x1pR5 = ds + 40808

// xpS5 [5]float32, escapes: true, j0f.c:162:20
var x3pS5 = ds + 40832

// xpR3 [6]float32, escapes: true, j0f.c:170:20
var x1pR3 = ds + 40856

// xpS3 [5]float32, escapes: true, j0f.c:178:20
var x3pS3 = ds + 40880

// xpR2 [6]float32, escapes: true, j0f.c:186:20
var x1pR2 = ds + 40904

// xpS2 [5]float32, escapes: true, j0f.c:194:20
var x5pS2 = ds + 40928

// xqR8 [6]float32, escapes: true, j0f.c:230:20
var x1qR8 = ds + 40952

// xqS8 [6]float32, escapes: true, j0f.c:238:20
var x1qS8 = ds + 40976

// xqR5 [6]float32, escapes: true, j0f.c:247:20
var x1qR5 = ds + 41000

// xqS5 [6]float32, escapes: true, j0f.c:255:20
var x1qS5 = ds + 41024

// xqR3 [6]float32, escapes: true, j0f.c:264:20
var x1qR3 = ds + 41048

// xqS3 [6]float32, escapes: true, j0f.c:272:20
var x3qS3 = ds + 41072

// xqR2 [6]float32, escapes: true, j0f.c:281:20
var x1qR2 = ds + 41096

// xqS2 [6]float32, escapes: true, j0f.c:289:20
var x3qS2 = ds + 41120

// linking j1.o

// Xj1 is defined at j1.c:113:8
func Xj1(tls TLS, _x float64) (r float64) {
	esc := MustMalloc(8)
	var (
		_z    float64
		_r    float64
		_s    float64
		_ix   uint32
		_sign int32
		___u  = esc // *struct{Ff [0]float64;Fi [0]uint64;F int64}
	)
	defer Free(esc)
	*(*float64)(unsafe.Pointer(___u)) = _x
	_ix = uint32(*(*uint64)(unsafe.Pointer(___u)) >> (uint(32) % 64))
	_sign = int32(_ix >> (uint(31) % 32))
	_ix = _ix & uint32(0x7fffffff)
	if _ix < uint32(0x7ff00000) {
		goto _2
	}

	return float64(1) / float64(_x*_x)

_2:
	if _ix < uint32(0x40000000) {
		goto _3
	}

	return x2common(tls, _ix, Xfabs(tls, _x), int32(0), _sign)

_3:
	if _ix < uint32(0x38000000) {
		goto _4
	}

	_z = _x * _x
	_r = _z * float64(xr00+float64(_z*float64(xr01+float64(_z*float64(xr02+float64(_z*xr03))))))
	_s = float64(1) + float64(_z*float64(xs01+float64(_z*float64(xs02+float64(_z*float64(xs03+float64(_z*float64(xs04+float64(_z*xs05)))))))))
	_z = _r / _s
	goto _5

_4:
	_z = _x
_5:
	return float64(float64(0.5)+_z) * _x
}

// Xy1 is defined at j1.c:152:8
func Xy1(tls TLS, _x float64) (r float64) {
	esc := MustMalloc(8)
	var (
		_z   float64
		_u   float64
		_v   float64
		_ix  uint32
		_lx  uint32
		___u = esc // *struct{Ff [0]float64;Fi [0]uint64;F int64}
	)
	defer Free(esc)
	*(*float64)(unsafe.Pointer(___u)) = _x
	_ix = uint32(*(*uint64)(unsafe.Pointer(___u)) >> (uint(32) % 64))
	_lx = uint32(*(*uint64)(unsafe.Pointer(___u)))
	if _ix<<(uint(1)%32)|_lx != uint32(0) {
		goto _2
	}

	return math.Inf(-1)

_2:
	if (_ix >> (uint(31) % 32)) == 0 {
		goto _3
	}

	return math.NaN()

_3:
	if _ix < uint32(0x7ff00000) {
		goto _4
	}

	return float64(1) / _x

_4:
	if _ix < uint32(0x40000000) {
		goto _5
	}

	return x2common(tls, _ix, _x, int32(1), int32(0))

_5:
	if _ix >= uint32(0x3c900000) {
		goto _6
	}

	return float64(-x2tpi) / _x

_6:
	_z = _x * _x
	_u = *(*float64)(unsafe.Pointer(xU0)) + float64(_z*float64(*(*float64)(unsafe.Pointer(xU0 + 8))+float64(_z*float64(*(*float64)(unsafe.Pointer(xU0 + 16))+float64(_z*float64(*(*float64)(unsafe.Pointer(xU0 + 24))+float64(_z**(*float64)(unsafe.Pointer(xU0 + 32)))))))))
	_v = float64(1) + float64(_z*float64(*(*float64)(unsafe.Pointer(xV0))+float64(_z*float64(*(*float64)(unsafe.Pointer(xV0 + 8))+float64(_z*float64(*(*float64)(unsafe.Pointer(xV0 + 16))+float64(_z*float64(*(*float64)(unsafe.Pointer(xV0 + 24))+float64(_z**(*float64)(unsafe.Pointer(xV0 + 32)))))))))))
	return float64(_x*float64(_u/_v)) + float64(x2tpi*float64(float64(Xj1(tls, _x)*Xlog(tls, _x))-float64(float64(1)/_x)))
}

type t409__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t409__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t67uint32_t = uint32

type t47uint64_t = uint64

// xcommon is defined at j1.c:65:15
func x2common(tls TLS, _ix uint32, _x float64, _y1 int32, _sign int32) (r float64) {
	var (
		_z  float64
		_s  float64
		_c  float64
		_ss float64
		_cc float64
	)
	_s = Xsin(tls, _x)
	if _y1 == 0 {
		goto _1
	}

	_s = -_s
_1:
	_c = Xcos(tls, _x)
	_cc = _s - _c
	if _ix >= uint32(0x7fe00000) {
		goto _2
	}

	_ss = float64(-_s) - _c
	_z = Xcos(tls, float64(2)*_x)
	if float64(_s*_c) <= float64(0) {
		goto _3
	}

	_cc = _z / _ss
	goto _4

_3:
	_ss = _z / _cc
_4:
	if _ix >= uint32(0x48000000) {
		goto _5
	}

	if _y1 == 0 {
		goto _6
	}

	_ss = -_ss
_6:
	_cc = float64(xpone(tls, _x)*_cc) - float64(xqone(tls, _x)*_ss)
_5:
_2:
	if _sign == 0 {
		goto _7
	}

	_cc = -_cc
_7:
	return float64(x2invsqrtpi*_cc) / Xsqrt(tls, _x)
}

// xr00 float64, escapes: false, j1.c:103:1
var xr00 = float64(-0.0625)

// xr01 float64, escapes: false, j1.c:104:1
var xr01 = float64(0.001407056669551897)

// xr02 float64, escapes: false, j1.c:105:1
var xr02 = float64(-1.599556310840356e-05)

// xr03 float64, escapes: false, j1.c:106:1
var xr03 = float64(4.9672799960958445e-08)

// xs01 float64, escapes: false, j1.c:107:1
var xs01 = float64(0.019153759953836346)

// xs02 float64, escapes: false, j1.c:108:1
var xs02 = float64(0.00018594678558863092)

// xs03 float64, escapes: false, j1.c:109:1
var xs03 = float64(1.1771846404262368e-06)

// xs04 float64, escapes: false, j1.c:110:1
var xs04 = float64(5.0463625707621704e-09)

// xs05 float64, escapes: false, j1.c:111:1
var xs05 = float64(1.2354227442613791e-11)

// xtpi float64, escapes: false, j1.c:63:1
var x2tpi = float64(0.6366197723675814)

// xU0 [5]float64, escapes: true, j1.c:137:21
var xU0 = ds + 41144

// xV0 [5]float64, escapes: true, j1.c:144:21
var xV0 = ds + 41184

// xpone is defined at j1.c:250:15
func xpone(tls TLS, _x float64) (r float64) {
	esc := MustMalloc(8)
	var (
		_p   uintptr // *float64
		_q   uintptr // *float64
		_z   float64
		_r   float64
		_s   float64
		_ix  uint32
		___u = esc // *struct{Ff [0]float64;Fi [0]uint64;F int64}
	)
	defer Free(esc)
	*(*float64)(unsafe.Pointer(___u)) = _x
	_ix = uint32(*(*uint64)(unsafe.Pointer(___u)) >> (uint(32) % 64))
	_ix = _ix & uint32(0x7fffffff)
	if _ix < uint32(0x40200000) {
		goto _2
	}

	_p = xpr8
	_q = xps8
	goto _3

_2:
	if _ix < uint32(0x40122e8b) {
		goto _4
	}

	_p = xpr5
	_q = xps5
	goto _5

_4:
	if _ix < uint32(0x4006db6d) {
		goto _6
	}

	_p = xpr3
	_q = xps3
	goto _7

_6:
	_p = xpr2
	_q = xps2
_7:
_5:
_3:
	_z = float64(1) / float64(_x*_x)
	_r = *(*float64)(unsafe.Pointer(_p)) + float64(_z*float64(*(*float64)(unsafe.Pointer(_p + 8))+float64(_z*float64(*(*float64)(unsafe.Pointer(_p + 16))+float64(_z*float64(*(*float64)(unsafe.Pointer(_p + 24))+float64(_z*float64(*(*float64)(unsafe.Pointer(_p + 32))+float64(_z**(*float64)(unsafe.Pointer(_p + 40)))))))))))
	_s = float64(1) + float64(_z*float64(*(*float64)(unsafe.Pointer(_q))+float64(_z*float64(*(*float64)(unsafe.Pointer(_q + 8))+float64(_z*float64(*(*float64)(unsafe.Pointer(_q + 16))+float64(_z*float64(*(*float64)(unsafe.Pointer(_q + 24))+float64(_z**(*float64)(unsafe.Pointer(_q + 32)))))))))))
	return float64(1) + float64(_r/_s)
}

// xqone is defined at j1.c:346:15
func xqone(tls TLS, _x float64) (r float64) {
	esc := MustMalloc(8)
	var (
		_p   uintptr // *float64
		_q   uintptr // *float64
		_s   float64
		_r   float64
		_z   float64
		_ix  uint32
		___u = esc // *struct{Ff [0]float64;Fi [0]uint64;F int64}
	)
	defer Free(esc)
	*(*float64)(unsafe.Pointer(___u)) = _x
	_ix = uint32(*(*uint64)(unsafe.Pointer(___u)) >> (uint(32) % 64))
	_ix = _ix & uint32(0x7fffffff)
	if _ix < uint32(0x40200000) {
		goto _2
	}

	_p = xqr8
	_q = xqs8
	goto _3

_2:
	if _ix < uint32(0x40122e8b) {
		goto _4
	}

	_p = xqr5
	_q = xqs5
	goto _5

_4:
	if _ix < uint32(0x4006db6d) {
		goto _6
	}

	_p = xqr3
	_q = xqs3
	goto _7

_6:
	_p = xqr2
	_q = xqs2
_7:
_5:
_3:
	_z = float64(1) / float64(_x*_x)
	_r = *(*float64)(unsafe.Pointer(_p)) + float64(_z*float64(*(*float64)(unsafe.Pointer(_p + 8))+float64(_z*float64(*(*float64)(unsafe.Pointer(_p + 16))+float64(_z*float64(*(*float64)(unsafe.Pointer(_p + 24))+float64(_z*float64(*(*float64)(unsafe.Pointer(_p + 32))+float64(_z**(*float64)(unsafe.Pointer(_p + 40)))))))))))
	_s = float64(1) + float64(_z*float64(*(*float64)(unsafe.Pointer(_q))+float64(_z*float64(*(*float64)(unsafe.Pointer(_q + 8))+float64(_z*float64(*(*float64)(unsafe.Pointer(_q + 16))+float64(_z*float64(*(*float64)(unsafe.Pointer(_q + 24))+float64(_z*float64(*(*float64)(unsafe.Pointer(_q + 32))+float64(_z**(*float64)(unsafe.Pointer(_q + 40)))))))))))))
	return float64(float64(0.375)+float64(_r/_s)) / _x
}

// xinvsqrtpi float64, escapes: false, j1.c:62:1
var x2invsqrtpi = float64(0.5641895835477563)

type t24double_t = float64

// xpr8 [6]float64, escapes: true, j1.c:186:21
var xpr8 = ds + 41224

// xps8 [5]float64, escapes: true, j1.c:194:21
var xps8 = ds + 41272

// xpr5 [6]float64, escapes: true, j1.c:202:21
var xpr5 = ds + 41312

// xps5 [5]float64, escapes: true, j1.c:210:21
var xps5 = ds + 41360

// xpr3 [6]float64, escapes: true, j1.c:218:21
var xpr3 = ds + 41400

// xps3 [5]float64, escapes: true, j1.c:226:21
var xps3 = ds + 41448

// xpr2 [6]float64, escapes: true, j1.c:234:21
var xpr2 = ds + 41488

// xps2 [5]float64, escapes: true, j1.c:242:21
var xps2 = ds + 41536

// xqr8 [6]float64, escapes: true, j1.c:278:21
var xqr8 = ds + 41576

// xqs8 [6]float64, escapes: true, j1.c:286:21
var xqs8 = ds + 41624

// xqr5 [6]float64, escapes: true, j1.c:295:21
var xqr5 = ds + 41672

// xqs5 [6]float64, escapes: true, j1.c:303:21
var xqs5 = ds + 41720

// xqr3 [6]float64, escapes: true, j1.c:312:21
var xqr3 = ds + 41768

// xqs3 [6]float64, escapes: true, j1.c:320:21
var xqs3 = ds + 41816

// xqr2 [6]float64, escapes: true, j1.c:329:21
var xqr2 = ds + 41864

// xqs2 [6]float64, escapes: true, j1.c:337:21
var xqs2 = ds + 41912

// linking j1f.o

// Xj1f is defined at j1f.c:64:7
func Xj1f(tls TLS, _x float32) (r float32) {
	esc := MustMalloc(4)
	var (
		_z    float32
		_r    float32
		_s    float32
		_ix   uint32
		_sign int32
		___u  = esc // *struct{Ff [0]float32;Fi [0]uint32;F int32}
	)
	defer Free(esc)
	*(*float32)(unsafe.Pointer(___u)) = _x
	_ix = *(*uint32)(unsafe.Pointer(___u))
	_sign = int32(_ix >> (uint(31) % 32))
	_ix = _ix & uint32(0x7fffffff)
	if _ix < uint32(0x7f800000) {
		goto _2
	}

	return float32(1) / float32(_x*_x)

_2:
	if _ix < uint32(0x40000000) {
		goto _3
	}

	return x3common(tls, _ix, Xfabsf(tls, _x), int32(0), _sign)

_3:
	if _ix < uint32(0x39000000) {
		goto _4
	}

	_z = _x * _x
	_r = _z * float32(x1r00+float32(_z*float32(x1r01+float32(_z*float32(x1r02+float32(_z*x1r03))))))
	_s = float32(1) + float32(_z*float32(x1s01+float32(_z*float32(x1s02+float32(_z*float32(x1s03+float32(_z*float32(x1s04+float32(_z*x1s05)))))))))
	_z = float32(0.5) + float32(_r/_s)
	goto _5

_4:
	_z = float32(0.5)
_5:
	return _z * _x
}

// Xy1f is defined at j1f.c:102:7
func Xy1f(tls TLS, _x float32) (r float32) {
	esc := MustMalloc(4)
	var (
		_z   float32
		_u   float32
		_v   float32
		_ix  uint32
		___u = esc // *struct{Ff [0]float32;Fi [0]uint32;F int32}
	)
	defer Free(esc)
	*(*float32)(unsafe.Pointer(___u)) = _x
	_ix = *(*uint32)(unsafe.Pointer(___u))
	if _ix&uint32(0x7fffffff) != uint32(0) {
		goto _2
	}

	return float32(math.Inf(-1))

_2:
	if (_ix >> (uint(31) % 32)) == 0 {
		goto _3
	}

	return float32(math.NaN())

_3:
	if _ix < uint32(0x7f800000) {
		goto _4
	}

	return float32(1) / _x

_4:
	if _ix < uint32(0x40000000) {
		goto _5
	}

	return x3common(tls, _ix, _x, int32(1), int32(0))

_5:
	if _ix >= uint32(0x33000000) {
		goto _6
	}

	return float32(-x3tpi) / _x

_6:
	_z = _x * _x
	_u = *(*float32)(unsafe.Pointer(x1U0)) + float32(_z*float32(*(*float32)(unsafe.Pointer(x1U0 + 4))+float32(_z*float32(*(*float32)(unsafe.Pointer(x1U0 + 8))+float32(_z*float32(*(*float32)(unsafe.Pointer(x1U0 + 12))+float32(_z**(*float32)(unsafe.Pointer(x1U0 + 16)))))))))
	_v = float32(1) + float32(_z*float32(*(*float32)(unsafe.Pointer(x1V0))+float32(_z*float32(*(*float32)(unsafe.Pointer(x1V0 + 4))+float32(_z*float32(*(*float32)(unsafe.Pointer(x1V0 + 8))+float32(_z*float32(*(*float32)(unsafe.Pointer(x1V0 + 12))+float32(_z**(*float32)(unsafe.Pointer(x1V0 + 16)))))))))))
	return float32(_x*float32(_u/_v)) + float32(x3tpi*float32(float32(Xj1f(tls, _x)*Xlogf(tls, _x))-float32(float32(1)/_x)))
}

type t410__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t410__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t68uint32_t = uint32

// xcommon is defined at j1f.c:25:14
func x3common(tls TLS, _ix uint32, _x float32, _y1 int32, _sign int32) (r float32) {
	var (
		_z  float64
		_s  float64
		_c  float64
		_ss float64
		_cc float64
	)
	_s = float64(Xsinf(tls, _x))
	if _y1 == 0 {
		goto _1
	}

	_s = -_s
_1:
	_c = float64(Xcosf(tls, _x))
	_cc = _s - _c
	if _ix >= uint32(0x7f000000) {
		goto _2
	}

	_ss = float64(-_s) - _c
	_z = float64(Xcosf(tls, float32(2)*_x))
	if float64(_s*_c) <= float64(0) {
		goto _3
	}

	_cc = _z / _ss
	goto _4

_3:
	_ss = _z / _cc
_4:
	if _ix >= uint32(0x58800000) {
		goto _5
	}

	if _y1 == 0 {
		goto _6
	}

	_ss = -_ss
_6:
	_cc = float64(float64(xponef(tls, _x))*_cc) - float64(float64(xqonef(tls, _x))*_ss)
_5:
_2:
	if _sign == 0 {
		goto _7
	}

	_cc = -_cc
_7:
	return float32(float64(float64(x3invsqrtpi)*_cc) / float64(Xsqrtf(tls, _x)))
}

// xr00 float32, escapes: false, j1f.c:54:1
var x1r00 = float32(-0.0625)

// xr01 float32, escapes: false, j1f.c:55:1
var x1r01 = float32(0.0014070567)

// xr02 float32, escapes: false, j1f.c:56:1
var x1r02 = float32(-1.5995563e-05)

// xr03 float32, escapes: false, j1f.c:57:1
var x1r03 = float32(4.96728e-08)

// xs01 float32, escapes: false, j1f.c:58:1
var x1s01 = float32(0.01915376)

// xs02 float32, escapes: false, j1f.c:59:1
var x1s02 = float32(0.00018594679)

// xs03 float32, escapes: false, j1f.c:60:1
var x1s03 = float32(1.1771847e-06)

// xs04 float32, escapes: false, j1f.c:61:1
var x1s04 = float32(5.0463624e-09)

// xs05 float32, escapes: false, j1f.c:62:1
var x1s05 = float32(1.2354227e-11)

// xtpi float32, escapes: false, j1f.c:23:1
var x3tpi = float32(0.63661975)

// xU0 [5]float32, escapes: true, j1f.c:87:20
var x1U0 = ds + 41960

// xV0 [5]float32, escapes: true, j1f.c:94:20
var x1V0 = ds + 41984

// xponef is defined at j1f.c:198:14
func xponef(tls TLS, _x float32) (r float32) {
	esc := MustMalloc(4)
	var (
		_p   uintptr // *float32
		_q   uintptr // *float32
		_z   float32
		_r   float32
		_s   float32
		_ix  uint32
		___u = esc // *struct{Ff [0]float32;Fi [0]uint32;F int32}
	)
	defer Free(esc)
	*(*float32)(unsafe.Pointer(___u)) = _x
	_ix = *(*uint32)(unsafe.Pointer(___u))
	_ix = _ix & uint32(0x7fffffff)
	if _ix < uint32(0x41000000) {
		goto _2
	}

	_p = x1pr8
	_q = x1ps8
	goto _3

_2:
	if _ix < uint32(0x409173eb) {
		goto _4
	}

	_p = x1pr5
	_q = x1ps5
	goto _5

_4:
	if _ix < uint32(0x4036d917) {
		goto _6
	}

	_p = x1pr3
	_q = x1ps3
	goto _7

_6:
	_p = x1pr2
	_q = x1ps2
_7:
_5:
_3:
	_z = float32(1) / float32(_x*_x)
	_r = *(*float32)(unsafe.Pointer(_p)) + float32(_z*float32(*(*float32)(unsafe.Pointer(_p + 4))+float32(_z*float32(*(*float32)(unsafe.Pointer(_p + 8))+float32(_z*float32(*(*float32)(unsafe.Pointer(_p + 12))+float32(_z*float32(*(*float32)(unsafe.Pointer(_p + 16))+float32(_z**(*float32)(unsafe.Pointer(_p + 20)))))))))))
	_s = float32(1) + float32(_z*float32(*(*float32)(unsafe.Pointer(_q))+float32(_z*float32(*(*float32)(unsafe.Pointer(_q + 4))+float32(_z*float32(*(*float32)(unsafe.Pointer(_q + 8))+float32(_z*float32(*(*float32)(unsafe.Pointer(_q + 12))+float32(_z**(*float32)(unsafe.Pointer(_q + 16)))))))))))
	return float32(1) + float32(_r/_s)
}

// xqonef is defined at j1f.c:294:14
func xqonef(tls TLS, _x float32) (r float32) {
	esc := MustMalloc(4)
	var (
		_p   uintptr // *float32
		_q   uintptr // *float32
		_s   float32
		_r   float32
		_z   float32
		_ix  uint32
		___u = esc // *struct{Ff [0]float32;Fi [0]uint32;F int32}
	)
	defer Free(esc)
	*(*float32)(unsafe.Pointer(___u)) = _x
	_ix = *(*uint32)(unsafe.Pointer(___u))
	_ix = _ix & uint32(0x7fffffff)
	if _ix < uint32(0x41000000) {
		goto _2
	}

	_p = x1qr8
	_q = x1qs8
	goto _3

_2:
	if _ix < uint32(0x409173eb) {
		goto _4
	}

	_p = x1qr5
	_q = x1qs5
	goto _5

_4:
	if _ix < uint32(0x4036d917) {
		goto _6
	}

	_p = x1qr3
	_q = x1qs3
	goto _7

_6:
	_p = x1qr2
	_q = x1qs2
_7:
_5:
_3:
	_z = float32(1) / float32(_x*_x)
	_r = *(*float32)(unsafe.Pointer(_p)) + float32(_z*float32(*(*float32)(unsafe.Pointer(_p + 4))+float32(_z*float32(*(*float32)(unsafe.Pointer(_p + 8))+float32(_z*float32(*(*float32)(unsafe.Pointer(_p + 12))+float32(_z*float32(*(*float32)(unsafe.Pointer(_p + 16))+float32(_z**(*float32)(unsafe.Pointer(_p + 20)))))))))))
	_s = float32(1) + float32(_z*float32(*(*float32)(unsafe.Pointer(_q))+float32(_z*float32(*(*float32)(unsafe.Pointer(_q + 4))+float32(_z*float32(*(*float32)(unsafe.Pointer(_q + 8))+float32(_z*float32(*(*float32)(unsafe.Pointer(_q + 12))+float32(_z*float32(*(*float32)(unsafe.Pointer(_q + 16))+float32(_z**(*float32)(unsafe.Pointer(_q + 20)))))))))))))
	return float32(float32(0.375)+float32(_r/_s)) / _x
}

// xinvsqrtpi float32, escapes: false, j1f.c:22:1
var x3invsqrtpi = float32(0.5641896)

type t9float_t = float32

// xpr8 [6]float32, escapes: true, j1f.c:134:20
var x1pr8 = ds + 42008

// xps8 [5]float32, escapes: true, j1f.c:142:20
var x1ps8 = ds + 42032

// xpr5 [6]float32, escapes: true, j1f.c:150:20
var x1pr5 = ds + 42056

// xps5 [5]float32, escapes: true, j1f.c:158:20
var x1ps5 = ds + 42080

// xpr3 [6]float32, escapes: true, j1f.c:166:20
var x1pr3 = ds + 42104

// xps3 [5]float32, escapes: true, j1f.c:174:20
var x1ps3 = ds + 42128

// xpr2 [6]float32, escapes: true, j1f.c:182:20
var x1pr2 = ds + 42152

// xps2 [5]float32, escapes: true, j1f.c:190:20
var x1ps2 = ds + 42176

// xqr8 [6]float32, escapes: true, j1f.c:226:20
var x1qr8 = ds + 42200

// xqs8 [6]float32, escapes: true, j1f.c:234:20
var x1qs8 = ds + 42224

// xqr5 [6]float32, escapes: true, j1f.c:243:20
var x1qr5 = ds + 42248

// xqs5 [6]float32, escapes: true, j1f.c:251:20
var x1qs5 = ds + 42272

// xqr3 [6]float32, escapes: true, j1f.c:260:20
var x1qr3 = ds + 42296

// xqs3 [6]float32, escapes: true, j1f.c:268:20
var x1qs3 = ds + 42320

// xqr2 [6]float32, escapes: true, j1f.c:277:20
var x1qr2 = ds + 42344

// xqs2 [6]float32, escapes: true, j1f.c:285:20
var x1qs2 = ds + 42368

// linking jn.o

// Xjn is defined at jn.c:41:8
func Xjn(tls TLS, _n int32, _x float64) (r float64) {
	esc := MustMalloc(8)
	var (
		_ix   uint32
		_lx   uint32
		_nm1  int32
		_i    int32
		_sign int32
		_a    float64
		_b    float64
		_temp float64
		___u  = esc // *struct{Ff [0]float64;Fi [0]uint64;F int64}
		_t    float64
		_q0   float64
		_q1   float64
		_w    float64
		_h    float64
		_z    float64
		_tmp  float64
		_nf   float64
		_k    int32
	)
	defer Free(esc)
	*(*float64)(unsafe.Pointer(___u)) = _x
	_ix = uint32(*(*uint64)(unsafe.Pointer(___u)) >> (uint(32) % 64))
	_lx = uint32(*(*uint64)(unsafe.Pointer(___u)))
	_sign = int32(_ix >> (uint(31) % 32))
	_ix = _ix & uint32(0x7fffffff)
	if _ix|(_lx|-_lx)>>(uint(31)%32) <= uint32(0x7ff00000) {
		goto _2
	}

	return _x

_2:
	if _n != int32(0) {
		goto _3
	}

	return Xj0(tls, _x)

_3:
	if _n >= int32(0) {
		goto _4
	}

	_nm1 = -(_n + int32(1))
	_x = -_x
	_sign = _sign ^ int32(1)
	goto _5

_4:
	_nm1 = _n - int32(1)
_5:
	if _nm1 != int32(0) {
		goto _6
	}

	return Xj1(tls, _x)

_6:
	_sign = _sign & _n
	_x = Xfabs(tls, _x)
	if _ix|_lx != uint32(0) && _ix != uint32(0x7ff00000) {
		goto _7
	}

	_b = float64(0)
	goto _8

_7:
	if float64(_nm1) >= _x {
		goto _9
	}

	if _ix < uint32(0x52d00000) {
		goto _11
	}

	switch _nm1 & int32(3) {
	case int32(0):
		goto _14
	case int32(1):
		goto _15
	case int32(2):
		goto _16
	default:
		goto _17

	case int32(3):
		goto _18
	}
_14:
	_temp = float64(-Xcos(tls, _x)) + Xsin(tls, _x)
	goto _13

_15:
	_temp = float64(-Xcos(tls, _x)) - Xsin(tls, _x)
	goto _13

_16:
	_temp = Xcos(tls, _x) - Xsin(tls, _x)
	goto _13

_17:
_18:
	_temp = Xcos(tls, _x) + Xsin(tls, _x)
	goto _13

_13:
	_b = float64(x4invsqrtpi*_temp) / Xsqrt(tls, _x)
	goto _12

_11:
	_a = Xj0(tls, _x)
	_b = Xj1(tls, _x)
	_i = int32(0)
_19:
	if _i >= _nm1 {
		goto _21
	}

	_i++
	_temp = _b
	_b = float64(_b*float64(float64(float64(2)*float64(_i))/_x)) - _a
	_a = _temp
	goto _19

_21:
_12:
	goto _10

_9:
	if _ix >= uint32(0x3e100000) {
		goto _22
	}

	if _nm1 <= int32(32) {
		goto _24
	}

	_b = float64(0)
	goto _25

_24:
	_temp = _x * float64(0.5)
	_b = _temp
	_a = float64(1)
	_i = int32(2)
_26:
	if _i > _nm1+int32(1) {
		goto _28
	}

	_a = _a * float64(_i)
	_b = _b * _temp
	_i++
	goto _26

_28:
	_b = _b / _a
_25:
	goto _23

_22:
	_nf = float64(_nm1) + float64(1)
	_w = float64(float64(2)*_nf) / _x
	_h = float64(2) / _x
	_z = _w + _h
	_q0 = _w
	_q1 = float64(_w*_z) - float64(1)
	_k = int32(1)
_29:
	if _q1 >= float64(1e+09) {
		goto _30
	}

	_k = _k + int32(1)
	_z = _z + _h
	_tmp = float64(_z*_q1) - _q0
	_q0 = _q1
	_q1 = _tmp
	goto _29

_30:
	_t = float64(0)
	_i = _k
_31:
	if _i < int32(0) {
		goto _33
	}

	_t = float64(1) / float64(float64(float64(float64(2)*float64(float64(_i)+_nf))/_x)-_t)
	_i--
	goto _31

_33:
	_a = _t
	_b = float64(1)
	_tmp = _nf * Xlog(tls, Xfabs(tls, _w))
	if _tmp >= float64(709.782712893384) {
		goto _34
	}

	_i = _nm1
_36:
	if _i <= int32(0) {
		goto _38
	}

	_temp = _b
	_b = float64(float64(_b*float64(float64(2)*float64(_i)))/_x) - _a
	_a = _temp
	_i--
	goto _36

_38:
	goto _35

_34:
	_i = _nm1
_39:
	if _i <= int32(0) {
		goto _41
	}

	_temp = _b
	_b = float64(float64(_b*float64(float64(2)*float64(_i)))/_x) - _a
	_a = _temp
	if _b <= float64(3.273390607896142e+150) {
		goto _42
	}

	_a = _a / _b
	_t = _t / _b
	_b = float64(1)
_42:
	_i--
	goto _39

_41:
_35:
	_z = Xj0(tls, _x)
	_w = Xj1(tls, _x)
	if Xfabs(tls, _z) < Xfabs(tls, _w) {
		goto _43
	}

	_b = float64(_t*_z) / _b
	goto _44

_43:
	_b = float64(_t*_w) / _a
_44:
_23:
_10:
_8:
	if _sign != 0 {
		return -_b
	}

	return _b
}

// Xyn is defined at jn.c:215:8
func Xyn(tls TLS, _n int32, _x float64) (r float64) {
	esc := MustMalloc(40)
	var (
		_ix   uint32
		_lx   uint32
		_ib   uint32
		_nm1  int32
		_sign int32
		_i    int32
		_a    float64
		_b    float64
		_temp float64
		___u  = esc      // *struct{Ff [0]float64;Fi [0]uint64;F int64}
		_1__u = esc + 16 // *struct{Ff [0]float64;Fi [0]uint64;F int64}
		_2__u = esc + 32 // *struct{Ff [0]float64;Fi [0]uint64;F int64}
	)
	defer Free(esc)
	*(*float64)(unsafe.Pointer(___u)) = _x
	_ix = uint32(*(*uint64)(unsafe.Pointer(___u)) >> (uint(32) % 64))
	_lx = uint32(*(*uint64)(unsafe.Pointer(___u)))
	_sign = int32(_ix >> (uint(31) % 32))
	_ix = _ix & uint32(0x7fffffff)
	if _ix|(_lx|-_lx)>>(uint(31)%32) <= uint32(0x7ff00000) {
		goto _2
	}

	return _x

_2:
	if _sign == 0 || _ix|_lx == uint32(0) {
		goto _3
	}

	return math.NaN()

_3:
	if _ix != uint32(0x7ff00000) {
		goto _4
	}

	return float64(0)

_4:
	if _n != int32(0) {
		goto _5
	}

	return Xy0(tls, _x)

_5:
	if _n >= int32(0) {
		goto _6
	}

	_nm1 = -(_n + int32(1))
	_sign = _n & int32(1)
	goto _7

_6:
	_nm1 = _n - int32(1)
	_sign = int32(0)
_7:
	if _nm1 != int32(0) {
		goto _8
	}

	if _sign != 0 {
		return -Xy1(tls, _x)
	}

	return Xy1(tls, _x)

_8:
	if _ix < uint32(0x52d00000) {
		goto _9
	}

	switch _nm1 & int32(3) {
	case int32(0):
		goto _12
	case int32(1):
		goto _13
	case int32(2):
		goto _14
	default:
		goto _15

	case int32(3):
		goto _16
	}
_12:
	_temp = float64(-Xsin(tls, _x)) - Xcos(tls, _x)
	goto _11

_13:
	_temp = float64(-Xsin(tls, _x)) + Xcos(tls, _x)
	goto _11

_14:
	_temp = Xsin(tls, _x) + Xcos(tls, _x)
	goto _11

_15:
_16:
	_temp = Xsin(tls, _x) - Xcos(tls, _x)
	goto _11

_11:
	_b = float64(x4invsqrtpi*_temp) / Xsqrt(tls, _x)
	goto _10

_9:
	_a = Xy0(tls, _x)
	_b = Xy1(tls, _x)
	*(*float64)(unsafe.Pointer(_1__u)) = _b
	_ib = uint32(*(*uint64)(unsafe.Pointer(_1__u)) >> (uint(32) % 64))
	_i = int32(0)
_18:
	if _i >= _nm1 || _ib == uint32(0xfff00000) {
		goto _20
	}

	_i++
	_temp = _b
	_b = float64(float64(float64(float64(2)*float64(_i))/_x)*_b) - _a
	*(*float64)(unsafe.Pointer(_2__u)) = _b
	_ib = uint32(*(*uint64)(unsafe.Pointer(_2__u)) >> (uint(32) % 64))
	_a = _temp
	goto _18

_20:
_10:
	if _sign != 0 {
		return -_b
	}

	return _b
}

type t411__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t411__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t69uint32_t = uint32

type t48uint64_t = uint64

// xinvsqrtpi float64, escapes: false, jn.c:39:21
var x4invsqrtpi = float64(0.5641895835477563)

// linking jnf.o

// Xjnf is defined at jnf.c:19:7
func Xjnf(tls TLS, _n int32, _x float32) (r float32) {
	esc := MustMalloc(4)
	var (
		_ix   uint32
		_nm1  int32
		_sign int32
		_i    int32
		_a    float32
		_b    float32
		_temp float32
		___u  = esc // *struct{Ff [0]float32;Fi [0]uint32;F int32}
		_t    float32
		_q0   float32
		_q1   float32
		_w    float32
		_h    float32
		_z    float32
		_tmp  float32
		_nf   float32
		_k    int32
	)
	defer Free(esc)
	*(*float32)(unsafe.Pointer(___u)) = _x
	_ix = *(*uint32)(unsafe.Pointer(___u))
	_sign = int32(_ix >> (uint(31) % 32))
	_ix = _ix & uint32(0x7fffffff)
	if _ix <= uint32(0x7f800000) {
		goto _2
	}

	return _x

_2:
	if _n != int32(0) {
		goto _3
	}

	return Xj0f(tls, _x)

_3:
	if _n >= int32(0) {
		goto _4
	}

	_nm1 = -(_n + int32(1))
	_x = -_x
	_sign = _sign ^ int32(1)
	goto _5

_4:
	_nm1 = _n - int32(1)
_5:
	if _nm1 != int32(0) {
		goto _6
	}

	return Xj1f(tls, _x)

_6:
	_sign = _sign & _n
	_x = Xfabsf(tls, _x)
	if _ix != uint32(0) && _ix != uint32(0x7f800000) {
		goto _7
	}

	_b = float32(0)
	goto _8

_7:
	if float32(_nm1) >= _x {
		goto _9
	}

	_a = Xj0f(tls, _x)
	_b = Xj1f(tls, _x)
	_i = int32(0)
_11:
	if _i >= _nm1 {
		goto _13
	}

	_i++
	_temp = _b
	_b = float32(_b*float32(float32(float32(2)*float32(_i))/_x)) - _a
	_a = _temp
	goto _11

_13:
	goto _10

_9:
	if _ix >= uint32(0x35800000) {
		goto _14
	}

	if _nm1 <= int32(8) {
		goto _16
	}

	_nm1 = int32(8)
_16:
	_temp = float32(0.5) * _x
	_b = _temp
	_a = float32(1)
	_i = int32(2)
_17:
	if _i > _nm1+int32(1) {
		goto _19
	}

	_a = _a * float32(_i)
	_b = _b * _temp
	_i++
	goto _17

_19:
	_b = _b / _a
	goto _15

_14:
	_nf = float32(_nm1) + float32(1)
	_w = float32(float32(2)*_nf) / _x
	_h = float32(2) / _x
	_z = _w + _h
	_q0 = _w
	_q1 = float32(_w*_z) - float32(1)
	_k = int32(1)
_20:
	if _q1 >= float32(10000) {
		goto _21
	}

	_k = _k + int32(1)
	_z = _z + _h
	_tmp = float32(_z*_q1) - _q0
	_q0 = _q1
	_q1 = _tmp
	goto _20

_21:
	_t = float32(0)
	_i = _k
_22:
	if _i < int32(0) {
		goto _24
	}

	_t = float32(1) / float32(float32(float32(float32(2)*float32(float32(_i)+_nf))/_x)-_t)
	_i--
	goto _22

_24:
	_a = _t
	_b = float32(1)
	_tmp = _nf * Xlogf(tls, Xfabsf(tls, _w))
	if _tmp >= float32(88.72168) {
		goto _25
	}

	_i = _nm1
_27:
	if _i <= int32(0) {
		goto _29
	}

	_temp = _b
	_b = float32(float32(float32(float32(2)*float32(_i))*_b)/_x) - _a
	_a = _temp
	_i--
	goto _27

_29:
	goto _26

_25:
	_i = _nm1
_30:
	if _i <= int32(0) {
		goto _32
	}

	_temp = _b
	_b = float32(float32(float32(float32(2)*float32(_i))*_b)/_x) - _a
	_a = _temp
	if _b <= float32(1.1529215e+18) {
		goto _33
	}

	_a = _a / _b
	_t = _t / _b
	_b = float32(1)
_33:
	_i--
	goto _30

_32:
_26:
	_z = Xj0f(tls, _x)
	_w = Xj1f(tls, _x)
	if Xfabsf(tls, _z) < Xfabsf(tls, _w) {
		goto _34
	}

	_b = float32(_t*_z) / _b
	goto _35

_34:
	_b = float32(_t*_w) / _a
_35:
_15:
_10:
_8:
	if _sign != 0 {
		return -_b
	}

	return _b
}

// Xynf is defined at jnf.c:162:7
func Xynf(tls TLS, _n int32, _x float32) (r float32) {
	esc := MustMalloc(36)
	var (
		_ix   uint32
		_ib   uint32
		_nm1  int32
		_sign int32
		_i    int32
		_a    float32
		_b    float32
		_temp float32
		___u  = esc      // *struct{Ff [0]float32;Fi [0]uint32;F int32}
		_1__u = esc + 16 // *struct{Ff [0]float32;Fi [0]uint32;F int32}
		_2__u = esc + 32 // *struct{Ff [0]float32;Fi [0]uint32;F int32}
	)
	defer Free(esc)
	*(*float32)(unsafe.Pointer(___u)) = _x
	_ix = *(*uint32)(unsafe.Pointer(___u))
	_sign = int32(_ix >> (uint(31) % 32))
	_ix = _ix & uint32(0x7fffffff)
	if _ix <= uint32(0x7f800000) {
		goto _2
	}

	return _x

_2:
	if _sign == 0 || _ix == uint32(0) {
		goto _3
	}

	return float32(math.NaN())

_3:
	if _ix != uint32(0x7f800000) {
		goto _4
	}

	return float32(0)

_4:
	if _n != int32(0) {
		goto _5
	}

	return Xy0f(tls, _x)

_5:
	if _n >= int32(0) {
		goto _6
	}

	_nm1 = -(_n + int32(1))
	_sign = _n & int32(1)
	goto _7

_6:
	_nm1 = _n - int32(1)
	_sign = int32(0)
_7:
	if _nm1 != int32(0) {
		goto _8
	}

	if _sign != 0 {
		return -Xy1f(tls, _x)
	}

	return Xy1f(tls, _x)

_8:
	_a = Xy0f(tls, _x)
	_b = Xy1f(tls, _x)
	*(*float32)(unsafe.Pointer(_1__u)) = _b
	_ib = *(*uint32)(unsafe.Pointer(_1__u))
	_i = int32(0)
_10:
	if _i >= _nm1 || _ib == uint32(0xff800000) {
		goto _12
	}

	_i++
	_temp = _b
	_b = float32(float32(float32(float32(2)*float32(_i))/_x)*_b) - _a
	*(*float32)(unsafe.Pointer(_2__u)) = _b
	_ib = *(*uint32)(unsafe.Pointer(_2__u))
	_a = _temp
	goto _10

_12:
	if _sign != 0 {
		return -_b
	}

	return _b
}

type t412__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t412__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t70uint32_t = uint32

// linking ldexp.o

// Xldexp is defined at ldexp.c:3:8
func Xldexp(tls TLS, _x float64, _n int32) (r float64) {
	return Xscalbn(tls, _x, _n)
}

type t413__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t413__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// linking ldexpf.o

// Xldexpf is defined at ldexpf.c:3:7
func Xldexpf(tls TLS, _x float32, _n int32) (r float32) {
	return Xscalbnf(tls, _x, _n)
}

type t414__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t414__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// linking ldexpl.o

// Xldexpl is defined at ldexpl.c:3:13
func Xldexpl(tls TLS, _x float64, _n int32) (r float64) {
	return Xscalbnl(tls, _x, _n)
}

type t415__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t415__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// linking lgamma.o

// Xlgamma is defined at lgamma.c:6:8
func Xlgamma(tls TLS, _x float64) (r float64) {
	return X__lgamma_r(tls, _x, X__signgam)
}

type t416__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t416__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// linking lgamma_r.o

// X__lgamma_r is defined at lgamma_r.c:171:8
func X__lgamma_r(tls TLS, _x float64, _signgamp uintptr /* *int32 */) (r float64) {
	esc := MustMalloc(8)
	var (
		_u    = esc // *struct{Ff [0]float64;Fi [0]uint64;F int64}
		_t    float64
		_y    float64
		_z    float64
		_nadj float64
		_p    float64
		_p1   float64
		_p2   float64
		_p3   float64
		_q    float64
		_r    float64
		_w    float64
		_ix   uint32
		_sign int32
		_i    int32
	)
	defer Free(esc)
	*(*struct {
		Ff [0]float64
		Fi [0]uint64
		F  int64
	})(unsafe.Pointer(_u)) = *(*struct {
		Ff [0]float64
		Fi [0]uint64
		F  int64
	})(unsafe.Pointer(&struct{ f float64 }{_x}))
	*(*int32)(unsafe.Pointer(_signgamp)) = int32(1)
	_sign = int32(*(*uint64)(unsafe.Pointer(_u)) >> (uint(63) % 64))
	_ix = uint32(*(*uint64)(unsafe.Pointer(_u)) >> (uint(32) % 64) & uint64(0x7fffffff))
	if _ix < uint32(0x7ff00000) {
		goto _1
	}

	return _x * _x

_1:
	if _ix >= uint32(999292928) {
		goto _2
	}

	if _sign == 0 {
		goto _3
	}

	_x = -_x
	*(*int32)(unsafe.Pointer(_signgamp)) = int32(-1)
_3:
	return -Xlog(tls, _x)

_2:
	if _sign == 0 {
		goto _4
	}

	_x = -_x
	_t = xsin_pi(tls, _x)
	if _t != float64(0) {
		goto _5
	}

	return float64(1) / float64(_x-_x)

_5:
	if _t <= float64(0) {
		goto _6
	}

	*(*int32)(unsafe.Pointer(_signgamp)) = int32(-1)
	goto _7

_6:
	_t = -_t
_7:
	_nadj = Xlog(tls, x2pi/float64(_t*_x))
_4:
	if _ix != uint32(0x3ff00000) && _ix != uint32(0x40000000) || uint32(*(*uint64)(unsafe.Pointer(_u))) != uint32(0) {
		goto _8
	}

	_r = float64(0)
	goto _9

_8:
	if _ix >= uint32(0x40000000) {
		goto _10
	}

	if _ix > uint32(0x3feccccc) {
		goto _12
	}

	_r = -Xlog(tls, _x)
	if _ix < uint32(0x3fe76944) {
		goto _14
	}

	_y = float64(1) - _x
	_i = int32(0)
	goto _15

_14:
	if _ix < uint32(0x3fcda661) {
		goto _16
	}

	_y = _x - float64(xtc-float64(1))
	_i = int32(1)
	goto _17

_16:
	_y = _x
	_i = int32(2)
_17:
_15:
	goto _13

_12:
	_r = float64(0)
	if _ix < uint32(0x3ffbb4c3) {
		goto _18
	}

	_y = float64(2) - _x
	_i = int32(0)
	goto _19

_18:
	if _ix < uint32(0x3ff3b4c4) {
		goto _20
	}

	_y = _x - xtc
	_i = int32(1)
	goto _21

_20:
	_y = _x - float64(1)
	_i = int32(2)
_21:
_19:
_13:
	switch _i {
	case int32(0):
		goto _23
	case int32(1):
		goto _24
	case int32(2):
		goto _25
	}
	goto _22

_23:
	_z = _y * _y
	_p1 = xa0 + float64(_z*float64(xa2+float64(_z*float64(xa4+float64(_z*float64(xa6+float64(_z*float64(xa8+float64(_z*xa10)))))))))
	_p2 = _z * float64(xa1+float64(_z*float64(xa3+float64(_z*float64(xa5+float64(_z*float64(xa7+float64(_z*float64(xa9+float64(_z*xa11))))))))))
	_p = float64(_y*_p1) + _p2
	_r = _r + float64(_p-float64(float64(0.5)*_y))
	goto _22

_24:
	_z = _y * _y
	_w = _z * _y
	_p1 = xt0 + float64(_w*float64(xt3+float64(_w*float64(xt6+float64(_w*float64(xt9+float64(_w*xt12)))))))
	_p2 = xt1 + float64(_w*float64(xt4+float64(_w*float64(xt7+float64(_w*float64(xt10+float64(_w*xt13)))))))
	_p3 = xt2 + float64(_w*float64(xt5+float64(_w*float64(xt8+float64(_w*float64(xt11+float64(_w*xt14)))))))
	_p = float64(_z*_p1) - float64(xtt-float64(_w*float64(_p2+float64(_y*_p3))))
	_r = _r + float64(xtf+_p)
	goto _22

_25:
	_p1 = _y * float64(xu0+float64(_y*float64(xu1+float64(_y*float64(xu2+float64(_y*float64(xu3+float64(_y*float64(xu4+float64(_y*xu5))))))))))
	_p2 = float64(1) + float64(_y*float64(xv1+float64(_y*float64(xv2+float64(_y*float64(xv3+float64(_y*float64(xv4+float64(_y*xv5)))))))))
	_r = _r + float64(float64(float64(-0.5)*_y)+float64(_p1/_p2))
_22:
	goto _11

_10:
	if _ix >= uint32(0x40200000) {
		goto _26
	}

	_i = int32(_x)
	_y = _x - float64(_i)
	_p = _y * float64(xs0+float64(_y*float64(xs1+float64(_y*float64(xs2+float64(_y*float64(xs3+float64(_y*float64(xs4+float64(_y*float64(xs5+float64(_y*xs6))))))))))))
	_q = float64(1) + float64(_y*float64(xr1+float64(_y*float64(xr2+float64(_y*float64(xr3+float64(_y*float64(xr4+float64(_y*float64(xr5+float64(_y*xr6)))))))))))
	_r = float64(float64(0.5)*_y) + float64(_p/_q)
	_z = float64(1)
	switch _i {
	case int32(7):
		goto _29
	case int32(6):
		goto _30
	case int32(5):
		goto _31
	case int32(4):
		goto _32
	case int32(3):
		goto _33
	}
	goto _28

_29:
	_z = _z * float64(_y+float64(6))
_30:
	_z = _z * float64(_y+float64(5))
_31:
	_z = _z * float64(_y+float64(4))
_32:
	_z = _z * float64(_y+float64(3))
_33:
	_z = _z * float64(_y+float64(2))
	_r = _r + Xlog(tls, _z)
	goto _28

_28:
	goto _27

_26:
	if _ix >= uint32(0x43900000) {
		goto _34
	}

	_t = Xlog(tls, _x)
	_z = float64(1) / _x
	_y = _z * _z
	_w = xw0 + float64(_z*float64(xw1+float64(_y*float64(xw2+float64(_y*float64(xw3+float64(_y*float64(xw4+float64(_y*float64(xw5+float64(_y*xw6)))))))))))
	_r = float64(float64(_x-float64(0.5))*float64(_t-float64(1))) + _w
	goto _35

_34:
	_r = _x * float64(Xlog(tls, _x)-float64(1))
_35:
_27:
_11:
_9:
	if _sign == 0 {
		goto _36
	}

	_r = _nadj - _r
_36:
	return _r
}

type t417__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t417__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t49uint64_t = uint64

type t25double_t = float64

type t71uint32_t = uint32

// xsin_pi is defined at lgamma_r.c:150:15
func xsin_pi(tls TLS, _x float64) (r float64) {
	var _n int32

	_x = float64(2) * float64(float64(_x*float64(0.5))-Xfloor(tls, _x*float64(0.5)))
	_n = int32(_x * float64(4))
	_n = (_n + int32(1)) / int32(2)
	_x = _x - float64(float32(_n)*float32(0.5))
	_x = _x * x2pi
	switch _n {
	default:
		goto _2

	case int32(0):
		goto _3
	case int32(1):
		goto _4
	case int32(2):
		goto _5
	case int32(3):
		goto _6
	}
_2:
_3:
	return X__sin(tls, _x, float64(0), int32(0))

_4:
	return X__cos(tls, _x, float64(0))

_5:
	return X__sin(tls, -_x, float64(0), int32(0))

_6:
	return -X__cos(tls, _x, float64(0))
	return r
}

// xpi float64, escapes: false, lgamma_r.c:85:1
var x2pi = float64(3.141592653589793)

// xtc float64, escapes: false, lgamma_r.c:98:1
var xtc = float64(1.4616321449683622)

// xa0 float64, escapes: false, lgamma_r.c:86:1
var xa0 = float64(0.07721566490153287)

// xa2 float64, escapes: false, lgamma_r.c:88:1
var xa2 = float64(0.06735230105312927)

// xa4 float64, escapes: false, lgamma_r.c:90:1
var xa4 = float64(0.007385550860814029)

// xa6 float64, escapes: false, lgamma_r.c:92:1
var xa6 = float64(0.0011927076318336207)

// xa8 float64, escapes: false, lgamma_r.c:94:1
var xa8 = float64(0.00022086279071390839)

// xa10 float64, escapes: false, lgamma_r.c:96:1
var xa10 = float64(2.5214456545125733e-05)

// xa1 float64, escapes: false, lgamma_r.c:87:1
var xa1 = float64(0.3224670334241136)

// xa3 float64, escapes: false, lgamma_r.c:89:1
var xa3 = float64(0.020580808432516733)

// xa5 float64, escapes: false, lgamma_r.c:91:1
var xa5 = float64(0.0028905138367341563)

// xa7 float64, escapes: false, lgamma_r.c:93:1
var xa7 = float64(0.0005100697921535113)

// xa9 float64, escapes: false, lgamma_r.c:95:1
var xa9 = float64(0.00010801156724758394)

// xa11 float64, escapes: false, lgamma_r.c:97:1
var xa11 = float64(4.4864094961891516e-05)

// xt0 float64, escapes: false, lgamma_r.c:102:1
var xt0 = float64(0.48383612272381005)

// xt3 float64, escapes: false, lgamma_r.c:105:1
var xt3 = float64(-0.032788541075985965)

// xt6 float64, escapes: false, lgamma_r.c:108:1
var xt6 = float64(0.006100538702462913)

// xt9 float64, escapes: false, lgamma_r.c:111:1
var xt9 = float64(-0.0014034646998923284)

// xt12 float64, escapes: false, lgamma_r.c:114:1
var xt12 = float64(0.00031563207090362595)

// xt1 float64, escapes: false, lgamma_r.c:103:1
var xt1 = float64(-0.1475877229945939)

// xt4 float64, escapes: false, lgamma_r.c:106:1
var xt4 = float64(0.01797067508118204)

// xt7 float64, escapes: false, lgamma_r.c:109:1
var xt7 = float64(-0.0036845201678113826)

// xt10 float64, escapes: false, lgamma_r.c:112:1
var xt10 = float64(0.000881081882437654)

// xt13 float64, escapes: false, lgamma_r.c:115:1
var xt13 = float64(-0.00031275416837512086)

// xt2 float64, escapes: false, lgamma_r.c:104:1
var xt2 = float64(0.06462494023913339)

// xt5 float64, escapes: false, lgamma_r.c:107:1
var xt5 = float64(-0.010314224129834144)

// xt8 float64, escapes: false, lgamma_r.c:110:1
var xt8 = float64(0.0022596478090061247)

// xt11 float64, escapes: false, lgamma_r.c:113:1
var xt11 = float64(-0.0005385953053567405)

// xt14 float64, escapes: false, lgamma_r.c:116:1
var xt14 = float64(0.0003355291926355191)

// xtt float64, escapes: false, lgamma_r.c:101:1
var xtt = float64(-3.638676997039505e-18)

// xtf float64, escapes: false, lgamma_r.c:99:1
var xtf = float64(-0.12148629053584961)

// xu0 float64, escapes: false, lgamma_r.c:117:1
var xu0 = float64(-0.07721566490153287)

// xu1 float64, escapes: false, lgamma_r.c:118:1
var xu1 = float64(0.6328270640250934)

// xu2 float64, escapes: false, lgamma_r.c:119:1
var xu2 = float64(1.4549225013723477)

// xu3 float64, escapes: false, lgamma_r.c:120:1
var xu3 = float64(0.9777175279633727)

// xu4 float64, escapes: false, lgamma_r.c:121:1
var xu4 = float64(0.22896372806469245)

// xu5 float64, escapes: false, lgamma_r.c:122:1
var xu5 = float64(0.013381091853678766)

// xv1 float64, escapes: false, lgamma_r.c:123:1
var xv1 = float64(2.4559779371304113)

// xv2 float64, escapes: false, lgamma_r.c:124:1
var xv2 = float64(2.128489763798934)

// xv3 float64, escapes: false, lgamma_r.c:125:1
var xv3 = float64(0.7692851504566728)

// xv4 float64, escapes: false, lgamma_r.c:126:1
var xv4 = float64(0.10422264559336913)

// xv5 float64, escapes: false, lgamma_r.c:127:1
var xv5 = float64(0.003217092422824239)

// xs0 float64, escapes: false, lgamma_r.c:128:1
var xs0 = float64(-0.07721566490153287)

// xs1 float64, escapes: false, lgamma_r.c:129:1
var xs1 = float64(0.21498241596060885)

// xs2 float64, escapes: false, lgamma_r.c:130:1
var xs2 = float64(0.325778796408931)

// xs3 float64, escapes: false, lgamma_r.c:131:1
var xs3 = float64(0.14635047265246445)

// xs4 float64, escapes: false, lgamma_r.c:132:1
var xs4 = float64(0.02664227030336386)

// xs5 float64, escapes: false, lgamma_r.c:133:1
var xs5 = float64(0.0018402845140733772)

// xs6 float64, escapes: false, lgamma_r.c:134:1
var xs6 = float64(3.194753265841009e-05)

// xr1 float64, escapes: false, lgamma_r.c:135:1
var xr1 = float64(1.3920053346762105)

// xr2 float64, escapes: false, lgamma_r.c:136:1
var xr2 = float64(0.7219355475671381)

// xr3 float64, escapes: false, lgamma_r.c:137:1
var xr3 = float64(0.17193386563280308)

// xr4 float64, escapes: false, lgamma_r.c:138:1
var xr4 = float64(0.01864591917156529)

// xr5 float64, escapes: false, lgamma_r.c:139:1
var xr5 = float64(0.0007779424963818936)

// xr6 float64, escapes: false, lgamma_r.c:140:1
var xr6 = float64(7.326684307446256e-06)

// xw0 float64, escapes: false, lgamma_r.c:141:1
var xw0 = float64(0.4189385332046727)

// xw1 float64, escapes: false, lgamma_r.c:142:1
var xw1 = float64(0.08333333333333297)

// xw2 float64, escapes: false, lgamma_r.c:143:1
var xw2 = float64(-0.0027777777772877554)

// xw3 float64, escapes: false, lgamma_r.c:144:1
var xw3 = float64(0.0007936505586430196)

// xw4 float64, escapes: false, lgamma_r.c:145:1
var xw4 = float64(-0.00059518755745034)

// xw5 float64, escapes: false, lgamma_r.c:146:1
var xw5 = float64(0.0008363399189962821)

// xw6 float64, escapes: false, lgamma_r.c:147:1
var xw6 = float64(-0.0016309293409657527)

// linking lgammaf.o

// Xlgammaf is defined at lgammaf.c:6:7
func Xlgammaf(tls TLS, _x float32) (r float32) {
	return X__lgammaf_r(tls, _x, X__signgam)
}

type t418__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t418__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// linking lgammaf_r.o

// X__lgammaf_r is defined at lgammaf_r.c:106:7
func X__lgammaf_r(tls TLS, _x float32, _signgamp uintptr /* *int32 */) (r float32) {
	esc := MustMalloc(4)
	var (
		_u    = esc // *struct{Ff [0]float32;Fi [0]uint32;F int32}
		_t    float32
		_y    float32
		_z    float32
		_nadj float32
		_p    float32
		_p1   float32
		_p2   float32
		_p3   float32
		_q    float32
		_r    float32
		_w    float32
		_ix   uint32
		_i    int32
		_sign int32
	)
	defer Free(esc)
	*(*struct {
		Ff [0]float32
		Fi [0]uint32
		F  int32
	})(unsafe.Pointer(_u)) = *(*struct {
		Ff [0]float32
		Fi [0]uint32
		F  int32
	})(unsafe.Pointer(&struct{ f float32 }{_x}))
	*(*int32)(unsafe.Pointer(_signgamp)) = int32(1)
	_sign = int32(*(*uint32)(unsafe.Pointer(_u)) >> (uint(31) % 32))
	_ix = *(*uint32)(unsafe.Pointer(_u)) & uint32(0x7fffffff)
	if _ix < uint32(0x7f800000) {
		goto _1
	}

	return _x * _x

_1:
	if _ix >= uint32(0x35000000) {
		goto _2
	}

	if _sign == 0 {
		goto _3
	}

	*(*int32)(unsafe.Pointer(_signgamp)) = int32(-1)
	_x = -_x
_3:
	return -Xlogf(tls, _x)

_2:
	if _sign == 0 {
		goto _4
	}

	_x = -_x
	_t = x1sin_pi(tls, _x)
	if _t != float32(0) {
		goto _5
	}

	return float32(1) / float32(_x-_x)

_5:
	if _t <= float32(0) {
		goto _6
	}

	*(*int32)(unsafe.Pointer(_signgamp)) = int32(-1)
	goto _7

_6:
	_t = -_t
_7:
	_nadj = Xlogf(tls, x3pi/float32(_t*_x))
_4:
	if _ix != uint32(0x3f800000) && _ix != uint32(0x40000000) {
		goto _8
	}

	_r = float32(0)
	goto _9

_8:
	if _ix >= uint32(0x40000000) {
		goto _10
	}

	if _ix > uint32(0x3f666666) {
		goto _12
	}

	_r = -Xlogf(tls, _x)
	if _ix < uint32(0x3f3b4a20) {
		goto _14
	}

	_y = float32(1) - _x
	_i = int32(0)
	goto _15

_14:
	if _ix < uint32(0x3e6d3308) {
		goto _16
	}

	_y = _x - float32(x1tc-float32(1))
	_i = int32(1)
	goto _17

_16:
	_y = _x
	_i = int32(2)
_17:
_15:
	goto _13

_12:
	_r = float32(0)
	if _ix < uint32(0x3fdda618) {
		goto _18
	}

	_y = float32(2) - _x
	_i = int32(0)
	goto _19

_18:
	if _ix < uint32(0x3f9da620) {
		goto _20
	}

	_y = _x - x1tc
	_i = int32(1)
	goto _21

_20:
	_y = _x - float32(1)
	_i = int32(2)
_21:
_19:
_13:
	switch _i {
	case int32(0):
		goto _23
	case int32(1):
		goto _24
	case int32(2):
		goto _25
	}
	goto _22

_23:
	_z = _y * _y
	_p1 = x1a0 + float32(_z*float32(x1a2+float32(_z*float32(x1a4+float32(_z*float32(x1a6+float32(_z*float32(x1a8+float32(_z*x1a10)))))))))
	_p2 = _z * float32(x1a1+float32(_z*float32(x1a3+float32(_z*float32(x1a5+float32(_z*float32(x1a7+float32(_z*float32(x1a9+float32(_z*x1a11))))))))))
	_p = float32(_y*_p1) + _p2
	_r = _r + float32(_p-float32(float32(0.5)*_y))
	goto _22

_24:
	_z = _y * _y
	_w = _z * _y
	_p1 = x1t0 + float32(_w*float32(x1t3+float32(_w*float32(x1t6+float32(_w*float32(x1t9+float32(_w*x1t12)))))))
	_p2 = x1t1 + float32(_w*float32(x1t4+float32(_w*float32(x1t7+float32(_w*float32(x1t10+float32(_w*x1t13)))))))
	_p3 = x1t2 + float32(_w*float32(x1t5+float32(_w*float32(x1t8+float32(_w*float32(x1t11+float32(_w*x1t14)))))))
	_p = float32(_z*_p1) - float32(x1tt-float32(_w*float32(_p2+float32(_y*_p3))))
	_r = _r + float32(x1tf+_p)
	goto _22

_25:
	_p1 = _y * float32(x1u0+float32(_y*float32(x1u1+float32(_y*float32(x1u2+float32(_y*float32(x1u3+float32(_y*float32(x1u4+float32(_y*x1u5))))))))))
	_p2 = float32(1) + float32(_y*float32(x1v1+float32(_y*float32(x1v2+float32(_y*float32(x1v3+float32(_y*float32(x1v4+float32(_y*x1v5)))))))))
	_r = _r + float32(float32(float32(-0.5)*_y)+float32(_p1/_p2))
_22:
	goto _11

_10:
	if _ix >= uint32(0x41000000) {
		goto _26
	}

	_i = int32(_x)
	_y = _x - float32(_i)
	_p = _y * float32(x1s0+float32(_y*float32(x1s1+float32(_y*float32(x1s2+float32(_y*float32(x1s3+float32(_y*float32(x1s4+float32(_y*float32(x1s5+float32(_y*x1s6))))))))))))
	_q = float32(1) + float32(_y*float32(x1r1+float32(_y*float32(x1r2+float32(_y*float32(x1r3+float32(_y*float32(x1r4+float32(_y*float32(x1r5+float32(_y*x1r6)))))))))))
	_r = float32(float32(0.5)*_y) + float32(_p/_q)
	_z = float32(1)
	switch _i {
	case int32(7):
		goto _29
	case int32(6):
		goto _30
	case int32(5):
		goto _31
	case int32(4):
		goto _32
	case int32(3):
		goto _33
	}
	goto _28

_29:
	_z = _z * float32(_y+float32(6))
_30:
	_z = _z * float32(_y+float32(5))
_31:
	_z = _z * float32(_y+float32(4))
_32:
	_z = _z * float32(_y+float32(3))
_33:
	_z = _z * float32(_y+float32(2))
	_r = _r + Xlogf(tls, _z)
	goto _28

_28:
	goto _27

_26:
	if _ix >= uint32(0x5c800000) {
		goto _34
	}

	_t = Xlogf(tls, _x)
	_z = float32(1) / _x
	_y = _z * _z
	_w = x1w0 + float32(_z*float32(x1w1+float32(_y*float32(x1w2+float32(_y*float32(x1w3+float32(_y*float32(x1w4+float32(_y*float32(x1w5+float32(_y*x1w6)))))))))))
	_r = float32(float32(_x-float32(0.5))*float32(_t-float32(1))) + _w
	goto _35

_34:
	_r = _x * float32(Xlogf(tls, _x)-float32(1))
_35:
_27:
_11:
_9:
	if _sign == 0 {
		goto _36
	}

	_r = _nadj - _r
_36:
	return _r
}

type t419__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t419__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t72uint32_t = uint32

// xsin_pi is defined at lgammaf_r.c:85:14
func x1sin_pi(tls TLS, _x float32) (r float32) {
	var (
		_y float64
		_n int32
	)
	_x = float32(2) * float32(float32(_x*float32(0.5))-Xfloorf(tls, _x*float32(0.5)))
	_n = int32(_x * float32(4))
	_n = (_n + int32(1)) / int32(2)
	_y = float64(_x - float32(float32(_n)*float32(0.5)))
	_y = _y * float64(3.141592653589793)
	switch _n {
	default:
		goto _2

	case int32(0):
		goto _3
	case int32(1):
		goto _4
	case int32(2):
		goto _5
	case int32(3):
		goto _6
	}
_2:
_3:
	return X__sindf(tls, _y)

_4:
	return X__cosdf(tls, _y)

_5:
	return X__sindf(tls, -_y)

_6:
	return -X__cosdf(tls, _y)
	return r
}

// xpi float32, escapes: false, lgammaf_r.c:20:1
var x3pi = float32(3.1415927)

// xtc float32, escapes: false, lgammaf_r.c:33:1
var x1tc = float32(1.4616321)

// xa0 float32, escapes: false, lgammaf_r.c:21:1
var x1a0 = float32(0.077215664)

// xa2 float32, escapes: false, lgammaf_r.c:23:1
var x1a2 = float32(0.0673523)

// xa4 float32, escapes: false, lgammaf_r.c:25:1
var x1a4 = float32(0.007385551)

// xa6 float32, escapes: false, lgammaf_r.c:27:1
var x1a6 = float32(0.0011927077)

// xa8 float32, escapes: false, lgammaf_r.c:29:1
var x1a8 = float32(0.00022086278)

// xa10 float32, escapes: false, lgammaf_r.c:31:1
var x1a10 = float32(2.5214456e-05)

// xa1 float32, escapes: false, lgammaf_r.c:22:1
var x1a1 = float32(0.32246703)

// xa3 float32, escapes: false, lgammaf_r.c:24:1
var x1a3 = float32(0.020580808)

// xa5 float32, escapes: false, lgammaf_r.c:26:1
var x1a5 = float32(0.0028905137)

// xa7 float32, escapes: false, lgammaf_r.c:28:1
var x1a7 = float32(0.0005100698)

// xa9 float32, escapes: false, lgammaf_r.c:30:1
var x1a9 = float32(0.00010801157)

// xa11 float32, escapes: false, lgammaf_r.c:32:1
var x1a11 = float32(4.4864097e-05)

// xt0 float32, escapes: false, lgammaf_r.c:37:1
var x1t0 = float32(0.4838361)

// xt3 float32, escapes: false, lgammaf_r.c:40:1
var x1t3 = float32(-0.03278854)

// xt6 float32, escapes: false, lgammaf_r.c:43:1
var x1t6 = float32(0.0061005387)

// xt9 float32, escapes: false, lgammaf_r.c:46:1
var x1t9 = float32(-0.0014034647)

// xt12 float32, escapes: false, lgammaf_r.c:49:1
var x1t12 = float32(0.00031563206)

// xt1 float32, escapes: false, lgammaf_r.c:38:1
var x1t1 = float32(-0.14758772)

// xt4 float32, escapes: false, lgammaf_r.c:41:1
var x1t4 = float32(0.017970676)

// xt7 float32, escapes: false, lgammaf_r.c:44:1
var x1t7 = float32(-0.0036845203)

// xt10 float32, escapes: false, lgammaf_r.c:47:1
var x1t10 = float32(0.00088108185)

// xt13 float32, escapes: false, lgammaf_r.c:50:1
var x1t13 = float32(-0.00031275416)

// xt2 float32, escapes: false, lgammaf_r.c:39:1
var x1t2 = float32(0.06462494)

// xt5 float32, escapes: false, lgammaf_r.c:42:1
var x1t5 = float32(-0.010314224)

// xt8 float32, escapes: false, lgammaf_r.c:45:1
var x1t8 = float32(0.0022596477)

// xt11 float32, escapes: false, lgammaf_r.c:48:1
var x1t11 = float32(-0.0005385953)

// xt14 float32, escapes: false, lgammaf_r.c:51:1
var x1t14 = float32(0.00033552918)

// xtt float32, escapes: false, lgammaf_r.c:36:1
var x1tt = float32(6.6971007e-09)

// xtf float32, escapes: false, lgammaf_r.c:34:1
var x1tf = float32(-0.121486284)

// xu0 float32, escapes: false, lgammaf_r.c:52:1
var x1u0 = float32(-0.077215664)

// xu1 float32, escapes: false, lgammaf_r.c:53:1
var x1u1 = float32(0.63282704)

// xu2 float32, escapes: false, lgammaf_r.c:54:1
var x1u2 = float32(1.4549226)

// xu3 float32, escapes: false, lgammaf_r.c:55:1
var x1u3 = float32(0.9777175)

// xu4 float32, escapes: false, lgammaf_r.c:56:1
var x1u4 = float32(0.22896373)

// xu5 float32, escapes: false, lgammaf_r.c:57:1
var x1u5 = float32(0.013381092)

// xv1 float32, escapes: false, lgammaf_r.c:58:1
var x1v1 = float32(2.455978)

// xv2 float32, escapes: false, lgammaf_r.c:59:1
var x1v2 = float32(2.1284897)

// xv3 float32, escapes: false, lgammaf_r.c:60:1
var x1v3 = float32(0.76928514)

// xv4 float32, escapes: false, lgammaf_r.c:61:1
var x1v4 = float32(0.10422265)

// xv5 float32, escapes: false, lgammaf_r.c:62:1
var x1v5 = float32(0.0032170925)

// xs0 float32, escapes: false, lgammaf_r.c:63:1
var x1s0 = float32(-0.077215664)

// xs1 float32, escapes: false, lgammaf_r.c:64:1
var x1s1 = float32(0.21498242)

// xs2 float32, escapes: false, lgammaf_r.c:65:1
var x1s2 = float32(0.32577878)

// xs3 float32, escapes: false, lgammaf_r.c:66:1
var x1s3 = float32(0.14635047)

// xs4 float32, escapes: false, lgammaf_r.c:67:1
var x1s4 = float32(0.02664227)

// xs5 float32, escapes: false, lgammaf_r.c:68:1
var x1s5 = float32(0.0018402846)

// xs6 float32, escapes: false, lgammaf_r.c:69:1
var x1s6 = float32(3.1947533e-05)

// xr1 float32, escapes: false, lgammaf_r.c:70:1
var x1r1 = float32(1.3920053)

// xr2 float32, escapes: false, lgammaf_r.c:71:1
var x1r2 = float32(0.7219356)

// xr3 float32, escapes: false, lgammaf_r.c:72:1
var x1r3 = float32(0.17193386)

// xr4 float32, escapes: false, lgammaf_r.c:73:1
var x1r4 = float32(0.01864592)

// xr5 float32, escapes: false, lgammaf_r.c:74:1
var x1r5 = float32(0.0007779425)

// xr6 float32, escapes: false, lgammaf_r.c:75:1
var x1r6 = float32(7.326684e-06)

// xw0 float32, escapes: false, lgammaf_r.c:76:1
var x1w0 = float32(0.41893855)

// xw1 float32, escapes: false, lgammaf_r.c:77:1
var x1w1 = float32(0.083333336)

// xw2 float32, escapes: false, lgammaf_r.c:78:1
var x1w2 = float32(-0.0027777778)

// xw3 float32, escapes: false, lgammaf_r.c:79:1
var x1w3 = float32(0.0007936506)

// xw4 float32, escapes: false, lgammaf_r.c:80:1
var x1w4 = float32(-0.00059518754)

// xw5 float32, escapes: false, lgammaf_r.c:81:1
var x1w5 = float32(0.0008363399)

// xw6 float32, escapes: false, lgammaf_r.c:82:1
var x1w6 = float32(-0.0016309293)

type t26double_t = float64

// linking lgammal.o

// X__lgammal_r is defined at lgammal.c:95:13
func X__lgammal_r(tls TLS, _x float64, _sg uintptr /* *int32 */) (r float64) {
	return X__lgamma_r(tls, _x, _sg)
}

// Xlgammal is defined at lgammal.c:355:13
func Xlgammal(tls TLS, _x float64) (r float64) {
	return X__lgammal_r(tls, _x, X__signgam)
}

type t420__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t420__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// linking llrint.o

// Xllrint is defined at llrint.c:5:11
func Xllrint(tls TLS, _x float64) (r int64) {
	return int64(Xrint(tls, _x))
}

type t421__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t421__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// linking llrintf.o

// Xllrintf is defined at llrintf.c:5:11
func Xllrintf(tls TLS, _x float32) (r int64) {
	return int64(Xrintf(tls, _x))
}

type t422__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t422__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// linking llrintl.o

// Xllrintl is defined at llrintl.c:7:11
func Xllrintl(tls TLS, _x float64) (r int64) {
	return Xllrint(tls, _x)
}

type t423__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t423__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// linking llround.o

// Xllround is defined at llround.c:3:11
func Xllround(tls TLS, _x float64) (r int64) {
	return int64(Xround(tls, _x))
}

type t424__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t424__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// linking llroundf.o

// Xllroundf is defined at llroundf.c:3:11
func Xllroundf(tls TLS, _x float32) (r int64) {
	return int64(Xroundf(tls, _x))
}

type t425__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t425__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// linking llroundl.o

// Xllroundl is defined at llroundl.c:3:11
func Xllroundl(tls TLS, _x float64) (r int64) {
	return int64(Xroundl(tls, _x))
}

type t426__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t426__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// linking log.o

// Xlog is defined at log.c:77:8
func Xlog(tls TLS, _x float64) (r float64) {
	esc := MustMalloc(8)
	var (
		_u    = esc // *struct{Ff [0]float64;Fi [0]uint64;F int64}
		_hfsq float64
		_f    float64
		_s    float64
		_z    float64
		_R    float64
		_w    float64
		_t1   float64
		_t2   float64
		_dk   float64
		_hx   uint32
		_k    int32
	)
	defer Free(esc)
	*(*struct {
		Ff [0]float64
		Fi [0]uint64
		F  int64
	})(unsafe.Pointer(_u)) = *(*struct {
		Ff [0]float64
		Fi [0]uint64
		F  int64
	})(unsafe.Pointer(&struct{ f float64 }{_x}))
	_hx = uint32(*(*uint64)(unsafe.Pointer(_u)) >> (uint(32) % 64))
	_k = int32(0)
	if _hx >= uint32(0x100000) && (_hx>>(uint(31)%32)) == 0 {
		goto _1
	}

	if *(*uint64)(unsafe.Pointer(_u))<<(uint(1)%64) != uint64(0) {
		goto _3
	}

	return float64(-1) / float64(_x*_x)

_3:
	if (_hx >> (uint(31) % 32)) == 0 {
		goto _4
	}

	return float64(_x-_x) / float64(0)

_4:
	_k = _k - int32(54)
	_x = _x * float64(1.8014398509481984e+16)
	*(*float64)(unsafe.Pointer(_u)) = _x
	_hx = uint32(*(*uint64)(unsafe.Pointer(_u)) >> (uint(32) % 64))
	goto _2

_1:
	if _hx < uint32(0x7ff00000) {
		goto _5
	}

	return _x

	goto _6

_5:
	if _hx != uint32(0x3ff00000) || *(*uint64)(unsafe.Pointer(_u))<<(uint(32)%64) != uint64(0) {
		goto _7
	}

	return float64(0)

_7:
_6:
_2:
	_hx = _hx + uint32(614242)
	_k = _k + (int32(_hx>>(uint(20)%32)) - int32(0x3ff))
	_hx = _hx&uint32(0xfffff) + uint32(0x3fe6a09e)
	*(*uint64)(unsafe.Pointer(_u)) = uint64(_hx)<<(uint(32)%64) | *(*uint64)(unsafe.Pointer(_u))&uint64(0xffffffff)
	_x = *(*float64)(unsafe.Pointer(_u))
	_f = _x - float64(1)
	_hfsq = float64(float64(0.5)*_f) * _f
	_s = _f / float64(float64(2)+_f)
	_z = _s * _s
	_w = _z * _z
	_t1 = _w * float64(xLg2+float64(_w*float64(xLg4+float64(_w*xLg6))))
	_t2 = _z * float64(xLg1+float64(_w*float64(xLg3+float64(_w*float64(xLg5+float64(_w*xLg7))))))
	_R = _t2 + _t1
	_dk = float64(_k)
	return float64(float64(float64(float64(_s*float64(_hfsq+_R))+float64(_dk*x2ln2_lo))-_hfsq)+_f) + float64(_dk*x2ln2_hi)
}

type t427__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t427__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t50uint64_t = uint64

type t27double_t = float64

type t73uint32_t = uint32

// xLg2 float64, escapes: false, log.c:70:1
var xLg2 = float64(0.3999999999940942)

// xLg4 float64, escapes: false, log.c:72:1
var xLg4 = float64(0.22222198432149784)

// xLg6 float64, escapes: false, log.c:74:1
var xLg6 = float64(0.15313837699209373)

// xLg1 float64, escapes: false, log.c:69:1
var xLg1 = float64(0.6666666666666735)

// xLg3 float64, escapes: false, log.c:71:1
var xLg3 = float64(0.2857142874366239)

// xLg5 float64, escapes: false, log.c:73:1
var xLg5 = float64(0.1818357216161805)

// xLg7 float64, escapes: false, log.c:75:1
var xLg7 = float64(0.14798198605116586)

// xln2_lo float64, escapes: false, log.c:68:1
var x2ln2_lo = float64(1.9082149292705877e-10)

// xln2_hi float64, escapes: false, log.c:67:1
var x2ln2_hi = float64(0.6931471803691238)

// linking log10.o

// Xlog10 is defined at log10.c:36:8
func Xlog10(tls TLS, _x float64) (r float64) {
	esc := MustMalloc(8)
	var (
		_u      = esc // *struct{Ff [0]float64;Fi [0]uint64;F int64}
		_hfsq   float64
		_f      float64
		_s      float64
		_z      float64
		_R      float64
		_w      float64
		_t1     float64
		_t2     float64
		_dk     float64
		_y      float64
		_hi     float64
		_lo     float64
		_val_hi float64
		_val_lo float64
		_hx     uint32
		_k      int32
	)
	defer Free(esc)
	*(*struct {
		Ff [0]float64
		Fi [0]uint64
		F  int64
	})(unsafe.Pointer(_u)) = *(*struct {
		Ff [0]float64
		Fi [0]uint64
		F  int64
	})(unsafe.Pointer(&struct{ f float64 }{_x}))
	_hx = uint32(*(*uint64)(unsafe.Pointer(_u)) >> (uint(32) % 64))
	_k = int32(0)
	if _hx >= uint32(0x100000) && (_hx>>(uint(31)%32)) == 0 {
		goto _1
	}

	if *(*uint64)(unsafe.Pointer(_u))<<(uint(1)%64) != uint64(0) {
		goto _3
	}

	return float64(-1) / float64(_x*_x)

_3:
	if (_hx >> (uint(31) % 32)) == 0 {
		goto _4
	}

	return float64(_x-_x) / float64(0)

_4:
	_k = _k - int32(54)
	_x = _x * float64(1.8014398509481984e+16)
	*(*float64)(unsafe.Pointer(_u)) = _x
	_hx = uint32(*(*uint64)(unsafe.Pointer(_u)) >> (uint(32) % 64))
	goto _2

_1:
	if _hx < uint32(0x7ff00000) {
		goto _5
	}

	return _x

	goto _6

_5:
	if _hx != uint32(0x3ff00000) || *(*uint64)(unsafe.Pointer(_u))<<(uint(32)%64) != uint64(0) {
		goto _7
	}

	return float64(0)

_7:
_6:
_2:
	_hx = _hx + uint32(614242)
	_k = _k + (int32(_hx>>(uint(20)%32)) - int32(0x3ff))
	_hx = _hx&uint32(0xfffff) + uint32(0x3fe6a09e)
	*(*uint64)(unsafe.Pointer(_u)) = uint64(_hx)<<(uint(32)%64) | *(*uint64)(unsafe.Pointer(_u))&uint64(0xffffffff)
	_x = *(*float64)(unsafe.Pointer(_u))
	_f = _x - float64(1)
	_hfsq = float64(float64(0.5)*_f) * _f
	_s = _f / float64(float64(2)+_f)
	_z = _s * _s
	_w = _z * _z
	_t1 = _w * float64(x1Lg2+float64(_w*float64(x1Lg4+float64(_w*x1Lg6))))
	_t2 = _z * float64(x1Lg1+float64(_w*float64(x1Lg3+float64(_w*float64(x1Lg5+float64(_w*x1Lg7))))))
	_R = _t2 + _t1
	_hi = _f - _hfsq
	*(*float64)(unsafe.Pointer(_u)) = _hi
	{
		p := (*uint64)(unsafe.Pointer(_u))
		*p = *p & uint64(18446744069414584320)
	}
	_hi = *(*float64)(unsafe.Pointer(_u))
	_lo = float64(float64(_f-_hi)-_hfsq) + float64(_s*float64(_hfsq+_R))
	_val_hi = _hi * xivln10hi
	_dk = float64(_k)
	_y = _dk * xlog10_2hi
	_val_lo = float64(float64(_dk*xlog10_2lo)+float64(float64(_lo+_hi)*xivln10lo)) + float64(_lo*xivln10hi)
	_w = _y + _val_hi
	_val_lo = _val_lo + float64(float64(_y-_w)+_val_hi)
	_val_hi = _w
	return _val_lo + _val_hi
}

type t428__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t428__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t51uint64_t = uint64

type t28double_t = float64

type t74uint32_t = uint32

// xLg2 float64, escapes: false, log10.c:29:1
var x1Lg2 = float64(0.3999999999940942)

// xLg4 float64, escapes: false, log10.c:31:1
var x1Lg4 = float64(0.22222198432149784)

// xLg6 float64, escapes: false, log10.c:33:1
var x1Lg6 = float64(0.15313837699209373)

// xLg1 float64, escapes: false, log10.c:28:1
var x1Lg1 = float64(0.6666666666666735)

// xLg3 float64, escapes: false, log10.c:30:1
var x1Lg3 = float64(0.2857142874366239)

// xLg5 float64, escapes: false, log10.c:32:1
var x1Lg5 = float64(0.1818357216161805)

// xLg7 float64, escapes: false, log10.c:34:1
var x1Lg7 = float64(0.14798198605116586)

// xivln10hi float64, escapes: false, log10.c:24:1
var xivln10hi = float64(0.4342944818781689)

// xlog10_2hi float64, escapes: false, log10.c:26:1
var xlog10_2hi = float64(0.30102999566361177)

// xlog10_2lo float64, escapes: false, log10.c:27:1
var xlog10_2lo = float64(3.694239077158931e-13)

// xivln10lo float64, escapes: false, log10.c:25:1
var xivln10lo = float64(2.5082946711645275e-11)

// linking log10f.o

// Xlog10f is defined at log10f.c:30:7
func Xlog10f(tls TLS, _x float32) (r float32) {
	esc := MustMalloc(4)
	var (
		_u    = esc // *struct{Ff [0]float32;Fi [0]uint32;F int32}
		_hfsq float32
		_f    float32
		_s    float32
		_z    float32
		_R    float32
		_w    float32
		_t1   float32
		_t2   float32
		_dk   float32
		_hi   float32
		_lo   float32
		_ix   uint32
		_k    int32
	)
	defer Free(esc)
	*(*struct {
		Ff [0]float32
		Fi [0]uint32
		F  int32
	})(unsafe.Pointer(_u)) = *(*struct {
		Ff [0]float32
		Fi [0]uint32
		F  int32
	})(unsafe.Pointer(&struct{ f float32 }{_x}))
	_ix = *(*uint32)(unsafe.Pointer(_u))
	_k = int32(0)
	if _ix >= uint32(0x800000) && (_ix>>(uint(31)%32)) == 0 {
		goto _1
	}

	if _ix<<(uint(1)%32) != uint32(0) {
		goto _3
	}

	return float32(-1) / float32(_x*_x)

_3:
	if (_ix >> (uint(31) % 32)) == 0 {
		goto _4
	}

	return float32(_x-_x) / float32(0)

_4:
	_k = _k - int32(25)
	_x = _x * float32(3.3554432e+07)
	*(*float32)(unsafe.Pointer(_u)) = _x
	_ix = *(*uint32)(unsafe.Pointer(_u))
	goto _2

_1:
	if _ix < uint32(0x7f800000) {
		goto _5
	}

	return _x

	goto _6

_5:
	if _ix != uint32(0x3f800000) {
		goto _7
	}

	return float32(0)

_7:
_6:
_2:
	_ix = _ix + uint32(4913933)
	_k = _k + (int32(_ix>>(uint(23)%32)) - int32(0x7f))
	_ix = _ix&uint32(0x7fffff) + uint32(0x3f3504f3)
	*(*uint32)(unsafe.Pointer(_u)) = _ix
	_x = *(*float32)(unsafe.Pointer(_u))
	_f = _x - float32(1)
	_s = _f / float32(float32(2)+_f)
	_z = _s * _s
	_w = _z * _z
	_t1 = _w * float32(x2Lg2+float32(_w*x2Lg4))
	_t2 = _z * float32(x2Lg1+float32(_w*x2Lg3))
	_R = _t2 + _t1
	_hfsq = float32(float32(0.5)*_f) * _f
	_hi = _f - _hfsq
	*(*float32)(unsafe.Pointer(_u)) = _hi
	{
		p := (*uint32)(unsafe.Pointer(_u))
		*p = *p & uint32(0xfffff000)
	}
	_hi = *(*float32)(unsafe.Pointer(_u))
	_lo = float32(float32(_f-_hi)-_hfsq) + float32(_s*float32(_hfsq+_R))
	_dk = float32(_k)
	return float32(float32(float32(float32(_dk*x1log10_2lo)+float32(float32(_lo+_hi)*x1ivln10lo))+float32(_lo*x1ivln10hi))+float32(_hi*x1ivln10hi)) + float32(_dk*x1log10_2hi)
}

type t429__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t429__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t75uint32_t = uint32

type t10float_t = float32

// xLg2 float32, escapes: false, log10f.c:26:1
var x2Lg2 = float32(0.40000972)

// xLg4 float32, escapes: false, log10f.c:28:1
var x2Lg4 = float32(0.24279079)

// xLg1 float32, escapes: false, log10f.c:25:1
var x2Lg1 = float32(0.6666666)

// xLg3 float32, escapes: false, log10f.c:27:1
var x2Lg3 = float32(0.28498787)

// xlog10_2lo float32, escapes: false, log10f.c:23:1
var x1log10_2lo = float32(7.903415e-07)

// xivln10lo float32, escapes: false, log10f.c:21:1
var x1ivln10lo = float32(-3.168997e-05)

// xivln10hi float32, escapes: false, log10f.c:20:1
var x1ivln10hi = float32(0.43432617)

// xlog10_2hi float32, escapes: false, log10f.c:22:1
var x1log10_2hi = float32(0.3010292)

// linking log10l.o

// Xlog10l is defined at log10l.c:63:13
func Xlog10l(tls TLS, _x float64) (r float64) {
	return Xlog10(tls, _x)
}

type t430__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t430__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// linking log1p.o

// Xlog1p is defined at log1p.c:69:8
func Xlog1p(tls TLS, _x float64) (r float64) {
	esc := MustMalloc(8)
	var (
		_u    = esc // *struct{Ff [0]float64;Fi [0]uint64;F int64}
		_hfsq float64
		_f    float64
		_c    float64
		_s    float64
		_z    float64
		_R    float64
		_w    float64
		_t1   float64
		_t2   float64
		_dk   float64
		_hx   uint32
		_hu   uint32
		_k    int32
		___x  float32
		_     = ___x
		_1__x float64
		_     = _1__x
		_2__x float64
		_     = _2__x
	)
	defer Free(esc)
	*(*struct {
		Ff [0]float64
		Fi [0]uint64
		F  int64
	})(unsafe.Pointer(_u)) = *(*struct {
		Ff [0]float64
		Fi [0]uint64
		F  int64
	})(unsafe.Pointer(&struct{ f float64 }{_x}))
	_hx = uint32(*(*uint64)(unsafe.Pointer(_u)) >> (uint(32) % 64))
	_k = int32(1)
	if _hx >= uint32(0x3fda827a) && (_hx>>(uint(31)%32)) == 0 {
		goto _1
	}

	if _hx < uint32(0xbff00000) {
		goto _3
	}

	if _x != float64(-1) {
		goto _4
	}

	return _x / float64(0)

_4:
	return float64(_x-_x) / float64(0)

_3:
	if _hx<<(uint(1)%32) >= uint32(2034237440) {
		goto _5
	}

	if _hx&uint32(0x7ff00000) != uint32(0) {
		goto _6
	}

	___x = float32(_x)
	goto _8

	goto _9

	_1__x = float64(float32(_x))
	goto _10

_9:
	_2__x = float64(float32(_x))
_10:
_8:
_6:
	return _x

_5:
	if _hx > uint32(0xbfd2bec4) {
		goto _11
	}

	_k = int32(0)
	_c = float64(0)
	_f = _x
_11:
	goto _2

_1:
	if _hx < uint32(0x7ff00000) {
		goto _12
	}

	return _x

_12:
_2:
	if _k == 0 {
		goto _13
	}

	*(*float64)(unsafe.Pointer(_u)) = float64(1) + _x
	_hu = uint32(*(*uint64)(unsafe.Pointer(_u)) >> (uint(32) % 64))
	_hu = _hu + uint32(614242)
	_k = int32(_hu>>(uint(20)%32)) - int32(0x3ff)
	if _k >= int32(54) {
		goto _14
	}

	_c = func() float64 {
		if _k >= int32(2) {
			return float64(1) - float64(*(*float64)(unsafe.Pointer(_u))-_x)
		}
		return _x - float64(*(*float64)(unsafe.Pointer(_u))-float64(1))
	}()
	_c = _c / *(*float64)(unsafe.Pointer(_u))
	goto _15

_14:
	_c = float64(0)
_15:
	_hu = _hu&uint32(0xfffff) + uint32(0x3fe6a09e)
	*(*uint64)(unsafe.Pointer(_u)) = uint64(_hu)<<(uint(32)%64) | *(*uint64)(unsafe.Pointer(_u))&uint64(0xffffffff)
	_f = *(*float64)(unsafe.Pointer(_u)) - float64(1)
_13:
	_hfsq = float64(float64(0.5)*_f) * _f
	_s = _f / float64(float64(2)+_f)
	_z = _s * _s
	_w = _z * _z
	_t1 = _w * float64(x3Lg2+float64(_w*float64(x3Lg4+float64(_w*x2Lg6))))
	_t2 = _z * float64(x3Lg1+float64(_w*float64(x3Lg3+float64(_w*float64(x2Lg5+float64(_w*x2Lg7))))))
	_R = _t2 + _t1
	_dk = float64(_k)
	return float64(float64(float64(float64(_s*float64(_hfsq+_R))+float64(float64(_dk*x3ln2_lo)+_c))-_hfsq)+_f) + float64(_dk*x3ln2_hi)
}

type t431__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t431__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t52uint64_t = uint64

type t29double_t = float64

type t76uint32_t = uint32

// xLg2 float64, escapes: false, log1p.c:62:1
var x3Lg2 = float64(0.3999999999940942)

// xLg4 float64, escapes: false, log1p.c:64:1
var x3Lg4 = float64(0.22222198432149784)

// xLg6 float64, escapes: false, log1p.c:66:1
var x2Lg6 = float64(0.15313837699209373)

// xLg1 float64, escapes: false, log1p.c:61:1
var x3Lg1 = float64(0.6666666666666735)

// xLg3 float64, escapes: false, log1p.c:63:1
var x3Lg3 = float64(0.2857142874366239)

// xLg5 float64, escapes: false, log1p.c:65:1
var x2Lg5 = float64(0.1818357216161805)

// xLg7 float64, escapes: false, log1p.c:67:1
var x2Lg7 = float64(0.14798198605116586)

// xln2_lo float64, escapes: false, log1p.c:60:1
var x3ln2_lo = float64(1.9082149292705877e-10)

// xln2_hi float64, escapes: false, log1p.c:59:1
var x3ln2_hi = float64(0.6931471803691238)

// linking log1pf.o

// Xlog1pf is defined at log1pf.c:24:7
func Xlog1pf(tls TLS, _x float32) (r float32) {
	esc := MustMalloc(4)
	var (
		_u    = esc // *struct{Ff [0]float32;Fi [0]uint32;F int32}
		_hfsq float32
		_f    float32
		_c    float32
		_s    float32
		_z    float32
		_R    float32
		_w    float32
		_t1   float32
		_t2   float32
		_dk   float32
		_ix   uint32
		_iu   uint32
		_k    int32
		___x  float32
		_     = ___x
		_1__x float64
		_     = _1__x
		_2__x float64
		_     = _2__x
	)
	defer Free(esc)
	*(*struct {
		Ff [0]float32
		Fi [0]uint32
		F  int32
	})(unsafe.Pointer(_u)) = *(*struct {
		Ff [0]float32
		Fi [0]uint32
		F  int32
	})(unsafe.Pointer(&struct{ f float32 }{_x}))
	_ix = *(*uint32)(unsafe.Pointer(_u))
	_k = int32(1)
	if _ix >= uint32(0x3ed413d0) && (_ix>>(uint(31)%32)) == 0 {
		goto _1
	}

	if _ix < uint32(0xbf800000) {
		goto _3
	}

	if _x != float32(-1) {
		goto _4
	}

	return _x / float32(0)

_4:
	return float32(_x-_x) / float32(0)

_3:
	if _ix<<(uint(1)%32) >= uint32(1728053248) {
		goto _5
	}

	if _ix&uint32(0x7f800000) != uint32(0) {
		goto _6
	}

	___x = _x * _x
	goto _8

	goto _9

	_1__x = float64(_x * _x)
	goto _10

_9:
	_2__x = float64(_x * _x)
_10:
_8:
_6:
	return _x

_5:
	if _ix > uint32(0xbe95f619) {
		goto _11
	}

	_k = int32(0)
	_c = float32(0)
	_f = _x
_11:
	goto _2

_1:
	if _ix < uint32(0x7f800000) {
		goto _12
	}

	return _x

_12:
_2:
	if _k == 0 {
		goto _13
	}

	*(*float32)(unsafe.Pointer(_u)) = float32(1) + _x
	_iu = *(*uint32)(unsafe.Pointer(_u))
	_iu = _iu + uint32(4913933)
	_k = int32(_iu>>(uint(23)%32)) - int32(0x7f)
	if _k >= int32(25) {
		goto _14
	}

	_c = func() float32 {
		if _k >= int32(2) {
			return float32(1) - float32(*(*float32)(unsafe.Pointer(_u))-_x)
		}
		return _x - float32(*(*float32)(unsafe.Pointer(_u))-float32(1))
	}()
	_c = _c / *(*float32)(unsafe.Pointer(_u))
	goto _15

_14:
	_c = float32(0)
_15:
	_iu = _iu&uint32(0x7fffff) + uint32(0x3f3504f3)
	*(*uint32)(unsafe.Pointer(_u)) = _iu
	_f = *(*float32)(unsafe.Pointer(_u)) - float32(1)
_13:
	_s = _f / float32(float32(2)+_f)
	_z = _s * _s
	_w = _z * _z
	_t1 = _w * float32(x4Lg2+float32(_w*x4Lg4))
	_t2 = _z * float32(x4Lg1+float32(_w*x4Lg3))
	_R = _t2 + _t1
	_hfsq = float32(float32(0.5)*_f) * _f
	_dk = float32(_k)
	return float32(float32(float32(float32(_s*float32(_hfsq+_R))+float32(float32(_dk*x4ln2_lo)+_c))-_hfsq)+_f) + float32(_dk*x4ln2_hi)
}

type t432__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t432__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t77uint32_t = uint32

type t11float_t = float32

// xLg2 float32, escapes: false, log1pf.c:20:1
var x4Lg2 = float32(0.40000972)

// xLg4 float32, escapes: false, log1pf.c:22:1
var x4Lg4 = float32(0.24279079)

// xLg1 float32, escapes: false, log1pf.c:19:1
var x4Lg1 = float32(0.6666666)

// xLg3 float32, escapes: false, log1pf.c:21:1
var x4Lg3 = float32(0.28498787)

// xln2_lo float32, escapes: false, log1pf.c:17:1
var x4ln2_lo = float32(9.058001e-06)

// xln2_hi float32, escapes: false, log1pf.c:16:1
var x4ln2_hi = float32(0.6931381)

// linking log1pl.o

// Xlog1pl is defined at log1pl.c:54:13
func Xlog1pl(tls TLS, _x float64) (r float64) {
	return Xlog1p(tls, _x)
}

type t433__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t433__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// linking log2.o

// Xlog2 is defined at log2.c:34:8
func Xlog2(tls TLS, _x float64) (r float64) {
	esc := MustMalloc(8)
	var (
		_u      = esc // *struct{Ff [0]float64;Fi [0]uint64;F int64}
		_hfsq   float64
		_f      float64
		_s      float64
		_z      float64
		_R      float64
		_w      float64
		_t1     float64
		_t2     float64
		_y      float64
		_hi     float64
		_lo     float64
		_val_hi float64
		_val_lo float64
		_hx     uint32
		_k      int32
	)
	defer Free(esc)
	*(*struct {
		Ff [0]float64
		Fi [0]uint64
		F  int64
	})(unsafe.Pointer(_u)) = *(*struct {
		Ff [0]float64
		Fi [0]uint64
		F  int64
	})(unsafe.Pointer(&struct{ f float64 }{_x}))
	_hx = uint32(*(*uint64)(unsafe.Pointer(_u)) >> (uint(32) % 64))
	_k = int32(0)
	if _hx >= uint32(0x100000) && (_hx>>(uint(31)%32)) == 0 {
		goto _1
	}

	if *(*uint64)(unsafe.Pointer(_u))<<(uint(1)%64) != uint64(0) {
		goto _3
	}

	return float64(-1) / float64(_x*_x)

_3:
	if (_hx >> (uint(31) % 32)) == 0 {
		goto _4
	}

	return float64(_x-_x) / float64(0)

_4:
	_k = _k - int32(54)
	_x = _x * float64(1.8014398509481984e+16)
	*(*float64)(unsafe.Pointer(_u)) = _x
	_hx = uint32(*(*uint64)(unsafe.Pointer(_u)) >> (uint(32) % 64))
	goto _2

_1:
	if _hx < uint32(0x7ff00000) {
		goto _5
	}

	return _x

	goto _6

_5:
	if _hx != uint32(0x3ff00000) || *(*uint64)(unsafe.Pointer(_u))<<(uint(32)%64) != uint64(0) {
		goto _7
	}

	return float64(0)

_7:
_6:
_2:
	_hx = _hx + uint32(614242)
	_k = _k + (int32(_hx>>(uint(20)%32)) - int32(0x3ff))
	_hx = _hx&uint32(0xfffff) + uint32(0x3fe6a09e)
	*(*uint64)(unsafe.Pointer(_u)) = uint64(_hx)<<(uint(32)%64) | *(*uint64)(unsafe.Pointer(_u))&uint64(0xffffffff)
	_x = *(*float64)(unsafe.Pointer(_u))
	_f = _x - float64(1)
	_hfsq = float64(float64(0.5)*_f) * _f
	_s = _f / float64(float64(2)+_f)
	_z = _s * _s
	_w = _z * _z
	_t1 = _w * float64(x5Lg2+float64(_w*float64(x5Lg4+float64(_w*x3Lg6))))
	_t2 = _z * float64(x5Lg1+float64(_w*float64(x5Lg3+float64(_w*float64(x3Lg5+float64(_w*x3Lg7))))))
	_R = _t2 + _t1
	_hi = _f - _hfsq
	*(*float64)(unsafe.Pointer(_u)) = _hi
	{
		p := (*uint64)(unsafe.Pointer(_u))
		*p = *p & uint64(18446744069414584320)
	}
	_hi = *(*float64)(unsafe.Pointer(_u))
	_lo = float64(float64(_f-_hi)-_hfsq) + float64(_s*float64(_hfsq+_R))
	_val_hi = _hi * xivln2hi
	_val_lo = float64(float64(_lo+_hi)*xivln2lo) + float64(_lo*xivln2hi)
	_y = float64(_k)
	_w = _y + _val_hi
	_val_lo = _val_lo + float64(float64(_y-_w)+_val_hi)
	_val_hi = _w
	return _val_lo + _val_hi
}

type t434__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t434__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t53uint64_t = uint64

type t30double_t = float64

type t78uint32_t = uint32

// xLg2 float64, escapes: false, log2.c:27:1
var x5Lg2 = float64(0.3999999999940942)

// xLg4 float64, escapes: false, log2.c:29:1
var x5Lg4 = float64(0.22222198432149784)

// xLg6 float64, escapes: false, log2.c:31:1
var x3Lg6 = float64(0.15313837699209373)

// xLg1 float64, escapes: false, log2.c:26:1
var x5Lg1 = float64(0.6666666666666735)

// xLg3 float64, escapes: false, log2.c:28:1
var x5Lg3 = float64(0.2857142874366239)

// xLg5 float64, escapes: false, log2.c:30:1
var x3Lg5 = float64(0.1818357216161805)

// xLg7 float64, escapes: false, log2.c:32:1
var x3Lg7 = float64(0.14798198605116586)

// xivln2hi float64, escapes: false, log2.c:24:1
var xivln2hi = float64(1.4426950407214463)

// xivln2lo float64, escapes: false, log2.c:25:1
var xivln2lo = float64(1.6751713164886512e-10)

// linking log2f.o

// Xlog2f is defined at log2f.c:28:7
func Xlog2f(tls TLS, _x float32) (r float32) {
	esc := MustMalloc(4)
	var (
		_u    = esc // *struct{Ff [0]float32;Fi [0]uint32;F int32}
		_hfsq float32
		_f    float32
		_s    float32
		_z    float32
		_R    float32
		_w    float32
		_t1   float32
		_t2   float32
		_hi   float32
		_lo   float32
		_ix   uint32
		_k    int32
	)
	defer Free(esc)
	*(*struct {
		Ff [0]float32
		Fi [0]uint32
		F  int32
	})(unsafe.Pointer(_u)) = *(*struct {
		Ff [0]float32
		Fi [0]uint32
		F  int32
	})(unsafe.Pointer(&struct{ f float32 }{_x}))
	_ix = *(*uint32)(unsafe.Pointer(_u))
	_k = int32(0)
	if _ix >= uint32(0x800000) && (_ix>>(uint(31)%32)) == 0 {
		goto _1
	}

	if _ix<<(uint(1)%32) != uint32(0) {
		goto _3
	}

	return float32(-1) / float32(_x*_x)

_3:
	if (_ix >> (uint(31) % 32)) == 0 {
		goto _4
	}

	return float32(_x-_x) / float32(0)

_4:
	_k = _k - int32(25)
	_x = _x * float32(3.3554432e+07)
	*(*float32)(unsafe.Pointer(_u)) = _x
	_ix = *(*uint32)(unsafe.Pointer(_u))
	goto _2

_1:
	if _ix < uint32(0x7f800000) {
		goto _5
	}

	return _x

	goto _6

_5:
	if _ix != uint32(0x3f800000) {
		goto _7
	}

	return float32(0)

_7:
_6:
_2:
	_ix = _ix + uint32(4913933)
	_k = _k + (int32(_ix>>(uint(23)%32)) - int32(0x7f))
	_ix = _ix&uint32(0x7fffff) + uint32(0x3f3504f3)
	*(*uint32)(unsafe.Pointer(_u)) = _ix
	_x = *(*float32)(unsafe.Pointer(_u))
	_f = _x - float32(1)
	_s = _f / float32(float32(2)+_f)
	_z = _s * _s
	_w = _z * _z
	_t1 = _w * float32(x6Lg2+float32(_w*x6Lg4))
	_t2 = _z * float32(x6Lg1+float32(_w*x6Lg3))
	_R = _t2 + _t1
	_hfsq = float32(float32(0.5)*_f) * _f
	_hi = _f - _hfsq
	*(*float32)(unsafe.Pointer(_u)) = _hi
	{
		p := (*uint32)(unsafe.Pointer(_u))
		*p = *p & uint32(0xfffff000)
	}
	_hi = *(*float32)(unsafe.Pointer(_u))
	_lo = float32(float32(_f-_hi)-_hfsq) + float32(_s*float32(_hfsq+_R))
	return float32(float32(float32(float32(_lo+_hi)*x1ivln2lo)+float32(_lo*x1ivln2hi))+float32(_hi*x1ivln2hi)) + float32(_k)
}

type t435__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t435__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t79uint32_t = uint32

type t12float_t = float32

// xLg2 float32, escapes: false, log2f.c:24:1
var x6Lg2 = float32(0.40000972)

// xLg4 float32, escapes: false, log2f.c:26:1
var x6Lg4 = float32(0.24279079)

// xLg1 float32, escapes: false, log2f.c:23:1
var x6Lg1 = float32(0.6666666)

// xLg3 float32, escapes: false, log2f.c:25:1
var x6Lg3 = float32(0.28498787)

// xivln2lo float32, escapes: false, log2f.c:21:1
var x1ivln2lo = float32(-0.00017605285)

// xivln2hi float32, escapes: false, log2f.c:20:1
var x1ivln2hi = float32(1.4428711)

// linking log2l.o

// Xlog2l is defined at log2l.c:58:13
func Xlog2l(tls TLS, _x float64) (r float64) {
	return Xlog2(tls, _x)
}

type t436__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t436__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// linking logb.o

// Xlogb is defined at logb.c:10:8
func Xlogb(tls TLS, _x float64) (r float64) {
	if x12__DOUBLE_BITS(tls, _x)&uint64(9223372036854775807) < uint64(9218868437227405312) {
		goto _1
	}

	return _x * _x

_1:
	if _x != float64(0) {
		goto _2
	}

	return float64(-1) / float64(_x*_x)

_2:
	return float64(Xilogb(tls, _x))
}

type t437__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t437__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// x__DOUBLE_BITS is defined at math.h:49:36
func x12__DOUBLE_BITS(tls TLS, ___f float64) (r uint64) {
	esc := MustMalloc(8)
	var ___u = esc // *struct{F__f [0]float64;F__i [0]uint64;F int64}
	defer Free(esc)
	*(*float64)(unsafe.Pointer(___u)) = ___f
	return *(*uint64)(unsafe.Pointer(___u))
}

// linking logbf.o

// Xlogbf is defined at logbf.c:3:7
func Xlogbf(tls TLS, _x float32) (r float32) {
	if x10__FLOAT_BITS(tls, _x)&uint32(0x7fffffff) < uint32(0x7f800000) {
		goto _1
	}

	return _x * _x

_1:
	if _x != float32(0) {
		goto _2
	}

	return float32(-1) / float32(_x*_x)

_2:
	return float32(Xilogbf(tls, _x))
}

type t438__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t438__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// x__FLOAT_BITS is defined at math.h:43:26
func x10__FLOAT_BITS(tls TLS, ___f float32) (r uint32) {
	esc := MustMalloc(4)
	var ___u = esc // *struct{F__f [0]float32;F__i [0]uint32;F int32}
	defer Free(esc)
	*(*float32)(unsafe.Pointer(___u)) = ___f
	return *(*uint32)(unsafe.Pointer(___u))
}

// linking logbl.o

// Xlogbl is defined at logbl.c:8:13
func Xlogbl(tls TLS, _x float64) (r float64) {
	if x13__DOUBLE_BITS(tls, _x)&uint64(9223372036854775807) < uint64(9218868437227405312) {
		goto _1
	}

	return _x * _x

_1:
	if _x != float64(0) {
		goto _2
	}

	return float64(-1) / float64(_x*_x)

_2:
	return float64(Xilogbl(tls, _x))
}

type t439__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t439__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// x__DOUBLE_BITS is defined at math.h:49:36
func x13__DOUBLE_BITS(tls TLS, ___f float64) (r uint64) {
	esc := MustMalloc(8)
	var ___u = esc // *struct{F__f [0]float64;F__i [0]uint64;F int64}
	defer Free(esc)
	*(*float64)(unsafe.Pointer(___u)) = ___f
	return *(*uint64)(unsafe.Pointer(___u))
}

// linking logf.o

// Xlogf is defined at logf.c:28:7
func Xlogf(tls TLS, _x float32) (r float32) {
	esc := MustMalloc(4)
	var (
		_u    = esc // *struct{Ff [0]float32;Fi [0]uint32;F int32}
		_hfsq float32
		_f    float32
		_s    float32
		_z    float32
		_R    float32
		_w    float32
		_t1   float32
		_t2   float32
		_dk   float32
		_ix   uint32
		_k    int32
	)
	defer Free(esc)
	*(*struct {
		Ff [0]float32
		Fi [0]uint32
		F  int32
	})(unsafe.Pointer(_u)) = *(*struct {
		Ff [0]float32
		Fi [0]uint32
		F  int32
	})(unsafe.Pointer(&struct{ f float32 }{_x}))
	_ix = *(*uint32)(unsafe.Pointer(_u))
	_k = int32(0)
	if _ix >= uint32(0x800000) && (_ix>>(uint(31)%32)) == 0 {
		goto _1
	}

	if _ix<<(uint(1)%32) != uint32(0) {
		goto _3
	}

	return float32(-1) / float32(_x*_x)

_3:
	if (_ix >> (uint(31) % 32)) == 0 {
		goto _4
	}

	return float32(_x-_x) / float32(0)

_4:
	_k = _k - int32(25)
	_x = _x * float32(3.3554432e+07)
	*(*float32)(unsafe.Pointer(_u)) = _x
	_ix = *(*uint32)(unsafe.Pointer(_u))
	goto _2

_1:
	if _ix < uint32(0x7f800000) {
		goto _5
	}

	return _x

	goto _6

_5:
	if _ix != uint32(0x3f800000) {
		goto _7
	}

	return float32(0)

_7:
_6:
_2:
	_ix = _ix + uint32(4913933)
	_k = _k + (int32(_ix>>(uint(23)%32)) - int32(0x7f))
	_ix = _ix&uint32(0x7fffff) + uint32(0x3f3504f3)
	*(*uint32)(unsafe.Pointer(_u)) = _ix
	_x = *(*float32)(unsafe.Pointer(_u))
	_f = _x - float32(1)
	_s = _f / float32(float32(2)+_f)
	_z = _s * _s
	_w = _z * _z
	_t1 = _w * float32(x7Lg2+float32(_w*x7Lg4))
	_t2 = _z * float32(x7Lg1+float32(_w*x7Lg3))
	_R = _t2 + _t1
	_hfsq = float32(float32(0.5)*_f) * _f
	_dk = float32(_k)
	return float32(float32(float32(float32(_s*float32(_hfsq+_R))+float32(_dk*x5ln2_lo))-_hfsq)+_f) + float32(_dk*x5ln2_hi)
}

type t440__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t440__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t80uint32_t = uint32

type t13float_t = float32

// xLg2 float32, escapes: false, logf.c:24:1
var x7Lg2 = float32(0.40000972)

// xLg4 float32, escapes: false, logf.c:26:1
var x7Lg4 = float32(0.24279079)

// xLg1 float32, escapes: false, logf.c:23:1
var x7Lg1 = float32(0.6666666)

// xLg3 float32, escapes: false, logf.c:25:1
var x7Lg3 = float32(0.28498787)

// xln2_lo float32, escapes: false, logf.c:21:1
var x5ln2_lo = float32(9.058001e-06)

// xln2_hi float32, escapes: false, logf.c:20:1
var x5ln2_hi = float32(0.6931381)

// linking logl.o

// Xlogl is defined at logl.c:58:13
func Xlogl(tls TLS, _x float64) (r float64) {
	return Xlog(tls, _x)
}

type t441__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t441__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// linking lrint.o

// Xlrint is defined at lrint.c:42:6
func Xlrint(tls TLS, _x float64) (r int64) {
	return int64(Xrint(tls, _x))
}

type t442__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t442__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// linking lrintf.o

// Xlrintf is defined at lrintf.c:5:6
func Xlrintf(tls TLS, _x float32) (r int64) {
	return int64(Xrintf(tls, _x))
}

type t443__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t443__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// linking lrintl.o

// Xlrintl is defined at lrintl.c:7:6
func Xlrintl(tls TLS, _x float64) (r int64) {
	return Xlrint(tls, _x)
}

type t444__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t444__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// linking lround.o

// Xlround is defined at lround.c:3:6
func Xlround(tls TLS, _x float64) (r int64) {
	return int64(Xround(tls, _x))
}

type t445__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t445__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// linking lroundf.o

// Xlroundf is defined at lroundf.c:3:6
func Xlroundf(tls TLS, _x float32) (r int64) {
	return int64(Xroundf(tls, _x))
}

type t446__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t446__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// linking lroundl.o

// Xlroundl is defined at lroundl.c:3:6
func Xlroundl(tls TLS, _x float64) (r int64) {
	return int64(Xroundl(tls, _x))
}

type t447__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t447__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// linking modf.o

// Xmodf is defined at modf.c:3:8
func Xmodf(tls TLS, _x float64, _iptr uintptr /* *float64 */) (r float64) {
	esc := MustMalloc(8)
	var (
		_u    = esc // *struct{Ff [0]float64;Fi [0]uint64;F int64}
		_mask uint64
		_e    int32
	)
	defer Free(esc)
	*(*struct {
		Ff [0]float64
		Fi [0]uint64
		F  int64
	})(unsafe.Pointer(_u)) = *(*struct {
		Ff [0]float64
		Fi [0]uint64
		F  int64
	})(unsafe.Pointer(&struct{ f float64 }{_x}))
	_e = int32(*(*uint64)(unsafe.Pointer(_u))>>(uint(52)%64)&uint64(0x7ff)) - int32(0x3ff)
	if _e < int32(52) {
		goto _1
	}

	*(*float64)(unsafe.Pointer(_iptr)) = _x
	if _e != int32(0x400) || *(*uint64)(unsafe.Pointer(_u))<<(uint(12)%64) == uint64(0) {
		goto _2
	}

	return _x

_2:
	{
		p := (*uint64)(unsafe.Pointer(_u))
		*p = *p & uint64(9223372036854775808)
	}
	return *(*float64)(unsafe.Pointer(_u))

_1:
	if _e >= int32(0) {
		goto _3
	}

	{
		p := (*uint64)(unsafe.Pointer(_u))
		*p = *p & uint64(9223372036854775808)
	}
	*(*float64)(unsafe.Pointer(_iptr)) = *(*float64)(unsafe.Pointer(_u))
	return _x

_3:
	_mask = uint64(4503599627370495) >> (uint(_e) % 64)
	if *(*uint64)(unsafe.Pointer(_u))&_mask != uint64(0) {
		goto _4
	}

	*(*float64)(unsafe.Pointer(_iptr)) = _x
	{
		p := (*uint64)(unsafe.Pointer(_u))
		*p = *p & uint64(9223372036854775808)
	}
	return *(*float64)(unsafe.Pointer(_u))

_4:
	{
		p := (*uint64)(unsafe.Pointer(_u))
		*p = *p & ^_mask
	}
	*(*float64)(unsafe.Pointer(_iptr)) = *(*float64)(unsafe.Pointer(_u))
	return _x - *(*float64)(unsafe.Pointer(_u))
}

type t448__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t448__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t54uint64_t = uint64

// linking modff.o

// Xmodff is defined at modff.c:3:7
func Xmodff(tls TLS, _x float32, _iptr uintptr /* *float32 */) (r float32) {
	esc := MustMalloc(4)
	var (
		_u    = esc // *struct{Ff [0]float32;Fi [0]uint32;F int32}
		_mask uint32
		_e    int32
	)
	defer Free(esc)
	*(*struct {
		Ff [0]float32
		Fi [0]uint32
		F  int32
	})(unsafe.Pointer(_u)) = *(*struct {
		Ff [0]float32
		Fi [0]uint32
		F  int32
	})(unsafe.Pointer(&struct{ f float32 }{_x}))
	_e = int32(*(*uint32)(unsafe.Pointer(_u))>>(uint(23)%32)&uint32(0xff)) - int32(0x7f)
	if _e < int32(23) {
		goto _1
	}

	*(*float32)(unsafe.Pointer(_iptr)) = _x
	if _e != int32(0x80) || *(*uint32)(unsafe.Pointer(_u))<<(uint(9)%32) == uint32(0) {
		goto _2
	}

	return _x

_2:
	{
		p := (*uint32)(unsafe.Pointer(_u))
		*p = *p & uint32(0x80000000)
	}
	return *(*float32)(unsafe.Pointer(_u))

_1:
	if _e >= int32(0) {
		goto _3
	}

	{
		p := (*uint32)(unsafe.Pointer(_u))
		*p = *p & uint32(0x80000000)
	}
	*(*float32)(unsafe.Pointer(_iptr)) = *(*float32)(unsafe.Pointer(_u))
	return _x

_3:
	_mask = uint32(int32(0x7fffff) >> (uint(_e) % 32))
	if *(*uint32)(unsafe.Pointer(_u))&_mask != uint32(0) {
		goto _4
	}

	*(*float32)(unsafe.Pointer(_iptr)) = _x
	{
		p := (*uint32)(unsafe.Pointer(_u))
		*p = *p & uint32(0x80000000)
	}
	return *(*float32)(unsafe.Pointer(_u))

_4:
	{
		p := (*uint32)(unsafe.Pointer(_u))
		*p = *p & ^_mask
	}
	*(*float32)(unsafe.Pointer(_iptr)) = *(*float32)(unsafe.Pointer(_u))
	return _x - *(*float32)(unsafe.Pointer(_u))
}

type t449__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t449__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t81uint32_t = uint32

// linking modfl.o

// Xmodfl is defined at modfl.c:4:13
func Xmodfl(tls TLS, _x float64, _iptr uintptr /* *float64 */) (r float64) {
	esc := MustMalloc(8)
	var (
		_d = esc // *float64
		_r float64
	)
	defer Free(esc)
	_r = Xmodf(tls, _x, _d)
	*(*float64)(unsafe.Pointer(_iptr)) = *(*float64)(unsafe.Pointer(_d))
	return _r
}

type t450__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t450__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// linking nan.o

// Xnan is defined at nan.c:3:8
func Xnan(tls TLS, _s uintptr /* *int8 */) (r float64) {
	return math.NaN()
}

type t451__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t451__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// linking nanf.o

// Xnanf is defined at nanf.c:3:7
func Xnanf(tls TLS, _s uintptr /* *int8 */) (r float32) {
	return float32(math.NaN())
}

type t452__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t452__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// linking nanl.o

// Xnanl is defined at nanl.c:3:13
func Xnanl(tls TLS, _s uintptr /* *int8 */) (r float64) {
	return math.NaN()
}

type t453__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t453__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// linking nearbyint.o

// Xnearbyint is defined at nearbyint.c:6:8
func Xnearbyint(tls TLS, _x float64) (r float64) {
	var _e int32

	_e = Xfetestexcept(tls, int32(32))
	_x = Xrint(tls, _x)
	if _e != 0 {
		goto _1
	}

	Xfeclearexcept(tls, int32(32))
_1:
	return _x
}

type t454__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t454__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// linking nearbyintf.o

// Xnearbyintf is defined at nearbyintf.c:4:7
func Xnearbyintf(tls TLS, _x float32) (r float32) {
	var _e int32

	_e = Xfetestexcept(tls, int32(32))
	_x = Xrintf(tls, _x)
	if _e != 0 {
		goto _1
	}

	Xfeclearexcept(tls, int32(32))
_1:
	return _x
}

type t455__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t455__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// linking nearbyintl.o

// Xnearbyintl is defined at nearbyintl.c:5:13
func Xnearbyintl(tls TLS, _x float64) (r float64) {
	return Xnearbyint(tls, _x)
}

type t456__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t456__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// linking nextafter.o

// Xnextafter is defined at nextafter.c:3:8
func Xnextafter(tls TLS, _x float64, _y float64) (r float64) {
	esc := MustMalloc(24)
	var (
		_ux   = esc      // *struct{Ff [0]float64;Fi [0]uint64;F int64}
		_uy   = esc + 16 // *struct{Ff [0]float64;Fi [0]uint64;F int64}
		_ax   uint64
		_ay   uint64
		_e    int32
		___x  float32
		_     = ___x
		_1__x float64
		_     = _1__x
		_2__x float64
		_     = _2__x
		_3__x float32
		_     = _3__x
		_4__x float64
		_     = _4__x
		_5__x float64
		_     = _5__x
	)
	defer Free(esc)
	*(*struct {
		Ff [0]float64
		Fi [0]uint64
		F  int64
	})(unsafe.Pointer(_ux)) = *(*struct {
		Ff [0]float64
		Fi [0]uint64
		F  int64
	})(unsafe.Pointer(&struct{ f float64 }{_x}))
	*(*struct {
		Ff [0]float64
		Fi [0]uint64
		F  int64
	})(unsafe.Pointer(_uy)) = *(*struct {
		Ff [0]float64
		Fi [0]uint64
		F  int64
	})(unsafe.Pointer(&struct{ f float64 }{_y}))
	if x14__DOUBLE_BITS(tls, _x)&uint64(9223372036854775807) <= uint64(9218868437227405312) && x14__DOUBLE_BITS(tls, _y)&uint64(9223372036854775807) <= uint64(9218868437227405312) {
		goto _1
	}

	return _x + _y

_1:
	if *(*uint64)(unsafe.Pointer(_ux)) != *(*uint64)(unsafe.Pointer(_uy)) {
		goto _2
	}

	return _y

_2:
	_ax = *(*uint64)(unsafe.Pointer(_ux)) & uint64(9223372036854775807)
	_ay = *(*uint64)(unsafe.Pointer(_uy)) & uint64(9223372036854775807)
	if _ax != uint64(0) {
		goto _3
	}

	if _ay != uint64(0) {
		goto _5
	}

	return _y

_5:
	*(*uint64)(unsafe.Pointer(_ux)) = *(*uint64)(unsafe.Pointer(_uy))&uint64(9223372036854775808) | uint64(1)
	goto _4

_3:
	if _ax <= _ay && (*(*uint64)(unsafe.Pointer(_ux))^*(*uint64)(unsafe.Pointer(_uy)))&uint64(9223372036854775808) == 0 {
		goto _6
	}

	*(*uint64)(unsafe.Pointer(_ux))--
	goto _7

_6:
	*(*uint64)(unsafe.Pointer(_ux))++
_7:
_4:
	_e = int32(*(*uint64)(unsafe.Pointer(_ux)) >> (uint(52) % 64) & uint64(0x7ff))
	if _e != int32(0x7ff) {
		goto _8
	}

	goto _10

	___x = float32(_x + _x)
	goto _11

_10:
	_1__x = _x + _x
	goto _12

	_2__x = _x + _x
_12:
_11:
_8:
	if _e != int32(0) {
		goto _13
	}

	goto _15

	_3__x = float32(float64(_x*_x) + float64(*(*float64)(unsafe.Pointer(_ux))**(*float64)(unsafe.Pointer(_ux))))
	goto _16

_15:
	_4__x = float64(_x*_x) + float64(*(*float64)(unsafe.Pointer(_ux))**(*float64)(unsafe.Pointer(_ux)))
	goto _17

	_5__x = float64(_x*_x) + float64(*(*float64)(unsafe.Pointer(_ux))**(*float64)(unsafe.Pointer(_ux)))
_17:
_16:
_13:
	return *(*float64)(unsafe.Pointer(_ux))
}

type t457__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t457__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t55uint64_t = uint64

// x__DOUBLE_BITS is defined at math.h:49:36
func x14__DOUBLE_BITS(tls TLS, ___f float64) (r uint64) {
	esc := MustMalloc(8)
	var ___u = esc // *struct{F__f [0]float64;F__i [0]uint64;F int64}
	defer Free(esc)
	*(*float64)(unsafe.Pointer(___u)) = ___f
	return *(*uint64)(unsafe.Pointer(___u))
}

// linking nextafterf.o

// Xnextafterf is defined at nextafterf.c:3:7
func Xnextafterf(tls TLS, _x float32, _y float32) (r float32) {
	esc := MustMalloc(20)
	var (
		_ux   = esc      // *struct{Ff [0]float32;Fi [0]uint32;F int32}
		_uy   = esc + 16 // *struct{Ff [0]float32;Fi [0]uint32;F int32}
		_ax   uint32
		_ay   uint32
		_e    uint32
		___x  float32
		_     = ___x
		_1__x float64
		_     = _1__x
		_2__x float64
		_     = _2__x
		_3__x float32
		_     = _3__x
		_4__x float64
		_     = _4__x
		_5__x float64
		_     = _5__x
	)
	defer Free(esc)
	*(*struct {
		Ff [0]float32
		Fi [0]uint32
		F  int32
	})(unsafe.Pointer(_ux)) = *(*struct {
		Ff [0]float32
		Fi [0]uint32
		F  int32
	})(unsafe.Pointer(&struct{ f float32 }{_x}))
	*(*struct {
		Ff [0]float32
		Fi [0]uint32
		F  int32
	})(unsafe.Pointer(_uy)) = *(*struct {
		Ff [0]float32
		Fi [0]uint32
		F  int32
	})(unsafe.Pointer(&struct{ f float32 }{_y}))
	if x11__FLOAT_BITS(tls, _x)&uint32(0x7fffffff) <= uint32(0x7f800000) && x11__FLOAT_BITS(tls, _y)&uint32(0x7fffffff) <= uint32(0x7f800000) {
		goto _1
	}

	return _x + _y

_1:
	if *(*uint32)(unsafe.Pointer(_ux)) != *(*uint32)(unsafe.Pointer(_uy)) {
		goto _2
	}

	return _y

_2:
	_ax = *(*uint32)(unsafe.Pointer(_ux)) & uint32(0x7fffffff)
	_ay = *(*uint32)(unsafe.Pointer(_uy)) & uint32(0x7fffffff)
	if _ax != uint32(0) {
		goto _3
	}

	if _ay != uint32(0) {
		goto _5
	}

	return _y

_5:
	*(*uint32)(unsafe.Pointer(_ux)) = *(*uint32)(unsafe.Pointer(_uy))&uint32(0x80000000) | uint32(1)
	goto _4

_3:
	if _ax <= _ay && (*(*uint32)(unsafe.Pointer(_ux))^*(*uint32)(unsafe.Pointer(_uy)))&uint32(0x80000000) == 0 {
		goto _6
	}

	*(*uint32)(unsafe.Pointer(_ux))--
	goto _7

_6:
	*(*uint32)(unsafe.Pointer(_ux))++
_7:
_4:
	_e = *(*uint32)(unsafe.Pointer(_ux)) & uint32(0x7f800000)
	if _e != uint32(0x7f800000) {
		goto _8
	}

	___x = _x + _x
	goto _10

	goto _11

	_1__x = float64(_x + _x)
	goto _12

_11:
	_2__x = float64(_x + _x)
_12:
_10:
_8:
	if _e != uint32(0) {
		goto _13
	}

	_3__x = float32(_x*_x) + float32(*(*float32)(unsafe.Pointer(_ux))**(*float32)(unsafe.Pointer(_ux)))
	goto _15

	goto _16

	_4__x = float64(float32(_x*_x) + float32(*(*float32)(unsafe.Pointer(_ux))**(*float32)(unsafe.Pointer(_ux))))
	goto _17

_16:
	_5__x = float64(float32(_x*_x) + float32(*(*float32)(unsafe.Pointer(_ux))**(*float32)(unsafe.Pointer(_ux))))
_17:
_15:
_13:
	return *(*float32)(unsafe.Pointer(_ux))
}

type t458__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t458__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t82uint32_t = uint32

// x__FLOAT_BITS is defined at math.h:43:26
func x11__FLOAT_BITS(tls TLS, ___f float32) (r uint32) {
	esc := MustMalloc(4)
	var ___u = esc // *struct{F__f [0]float32;F__i [0]uint32;F int32}
	defer Free(esc)
	*(*float32)(unsafe.Pointer(___u)) = ___f
	return *(*uint32)(unsafe.Pointer(___u))
}

// linking nextafterl.o

// Xnextafterl is defined at nextafterl.c:4:13
func Xnextafterl(tls TLS, _x float64, _y float64) (r float64) {
	return Xnextafter(tls, _x, _y)
}

type t459__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t459__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// linking nexttoward.o

// Xnexttoward is defined at nexttoward.c:4:8
func Xnexttoward(tls TLS, _x float64, _y float64) (r float64) {
	return Xnextafter(tls, _x, _y)
}

type t460__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t460__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// linking nexttowardf.o

// Xnexttowardf is defined at nexttowardf.c:3:7
func Xnexttowardf(tls TLS, _x float32, _y float64) (r float32) {
	esc := MustMalloc(4)
	var (
		_ux   = esc // *struct{Ff [0]float32;Fi [0]uint32;F int32}
		_e    uint32
		___x  float32
		_     = ___x
		_1__x float64
		_     = _1__x
		_2__x float64
		_     = _2__x
		_3__x float32
		_     = _3__x
		_4__x float64
		_     = _4__x
		_5__x float64
		_     = _5__x
	)
	defer Free(esc)
	*(*struct {
		Ff [0]float32
		Fi [0]uint32
		F  int32
	})(unsafe.Pointer(_ux)) = *(*struct {
		Ff [0]float32
		Fi [0]uint32
		F  int32
	})(unsafe.Pointer(&struct{ f float32 }{_x}))
	if x12__FLOAT_BITS(tls, _x)&uint32(0x7fffffff) <= uint32(0x7f800000) && x15__DOUBLE_BITS(tls, _y)&uint64(9223372036854775807) <= uint64(9218868437227405312) {
		goto _1
	}

	return float32(float64(_x) + _y)

_1:
	if float64(_x) != _y {
		goto _2
	}

	return float32(_y)

_2:
	if _x != float32(0) {
		goto _3
	}

	*(*uint32)(unsafe.Pointer(_ux)) = uint32(1)
	if int32(x15__DOUBLE_BITS(tls, _y)>>(uint(63)%64)) == 0 {
		goto _5
	}

	{
		p := (*uint32)(unsafe.Pointer(_ux))
		*p = *p | uint32(0x80000000)
	}
_5:
	goto _4

_3:
	if float64(_x) >= _y {
		goto _6
	}

	if int32(x12__FLOAT_BITS(tls, _x)>>(uint(31)%32)) == 0 {
		goto _8
	}

	*(*uint32)(unsafe.Pointer(_ux))--
	goto _9

_8:
	*(*uint32)(unsafe.Pointer(_ux))++
_9:
	goto _7

_6:
	if int32(x12__FLOAT_BITS(tls, _x)>>(uint(31)%32)) == 0 {
		goto _10
	}

	*(*uint32)(unsafe.Pointer(_ux))++
	goto _11

_10:
	*(*uint32)(unsafe.Pointer(_ux))--
_11:
_7:
_4:
	_e = *(*uint32)(unsafe.Pointer(_ux)) & uint32(0x7f800000)
	if _e != uint32(0x7f800000) {
		goto _12
	}

	___x = _x + _x
	goto _14

	goto _15

	_1__x = float64(_x + _x)
	goto _16

_15:
	_2__x = float64(_x + _x)
_16:
_14:
_12:
	if _e != uint32(0) {
		goto _17
	}

	_3__x = float32(_x*_x) + float32(*(*float32)(unsafe.Pointer(_ux))**(*float32)(unsafe.Pointer(_ux)))
	goto _19

	goto _20

	_4__x = float64(float32(_x*_x) + float32(*(*float32)(unsafe.Pointer(_ux))**(*float32)(unsafe.Pointer(_ux))))
	goto _21

_20:
	_5__x = float64(float32(_x*_x) + float32(*(*float32)(unsafe.Pointer(_ux))**(*float32)(unsafe.Pointer(_ux))))
_21:
_19:
_17:
	return *(*float32)(unsafe.Pointer(_ux))
}

type t461__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t461__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t83uint32_t = uint32

// x__FLOAT_BITS is defined at math.h:43:26
func x12__FLOAT_BITS(tls TLS, ___f float32) (r uint32) {
	esc := MustMalloc(4)
	var ___u = esc // *struct{F__f [0]float32;F__i [0]uint32;F int32}
	defer Free(esc)
	*(*float32)(unsafe.Pointer(___u)) = ___f
	return *(*uint32)(unsafe.Pointer(___u))
}

// x__DOUBLE_BITS is defined at math.h:49:36
func x15__DOUBLE_BITS(tls TLS, ___f float64) (r uint64) {
	esc := MustMalloc(8)
	var ___u = esc // *struct{F__f [0]float64;F__i [0]uint64;F int64}
	defer Free(esc)
	*(*float64)(unsafe.Pointer(___u)) = ___f
	return *(*uint64)(unsafe.Pointer(___u))
}

// linking nexttowardl.o

// Xnexttowardl is defined at nexttowardl.c:3:13
func Xnexttowardl(tls TLS, _x float64, _y float64) (r float64) {
	return Xnextafterl(tls, _x, _y)
}

type t462__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t462__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// linking pow.o

// Xpow is defined at pow.c:92:8
func Xpow(tls TLS, _x float64, _y float64) (r float64) {
	esc := MustMalloc(248)
	var (
		_z      float64
		_ax     float64
		_z_h    float64
		_z_l    float64
		_p_h    float64
		_p_l    float64
		_y1     float64
		_t1     float64
		_t2     float64
		_r      float64
		_s      float64
		_t      float64
		_u      float64
		_v      float64
		_w      float64
		_i      int32
		_j      int32
		_k      int32
		_yisint int32
		_n      int32
		_hx     int32
		_hy     int32
		_ix     int32
		_iy     int32
		_lx     uint32
		_ly     uint32
		___u    = esc      // *struct{Ff [0]float64;Fi [0]uint64;F int64}
		_1__u   = esc + 16 // *struct{Ff [0]float64;Fi [0]uint64;F int64}
		_2j     uint32
		_3j     uint32
		_4__u   = esc + 32 // *struct{Ff [0]float64;Fi [0]uint64;F int64}
		_ss     float64
		_s2     float64
		_s_h    float64
		_s_l    float64
		_t_h    float64
		_t_l    float64
		_5__u   = esc + 48  // *struct{Ff [0]float64;Fi [0]uint64;F int64}
		_6__u   = esc + 64  // *struct{Ff [0]float64;Fi [0]uint64;F int64}
		_7__u   = esc + 80  // *struct{Ff [0]float64;Fi [0]uint64;F int64}
		_8__u   = esc + 96  // *struct{Ff [0]float64;Fi [0]uint64;F int64}
		_9__u   = esc + 112 // *struct{Ff [0]float64;Fi [0]uint64;F int64}
		_10__u  = esc + 128 // *struct{Ff [0]float64;Fi [0]uint64;F int64}
		_11__u  = esc + 144 // *struct{Ff [0]float64;Fi [0]uint64;F int64}
		_12__u  = esc + 160 // *struct{Ff [0]float64;Fi [0]uint64;F int64}
		_13__u  = esc + 176 // *struct{Ff [0]float64;Fi [0]uint64;F int64}
		_14__u  = esc + 192 // *struct{Ff [0]float64;Fi [0]uint64;F int64}
		_15__u  = esc + 208 // *struct{Ff [0]float64;Fi [0]uint64;F int64}
		_16__u  = esc + 224 // *struct{Ff [0]float64;Fi [0]uint64;F int64}
		_17__u  = esc + 240 // *struct{Ff [0]float64;Fi [0]uint64;F int64}
	)
	defer Free(esc)
	*(*float64)(unsafe.Pointer(___u)) = _x
	_hx = int32(*(*uint64)(unsafe.Pointer(___u)) >> (uint(32) % 64))
	_lx = uint32(*(*uint64)(unsafe.Pointer(___u)))
	*(*float64)(unsafe.Pointer(_1__u)) = _y
	_hy = int32(*(*uint64)(unsafe.Pointer(_1__u)) >> (uint(32) % 64))
	_ly = uint32(*(*uint64)(unsafe.Pointer(_1__u)))
	_ix = _hx & int32(0x7fffffff)
	_iy = _hy & int32(0x7fffffff)
	if uint32(_iy)|_ly != uint32(0) {
		goto _3
	}

	return float64(1)

_3:
	if _hx != int32(0x3ff00000) || _lx != uint32(0) {
		goto _4
	}

	return float64(1)

_4:
	if _ix <= int32(0x7ff00000) && (_ix != int32(0x7ff00000) || _lx == uint32(0)) && _iy <= int32(0x7ff00000) && (_iy != int32(0x7ff00000) || _ly == uint32(0)) {
		goto _5
	}

	return _x + _y

_5:
	_yisint = int32(0)
	if _hx >= int32(0) {
		goto _6
	}

	if _iy < int32(0x43400000) {
		goto _7
	}

	_yisint = int32(2)
	goto _8

_7:
	if _iy < int32(0x3ff00000) {
		goto _9
	}

	_k = _iy>>(uint(20)%32) - int32(0x3ff)
	if _k <= int32(20) {
		goto _10
	}

	_2j = _ly >> (uint(int32(52)-_k) % 32)
	if _2j<<(uint(int32(52)-_k)%32) != _ly {
		goto _12
	}

	_yisint = int32(uint32(2) - _2j&uint32(1))
_12:
	goto _11

_10:
	if _ly != uint32(0) {
		goto _13
	}

	_3j = uint32(_iy >> (uint(int32(20)-_k) % 32))
	if _3j<<(uint(int32(20)-_k)%32) != uint32(_iy) {
		goto _14
	}

	_yisint = int32(uint32(2) - _3j&uint32(1))
_14:
_13:
_11:
_9:
_8:
_6:
	if _ly != uint32(0) {
		goto _15
	}

	if _iy != int32(0x7ff00000) {
		goto _16
	}

	if uint32(_ix-int32(0x3ff00000))|_lx != uint32(0) {
		goto _17
	}

	return float64(1)

	goto _18

_17:
	if _ix < int32(0x3ff00000) {
		goto _19
	}

	if _hy >= int32(0) {
		return _y
	}

	return float64(0)

	goto _20

_19:
	if _hy >= int32(0) {
		return float64(0)
	}

	return -_y

_20:
_18:
_16:
	if _iy != int32(0x3ff00000) {
		goto _21
	}

	if _hy < int32(0) {
		goto _22
	}

	return _x

_22:
	_y = float64(1) / _x
	return _y

_21:
	if _hy != int32(0x40000000) {
		goto _23
	}

	return _x * _x

_23:
	if _hy != int32(0x3fe00000) {
		goto _24
	}

	if _hx < int32(0) {
		goto _25
	}

	return Xsqrt(tls, _x)

_25:
_24:
_15:
	_ax = Xfabs(tls, _x)
	if _lx != uint32(0) {
		goto _26
	}

	if _ix != int32(0x7ff00000) && _ix != int32(0) && _ix != int32(0x3ff00000) {
		goto _27
	}

	_z = _ax
	if _hy >= int32(0) {
		goto _28
	}

	_z = float64(1) / _z
_28:
	if _hx >= int32(0) {
		goto _29
	}

	if _ix-int32(0x3ff00000)|_yisint != int32(0) {
		goto _30
	}

	_z = float64(_z-_z) / float64(_z-_z)
	goto _31

_30:
	if _yisint != int32(1) {
		goto _32
	}

	_z = -_z
_32:
_31:
_29:
	return _z

_27:
_26:
	_s = float64(1)
	if _hx >= int32(0) {
		goto _33
	}

	if _yisint != int32(0) {
		goto _34
	}

	return float64(_x-_x) / float64(_x-_x)

_34:
	if _yisint != int32(1) {
		goto _35
	}

	_s = float64(-1)
_35:
_33:
	if _iy <= int32(0x41e00000) {
		goto _36
	}

	if _iy <= int32(0x43f00000) {
		goto _38
	}

	if _ix > int32(0x3fefffff) {
		goto _39
	}

	if _hy < int32(0) {
		return x4huge * x4huge
	}

	return xtiny * xtiny

_39:
	if _ix < int32(0x3ff00000) {
		goto _40
	}

	if _hy > int32(0) {
		return x4huge * x4huge
	}

	return xtiny * xtiny

_40:
_38:
	if _ix >= int32(0x3fefffff) {
		goto _41
	}

	if _hy < int32(0) {
		return float64(_s*x4huge) * x4huge
	}

	return float64(_s*xtiny) * xtiny

_41:
	if _ix <= int32(0x3ff00000) {
		goto _42
	}

	if _hy > int32(0) {
		return float64(_s*x4huge) * x4huge
	}

	return float64(_s*xtiny) * xtiny

_42:
	_t = _ax - float64(1)
	_w = float64(_t*_t) * float64(float64(0.5)-float64(_t*float64(float64(0.3333333333333333)-float64(_t*float64(0.25)))))
	_u = xivln2_h * _t
	_v = float64(_t*xivln2_l) - float64(_w*xivln2)
	_t1 = _u + _v
	*(*float64)(unsafe.Pointer(_4__u)) = _t1
	{
		p := (*uint64)(unsafe.Pointer(_4__u))
		*p = *p & uint64(0xffffffff00000000)
	}
	{
		p := (*uint64)(unsafe.Pointer(_4__u))
		*p = *p | uint64(0)
	}
	_t1 = *(*float64)(unsafe.Pointer(_4__u))
	_t2 = _v - float64(_t1-_u)
	goto _37

_36:
	_n = int32(0)
	if _ix >= int32(0x100000) {
		goto _44
	}

	_ax = _ax * xtwo53
	_n = _n - int32(53)
	*(*float64)(unsafe.Pointer(_5__u)) = _ax
	_ix = int32(*(*uint64)(unsafe.Pointer(_5__u)) >> (uint(32) % 64))
_44:
	_n = _n + (_ix>>(uint(20)%32) - int32(0x3ff))
	_j = _ix & int32(0xfffff)
	_ix = _j | int32(0x3ff00000)
	if _j > int32(0x3988e) {
		goto _46
	}

	_k = int32(0)
	goto _47

_46:
	if _j >= int32(0xbb67a) {
		goto _48
	}

	_k = int32(1)
	goto _49

_48:
	_k = int32(0)
	_n = _n + int32(1)
	_ix = _ix - int32(0x100000)
_49:
_47:
	*(*float64)(unsafe.Pointer(_6__u)) = _ax
	{
		p := (*uint64)(unsafe.Pointer(_6__u))
		*p = *p & uint64(0xffffffff)
	}
	{
		p := (*uint64)(unsafe.Pointer(_6__u))
		*p = *p | uint64(_ix)<<(uint(32)%64)
	}
	_ax = *(*float64)(unsafe.Pointer(_6__u))
	_u = _ax - *(*float64)(unsafe.Pointer(xbp + 8*uintptr(_k)))
	_v = float64(1) / float64(_ax+*(*float64)(unsafe.Pointer(xbp + 8*uintptr(_k))))
	_ss = _u * _v
	_s_h = _ss
	*(*float64)(unsafe.Pointer(_7__u)) = _s_h
	{
		p := (*uint64)(unsafe.Pointer(_7__u))
		*p = *p & uint64(0xffffffff00000000)
	}
	{
		p := (*uint64)(unsafe.Pointer(_7__u))
		*p = *p | uint64(0)
	}
	_s_h = *(*float64)(unsafe.Pointer(_7__u))
	_t_h = float64(0)
	*(*float64)(unsafe.Pointer(_8__u)) = _t_h
	{
		p := (*uint64)(unsafe.Pointer(_8__u))
		*p = *p & uint64(0xffffffff)
	}
	{
		p := (*uint64)(unsafe.Pointer(_8__u))
		*p = *p | uint64(_ix>>(uint(1)%32)|int32(0x20000000)+int32(0x80000)+_k<<(uint(18)%32))<<(uint(32)%64)
	}
	_t_h = *(*float64)(unsafe.Pointer(_8__u))
	_t_l = _ax - float64(_t_h-*(*float64)(unsafe.Pointer(xbp + 8*uintptr(_k))))
	_s_l = _v * float64(float64(_u-float64(_s_h*_t_h))-float64(_s_h*_t_l))
	_s2 = _ss * _ss
	_r = float64(_s2*_s2) * float64(xL1+float64(_s2*float64(xL2+float64(_s2*float64(xL3+float64(_s2*float64(xL4+float64(_s2*float64(xL5+float64(_s2*xL6))))))))))
	_r = _r + float64(_s_l*float64(_s_h+_ss))
	_s2 = _s_h * _s_h
	_t_h = float64(float64(3)+_s2) + _r
	*(*float64)(unsafe.Pointer(_9__u)) = _t_h
	{
		p := (*uint64)(unsafe.Pointer(_9__u))
		*p = *p & uint64(0xffffffff00000000)
	}
	{
		p := (*uint64)(unsafe.Pointer(_9__u))
		*p = *p | uint64(0)
	}
	_t_h = *(*float64)(unsafe.Pointer(_9__u))
	_t_l = _r - float64(float64(_t_h-float64(3))-_s2)
	_u = _s_h * _t_h
	_v = float64(_s_l*_t_h) + float64(_t_l*_ss)
	_p_h = _u + _v
	*(*float64)(unsafe.Pointer(_10__u)) = _p_h
	{
		p := (*uint64)(unsafe.Pointer(_10__u))
		*p = *p & uint64(0xffffffff00000000)
	}
	{
		p := (*uint64)(unsafe.Pointer(_10__u))
		*p = *p | uint64(0)
	}
	_p_h = *(*float64)(unsafe.Pointer(_10__u))
	_p_l = _v - float64(_p_h-_u)
	_z_h = xcp_h * _p_h
	_z_l = float64(float64(xcp_l*_p_h)+float64(_p_l*xcp)) + *(*float64)(unsafe.Pointer(xdp_l + 8*uintptr(_k)))
	_t = float64(_n)
	_t1 = float64(float64(_z_h+_z_l)+*(*float64)(unsafe.Pointer(xdp_h + 8*uintptr(_k)))) + _t
	*(*float64)(unsafe.Pointer(_11__u)) = _t1
	{
		p := (*uint64)(unsafe.Pointer(_11__u))
		*p = *p & uint64(0xffffffff00000000)
	}
	{
		p := (*uint64)(unsafe.Pointer(_11__u))
		*p = *p | uint64(0)
	}
	_t1 = *(*float64)(unsafe.Pointer(_11__u))
	_t2 = _z_l - float64(float64(float64(_t1-_t)-*(*float64)(unsafe.Pointer(xdp_h + 8*uintptr(_k))))-_z_h)
_37:
	_y1 = _y
	*(*float64)(unsafe.Pointer(_12__u)) = _y1
	{
		p := (*uint64)(unsafe.Pointer(_12__u))
		*p = *p & uint64(0xffffffff00000000)
	}
	{
		p := (*uint64)(unsafe.Pointer(_12__u))
		*p = *p | uint64(0)
	}
	_y1 = *(*float64)(unsafe.Pointer(_12__u))
	_p_l = float64(float64(_y-_y1)*_t1) + float64(_y*_t2)
	_p_h = _y1 * _t1
	_z = _p_l + _p_h
	*(*float64)(unsafe.Pointer(_13__u)) = _z
	_j = int32(*(*uint64)(unsafe.Pointer(_13__u)) >> (uint(32) % 64))
	_i = int32(uint32(*(*uint64)(unsafe.Pointer(_13__u))))
	if _j < int32(0x40900000) {
		goto _58
	}

	if _j-int32(0x40900000)|_i == int32(0) {
		goto _60
	}

	return float64(_s*x4huge) * x4huge

_60:
	if float64(_p_l+xovt) <= float64(_z-_p_h) {
		goto _61
	}

	return float64(_s*x4huge) * x4huge

_61:
	goto _59

_58:
	if _j&int32(0x7fffffff) < int32(0x4090cc00) {
		goto _62
	}

	if uint32(_j)-uint32(0xc090cc00)|uint32(_i) == uint32(0) {
		goto _63
	}

	return float64(_s*xtiny) * xtiny

_63:
	if _p_l > float64(_z-_p_h) {
		goto _64
	}

	return float64(_s*xtiny) * xtiny

_64:
_62:
_59:
	_i = _j & int32(0x7fffffff)
	_k = _i>>(uint(20)%32) - int32(0x3ff)
	_n = int32(0)
	if _i <= int32(0x3fe00000) {
		goto _65
	}

	_n = _j + int32(0x100000)>>(uint(_k+int32(1))%32)
	_k = _n&int32(0x7fffffff)>>(uint(20)%32) - int32(0x3ff)
	_t = float64(0)
	*(*float64)(unsafe.Pointer(_14__u)) = _t
	{
		p := (*uint64)(unsafe.Pointer(_14__u))
		*p = *p & uint64(0xffffffff)
	}
	{
		p := (*uint64)(unsafe.Pointer(_14__u))
		*p = *p | uint64(_n & ^(int32(0xfffff)>>(uint(_k)%32)))<<(uint(32)%64)
	}
	_t = *(*float64)(unsafe.Pointer(_14__u))
	_n = (_n&int32(0xfffff) | int32(0x100000)) >> (uint(int32(20)-_k) % 32)
	if _j >= int32(0) {
		goto _67
	}

	_n = -_n
_67:
	_p_h = _p_h - _t
_65:
	_t = _p_l + _p_h
	*(*float64)(unsafe.Pointer(_15__u)) = _t
	{
		p := (*uint64)(unsafe.Pointer(_15__u))
		*p = *p & uint64(0xffffffff00000000)
	}
	{
		p := (*uint64)(unsafe.Pointer(_15__u))
		*p = *p | uint64(0)
	}
	_t = *(*float64)(unsafe.Pointer(_15__u))
	_u = _t * xlg2_h
	_v = float64(float64(_p_l-float64(_t-_p_h))*xlg2) + float64(_t*xlg2_l)
	_z = _u + _v
	_w = _v - float64(_z-_u)
	_t = _z * _z
	_t1 = _z - float64(_t*float64(x5P1+float64(_t*float64(x5P2+float64(_t*float64(x4P3+float64(_t*float64(x4P4+float64(_t*x2P5)))))))))
	_r = float64(float64(_z*_t1)/float64(_t1-float64(2))) - float64(_w+float64(_z*_w))
	_z = float64(1) - float64(_r-_z)
	*(*float64)(unsafe.Pointer(_16__u)) = _z
	_j = int32(*(*uint64)(unsafe.Pointer(_16__u)) >> (uint(32) % 64))
	_j = _j + _n<<(uint(20)%32)
	if _j>>(uint(20)%32) > int32(0) {
		goto _70
	}

	_z = Xscalbn(tls, _z, _n)
	goto _71

_70:
	*(*float64)(unsafe.Pointer(_17__u)) = _z
	{
		p := (*uint64)(unsafe.Pointer(_17__u))
		*p = *p & uint64(0xffffffff)
	}
	{
		p := (*uint64)(unsafe.Pointer(_17__u))
		*p = *p | uint64(_j)<<(uint(32)%64)
	}
	_z = *(*float64)(unsafe.Pointer(_17__u))
_71:
	return _s * _z
}

type t463__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t463__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t10int32_t = int32

type t84uint32_t = uint32

type t56uint64_t = uint64

// xhuge float64, escapes: false, pow.c:67:1
var x4huge = float64(1e+300)

// xtiny float64, escapes: false, pow.c:68:1
var xtiny = float64(1e-300)

// xivln2_h float64, escapes: false, pow.c:89:1
var xivln2_h = float64(1.4426950216293335)

// xivln2_l float64, escapes: false, pow.c:90:1
var xivln2_l = float64(1.9259629911266175e-08)

// xivln2 float64, escapes: false, pow.c:88:1
var xivln2 = float64(1.4426950408889634)

// xtwo53 float64, escapes: false, pow.c:66:1
var xtwo53 = float64(9.007199254740992e+15)

// xbp [2]float64, escapes: true, pow.c:63:1
var xbp = ds + 42392

// xL1 float64, escapes: false, pow.c:70:1
var xL1 = float64(0.5999999999999946)

// xL2 float64, escapes: false, pow.c:71:1
var xL2 = float64(0.4285714285785502)

// xL3 float64, escapes: false, pow.c:72:1
var xL3 = float64(0.33333332981837743)

// xL4 float64, escapes: false, pow.c:73:1
var xL4 = float64(0.272728123808534)

// xL5 float64, escapes: false, pow.c:74:1
var xL5 = float64(0.23066074577556175)

// xL6 float64, escapes: false, pow.c:75:1
var xL6 = float64(0.20697501780033842)

// xcp_h float64, escapes: false, pow.c:86:1
var xcp_h = float64(0.9617967009544373)

// xcp_l float64, escapes: false, pow.c:87:1
var xcp_l = float64(-7.028461650952758e-09)

// xcp float64, escapes: false, pow.c:85:1
var xcp = float64(0.9617966939259756)

// xdp_l [2]float64, escapes: true, pow.c:65:1
var xdp_l = ds + 42408

// xdp_h [2]float64, escapes: true, pow.c:64:1
var xdp_h = ds + 42424

// xovt float64, escapes: false, pow.c:84:1
var xovt = float64(8.008566259537294e-17)

// xlg2_h float64, escapes: false, pow.c:82:1
var xlg2_h = float64(0.6931471824645996)

// xlg2 float64, escapes: false, pow.c:81:1
var xlg2 = float64(0.6931471805599453)

// xlg2_l float64, escapes: false, pow.c:83:1
var xlg2_l = float64(-1.904654299957768e-09)

// xP1 float64, escapes: false, pow.c:76:1
var x5P1 = float64(0.16666666666666602)

// xP2 float64, escapes: false, pow.c:77:1
var x5P2 = float64(-0.0027777777777015593)

// xP3 float64, escapes: false, pow.c:78:1
var x4P3 = float64(6.613756321437934e-05)

// xP4 float64, escapes: false, pow.c:79:1
var x4P4 = float64(-1.6533902205465252e-06)

// xP5 float64, escapes: false, pow.c:80:1
var x2P5 = float64(4.1381367970572385e-08)

// linking powf.o

// Xpowf is defined at powf.c:48:7
func Xpowf(tls TLS, _x float32, _y float32) (r float32) {
	esc := MustMalloc(356)
	var (
		_z      float32
		_ax     float32
		_z_h    float32
		_z_l    float32
		_p_h    float32
		_p_l    float32
		_y1     float32
		_t1     float32
		_t2     float32
		_r      float32
		_s      float32
		_sn     float32
		_t      float32
		_u      float32
		_v      float32
		_w      float32
		_i      int32
		_j      int32
		_k      int32
		_yisint int32
		_n      int32
		_hx     int32
		_hy     int32
		_ix     int32
		_iy     int32
		_is     int32
		___u    = esc      // *struct{Ff [0]float32;Fi [0]uint32;F int32}
		_1__u   = esc + 16 // *struct{Ff [0]float32;Fi [0]uint32;F int32}
		_2__u   = esc + 32 // *struct{Ff [0]float32;Fi [0]uint32;F int32}
		_3__u   = esc + 48 // *struct{Ff [0]float32;Fi [0]uint32;F int32}
		_s2     float32
		_s_h    float32
		_s_l    float32
		_t_h    float32
		_t_l    float32
		_4__u   = esc + 64  // *struct{Ff [0]float32;Fi [0]uint32;F int32}
		_5__u   = esc + 80  // *struct{Ff [0]float32;Fi [0]uint32;F int32}
		_6__u   = esc + 96  // *struct{Ff [0]float32;Fi [0]uint32;F int32}
		_7__u   = esc + 112 // *struct{Ff [0]float32;Fi [0]uint32;F int32}
		_8__u   = esc + 128 // *struct{Ff [0]float32;Fi [0]uint32;F int32}
		_9__u   = esc + 144 // *struct{Ff [0]float32;Fi [0]uint32;F int32}
		_10__u  = esc + 160 // *struct{Ff [0]float32;Fi [0]uint32;F int32}
		_11__u  = esc + 176 // *struct{Ff [0]float32;Fi [0]uint32;F int32}
		_12__u  = esc + 192 // *struct{Ff [0]float32;Fi [0]uint32;F int32}
		_13__u  = esc + 208 // *struct{Ff [0]float32;Fi [0]uint32;F int32}
		_14__u  = esc + 224 // *struct{Ff [0]float32;Fi [0]uint32;F int32}
		_15__u  = esc + 240 // *struct{Ff [0]float32;Fi [0]uint32;F int32}
		_16__u  = esc + 256 // *struct{Ff [0]float32;Fi [0]uint32;F int32}
		_17__u  = esc + 272 // *struct{Ff [0]float32;Fi [0]uint32;F int32}
		_18__u  = esc + 288 // *struct{Ff [0]float32;Fi [0]uint32;F int32}
		_19__u  = esc + 304 // *struct{Ff [0]float32;Fi [0]uint32;F int32}
		_20__u  = esc + 320 // *struct{Ff [0]float32;Fi [0]uint32;F int32}
		_21__u  = esc + 336 // *struct{Ff [0]float32;Fi [0]uint32;F int32}
		_22__u  = esc + 352 // *struct{Ff [0]float32;Fi [0]uint32;F int32}
	)
	defer Free(esc)
	*(*float32)(unsafe.Pointer(___u)) = _x
	_hx = int32(*(*uint32)(unsafe.Pointer(___u)))
	*(*float32)(unsafe.Pointer(_1__u)) = _y
	_hy = int32(*(*uint32)(unsafe.Pointer(_1__u)))
	_ix = _hx & int32(0x7fffffff)
	_iy = _hy & int32(0x7fffffff)
	if _iy != int32(0) {
		goto _3
	}

	return float32(1)

_3:
	if _hx != int32(0x3f800000) {
		goto _4
	}

	return float32(1)

_4:
	if _ix <= int32(0x7f800000) && _iy <= int32(0x7f800000) {
		goto _5
	}

	return _x + _y

_5:
	_yisint = int32(0)
	if _hx >= int32(0) {
		goto _6
	}

	if _iy < int32(0x4b800000) {
		goto _7
	}

	_yisint = int32(2)
	goto _8

_7:
	if _iy < int32(0x3f800000) {
		goto _9
	}

	_k = _iy>>(uint(23)%32) - int32(0x7f)
	_j = _iy >> (uint(int32(23)-_k) % 32)
	if _j<<(uint(int32(23)-_k)%32) != _iy {
		goto _10
	}

	_yisint = int32(2) - _j&int32(1)
_10:
_9:
_8:
_6:
	if _iy != int32(0x7f800000) {
		goto _11
	}

	if _ix != int32(0x3f800000) {
		goto _12
	}

	return float32(1)

	goto _13

_12:
	if _ix <= int32(0x3f800000) {
		goto _14
	}

	if _hy >= int32(0) {
		return _y
	}

	return float32(0)

	goto _15

_14:
	if _hy >= int32(0) {
		return float32(0)
	}

	return -_y

_15:
_13:
_11:
	if _iy != int32(0x3f800000) {
		goto _16
	}

	if _hy >= int32(0) {
		return _x
	}

	return float32(1) / _x

_16:
	if _hy != int32(0x40000000) {
		goto _17
	}

	return _x * _x

_17:
	if _hy != int32(0x3f000000) {
		goto _18
	}

	if _hx < int32(0) {
		goto _19
	}

	return Xsqrtf(tls, _x)

_19:
_18:
	_ax = Xfabsf(tls, _x)
	if _ix != int32(0x7f800000) && _ix != int32(0) && _ix != int32(0x3f800000) {
		goto _20
	}

	_z = _ax
	if _hy >= int32(0) {
		goto _21
	}

	_z = float32(1) / _z
_21:
	if _hx >= int32(0) {
		goto _22
	}

	if _ix-int32(0x3f800000)|_yisint != int32(0) {
		goto _23
	}

	_z = float32(_z-_z) / float32(_z-_z)
	goto _24

_23:
	if _yisint != int32(1) {
		goto _25
	}

	_z = -_z
_25:
_24:
_22:
	return _z

_20:
	_sn = float32(1)
	if _hx >= int32(0) {
		goto _26
	}

	if _yisint != int32(0) {
		goto _27
	}

	return float32(_x-_x) / float32(_x-_x)

_27:
	if _yisint != int32(1) {
		goto _28
	}

	_sn = float32(-1)
_28:
_26:
	if _iy <= int32(0x4d000000) {
		goto _29
	}

	if _ix >= int32(0x3f7ffff8) {
		goto _31
	}

	if _hy < int32(0) {
		return float32(_sn*x5huge) * x5huge
	}

	return float32(_sn*x1tiny) * x1tiny

_31:
	if _ix <= int32(0x3f800007) {
		goto _32
	}

	if _hy > int32(0) {
		return float32(_sn*x5huge) * x5huge
	}

	return float32(_sn*x1tiny) * x1tiny

_32:
	_t = _ax - float32(1)
	_w = float32(_t*_t) * float32(float32(0.5)-float32(_t*float32(float32(0.33333334)-float32(_t*float32(0.25)))))
	_u = x1ivln2_h * _t
	_v = float32(_t*x1ivln2_l) - float32(_w*x1ivln2)
	_t1 = _u + _v
	*(*float32)(unsafe.Pointer(_2__u)) = _t1
	_is = int32(*(*uint32)(unsafe.Pointer(_2__u)))
	*(*uint32)(unsafe.Pointer(_3__u)) = uint32(_is) & uint32(0xfffff000)
	_t1 = *(*float32)(unsafe.Pointer(_3__u))
	_t2 = _v - float32(_t1-_u)
	goto _30

_29:
	_n = int32(0)
	if _ix >= int32(0x800000) {
		goto _35
	}

	_ax = _ax * xtwo24
	_n = _n - int32(24)
	*(*float32)(unsafe.Pointer(_4__u)) = _ax
	_ix = int32(*(*uint32)(unsafe.Pointer(_4__u)))
_35:
	_n = _n + (_ix>>(uint(23)%32) - int32(0x7f))
	_j = _ix & int32(0x7fffff)
	_ix = _j | int32(0x3f800000)
	if _j > int32(0x1cc471) {
		goto _37
	}

	_k = int32(0)
	goto _38

_37:
	if _j >= int32(0x5db3d7) {
		goto _39
	}

	_k = int32(1)
	goto _40

_39:
	_k = int32(0)
	_n = _n + int32(1)
	_ix = _ix - int32(0x800000)
_40:
_38:
	*(*uint32)(unsafe.Pointer(_5__u)) = uint32(_ix)
	_ax = *(*float32)(unsafe.Pointer(_5__u))
	_u = _ax - *(*float32)(unsafe.Pointer(x1bp + 4*uintptr(_k)))
	_v = float32(1) / float32(_ax+*(*float32)(unsafe.Pointer(x1bp + 4*uintptr(_k))))
	_s = _u * _v
	_s_h = _s
	*(*float32)(unsafe.Pointer(_6__u)) = _s_h
	_is = int32(*(*uint32)(unsafe.Pointer(_6__u)))
	*(*uint32)(unsafe.Pointer(_7__u)) = uint32(_is) & uint32(0xfffff000)
	_s_h = *(*float32)(unsafe.Pointer(_7__u))
	_is = int32(uint32(_ix>>(uint(1)%32))&uint32(0xfffff000) | uint32(0x20000000))
	*(*uint32)(unsafe.Pointer(_8__u)) = uint32(_is + int32(0x400000) + _k<<(uint(21)%32))
	_t_h = *(*float32)(unsafe.Pointer(_8__u))
	_t_l = _ax - float32(_t_h-*(*float32)(unsafe.Pointer(x1bp + 4*uintptr(_k))))
	_s_l = _v * float32(float32(_u-float32(_s_h*_t_h))-float32(_s_h*_t_l))
	_s2 = _s * _s
	_r = float32(_s2*_s2) * float32(x1L1+float32(_s2*float32(x1L2+float32(_s2*float32(x1L3+float32(_s2*float32(x1L4+float32(_s2*float32(x1L5+float32(_s2*x1L6))))))))))
	_r = _r + float32(_s_l*float32(_s_h+_s))
	_s2 = _s_h * _s_h
	_t_h = float32(float32(3)+_s2) + _r
	*(*float32)(unsafe.Pointer(_9__u)) = _t_h
	_is = int32(*(*uint32)(unsafe.Pointer(_9__u)))
	*(*uint32)(unsafe.Pointer(_10__u)) = uint32(_is) & uint32(0xfffff000)
	_t_h = *(*float32)(unsafe.Pointer(_10__u))
	_t_l = _r - float32(float32(_t_h-float32(3))-_s2)
	_u = _s_h * _t_h
	_v = float32(_s_l*_t_h) + float32(_t_l*_s)
	_p_h = _u + _v
	*(*float32)(unsafe.Pointer(_11__u)) = _p_h
	_is = int32(*(*uint32)(unsafe.Pointer(_11__u)))
	*(*uint32)(unsafe.Pointer(_12__u)) = uint32(_is) & uint32(0xfffff000)
	_p_h = *(*float32)(unsafe.Pointer(_12__u))
	_p_l = _v - float32(_p_h-_u)
	_z_h = x1cp_h * _p_h
	_z_l = float32(float32(x1cp_l*_p_h)+float32(_p_l*x1cp)) + *(*float32)(unsafe.Pointer(x1dp_l + 4*uintptr(_k)))
	_t = float32(_n)
	_t1 = float32(float32(_z_h+_z_l)+*(*float32)(unsafe.Pointer(x1dp_h + 4*uintptr(_k)))) + _t
	*(*float32)(unsafe.Pointer(_13__u)) = _t1
	_is = int32(*(*uint32)(unsafe.Pointer(_13__u)))
	*(*uint32)(unsafe.Pointer(_14__u)) = uint32(_is) & uint32(0xfffff000)
	_t1 = *(*float32)(unsafe.Pointer(_14__u))
	_t2 = _z_l - float32(float32(float32(_t1-_t)-*(*float32)(unsafe.Pointer(x1dp_h + 4*uintptr(_k))))-_z_h)
_30:
	*(*float32)(unsafe.Pointer(_15__u)) = _y
	_is = int32(*(*uint32)(unsafe.Pointer(_15__u)))
	*(*uint32)(unsafe.Pointer(_16__u)) = uint32(_is) & uint32(0xfffff000)
	_y1 = *(*float32)(unsafe.Pointer(_16__u))
	_p_l = float32(float32(_y-_y1)*_t1) + float32(_y*_t2)
	_p_h = _y1 * _t1
	_z = _p_l + _p_h
	*(*float32)(unsafe.Pointer(_17__u)) = _z
	_j = int32(*(*uint32)(unsafe.Pointer(_17__u)))
	if _j <= int32(0x43000000) {
		goto _54
	}

	return float32(_sn*x5huge) * x5huge

	goto _55

_54:
	if _j != int32(0x43000000) {
		goto _56
	}

	if float32(_p_l+x1ovt) <= float32(_z-_p_h) {
		goto _58
	}

	return float32(_sn*x5huge) * x5huge

_58:
	goto _57

_56:
	if _j&int32(0x7fffffff) <= int32(0x43160000) {
		goto _59
	}

	return float32(_sn*x1tiny) * x1tiny

	goto _60

_59:
	if uint32(_j) != uint32(0xc3160000) {
		goto _61
	}

	if _p_l > float32(_z-_p_h) {
		goto _62
	}

	return float32(_sn*x1tiny) * x1tiny

_62:
_61:
_60:
_57:
_55:
	_i = _j & int32(0x7fffffff)
	_k = _i>>(uint(23)%32) - int32(0x7f)
	_n = int32(0)
	if _i <= int32(0x3f000000) {
		goto _63
	}

	_n = _j + int32(0x800000)>>(uint(_k+int32(1))%32)
	_k = _n&int32(0x7fffffff)>>(uint(23)%32) - int32(0x7f)
	*(*uint32)(unsafe.Pointer(_18__u)) = uint32(_n & ^(int32(0x7fffff) >> (uint(_k) % 32)))
	_t = *(*float32)(unsafe.Pointer(_18__u))
	_n = (_n&int32(0x7fffff) | int32(0x800000)) >> (uint(int32(23)-_k) % 32)
	if _j >= int32(0) {
		goto _65
	}

	_n = -_n
_65:
	_p_h = _p_h - _t
_63:
	_t = _p_l + _p_h
	*(*float32)(unsafe.Pointer(_19__u)) = _t
	_is = int32(*(*uint32)(unsafe.Pointer(_19__u)))
	*(*uint32)(unsafe.Pointer(_20__u)) = uint32(_is) & uint32(0xffff8000)
	_t = *(*float32)(unsafe.Pointer(_20__u))
	_u = _t * x1lg2_h
	_v = float32(float32(_p_l-float32(_t-_p_h))*x1lg2) + float32(_t*x1lg2_l)
	_z = _u + _v
	_w = _v - float32(_z-_u)
	_t = _z * _z
	_t1 = _z - float32(_t*float32(x6P1+float32(_t*float32(x6P2+float32(_t*float32(x5P3+float32(_t*float32(x5P4+float32(_t*x3P5)))))))))
	_r = float32(float32(_z*_t1)/float32(_t1-float32(2))) - float32(_w+float32(_z*_w))
	_z = float32(1) - float32(_r-_z)
	*(*float32)(unsafe.Pointer(_21__u)) = _z
	_j = int32(*(*uint32)(unsafe.Pointer(_21__u)))
	_j = _j + _n<<(uint(23)%32)
	if _j>>(uint(23)%32) > int32(0) {
		goto _69
	}

	_z = Xscalbnf(tls, _z, _n)
	goto _70

_69:
	*(*uint32)(unsafe.Pointer(_22__u)) = uint32(_j)
	_z = *(*float32)(unsafe.Pointer(_22__u))
_70:
	return _sn * _z
}

type t464__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t464__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t11int32_t = int32

type t85uint32_t = uint32

// xhuge float32, escapes: false, powf.c:23:1
var x5huge = float32(1e+30)

// xtiny float32, escapes: false, powf.c:24:1
var x1tiny = float32(1e-30)

// xivln2_h float32, escapes: false, powf.c:45:1
var x1ivln2_h = float32(1.442688)

// xivln2_l float32, escapes: false, powf.c:46:1
var x1ivln2_l = float32(7.0526075e-06)

// xivln2 float32, escapes: false, powf.c:44:1
var x1ivln2 = float32(1.442695)

// xtwo24 float32, escapes: false, powf.c:22:1
var xtwo24 = float32(1.6777216e+07)

// xbp [2]float32, escapes: true, powf.c:19:1
var x1bp = ds + 42440

// xL1 float32, escapes: false, powf.c:26:1
var x1L1 = float32(0.6)

// xL2 float32, escapes: false, powf.c:27:1
var x1L2 = float32(0.42857143)

// xL3 float32, escapes: false, powf.c:28:1
var x1L3 = float32(0.33333334)

// xL4 float32, escapes: false, powf.c:29:1
var x1L4 = float32(0.27272812)

// xL5 float32, escapes: false, powf.c:30:1
var x1L5 = float32(0.23066075)

// xL6 float32, escapes: false, powf.c:31:1
var x1L6 = float32(0.20697501)

// xcp_h float32, escapes: false, powf.c:42:1
var x1cp_h = float32(0.96191406)

// xcp_l float32, escapes: false, powf.c:43:1
var x1cp_l = float32(-0.000117368574)

// xcp float32, escapes: false, powf.c:41:1
var x1cp = float32(0.9617967)

// xdp_l [2]float32, escapes: true, powf.c:21:1
var x1dp_l = ds + 42448

// xdp_h [2]float32, escapes: true, powf.c:20:1
var x1dp_h = ds + 42456

// xovt float32, escapes: false, powf.c:40:1
var x1ovt = float32(4.2995666e-08)

// xlg2_h float32, escapes: false, powf.c:38:1
var x1lg2_h = float32(0.69314575)

// xlg2 float32, escapes: false, powf.c:37:1
var x1lg2 = float32(0.6931472)

// xlg2_l float32, escapes: false, powf.c:39:1
var x1lg2_l = float32(1.4286065e-06)

// xP1 float32, escapes: false, powf.c:32:1
var x6P1 = float32(0.16666667)

// xP2 float32, escapes: false, powf.c:33:1
var x6P2 = float32(-0.0027777778)

// xP3 float32, escapes: false, powf.c:34:1
var x5P3 = float32(6.613756e-05)

// xP4 float32, escapes: false, powf.c:35:1
var x5P4 = float32(-1.6533902e-06)

// xP5 float32, escapes: false, powf.c:36:1
var x3P5 = float32(4.138137e-08)

// linking powl.o

// Xpowl is defined at powl.c:73:13
func Xpowl(tls TLS, _x float64, _y float64) (r float64) {
	return Xpow(tls, _x, _y)
}

type t465__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t465__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// linking remainder.o

// Xremainder is defined at remainder.c:4:8
func Xremainder(tls TLS, _x float64, _y float64) (r float64) {
	esc := MustMalloc(4)
	var _q = esc // *int32
	defer Free(esc)
	return Xremquo(tls, _x, _y, _q)
}

type t466__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t466__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// linking remainderf.o

// Xremainderf is defined at remainderf.c:4:7
func Xremainderf(tls TLS, _x float32, _y float32) (r float32) {
	esc := MustMalloc(4)
	var _q = esc // *int32
	defer Free(esc)
	return Xremquof(tls, _x, _y, _q)
}

type t467__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t467__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// linking remainderl.o

// Xremainderl is defined at remainderl.c:5:13
func Xremainderl(tls TLS, _x float64, _y float64) (r float64) {
	return Xremainder(tls, _x, _y)
}

type t468__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t468__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// linking remquo.o

// Xremquo is defined at remquo.c:4:8
func Xremquo(tls TLS, _x float64, _y float64, _quo uintptr /* *int32 */) (r float64) {
	esc := MustMalloc(24)
	var (
		_ux  = esc      // *struct{Ff [0]float64;Fi [0]uint64;F int64}
		_uy  = esc + 16 // *struct{Ff [0]float64;Fi [0]uint64;F int64}
		_ex  int32
		_ey  int32
		_sx  int32
		_sy  int32
		_q   uint32
		_i   uint64
		_uxi uint64
	)
	defer Free(esc)
	*(*struct {
		Ff [0]float64
		Fi [0]uint64
		F  int64
	})(unsafe.Pointer(_ux)) = *(*struct {
		Ff [0]float64
		Fi [0]uint64
		F  int64
	})(unsafe.Pointer(&struct{ f float64 }{_x}))
	*(*struct {
		Ff [0]float64
		Fi [0]uint64
		F  int64
	})(unsafe.Pointer(_uy)) = *(*struct {
		Ff [0]float64
		Fi [0]uint64
		F  int64
	})(unsafe.Pointer(&struct{ f float64 }{_y}))
	_ex = int32(*(*uint64)(unsafe.Pointer(_ux)) >> (uint(52) % 64) & uint64(0x7ff))
	_ey = int32(*(*uint64)(unsafe.Pointer(_uy)) >> (uint(52) % 64) & uint64(0x7ff))
	_sx = int32(*(*uint64)(unsafe.Pointer(_ux)) >> (uint(63) % 64))
	_sy = int32(*(*uint64)(unsafe.Pointer(_uy)) >> (uint(63) % 64))
	_uxi = *(*uint64)(unsafe.Pointer(_ux))
	*(*int32)(unsafe.Pointer(_quo)) = int32(0)
	if *(*uint64)(unsafe.Pointer(_uy))<<(uint(1)%64) != uint64(0) && x16__DOUBLE_BITS(tls, _y)&uint64(9223372036854775807) <= uint64(9218868437227405312) && _ex != int32(0x7ff) {
		goto _1
	}

	return float64(_x*_y) / float64(_x*_y)

_1:
	if *(*uint64)(unsafe.Pointer(_ux))<<(uint(1)%64) != uint64(0) {
		goto _2
	}

	return _x

_2:
	if _ex != 0 {
		goto _3
	}

	_i = _uxi << (uint(12) % 64)
_5:
	if _i>>(uint(63)%64) != uint64(0) {
		goto _7
	}

	_ex--
	_i = _i << uint32(1)
	goto _5

_7:
	_uxi = _uxi << uint32(-_ex+int32(1))
	goto _4

_3:
	_uxi = _uxi & uint64(4503599627370495)
	_uxi = _uxi | uint64(4503599627370496)
_4:
	if _ey != 0 {
		goto _8
	}

	_i = *(*uint64)(unsafe.Pointer(_uy)) << (uint(12) % 64)
_10:
	if _i>>(uint(63)%64) != uint64(0) {
		goto _12
	}

	_ey--
	_i = _i << uint32(1)
	goto _10

_12:
	{
		p := (*uint64)(unsafe.Pointer(_uy))
		*p = *p << uint32(-_ey+int32(1))
	}
	goto _9

_8:
	{
		p := (*uint64)(unsafe.Pointer(_uy))
		*p = *p & uint64(4503599627370495)
	}
	{
		p := (*uint64)(unsafe.Pointer(_uy))
		*p = *p | uint64(4503599627370496)
	}
_9:
	_q = uint32(0)
	if _ex >= _ey {
		goto _13
	}

	if _ex+int32(1) != _ey {
		goto _14
	}

	goto lend

_14:
	return _x

_13:
_15:
	if _ex <= _ey {
		goto _17
	}

	_i = _uxi - *(*uint64)(unsafe.Pointer(_uy))
	if _i>>(uint(63)%64) != uint64(0) {
		goto _18
	}

	_uxi = _i
	_q++
_18:
	_uxi = _uxi << uint32(1)
	_q = _q << uint32(1)
	_ex--
	goto _15

_17:
	_i = _uxi - *(*uint64)(unsafe.Pointer(_uy))
	if _i>>(uint(63)%64) != uint64(0) {
		goto _19
	}

	_uxi = _i
	_q++
_19:
	if _uxi != uint64(0) {
		goto _20
	}

	_ex = int32(-60)
	goto _21

_20:
_22:
	if _uxi>>(uint(52)%64) != uint64(0) {
		goto _24
	}

	_uxi = _uxi << uint32(1)
	_ex--
	goto _22

_24:
_21:
	goto lend
lend:
	if _ex <= int32(0) {
		goto _25
	}

	_uxi = _uxi - uint64(4503599627370496)
	_uxi = _uxi | uint64(_ex)<<(uint(52)%64)
	goto _26

_25:
	_uxi = _uxi >> uint32(-_ex+int32(1))
_26:
	*(*uint64)(unsafe.Pointer(_ux)) = _uxi
	_x = *(*float64)(unsafe.Pointer(_ux))
	if _sy == 0 {
		goto _27
	}

	_y = -_y
_27:
	if _ex != _ey && (_ex+int32(1) != _ey || float64(float64(2)*_x) <= _y && (float64(float64(2)*_x) != _y || (_q%uint32(2)) == 0)) {
		goto _28
	}

	_x = _x - _y
	_q++
_28:
	_q = _q & uint32(0x7fffffff)
	*(*int32)(unsafe.Pointer(_quo)) = func() int32 {
		if (_sx ^ _sy) != 0 {
			return -int32(_q)
		}
		return int32(_q)
	}()
	if _sx != 0 {
		return -_x
	}

	return _x
}

type t469__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t469__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t57uint64_t = uint64

type t86uint32_t = uint32

// x__DOUBLE_BITS is defined at math.h:49:36
func x16__DOUBLE_BITS(tls TLS, ___f float64) (r uint64) {
	esc := MustMalloc(8)
	var ___u = esc // *struct{F__f [0]float64;F__i [0]uint64;F int64}
	defer Free(esc)
	*(*float64)(unsafe.Pointer(___u)) = ___f
	return *(*uint64)(unsafe.Pointer(___u))
}

// linking remquof.o

// Xremquof is defined at remquof.c:4:7
func Xremquof(tls TLS, _x float32, _y float32, _quo uintptr /* *int32 */) (r float32) {
	esc := MustMalloc(20)
	var (
		_ux  = esc      // *struct{Ff [0]float32;Fi [0]uint32;F int32}
		_uy  = esc + 16 // *struct{Ff [0]float32;Fi [0]uint32;F int32}
		_ex  int32
		_ey  int32
		_sx  int32
		_sy  int32
		_q   uint32
		_i   uint32
		_uxi uint32
	)
	defer Free(esc)
	*(*struct {
		Ff [0]float32
		Fi [0]uint32
		F  int32
	})(unsafe.Pointer(_ux)) = *(*struct {
		Ff [0]float32
		Fi [0]uint32
		F  int32
	})(unsafe.Pointer(&struct{ f float32 }{_x}))
	*(*struct {
		Ff [0]float32
		Fi [0]uint32
		F  int32
	})(unsafe.Pointer(_uy)) = *(*struct {
		Ff [0]float32
		Fi [0]uint32
		F  int32
	})(unsafe.Pointer(&struct{ f float32 }{_y}))
	_ex = int32(*(*uint32)(unsafe.Pointer(_ux)) >> (uint(23) % 32) & uint32(0xff))
	_ey = int32(*(*uint32)(unsafe.Pointer(_uy)) >> (uint(23) % 32) & uint32(0xff))
	_sx = int32(*(*uint32)(unsafe.Pointer(_ux)) >> (uint(31) % 32))
	_sy = int32(*(*uint32)(unsafe.Pointer(_uy)) >> (uint(31) % 32))
	_uxi = *(*uint32)(unsafe.Pointer(_ux))
	*(*int32)(unsafe.Pointer(_quo)) = int32(0)
	if *(*uint32)(unsafe.Pointer(_uy))<<(uint(1)%32) != uint32(0) && x13__FLOAT_BITS(tls, _y)&uint32(0x7fffffff) <= uint32(0x7f800000) && _ex != int32(0xff) {
		goto _1
	}

	return float32(_x*_y) / float32(_x*_y)

_1:
	if *(*uint32)(unsafe.Pointer(_ux))<<(uint(1)%32) != uint32(0) {
		goto _2
	}

	return _x

_2:
	if _ex != 0 {
		goto _3
	}

	_i = _uxi << (uint(9) % 32)
_5:
	if _i>>(uint(31)%32) != uint32(0) {
		goto _7
	}

	_ex--
	_i = _i << uint32(1)
	goto _5

_7:
	_uxi = _uxi << uint32(-_ex+int32(1))
	goto _4

_3:
	_uxi = _uxi & uint32(8388607)
	_uxi = _uxi | uint32(8388608)
_4:
	if _ey != 0 {
		goto _8
	}

	_i = *(*uint32)(unsafe.Pointer(_uy)) << (uint(9) % 32)
_10:
	if _i>>(uint(31)%32) != uint32(0) {
		goto _12
	}

	_ey--
	_i = _i << uint32(1)
	goto _10

_12:
	{
		p := (*uint32)(unsafe.Pointer(_uy))
		*p = *p << uint32(-_ey+int32(1))
	}
	goto _9

_8:
	{
		p := (*uint32)(unsafe.Pointer(_uy))
		*p = *p & uint32(8388607)
	}
	{
		p := (*uint32)(unsafe.Pointer(_uy))
		*p = *p | uint32(8388608)
	}
_9:
	_q = uint32(0)
	if _ex >= _ey {
		goto _13
	}

	if _ex+int32(1) != _ey {
		goto _14
	}

	goto lend

_14:
	return _x

_13:
_15:
	if _ex <= _ey {
		goto _17
	}

	_i = _uxi - *(*uint32)(unsafe.Pointer(_uy))
	if _i>>(uint(31)%32) != uint32(0) {
		goto _18
	}

	_uxi = _i
	_q++
_18:
	_uxi = _uxi << uint32(1)
	_q = _q << uint32(1)
	_ex--
	goto _15

_17:
	_i = _uxi - *(*uint32)(unsafe.Pointer(_uy))
	if _i>>(uint(31)%32) != uint32(0) {
		goto _19
	}

	_uxi = _i
	_q++
_19:
	if _uxi != uint32(0) {
		goto _20
	}

	_ex = int32(-30)
	goto _21

_20:
_22:
	if _uxi>>(uint(23)%32) != uint32(0) {
		goto _24
	}

	_uxi = _uxi << uint32(1)
	_ex--
	goto _22

_24:
_21:
	goto lend
lend:
	if _ex <= int32(0) {
		goto _25
	}

	_uxi = _uxi - uint32(8388608)
	_uxi = _uxi | uint32(_ex)<<(uint(23)%32)
	goto _26

_25:
	_uxi = _uxi >> uint32(-_ex+int32(1))
_26:
	*(*uint32)(unsafe.Pointer(_ux)) = _uxi
	_x = *(*float32)(unsafe.Pointer(_ux))
	if _sy == 0 {
		goto _27
	}

	_y = -_y
_27:
	if _ex != _ey && (_ex+int32(1) != _ey || float32(float32(2)*_x) <= _y && (float32(float32(2)*_x) != _y || (_q%uint32(2)) == 0)) {
		goto _28
	}

	_x = _x - _y
	_q++
_28:
	_q = _q & uint32(0x7fffffff)
	*(*int32)(unsafe.Pointer(_quo)) = func() int32 {
		if (_sx ^ _sy) != 0 {
			return -int32(_q)
		}
		return int32(_q)
	}()
	if _sx != 0 {
		return -_x
	}

	return _x
}

type t470__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t470__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t87uint32_t = uint32

// x__FLOAT_BITS is defined at math.h:43:26
func x13__FLOAT_BITS(tls TLS, ___f float32) (r uint32) {
	esc := MustMalloc(4)
	var ___u = esc // *struct{F__f [0]float32;F__i [0]uint32;F int32}
	defer Free(esc)
	*(*float32)(unsafe.Pointer(___u)) = ___f
	return *(*uint32)(unsafe.Pointer(___u))
}

// linking remquol.o

// Xremquol is defined at remquol.c:4:13
func Xremquol(tls TLS, _x float64, _y float64, _quo uintptr /* *int32 */) (r float64) {
	return Xremquo(tls, _x, _y, _quo)
}

type t471__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t471__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// linking rint.o

// Xrint is defined at rint.c:12:8
func Xrint(tls TLS, _x float64) (r float64) {
	esc := MustMalloc(8)
	var (
		_u = esc // *struct{Ff [0]float64;Fi [0]uint64;F int64}
		_e int32
		_s int32
		_y float64
	)
	defer Free(esc)
	*(*struct {
		Ff [0]float64
		Fi [0]uint64
		F  int64
	})(unsafe.Pointer(_u)) = *(*struct {
		Ff [0]float64
		Fi [0]uint64
		F  int64
	})(unsafe.Pointer(&struct{ f float64 }{_x}))
	_e = int32(*(*uint64)(unsafe.Pointer(_u)) >> (uint(52) % 64) & uint64(0x7ff))
	_s = int32(*(*uint64)(unsafe.Pointer(_u)) >> (uint(63) % 64))
	if _e < int32(1075) {
		goto _1
	}

	return _x

_1:
	if _s == 0 {
		goto _2
	}

	_y = float64(_x-x4toint) + x4toint
	goto _3

_2:
	_y = float64(_x+x4toint) - x4toint
_3:
	if _y != float64(0) {
		goto _4
	}

	if _s != 0 {
		return Nz64
	}

	return float64(0)

_4:
	return _y
}

type t472__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t472__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t58uint64_t = uint64

type t31double_t = float64

// xtoint Tdouble_t = float64, escapes: false, rint.c:10:23
var x4toint = float64(4.503599627370496e+15)

// linking rintf.o

// Xrintf is defined at rintf.c:14:7
func Xrintf(tls TLS, _x float32) (r float32) {
	esc := MustMalloc(4)
	var (
		_u = esc // *struct{Ff [0]float32;Fi [0]uint32;F int32}
		_e int32
		_s int32
		_y float32
	)
	defer Free(esc)
	*(*struct {
		Ff [0]float32
		Fi [0]uint32
		F  int32
	})(unsafe.Pointer(_u)) = *(*struct {
		Ff [0]float32
		Fi [0]uint32
		F  int32
	})(unsafe.Pointer(&struct{ f float32 }{_x}))
	_e = int32(*(*uint32)(unsafe.Pointer(_u)) >> (uint(23) % 32) & uint32(0xff))
	_s = int32(*(*uint32)(unsafe.Pointer(_u)) >> (uint(31) % 32))
	if _e < int32(150) {
		goto _1
	}

	return _x

_1:
	if _s == 0 {
		goto _2
	}

	_y = float32(_x-x5toint) + x5toint
	goto _3

_2:
	_y = float32(_x+x5toint) - x5toint
_3:
	if _y != float32(0) {
		goto _4
	}

	if _s != 0 {
		return Nz32
	}

	return float32(0)

_4:
	return _y
}

type t473__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t473__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t88uint32_t = uint32

type t14float_t = float32

// xtoint Tfloat_t = float32, escapes: false, rintf.c:12:22
var x5toint = float32(8.388608e+06)

// linking rintl.o

// Xrintl is defined at rintl.c:4:13
func Xrintl(tls TLS, _x float64) (r float64) {
	return Xrint(tls, _x)
}

type t474__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t474__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// linking round.o

// Xround is defined at round.c:10:8
func Xround(tls TLS, _x float64) (r float64) {
	esc := MustMalloc(8)
	var (
		_u    = esc // *struct{Ff [0]float64;Fi [0]uint64;F int64}
		_e    int32
		_y    float64
		___x  float32
		_     = ___x
		_1__x float64
		_     = _1__x
		_2__x float64
		_     = _2__x
	)
	defer Free(esc)
	*(*struct {
		Ff [0]float64
		Fi [0]uint64
		F  int64
	})(unsafe.Pointer(_u)) = *(*struct {
		Ff [0]float64
		Fi [0]uint64
		F  int64
	})(unsafe.Pointer(&struct{ f float64 }{_x}))
	_e = int32(*(*uint64)(unsafe.Pointer(_u)) >> (uint(52) % 64) & uint64(0x7ff))
	if _e < int32(1075) {
		goto _1
	}

	return _x

_1:
	if (*(*uint64)(unsafe.Pointer(_u)) >> (uint(63) % 64)) == 0 {
		goto _2
	}

	_x = -_x
_2:
	if _e >= int32(1022) {
		goto _3
	}

	goto _5

	___x = float32(_x + x6toint)
	goto _6

_5:
	_1__x = _x + x6toint
	goto _7

	_2__x = _x + x6toint
_7:
_6:
	return float64(0) * *(*float64)(unsafe.Pointer(_u))

_3:
	_y = float64(float64(_x+x6toint)-x6toint) - _x
	if _y <= float64(0.5) {
		goto _8
	}

	_y = float64(_y+_x) - float64(1)
	goto _9

_8:
	if _y > float64(-0.5) {
		goto _10
	}

	_y = float64(_y+_x) + float64(1)
	goto _11

_10:
	_y = _y + _x
_11:
_9:
	if (*(*uint64)(unsafe.Pointer(_u)) >> (uint(63) % 64)) == 0 {
		goto _12
	}

	_y = -_y
_12:
	return _y
}

type t475__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t475__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t59uint64_t = uint64

type t32double_t = float64

// xtoint Tdouble_t = float64, escapes: false, round.c:8:23
var x6toint = float64(4.503599627370496e+15)

// linking roundf.o

// Xroundf is defined at roundf.c:12:7
func Xroundf(tls TLS, _x float32) (r float32) {
	esc := MustMalloc(4)
	var (
		_u    = esc // *struct{Ff [0]float32;Fi [0]uint32;F int32}
		_e    int32
		_y    float32
		___x  float32
		_     = ___x
		_1__x float64
		_     = _1__x
		_2__x float64
		_     = _2__x
	)
	defer Free(esc)
	*(*struct {
		Ff [0]float32
		Fi [0]uint32
		F  int32
	})(unsafe.Pointer(_u)) = *(*struct {
		Ff [0]float32
		Fi [0]uint32
		F  int32
	})(unsafe.Pointer(&struct{ f float32 }{_x}))
	_e = int32(*(*uint32)(unsafe.Pointer(_u)) >> (uint(23) % 32) & uint32(0xff))
	if _e < int32(150) {
		goto _1
	}

	return _x

_1:
	if (*(*uint32)(unsafe.Pointer(_u)) >> (uint(31) % 32)) == 0 {
		goto _2
	}

	_x = -_x
_2:
	if _e >= int32(126) {
		goto _3
	}

	___x = _x + x7toint
	goto _5

	goto _6

	_1__x = float64(_x + x7toint)
	goto _7

_6:
	_2__x = float64(_x + x7toint)
_7:
_5:
	return float32(0) * *(*float32)(unsafe.Pointer(_u))

_3:
	_y = float32(float32(_x+x7toint)-x7toint) - _x
	if _y <= float32(0.5) {
		goto _8
	}

	_y = float32(_y+_x) - float32(1)
	goto _9

_8:
	if _y > float32(-0.5) {
		goto _10
	}

	_y = float32(_y+_x) + float32(1)
	goto _11

_10:
	_y = _y + _x
_11:
_9:
	if (*(*uint32)(unsafe.Pointer(_u)) >> (uint(31) % 32)) == 0 {
		goto _12
	}

	_y = -_y
_12:
	return _y
}

type t476__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t476__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t89uint32_t = uint32

type t15float_t = float32

// xtoint Tfloat_t = float32, escapes: false, roundf.c:10:22
var x7toint = float32(8.388608e+06)

// linking roundl.o

// Xroundl is defined at roundl.c:4:13
func Xroundl(tls TLS, _x float64) (r float64) {
	return Xround(tls, _x)
}

type t477__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t477__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// linking scalb.o

// Xscalb is defined at scalb.c:21:8
func Xscalb(tls TLS, _x float64, _fn float64) (r float64) {
	if x17__DOUBLE_BITS(tls, _x)&uint64(9223372036854775807) <= uint64(9218868437227405312) && x17__DOUBLE_BITS(tls, _fn)&uint64(9223372036854775807) <= uint64(9218868437227405312) {
		goto _1
	}

	return _x * _fn

_1:
	if x17__DOUBLE_BITS(tls, _fn)&uint64(9223372036854775807) < uint64(9218868437227405312) {
		goto _2
	}

	if _fn <= float64(0) {
		goto _3
	}

	return _x * _fn

	goto _4

_3:
	return _x / float64(-_fn)

_4:
_2:
	if Xrint(tls, _fn) == _fn {
		goto _5
	}

	return float64(_fn-_fn) / float64(_fn-_fn)

_5:
	if _fn <= float64(65000) {
		goto _6
	}

	return Xscalbn(tls, _x, int32(65000))

_6:
	if float64(-_fn) <= float64(65000) {
		goto _7
	}

	return Xscalbn(tls, _x, int32(-65000))

_7:
	return Xscalbn(tls, _x, int32(_fn))
}

type t478__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t478__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// x__DOUBLE_BITS is defined at math.h:49:36
func x17__DOUBLE_BITS(tls TLS, ___f float64) (r uint64) {
	esc := MustMalloc(8)
	var ___u = esc // *struct{F__f [0]float64;F__i [0]uint64;F int64}
	defer Free(esc)
	*(*float64)(unsafe.Pointer(___u)) = ___f
	return *(*uint64)(unsafe.Pointer(___u))
}

// linking scalbf.o

// Xscalbf is defined at scalbf.c:19:7
func Xscalbf(tls TLS, _x float32, _fn float32) (r float32) {
	if x14__FLOAT_BITS(tls, _x)&uint32(0x7fffffff) <= uint32(0x7f800000) && x14__FLOAT_BITS(tls, _fn)&uint32(0x7fffffff) <= uint32(0x7f800000) {
		goto _1
	}

	return _x * _fn

_1:
	if x14__FLOAT_BITS(tls, _fn)&uint32(0x7fffffff) < uint32(0x7f800000) {
		goto _2
	}

	if _fn <= float32(0) {
		goto _3
	}

	return _x * _fn

	goto _4

_3:
	return _x / float32(-_fn)

_4:
_2:
	if Xrintf(tls, _fn) == _fn {
		goto _5
	}

	return float32(_fn-_fn) / float32(_fn-_fn)

_5:
	if _fn <= float32(65000) {
		goto _6
	}

	return Xscalbnf(tls, _x, int32(65000))

_6:
	if float32(-_fn) <= float32(65000) {
		goto _7
	}

	return Xscalbnf(tls, _x, int32(-65000))

_7:
	return Xscalbnf(tls, _x, int32(_fn))
}

type t479__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t479__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// x__FLOAT_BITS is defined at math.h:43:26
func x14__FLOAT_BITS(tls TLS, ___f float32) (r uint32) {
	esc := MustMalloc(4)
	var ___u = esc // *struct{F__f [0]float32;F__i [0]uint32;F int32}
	defer Free(esc)
	*(*float32)(unsafe.Pointer(___u)) = ___f
	return *(*uint32)(unsafe.Pointer(___u))
}

// linking scalbln.o

// Xscalbln is defined at scalbln.c:4:8
func Xscalbln(tls TLS, _x float64, _n int64) (r float64) {
	if _n <= int64(0x7fffffff) {
		goto _1
	}

	_n = int64(0x7fffffff)
	goto _2

_1:
	if _n >= int64(-2147483648) {
		goto _3
	}

	_n = int64(-2147483648)
_3:
_2:
	return Xscalbn(tls, _x, int32(_n))
}

type t480__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t480__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// linking scalblnf.o

// Xscalblnf is defined at scalblnf.c:4:7
func Xscalblnf(tls TLS, _x float32, _n int64) (r float32) {
	if _n <= int64(0x7fffffff) {
		goto _1
	}

	_n = int64(0x7fffffff)
	goto _2

_1:
	if _n >= int64(-2147483648) {
		goto _3
	}

	_n = int64(-2147483648)
_3:
_2:
	return Xscalbnf(tls, _x, int32(_n))
}

type t481__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t481__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// linking scalblnl.o

// Xscalblnl is defined at scalblnl.c:6:13
func Xscalblnl(tls TLS, _x float64, _n int64) (r float64) {
	return Xscalbln(tls, _x, _n)
}

type t482__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t482__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// linking scalbn.o

// Xscalbn is defined at scalbn.c:4:8
func Xscalbn(tls TLS, _x float64, _n int32) (r float64) {
	esc := MustMalloc(8)
	var (
		_u = esc // *struct{Ff [0]float64;Fi [0]uint64;F int64}
		_y float64
	)
	defer Free(esc)
	_y = _x
	if _n <= int32(1023) {
		goto _1
	}

	_y = _y * float64(8.98846567431158e+307)
	_n = _n - int32(1023)
	if _n <= int32(1023) {
		goto _3
	}

	_y = _y * float64(8.98846567431158e+307)
	_n = _n - int32(1023)
	if _n <= int32(1023) {
		goto _4
	}

	_n = int32(1023)
_4:
_3:
	goto _2

_1:
	if _n >= int32(-1022) {
		goto _5
	}

	_y = _y * float64(2.004168360008973e-292)
	_n = _n + int32(969)
	if _n >= int32(-1022) {
		goto _6
	}

	_y = _y * float64(2.004168360008973e-292)
	_n = _n + int32(969)
	if _n >= int32(-1022) {
		goto _7
	}

	_n = int32(-1022)
_7:
_6:
_5:
_2:
	*(*uint64)(unsafe.Pointer(_u)) = uint64(int32(0x3ff)+_n) << (uint(52) % 64)
	_x = _y * *(*float64)(unsafe.Pointer(_u))
	return _x
}

type t483__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t483__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t60uint64_t = uint64

type t33double_t = float64

// linking scalbnf.o

// Xscalbnf is defined at scalbnf.c:4:7
func Xscalbnf(tls TLS, _x float32, _n int32) (r float32) {
	esc := MustMalloc(4)
	var (
		_u = esc // *struct{Ff [0]float32;Fi [0]uint32;F int32}
		_y float32
	)
	defer Free(esc)
	_y = _x
	if _n <= int32(127) {
		goto _1
	}

	_y = _y * float32(1.7014118e+38)
	_n = _n - int32(127)
	if _n <= int32(127) {
		goto _3
	}

	_y = _y * float32(1.7014118e+38)
	_n = _n - int32(127)
	if _n <= int32(127) {
		goto _4
	}

	_n = int32(127)
_4:
_3:
	goto _2

_1:
	if _n >= int32(-126) {
		goto _5
	}

	_y = _y * float32(1.9721523e-31)
	_n = _n + int32(102)
	if _n >= int32(-126) {
		goto _6
	}

	_y = _y * float32(1.9721523e-31)
	_n = _n + int32(102)
	if _n >= int32(-126) {
		goto _7
	}

	_n = int32(-126)
_7:
_6:
_5:
_2:
	*(*uint32)(unsafe.Pointer(_u)) = uint32(int32(0x7f)+_n) << (uint(23) % 32)
	_x = _y * *(*float32)(unsafe.Pointer(_u))
	return _x
}

type t484__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t484__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t90uint32_t = uint32

type t16float_t = float32

// linking scalbnl.o

// Xscalbnl is defined at scalbnl.c:4:13
func Xscalbnl(tls TLS, _x float64, _n int32) (r float64) {
	return Xscalbn(tls, _x, _n)
}

type t485__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t485__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// linking signgam.o

// X__signgam int32, escapes: true, signgam.c:4:5
var X__signgam = bss + 2296

type t486__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t486__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// linking significand.o

// Xsignificand is defined at significand.c:4:8
func Xsignificand(tls TLS, _x float64) (r float64) {
	return Xscalbn(tls, _x, -Xilogb(tls, _x))
}

type t487__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t487__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// linking significandf.o

// Xsignificandf is defined at significandf.c:4:7
func Xsignificandf(tls TLS, _x float32) (r float32) {
	return Xscalbnf(tls, _x, -Xilogbf(tls, _x))
}

type t488__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t488__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// linking sin.o

// Xsin is defined at sin.c:45:8
func Xsin(tls TLS, _x float64) (r float64) {
	esc := MustMalloc(24)
	var (
		_y    = esc // *[2]float64
		_ix   uint32
		_n    uint32
		___u  = esc + 16 // *struct{Ff [0]float64;Fi [0]uint64;F int64}
		___x  float32
		_     = ___x
		_1__x float64
		_     = _1__x
		_2__x float64
		_     = _2__x
	)
	defer Free(esc)
	*(*float64)(unsafe.Pointer(___u)) = _x
	_ix = uint32(*(*uint64)(unsafe.Pointer(___u)) >> (uint(32) % 64))
	_ix = _ix & uint32(0x7fffffff)
	if _ix > uint32(0x3fe921fb) {
		goto _2
	}

	if _ix >= uint32(0x3e500000) {
		goto _3
	}

	goto _5

	___x = float32(func() float64 {
		if _ix < uint32(0x100000) {
			return _x / float64(1.329227995784916e+36)
		}
		return _x + float64(1.329227995784916e+36)
	}())
	goto _6

_5:
	_1__x = func() float64 {
		if _ix < uint32(0x100000) {
			return _x / float64(1.329227995784916e+36)
		}
		return _x + float64(1.329227995784916e+36)
	}()
	goto _7

	_2__x = func() float64 {
		if _ix < uint32(0x100000) {
			return _x / float64(1.329227995784916e+36)
		}
		return _x + float64(1.329227995784916e+36)
	}()
_7:
_6:
	return _x

_3:
	return X__sin(tls, _x, float64(0), int32(0))

_2:
	if _ix < uint32(0x7ff00000) {
		goto _8
	}

	return _x - _x

_8:
	_n = uint32(X__rem_pio2(tls, _x, _y))
	switch _n & uint32(3) {
	case uint32(0):
		goto _10
	case uint32(1):
		goto _11
	case uint32(2):
		goto _12
	default:
		goto _13
	}
_10:
	return X__sin(tls, *(*float64)(unsafe.Pointer(_y)), *(*float64)(unsafe.Pointer(_y + 8)), int32(1))

_11:
	return X__cos(tls, *(*float64)(unsafe.Pointer(_y)), *(*float64)(unsafe.Pointer(_y + 8)))

_12:
	return -X__sin(tls, *(*float64)(unsafe.Pointer(_y)), *(*float64)(unsafe.Pointer(_y + 8)), int32(1))

_13:
	return -X__cos(tls, *(*float64)(unsafe.Pointer(_y)), *(*float64)(unsafe.Pointer(_y + 8)))
	return r
}

type t489__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t489__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t91uint32_t = uint32

type t61uint64_t = uint64

// linking sincos.o

func set596(p *float64, v float64) float64 { *p = v; return v }

// Xsincos is defined at sincos.c:16:6
func Xsincos(tls TLS, _x float64, _sin uintptr /* *float64 */, _cos uintptr /* *float64 */) {
	esc := MustMalloc(24)
	var (
		_y    = esc // *[2]float64
		_s    float64
		_c    float64
		_ix   uint32
		_n    uint32
		___u  = esc + 16 // *struct{Ff [0]float64;Fi [0]uint64;F int64}
		___x  float32
		_     = ___x
		_1__x float64
		_     = _1__x
		_2__x float64
		_     = _2__x
	)
	defer Free(esc)
	*(*float64)(unsafe.Pointer(___u)) = _x
	_ix = uint32(*(*uint64)(unsafe.Pointer(___u)) >> (uint(32) % 64))
	_ix = _ix & uint32(0x7fffffff)
	if _ix > uint32(0x3fe921fb) {
		goto _2
	}

	if _ix >= uint32(0x3e46a09e) {
		goto _3
	}

	goto _5

	___x = float32(func() float64 {
		if _ix < uint32(0x100000) {
			return _x / float64(1.329227995784916e+36)
		}
		return _x + float64(1.329227995784916e+36)
	}())
	goto _6

_5:
	_1__x = func() float64 {
		if _ix < uint32(0x100000) {
			return _x / float64(1.329227995784916e+36)
		}
		return _x + float64(1.329227995784916e+36)
	}()
	goto _7

	_2__x = func() float64 {
		if _ix < uint32(0x100000) {
			return _x / float64(1.329227995784916e+36)
		}
		return _x + float64(1.329227995784916e+36)
	}()
_7:
_6:
	*(*float64)(unsafe.Pointer(_sin)) = _x
	*(*float64)(unsafe.Pointer(_cos)) = float64(1)
	return

_3:
	*(*float64)(unsafe.Pointer(_sin)) = X__sin(tls, _x, float64(0), int32(0))
	*(*float64)(unsafe.Pointer(_cos)) = X__cos(tls, _x, float64(0))
	return

_2:
	if _ix < uint32(0x7ff00000) {
		goto _8
	}

	*(*float64)(unsafe.Pointer(_sin)) = set596((*float64)(unsafe.Pointer(_cos)), _x-_x)
	return

_8:
	_n = uint32(X__rem_pio2(tls, _x, _y))
	_s = X__sin(tls, *(*float64)(unsafe.Pointer(_y)), *(*float64)(unsafe.Pointer(_y + 8)), int32(1))
	_c = X__cos(tls, *(*float64)(unsafe.Pointer(_y)), *(*float64)(unsafe.Pointer(_y + 8)))
	switch _n & uint32(3) {
	case uint32(0):
		goto _10
	case uint32(1):
		goto _11
	case uint32(2):
		goto _12
	case uint32(3):
		goto _13
	default:
		goto _14
	}
_10:
	*(*float64)(unsafe.Pointer(_sin)) = _s
	*(*float64)(unsafe.Pointer(_cos)) = _c
	goto _9

_11:
	*(*float64)(unsafe.Pointer(_sin)) = _c
	*(*float64)(unsafe.Pointer(_cos)) = -_s
	goto _9

_12:
	*(*float64)(unsafe.Pointer(_sin)) = -_s
	*(*float64)(unsafe.Pointer(_cos)) = -_c
	goto _9

_13:
_14:
	*(*float64)(unsafe.Pointer(_sin)) = -_c
	*(*float64)(unsafe.Pointer(_cos)) = _s
	goto _9

_9:
}

type t490__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t490__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t92uint32_t = uint32

type t62uint64_t = uint64

// linking sincosf.o

func set597(p *float32, v float32) float32 { *p = v; return v }

// Xsincosf is defined at sincosf.c:27:6
func Xsincosf(tls TLS, _x float32, _sin uintptr /* *float32 */, _cos uintptr /* *float32 */) {
	esc := MustMalloc(20)
	var (
		_y    = esc // *float64
		_s    float32
		_c    float32
		_ix   uint32
		_n    uint32
		_sign uint32
		___u  = esc + 16 // *struct{Ff [0]float32;Fi [0]uint32;F int32}
		___x  float32
		_     = ___x
		_1__x float64
		_     = _1__x
		_2__x float64
		_     = _2__x
	)
	defer Free(esc)
	*(*float32)(unsafe.Pointer(___u)) = _x
	_ix = *(*uint32)(unsafe.Pointer(___u))
	_sign = _ix >> (uint(31) % 32)
	_ix = _ix & uint32(0x7fffffff)
	if _ix > uint32(0x3f490fda) {
		goto _2
	}

	if _ix >= uint32(0x39800000) {
		goto _3
	}

	___x = func() float32 {
		if _ix < uint32(0x100000) {
			return _x / float32(1.329228e+36)
		}
		return _x + float32(1.329228e+36)
	}()
	goto _5

	goto _6

	_1__x = float64(func() float32 {
		if _ix < uint32(0x100000) {
			return _x / float32(1.329228e+36)
		}
		return _x + float32(1.329228e+36)
	}())
	goto _7

_6:
	_2__x = float64(func() float32 {
		if _ix < uint32(0x100000) {
			return _x / float32(1.329228e+36)
		}
		return _x + float32(1.329228e+36)
	}())
_7:
_5:
	*(*float32)(unsafe.Pointer(_sin)) = _x
	*(*float32)(unsafe.Pointer(_cos)) = float32(1)
	return

_3:
	*(*float32)(unsafe.Pointer(_sin)) = X__sindf(tls, float64(_x))
	*(*float32)(unsafe.Pointer(_cos)) = X__cosdf(tls, float64(_x))
	return

_2:
	if _ix > uint32(0x407b53d1) {
		goto _8
	}

	if _ix > uint32(0x4016cbe3) {
		goto _9
	}

	if _sign == 0 {
		goto _10
	}

	*(*float32)(unsafe.Pointer(_sin)) = -X__cosdf(tls, float64(_x)+xs1pio2)
	*(*float32)(unsafe.Pointer(_cos)) = X__sindf(tls, float64(_x)+xs1pio2)
	goto _11

_10:
	*(*float32)(unsafe.Pointer(_sin)) = X__cosdf(tls, xs1pio2-float64(_x))
	*(*float32)(unsafe.Pointer(_cos)) = X__sindf(tls, xs1pio2-float64(_x))
_11:
	return

_9:
	*(*float32)(unsafe.Pointer(_sin)) = -X__sindf(tls, func() float64 {
		if _sign != 0 {
			return float64(_x) + xs2pio2
		}
		return float64(_x) - xs2pio2
	}())
	*(*float32)(unsafe.Pointer(_cos)) = -X__cosdf(tls, func() float64 {
		if _sign != 0 {
			return float64(_x) + xs2pio2
		}
		return float64(_x) - xs2pio2
	}())
	return

_8:
	if _ix > uint32(0x40e231d5) {
		goto _12
	}

	if _ix > uint32(0x40afeddf) {
		goto _13
	}

	if _sign == 0 {
		goto _14
	}

	*(*float32)(unsafe.Pointer(_sin)) = X__cosdf(tls, float64(_x)+xs3pio2)
	*(*float32)(unsafe.Pointer(_cos)) = -X__sindf(tls, float64(_x)+xs3pio2)
	goto _15

_14:
	*(*float32)(unsafe.Pointer(_sin)) = -X__cosdf(tls, float64(_x)-xs3pio2)
	*(*float32)(unsafe.Pointer(_cos)) = X__sindf(tls, float64(_x)-xs3pio2)
_15:
	return

_13:
	*(*float32)(unsafe.Pointer(_sin)) = X__sindf(tls, func() float64 {
		if _sign != 0 {
			return float64(_x) + xs4pio2
		}
		return float64(_x) - xs4pio2
	}())
	*(*float32)(unsafe.Pointer(_cos)) = X__cosdf(tls, func() float64 {
		if _sign != 0 {
			return float64(_x) + xs4pio2
		}
		return float64(_x) - xs4pio2
	}())
	return

_12:
	if _ix < uint32(0x7f800000) {
		goto _16
	}

	*(*float32)(unsafe.Pointer(_sin)) = set597((*float32)(unsafe.Pointer(_cos)), _x-_x)
	return

_16:
	_n = uint32(X__rem_pio2f(tls, _x, _y))
	_s = X__sindf(tls, *(*float64)(unsafe.Pointer(_y)))
	_c = X__cosdf(tls, *(*float64)(unsafe.Pointer(_y)))
	switch _n & uint32(3) {
	case uint32(0):
		goto _18
	case uint32(1):
		goto _19
	case uint32(2):
		goto _20
	case uint32(3):
		goto _21
	default:
		goto _22
	}
_18:
	*(*float32)(unsafe.Pointer(_sin)) = _s
	*(*float32)(unsafe.Pointer(_cos)) = _c
	goto _17

_19:
	*(*float32)(unsafe.Pointer(_sin)) = _c
	*(*float32)(unsafe.Pointer(_cos)) = -_s
	goto _17

_20:
	*(*float32)(unsafe.Pointer(_sin)) = -_s
	*(*float32)(unsafe.Pointer(_cos)) = -_c
	goto _17

_21:
_22:
	*(*float32)(unsafe.Pointer(_sin)) = -_c
	*(*float32)(unsafe.Pointer(_cos)) = _s
	goto _17

_17:
}

type t491__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t491__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t17float_t = float32

type t93uint32_t = uint32

// xs1pio2 float64, escapes: false, sincosf.c:22:1
var xs1pio2 = float64(1.5707963267948966)

// xs2pio2 float64, escapes: false, sincosf.c:23:1
var xs2pio2 = float64(3.141592653589793)

// xs3pio2 float64, escapes: false, sincosf.c:24:1
var xs3pio2 = float64(4.71238898038469)

// xs4pio2 float64, escapes: false, sincosf.c:25:1
var xs4pio2 = float64(6.283185307179586)

// linking sincosl.o

// Xsincosl is defined at sincosl.c:5:6
func Xsincosl(tls TLS, _x float64, _sin uintptr /* *float64 */, _cos uintptr /* *float64 */) {
	esc := MustMalloc(24)
	var (
		_sind = esc      // *float64
		_cosd = esc + 16 // *float64
	)
	defer Free(esc)
	Xsincos(tls, _x, _sind, _cosd)
	*(*float64)(unsafe.Pointer(_sin)) = *(*float64)(unsafe.Pointer(_sind))
	*(*float64)(unsafe.Pointer(_cos)) = *(*float64)(unsafe.Pointer(_cosd))
}

type t492__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t492__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// linking sinf.o

// Xsinf is defined at sinf.c:26:7
func Xsinf(tls TLS, _x float32) (r float32) {
	esc := MustMalloc(20)
	var (
		_y    = esc // *float64
		_ix   uint32
		_n    int32
		_sign int32
		___u  = esc + 16 // *struct{Ff [0]float32;Fi [0]uint32;F int32}
		___x  float32
		_     = ___x
		_1__x float64
		_     = _1__x
		_2__x float64
		_     = _2__x
	)
	defer Free(esc)
	*(*float32)(unsafe.Pointer(___u)) = _x
	_ix = *(*uint32)(unsafe.Pointer(___u))
	_sign = int32(_ix >> (uint(31) % 32))
	_ix = _ix & uint32(0x7fffffff)
	if _ix > uint32(0x3f490fda) {
		goto _2
	}

	if _ix >= uint32(0x39800000) {
		goto _3
	}

	___x = func() float32 {
		if _ix < uint32(0x800000) {
			return _x / float32(1.329228e+36)
		}
		return _x + float32(1.329228e+36)
	}()
	goto _5

	goto _6

	_1__x = float64(func() float32 {
		if _ix < uint32(0x800000) {
			return _x / float32(1.329228e+36)
		}
		return _x + float32(1.329228e+36)
	}())
	goto _7

_6:
	_2__x = float64(func() float32 {
		if _ix < uint32(0x800000) {
			return _x / float32(1.329228e+36)
		}
		return _x + float32(1.329228e+36)
	}())
_7:
_5:
	return _x

_3:
	return X__sindf(tls, float64(_x))

_2:
	if _ix > uint32(0x407b53d1) {
		goto _8
	}

	if _ix > uint32(0x4016cbe3) {
		goto _9
	}

	if _sign == 0 {
		goto _10
	}

	return -X__cosdf(tls, float64(_x)+x1s1pio2)

	goto _11

_10:
	return X__cosdf(tls, float64(_x)-x1s1pio2)

_11:
_9:
	return X__sindf(tls, func() float64 {
		if _sign != 0 {
			return -float64(float64(_x) + x1s2pio2)
		}
		return -float64(float64(_x) - x1s2pio2)
	}())

_8:
	if _ix > uint32(0x40e231d5) {
		goto _12
	}

	if _ix > uint32(0x40afeddf) {
		goto _13
	}

	if _sign == 0 {
		goto _14
	}

	return X__cosdf(tls, float64(_x)+x1s3pio2)

	goto _15

_14:
	return -X__cosdf(tls, float64(_x)-x1s3pio2)

_15:
_13:
	return X__sindf(tls, func() float64 {
		if _sign != 0 {
			return float64(_x) + x1s4pio2
		}
		return float64(_x) - x1s4pio2
	}())

_12:
	if _ix < uint32(0x7f800000) {
		goto _16
	}

	return _x - _x

_16:
	_n = X__rem_pio2f(tls, _x, _y)
	switch _n & int32(3) {
	case int32(0):
		goto _18
	case int32(1):
		goto _19
	case int32(2):
		goto _20
	default:
		goto _21
	}
_18:
	return X__sindf(tls, *(*float64)(unsafe.Pointer(_y)))

_19:
	return X__cosdf(tls, *(*float64)(unsafe.Pointer(_y)))

_20:
	return X__sindf(tls, -*(*float64)(unsafe.Pointer(_y)))

_21:
	return -X__cosdf(tls, *(*float64)(unsafe.Pointer(_y)))
	return r
}

type t493__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t493__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t94uint32_t = uint32

// xs1pio2 float64, escapes: false, sinf.c:21:1
var x1s1pio2 = float64(1.5707963267948966)

// xs2pio2 float64, escapes: false, sinf.c:22:1
var x1s2pio2 = float64(3.141592653589793)

// xs3pio2 float64, escapes: false, sinf.c:23:1
var x1s3pio2 = float64(4.71238898038469)

// xs4pio2 float64, escapes: false, sinf.c:24:1
var x1s4pio2 = float64(6.283185307179586)

// linking sinh.o

// Xsinh is defined at sinh.c:7:8
func Xsinh(tls TLS, _x float64) (r float64) {
	esc := MustMalloc(8)
	var (
		_u    = esc // *struct{Ff [0]float64;Fi [0]uint64;F int64}
		_w    uint32
		_t    float64
		_h    float64
		_absx float64
	)
	defer Free(esc)
	*(*struct {
		Ff [0]float64
		Fi [0]uint64
		F  int64
	})(unsafe.Pointer(_u)) = *(*struct {
		Ff [0]float64
		Fi [0]uint64
		F  int64
	})(unsafe.Pointer(&struct{ f float64 }{_x}))
	_h = float64(0.5)
	if (*(*uint64)(unsafe.Pointer(_u)) >> (uint(63) % 64)) == 0 {
		goto _1
	}

	_h = -_h
_1:
	{
		p := (*uint64)(unsafe.Pointer(_u))
		*p = *p & uint64(9223372036854775807)
	}
	_absx = *(*float64)(unsafe.Pointer(_u))
	_w = uint32(*(*uint64)(unsafe.Pointer(_u)) >> (uint(32) % 64))
	if _w >= uint32(0x40862e42) {
		goto _2
	}

	_t = Xexpm1(tls, _absx)
	if _w >= uint32(0x3ff00000) {
		goto _3
	}

	if _w >= uint32(1045430272) {
		goto _4
	}

	return _x

_4:
	return _h * float64(float64(float64(2)*_t)-float64(float64(_t*_t)/float64(_t+float64(1))))

_3:
	return _h * float64(_t+float64(_t/float64(_t+float64(1))))

_2:
	_t = float64(float64(2)*_h) * X__expo2(tls, _absx)
	return _t
}

type t494__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t494__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t63uint64_t = uint64

type t95uint32_t = uint32

// linking sinhf.o

// Xsinhf is defined at sinhf.c:3:7
func Xsinhf(tls TLS, _x float32) (r float32) {
	esc := MustMalloc(4)
	var (
		_u    = esc // *struct{Ff [0]float32;Fi [0]uint32;F int32}
		_w    uint32
		_t    float32
		_h    float32
		_absx float32
	)
	defer Free(esc)
	*(*struct {
		Ff [0]float32
		Fi [0]uint32
		F  int32
	})(unsafe.Pointer(_u)) = *(*struct {
		Ff [0]float32
		Fi [0]uint32
		F  int32
	})(unsafe.Pointer(&struct{ f float32 }{_x}))
	_h = float32(0.5)
	if (*(*uint32)(unsafe.Pointer(_u)) >> (uint(31) % 32)) == 0 {
		goto _1
	}

	_h = -_h
_1:
	{
		p := (*uint32)(unsafe.Pointer(_u))
		*p = *p & uint32(0x7fffffff)
	}
	_absx = *(*float32)(unsafe.Pointer(_u))
	_w = *(*uint32)(unsafe.Pointer(_u))
	if _w >= uint32(0x42b17217) {
		goto _2
	}

	_t = Xexpm1f(tls, _absx)
	if _w >= uint32(0x3f800000) {
		goto _3
	}

	if _w >= uint32(964689920) {
		goto _4
	}

	return _x

_4:
	return _h * float32(float32(float32(2)*_t)-float32(float32(_t*_t)/float32(_t+float32(1))))

_3:
	return _h * float32(_t+float32(_t/float32(_t+float32(1))))

_2:
	_t = float32(float32(2)*_h) * X__expo2f(tls, _absx)
	return _t
}

type t495__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t495__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t96uint32_t = uint32

// linking sinhl.o

// Xsinhl is defined at sinhl.c:4:13
func Xsinhl(tls TLS, _x float64) (r float64) {
	return Xsinh(tls, _x)
}

type t496__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t496__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// linking sinl.o

// Xsinl is defined at sinl.c:4:13
func Xsinl(tls TLS, _x float64) (r float64) {
	return Xsin(tls, _x)
}

type t497__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t497__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// linking sqrt.o

func set598(p *uint32, v uint32) uint32 { *p = v; return v }

func set599(p *int32, v int32) int32 { *p = v; return v }

// Xsqrt is defined at sqrt.c:83:8
func Xsqrt(tls TLS, _x float64) (r float64) {
	esc := MustMalloc(24)
	var (
		_z    float64
		_sign int32
		_ix0  int32
		_s0   int32
		_q    int32
		_m    int32
		_t    int32
		_i    int32
		_r    uint32
		_t1   uint32
		_s1   uint32
		_ix1  uint32
		_q1   uint32
		___u  = esc      // *struct{Ff [0]float64;Fi [0]uint64;F int64}
		_1__u = esc + 16 // *struct{Ff [0]float64;Fi [0]uint64;F int64}
	)
	defer Free(esc)
	_sign = int32(-0x80000000)
	*(*float64)(unsafe.Pointer(___u)) = _x
	_ix0 = int32(*(*uint64)(unsafe.Pointer(___u)) >> (uint(32) % 64))
	_ix1 = uint32(*(*uint64)(unsafe.Pointer(___u)))
	if _ix0&int32(0x7ff00000) != int32(0x7ff00000) {
		goto _2
	}

	return float64(_x*_x) + _x

_2:
	if _ix0 > int32(0) {
		goto _3
	}

	if uint32(_ix0 & ^_sign)|_ix1 != uint32(0) {
		goto _4
	}

	return _x

_4:
	if _ix0 >= int32(0) {
		goto _5
	}

	return float64(_x-_x) / float64(_x-_x)

_5:
_3:
	_m = _ix0 >> (uint(20) % 32)
	if _m != int32(0) {
		goto _6
	}

_7:
	if _ix0 != int32(0) {
		goto _8
	}

	_m = _m - int32(21)
	_ix0 = int32(uint32(_ix0) | _ix1>>(uint(11)%32))
	_ix1 = _ix1 << uint32(21)
	goto _7

_8:
	_i = int32(0)
_9:
	if _ix0&int32(0x100000) != int32(0) {
		goto _11
	}

	_ix0 = _ix0 << uint32(1)
	_i++
	goto _9

_11:
	_m = _m - (_i - int32(1))
	_ix0 = int32(uint32(_ix0) | _ix1>>(uint(int32(32)-_i)%32))
	_ix1 = _ix1 << uint32(_i)
_6:
	_m = _m - int32(1023)
	_ix0 = _ix0&int32(0xfffff) | int32(0x100000)
	if (_m & int32(1)) == 0 {
		goto _12
	}

	_ix0 = int32(uint32(_ix0) + (uint32(_ix0) + _ix1&uint32(_sign)>>(uint(31)%32)))
	_ix1 = _ix1 + _ix1
_12:
	_m = _m >> uint32(1)
	_ix0 = int32(uint32(_ix0) + (uint32(_ix0) + _ix1&uint32(_sign)>>(uint(31)%32)))
	_ix1 = _ix1 + _ix1
	_q = int32(set598(&_q1, uint32(set599(&_s0, int32(set598(&_s1, uint32(0)))))))
	_r = uint32(0x200000)
_13:
	if _r == uint32(0) {
		goto _14
	}

	_t = int32(uint32(_s0) + _r)
	if _t > _ix0 {
		goto _15
	}

	_s0 = int32(uint32(_t) + _r)
	_ix0 = _ix0 - _t
	_q = int32(uint32(_q) + _r)
_15:
	_ix0 = int32(uint32(_ix0) + (uint32(_ix0) + _ix1&uint32(_sign)>>(uint(31)%32)))
	_ix1 = _ix1 + _ix1
	_r = _r >> uint32(1)
	goto _13

_14:
	_r = uint32(_sign)
_16:
	if _r == uint32(0) {
		goto _17
	}

	_t1 = _s1 + _r
	_t = _s0
	if _t >= _ix0 && (_t != _ix0 || _t1 > _ix1) {
		goto _18
	}

	_s1 = _t1 + _r
	if _t1&uint32(_sign) != uint32(_sign) || _s1&uint32(_sign) != uint32(0) {
		goto _19
	}

	_s0++
_19:
	_ix0 = _ix0 - _t
	if _ix1 >= _t1 {
		goto _20
	}

	_ix0--
_20:
	_ix1 = _ix1 - _t1
	_q1 = _q1 + _r
_18:
	_ix0 = int32(uint32(_ix0) + (uint32(_ix0) + _ix1&uint32(_sign)>>(uint(31)%32)))
	_ix1 = _ix1 + _ix1
	_r = _r >> uint32(1)
	goto _16

_17:
	if uint32(_ix0)|_ix1 == uint32(0) {
		goto _21
	}

	_z = float64(1) - x2tiny
	if _z < float64(1) {
		goto _22
	}

	_z = float64(1) + x2tiny
	if _q1 != uint32(0xffffffff) {
		goto _23
	}

	_q1 = uint32(0)
	_q++
	goto _24

_23:
	if _z <= float64(1) {
		goto _25
	}

	if _q1 != uint32(0xfffffffe) {
		goto _27
	}

	_q++
_27:
	_q1 = _q1 + uint32(2)
	goto _26

_25:
	_q1 = _q1 + _q1&uint32(1)
_26:
_24:
_22:
_21:
	_ix0 = _q>>(uint(1)%32) + int32(0x3fe00000)
	_ix1 = _q1 >> (uint(1) % 32)
	if (_q & int32(1)) == 0 {
		goto _28
	}

	_ix1 = _ix1 | uint32(_sign)
_28:
	_ix0 = _ix0 + _m<<(uint(20)%32)
	*(*uint64)(unsafe.Pointer(_1__u)) = uint64(_ix0)<<(uint(32)%64) | uint64(_ix1)
	_z = *(*float64)(unsafe.Pointer(_1__u))
	return _z
}

type t498__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t498__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t12int32_t = int32

type t97uint32_t = uint32

type t64uint64_t = uint64

// xtiny float64, escapes: false, sqrt.c:81:21
var x2tiny = float64(1e-300)

// linking sqrtf.o

func set600(p *int32, v int32) int32 { *p = v; return v }

// Xsqrtf is defined at sqrtf.c:20:7
func Xsqrtf(tls TLS, _x float32) (r float32) {
	esc := MustMalloc(20)
	var (
		_z    float32
		_sign int32
		_ix   int32
		_s    int32
		_q    int32
		_m    int32
		_t    int32
		_i    int32
		_r    uint32
		___u  = esc      // *struct{Ff [0]float32;Fi [0]uint32;F int32}
		_1__u = esc + 16 // *struct{Ff [0]float32;Fi [0]uint32;F int32}
	)
	defer Free(esc)
	_sign = int32(-0x80000000)
	*(*float32)(unsafe.Pointer(___u)) = _x
	_ix = int32(*(*uint32)(unsafe.Pointer(___u)))
	if _ix&int32(0x7f800000) != int32(0x7f800000) {
		goto _2
	}

	return float32(_x*_x) + _x

_2:
	if _ix > int32(0) {
		goto _3
	}

	if _ix & ^_sign != int32(0) {
		goto _4
	}

	return _x

_4:
	if _ix >= int32(0) {
		goto _5
	}

	return float32(_x-_x) / float32(_x-_x)

_5:
_3:
	_m = _ix >> (uint(23) % 32)
	if _m != int32(0) {
		goto _6
	}

	_i = int32(0)
_7:
	if _ix&int32(0x800000) != int32(0) {
		goto _9
	}

	_ix = _ix << uint32(1)
	_i++
	goto _7

_9:
	_m = _m - (_i - int32(1))
_6:
	_m = _m - int32(127)
	_ix = _ix&int32(0x7fffff) | int32(0x800000)
	if (_m & int32(1)) == 0 {
		goto _10
	}

	_ix = _ix + _ix
_10:
	_m = _m >> uint32(1)
	_ix = _ix + _ix
	_q = set600(&_s, int32(0))
	_r = uint32(0x1000000)
_11:
	if _r == uint32(0) {
		goto _12
	}

	_t = int32(uint32(_s) + _r)
	if _t > _ix {
		goto _13
	}

	_s = int32(uint32(_t) + _r)
	_ix = _ix - _t
	_q = int32(uint32(_q) + _r)
_13:
	_ix = _ix + _ix
	_r = _r >> uint32(1)
	goto _11

_12:
	if _ix == int32(0) {
		goto _14
	}

	_z = float32(1) - x3tiny
	if _z < float32(1) {
		goto _15
	}

	_z = float32(1) + x3tiny
	if _z <= float32(1) {
		goto _16
	}

	_q = _q + int32(2)
	goto _17

_16:
	_q = _q + _q&int32(1)
_17:
_15:
_14:
	_ix = _q>>(uint(1)%32) + int32(0x3f000000)
	_ix = _ix + _m<<(uint(23)%32)
	*(*uint32)(unsafe.Pointer(_1__u)) = uint32(_ix)
	_z = *(*float32)(unsafe.Pointer(_1__u))
	return _z
}

type t499__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t499__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t13int32_t = int32

type t98uint32_t = uint32

// xtiny float32, escapes: false, sqrtf.c:18:20
var x3tiny = float32(1e-30)

// linking sqrtl.o

// Xsqrtl is defined at sqrtl.c:3:13
func Xsqrtl(tls TLS, _x float64) (r float64) {
	return Xsqrt(tls, _x)
}

type t500__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t500__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// linking tan.o

// Xtan is defined at tan.c:44:8
func Xtan(tls TLS, _x float64) (r float64) {
	esc := MustMalloc(24)
	var (
		_y    = esc // *[2]float64
		_ix   uint32
		_n    uint32
		___u  = esc + 16 // *struct{Ff [0]float64;Fi [0]uint64;F int64}
		___x  float32
		_     = ___x
		_1__x float64
		_     = _1__x
		_2__x float64
		_     = _2__x
	)
	defer Free(esc)
	*(*float64)(unsafe.Pointer(___u)) = _x
	_ix = uint32(*(*uint64)(unsafe.Pointer(___u)) >> (uint(32) % 64))
	_ix = _ix & uint32(0x7fffffff)
	if _ix > uint32(0x3fe921fb) {
		goto _2
	}

	if _ix >= uint32(0x3e400000) {
		goto _3
	}

	goto _5

	___x = float32(func() float64 {
		if _ix < uint32(0x100000) {
			return _x / float64(1.329227995784916e+36)
		}
		return _x + float64(1.329227995784916e+36)
	}())
	goto _6

_5:
	_1__x = func() float64 {
		if _ix < uint32(0x100000) {
			return _x / float64(1.329227995784916e+36)
		}
		return _x + float64(1.329227995784916e+36)
	}()
	goto _7

	_2__x = func() float64 {
		if _ix < uint32(0x100000) {
			return _x / float64(1.329227995784916e+36)
		}
		return _x + float64(1.329227995784916e+36)
	}()
_7:
_6:
	return _x

_3:
	return X__tan(tls, _x, float64(0), int32(0))

_2:
	if _ix < uint32(0x7ff00000) {
		goto _8
	}

	return _x - _x

_8:
	_n = uint32(X__rem_pio2(tls, _x, _y))
	return X__tan(tls, *(*float64)(unsafe.Pointer(_y)), *(*float64)(unsafe.Pointer(_y + 8)), int32(_n&uint32(1)))
}

type t501__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t501__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t99uint32_t = uint32

type t65uint64_t = uint64

// linking tanf.o

// Xtanf is defined at tanf.c:26:7
func Xtanf(tls TLS, _x float32) (r float32) {
	esc := MustMalloc(20)
	var (
		_y    = esc // *float64
		_ix   uint32
		_n    uint32
		_sign uint32
		___u  = esc + 16 // *struct{Ff [0]float32;Fi [0]uint32;F int32}
		___x  float32
		_     = ___x
		_1__x float64
		_     = _1__x
		_2__x float64
		_     = _2__x
	)
	defer Free(esc)
	*(*float32)(unsafe.Pointer(___u)) = _x
	_ix = *(*uint32)(unsafe.Pointer(___u))
	_sign = _ix >> (uint(31) % 32)
	_ix = _ix & uint32(0x7fffffff)
	if _ix > uint32(0x3f490fda) {
		goto _2
	}

	if _ix >= uint32(0x39800000) {
		goto _3
	}

	___x = func() float32 {
		if _ix < uint32(0x800000) {
			return _x / float32(1.329228e+36)
		}
		return _x + float32(1.329228e+36)
	}()
	goto _5

	goto _6

	_1__x = float64(func() float32 {
		if _ix < uint32(0x800000) {
			return _x / float32(1.329228e+36)
		}
		return _x + float32(1.329228e+36)
	}())
	goto _7

_6:
	_2__x = float64(func() float32 {
		if _ix < uint32(0x800000) {
			return _x / float32(1.329228e+36)
		}
		return _x + float32(1.329228e+36)
	}())
_7:
_5:
	return _x

_3:
	return X__tandf(tls, float64(_x), int32(0))

_2:
	if _ix > uint32(0x407b53d1) {
		goto _8
	}

	if _ix > uint32(0x4016cbe3) {
		goto _9
	}

	return X__tandf(tls, func() float64 {
		if _sign != 0 {
			return float64(_x) + xt1pio2
		}
		return float64(_x) - xt1pio2
	}(), int32(1))

	goto _10

_9:
	return X__tandf(tls, func() float64 {
		if _sign != 0 {
			return float64(_x) + xt2pio2
		}
		return float64(_x) - xt2pio2
	}(), int32(0))

_10:
_8:
	if _ix > uint32(0x40e231d5) {
		goto _11
	}

	if _ix > uint32(0x40afeddf) {
		goto _12
	}

	return X__tandf(tls, func() float64 {
		if _sign != 0 {
			return float64(_x) + xt3pio2
		}
		return float64(_x) - xt3pio2
	}(), int32(1))

	goto _13

_12:
	return X__tandf(tls, func() float64 {
		if _sign != 0 {
			return float64(_x) + xt4pio2
		}
		return float64(_x) - xt4pio2
	}(), int32(0))

_13:
_11:
	if _ix < uint32(0x7f800000) {
		goto _14
	}

	return _x - _x

_14:
	_n = uint32(X__rem_pio2f(tls, _x, _y))
	return X__tandf(tls, *(*float64)(unsafe.Pointer(_y)), int32(_n&uint32(1)))
}

type t502__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t502__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t100uint32_t = uint32

// xt1pio2 float64, escapes: false, tanf.c:21:1
var xt1pio2 = float64(1.5707963267948966)

// xt2pio2 float64, escapes: false, tanf.c:22:1
var xt2pio2 = float64(3.141592653589793)

// xt3pio2 float64, escapes: false, tanf.c:23:1
var xt3pio2 = float64(4.71238898038469)

// xt4pio2 float64, escapes: false, tanf.c:24:1
var xt4pio2 = float64(6.283185307179586)

// linking tanh.o

// Xtanh is defined at tanh.c:7:8
func Xtanh(tls TLS, _x float64) (r float64) {
	esc := MustMalloc(8)
	var (
		_u    = esc // *struct{Ff [0]float64;Fi [0]uint64;F int64}
		_w    uint32
		_sign int32
		_t    float64
		___x  float32
		_     = ___x
		_1__x float64
		_     = _1__x
		_2__x float64
		_     = _2__x
	)
	defer Free(esc)
	*(*struct {
		Ff [0]float64
		Fi [0]uint64
		F  int64
	})(unsafe.Pointer(_u)) = *(*struct {
		Ff [0]float64
		Fi [0]uint64
		F  int64
	})(unsafe.Pointer(&struct{ f float64 }{_x}))
	_sign = int32(*(*uint64)(unsafe.Pointer(_u)) >> (uint(63) % 64))
	{
		p := (*uint64)(unsafe.Pointer(_u))
		*p = *p & uint64(9223372036854775807)
	}
	_x = *(*float64)(unsafe.Pointer(_u))
	_w = uint32(*(*uint64)(unsafe.Pointer(_u)) >> (uint(32) % 64))
	if _w <= uint32(0x3fe193ea) {
		goto _1
	}

	if _w <= uint32(0x40340000) {
		goto _3
	}

	_t = float64(1) - float64(float64(0)/_x)
	goto _4

_3:
	_t = Xexpm1(tls, float64(2)*_x)
	_t = float64(1) - float64(float64(2)/float64(_t+float64(2)))
_4:
	goto _2

_1:
	if _w <= uint32(0x3fd058ae) {
		goto _5
	}

	_t = Xexpm1(tls, float64(2)*_x)
	_t = _t / float64(_t+float64(2))
	goto _6

_5:
	if _w < uint32(0x100000) {
		goto _7
	}

	_t = Xexpm1(tls, float64(-2)*_x)
	_t = float64(-_t) / float64(_t+float64(2))
	goto _8

_7:
	___x = float32(_x)
	goto _10

	goto _11

	_1__x = float64(float32(_x))
	goto _12

_11:
	_2__x = float64(float32(_x))
_12:
_10:
	_t = _x
_8:
_6:
_2:
	if _sign != 0 {
		return -_t
	}

	return _t
}

type t503__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t503__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t66uint64_t = uint64

type t101uint32_t = uint32

type t34double_t = float64

// linking tanhf.o

// Xtanhf is defined at tanhf.c:3:7
func Xtanhf(tls TLS, _x float32) (r float32) {
	esc := MustMalloc(4)
	var (
		_u    = esc // *struct{Ff [0]float32;Fi [0]uint32;F int32}
		_w    uint32
		_sign int32
		_t    float32
		___x  float32
		_     = ___x
		_1__x float64
		_     = _1__x
		_2__x float64
		_     = _2__x
	)
	defer Free(esc)
	*(*struct {
		Ff [0]float32
		Fi [0]uint32
		F  int32
	})(unsafe.Pointer(_u)) = *(*struct {
		Ff [0]float32
		Fi [0]uint32
		F  int32
	})(unsafe.Pointer(&struct{ f float32 }{_x}))
	_sign = int32(*(*uint32)(unsafe.Pointer(_u)) >> (uint(31) % 32))
	{
		p := (*uint32)(unsafe.Pointer(_u))
		*p = *p & uint32(0x7fffffff)
	}
	_x = *(*float32)(unsafe.Pointer(_u))
	_w = *(*uint32)(unsafe.Pointer(_u))
	if _w <= uint32(0x3f0c9f54) {
		goto _1
	}

	if _w <= uint32(0x41200000) {
		goto _3
	}

	_t = float32(1) + float32(float32(0)/_x)
	goto _4

_3:
	_t = Xexpm1f(tls, float32(2)*_x)
	_t = float32(1) - float32(float32(2)/float32(_t+float32(2)))
_4:
	goto _2

_1:
	if _w <= uint32(0x3e82c578) {
		goto _5
	}

	_t = Xexpm1f(tls, float32(2)*_x)
	_t = _t / float32(_t+float32(2))
	goto _6

_5:
	if _w < uint32(0x800000) {
		goto _7
	}

	_t = Xexpm1f(tls, float32(-2)*_x)
	_t = float32(-_t) / float32(_t+float32(2))
	goto _8

_7:
	___x = _x * _x
	goto _10

	goto _11

	_1__x = float64(_x * _x)
	goto _12

_11:
	_2__x = float64(_x * _x)
_12:
_10:
	_t = _x
_8:
_6:
_2:
	if _sign != 0 {
		return -_t
	}

	return _t
}

type t504__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t504__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t102uint32_t = uint32

// linking tanhl.o

// Xtanhl is defined at tanhl.c:4:13
func Xtanhl(tls TLS, _x float64) (r float64) {
	return Xtanh(tls, _x)
}

type t505__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t505__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// linking tanl.o

// Xtanl is defined at tanl.c:4:13
func Xtanl(tls TLS, _x float64) (r float64) {
	return Xtan(tls, _x)
}

type t506__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t506__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// linking tgamma.o

// Xtgamma is defined at tgamma.c:108:8
func Xtgamma(tls TLS, _x float64) (r float64) {
	esc := MustMalloc(8)
	var (
		_u    = esc // *struct{Ff [0]float64;Fi [0]uint64;F int64}
		_absx float64
		_y    float64
		_dy   float64
		_z    float64
		_r    float64
		_ix   uint32
		_sign int32
		___x  float32
		_     = ___x
		_1__x float64
		_     = _1__x
		_2__x float64
		_     = _2__x
	)
	defer Free(esc)
	*(*struct {
		Ff [0]float64
		Fi [0]uint64
		F  int64
	})(unsafe.Pointer(_u)) = *(*struct {
		Ff [0]float64
		Fi [0]uint64
		F  int64
	})(unsafe.Pointer(&struct{ f float64 }{_x}))
	_ix = uint32(*(*uint64)(unsafe.Pointer(_u)) >> (uint(32) % 64) & uint64(0x7fffffff))
	_sign = int32(*(*uint64)(unsafe.Pointer(_u)) >> (uint(63) % 64))
	if _ix < uint32(0x7ff00000) {
		goto _1
	}

	return _x + math.Inf(1)

_1:
	if _ix >= uint32(1016070144) {
		goto _2
	}

	return float64(1) / _x

_2:
	if _x != Xfloor(tls, _x) {
		goto _3
	}

	if _sign == 0 {
		goto _4
	}

	return math.NaN()

_4:
	if _x > float64(23) {
		goto _5
	}

	return *(*float64)(unsafe.Pointer(xfact + 8*uintptr(int32(_x)-int32(1))))

_5:
_3:
	if _ix < uint32(0x40670000) {
		goto _6
	}

	if _sign == 0 {
		goto _7
	}

	___x = float32(float64(1.1754943508222875e-38) / _x)
	goto _9

	goto _10

	_1__x = float64(float32(float64(1.1754943508222875e-38) / _x))
	goto _11

_10:
	_2__x = float64(float32(float64(1.1754943508222875e-38) / _x))
_11:
_9:
	if float64(Xfloor(tls, _x)*float64(0.5)) != Xfloor(tls, _x*float64(0.5)) {
		goto _12
	}

	return float64(0)

_12:
	return Nz64

_7:
	_x = _x * float64(8.98846567431158e+307)
	return _x

_6:
	_absx = func() float64 {
		if _sign != 0 {
			return -_x
		}
		return _x
	}()
	_y = _absx + xgmhalf
	if _absx <= xgmhalf {
		goto _13
	}

	_dy = _y - _absx
	_dy = _dy - xgmhalf
	goto _14

_13:
	_dy = _y - xgmhalf
	_dy = _dy - _absx
_14:
	_z = _absx - float64(0.5)
	_r = xS(tls, _absx) * Xexp(tls, -_y)
	if _x >= float64(0) {
		goto _15
	}

	_r = float64(-x4pi) / float64(float64(xsinpi(tls, _absx)*_absx)*_r)
	_dy = -_dy
	_z = -_z
_15:
	_r = _r + float64(float64(float64(_dy*float64(xgmhalf+float64(0.5)))*_r)/_y)
	_z = Xpow(tls, _y, float64(0.5)*_z)
	_y = float64(_r*_z) * _z
	return _y
}

type t507__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t507__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t67uint64_t = uint64

type t35double_t = float64

type t103uint32_t = uint32

// xfact [23]float64, escapes: true, tgamma.c:81:21
var xfact = ds + 42464

// xgmhalf float64, escapes: false, tgamma.c:60:21
var xgmhalf = float64(5.52468004077673)

// xS is defined at tgamma.c:89:15
func xS(tls TLS, _x float64) (r float64) {
	var (
		_num float64
		_den float64
		_i   int32
	)
	_num = float64(0)
	_den = float64(0)
	if _x >= float64(8) {
		goto _1
	}

	_i = int32(12)
_3:
	if _i < int32(0) {
		goto _5
	}

	_num = float64(_num*_x) + *(*float64)(unsafe.Pointer(xSnum + 8*uintptr(_i)))
	_den = float64(_den*_x) + *(*float64)(unsafe.Pointer(xSden + 8*uintptr(_i)))
	_i--
	goto _3

_5:
	goto _2

_1:
	_i = int32(0)
_6:
	if _i > int32(12) {
		goto _8
	}

	_num = float64(_num/_x) + *(*float64)(unsafe.Pointer(xSnum + 8*uintptr(_i)))
	_den = float64(_den/_x) + *(*float64)(unsafe.Pointer(xSden + 8*uintptr(_i)))
	_i++
	goto _6

_8:
_2:
	return _num / _den
}

// xpi float64, escapes: false, tgamma.c:27:21
var x4pi = float64(3.141592653589793)

// xsinpi is defined at tgamma.c:30:15
func xsinpi(tls TLS, _x float64) (r float64) {
	var _n int32

	_x = _x * float64(0.5)
	_x = float64(2) * float64(_x-Xfloor(tls, _x))
	_n = int32(float64(4) * _x)
	_n = (_n + int32(1)) / int32(2)
	_x = _x - float64(float64(_n)*float64(0.5))
	_x = _x * x4pi
	switch _n {
	default:
		goto _2

	case int32(0):
		goto _3
	case int32(1):
		goto _4
	case int32(2):
		goto _5
	case int32(3):
		goto _6
	}
_2:
_3:
	return X__sin(tls, _x, float64(0), int32(0))

_4:
	return X__cos(tls, _x, float64(0))

_5:
	return X__sin(tls, -_x, float64(0), int32(0))

_6:
	return -X__cos(tls, _x, float64(0))
	return r
}

// xSnum [13]float64, escapes: true, tgamma.c:61:21
var xSnum = ds + 42648

// xSden [13]float64, escapes: true, tgamma.c:76:21
var xSden = ds + 42752

// linking tgammaf.o

// Xtgammaf is defined at tgammaf.c:3:7
func Xtgammaf(tls TLS, _x float32) (r float32) {
	return float32(Xtgamma(tls, float64(_x)))
}

type t508__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t508__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// linking tgammal.o

// Xtgammal is defined at tgammal.c:54:13
func Xtgammal(tls TLS, _x float64) (r float64) {
	return Xtgamma(tls, _x)
}

type t509__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t509__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// linking trunc.o

// Xtrunc is defined at trunc.c:3:8
func Xtrunc(tls TLS, _x float64) (r float64) {
	esc := MustMalloc(8)
	var (
		_u    = esc // *struct{Ff [0]float64;Fi [0]uint64;F int64}
		_e    int32
		_m    uint64
		___x  float32
		_     = ___x
		_1__x float64
		_     = _1__x
		_2__x float64
		_     = _2__x
	)
	defer Free(esc)
	*(*struct {
		Ff [0]float64
		Fi [0]uint64
		F  int64
	})(unsafe.Pointer(_u)) = *(*struct {
		Ff [0]float64
		Fi [0]uint64
		F  int64
	})(unsafe.Pointer(&struct{ f float64 }{_x}))
	_e = int32(*(*uint64)(unsafe.Pointer(_u))>>(uint(52)%64)&uint64(0x7ff)) - int32(0x3ff) + int32(12)
	if _e < int32(64) {
		goto _1
	}

	return _x

_1:
	if _e >= int32(12) {
		goto _2
	}

	_e = int32(1)
_2:
	_m = uint64(18446744073709551615) >> (uint(_e) % 64)
	if *(*uint64)(unsafe.Pointer(_u))&_m != uint64(0) {
		goto _3
	}

	return _x

_3:
	goto _5

	___x = float32(_x + float64(1.329227995784916e+36))
	goto _6

_5:
	_1__x = _x + float64(1.329227995784916e+36)
	goto _7

	_2__x = _x + float64(1.329227995784916e+36)
_7:
_6:
	{
		p := (*uint64)(unsafe.Pointer(_u))
		*p = *p & ^_m
	}
	return *(*float64)(unsafe.Pointer(_u))
}

type t510__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t510__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t68uint64_t = uint64

// linking truncf.o

// Xtruncf is defined at truncf.c:3:7
func Xtruncf(tls TLS, _x float32) (r float32) {
	esc := MustMalloc(4)
	var (
		_u    = esc // *struct{Ff [0]float32;Fi [0]uint32;F int32}
		_e    int32
		_m    uint32
		___x  float32
		_     = ___x
		_1__x float64
		_     = _1__x
		_2__x float64
		_     = _2__x
	)
	defer Free(esc)
	*(*struct {
		Ff [0]float32
		Fi [0]uint32
		F  int32
	})(unsafe.Pointer(_u)) = *(*struct {
		Ff [0]float32
		Fi [0]uint32
		F  int32
	})(unsafe.Pointer(&struct{ f float32 }{_x}))
	_e = int32(*(*uint32)(unsafe.Pointer(_u))>>(uint(23)%32)&uint32(0xff)) - int32(0x7f) + int32(9)
	if _e < int32(32) {
		goto _1
	}

	return _x

_1:
	if _e >= int32(9) {
		goto _2
	}

	_e = int32(1)
_2:
	_m = uint32(4294967295) >> (uint(_e) % 32)
	if *(*uint32)(unsafe.Pointer(_u))&_m != uint32(0) {
		goto _3
	}

	return _x

_3:
	___x = _x + float32(1.329228e+36)
	goto _5

	goto _6

	_1__x = float64(_x + float32(1.329228e+36))
	goto _7

_6:
	_2__x = float64(_x + float32(1.329228e+36))
_7:
_5:
	{
		p := (*uint32)(unsafe.Pointer(_u))
		*p = *p & ^_m
	}
	return *(*float32)(unsafe.Pointer(_u))
}

type t511__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t511__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t104uint32_t = uint32

// linking truncl.o

// Xtruncl is defined at truncl.c:4:13
func Xtruncl(tls TLS, _x float64) (r float64) {
	return Xtrunc(tls, _x)
}

type t512__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t512__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// linking a64l.o

// Xa64l is defined at a64l.c:8:6
func Xa64l(tls TLS, _s uintptr /* *int8 */) (r int64) {
	var (
		_e int32
		_x uint32
		_d uintptr // *int8
	)
	_x = uint32(0)
	_e = int32(0)
_1:
	if _e >= int32(36) || *(*int8)(unsafe.Pointer(_s)) == 0 {
		goto _3
	}

	_d = Xstrchr(tls, xdigits, int32(*(*int8)(unsafe.Pointer(_s))))
	if _d != 0 {
		goto _4
	}

	goto _3

_4:
	_x = _x | uint32(int64(_d-xdigits))<<(uint(_e)%32)
	_e = _e + int32(6)
	_s++
	goto _1

_3:
	return int64(int32(_x))
}

// Xl64a is defined at a64l.c:20:6
func Xl64a(tls TLS, _x0 int64) (r uintptr /* *int8 */) {
	var (
		_p uintptr // *int8
		_x uint32
	)
	_x = uint32(_x0)
	_p = x601s
_1:
	if _x == 0 {
		goto _3
	}

	*(*int8)(unsafe.Pointer(_p)) = *(*int8)(unsafe.Pointer(xdigits + uintptr(_x&uint32(63))))
	_p++
	_x = _x >> uint32(6)
	goto _1

_3:
	*(*int8)(unsafe.Pointer(_p)) = int8(0)
	return x601s
}

type t513__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t513__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t105uint32_t = uint32

// xdigits [65]int8, escapes: true, a64l.c:5:19
var xdigits = ds + 42856

type t14int32_t = int32

// x2s [7]int8, escapes: true, a64l.c:22:14
var x601s = bss + 2304

// linking basename.o

// Xbasename is defined at basename.c:5:6
func Xbasename(tls TLS, _s uintptr /* *int8 */) (r uintptr /* *int8 */) {
	var _i uint64

	if _s != 0 && *(*int8)(unsafe.Pointer(_s)) != 0 {
		goto _1
	}

	return ts + 1868 /* "." */

_1:
	_i = Xstrlen(tls, _s) - uint64(1)

_2:
	if _i == 0 || int32(*(*int8)(unsafe.Pointer(_s + uintptr(_i)))) != int32('/') {
		goto _4
	}

	*(*int8)(unsafe.Pointer(_s + uintptr(_i))) = int8(0)
	_i--
	goto _2

_4:
_5:
	if _i == 0 || int32(*(*int8)(unsafe.Pointer(_s + uintptr(_i-uint64(1))))) == int32('/') {
		goto _7
	}

	_i--
	goto _5

_7:
	return _s + uintptr(_i)
}

type t514__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t514__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t76size_t = uint64

// linking dirname.o

// Xdirname is defined at dirname.c:4:6
func Xdirname(tls TLS, _s uintptr /* *int8 */) (r uintptr /* *int8 */) {
	var _i uint64

	if _s != 0 && *(*int8)(unsafe.Pointer(_s)) != 0 {
		goto _1
	}

	return ts + 1868 /* "." */

_1:
	_i = Xstrlen(tls, _s) - uint64(1)

_2:
	if int32(*(*int8)(unsafe.Pointer(_s + uintptr(_i)))) != int32('/') {
		goto _4
	}

	if _i != 0 {
		goto _5
	}

	return ts + 1380 /* "/" */

_5:
	_i--
	goto _2

_4:
_6:
	if int32(*(*int8)(unsafe.Pointer(_s + uintptr(_i)))) == int32('/') {
		goto _8
	}

	if _i != 0 {
		goto _9
	}

	return ts + 1868 /* "." */

_9:
	_i--
	goto _6

_8:
_10:
	if int32(*(*int8)(unsafe.Pointer(_s + uintptr(_i)))) != int32('/') {
		goto _12
	}

	if _i != 0 {
		goto _13
	}

	return ts + 1380 /* "/" */

_13:
	_i--
	goto _10

_12:
	*(*int8)(unsafe.Pointer(_s + uintptr(_i+uint64(1)))) = int8(0)
	return _s
}

type t515__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t515__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t77size_t = uint64

// linking ffs.o

// Xffs is defined at ffs.c:5:5
func Xffs(tls TLS, _i int32) (r int32) {
	if _i != 0 {
		return xa_ctz_l(tls, uint64(_i)) + int32(1)
	}

	return int32(0)
}

type t516__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t516__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// xa_ctz_l is defined at atomic.h:292:19
func xa_ctz_l(tls TLS, _x uint64) (r int32) {
	return xa_ctz_64(tls, _x)
}

// xa_ctz_64 is defined at atomic_arch.h:128:19
func xa_ctz_64(tls TLS, _x uint64) (r int32) {
	for ; r < 64 && _x&(1<<uint(r)) == 0; r++ {
	}
	return r
	return r
}

// linking ffsl.o

// Xffsl is defined at ffsl.c:4:5
func Xffsl(tls TLS, _i int64) (r int32) {
	if _i != 0 {
		return x1a_ctz_l(tls, uint64(_i)) + int32(1)
	}

	return int32(0)
}

type t517__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t517__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// xa_ctz_l is defined at atomic.h:292:19
func x1a_ctz_l(tls TLS, _x uint64) (r int32) {
	return x1a_ctz_64(tls, _x)
}

// xa_ctz_64 is defined at atomic_arch.h:128:19
func x1a_ctz_64(tls TLS, _x uint64) (r int32) {
	for ; r < 64 && _x&(1<<uint(r)) == 0; r++ {
	}
	return r
	return r
}

// linking ffsll.o

// Xffsll is defined at ffsll.c:4:5
func Xffsll(tls TLS, _i int64) (r int32) {
	if _i != 0 {
		return x2a_ctz_64(tls, uint64(_i)) + int32(1)
	}

	return int32(0)
}

type t518__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t518__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// xa_ctz_64 is defined at atomic_arch.h:128:19
func x2a_ctz_64(tls TLS, _x uint64) (r int32) {
	for ; r < 64 && _x&(1<<uint(r)) == 0; r++ {
	}
	return r
	return r
}

// linking fmtmsg.o

// Xfmtmsg is defined at fmtmsg.c:24:5
func Xfmtmsg(tls TLS, _classification int64, _label uintptr /* *int8 */, _severity int32, _text uintptr /* *int8 */, _action uintptr /* *int8 */, _tag uintptr /* *int8 */) (r int32) {
	esc := MustMalloc(52)
	var (
		_ret       int32
		_i         int32
		_consolefd int32
		_verb      int32
		_errstring uintptr    // *int8
		_cmsg      uintptr    // *int8
		_msgs      = esc      // *[6]*int8
		_cs        = esc + 48 // *int32
	)
	defer Free(esc)
	_ret = int32(0)
	_verb = int32(0)
	_errstring = 0
	_cmsg = Xgetenv(tls, ts+1904 /* "MSGVERB" */)
	*(*[6]uintptr)(unsafe.Pointer(_msgs)) = [6]uintptr{
		0: ts + 1912, /* "label" */
		1: ts + 1920, /* "severity" */
		2: ts + 1932, /* "text" */
		3: ts + 1940, /* "action" */
		4: ts + 1948, /* "tag" */
	}
	Xpthread_setcancelstate(tls, int32(1), _cs)
	if _severity != int32(1) {
		goto _1
	}

	_errstring = ts + 1952 /* "HALT: " */
	goto _2

_1:
	if _severity != int32(2) {
		goto _3
	}

	_errstring = ts + 1960 /* "ERROR: " */
	goto _4

_3:
	if _severity != int32(3) {
		goto _5
	}

	_errstring = ts + 1968 /* "WARNING: " */
	goto _6

_5:
	if _severity != int32(4) {
		goto _7
	}

	_errstring = ts + 1980 /* "INFO: " */
_7:
_6:
_4:
_2:
	if (_classification & int64(512)) == 0 {
		goto _8
	}

	_consolefd = Xopen(tls, ts+1988 /* "/dev/console" */, int32(01))
	if _consolefd >= int32(0) {
		goto _9
	}

	_ret = int32(4)
	goto _10

_9:
	if Xdprintf(tls, _consolefd, ts+2004 /* "%s%s%s%s%s%s%s%s..." */, func() uintptr {
		if _label != 0 {
			return _label
		}
		return ts + 112 /* "" */
	}(), func() uintptr {
		if _label != 0 {
			return ts + 1404 /* ": " */
		}
		return ts + 112 /* "" */
	}(), func() uintptr {
		if _severity != 0 {
			return _errstring
		}
		return ts + 112 /* "" */
	}(), func() uintptr {
		if _text != 0 {
			return _text
		}
		return ts + 112 /* "" */
	}(), func() uintptr {
		if _action != 0 {
			return ts + 2024 /* "\nTO FIX: " */
		}
		return ts + 112 /* "" */
	}(), func() uintptr {
		if _action != 0 {
			return _action
		}
		return ts + 112 /* "" */
	}(), func() uintptr {
		if _action != 0 {
			return ts + 2036 /* " " */
		}
		return ts + 112 /* "" */
	}(), func() uintptr {
		if _tag != 0 {
			return _tag
		}
		return ts + 112 /* "" */
	}()) >= int32(1) {
		goto _11
	}

	_ret = int32(4)
_11:
	Xclose(tls, _consolefd)
_10:
_8:
	if (_classification & int64(256)) == 0 {
		goto _12
	}

_13:
	if _cmsg == 0 || *(*int8)(unsafe.Pointer(_cmsg)) == 0 {
		goto _14
	}

	_i = int32(0)
_15:
	if *(*uintptr)(unsafe.Pointer(_msgs + 8*uintptr(_i))) == 0 {
		goto _17
	}

	if x_strcolcmp(tls, *(*uintptr)(unsafe.Pointer(_msgs + 8*uintptr(_i))), _cmsg) != 0 {
		goto _18
	}

	goto _17

_18:
	_i++
	goto _15

_17:
	if *(*uintptr)(unsafe.Pointer(_msgs + 8*uintptr(_i))) != null {
		goto _19
	}

	_verb = int32(0xff)
	goto _14

	goto _20

_19:
	_verb = _verb | int32(1)<<(uint(_i)%32)
	_cmsg = Xstrchr(tls, _cmsg, int32(':'))
	if _cmsg == 0 {
		goto _21
	}

	_cmsg++
_21:
_20:
	goto _13

_14:
	if _verb != 0 {
		goto _22
	}

	_verb = int32(0xff)
_22:
	if Xdprintf(tls, int32(2), ts+2004 /* "%s%s%s%s%s%s%s%s..." */, func() uintptr {
		if ((_verb & int32(1)) != 0) && (_label != 0) {
			return _label
		}
		return ts + 112 /* "" */
	}(), func() uintptr {
		if ((_verb & int32(1)) != 0) && (_label != 0) {
			return ts + 1404 /* ": " */
		}
		return ts + 112 /* "" */
	}(), func() uintptr {
		if ((_verb & int32(2)) != 0) && (_severity != 0) {
			return _errstring
		}
		return ts + 112 /* "" */
	}(), func() uintptr {
		if ((_verb & int32(4)) != 0) && (_text != 0) {
			return _text
		}
		return ts + 112 /* "" */
	}(), func() uintptr {
		if ((_verb & int32(8)) != 0) && (_action != 0) {
			return ts + 2024 /* "\nTO FIX: " */
		}
		return ts + 112 /* "" */
	}(), func() uintptr {
		if ((_verb & int32(8)) != 0) && (_action != 0) {
			return _action
		}
		return ts + 112 /* "" */
	}(), func() uintptr {
		if ((_verb & int32(8)) != 0) && (_action != 0) {
			return ts + 2036 /* " " */
		}
		return ts + 112 /* "" */
	}(), func() uintptr {
		if ((_verb & int32(16)) != 0) && (_tag != 0) {
			return _tag
		}
		return ts + 112 /* "" */
	}()) >= int32(1) {
		goto _23
	}

	_ret = _ret | int32(1)
_23:
_12:
	if _ret&int32(5) != int32(5) {
		goto _24
	}

	_ret = int32(-1)
_24:
	Xpthread_setcancelstate(tls, *(*int32)(unsafe.Pointer(_cs)), null)
	return _ret
}

type t519__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t519__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// x_strcolcmp is defined at fmtmsg.c:16:12
func x_strcolcmp(tls TLS, _lstr uintptr /* *int8 */, _bstr uintptr /* *int8 */) (r int32) {
	var _i uint64

	_i = uint64(0)
_1:
	if *(*int8)(unsafe.Pointer(_lstr + uintptr(_i))) == 0 || *(*int8)(unsafe.Pointer(_bstr + uintptr(_i))) == 0 || int32(*(*int8)(unsafe.Pointer(_bstr + uintptr(_i)))) != int32(*(*int8)(unsafe.Pointer(_lstr + uintptr(_i)))) {
		goto _2
	}

	_i++
	goto _1

_2:
	if *(*int8)(unsafe.Pointer(_lstr + uintptr(_i))) == 0 && (*(*int8)(unsafe.Pointer(_bstr + uintptr(_i))) == 0 || int32(*(*int8)(unsafe.Pointer(_bstr + uintptr(_i)))) == int32(':')) {
		goto _3
	}

	return int32(1)

_3:
	return int32(0)
}

type t78size_t = uint64

// linking forkpty.o

// Xforkpty is defined at forkpty.c:9:5
func Xforkpty(tls TLS, _pm uintptr /* *int32 */, _name uintptr /* *int8 */, _tio uintptr /* *Stermios */, _ws uintptr /* *Swinsize */) (r int32) {
	esc := MustMalloc(340)
	var (
		_m      = esc      // *int32
		_s      = esc + 16 // *int32
		_ec     = esc + 32 // *int32
		_p      = esc + 48 // *[2]int32
		_cs     = esc + 64 // *int32
		_pid    int32
		_set    = esc + 80  // *Tsigset_t = struct{F__bits [16]uint64;}
		_oldset = esc + 208 // *Tsigset_t = struct{F__bits [16]uint64;}
		_status = esc + 336 // *int32
	)
	defer Free(esc)
	*(*int32)(unsafe.Pointer(_ec)) = int32(0)
	_pid = int32(-1)
	if Xopenpty(tls, _m, _s, _name, _tio, _ws) >= int32(0) {
		goto _1
	}

	return int32(-1)

_1:
	Xsigfillset(tls, _set)
	Xpthread_sigmask(tls, int32(0), _set, _oldset)
	Xpthread_setcancelstate(tls, int32(1), _cs)
	if Xpipe2(tls, _p, int32(02000000)) == 0 {
		goto _2
	}

	Xclose(tls, *(*int32)(unsafe.Pointer(_s)))
	goto lout

_2:
	_pid = Xfork(tls)
	if _pid != 0 {
		goto _3
	}

	Xclose(tls, *(*int32)(unsafe.Pointer(_m)))
	Xclose(tls, *(*int32)(unsafe.Pointer(_p)))
	if Xlogin_tty(tls, *(*int32)(unsafe.Pointer(_s))) == 0 {
		goto _4
	}

	Xwrite(tls, *(*int32)(unsafe.Pointer(_p + 4)), X__errno_location(tls), uint64(4))
	X_exit(tls, int32(127))
_4:
	Xclose(tls, *(*int32)(unsafe.Pointer(_p + 4)))
	Xpthread_setcancelstate(tls, *(*int32)(unsafe.Pointer(_cs)), null)
	Xpthread_sigmask(tls, int32(2), _oldset, null)
	return int32(0)

_3:
	Xclose(tls, *(*int32)(unsafe.Pointer(_s)))
	Xclose(tls, *(*int32)(unsafe.Pointer(_p + 4)))
	if Xread(tls, *(*int32)(unsafe.Pointer(_p)), _ec, uint64(4)) <= int64(0) {
		goto _5
	}

	Xwaitpid(tls, _pid, _status, int32(0))
	_pid = int32(-1)
	*(*int32)(unsafe.Pointer(X__errno_location(tls))) = *(*int32)(unsafe.Pointer(_ec))
_5:
	Xclose(tls, *(*int32)(unsafe.Pointer(_p)))
	goto lout
lout:
	if _pid <= int32(0) {
		goto _6
	}

	*(*int32)(unsafe.Pointer(_pm)) = *(*int32)(unsafe.Pointer(_m))
	goto _7

_6:
	Xclose(tls, *(*int32)(unsafe.Pointer(_m)))
_7:
	Xpthread_setcancelstate(tls, *(*int32)(unsafe.Pointer(_cs)), null)
	Xpthread_sigmask(tls, int32(2), _oldset, null)
	return _pid
}

type t520__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t520__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type s1termios = struct {
	Fc_iflag    uint32
	Fc_oflag    uint32
	Fc_cflag    uint32
	Fc_lflag    uint32
	Fc_line     uint8
	Fc_cc       [32]uint8
	F__c_ispeed uint32
	F__c_ospeed uint32
}

type Swinsize = struct {
	Fws_row    uint16
	Fws_col    uint16
	Fws_xpixel uint16
	Fws_ypixel uint16
}

type t11pid_t = int32

type t16ssize_t = int64

type t1tcflag_t = uint32

type t1cc_t = uint8

type t1speed_t = uint32

type t79size_t = uint64

// linking get_current_dir_name.o

// Xget_current_dir_name is defined at get_current_dir_name.c:8:6
func Xget_current_dir_name(tls TLS) (r uintptr /* *int8 */) {
	esc := MustMalloc(288)
	var (
		_a   = esc       // *Sstat
		_b   = esc + 144 // *Sstat
		_res uintptr     // *int8
	)
	defer Free(esc)
	_res = Xgetenv(tls, ts+2040 /* "PWD" */)
	if _res == 0 || *(*int8)(unsafe.Pointer(_res)) == 0 || Xstat(tls, _res, _a) != 0 || Xstat(tls, ts+1868 /* "." */, _b) != 0 || *(*uint64)(unsafe.Pointer(_a)) != *(*uint64)(unsafe.Pointer(_b)) || *(*uint64)(unsafe.Pointer(_a + 8)) != *(*uint64)(unsafe.Pointer(_b + 8)) {
		goto _1
	}

	return Xstrdup(tls, _res)

_1:
	return Xgetcwd(tls, null, uint64(0))
}

type t521__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t521__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type s2stat = struct {
	Fst_dev     uint64
	Fst_ino     uint64
	Fst_nlink   uint64
	Fst_mode    uint32
	Fst_uid     uint32
	Fst_gid     uint32
	F__pad0     uint32
	Fst_rdev    uint64
	Fst_size    int64
	Fst_blksize int64
	Fst_blocks  int64
	Fst_atim    s8timespec
	Fst_mtim    s8timespec
	Fst_ctim    s8timespec
	F__unused   [3]int64
}

type t2dev_t = uint64

type t8ino_t = uint64

type t2nlink_t = uint64

type t8mode_t = uint32

type t8uid_t = uint32

type t7gid_t = uint32

type t26off_t = int64

type t2blksize_t = int64

type t2blkcnt_t = int64

type s8timespec = struct {
	Ftv_sec  int64
	Ftv_nsec int64
}

type t80size_t = uint64

type t20time_t = int64

// linking getauxval.o

// Xgetauxval is defined at getauxval.c:5:15
func Xgetauxval(tls TLS, _item uint64) (r uint64) {
	var _auxv uintptr // *Tsize_t = uint64

	_auxv = *(*uintptr)(unsafe.Pointer(X__libc + 16))
	if _item != uint64(23) {
		goto _1
	}

	return uint64(*(*int32)(unsafe.Pointer(X__libc + 8)))

_1:
_2:
	if *(*uint64)(unsafe.Pointer(_auxv)) == 0 {
		goto _4
	}

	if *(*uint64)(unsafe.Pointer(_auxv)) != _item {
		goto _5
	}

	return *(*uint64)(unsafe.Pointer(_auxv + 8))

_5:
	_auxv += 8 * uintptr(2)
	goto _2

_4:
	*(*int32)(unsafe.Pointer(X__errno_location(tls))) = int32(2)
	return uint64(0)
}

type t522__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t522__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t81size_t = uint64

// linking getdomainname.o

// Xgetdomainname is defined at getdomainname.c:7:5
func Xgetdomainname(tls TLS, _name uintptr /* *int8 */, _len uint64) (r int32) {
	esc := MustMalloc(390)
	var _temp = esc // *Sutsname
	defer Free(esc)
	Xuname(tls, _temp)
	if _len != 0 && Xstrlen(tls, _temp+325) < _len {
		goto _1
	}

	*(*int32)(unsafe.Pointer(X__errno_location(tls))) = int32(22)
	return int32(-1)

_1:
	Xstrcpy(tls, _name, _temp+325)
	return int32(0)
}

type t523__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t523__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t82size_t = uint64

type Sutsname = struct {
	Fsysname    [65]int8
	Fnodename   [65]int8
	Frelease    [65]int8
	Fversion    [65]int8
	Fmachine    [65]int8
	Fdomainname [65]int8
}

// linking getentropy.o

// Xgetentropy is defined at getentropy.c:5:5
func Xgetentropy(tls TLS, _buffer uintptr /* *void */, _len uint64) (r int32) {
	esc := MustMalloc(4)
	var (
		_cs  = esc // *int32
		_ret int32
		_pos uintptr // *int8
	)
	defer Free(esc)
	_pos = _buffer
	if _len <= uint64(256) {
		goto _1
	}

	*(*int32)(unsafe.Pointer(X__errno_location(tls))) = int32(5)
	return int32(-1)

_1:
	Xpthread_setcancelstate(tls, int32(1), _cs)
_2:
	if _len == 0 {
		goto _3
	}

	_ret = int32(Xgetrandom(tls, _pos, _len, uint32(0)))
	if _ret >= int32(0) {
		goto _4
	}

	if *(*int32)(unsafe.Pointer(X__errno_location(tls))) != int32(4) {
		goto _5
	}

	goto _2

	goto _6

_5:
	goto _3

_6:
_4:
	_pos += uintptr(_ret)
	_len = _len - uint64(_ret)
	_ret = int32(0)
	goto _2

_3:
	Xpthread_setcancelstate(tls, *(*int32)(unsafe.Pointer(_cs)), null)
	return _ret
}

type t524__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t524__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t83size_t = uint64

type t17ssize_t = int64

// linking gethostid.o

// Xgethostid is defined at gethostid.c:3:6
func Xgethostid(tls TLS) (r int64) {
	return int64(0)
}

type t525__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t525__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// linking getopt.o

// Xoptarg *int8, escapes: true, getopt.c:9:6
var Xoptarg = bss + 2312

// Xoptind int32, escapes: true, getopt.c:10:5
var Xoptind = ds + 42928

// Xopterr int32, escapes: true, getopt.c:10:15
var Xopterr = ds + 42936

// Xoptopt int32, escapes: true, getopt.c:10:25
var Xoptopt = bss + 2320

// X__optpos int32, escapes: true, getopt.c:10:33
var X__optpos = bss + 2328

// X__optreset int32, escapes: true, getopt.c:10:43
var X__optreset = bss + 2336

// X__getopt_msg is defined at getopt.c:15:6
func X__getopt_msg(tls TLS, _a uintptr /* *int8 */, _b uintptr /* *int8 */, _c uintptr /* *int8 */, _l uint64) {
	var _f uintptr // *TFILE = S_IO_FILE

	_f = *(*uintptr)(unsafe.Pointer(Xstderr))
	_b = X__lctrans_cur(tls, _b)
	Xflockfile(tls, _f)
	if ((Xfputs(tls, _a, _f) >= int32(0)) && (Xfwrite(tls, _b, Xstrlen(tls, _b), uint64(1), _f) != 0)) && (Xfwrite(tls, _c, uint64(1), _l, _f) == _l) {
		Xputc(tls, int32('\n'), _f)
	}
	Xfunlockfile(tls, _f)
}

func postinc602(p *int32) int32 { r := *p; *p += 1; return r }

func set603(p *int32, v int32) int32 { *p = v; return v }

// Xgetopt is defined at getopt.c:27:5
func Xgetopt(tls TLS, _argc int32, _argv uintptr /* uintptr */, _optstring uintptr /* *int8 */) (r int32) {
	esc := MustMalloc(20)
	var (
		_i       int32
		_c       = esc      // *Twchar_t = int32
		_d       = esc + 16 // *Twchar_t = int32
		_k       int32
		_l       int32
		_optchar uintptr // *int8
	)
	defer Free(esc)
	if *(*int32)(unsafe.Pointer(Xoptind)) != 0 && *(*int32)(unsafe.Pointer(X__optreset)) == 0 {
		goto _1
	}

	*(*int32)(unsafe.Pointer(X__optreset)) = int32(0)
	*(*int32)(unsafe.Pointer(X__optpos)) = int32(0)
	*(*int32)(unsafe.Pointer(Xoptind)) = int32(1)
_1:
	if *(*int32)(unsafe.Pointer(Xoptind)) < _argc && *(*uintptr)(unsafe.Pointer(_argv + 8*uintptr(*(*int32)(unsafe.Pointer(Xoptind))))) != 0 {
		goto _2
	}

	return int32(-1)

_2:
	if int32(*(*int8)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_argv + 8*uintptr(*(*int32)(unsafe.Pointer(Xoptind)))))))) == int32('-') {
		goto _3
	}

	if int32(*(*int8)(unsafe.Pointer(_optstring))) != int32('-') {
		goto _4
	}

	*(*uintptr)(unsafe.Pointer(Xoptarg)) = *(*uintptr)(unsafe.Pointer(_argv + 8*uintptr(postinc602((*int32)(unsafe.Pointer(Xoptind))))))
	return int32(1)

_4:
	return int32(-1)

_3:
	if *(*int8)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_argv + 8*uintptr(*(*int32)(unsafe.Pointer(Xoptind))))) + 1)) != 0 {
		goto _5
	}

	return int32(-1)

_5:
	if int32(*(*int8)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_argv + 8*uintptr(*(*int32)(unsafe.Pointer(Xoptind))))) + 1))) != int32('-') || *(*int8)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_argv + 8*uintptr(*(*int32)(unsafe.Pointer(Xoptind))))) + 2)) != 0 {
		goto _6
	}

	return func() int32 { *(*int32)(unsafe.Pointer(Xoptind))++; return int32(-1) }()

_6:
	if *(*int32)(unsafe.Pointer(X__optpos)) != 0 {
		goto _7
	}

	*(*int32)(unsafe.Pointer(X__optpos))++
_7:
	if set603(&_k, Xmbtowc(tls, _c, *(*uintptr)(unsafe.Pointer(_argv + 8*uintptr(*(*int32)(unsafe.Pointer(Xoptind)))))+uintptr(*(*int32)(unsafe.Pointer(X__optpos))), uint64(4))) >= int32(0) {
		goto _8
	}

	_k = int32(1)
	*(*int32)(unsafe.Pointer(_c)) = int32(0xfffd)
_8:
	_optchar = *(*uintptr)(unsafe.Pointer(_argv + 8*uintptr(*(*int32)(unsafe.Pointer(Xoptind))))) + uintptr(*(*int32)(unsafe.Pointer(X__optpos)))
	*(*int32)(unsafe.Pointer(X__optpos)) = *(*int32)(unsafe.Pointer(X__optpos)) + _k
	if *(*int8)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_argv + 8*uintptr(*(*int32)(unsafe.Pointer(Xoptind))))) + uintptr(*(*int32)(unsafe.Pointer(X__optpos))))) != 0 {
		goto _9
	}

	*(*int32)(unsafe.Pointer(Xoptind))++
	*(*int32)(unsafe.Pointer(X__optpos)) = int32(0)
_9:
	if int32(*(*int8)(unsafe.Pointer(_optstring))) != int32('-') && int32(*(*int8)(unsafe.Pointer(_optstring))) != int32('+') {
		goto _10
	}

	_optstring++
_10:
	_i = int32(0)
	*(*int32)(unsafe.Pointer(_d)) = int32(0)
_11:
	_l = Xmbtowc(tls, _d, _optstring+uintptr(_i), uint64(4))
	if _l <= int32(0) {
		goto _14
	}

	_i = _i + _l
	goto _15

_14:
	_i++
_15:
	if (_l != 0) && (*(*int32)(unsafe.Pointer(_d)) != *(*int32)(unsafe.Pointer(_c))) {
		goto _11
	}

	if *(*int32)(unsafe.Pointer(_d)) == *(*int32)(unsafe.Pointer(_c)) && *(*int32)(unsafe.Pointer(_c)) != int32(':') {
		goto _16
	}

	*(*int32)(unsafe.Pointer(Xoptopt)) = *(*int32)(unsafe.Pointer(_c))
	if int32(*(*int8)(unsafe.Pointer(_optstring))) == int32(':') || *(*int32)(unsafe.Pointer(Xopterr)) == 0 {
		goto _17
	}

	X__getopt_msg(tls, *(*uintptr)(unsafe.Pointer(_argv)), ts+2044 /* ": unrecognized o..." */, _optchar, uint64(_k))
_17:
	return int32('?')

_16:
	if int32(*(*int8)(unsafe.Pointer(_optstring + uintptr(_i)))) != int32(':') {
		goto _18
	}

	if int32(*(*int8)(unsafe.Pointer(_optstring + uintptr(_i+int32(1))))) != int32(':') {
		goto _19
	}

	*(*uintptr)(unsafe.Pointer(Xoptarg)) = null
	goto _20

_19:
	if *(*int32)(unsafe.Pointer(Xoptind)) < _argc {
		goto _21
	}

	*(*int32)(unsafe.Pointer(Xoptopt)) = *(*int32)(unsafe.Pointer(_c))
	if int32(*(*int8)(unsafe.Pointer(_optstring))) != int32(':') {
		goto _22
	}

	return int32(':')

_22:
	if *(*int32)(unsafe.Pointer(Xopterr)) == 0 {
		goto _23
	}

	X__getopt_msg(tls, *(*uintptr)(unsafe.Pointer(_argv)), ts+2068 /* ": option require..." */, _optchar, uint64(_k))
_23:
	return int32('?')

_21:
_20:
	if int32(*(*int8)(unsafe.Pointer(_optstring + uintptr(_i+int32(1))))) == int32(':') && *(*int32)(unsafe.Pointer(X__optpos)) == 0 {
		goto _24
	}

	*(*uintptr)(unsafe.Pointer(Xoptarg)) = *(*uintptr)(unsafe.Pointer(_argv + 8*uintptr(postinc602((*int32)(unsafe.Pointer(Xoptind)))))) + uintptr(*(*int32)(unsafe.Pointer(X__optpos)))
	*(*int32)(unsafe.Pointer(X__optpos)) = int32(0)
_24:
_18:
	return *(*int32)(unsafe.Pointer(_c))
}

type t526__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t526__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t84size_t = uint64

type t6wchar_t = int32

type s4_IO_FILE struct{ uintptr }

// linking getopt_long.o

// Xgetopt_long is defined at getopt_long.c:141:5
func Xgetopt_long(tls TLS, _argc int32, _argv uintptr /* **int8 */, _optstring uintptr /* *int8 */, _longopts uintptr /* *Soption */, _idx uintptr /* *int32 */) (r int32) {
	return x__getopt_long(tls, _argc, _argv, _optstring, _longopts, _idx, int32(0))
}

// Xgetopt_long_only is defined at getopt_long.c:146:5
func Xgetopt_long_only(tls TLS, _argc int32, _argv uintptr /* **int8 */, _optstring uintptr /* *int8 */, _longopts uintptr /* *Soption */, _idx uintptr /* *int32 */) (r int32) {
	return x__getopt_long(tls, _argc, _argv, _optstring, _longopts, _idx, int32(1))
}

type t527__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t527__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type Soption = struct {
	Fname    uintptr // *int8
	Fhas_arg int32
	Fflag    uintptr // *int32
	Fval     int32
}

// x__getopt_long is defined at getopt_long.c:25:12
func x__getopt_long(tls TLS, _argc int32, _argv uintptr /* **int8 */, _optstring uintptr /* *int8 */, _longopts uintptr /* *Soption */, _idx uintptr /* *int32 */, _longonly int32) (r int32) {
	var (
		_ret     int32
		_skipped int32
		_resumed int32
		_i       int32
		_1i      int32
		_cnt     int32
	)
	if *(*int32)(unsafe.Pointer(Xoptind)) != 0 && *(*int32)(unsafe.Pointer(X__optreset)) == 0 {
		goto _1
	}

	*(*int32)(unsafe.Pointer(X__optreset)) = int32(0)
	*(*int32)(unsafe.Pointer(X__optpos)) = int32(0)
	*(*int32)(unsafe.Pointer(Xoptind)) = int32(1)
_1:
	if *(*int32)(unsafe.Pointer(Xoptind)) < _argc && *(*uintptr)(unsafe.Pointer(_argv + 8*uintptr(*(*int32)(unsafe.Pointer(Xoptind))))) != 0 {
		goto _2
	}

	return int32(-1)

_2:
	_skipped = *(*int32)(unsafe.Pointer(Xoptind))
	if int32(*(*int8)(unsafe.Pointer(_optstring))) == int32('+') || int32(*(*int8)(unsafe.Pointer(_optstring))) == int32('-') {
		goto _3
	}

	_i = *(*int32)(unsafe.Pointer(Xoptind))
_4:
	if _i < _argc && *(*uintptr)(unsafe.Pointer(_argv + 8*uintptr(_i))) != 0 {
		goto _7
	}

	return int32(-1)

_7:
	if int32(*(*int8)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_argv + 8*uintptr(_i)))))) != int32('-') || *(*int8)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_argv + 8*uintptr(_i))) + 1)) == 0 {
		goto _8
	}

	goto _6

_8:
	_i++
	goto _4

_6:
	*(*int32)(unsafe.Pointer(Xoptind)) = _i
_3:
	_resumed = *(*int32)(unsafe.Pointer(Xoptind))
	_ret = x__getopt_long_core(tls, _argc, _argv, _optstring, _longopts, _idx, _longonly)
	if _resumed <= _skipped {
		goto _9
	}

	_cnt = *(*int32)(unsafe.Pointer(Xoptind)) - _resumed
	_1i = int32(0)
_10:
	if _1i >= _cnt {
		goto _12
	}

	xpermute(tls, _argv, _skipped, *(*int32)(unsafe.Pointer(Xoptind))-int32(1))
	_1i++
	goto _10

_12:
	*(*int32)(unsafe.Pointer(Xoptind)) = _skipped + _cnt
_9:
	return _ret
}

func set604(p *int32, v int32) int32 { *p = v; return v }

func set605(p *uintptr, v uintptr) uintptr { *p = v; return v }

// x__getopt_long_core is defined at getopt_long.c:54:12
func x__getopt_long_core(tls TLS, _argc int32, _argv uintptr /* **int8 */, _optstring uintptr /* *int8 */, _longopts uintptr /* *Soption */, _idx uintptr /* *int32 */, _longonly int32) (r int32) {
	var (
		_colon int32
		_i     int32
		_cnt   int32
		_match int32
		_arg   uintptr // *int8
		_opt   uintptr // *int8
		_start uintptr // *int8
		_name  uintptr // *int8
		_l     int32
		_j     int32
	)
	*(*uintptr)(unsafe.Pointer(Xoptarg)) = null
	if _longopts == 0 || int32(*(*int8)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_argv + 8*uintptr(*(*int32)(unsafe.Pointer(Xoptind)))))))) != int32('-') || (_longonly == 0 || *(*int8)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_argv + 8*uintptr(*(*int32)(unsafe.Pointer(Xoptind))))) + 1)) == 0 || int32(*(*int8)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_argv + 8*uintptr(*(*int32)(unsafe.Pointer(Xoptind))))) + 1))) == int32('-')) && (int32(*(*int8)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_argv + 8*uintptr(*(*int32)(unsafe.Pointer(Xoptind))))) + 1))) != int32('-') || *(*int8)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_argv + 8*uintptr(*(*int32)(unsafe.Pointer(Xoptind))))) + 2)) == 0) {
		goto _1
	}

	_colon = bool2int(int32(*(*int8)(unsafe.Pointer(_optstring + uintptr(bool2int((int32(*(*int8)(unsafe.Pointer(_optstring))) == int32('+')) || (int32(*(*int8)(unsafe.Pointer(_optstring))) == int32('-'))))))) == int32(':'))
	_start = *(*uintptr)(unsafe.Pointer(_argv + 8*uintptr(*(*int32)(unsafe.Pointer(Xoptind))))) + uintptr(1)
	_cnt = set604(&_i, int32(0))
_2:
	if *(*uintptr)(unsafe.Pointer(_longopts + 32*uintptr(_i))) == 0 {
		goto _4
	}

	_name = *(*uintptr)(unsafe.Pointer(_longopts + 32*uintptr(_i)))
	_opt = _start
	if int32(*(*int8)(unsafe.Pointer(_opt))) != int32('-') {
		goto _5
	}

	_opt++
_5:
_6:
	if *(*int8)(unsafe.Pointer(_opt)) == 0 || int32(*(*int8)(unsafe.Pointer(_opt))) == int32('=') || int32(*(*int8)(unsafe.Pointer(_opt))) != int32(*(*int8)(unsafe.Pointer(_name))) {
		goto _7
	}

	_name++
	_opt++
	goto _6

_7:
	if *(*int8)(unsafe.Pointer(_opt)) == 0 || int32(*(*int8)(unsafe.Pointer(_opt))) == int32('=') {
		goto _8
	}

	goto _3

_8:
	_arg = _opt
	_match = _i
	if *(*int8)(unsafe.Pointer(_name)) != 0 {
		goto _9
	}

	_cnt = int32(1)
	goto _4

_9:
	_cnt++

_3:
	_i++
	goto _2

_4:
	if _cnt != int32(1) || _longonly == 0 || int64(_arg-_start) != int64(Xmblen(tls, _start, uint64(4))) {
		goto _10
	}

	_l = int32(int64(_arg - _start))
	_i = int32(0)
_11:
	if *(*int8)(unsafe.Pointer(_optstring + uintptr(_i))) == 0 {
		goto _13
	}

	_j = int32(0)
_14:
	if _j >= _l || int32(*(*int8)(unsafe.Pointer(_start + uintptr(_j)))) != int32(*(*int8)(unsafe.Pointer(_optstring + uintptr(_i+_j)))) {
		goto _16
	}

	_j++
	goto _14

_16:
	if _j != _l {
		goto _17
	}

	_cnt++
	goto _13

_17:
	_i++
	goto _11

_13:
_10:
	if _cnt != int32(1) {
		goto _18
	}

	_i = _match
	_opt = _arg
	*(*int32)(unsafe.Pointer(Xoptind))++
	if int32(*(*int8)(unsafe.Pointer(_opt))) != int32('=') {
		goto _19
	}

	if *(*int32)(unsafe.Pointer((_longopts + 32*uintptr(_i)) + 8)) != 0 {
		goto _21
	}

	*(*int32)(unsafe.Pointer(Xoptopt)) = *(*int32)(unsafe.Pointer((_longopts + 32*uintptr(_i)) + 24))
	if _colon == 0 && *(*int32)(unsafe.Pointer(Xopterr)) != 0 {
		goto _22
	}

	return int32('?')

_22:
	X__getopt_msg(tls, *(*uintptr)(unsafe.Pointer(_argv)), ts+2100 /* ": option does no..." */, *(*uintptr)(unsafe.Pointer(_longopts + 32*uintptr(_i))), Xstrlen(tls, *(*uintptr)(unsafe.Pointer(_longopts + 32*uintptr(_i)))))
	return int32('?')

_21:
	*(*uintptr)(unsafe.Pointer(Xoptarg)) = _opt + uintptr(1)
	goto _20

_19:
	if *(*int32)(unsafe.Pointer((_longopts + 32*uintptr(_i)) + 8)) != int32(1) {
		goto _23
	}

	if set605((*uintptr)(unsafe.Pointer(Xoptarg)), *(*uintptr)(unsafe.Pointer(_argv + 8*uintptr(*(*int32)(unsafe.Pointer(Xoptind)))))) != 0 {
		goto _24
	}

	*(*int32)(unsafe.Pointer(Xoptopt)) = *(*int32)(unsafe.Pointer((_longopts + 32*uintptr(_i)) + 24))
	if _colon == 0 {
		goto _25
	}

	return int32(':')

_25:
	if *(*int32)(unsafe.Pointer(Xopterr)) != 0 {
		goto _26
	}

	return int32('?')

_26:
	X__getopt_msg(tls, *(*uintptr)(unsafe.Pointer(_argv)), ts+2068 /* ": option require..." */, *(*uintptr)(unsafe.Pointer(_longopts + 32*uintptr(_i))), Xstrlen(tls, *(*uintptr)(unsafe.Pointer(_longopts + 32*uintptr(_i)))))
	return int32('?')

_24:
	*(*int32)(unsafe.Pointer(Xoptind))++
_23:
_20:
	if _idx == 0 {
		goto _27
	}

	*(*int32)(unsafe.Pointer(_idx)) = _i
_27:
	if *(*uintptr)(unsafe.Pointer((_longopts + 32*uintptr(_i)) + 16)) == 0 {
		goto _28
	}

	*(*int32)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer((_longopts + 32*uintptr(_i)) + 16)))) = *(*int32)(unsafe.Pointer((_longopts + 32*uintptr(_i)) + 24))
	return int32(0)

_28:
	return *(*int32)(unsafe.Pointer((_longopts + 32*uintptr(_i)) + 24))

_18:
	if int32(*(*int8)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_argv + 8*uintptr(*(*int32)(unsafe.Pointer(Xoptind))))) + 1))) != int32('-') {
		goto _29
	}

	*(*int32)(unsafe.Pointer(Xoptopt)) = int32(0)
	if _colon != 0 || *(*int32)(unsafe.Pointer(Xopterr)) == 0 {
		goto _30
	}

	X__getopt_msg(tls, *(*uintptr)(unsafe.Pointer(_argv)), func() uintptr {
		if _cnt != 0 {
			return ts + 2140 /* ": option is ambi..." */
		}
		return ts + 2044 /* ": unrecognized o..." */
	}(), *(*uintptr)(unsafe.Pointer(_argv + 8*uintptr(*(*int32)(unsafe.Pointer(Xoptind)))))+uintptr(2), Xstrlen(tls, *(*uintptr)(unsafe.Pointer(_argv + 8*uintptr(*(*int32)(unsafe.Pointer(Xoptind)))))+uintptr(2)))
_30:
	*(*int32)(unsafe.Pointer(Xoptind))++
	return int32('?')

_29:
_1:
	return Xgetopt(tls, _argc, _argv, _optstring)
}

// xpermute is defined at getopt_long.c:11:13
func xpermute(tls TLS, _argv uintptr /* **int8 */, _dest int32, _src int32) {
	var (
		_av  uintptr // **int8
		_tmp uintptr // *int8
		_i   int32
	)
	_av = _argv
	_tmp = *(*uintptr)(unsafe.Pointer(_av + 8*uintptr(_src)))
	_i = _src
_1:
	if _i <= _dest {
		goto _3
	}

	*(*uintptr)(unsafe.Pointer(_av + 8*uintptr(_i))) = *(*uintptr)(unsafe.Pointer(_av + 8*uintptr(_i-int32(1))))
	_i--
	goto _1

_3:
	*(*uintptr)(unsafe.Pointer(_av + 8*uintptr(_dest))) = _tmp
}

type t85size_t = uint64

// linking getpriority.o

// Xgetpriority is defined at getpriority.c:4:5
func Xgetpriority(tls TLS, _which int32, _who uint32) (r int32) {
	var _ret int32

	_ret = int32(X__syscall_ret(tls, uint64(x19__syscall2(tls, int64(140), int64(_which), int64(_who)))))
	if _ret >= int32(0) {
		goto _1
	}

	return _ret

_1:
	return int32(20) - _ret
}

type t528__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t528__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type Tid_t = uint32

// x__syscall2 is defined at syscall_arch.h:24:22
func x19__syscall2(tls TLS, _n int64, _a1 int64, _a2 int64) (r int64) {
	return X__syscall(tls, _n, _a1, _a2, int64(0), int64(0), int64(0), int64(0))
}

// linking getresgid.o

// Xgetresgid is defined at getresgid.c:5:5
func Xgetresgid(tls TLS, _rgid uintptr /* *Tgid_t = uint32 */, _egid uintptr /* *Tgid_t = uint32 */, _sgid uintptr /* *Tgid_t = uint32 */) (r int32) {
	return int32(X__syscall_ret(tls, uint64(x22__syscall3(tls, int64(120), int64(_rgid), int64(_egid), int64(_sgid)))))
}

type t529__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t529__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// x__syscall3 is defined at syscall_arch.h:33:22
func x22__syscall3(tls TLS, _n int64, _a1 int64, _a2 int64, _a3 int64) (r int64) {
	return X__syscall(tls, _n, _a1, _a2, _a3, int64(0), int64(0), int64(0))
}

// linking getresuid.o

// Xgetresuid is defined at getresuid.c:5:5
func Xgetresuid(tls TLS, _ruid uintptr /* *Tuid_t = uint32 */, _euid uintptr /* *Tuid_t = uint32 */, _suid uintptr /* *Tuid_t = uint32 */) (r int32) {
	return int32(X__syscall_ret(tls, uint64(x23__syscall3(tls, int64(118), int64(_ruid), int64(_euid), int64(_suid)))))
}

type t530__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t530__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// x__syscall3 is defined at syscall_arch.h:33:22
func x23__syscall3(tls TLS, _n int64, _a1 int64, _a2 int64, _a3 int64) (r int64) {
	return X__syscall(tls, _n, _a1, _a2, _a3, int64(0), int64(0), int64(0))
}

// linking getrlimit.o

// Xgetrlimit is defined at getrlimit.c:8:5
func Xgetrlimit(tls TLS, _resource int32, _rlim uintptr /* *Srlimit */) (r int32) {
	esc := MustMalloc(16)
	var (
		_k_rlim = esc // *[2]uint64
		_ret    int32
	)
	defer Free(esc)
	_ret = int32(X__syscall_ret(tls, uint64(x16__syscall4(tls, int64(302), int64(0), int64(_resource), int64(0), int64(_rlim)))))
	if _ret != 0 {
		goto _1
	}

	if *(*uint64)(unsafe.Pointer(_rlim)) < uint64(18446744073709551615) {
		goto _3
	}

	*(*uint64)(unsafe.Pointer(_rlim)) = uint64(18446744073709551615)
_3:
	if *(*uint64)(unsafe.Pointer(_rlim + 8)) < uint64(18446744073709551615) {
		goto _5
	}

	*(*uint64)(unsafe.Pointer(_rlim + 8)) = uint64(18446744073709551615)
_5:
_1:
	if _ret != 0 && *(*int32)(unsafe.Pointer(X__errno_location(tls))) == int32(38) {
		goto _6
	}

	return _ret

_6:
	if X__syscall_ret(tls, uint64(x20__syscall2(tls, int64(97), int64(_resource), int64(_k_rlim)))) >= int64(0) {
		goto _7
	}

	return int32(-1)

_7:
	*(*uint64)(unsafe.Pointer(_rlim)) = func() uint64 {
		if *(*uint64)(unsafe.Pointer(_k_rlim)) == uint64(18446744073709551615) {
			return uint64(18446744073709551615)
		}
		return *(*uint64)(unsafe.Pointer(_k_rlim))
	}()
	*(*uint64)(unsafe.Pointer(_rlim + 8)) = func() uint64 {
		if *(*uint64)(unsafe.Pointer(_k_rlim + 8)) == uint64(18446744073709551615) {
			return uint64(18446744073709551615)
		}
		return *(*uint64)(unsafe.Pointer(_k_rlim + 8))
	}()
	if *(*uint64)(unsafe.Pointer(_rlim)) < uint64(18446744073709551615) {
		goto _9
	}

	*(*uint64)(unsafe.Pointer(_rlim)) = uint64(18446744073709551615)
_9:
	if *(*uint64)(unsafe.Pointer(_rlim + 8)) < uint64(18446744073709551615) {
		goto _11
	}

	*(*uint64)(unsafe.Pointer(_rlim + 8)) = uint64(18446744073709551615)
_11:
	return int32(0)
}

type t531__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t531__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type s4rlimit = struct {
	Frlim_cur uint64
	Frlim_max uint64
}

// x__syscall4 is defined at syscall_arch.h:42:22
func x16__syscall4(tls TLS, _n int64, _a1 int64, _a2 int64, _a3 int64, _a4 int64) (r int64) {
	return X__syscall(tls, _n, _a1, _a2, _a3, _a4, int64(0), int64(0))
}

type t4rlim_t = uint64

// x__syscall2 is defined at syscall_arch.h:24:22
func x20__syscall2(tls TLS, _n int64, _a1 int64, _a2 int64) (r int64) {
	return X__syscall(tls, _n, _a1, _a2, int64(0), int64(0), int64(0), int64(0))
}

// linking getrusage.o

// Xgetrusage is defined at getrusage.c:4:5
func Xgetrusage(tls TLS, _who int32, _ru uintptr /* *Srusage */) (r int32) {
	return int32(X__syscall_ret(tls, uint64(x21__syscall2(tls, int64(98), int64(_who), int64(_ru)))))
}

type t532__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t532__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type s2rusage = struct {
	Fru_utime    s11timeval
	Fru_stime    s11timeval
	Fru_maxrss   int64
	Fru_ixrss    int64
	Fru_idrss    int64
	Fru_isrss    int64
	Fru_minflt   int64
	Fru_majflt   int64
	Fru_nswap    int64
	Fru_inblock  int64
	Fru_oublock  int64
	Fru_msgsnd   int64
	Fru_msgrcv   int64
	Fru_nsignals int64
	Fru_nvcsw    int64
	Fru_nivcsw   int64
	F__reserved  [16]int64
}

// x__syscall2 is defined at syscall_arch.h:24:22
func x21__syscall2(tls TLS, _n int64, _a1 int64, _a2 int64) (r int64) {
	return X__syscall(tls, _n, _a1, _a2, int64(0), int64(0), int64(0), int64(0))
}

type s11timeval = struct {
	Ftv_sec  int64
	Ftv_usec int64
}

type t21time_t = int64

type t11suseconds_t = int64

// linking getsubopt.o

func postinc606(p *uintptr) uintptr { r := *p; *p += 1; return r }

// Xgetsubopt is defined at getsubopt.c:4:5
func Xgetsubopt(tls TLS, _opt uintptr /* **int8 */, _keys uintptr /* **int8 */, _val uintptr /* **int8 */) (r int32) {
	var (
		_s uintptr // *int8
		_i int32
		_l uint64
	)
	_s = *(*uintptr)(unsafe.Pointer(_opt))
	*(*uintptr)(unsafe.Pointer(_val)) = null
	*(*uintptr)(unsafe.Pointer(_opt)) = Xstrchr(tls, _s, int32(','))
	if *(*uintptr)(unsafe.Pointer(_opt)) == 0 {
		goto _1
	}

	*(*int8)(unsafe.Pointer(postinc606((*uintptr)(unsafe.Pointer(_opt))))) = int8(0)
	goto _2

_1:
	*(*uintptr)(unsafe.Pointer(_opt)) = _s + uintptr(Xstrlen(tls, _s))
_2:
	_i = int32(0)
_3:
	if *(*uintptr)(unsafe.Pointer(_keys + 8*uintptr(_i))) == 0 {
		goto _5
	}

	_l = Xstrlen(tls, *(*uintptr)(unsafe.Pointer(_keys + 8*uintptr(_i))))
	if Xstrncmp(tls, *(*uintptr)(unsafe.Pointer(_keys + 8*uintptr(_i))), _s, _l) == 0 {
		goto _6
	}

	goto _4

_6:
	if int32(*(*int8)(unsafe.Pointer(_s + uintptr(_l)))) != int32('=') {
		goto _7
	}

	*(*uintptr)(unsafe.Pointer(_val)) = (_s + uintptr(_l)) + uintptr(1)
	goto _8

_7:
	if *(*int8)(unsafe.Pointer(_s + uintptr(_l))) == 0 {
		goto _9
	}

	goto _4

_9:
_8:
	return _i

_4:
	_i++
	goto _3

_5:
	return int32(-1)
}

type t533__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t533__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t86size_t = uint64

// linking initgroups.o

// Xinitgroups is defined at initgroups.c:5:5
func Xinitgroups(tls TLS, _user uintptr /* *int8 */, _gid uint32) (r int32) {
	esc := MustMalloc(132)
	var (
		_groups = esc       // *[32]uint32
		_count  = esc + 128 // *int32
	)
	defer Free(esc)
	*(*int32)(unsafe.Pointer(_count)) = int32(32)
	if Xgetgrouplist(tls, _user, _gid, _groups, _count) >= int32(0) {
		goto _1
	}

	return int32(-1)

_1:
	return Xsetgroups(tls, uint64(*(*int32)(unsafe.Pointer(_count))), _groups)
}

type t534__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t534__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t8gid_t = uint32

type t87size_t = uint64

// linking ioctl.o

// Xioctl is defined at ioctl.c:5:5
func Xioctl(tls TLS, _fd int32, _req int32, ap ...interface{}) (r int32) {
	var (
		_arg uintptr // *void
		_ap  uintptr // Tva_list = T__builtin_va_list = ...truct{Fsize int32;Fdata int8;};}
	)
	_ap = X__builtin_va_start(tls, ap)
	_arg = VAuintptr(_ap)
	X__builtin_free(tls, _ap)
	return int32(X__syscall_ret(tls, uint64(x24__syscall3(tls, int64(16), int64(_fd), int64(_req), int64(_arg)))))
}

type t535__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t535__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// x__syscall3 is defined at syscall_arch.h:33:22
func x24__syscall3(tls TLS, _n int64, _a1 int64, _a2 int64, _a3 int64) (r int64) {
	return X__syscall(tls, _n, _a1, _a2, _a3, int64(0), int64(0), int64(0))
}

// linking issetugid.o

// Xissetugid is defined at issetugid.c:4:5
func Xissetugid(tls TLS) (r int32) {
	return *(*int32)(unsafe.Pointer(X__libc + 8))
}

type t536__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t536__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// linking lockf.o

// Xlockf is defined at lockf.c:6:5
func Xlockf(tls TLS, _fd int32, _op int32, _size int64) (r int32) {
	esc := MustMalloc(32)
	var _l = esc // *Sflock
	defer Free(esc)
	*(*Sflock)(unsafe.Pointer(_l)) = Sflock{
		Fl_type:   int16(1),
		Fl_whence: int16(1),
		Fl_len:    _size,
	}
	switch _op {
	case int32(3):
		goto _2
	case int32(0):
		goto _3
	case int32(2):
		goto _4
	case int32(1):
		goto _5
	}
	goto _1

_2:
	*(*int16)(unsafe.Pointer(_l)) = int16(0)
	if Xfcntl(tls, _fd, int32(5), _l) >= int32(0) {
		goto _6
	}

	return int32(-1)

_6:
	if int32(*(*int16)(unsafe.Pointer(_l))) != int32(2) && *(*int32)(unsafe.Pointer(_l + 24)) != Xgetpid(tls) {
		goto _7
	}

	return int32(0)

_7:
	*(*int32)(unsafe.Pointer(X__errno_location(tls))) = int32(13)
	return int32(-1)

_3:
	*(*int16)(unsafe.Pointer(_l)) = int16(2)
_4:
	return Xfcntl(tls, _fd, int32(6), _l)

_5:
	return Xfcntl(tls, _fd, int32(7), _l)

_1:
	*(*int32)(unsafe.Pointer(X__errno_location(tls))) = int32(22)
	return int32(-1)
}

type t537__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t537__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t27off_t = int64

type Sflock = struct {
	Fl_type   int16
	Fl_whence int16
	Fl_start  int64
	Fl_len    int64
	Fl_pid    int32
}

type t12pid_t = int32

// linking login_tty.o

// Xlogin_tty is defined at login_tty.c:5:5
func Xlogin_tty(tls TLS, _fd int32) (r int32) {
	Xsetsid(tls)
	if Xioctl(tls, _fd, int32(0x540e), null) == 0 {
		goto _1
	}

	return int32(-1)

_1:
	Xdup2(tls, _fd, int32(0))
	Xdup2(tls, _fd, int32(1))
	Xdup2(tls, _fd, int32(2))
	if _fd <= int32(2) {
		goto _2
	}

	Xclose(tls, _fd)
_2:
	return int32(0)
}

type t538__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t538__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t13pid_t = int32

// linking mntent.o

// Xsetmntent is defined at mntent.c:11:6
func Xsetmntent(tls TLS, _name uintptr /* *int8 */, _mode uintptr /* *int8 */) (r uintptr /* *TFILE = S_IO_FILE */) {
	return Xfopen(tls, _name, _mode)
}

// Xendmntent is defined at mntent.c:16:5
func Xendmntent(tls TLS, _f uintptr /* *TFILE = S_IO_FILE */) (r int32) {
	if _f == 0 {
		goto _1
	}

	Xfclose(tls, _f)
_1:
	return int32(1)
}

// Xgetmntent_r is defined at mntent.c:22:15
func Xgetmntent_r(tls TLS, _f uintptr /* *TFILE = S_IO_FILE */, _mnt uintptr /* *Smntent */, _linebuf uintptr /* *int8 */, _buflen int32) (r uintptr /* *Smntent */) {
	esc := MustMalloc(32)
	var (
		_cnt          int32
		_n            = esc // *[8]int32
		_use_internal int32
	)
	defer Free(esc)
	_use_internal = bool2int(_linebuf == xinternal_buf)
	*(*int32)(unsafe.Pointer(_mnt + 32)) = int32(0)
	*(*int32)(unsafe.Pointer(_mnt + 36)) = int32(0)
_1:
	if _use_internal == 0 {
		goto _4
	}

	Xgetline(tls, xinternal_buf, xinternal_bufsize, _f)
	_linebuf = *(*uintptr)(unsafe.Pointer(xinternal_buf))
	goto _5

_4:
	Xfgets(tls, _linebuf, _buflen, _f)
_5:
	if Xfeof(tls, _f) == 0 && Xferror(tls, _f) == 0 {
		goto _6
	}

	return null

_6:
	if Xstrchr(tls, _linebuf, int32('\n')) != 0 {
		goto _7
	}

	Xfscanf(tls, _f, ts+2164 /* "%*[^\n]%*[\n]" */)
	*(*int32)(unsafe.Pointer(X__errno_location(tls))) = int32(34)
	return null

_7:
	_cnt = Xsscanf(tls, _linebuf, ts+2176 /* " %n%*s%n %n%*s%n..." */, _n, _n+4*uintptr(1), _n+4*uintptr(2), _n+4*uintptr(3), _n+4*uintptr(4), _n+4*uintptr(5), _n+4*uintptr(6), _n+4*uintptr(7), _mnt+32, _mnt+36)
	if (_cnt < int32(2)) || (int32(*(*int8)(unsafe.Pointer(_linebuf + uintptr(*(*int32)(unsafe.Pointer(_n)))))) == int32('#')) {
		goto _1
	}

	*(*int8)(unsafe.Pointer(_linebuf + uintptr(*(*int32)(unsafe.Pointer(_n + 4))))) = int8(0)
	*(*int8)(unsafe.Pointer(_linebuf + uintptr(*(*int32)(unsafe.Pointer(_n + 12))))) = int8(0)
	*(*int8)(unsafe.Pointer(_linebuf + uintptr(*(*int32)(unsafe.Pointer(_n + 20))))) = int8(0)
	*(*int8)(unsafe.Pointer(_linebuf + uintptr(*(*int32)(unsafe.Pointer(_n + 28))))) = int8(0)
	*(*uintptr)(unsafe.Pointer(_mnt)) = _linebuf + uintptr(*(*int32)(unsafe.Pointer(_n)))
	*(*uintptr)(unsafe.Pointer(_mnt + 8)) = _linebuf + uintptr(*(*int32)(unsafe.Pointer(_n + 8)))
	*(*uintptr)(unsafe.Pointer(_mnt + 16)) = _linebuf + uintptr(*(*int32)(unsafe.Pointer(_n + 16)))
	*(*uintptr)(unsafe.Pointer(_mnt + 24)) = _linebuf + uintptr(*(*int32)(unsafe.Pointer(_n + 24)))
	return _mnt
}

// Xgetmntent is defined at mntent.c:60:15
func Xgetmntent(tls TLS, _f uintptr /* *TFILE = S_IO_FILE */) (r uintptr /* *Smntent */) {
	return Xgetmntent_r(tls, _f, x607mnt, xinternal_buf, int32(0))
}

// Xaddmntent is defined at mntent.c:66:5
func Xaddmntent(tls TLS, _f uintptr /* *TFILE = S_IO_FILE */, _mnt uintptr /* *Smntent */) (r int32) {
	if Xfseek(tls, _f, int64(0), int32(2)) == 0 {
		goto _1
	}

	return int32(1)

_1:
	return bool2int(Xfprintf(tls, _f, ts+2216 /* "%s\t%s\t%s\t%s\t%d\t%..." */, *(*uintptr)(unsafe.Pointer(_mnt)), *(*uintptr)(unsafe.Pointer(_mnt + 8)), *(*uintptr)(unsafe.Pointer(_mnt + 16)), *(*uintptr)(unsafe.Pointer(_mnt + 24)), *(*int32)(unsafe.Pointer(_mnt + 32)), *(*int32)(unsafe.Pointer(_mnt + 36))) < int32(0))
}

// Xhasmntopt is defined at mntent.c:74:6
func Xhasmntopt(tls TLS, _mnt uintptr /* *Smntent */, _opt uintptr /* *int8 */) (r uintptr /* *int8 */) {
	return Xstrstr(tls, *(*uintptr)(unsafe.Pointer(_mnt + 24)), _opt)
}

type t539__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t539__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type Smntent = struct {
	Fmnt_fsname uintptr // *int8
	Fmnt_dir    uintptr // *int8
	Fmnt_type   uintptr // *int8
	Fmnt_opts   uintptr // *int8
	Fmnt_freq   int32
	Fmnt_passno int32
}

// xinternal_buf *int8, escapes: true, mntent.c:6:13
var xinternal_buf = bss + 2344

// xinternal_bufsize Tsize_t = uint64, escapes: true, mntent.c:7:15
var xinternal_bufsize = bss + 2352

// x3mnt Smntent, escapes: true, mntent.c:62:23
var x607mnt = bss + 2360

type t18ssize_t = int64

type s5_IO_FILE struct{ uintptr }

// linking nftw.o

// Xnftw is defined at nftw.c:108:5
func Xnftw(tls TLS, _path uintptr /* *int8 */, _fn uintptr /* *func(TLS, uintptr, uintptr, int32, uintptr) int32 */, _fd_limit int32, _flags int32) (r int32) {
	esc := MustMalloc(4113)
	var (
		_r       int32
		_cs      = esc // *int32
		_l       uint64
		_pathbuf = esc + 16 // *[4097]int8
	)
	defer Free(esc)
	if _fd_limit > int32(0) {
		goto _1
	}

	return int32(0)

_1:
	_l = Xstrlen(tls, _path)
	if _l <= uint64(4096) {
		goto _2
	}

	*(*int32)(unsafe.Pointer(X__errno_location(tls))) = int32(36)
	return int32(-1)

_2:
	Xmemcpy(tls, _pathbuf, _path, _l+uint64(1))
	Xpthread_setcancelstate(tls, int32(1), _cs)
	_r = xdo_nftw(tls, _pathbuf, _fn, _fd_limit, _flags, null)
	Xpthread_setcancelstate(tls, *(*int32)(unsafe.Pointer(_cs)), null)
	return _r
}

type t540__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t540__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t88size_t = uint64

func set608(p *int32, v int32) int32 { *p = v; return v }

func fn609(p uintptr) func(TLS, uintptr, uintptr, int32, uintptr) int32 {
	return *(*func(TLS, uintptr, uintptr, int32, uintptr) int32)(unsafe.Pointer(&p))
}

func set610(p *uintptr, v uintptr) uintptr { *p = v; return v }

// xdo_nftw is defined at nftw.c:23:12
func xdo_nftw(tls TLS, _path uintptr /* *int8 */, _fn uintptr /* *func(TLS, uintptr, uintptr, int32, uintptr) int32 */, _fd_limit int32, _flags int32, _h uintptr /* *Shistory */) (r int32) {
	esc := MustMalloc(184)
	var (
		_l    uint64
		_j    uint64
		_st   = esc       // *Sstat
		_new  = esc + 144 // *Shistory
		_type int32
		_r    int32
		_lev  = esc + 176 // *SFTW
		_k    uint64
		_d    uintptr // *TDIR = S__dirstream
		_de   uintptr // *Sdirent
	)
	defer Free(esc)
	_l = Xstrlen(tls, _path)
	_j = func() uint64 {
		if (_l != 0) && (int32(*(*int8)(unsafe.Pointer(_path + uintptr(_l-uint64(1))))) == int32('/')) {
			return _l - uint64(1)
		}
		return _l
	}()
	if func() int32 {
		if _flags&int32(1) != 0 {
			return Xlstat(tls, _path, _st)
		}
		return bool2int(Xstat(tls, _path, _st) < int32(0))
	}() == 0 {
		goto _1
	}

	if _flags&int32(1) != 0 || *(*int32)(unsafe.Pointer(X__errno_location(tls))) != int32(2) || Xlstat(tls, _path, _st) != 0 {
		goto _3
	}

	_type = int32(7)
	goto _4

_3:
	if *(*int32)(unsafe.Pointer(X__errno_location(tls))) == int32(13) {
		goto _5
	}

	return int32(-1)

	goto _6

_5:
	_type = int32(4)
_6:
_4:
	goto _2

_1:
	if *(*uint32)(unsafe.Pointer(_st + 24))&uint32(0170000) != uint32(040000) {
		goto _7
	}

	if Xaccess(tls, _path, int32(4)) >= int32(0) {
		goto _9
	}

	_type = int32(3)
	goto _10

_9:
	if (_flags & int32(8)) == 0 {
		goto _11
	}

	_type = int32(6)
	goto _12

_11:
	_type = int32(2)
_12:
_10:
	goto _8

_7:
	if *(*uint32)(unsafe.Pointer(_st + 24))&uint32(0170000) != uint32(0120000) {
		goto _13
	}

	if (_flags & int32(1)) == 0 {
		goto _15
	}

	_type = int32(5)
	goto _16

_15:
	_type = int32(7)
_16:
	goto _14

_13:
	_type = int32(1)
_14:
_8:
_2:
	if _flags&int32(2) == 0 || _h == 0 || *(*uint64)(unsafe.Pointer(_st)) == *(*uint64)(unsafe.Pointer(_h + 8)) {
		goto _17
	}

	return int32(0)

_17:
	*(*uintptr)(unsafe.Pointer(_new)) = _h
	*(*uint64)(unsafe.Pointer(_new + 8)) = *(*uint64)(unsafe.Pointer(_st))
	*(*uint64)(unsafe.Pointer(_new + 16)) = *(*uint64)(unsafe.Pointer(_st + 8))
	*(*int32)(unsafe.Pointer(_new + 24)) = func() int32 {
		if _h != 0 {
			return *(*int32)(unsafe.Pointer(_h + 24)) + int32(1)
		}
		return int32(0)
	}()
	*(*int32)(unsafe.Pointer(_new + 28)) = int32(_j + uint64(1))
	*(*int32)(unsafe.Pointer(_lev + 4)) = *(*int32)(unsafe.Pointer(_new + 24))
	if _h == 0 {
		goto _18
	}

	*(*int32)(unsafe.Pointer(_lev)) = *(*int32)(unsafe.Pointer(_h + 28))
	goto _19

_18:
	_k = _j
_20:
	if _k == 0 || int32(*(*int8)(unsafe.Pointer(_path + uintptr(_k)))) != int32('/') {
		goto _22
	}

	_k--
	goto _20

_22:
_23:
	if _k == 0 || int32(*(*int8)(unsafe.Pointer(_path + uintptr(_k-uint64(1))))) == int32('/') {
		goto _25
	}

	_k--
	goto _23

_25:
	*(*int32)(unsafe.Pointer(_lev)) = int32(_k)
_19:
	if _flags&int32(8) != 0 || set608(&_r, fn609(_fn)(tls, _path, _st, _type, _lev)) == 0 {
		goto _26
	}

	return _r

_26:
_27:
	if _h == 0 {
		goto _29
	}

	if *(*uint64)(unsafe.Pointer(_h + 8)) != *(*uint64)(unsafe.Pointer(_st)) || *(*uint64)(unsafe.Pointer(_h + 16)) != *(*uint64)(unsafe.Pointer(_st + 8)) {
		goto _30
	}

	return int32(0)

_30:
	_h = *(*uintptr)(unsafe.Pointer(_h))
	goto _27

_29:
	if _type != int32(2) && _type != int32(6) || _fd_limit == 0 {
		goto _31
	}

	_d = Xopendir(tls, _path)
	if _d == 0 {
		goto _32
	}

_34:
	if set610(&_de, Xreaddir(tls, _d)) == 0 {
		goto _35
	}

	if int32(*(*int8)(unsafe.Pointer(_de + 19))) != int32('.') || *(*int8)(unsafe.Pointer((_de + 19) + 1)) != 0 && (int32(*(*int8)(unsafe.Pointer((_de + 19) + 1))) != int32('.') || *(*int8)(unsafe.Pointer((_de + 19) + 2)) != 0) {
		goto _36
	}

	goto _34

_36:
	if Xstrlen(tls, _de+19) < uint64(4096)-_l {
		goto _37
	}

	*(*int32)(unsafe.Pointer(X__errno_location(tls))) = int32(36)
	Xclosedir(tls, _d)
	return int32(-1)

_37:
	*(*int8)(unsafe.Pointer(_path + uintptr(_j))) = int8('/')
	Xstrcpy(tls, (_path+uintptr(_j))+uintptr(1), _de+19)
	if set608(&_r, xdo_nftw(tls, _path, _fn, _fd_limit-int32(1), _flags, _new)) == 0 {
		goto _38
	}

	Xclosedir(tls, _d)
	return _r

_38:
	goto _34

_35:
	Xclosedir(tls, _d)
	goto _33

_32:
	if *(*int32)(unsafe.Pointer(X__errno_location(tls))) == int32(13) {
		goto _39
	}

	return int32(-1)

_39:
_33:
_31:
	*(*int8)(unsafe.Pointer(_path + uintptr(_l))) = int8(0)
	if _flags&int32(8) == 0 || set608(&_r, fn609(_fn)(tls, _path, _st, _type, _lev)) == 0 {
		goto _40
	}

	return _r

_40:
	return int32(0)
}

type Shistory = struct {
	Fchain uintptr // *Shistory
	Fdev   uint64
	Fino   uint64
	Flevel int32
	Fbase  int32
}

type s3stat = struct {
	Fst_dev     uint64
	Fst_ino     uint64
	Fst_nlink   uint64
	Fst_mode    uint32
	Fst_uid     uint32
	Fst_gid     uint32
	F__pad0     uint32
	Fst_rdev    uint64
	Fst_size    int64
	Fst_blksize int64
	Fst_blocks  int64
	Fst_atim    s9timespec
	Fst_mtim    s9timespec
	Fst_ctim    s9timespec
	F__unused   [3]int64
}

type SFTW = struct {
	Fbase  int32
	Flevel int32
}

type s6dirent = struct {
	Fd_ino    uint64
	Fd_off    int64
	Fd_reclen uint16
	Fd_type   uint8
	Fd_name   [256]int8
}

type t9mode_t = uint32

type t3dev_t = uint64

type t9ino_t = uint64

type t3nlink_t = uint64

type t9uid_t = uint32

type t9gid_t = uint32

type t28off_t = int64

type t3blksize_t = int64

type t3blkcnt_t = int64

type s9timespec = struct {
	Ftv_sec  int64
	Ftv_nsec int64
}

type t22time_t = int64

type s10__dirstream struct{ uintptr }

// linking openpty.o

func set611(p *int32, v int32) int32 { *p = v; return v }

// Xopenpty is defined at openpty.c:10:5
func Xopenpty(tls TLS, _pm uintptr /* *int32 */, _ps uintptr /* *int32 */, _name uintptr /* *int8 */, _tio uintptr /* *Stermios */, _ws uintptr /* *Swinsize */) (r int32) {
	esc := MustMalloc(52)
	var (
		_m   int32
		_s   int32
		_n   = esc      // *int32
		_cs  = esc + 16 // *int32
		_buf = esc + 32 // *[20]int8
	)
	defer Free(esc)
	*(*int32)(unsafe.Pointer(_n)) = int32(0)
	_m = Xopen(tls, ts+2236 /* "/dev/ptmx" */, int32(258))
	if _m >= int32(0) {
		goto _1
	}

	return int32(-1)

_1:
	Xpthread_setcancelstate(tls, int32(1), _cs)
	if Xioctl(tls, _m, int32(0x40045431), _n) == 0 && Xioctl(tls, _m, int32(-0x7ffbabd0), _n) == 0 {
		goto _2
	}

	goto lfail

_2:
	if _name != 0 {
		goto _3
	}

	_name = _buf
_3:
	Xsnprintf(tls, _name, uint64(20), ts+2248 /* "/dev/pts/%d" */, *(*int32)(unsafe.Pointer(_n)))
	if set611(&_s, Xopen(tls, _name, int32(258))) >= int32(0) {
		goto _4
	}

	goto lfail

_4:
	if _tio == 0 {
		goto _5
	}

	Xtcsetattr(tls, _s, int32(0), _tio)
_5:
	if _ws == 0 {
		goto _6
	}

	Xioctl(tls, _s, int32(0x5414), _ws)
_6:
	*(*int32)(unsafe.Pointer(_pm)) = _m
	*(*int32)(unsafe.Pointer(_ps)) = _s
	Xpthread_setcancelstate(tls, *(*int32)(unsafe.Pointer(_cs)), null)
	return int32(0)

	goto lfail
lfail:
	Xclose(tls, _m)
	Xpthread_setcancelstate(tls, *(*int32)(unsafe.Pointer(_cs)), null)
	return int32(-1)
}

type t541__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t541__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type s2termios = struct {
	Fc_iflag    uint32
	Fc_oflag    uint32
	Fc_cflag    uint32
	Fc_lflag    uint32
	Fc_line     uint8
	Fc_cc       [32]uint8
	F__c_ispeed uint32
	F__c_ospeed uint32
}

type s1winsize = struct {
	Fws_row    uint16
	Fws_col    uint16
	Fws_xpixel uint16
	Fws_ypixel uint16
}

type t2tcflag_t = uint32

type t2cc_t = uint8

type t2speed_t = uint32

type t89size_t = uint64

// linking ptsname.o

// Xptsname is defined at ptsname.c:6:6
func Xptsname(tls TLS, _fd int32) (r uintptr /* *int8 */) {
	var _err int32

	_err = X__ptsname_r(tls, _fd, x612buf, uint64(22))
	if _err == 0 {
		goto _1
	}

	*(*int32)(unsafe.Pointer(X__errno_location(tls))) = _err
	return null

_1:
	return x612buf
}

type t542__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t542__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// x1buf [22]int8, escapes: true, ptsname.c:8:14
var x612buf = bss + 2400

type t90size_t = uint64

// linking pty.o

// Xposix_openpt is defined at pty.c:9:5
func Xposix_openpt(tls TLS, _flags int32) (r int32) {
	return Xopen(tls, ts+2236 /* "/dev/ptmx" */, _flags)
}

// Xgrantpt is defined at pty.c:14:5
func Xgrantpt(tls TLS, _fd int32) (r int32) {
	return int32(0)
}

// Xunlockpt is defined at pty.c:19:5
func Xunlockpt(tls TLS, _fd int32) (r int32) {
	esc := MustMalloc(4)
	var _unlock = esc // *int32
	defer Free(esc)
	*(*int32)(unsafe.Pointer(_unlock)) = int32(0)
	return Xioctl(tls, _fd, int32(0x40045431), _unlock)
}

func set613(p *int32, v int32) int32 { *p = v; return v }

// X__ptsname_r is defined at pty.c:25:5
func X__ptsname_r(tls TLS, _fd int32, _buf uintptr /* *int8 */, _len uint64) (r int32) {
	esc := MustMalloc(4)
	var (
		_pty = esc // *int32
		_err int32
	)
	defer Free(esc)
	if _buf != 0 {
		goto _1
	}

	_len = uint64(0)
_1:
	if set613(&_err, int32(x25__syscall3(tls, int64(16), int64(_fd), int64(2147767344), int64(_pty)))) == 0 {
		goto _2
	}

	return -_err

_2:
	if uint64(Xsnprintf(tls, _buf, _len, ts+2248 /* "/dev/pts/%d" */, *(*int32)(unsafe.Pointer(_pty)))) < _len {
		goto _3
	}

	return int32(34)

_3:
	return int32(0)
}

type t543__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t543__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t91size_t = uint64

// x__syscall3 is defined at syscall_arch.h:33:22
func x25__syscall3(tls TLS, _n int64, _a1 int64, _a2 int64, _a3 int64) (r int64) {
	return X__syscall(tls, _n, _a1, _a2, _a3, int64(0), int64(0), int64(0))
}

// linking realpath.o

// Xrealpath is defined at realpath.c:13:6
func Xrealpath(tls TLS, _filename uintptr /* *int8 */, _resolved uintptr /* *int8 */) (r uintptr /* *int8 */) {
	esc := MustMalloc(4416)
	var (
		_fd  int32
		_r   int64
		_st1 = esc       // *Sstat
		_st2 = esc + 144 // *Sstat
		_buf = esc + 288 // *[27]int8
		_tmp = esc + 320 // *[4096]int8
	)
	defer Free(esc)
	if _filename != 0 {
		goto _1
	}

	*(*int32)(unsafe.Pointer(X__errno_location(tls))) = int32(22)
	return null

_1:
	_fd = int32(X__syscall_ret(tls, uint64(x22__syscall2(tls, int64(2), int64(_filename), int64(2623488)))))
	if _fd >= int32(0) {
		goto _2
	}

	return null

_2:
	X__procfdname(tls, _buf, uint32(_fd))
	_r = Xreadlink(tls, _buf, _tmp, uint64(4095))
	if _r >= int64(0) {
		goto _3
	}

	goto lerr

_3:
	*(*int8)(unsafe.Pointer(_tmp + uintptr(_r))) = int8(0)
	Xfstat(tls, _fd, _st1)
	_r = int64(Xstat(tls, _tmp, _st2))
	if _r >= int64(0) && *(*uint64)(unsafe.Pointer(_st1)) == *(*uint64)(unsafe.Pointer(_st2)) && *(*uint64)(unsafe.Pointer(_st1 + 8)) == *(*uint64)(unsafe.Pointer(_st2 + 8)) {
		goto _4
	}

	if _r != 0 {
		goto _5
	}

	*(*int32)(unsafe.Pointer(X__errno_location(tls))) = int32(40)
_5:
	goto lerr

_4:
	x19__syscall1(tls, int64(3), int64(_fd))
	if _resolved != 0 {
		return Xstrcpy(tls, _resolved, _tmp)
	}

	return Xstrdup(tls, _tmp)

	goto lerr
lerr:
	x19__syscall1(tls, int64(3), int64(_fd))
	return null
}

type t544__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t544__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t19ssize_t = int64

type s4stat = struct {
	Fst_dev     uint64
	Fst_ino     uint64
	Fst_nlink   uint64
	Fst_mode    uint32
	Fst_uid     uint32
	Fst_gid     uint32
	F__pad0     uint32
	Fst_rdev    uint64
	Fst_size    int64
	Fst_blksize int64
	Fst_blocks  int64
	Fst_atim    s10timespec
	Fst_mtim    s10timespec
	Fst_ctim    s10timespec
	F__unused   [3]int64
}

// x__syscall2 is defined at syscall_arch.h:24:22
func x22__syscall2(tls TLS, _n int64, _a1 int64, _a2 int64) (r int64) {
	return X__syscall(tls, _n, _a1, _a2, int64(0), int64(0), int64(0), int64(0))
}

type t4dev_t = uint64

type t10ino_t = uint64

// x__syscall1 is defined at syscall_arch.h:16:22
func x19__syscall1(tls TLS, _n int64, _a1 int64) (r int64) {
	return X__syscall(tls, _n, _a1, int64(0), int64(0), int64(0), int64(0), int64(0))
}

type t4nlink_t = uint64

type t10mode_t = uint32

type t10uid_t = uint32

type t10gid_t = uint32

type t29off_t = int64

type t4blksize_t = int64

type t4blkcnt_t = int64

type s10timespec = struct {
	Ftv_sec  int64
	Ftv_nsec int64
}

type t92size_t = uint64

type t23time_t = int64

// linking setdomainname.o

// Xsetdomainname is defined at setdomainname.c:5:5
func Xsetdomainname(tls TLS, _name uintptr /* *int8 */, _len uint64) (r int32) {
	return int32(X__syscall_ret(tls, uint64(x23__syscall2(tls, int64(171), int64(_name), int64(_len)))))
}

type t545__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t545__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t93size_t = uint64

// x__syscall2 is defined at syscall_arch.h:24:22
func x23__syscall2(tls TLS, _n int64, _a1 int64, _a2 int64) (r int64) {
	return X__syscall(tls, _n, _a1, _a2, int64(0), int64(0), int64(0), int64(0))
}

// linking setpriority.o

// Xsetpriority is defined at setpriority.c:4:5
func Xsetpriority(tls TLS, _which int32, _who uint32, _prio int32) (r int32) {
	return int32(X__syscall_ret(tls, uint64(x26__syscall3(tls, int64(141), int64(_which), int64(_who), int64(_prio)))))
}

type t546__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t546__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t1id_t = uint32

// x__syscall3 is defined at syscall_arch.h:33:22
func x26__syscall3(tls TLS, _n int64, _a1 int64, _a2 int64, _a3 int64) (r int64) {
	return X__syscall(tls, _n, _a1, _a2, _a3, int64(0), int64(0), int64(0))
}

// linking setrlimit.o

// X__setrlimit is defined at setrlimit.c:9:5
func X__setrlimit(tls TLS, _resource int32, _rlim uintptr /* *Srlimit */) (r int32) {
	esc := MustMalloc(32)
	var (
		_k_rlim = esc      // *[2]uint64
		_tmp    = esc + 16 // *Srlimit
		_ret    int32
	)
	defer Free(esc)

	goto _1

	*(*s5rlimit)(unsafe.Pointer(_tmp)) = *(*s5rlimit)(unsafe.Pointer(_rlim))
	if *(*uint64)(unsafe.Pointer(_tmp)) < uint64(18446744073709551615) {
		goto _3
	}

	*(*uint64)(unsafe.Pointer(_tmp)) = uint64(18446744073709551615)
_3:
	if *(*uint64)(unsafe.Pointer(_tmp + 8)) < uint64(18446744073709551615) {
		goto _5
	}

	*(*uint64)(unsafe.Pointer(_tmp + 8)) = uint64(18446744073709551615)
_5:
	_rlim = _tmp
_1:
	_ret = int32(x17__syscall4(tls, int64(302), int64(0), int64(_resource), int64(_rlim), int64(0)))
	if _ret == int32(-38) {
		goto _6
	}

	return _ret

_6:
	*(*uint64)(unsafe.Pointer(_k_rlim)) = func() uint64 {
		if *(*uint64)(unsafe.Pointer(_rlim)) < uint64(18446744073709551615) {
			return *(*uint64)(unsafe.Pointer(_rlim))
		}
		return uint64(18446744073709551615)
	}()
	*(*uint64)(unsafe.Pointer(_k_rlim + 8)) = func() uint64 {
		if *(*uint64)(unsafe.Pointer(_rlim + 8)) < uint64(18446744073709551615) {
			return *(*uint64)(unsafe.Pointer(_rlim + 8))
		}
		return uint64(18446744073709551615)
	}()
	return int32(x24__syscall2(tls, int64(160), int64(_resource), int64(_k_rlim)))
}

func fp614(f func(TLS, uintptr)) uintptr { return *(*uintptr)(unsafe.Pointer(&f)) }

// Xsetrlimit is defined at setrlimit.c:39:5
func Xsetrlimit(tls TLS, _resource int32, _rlim uintptr /* *Srlimit */) (r int32) {
	esc := MustMalloc(16)
	var _c = esc // *Sctx
	defer Free(esc)
	*(*Sctx)(unsafe.Pointer(_c)) = Sctx{
		Fres:  _resource,
		Frlim: _rlim,
		Ferr:  int32(-1),
	}
	X__synccall(tls, fp614(xdo_setrlimit), _c)
	if *(*int32)(unsafe.Pointer(_c + 12)) == 0 {
		goto _1
	}

	if *(*int32)(unsafe.Pointer(_c + 12)) <= int32(0) {
		goto _2
	}

	*(*int32)(unsafe.Pointer(X__errno_location(tls))) = *(*int32)(unsafe.Pointer(_c + 12))
_2:
	return int32(-1)

_1:
	return int32(0)
}

type t547__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t547__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type s5rlimit = struct {
	Frlim_cur uint64
	Frlim_max uint64
}

type t5rlim_t = uint64

// x__syscall4 is defined at syscall_arch.h:42:22
func x17__syscall4(tls TLS, _n int64, _a1 int64, _a2 int64, _a3 int64, _a4 int64) (r int64) {
	return X__syscall(tls, _n, _a1, _a2, _a3, _a4, int64(0), int64(0))
}

// x__syscall2 is defined at syscall_arch.h:24:22
func x24__syscall2(tls TLS, _n int64, _a1 int64, _a2 int64) (r int64) {
	return X__syscall(tls, _n, _a1, _a2, int64(0), int64(0), int64(0), int64(0))
}

type Sctx = struct {
	Frlim uintptr // *Srlimit
	Fres  int32
	Ferr  int32
}

// xdo_setrlimit is defined at setrlimit.c:32:13
func xdo_setrlimit(tls TLS, _p uintptr /* *void */) {
	var _c uintptr // *Sctx

	_c = _p
	if *(*int32)(unsafe.Pointer(_c + 12)) <= int32(0) {
		goto _1
	}

	return

_1:
	*(*int32)(unsafe.Pointer(_c + 12)) = -X__setrlimit(tls, *(*int32)(unsafe.Pointer(_c + 8)), *(*uintptr)(unsafe.Pointer(_c)))
}

// linking syscall.o

// Xsyscall is defined at syscall.c:6:6
func Xsyscall(tls TLS, _n int64, ap ...interface{}) (r int64) {
	var (
		_ap uintptr // Tva_list = T__builtin_va_list = ...truct{Fsize int32;Fdata int8;};}
		_a  int64
		_b  int64
		_c  int64
		_d  int64
		_e  int64
		_f  int64
	)
	_ap = X__builtin_va_start(tls, ap)
	_a = VAint64(_ap)
	_b = VAint64(_ap)
	_c = VAint64(_ap)
	_d = VAint64(_ap)
	_e = VAint64(_ap)
	_f = VAint64(_ap)
	X__builtin_free(tls, _ap)
	return X__syscall_ret(tls, uint64(x5__syscall6(tls, _n, _a, _b, _c, _d, _e, _f)))
}

type t548__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t548__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t3syscall_arg_t = int64

// x__syscall6 is defined at syscall_arch.h:63:22
func x5__syscall6(tls TLS, _n int64, _a1 int64, _a2 int64, _a3 int64, _a4 int64, _a5 int64, _a6 int64) (r int64) {
	return X__syscall(tls, _n, _a1, _a2, _a3, _a4, _a5, _a6)
}

// linking syslog.o

// Xsetlogmask is defined at syslog.c:21:5
func Xsetlogmask(tls TLS, _maskpri int32) (r int32) {
	var _ret int32

	X__lock(tls, x2lock)
	_ret = xlog_mask
	if _maskpri == 0 {
		goto _1
	}

	xlog_mask = _maskpri
_1:
	X__unlock(tls, x2lock)
	return _ret
}

// Xcloselog is defined at syslog.c:38:6
func Xcloselog(tls TLS) {
	esc := MustMalloc(4)
	var _cs = esc // *int32
	defer Free(esc)
	Xpthread_setcancelstate(tls, int32(1), _cs)
	X__lock(tls, x2lock)
	Xclose(tls, xlog_fd)
	xlog_fd = int32(-1)
	X__unlock(tls, x2lock)
	Xpthread_setcancelstate(tls, *(*int32)(unsafe.Pointer(_cs)), null)
}

// Xopenlog is defined at syslog.c:55:6
func Xopenlog(tls TLS, _ident uintptr /* *int8 */, _opt int32, _facility int32) {
	esc := MustMalloc(4)
	var (
		_cs = esc // *int32
		_n  uint64
	)
	defer Free(esc)
	Xpthread_setcancelstate(tls, int32(1), _cs)
	X__lock(tls, x2lock)
	if _ident == 0 {
		goto _1
	}

	_n = Xstrnlen(tls, _ident, uint64(31))
	Xmemcpy(tls, xlog_ident, _ident, _n)
	*(*int8)(unsafe.Pointer(xlog_ident + uintptr(_n))) = int8(0)
	goto _2

_1:
	*(*int8)(unsafe.Pointer(xlog_ident)) = int8(0)
_2:
	xlog_opt = _opt
	xlog_facility = _facility
	if _opt&int32(0x8) == 0 || xlog_fd >= int32(0) {
		goto _3
	}

	x__openlog(tls)
_3:
	X__unlock(tls, x2lock)
	Xpthread_setcancelstate(tls, *(*int32)(unsafe.Pointer(_cs)), null)
}

// X__vsyslog is defined at syslog.c:125:6
func X__vsyslog(tls TLS, _priority int32, _message uintptr /* *int8 */, _ap uintptr) {
	esc := MustMalloc(4)
	var _cs = esc // *int32
	defer Free(esc)
	if xlog_mask&(int32(1)<<(uint(_priority&int32(7))%32)) != 0 && _priority&int32(-1024) == 0 {
		goto _1
	}

	return

_1:
	Xpthread_setcancelstate(tls, int32(1), _cs)
	X__lock(tls, x2lock)
	x_vsyslog(tls, _priority, _message, _ap)
	X__unlock(tls, x2lock)
	Xpthread_setcancelstate(tls, *(*int32)(unsafe.Pointer(_cs)), null)
}

// Xsyslog is defined at syslog.c:136:6
func Xsyslog(tls TLS, _priority int32, _message uintptr /* *int8 */, ap ...interface{}) {
	var _ap uintptr // Tva_list = T__builtin_va_list = ...truct{Fsize int32;Fdata int8;};}

	_ap = X__builtin_va_start(tls, ap)
	X__vsyslog(tls, _priority, _message, _ap)
	X__builtin_free(tls, _ap)
}

type t549__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t549__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// xlock [1]int32, escapes: true, syslog.c:14:21
var x2lock = bss + 2424

// xlog_mask int32, escapes: false, syslog.c:18:12
var xlog_mask = int32(0xff)

// xlog_fd int32, escapes: false, syslog.c:19:12
var xlog_fd = int32(-1)

type t94size_t = uint64

// xlog_ident [32]int8, escapes: true, syslog.c:15:13
var xlog_ident = bss + 2432

// xlog_opt int32, escapes: false, syslog.c:16:12
var xlog_opt int32

// xlog_facility int32, escapes: false, syslog.c:17:12
var xlog_facility = int32(8)

// x__openlog is defined at syslog.c:49:13
func x__openlog(tls TLS) {
	xlog_fd = Xsocket(tls, int32(1), int32(524290), int32(0))
	if xlog_fd < int32(0) {
		goto _1
	}

	Xconnect(tls, xlog_fd, xlog_addr, uint32(12))
_1:
}

func postinc615(p *int32) int32 { r := *p; *p += 1; return r }

// x_vsyslog is defined at syslog.c:82:13
func x_vsyslog(tls TLS, _priority int32, _message uintptr /* *int8 */, _ap uintptr) {
	esc := MustMalloc(1124)
	var (
		_timebuf    = esc      // *[16]int8
		_now        = esc + 16 // *Ttime_t = int64
		_tm         = esc + 32 // *Stm
		_buf        = esc + 96 // *[1024]int8
		_errno_save int32
		_pid        int32
		_l          int32
		_l2         int32
		_hlen       = esc + 1120 // *int32
		_fd         int32
	)
	defer Free(esc)
	_errno_save = *(*int32)(unsafe.Pointer(X__errno_location(tls)))
	if xlog_fd >= int32(0) {
		goto _1
	}

	x__openlog(tls)
_1:
	if _priority&int32(0x3f8) != 0 {
		goto _2
	}

	_priority = _priority | xlog_facility
_2:
	*(*int64)(unsafe.Pointer(_now)) = Xtime(tls, null)
	Xgmtime_r(tls, _now, _tm)
	Xstrftime(tls, _timebuf, uint64(16), ts+2260 /* "%b %e %T" */, _tm)
	_pid = func() int32 {
		if xlog_opt&int32(0x1) != 0 {
			return Xgetpid(tls)
		}
		return int32(0)
	}()
	_l = Xsnprintf(tls, _buf, uint64(1024), ts+2272 /* "<%d>%s %n%s%s%.0..." */, _priority, _timebuf, _hlen, xlog_ident, ts+2296 /* "[" */ +uintptr(bool2int(_pid == 0)), _pid, ts+2300 /* "]" */ +uintptr(bool2int(_pid == 0)))
	*(*int32)(unsafe.Pointer(X__errno_location(tls))) = _errno_save
	_l2 = Xvsnprintf(tls, _buf+uintptr(_l), uint64(1024)-uint64(_l), _message, _ap)
	if _l2 < int32(0) {
		goto _3
	}

	if uint64(_l2) < uint64(1024)-uint64(_l) {
		goto _4
	}

	_l = int32(1023)
	goto _5

_4:
	_l = _l + _l2
_5:
	if int32(*(*int8)(unsafe.Pointer(_buf + uintptr(_l-int32(1))))) == int32('\n') {
		goto _6
	}

	*(*int8)(unsafe.Pointer(_buf + uintptr(postinc615(&_l)))) = int8('\n')
_6:
	if Xsend(tls, xlog_fd, _buf, uint64(_l), int32(0)) >= int64(0) || xis_lost_conn(tls, *(*int32)(unsafe.Pointer(X__errno_location(tls)))) != 0 && Xconnect(tls, xlog_fd, xlog_addr, uint32(12)) >= int32(0) && Xsend(tls, xlog_fd, _buf, uint64(_l), int32(0)) >= int64(0) || xlog_opt&int32(0x2) == 0 {
		goto _7
	}

	_fd = Xopen(tls, ts+1988 /* "/dev/console" */, int32(524545))
	if _fd < int32(0) {
		goto _8
	}

	Xdprintf(tls, _fd, ts+2304 /* "%.*s" */, _l-*(*int32)(unsafe.Pointer(_hlen)), _buf+uintptr(*(*int32)(unsafe.Pointer(_hlen))))
	Xclose(tls, _fd)
_8:
_7:
	if (xlog_opt & int32(0x20)) == 0 {
		goto _9
	}

	Xdprintf(tls, int32(2), ts+2304 /* "%.*s" */, _l-*(*int32)(unsafe.Pointer(_hlen)), _buf+uintptr(*(*int32)(unsafe.Pointer(_hlen))))
_9:
_3:
}

// xlog_addr struct{Fsun_family int16;Fsun_path [9]int8;}, escapes: true, syslog.c:33:3
var xlog_addr = ds + 42944

type Stm = struct {
	Ftm_sec    int32
	Ftm_min    int32
	Ftm_hour   int32
	Ftm_mday   int32
	Ftm_mon    int32
	Ftm_year   int32
	Ftm_wday   int32
	Ftm_yday   int32
	Ftm_isdst  int32
	Ftm_gmtoff int64
	Ftm_zone   uintptr // *int8
}

type t24time_t = int64

type t14pid_t = int32

type t20ssize_t = int64

// xis_lost_conn is defined at syslog.c:77:12
func xis_lost_conn(tls TLS, _e int32) (r int32) {
	return bool2int((((_e == int32(111)) || (_e == int32(104))) || (_e == int32(107))) || (_e == int32(32)))
}

type Tsocklen_t = uint32

// linking uname.o

// Xuname is defined at uname.c:4:5
func Xuname(tls TLS, _uts uintptr /* *Sutsname */) (r int32) {
	return int32(X__syscall_ret(tls, uint64(x20__syscall1(tls, int64(63), int64(_uts)))))
}

type t550__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t550__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type s1utsname = struct {
	Fsysname      [65]int8
	Fnodename     [65]int8
	Frelease      [65]int8
	Fversion      [65]int8
	Fmachine      [65]int8
	F__domainname [65]int8
}

// x__syscall1 is defined at syscall_arch.h:16:22
func x20__syscall1(tls TLS, _n int64, _a1 int64) (r int64) {
	return X__syscall(tls, _n, _a1, int64(0), int64(0), int64(0), int64(0), int64(0))
}

// linking wordexp.o

// Xwordexp is defined at wordexp.c:173:5
func Xwordexp(tls TLS, _s uintptr /* *int8 */, _we uintptr /* *Twordexp_t = struct{Fwe_wordc u...e_wordv **int8;Fwe_offs uint64;} */, _flags int32) (r int32) {
	esc := MustMalloc(4)
	var (
		_r  int32
		_cs = esc // *int32
	)
	defer Free(esc)
	Xpthread_setcancelstate(tls, int32(1), _cs)
	_r = xdo_wordexp(tls, _s, _we, _flags)
	Xpthread_setcancelstate(tls, *(*int32)(unsafe.Pointer(_cs)), null)
	return _r
}

// Xwordfree is defined at wordexp.c:182:6
func Xwordfree(tls TLS, _we uintptr /* *Twordexp_t = struct{Fwe_wordc u...e_wordv **int8;Fwe_offs uint64;} */) {
	var _i uint64

	if *(*uintptr)(unsafe.Pointer(_we + 8)) != 0 {
		goto _1
	}

	return

_1:
	_i = uint64(0)
_2:
	if _i >= *(*uint64)(unsafe.Pointer(_we)) {
		goto _4
	}

	Xfree(tls, *(*uintptr)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_we + 8)) + 8*uintptr(*(*uint64)(unsafe.Pointer(_we + 16))+_i))))
	_i++
	goto _2

_4:
	Xfree(tls, *(*uintptr)(unsafe.Pointer(_we + 8)))
	*(*uintptr)(unsafe.Pointer(_we + 8)) = null
	*(*uint64)(unsafe.Pointer(_we)) = uint64(0)
}

type t551__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t551__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t95size_t = uint64

func set616(p *uintptr, v uintptr) uintptr { *p = v; return v }

func postinc617(p *uint64) uint64 { r := *p; *p += 1; return r }

// xdo_wordexp is defined at wordexp.c:29:12
func xdo_wordexp(tls TLS, _s uintptr /* *int8 */, _we uintptr /* *Twordexp_t = struct{Fwe_wordc u...e_wordv **int8;Fwe_offs uint64;} */, _flags int32) (r int32) {
	esc := MustMalloc(144)
	var (
		_i     uint64
		_l     uint64
		_sq    int32
		_dq    int32
		_np    uint64
		_w     uintptr // *int8
		_tmp   uintptr // **int8
		_redir uintptr // *int8
		_err   int32
		_f     uintptr // *TFILE = S_IO_FILE
		_wc    uint64
		_wv    uintptr // **int8
		_p     = esc   // *[2]int32
		_pid   int32
		_set   = esc + 16 // *Tsigset_t = struct{F__bits [16]uint64;}
	)
	defer Free(esc)
	_sq = int32(0)
	_dq = int32(0)
	_np = uint64(0)
	_redir = func() uintptr {
		if _flags&int32(16) != 0 {
			return ts + 112 /* "" */
		}
		return ts + 2312 /* "2>/dev/null" */
	}()
	_err = int32(0)
	_wc = uint64(0)
	_wv = 0
	if (_flags & int32(8)) == 0 {
		goto _1
	}

	Xwordfree(tls, _we)
_1:
	if (_flags & int32(4)) == 0 {
		goto _2
	}

	_i = uint64(0)
_3:
	if *(*int8)(unsafe.Pointer(_s + uintptr(_i))) == 0 {
		goto _5
	}

	switch int32(*(*int8)(unsafe.Pointer(_s + uintptr(_i)))) {
	case int32('\\'):
		goto _7
	case int32('\''):
		goto _8
	case int32('"'):
		goto _9
	case int32('('):
		goto _10
	case int32(')'):
		goto _11
	case int32('\n'):
		goto _12
	case int32('|'):
		goto _13
	case int32('&'):
		goto _14
	case int32(';'):
		goto _15
	case int32('<'):
		goto _16
	case int32('>'):
		goto _17
	case int32('{'):
		goto _18
	case int32('}'):
		goto _19
	case int32('$'):
		goto _20
	case int32('`'):
		goto _21
	}
	goto _6

_7:
	if _sq != 0 {
		goto _22
	}

	_i++
_22:
	goto _6

_8:
	if _dq != 0 {
		goto _23
	}

	_sq = _sq ^ int32(1)
_23:
	goto _6

_9:
	if _sq != 0 {
		goto _24
	}

	_dq = _dq ^ int32(1)
_24:
	goto _6

_10:
	if _np == 0 {
		goto _25
	}

	_np++
	goto _6

_25:
_11:
	if _np == 0 {
		goto _26
	}

	_np--
	goto _6

_26:
_12:
_13:
_14:
_15:
_16:
_17:
_18:
_19:
	if uint64(_sq|_dq)|_np != 0 {
		goto _27
	}

	return int32(2)

_27:
	goto _6

_20:
	if _sq == 0 {
		goto _28
	}

	goto _6

_28:
	if int32(*(*int8)(unsafe.Pointer(_s + uintptr(_i+uint64(1))))) != int32('(') || int32(*(*int8)(unsafe.Pointer(_s + uintptr(_i+uint64(2))))) != int32('(') {
		goto _29
	}

	_i = _i + uint64(2)
	_np = _np + uint64(2)
	goto _6

	goto _30

_29:
	if int32(*(*int8)(unsafe.Pointer(_s + uintptr(_i+uint64(1))))) == int32('(') {
		goto _31
	}

	goto _6

_31:
_30:
_21:
	if _sq == 0 {
		goto _32
	}

	goto _6

_32:
	return int32(4)

_6:
	_i++
	goto _3

_5:
_2:
	if (_flags & int32(2)) == 0 {
		goto _33
	}

	_wc = *(*uint64)(unsafe.Pointer(_we))
	_wv = *(*uintptr)(unsafe.Pointer(_we + 8))
_33:
	_i = _wc
	if (_flags & int32(1)) == 0 {
		goto _34
	}

	if *(*uint64)(unsafe.Pointer(_we + 16)) <= uint64(576460752303423487) {
		goto _36
	}

	goto lnospace

_36:
	_i = _i + *(*uint64)(unsafe.Pointer(_we + 16))
	goto _35

_34:
	*(*uint64)(unsafe.Pointer(_we + 16)) = uint64(0)
_35:
	if Xpipe2(tls, _p, int32(02000000)) >= int32(0) {
		goto _37
	}

	goto lnospace

_37:
	X__block_all_sigs(tls, _set)
	_pid = Xfork(tls)
	X__restore_sigs(tls, _set)
	if _pid >= int32(0) {
		goto _38
	}

	Xclose(tls, *(*int32)(unsafe.Pointer(_p)))
	Xclose(tls, *(*int32)(unsafe.Pointer(_p + 4)))
	goto lnospace

_38:
	if _pid != 0 {
		goto _39
	}

	if *(*int32)(unsafe.Pointer(_p + 4)) != int32(1) {
		goto _40
	}

	Xfcntl(tls, int32(1), int32(2), int32(0))
	goto _41

_40:
	Xdup2(tls, *(*int32)(unsafe.Pointer(_p + 4)), int32(1))
_41:
	Xexecl(tls, ts+2324 /* "/bin/sh" */, ts+2332 /* "sh" */, ts+2336 /* "-c" */, ts+2340 /* "eval \"printf %s\\..." */, ts+2332 /* "sh" */, _s, _redir, null)
	X_exit(tls, int32(1))
_39:
	Xclose(tls, *(*int32)(unsafe.Pointer(_p + 4)))
	_f = Xfdopen(tls, *(*int32)(unsafe.Pointer(_p)), ts+2372 /* "r" */)
	if _f != 0 {
		goto _42
	}

	Xclose(tls, *(*int32)(unsafe.Pointer(_p)))
	Xkill(tls, _pid, int32(9))
	xreap(tls, _pid)
	goto lnospace

_42:
	_l = func() uint64 {
		if _wv != 0 {
			return _i + uint64(1)
		}
		return uint64(0)
	}()
	Xfree(tls, xgetword(tls, _f))
	if Xfeof(tls, _f) == 0 {
		goto _43
	}

	Xfclose(tls, _f)
	xreap(tls, _pid)
	return int32(5)

_43:
_44:
	if set616(&_w, xgetword(tls, _f)) == 0 {
		goto _45
	}

	if _i+uint64(1) < _l {
		goto _46
	}

	_l = _l + (_l/uint64(2) + uint64(10))
	_tmp = Xrealloc(tls, _wv, _l*uint64(8))
	if _tmp != 0 {
		goto _47
	}

	goto _45

_47:
	_wv = _tmp
_46:
	*(*uintptr)(unsafe.Pointer(_wv + 8*uintptr(postinc617(&_i)))) = _w
	*(*uintptr)(unsafe.Pointer(_wv + 8*uintptr(_i))) = null
	goto _44

_45:
	if Xfeof(tls, _f) != 0 {
		goto _48
	}

	_err = int32(1)
_48:
	Xfclose(tls, _f)
	xreap(tls, _pid)
	if _wv != 0 {
		goto _49
	}

	_wv = Xcalloc(tls, _i+uint64(1), uint64(8))
_49:
	*(*uintptr)(unsafe.Pointer(_we + 8)) = _wv
	*(*uint64)(unsafe.Pointer(_we)) = _i
	if (_flags & int32(1)) == 0 {
		goto _50
	}

	if _wv == 0 {
		goto _51
	}

	_i = *(*uint64)(unsafe.Pointer(_we + 16))
_52:
	if _i == 0 {
		goto _54
	}

	*(*uintptr)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_we + 8)) + 8*uintptr(_i-uint64(1)))) = null
	_i--
	goto _52

_54:
_51:
	{
		p := (*uint64)(unsafe.Pointer(_we))
		*p = *p - *(*uint64)(unsafe.Pointer(_we + 16))
	}
_50:
	return _err

	goto lnospace
lnospace:
	if _flags&int32(2) != 0 {
		goto _55
	}

	*(*uint64)(unsafe.Pointer(_we)) = uint64(0)
	*(*uintptr)(unsafe.Pointer(_we + 8)) = null
_55:
	return int32(1)
}

type t15pid_t = int32

// xreap is defined at wordexp.c:15:13
func xreap(tls TLS, _pid int32) {
	esc := MustMalloc(4)
	var _status = esc // *int32
	defer Free(esc)
_1:
	if Xwaitpid(tls, _pid, _status, int32(0)) >= int32(0) || *(*int32)(unsafe.Pointer(X__errno_location(tls))) != int32(4) {
		goto _2
	}

	goto _1

_2:
}

// xgetword is defined at wordexp.c:21:13
func xgetword(tls TLS, _f uintptr /* *TFILE = S_IO_FILE */) (r uintptr /* *int8 */) {
	X__assert_fail(tls, ts+0 /* "TODO(ccgo)" */, ts+2376 /* "src/misc/wordexp..." */, int32(23), x618__func__)
	X__assert_fail(tls, ts+0 /* "TODO(ccgo)" */, ts+2376 /* "src/misc/wordexp..." */, int32(25), x618__func__)
	return r
}

// x4__func__ [8]int8, escapes: true, wordexp.c:22:1
var x618__func__ = ds + 42960

type s6_IO_FILE struct{ uintptr }

// linking madvise.o

// X__madvise is defined at madvise.c:5:5
func X__madvise(tls TLS, _addr uintptr /* *void */, _len uint64, _advice int32) (r int32) {
	return int32(X__syscall_ret(tls, uint64(x27__syscall3(tls, int64(28), int64(_addr), int64(_len), int64(_advice)))))
}

type t552__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t552__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t96size_t = uint64

// x__syscall3 is defined at syscall_arch.h:33:22
func x27__syscall3(tls TLS, _n int64, _a1 int64, _a2 int64, _a3 int64) (r int64) {
	return X__syscall(tls, _n, _a1, _a2, _a3, int64(0), int64(0), int64(0))
}

// linking mincore.o

// Xmincore is defined at mincore.c:5:5
func Xmincore(tls TLS, _addr uintptr /* *void */, _len uint64, _vec uintptr /* *uint8 */) (r int32) {
	return int32(X__syscall_ret(tls, uint64(x28__syscall3(tls, int64(27), int64(_addr), int64(_len), int64(_vec)))))
}

type t553__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t553__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t97size_t = uint64

// x__syscall3 is defined at syscall_arch.h:33:22
func x28__syscall3(tls TLS, _n int64, _a1 int64, _a2 int64, _a3 int64) (r int64) {
	return X__syscall(tls, _n, _a1, _a2, _a3, int64(0), int64(0), int64(0))
}

// linking mlock.o

// Xmlock is defined at mlock.c:4:5
func Xmlock(tls TLS, _addr uintptr /* *void */, _len uint64) (r int32) {
	return int32(X__syscall_ret(tls, uint64(x25__syscall2(tls, int64(149), int64(_addr), int64(_len)))))
}

type t554__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t554__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t98size_t = uint64

// x__syscall2 is defined at syscall_arch.h:24:22
func x25__syscall2(tls TLS, _n int64, _a1 int64, _a2 int64) (r int64) {
	return X__syscall(tls, _n, _a1, _a2, int64(0), int64(0), int64(0), int64(0))
}

// linking mlockall.o

// Xmlockall is defined at mlockall.c:4:5
func Xmlockall(tls TLS, _flags int32) (r int32) {
	return int32(X__syscall_ret(tls, uint64(x21__syscall1(tls, int64(151), int64(_flags)))))
}

type t555__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t555__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// x__syscall1 is defined at syscall_arch.h:16:22
func x21__syscall1(tls TLS, _n int64, _a1 int64) (r int64) {
	return X__syscall(tls, _n, _a1, int64(0), int64(0), int64(0), int64(0), int64(0))
}

// linking mmap.o

// X__mmap is defined at mmap.c:15:6
func X__mmap(tls TLS, _start uintptr /* *void */, _len uint64, _prot int32, _flags int32, _fd int32, _off int64) (r uintptr /* *void */) {
	var _ret int64

	if (uint64(_off) & uint64(4095)) == 0 {
		goto _1
	}

	*(*int32)(unsafe.Pointer(X__errno_location(tls))) = int32(22)
	return uintptr(18446744073709551615)

_1:
	if _len < uint64(0x7fffffffffffffff) {
		goto _2
	}

	*(*int32)(unsafe.Pointer(X__errno_location(tls))) = int32(12)
	return uintptr(18446744073709551615)

_2:
	if (_flags & int32(0x10)) == 0 {
		goto _3
	}

	X__vm_wait(tls)
_3:
	_ret = x6__syscall6(tls, int64(9), int64(_start), int64(_len), int64(_prot), int64(_flags), int64(_fd), _off)
	if _ret != int64(-1) || _start != 0 || _flags&int32(0x20) == 0 || _flags&int32(0x10) != 0 {
		goto _4
	}

	_ret = int64(-12)
_4:
	return uintptr(X__syscall_ret(tls, uint64(_ret)))
}

type t556__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t556__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// xdummy is defined at mmap.c:9:13
func x7dummy(tls TLS) {
}

type t99size_t = uint64

type t30off_t = int64

// x__syscall6 is defined at syscall_arch.h:63:22
func x6__syscall6(tls TLS, _n int64, _a1 int64, _a2 int64, _a3 int64, _a4 int64, _a5 int64, _a6 int64) (r int64) {
	return X__syscall(tls, _n, _a1, _a2, _a3, _a4, _a5, _a6)
}

// linking mprotect.o

// X__mprotect is defined at mprotect.c:5:5
func X__mprotect(tls TLS, _addr uintptr /* *void */, _len uint64, _prot int32) (r int32) {
	var (
		_start uint64
		_end   uint64
	)
	_start = uint64(_addr) & uint64(18446744073709547520)
	_end = uint64(((_addr+uintptr(_len))+uintptr(4096))-uintptr(1)) & uint64(18446744073709547520)
	return int32(X__syscall_ret(tls, uint64(x29__syscall3(tls, int64(10), int64(_start), int64(_end-_start), int64(_prot)))))
}

type t557__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t557__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t100size_t = uint64

// x__syscall3 is defined at syscall_arch.h:33:22
func x29__syscall3(tls TLS, _n int64, _a1 int64, _a2 int64, _a3 int64) (r int64) {
	return X__syscall(tls, _n, _a1, _a2, _a3, int64(0), int64(0), int64(0))
}

// linking mremap.o

// X__mremap is defined at mremap.c:13:6
func X__mremap(tls TLS, _old_addr uintptr /* *void */, _old_len uint64, _new_len uint64, _flags int32, ap ...interface{}) (r uintptr /* *void */) {
	var (
		_ap       uintptr // Tva_list = T__builtin_va_list = ...truct{Fsize int32;Fdata int8;};}
		_new_addr uintptr // *void
	)
	_new_addr = 0
	if _new_len < uint64(0x7fffffffffffffff) {
		goto _1
	}

	*(*int32)(unsafe.Pointer(X__errno_location(tls))) = int32(12)
	return uintptr(18446744073709551615)

_1:
	if (_flags & int32(2)) == 0 {
		goto _2
	}

	X__vm_wait(tls)
	_ap = X__builtin_va_start(tls, ap)
	_new_addr = VAuintptr(_ap)
	X__builtin_free(tls, _ap)
_2:
	return uintptr(X__syscall_ret(tls, uint64(x6__syscall5(tls, int64(25), int64(_old_addr), int64(_old_len), int64(_new_len), int64(_flags), int64(_new_addr)))))
}

type t558__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t558__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// xdummy is defined at mremap.c:10:13
func x8dummy(tls TLS) {
}

type t101size_t = uint64

// x__syscall5 is defined at syscall_arch.h:52:22
func x6__syscall5(tls TLS, _n int64, _a1 int64, _a2 int64, _a3 int64, _a4 int64, _a5 int64) (r int64) {
	return X__syscall(tls, _n, _a1, _a2, _a3, _a4, _a5, int64(0))
}

// linking msync.o

// Xmsync is defined at msync.c:5:5
func Xmsync(tls TLS, _start uintptr /* *void */, _len uint64, _flags int32) (r int32) {
	X__assert_fail(tls, ts+0 /* "TODO(ccgo)" */, ts+2396 /* "src/mman/msync.c" */, int32(7), x619__func__)
	return r
}

type t559__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t559__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t102size_t = uint64

// x1__func__ [6]int8, escapes: true, msync.c:6:1
var x619__func__ = ds + 42968

// linking munlock.o

// Xmunlock is defined at munlock.c:4:5
func Xmunlock(tls TLS, _addr uintptr /* *void */, _len uint64) (r int32) {
	return int32(X__syscall_ret(tls, uint64(x26__syscall2(tls, int64(150), int64(_addr), int64(_len)))))
}

type t560__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t560__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t103size_t = uint64

// x__syscall2 is defined at syscall_arch.h:24:22
func x26__syscall2(tls TLS, _n int64, _a1 int64, _a2 int64) (r int64) {
	return X__syscall(tls, _n, _a1, _a2, int64(0), int64(0), int64(0), int64(0))
}

// linking munlockall.o

// Xmunlockall is defined at munlockall.c:4:5
func Xmunlockall(tls TLS) (r int32) {
	return int32(X__syscall_ret(tls, uint64(x2__syscall0(tls, int64(152)))))
}

type t561__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t561__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// x__syscall0 is defined at syscall_arch.h:8:22
func x2__syscall0(tls TLS, _n int64) (r int64) {
	return X__syscall(tls, _n, int64(0), int64(0), int64(0), int64(0), int64(0), int64(0))
}

// linking munmap.o

// X__munmap is defined at munmap.c:8:5
func X__munmap(tls TLS, _start uintptr /* *void */, _len uint64) (r int32) {
	X__vm_wait(tls)
	return int32(X__syscall_ret(tls, uint64(x27__syscall2(tls, int64(11), int64(_start), int64(_len)))))
}

type t562__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t562__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// xdummy is defined at munmap.c:5:13
func x9dummy(tls TLS) {
}

type t104size_t = uint64

// x__syscall2 is defined at syscall_arch.h:24:22
func x27__syscall2(tls TLS, _n int64, _a1 int64, _a2 int64) (r int64) {
	return X__syscall(tls, _n, _a1, _a2, int64(0), int64(0), int64(0), int64(0))
}

// linking posix_madvise.o

// Xposix_madvise is defined at posix_madvise.c:5:5
func Xposix_madvise(tls TLS, _addr uintptr /* *void */, _len uint64, _advice int32) (r int32) {
	if _advice != int32(4) {
		goto _1
	}

	return int32(0)

_1:
	return int32(-x30__syscall3(tls, int64(28), int64(_addr), int64(_len), int64(_advice)))
}

type t563__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t563__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t105size_t = uint64

// x__syscall3 is defined at syscall_arch.h:33:22
func x30__syscall3(tls TLS, _n int64, _a1 int64, _a2 int64, _a3 int64) (r int64) {
	return X__syscall(tls, _n, _a1, _a2, _a3, int64(0), int64(0), int64(0))
}

// linking shm_open.o

func set620(p *uintptr, v uintptr) uintptr { *p = v; return v }

// X__shm_mapname is defined at shm_open.c:11:6
func X__shm_mapname(tls TLS, _name uintptr /* *int8 */, _buf uintptr /* *int8 */) (r uintptr /* *int8 */) {
	var _p uintptr // *int8

_1:
	if int32(*(*int8)(unsafe.Pointer(_name))) != int32('/') {
		goto _2
	}

	_name++
	goto _1

_2:
	if *(*int8)(unsafe.Pointer(set620(&_p, X__strchrnul(tls, _name, int32('/'))))) == 0 && _p != _name && (int64(_p-_name) > int64(2) || int32(*(*int8)(unsafe.Pointer(_name))) != int32('.') || int32(*(*int8)(unsafe.Pointer(_p - 1))) != int32('.')) {
		goto _3
	}

	*(*int32)(unsafe.Pointer(X__errno_location(tls))) = int32(22)
	return null

_3:
	if int64(_p-_name) <= int64(255) {
		goto _4
	}

	*(*int32)(unsafe.Pointer(X__errno_location(tls))) = int32(36)
	return null

_4:
	Xmemcpy(tls, _buf, ts+2416 /* "/dev/shm/" */, uint64(9))
	Xmemcpy(tls, _buf+uintptr(9), _name, uint64(int64(_p-_name)+int64(1)))
	return _buf
}

// Xshm_open is defined at shm_open.c:29:5
func Xshm_open(tls TLS, _name uintptr /* *int8 */, _flag int32, _mode uint32) (r int32) {
	esc := MustMalloc(281)
	var (
		_cs  = esc      // *int32
		_buf = esc + 16 // *[265]int8
		_fd  int32
	)
	defer Free(esc)
	if set620(&_name, X__shm_mapname(tls, _name, _buf)) != 0 {
		goto _1
	}

	return int32(-1)

_1:
	Xpthread_setcancelstate(tls, int32(1), _cs)
	_fd = Xopen(tls, _name, _flag|int32(0400000)|int32(02000000)|int32(04000), _mode)
	Xpthread_setcancelstate(tls, *(*int32)(unsafe.Pointer(_cs)), null)
	return _fd
}

// Xshm_unlink is defined at shm_open.c:40:5
func Xshm_unlink(tls TLS, _name uintptr /* *int8 */) (r int32) {
	esc := MustMalloc(265)
	var _buf = esc // *[265]int8
	defer Free(esc)
	if set620(&_name, X__shm_mapname(tls, _name, _buf)) != 0 {
		goto _1
	}

	return int32(-1)

_1:
	return Xunlink(tls, _name)
}

type t564__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t564__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t11mode_t = uint32

type t106size_t = uint64

// linking mq_close.o

// Xmq_close is defined at mq_close.c:4:5
func Xmq_close(tls TLS, _mqd int32) (r int32) {
	return int32(X__syscall_ret(tls, uint64(x22__syscall1(tls, int64(3), int64(_mqd)))))
}

type t565__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t565__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type Tmqd_t = int32

// x__syscall1 is defined at syscall_arch.h:16:22
func x22__syscall1(tls TLS, _n int64, _a1 int64) (r int64) {
	return X__syscall(tls, _n, _a1, int64(0), int64(0), int64(0), int64(0), int64(0))
}

// linking mq_getattr.o

// Xmq_getattr is defined at mq_getattr.c:4:5
func Xmq_getattr(tls TLS, _mqd int32, _attr uintptr /* *Smq_attr */) (r int32) {
	return Xmq_setattr(tls, _mqd, null, _attr)
}

type t566__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t566__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t1mqd_t = int32

type Smq_attr = struct {
	Fmq_flags   int64
	Fmq_maxmsg  int64
	Fmq_msgsize int64
	Fmq_curmsgs int64
	F__unused   [4]int64
}

// linking mq_notify.o

func fp621(f func(TLS, uintptr) uintptr) uintptr { return *(*uintptr)(unsafe.Pointer(&f)) }

// Xmq_notify is defined at mq_notify.c:34:5
func Xmq_notify(tls TLS, _mqd int32, _sev uintptr /* *Ssigevent */) (r int32) {
	esc := MustMalloc(192)
	var (
		_args = esc       // *Sargs
		_attr = esc + 48  // *Tpthread_attr_t = struct{F__u st...[7]uint64;F int64; _ [48]byte};}
		_td   = esc + 112 // *Tpthread_t = *S__pthread
		_s    int32
		_sev2 = esc + 128 // *Ssigevent
	)
	defer Free(esc)
	*(*Sargs)(unsafe.Pointer(_args)) = Sargs{Fsev: _sev}
	if _sev != 0 && *(*int32)(unsafe.Pointer(_sev + 12)) == int32(2) {
		goto _1
	}

	return int32(X__syscall_ret(tls, uint64(x28__syscall2(tls, int64(244), int64(_mqd), int64(_sev)))))

_1:
	_s = Xsocket(tls, int32(16), int32(524291), int32(0))
	if _s >= int32(0) {
		goto _2
	}

	return int32(-1)

_2:
	*(*int32)(unsafe.Pointer(_args + 32)) = _s
	if *(*uintptr)(unsafe.Pointer(_sev + 24)) == 0 {
		goto _3
	}

	*(*struct {
		F__u struct {
			F__i  [0][14]int32
			F__vi [0][14]int32
			F__s  [0][7]uint64
			F     int64
			_     [48]byte
		}
	})(unsafe.Pointer(_attr)) = *(*struct {
		F__u struct {
			F__i  [0][14]int32
			F__vi [0][14]int32
			F__s  [0][7]uint64
			F     int64
			_     [48]byte
		}
	})(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_sev + 24))))
	goto _4

_3:
	Xpthread_attr_init(tls, _attr)
_4:
	Xpthread_attr_setdetachstate(tls, _attr, int32(1))
	Xpthread_barrier_init(tls, _args, null, uint32(2))
	if Xpthread_create(tls, _td, _attr, fp621(xstart), _args) == 0 {
		goto _5
	}

	x23__syscall1(tls, int64(3), int64(_s))
	*(*int32)(unsafe.Pointer(X__errno_location(tls))) = int32(11)
	return int32(-1)

_5:
	Xpthread_barrier_wait(tls, _args)
	Xpthread_barrier_destroy(tls, _args)
	*(*int32)(unsafe.Pointer(_sev2 + 12)) = int32(2)
	*(*int32)(unsafe.Pointer(_sev2 + 8)) = _s
	*(*uintptr)(unsafe.Pointer(_sev2)) = x622zeros
	if X__syscall_ret(tls, uint64(x28__syscall2(tls, int64(244), int64(_mqd), int64(_sev2)))) >= int64(0) {
		goto _6
	}

	Xpthread_cancel(tls, *(*uintptr)(unsafe.Pointer(_td)))
	x23__syscall1(tls, int64(3), int64(_s))
	return int32(-1)

_6:
	return int32(0)
}

type t567__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t567__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t2mqd_t = int32

type s3sigevent = struct {
	Fsigev_value             u3sigval
	Fsigev_signo             int32
	Fsigev_notify            int32
	Fsigev_notify_function   uintptr // *func(TLS, Usigval)
	Fsigev_notify_attributes uintptr // *Tpthread_attr_t = struct{F__u s...[7]uint64;F int64; _ [48]byte};}
	F__pad                   [32]int8
}

// x1zeros [32]int8, escapes: true, mq_notify.c:41:20
var x622zeros = bss + 2464

type Sargs = struct {
	Fbarrier struct {
		F__u struct {
			F__i  [0][8]int32
			F__vi [0][8]int32
			F__p  [0][4]uintptr
			F     int64
			_     [24]byte
		}
	}
	Fsock int32
	Fsev  uintptr // *Ssigevent
}

// x__syscall2 is defined at syscall_arch.h:24:22
func x28__syscall2(tls TLS, _n int64, _a1 int64, _a2 int64) (r int64) {
	return X__syscall(tls, _n, _a1, _a2, int64(0), int64(0), int64(0), int64(0))
}

type t2pthread_attr_t = struct {
	F__u struct {
		F__i  [0][14]int32
		F__vi [0][14]int32
		F__s  [0][7]uint64
		F     int64
		_     [48]byte
	}
}

// xstart is defined at mq_notify.c:16:13
func xstart(tls TLS, _p uintptr /* *void */) (r uintptr /* *void */) {
	var (
		_args uintptr // *Sargs
		_s    int32
		_     = _s
		_func uintptr // *func(TLS, Usigval)
		_     = _func
	)
	_args = _p
	_s = *(*int32)(unsafe.Pointer(_args + 32))
	_func = *(*uintptr)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_args + 40)) + 16))
	X__assert_fail(tls, ts+0 /* "TODO(ccgo)" */, ts+2428 /* "src/mq/mq_notify..." */, int32(23), x623__func__)
	return r
}

// x__syscall1 is defined at syscall_arch.h:16:22
func x23__syscall1(tls TLS, _n int64, _a1 int64) (r int64) {
	return X__syscall(tls, _n, _a1, int64(0), int64(0), int64(0), int64(0), int64(0))
}

type u3sigval = struct {
	Fsival_int [0]int32
	Fsival_ptr [0]uintptr // *void
	F          int64
}

type Tpthread_barrier_t = struct {
	F__u struct {
		F__i  [0][8]int32
		F__vi [0][8]int32
		F__p  [0][4]uintptr
		F     int64
		_     [24]byte
	}
}

// x5__func__ [6]int8, escapes: true, mq_notify.c:17:1
var x623__func__ = ds + 42976

type s21__pthread struct{ uintptr }

// linking mq_open.o

// Xmq_open is defined at mq_open.c:6:7
func Xmq_open(tls TLS, _name uintptr /* *int8 */, _flags int32, ap ...interface{}) (r int32) {
	var (
		_mode uint32
		_attr uintptr // *Smq_attr
		_ap   uintptr // Tva_list = T__builtin_va_list = ...truct{Fsize int32;Fdata int8;};}
	)
	_mode = uint32(0)
	_attr = 0
	if int32(*(*int8)(unsafe.Pointer(_name))) != int32('/') {
		goto _1
	}

	_name++
_1:
	if (_flags & int32(0100)) == 0 {
		goto _2
	}

	_ap = X__builtin_va_start(tls, ap)
	_mode = VAuint32(_ap)
	_attr = VAuintptr(_ap)
	X__builtin_free(tls, _ap)
_2:
	return int32(X__syscall_ret(tls, uint64(x18__syscall4(tls, int64(240), int64(_name), int64(_flags), int64(_mode), int64(_attr)))))
}

type t568__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t568__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t3mqd_t = int32

type t12mode_t = uint32

type s1mq_attr = struct {
	Fmq_flags   int64
	Fmq_maxmsg  int64
	Fmq_msgsize int64
	Fmq_curmsgs int64
	F__unused   [4]int64
}

// x__syscall4 is defined at syscall_arch.h:42:22
func x18__syscall4(tls TLS, _n int64, _a1 int64, _a2 int64, _a3 int64, _a4 int64) (r int64) {
	return X__syscall(tls, _n, _a1, _a2, _a3, _a4, int64(0), int64(0))
}

// linking mq_receive.o

// Xmq_receive is defined at mq_receive.c:3:9
func Xmq_receive(tls TLS, _mqd int32, _msg uintptr /* *int8 */, _len uint64, _prio uintptr /* *uint32 */) (r int64) {
	return Xmq_timedreceive(tls, _mqd, _msg, _len, _prio, null)
}

type t569__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t569__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t4mqd_t = int32

type t107size_t = uint64

type t21ssize_t = int64

// linking mq_send.o

// Xmq_send is defined at mq_send.c:3:5
func Xmq_send(tls TLS, _mqd int32, _msg uintptr /* *int8 */, _len uint64, _prio uint32) (r int32) {
	return Xmq_timedsend(tls, _mqd, _msg, _len, _prio, null)
}

type t570__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t570__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t5mqd_t = int32

type t108size_t = uint64

// linking mq_setattr.o

// Xmq_setattr is defined at mq_setattr.c:4:5
func Xmq_setattr(tls TLS, _mqd int32, _new uintptr /* *Smq_attr */, _old uintptr /* *Smq_attr */) (r int32) {
	return int32(X__syscall_ret(tls, uint64(x31__syscall3(tls, int64(245), int64(_mqd), int64(_new), int64(_old)))))
}

type t571__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t571__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t6mqd_t = int32

type s2mq_attr = struct {
	Fmq_flags   int64
	Fmq_maxmsg  int64
	Fmq_msgsize int64
	Fmq_curmsgs int64
	F__unused   [4]int64
}

// x__syscall3 is defined at syscall_arch.h:33:22
func x31__syscall3(tls TLS, _n int64, _a1 int64, _a2 int64, _a3 int64) (r int64) {
	return X__syscall(tls, _n, _a1, _a2, _a3, int64(0), int64(0), int64(0))
}

// linking mq_timedreceive.o

// Xmq_timedreceive is defined at mq_timedreceive.c:5:9
func Xmq_timedreceive(tls TLS, _mqd int32, _msg uintptr /* *int8 */, _len uint64, _prio uintptr /* *uint32 */, _at uintptr /* *Stimespec */) (r int64) {
	X__assert_fail(tls, ts+0 /* "TODO(ccgo)" */, ts+2448 /* "src/mq/mq_timedr..." */, int32(7), x624__func__)
	return r
}

type t572__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t572__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t7mqd_t = int32

type t109size_t = uint64

type t22ssize_t = int64

type s11timespec = struct {
	Ftv_sec  int64
	Ftv_nsec int64
}

// x1__func__ [16]int8, escapes: true, mq_timedreceive.c:6:1
var x624__func__ = ds + 42984

type t25time_t = int64

// linking mq_timedsend.o

// Xmq_timedsend is defined at mq_timedsend.c:5:5
func Xmq_timedsend(tls TLS, _mqd int32, _msg uintptr /* *int8 */, _len uint64, _prio uint32, _at uintptr /* *Stimespec */) (r int32) {
	X__assert_fail(tls, ts+0 /* "TODO(ccgo)" */, ts+2476 /* "src/mq/mq_timeds..." */, int32(7), x625__func__)
	return r
}

type t573__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t573__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t8mqd_t = int32

type t110size_t = uint64

type s12timespec = struct {
	Ftv_sec  int64
	Ftv_nsec int64
}

// x1__func__ [13]int8, escapes: true, mq_timedsend.c:6:1
var x625__func__ = ds + 43000

type t26time_t = int64

// linking mq_unlink.o

// Xmq_unlink is defined at mq_unlink.c:5:5
func Xmq_unlink(tls TLS, _name uintptr /* *int8 */) (r int32) {
	var _ret int32

	if int32(*(*int8)(unsafe.Pointer(_name))) != int32('/') {
		goto _1
	}

	_name++
_1:
	_ret = int32(x24__syscall1(tls, int64(241), int64(_name)))
	if _ret >= int32(0) {
		goto _2
	}

	if _ret != int32(-1) {
		goto _3
	}

	_ret = int32(-13)
_3:
	*(*int32)(unsafe.Pointer(X__errno_location(tls))) = -_ret
	return int32(-1)

_2:
	return _ret
}

type t574__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t574__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// x__syscall1 is defined at syscall_arch.h:16:22
func x24__syscall1(tls TLS, _n int64, _a1 int64) (r int64) {
	return X__syscall(tls, _n, _a1, int64(0), int64(0), int64(0), int64(0), int64(0))
}

// linking btowc.o

// Xbtowc is defined at btowc.c:6:8
func Xbtowc(tls TLS, _c int32) (r uint32) {
	var _b int32

	_b = int32(uint8(_c))
	if uint32(_b) < uint32(128) {
		return uint32(_b)
	}

	return func() uint32 {
		if (func() int32 {
			if *(*uintptr)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(x17__pthread_self(tls) + 192)))) != 0 {
				return int32(4)
			}
			return int32(1)
		}() == int32(1)) && (_c != int32(-1)) {
			return uint32(int32(0xdfff) & int32(int8(_c)))
		}
		return uint32(0xffffffff)
	}()
}

type t575__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t575__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t15wint_t = uint32

// x__pthread_self is defined at pthread_arch.h:1:30
func x17__pthread_self(tls TLS) (r uintptr /* *S__pthread */) {
	return uintptr(tls)
	return r
}

type s22__pthread = struct {
	Fself          uintptr // *S__pthread
	Fdtv           uintptr // **void
	Funused1       uintptr // *void
	Funused2       uintptr // *void
	Fsysinfo       uint64
	Fcanary        uint64
	Fcanary2       uint64
	Ftid           int32
	Ferrno_val     int32
	Fdetach_state  int32
	Fcancel        int32
	Fcanceldisable uint8
	Fcancelasync   uint8
	F74            uint8
	Fmap_base      uintptr // *uint8
	Fmap_size      uint64
	Fstack         uintptr // *void
	Fstack_size    uint64
	Fguard_size    uint64
	Fstart_arg     uintptr // *void
	Fstart         uintptr // *func(TLS, uintptr) uintptr
	Fresult        uintptr // *void
	Fcancelbuf     uintptr // *S__ptcb
	Ftsd           uintptr // **void
	Frobust_list   struct {
		Fhead    uintptr
		Foff     int64
		Fpending uintptr
	}
	Ftimer_id      int32
	Flocale        uintptr // Tlocale_t = *S__locale_struct
	Fkilllock      [1]int32
	Fdlerror_buf   uintptr // *int8
	Fstdio_locks   uintptr // *void
	Fcanary_at_end uint64
	Fdtv_copy      uintptr // **void
}

type t23uintptr_t = uint64

type t111size_t = uint64

type s19__ptcb = struct {
	F__f    uintptr // *func(TLS, uintptr)
	F__x    uintptr // *void
	F__next uintptr // *S__ptcb
}

type s56__locale_struct = struct{ Fcat [6]uintptr }

// linking c16rtomb.o

// Xc16rtomb is defined at c16rtomb.c:5:8
func Xc16rtomb(tls TLS, _s uintptr /* *int8 */, _c16 uint16, _ps uintptr /* *Tmbstate_t = struct{F__opaque1 uint32;F__opaque2 uint32;} */) (r uint64) {
	var (
		_x  uintptr // *uint32
		_wc int32
	)
	if _ps != 0 {
		goto _1
	}

	_ps = x626internal_state
_1:
	_x = _ps
	if _s != 0 {
		goto _2
	}

	if *(*uint32)(unsafe.Pointer(_x)) == 0 {
		goto _3
	}

	goto lilseq

_3:
	return uint64(1)

_2:
	if *(*uint32)(unsafe.Pointer(_x)) != 0 || uint32(_c16)-uint32(0xd800) >= uint32(0x400) {
		goto _4
	}

	*(*uint32)(unsafe.Pointer(_x)) = uint32((int32(_c16) - int32(0xd7c0)) << (uint(10) % 32))
	return uint64(0)

_4:
	if *(*uint32)(unsafe.Pointer(_x)) == 0 {
		goto _5
	}

	if uint32(_c16)-uint32(0xdc00) < uint32(0x400) {
		goto _7
	}

	goto lilseq

	goto _8

_7:
	_wc = int32(*(*uint32)(unsafe.Pointer(_x)) + uint32(_c16) - uint32(0xdc00))
_8:
	*(*uint32)(unsafe.Pointer(_x)) = uint32(0)
	goto _6

_5:
	_wc = int32(_c16)
_6:
	return Xwcrtomb(tls, _s, _wc, null)

	goto lilseq
lilseq:
	*(*uint32)(unsafe.Pointer(_x)) = uint32(0)
	*(*int32)(unsafe.Pointer(X__errno_location(tls))) = int32(84)
	return uint64(18446744073709551615)
}

type t576__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t576__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type Tchar16_t = uint16

type t112size_t = uint64

// x1internal_state uint32, escapes: true, c16rtomb.c:7:18
var x626internal_state = bss + 2496

type t7wchar_t = int32

// linking c32rtomb.o

// Xc32rtomb is defined at c32rtomb.c:4:8
func Xc32rtomb(tls TLS, _s uintptr /* *int8 */, _c32 uint32, _ps uintptr /* *Tmbstate_t = struct{F__opaque1 uint32;F__opaque2 uint32;} */) (r uint64) {
	return Xwcrtomb(tls, _s, int32(_c32), _ps)
}

type t577__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t577__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type Tchar32_t = uint32

type t113size_t = uint64

type t8wchar_t = int32

// linking internal.o

// X__fsmu8 [51]uint32, escapes: true, internal.c:18:16
var X__fsmu8 = ds + 43016

type t578__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t578__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t106uint32_t = uint32

// linking mblen.o

// Xmblen is defined at mblen.c:3:5
func Xmblen(tls TLS, _s uintptr /* *int8 */, _n uint64) (r int32) {
	return Xmbtowc(tls, null, _s, _n)
}

type t579__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t579__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t114size_t = uint64

// linking mbrlen.o

// Xmbrlen is defined at mbrlen.c:3:8
func Xmbrlen(tls TLS, _s uintptr /* *int8 */, _n uint64, _st uintptr /* *Tmbstate_t = struct{F__opaque1 uint32;F__opaque2 uint32;} */) (r uint64) {
	return Xmbrtowc(tls, null, _s, _n, func() uintptr {
		if _st != 0 {
			return _st
		}
		return x627internal
	}())
}

type t580__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t580__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t115size_t = uint64

// x1internal uint32, escapes: true, mbrlen.c:5:18
var x627internal = bss + 2504

// linking mbrtoc16.o

// Xmbrtoc16 is defined at mbrtoc16.c:4:8
func Xmbrtoc16(tls TLS, _pc16 uintptr /* *Tchar16_t = uint16 */, _s uintptr /* *int8 */, _n uint64, _ps uintptr /* *Tmbstate_t = struct{F__opaque1 uint32;F__opaque2 uint32;} */) (r uint64) {
	esc := MustMalloc(4)
	var (
		_pending uintptr // *uint32
		_wc      = esc   // *Twchar_t = int32
		_ret     uint64
	)
	defer Free(esc)
	if _ps != 0 {
		goto _1
	}

	_ps = x628internal_state
_1:
	_pending = _ps
	if _s != 0 {
		goto _2
	}

	return Xmbrtoc16(tls, null, ts+112 /* "" */, uint64(1), _ps)

_2:
	if int32(*(*uint32)(unsafe.Pointer(_pending))) <= int32(0) {
		goto _3
	}

	if _pc16 == 0 {
		goto _4
	}

	*(*uint16)(unsafe.Pointer(_pc16)) = uint16(*(*uint32)(unsafe.Pointer(_pending)))
_4:
	*(*uint32)(unsafe.Pointer(_pending)) = uint32(0)
	return uint64(18446744073709551613)

_3:
	_ret = Xmbrtowc(tls, _wc, _s, _n, _ps)
	if _ret > uint64(4) {
		goto _5
	}

	if *(*int32)(unsafe.Pointer(_wc)) < int32(0x10000) {
		goto _6
	}

	*(*uint32)(unsafe.Pointer(_pending)) = uint32(*(*int32)(unsafe.Pointer(_wc))&int32(0x3ff) + int32(0xdc00))
	*(*int32)(unsafe.Pointer(_wc)) = int32(0xd7c0) + *(*int32)(unsafe.Pointer(_wc))>>(uint(10)%32)
_6:
	if _pc16 == 0 {
		goto _7
	}

	*(*uint16)(unsafe.Pointer(_pc16)) = uint16(*(*int32)(unsafe.Pointer(_wc)))
_7:
_5:
	return _ret
}

type t581__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t581__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t116size_t = uint64

// x1internal_state uint32, escapes: true, mbrtoc16.c:6:18
var x628internal_state = bss + 2512

type t1char16_t = uint16

type t9wchar_t = int32

// linking mbrtoc32.o

// Xmbrtoc32 is defined at mbrtoc32.c:4:8
func Xmbrtoc32(tls TLS, _pc32 uintptr /* *Tchar32_t = uint32 */, _s uintptr /* *int8 */, _n uint64, _ps uintptr /* *Tmbstate_t = struct{F__opaque1 uint32;F__opaque2 uint32;} */) (r uint64) {
	esc := MustMalloc(4)
	var (
		_wc  = esc // *Twchar_t = int32
		_ret uint64
	)
	defer Free(esc)
	if _ps != 0 {
		goto _1
	}

	_ps = x629internal_state
_1:
	if _s != 0 {
		goto _2
	}

	return Xmbrtoc32(tls, null, ts+112 /* "" */, uint64(1), _ps)

_2:
	_ret = Xmbrtowc(tls, _wc, _s, _n, _ps)
	if _ret > uint64(4) || _pc32 == 0 {
		goto _3
	}

	*(*uint32)(unsafe.Pointer(_pc32)) = uint32(*(*int32)(unsafe.Pointer(_wc)))
_3:
	return _ret
}

type t582__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t582__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t117size_t = uint64

// x1internal_state uint32, escapes: true, mbrtoc32.c:6:18
var x629internal_state = bss + 2520

type t1char32_t = uint32

type t10wchar_t = int32

// linking mbrtowc.o

func set630(p *int32, v int32) int32 { *p = v; return v }

func postinc631(p *uintptr) uintptr { r := *p; *p += 1; return r }

// Xmbrtowc is defined at mbrtowc.c:6:8
func Xmbrtowc(tls TLS, _wc uintptr /* *Twchar_t = int32 */, _src uintptr /* *int8 */, _n uint64, _st uintptr /* *Tmbstate_t = struct{F__opaque1 uint32;F__opaque2 uint32;} */) (r uint64) {
	esc := MustMalloc(4)
	var (
		_c     uint32
		_s     uintptr // *uint8
		_N     uint32
		_dummy = esc // *Twchar_t = int32
	)
	defer Free(esc)
	_s = _src
	_N = uint32(_n)
	if _st != 0 {
		goto _1
	}

	_st = x632internal_state
_1:
	_c = *(*uint32)(unsafe.Pointer(_st))
	if _s != 0 {
		goto _2
	}

	if _c == 0 {
		goto _4
	}

	goto lilseq

_4:
	return uint64(0)

	goto _3

_2:
	if _wc != 0 {
		goto _5
	}

	_wc = _dummy
_5:
_3:
	if _n != 0 {
		goto _6
	}

	return uint64(18446744073709551614)

_6:
	if _c != 0 {
		goto _7
	}

	if int32(*(*uint8)(unsafe.Pointer(_s))) >= int32(0x80) {
		goto _8
	}

	return uint64(bool2int(set630((*int32)(unsafe.Pointer(_wc)), int32(*(*uint8)(unsafe.Pointer(_s)))) != 0))

_8:
	if func() int32 {
		if *(*uintptr)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(x18__pthread_self(tls) + 192)))) != 0 {
			return int32(4)
		}
		return int32(1)
	}() != int32(1) {
		goto _9
	}

	return func() uint64 {
		*(*int32)(unsafe.Pointer(_wc)) = int32(0xdfff) & int32(int8(*(*uint8)(unsafe.Pointer(_s))))
		return uint64(1)
	}()

_9:
	if uint32(*(*uint8)(unsafe.Pointer(_s)))-uint32(0xc2) <= uint32(50) {
		goto _10
	}

	goto lilseq

_10:
	_c = *(*uint32)(unsafe.Pointer(X__fsmu8 + 4*uintptr(uint32(*(*uint8)(unsafe.Pointer(postinc631(&_s))))-uint32(0xc2))))
	_n--
_7:
	if _n == 0 {
		goto _11
	}

	if (int32(*(*uint8)(unsafe.Pointer(_s)))>>(uint(3)%32)-int32(0x10)|(int32(*(*uint8)(unsafe.Pointer(_s)))>>(uint(3)%32)+int32(_c)>>(uint(26)%32)))&int32(-8) == 0 {
		goto _12
	}

	goto lilseq

_12:
	goto lloop
lloop:
	_c = _c<<(uint(6)%32) | uint32(int32(*(*uint8)(unsafe.Pointer(postinc631(&_s))))-int32(0x80))
	_n--
	if _c&uint32(2147483648) != 0 {
		goto _13
	}

	*(*uint32)(unsafe.Pointer(_st)) = uint32(0)
	*(*int32)(unsafe.Pointer(_wc)) = int32(_c)
	return uint64(_N) - _n

_13:
	if _n == 0 {
		goto _14
	}

	if uint32(*(*uint8)(unsafe.Pointer(_s)))-uint32(0x80) < uint32(0x40) {
		goto _15
	}

	goto lilseq

_15:
	goto lloop

_14:
_11:
	*(*uint32)(unsafe.Pointer(_st)) = _c
	return uint64(18446744073709551614)

	goto lilseq
lilseq:
	*(*uint32)(unsafe.Pointer(_st)) = uint32(0)
	*(*int32)(unsafe.Pointer(X__errno_location(tls))) = int32(84)
	return uint64(18446744073709551615)
}

type t583__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t583__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t118size_t = uint64

// x1internal_state uint32, escapes: true, mbrtowc.c:8:18
var x632internal_state = bss + 2528

type t11wchar_t = int32

// x__pthread_self is defined at pthread_arch.h:1:30
func x18__pthread_self(tls TLS) (r uintptr /* *S__pthread */) {
	return uintptr(tls)
	return r
}

type t107uint32_t = uint32

type t15int32_t = int32

type s23__pthread = struct {
	Fself          uintptr // *S__pthread
	Fdtv           uintptr // **void
	Funused1       uintptr // *void
	Funused2       uintptr // *void
	Fsysinfo       uint64
	Fcanary        uint64
	Fcanary2       uint64
	Ftid           int32
	Ferrno_val     int32
	Fdetach_state  int32
	Fcancel        int32
	Fcanceldisable uint8
	Fcancelasync   uint8
	F74            uint8
	Fmap_base      uintptr // *uint8
	Fmap_size      uint64
	Fstack         uintptr // *void
	Fstack_size    uint64
	Fguard_size    uint64
	Fstart_arg     uintptr // *void
	Fstart         uintptr // *func(TLS, uintptr) uintptr
	Fresult        uintptr // *void
	Fcancelbuf     uintptr // *S__ptcb
	Ftsd           uintptr // **void
	Frobust_list   struct {
		Fhead    uintptr
		Foff     int64
		Fpending uintptr
	}
	Ftimer_id      int32
	Flocale        uintptr // Tlocale_t = *S__locale_struct
	Fkilllock      [1]int32
	Fdlerror_buf   uintptr // *int8
	Fstdio_locks   uintptr // *void
	Fcanary_at_end uint64
	Fdtv_copy      uintptr // **void
}

type t24uintptr_t = uint64

type s20__ptcb = struct {
	F__f    uintptr // *func(TLS, uintptr)
	F__x    uintptr // *void
	F__next uintptr // *S__ptcb
}

type s57__locale_struct = struct{ Fcat [6]uintptr }

// linking mbsinit.o

// Xmbsinit is defined at mbsinit.c:3:5
func Xmbsinit(tls TLS, _st uintptr /* *Tmbstate_t = struct{F__opaque1 uint32;F__opaque2 uint32;} */) (r int32) {
	return bool2int((_st == 0) || (*(*uint32)(unsafe.Pointer(_st)) == 0))
}

type t584__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t584__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// linking mbsnrtowcs.o

func set633(p *uint64, v uint64) uint64 { *p = v; return v }

// Xmbsnrtowcs is defined at mbsnrtowcs.c:3:8
func Xmbsnrtowcs(tls TLS, _wcs uintptr /* *Twchar_t = int32 */, _src uintptr /* **int8 */, _n uint64, _wn uint64, _st uintptr /* *Tmbstate_t = struct{F__opaque1 uint32;F__opaque2 uint32;} */) (r uint64) {
	esc := MustMalloc(1032)
	var (
		_l     uint64
		_cnt   uint64
		_n2    uint64
		_ws    uintptr      // *Twchar_t = int32
		_wbuf  = esc        // *[256]int32
		_s     = esc + 1024 // **int8
		_tmp_s uintptr      // *int8
	)
	defer Free(esc)
	_cnt = uint64(0)
	*(*uintptr)(unsafe.Pointer(_s)) = *(*uintptr)(unsafe.Pointer(_src))
	if _wcs != 0 {
		goto _1
	}

	_ws = _wbuf
	_wn = uint64(256)
	goto _2

_1:
	_ws = _wcs
_2:
_3:
	if *(*uintptr)(unsafe.Pointer(_s)) == 0 || _wn == 0 || set633(&_n2, _n/uint64(4)) < _wn && _n2 <= uint64(32) {
		goto _4
	}

	if _n2 < _wn {
		goto _5
	}

	_n2 = _wn
_5:
	_tmp_s = *(*uintptr)(unsafe.Pointer(_s))
	_l = Xmbsrtowcs(tls, _ws, _s, _n2, _st)
	if _l+uint64(1) != 0 {
		goto _6
	}

	_cnt = _l
	_wn = uint64(0)
	goto _4

_6:
	if _ws == _wbuf {
		goto _7
	}

	_ws += 4 * uintptr(_l)
	_wn = _wn - _l
_7:
	_n = func() uint64 {
		if *(*uintptr)(unsafe.Pointer(_s)) != 0 {
			return _n - uint64(int64(*(*uintptr)(unsafe.Pointer(_s))-_tmp_s))
		}
		return uint64(0)
	}()
	_cnt = _cnt + _l
	goto _3

_4:
	if *(*uintptr)(unsafe.Pointer(_s)) == 0 {
		goto _8
	}

_9:
	if _wn == 0 || _n == 0 {
		goto _10
	}

	_l = Xmbrtowc(tls, _ws, *(*uintptr)(unsafe.Pointer(_s)), _n, _st)
	if _l+uint64(2) > uint64(2) {
		goto _11
	}

	if _l+uint64(1) != 0 {
		goto _12
	}

	_cnt = _l
	goto _10

_12:
	if _l != 0 {
		goto _13
	}

	*(*uintptr)(unsafe.Pointer(_s)) = null
	goto _10

_13:
	*(*uint32)(unsafe.Pointer(_st)) = uint32(0)
	goto _10

_11:
	*(*uintptr)(unsafe.Pointer(_s)) += uintptr(_l)
	_n = _n - _l
	_ws += 4
	_wn--
	_cnt++
	goto _9

_10:
_8:
	if _wcs == 0 {
		goto _14
	}

	*(*uintptr)(unsafe.Pointer(_src)) = *(*uintptr)(unsafe.Pointer(_s))
_14:
	return _cnt
}

type t585__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t585__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t119size_t = uint64

type t12wchar_t = int32

// linking mbsrtowcs.o

func set634(p *uint32, v uint32) uint32 { *p = v; return v }

func postinc635(p *uintptr) uintptr { r := *p; *p += 1; return r }

func postinc636(p *uintptr) uintptr { r := *p; *p += 4; return r }

// Xmbsrtowcs is defined at mbsrtowcs.c:8:8
func Xmbsrtowcs(tls TLS, _ws uintptr /* *Twchar_t = int32 */, _src uintptr /* **int8 */, _wn uint64, _st uintptr /* *Tmbstate_t = struct{F__opaque1 uint32;F__opaque2 uint32;} */) (r uint64) {
	var (
		_s   uintptr // *uint8
		_wn0 uint64
		_c   uint32
	)
	_s = *(*uintptr)(unsafe.Pointer(_src))
	_wn0 = _wn
	_c = uint32(0)
	if _st == 0 || set634(&_c, *(*uint32)(unsafe.Pointer(_st))) == 0 {
		goto _1
	}

	if _ws == 0 {
		goto _2
	}

	*(*uint32)(unsafe.Pointer(_st)) = uint32(0)
	goto lresume

	goto _3

_2:
	goto lresume0

_3:
_1:
	if func() int32 {
		if *(*uintptr)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(x19__pthread_self(tls) + 192)))) != 0 {
			return int32(4)
		}
		return int32(1)
	}() != int32(1) {
		goto _4
	}

	if _ws != 0 {
		goto _5
	}

	return Xstrlen(tls, _s)

_5:
_6:
	if _wn != 0 {
		goto _9
	}

	*(*uintptr)(unsafe.Pointer(_src)) = _s
	return _wn0

_9:
	if *(*uint8)(unsafe.Pointer(_s)) != 0 {
		goto _10
	}

	goto _8

_10:
	_c = uint32(*(*uint8)(unsafe.Pointer(postinc635(&_s))))
	*(*int32)(unsafe.Pointer(postinc636(&_ws))) = int32(0xdfff) & int32(int8(_c))
	_wn--
	goto _6

_8:
	*(*int32)(unsafe.Pointer(_ws)) = int32(0)
	*(*uintptr)(unsafe.Pointer(_src)) = null
	return _wn0 - _wn

_4:
	if _ws != 0 {
		goto _11
	}

_13:
	if uint32(*(*uint8)(unsafe.Pointer(_s)))-uint32(1) >= uint32(0x7f) || uint64(_s)%uint64(4) != uint64(0) {
		goto _16
	}

_17:
	if (*(*uint32)(unsafe.Pointer(_s))|(*(*uint32)(unsafe.Pointer(_s))-uint32(0x1010101)))&uint32(0x80808080) != 0 {
		goto _18
	}

	_s += uintptr(4)
	_wn = _wn - uint64(4)
	goto _17

_18:
_16:
	if uint32(*(*uint8)(unsafe.Pointer(_s)))-uint32(1) >= uint32(0x7f) {
		goto _19
	}

	_s++
	_wn--
	goto _14

_19:
	if uint32(*(*uint8)(unsafe.Pointer(_s)))-uint32(0xc2) <= uint32(50) {
		goto _20
	}

	goto _15

_20:
	_c = *(*uint32)(unsafe.Pointer(X__fsmu8 + 4*uintptr(uint32(*(*uint8)(unsafe.Pointer(postinc635(&_s))))-uint32(0xc2))))
	goto lresume0
lresume0:
	if (int32(*(*uint8)(unsafe.Pointer(_s)))>>(uint(3)%32)-int32(0x10)|(int32(*(*uint8)(unsafe.Pointer(_s)))>>(uint(3)%32)+int32(_c)>>(uint(26)%32)))&int32(-8) == 0 {
		goto _21
	}

	_s--
	goto _15

_21:
	_s++
	if (_c & uint32(33554432)) == 0 {
		goto _22
	}

	if uint32(*(*uint8)(unsafe.Pointer(_s)))-uint32(0x80) < uint32(0x40) {
		goto _23
	}

	_s -= uintptr(2)
	goto _15

_23:
	_s++
	if (_c & uint32(524288)) == 0 {
		goto _24
	}

	if uint32(*(*uint8)(unsafe.Pointer(_s)))-uint32(0x80) < uint32(0x40) {
		goto _25
	}

	_s -= uintptr(3)
	goto _15

_25:
	_s++
_24:
_22:
	_wn--
	_c = uint32(0)
_14:
	goto _13

_15:
	goto _12

_11:
_26:
	if _wn != 0 {
		goto _29
	}

	*(*uintptr)(unsafe.Pointer(_src)) = _s
	return _wn0

_29:
	if uint32(*(*uint8)(unsafe.Pointer(_s)))-uint32(1) >= uint32(0x7f) || uint64(_s)%uint64(4) != uint64(0) {
		goto _30
	}

_31:
	if _wn < uint64(5) || (*(*uint32)(unsafe.Pointer(_s))|(*(*uint32)(unsafe.Pointer(_s))-uint32(0x1010101)))&uint32(0x80808080) != 0 {
		goto _32
	}

	*(*int32)(unsafe.Pointer(postinc636(&_ws))) = int32(*(*uint8)(unsafe.Pointer(postinc635(&_s))))
	*(*int32)(unsafe.Pointer(postinc636(&_ws))) = int32(*(*uint8)(unsafe.Pointer(postinc635(&_s))))
	*(*int32)(unsafe.Pointer(postinc636(&_ws))) = int32(*(*uint8)(unsafe.Pointer(postinc635(&_s))))
	*(*int32)(unsafe.Pointer(postinc636(&_ws))) = int32(*(*uint8)(unsafe.Pointer(postinc635(&_s))))
	_wn = _wn - uint64(4)
	goto _31

_32:
_30:
	if uint32(*(*uint8)(unsafe.Pointer(_s)))-uint32(1) >= uint32(0x7f) {
		goto _33
	}

	*(*int32)(unsafe.Pointer(postinc636(&_ws))) = int32(*(*uint8)(unsafe.Pointer(postinc635(&_s))))
	_wn--
	goto _27

_33:
	if uint32(*(*uint8)(unsafe.Pointer(_s)))-uint32(0xc2) <= uint32(50) {
		goto _34
	}

	goto _28

_34:
	_c = *(*uint32)(unsafe.Pointer(X__fsmu8 + 4*uintptr(uint32(*(*uint8)(unsafe.Pointer(postinc635(&_s))))-uint32(0xc2))))
	goto lresume
lresume:
	if (int32(*(*uint8)(unsafe.Pointer(_s)))>>(uint(3)%32)-int32(0x10)|(int32(*(*uint8)(unsafe.Pointer(_s)))>>(uint(3)%32)+int32(_c)>>(uint(26)%32)))&int32(-8) == 0 {
		goto _35
	}

	_s--
	goto _28

_35:
	_c = _c<<(uint(6)%32) | uint32(int32(*(*uint8)(unsafe.Pointer(postinc635(&_s))))-int32(0x80))
	if (_c & uint32(2147483648)) == 0 {
		goto _36
	}

	if uint32(*(*uint8)(unsafe.Pointer(_s)))-uint32(0x80) < uint32(0x40) {
		goto _37
	}

	_s -= uintptr(2)
	goto _28

_37:
	_c = _c<<(uint(6)%32) | uint32(int32(*(*uint8)(unsafe.Pointer(postinc635(&_s))))-int32(0x80))
	if (_c & uint32(2147483648)) == 0 {
		goto _38
	}

	if uint32(*(*uint8)(unsafe.Pointer(_s)))-uint32(0x80) < uint32(0x40) {
		goto _39
	}

	_s -= uintptr(3)
	goto _28

_39:
	_c = _c<<(uint(6)%32) | uint32(int32(*(*uint8)(unsafe.Pointer(postinc635(&_s))))-int32(0x80))
_38:
_36:
	*(*int32)(unsafe.Pointer(postinc636(&_ws))) = int32(_c)
	_wn--
	_c = uint32(0)
_27:
	goto _26

_28:
_12:
	if _c != 0 || *(*uint8)(unsafe.Pointer(_s)) != 0 {
		goto _40
	}

	if _ws == 0 {
		goto _41
	}

	*(*int32)(unsafe.Pointer(_ws)) = int32(0)
	*(*uintptr)(unsafe.Pointer(_src)) = null
_41:
	return _wn0 - _wn

_40:
	*(*int32)(unsafe.Pointer(X__errno_location(tls))) = int32(84)
	if _ws == 0 {
		goto _42
	}

	*(*uintptr)(unsafe.Pointer(_src)) = _s
_42:
	return uint64(18446744073709551615)
}

type t586__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t586__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t120size_t = uint64

// x__pthread_self is defined at pthread_arch.h:1:30
func x19__pthread_self(tls TLS) (r uintptr /* *S__pthread */) {
	return uintptr(tls)
	return r
}

type t13wchar_t = int32

type t25uintptr_t = uint64

type t108uint32_t = uint32

type t16int32_t = int32

type s24__pthread = struct {
	Fself          uintptr // *S__pthread
	Fdtv           uintptr // **void
	Funused1       uintptr // *void
	Funused2       uintptr // *void
	Fsysinfo       uint64
	Fcanary        uint64
	Fcanary2       uint64
	Ftid           int32
	Ferrno_val     int32
	Fdetach_state  int32
	Fcancel        int32
	Fcanceldisable uint8
	Fcancelasync   uint8
	F74            uint8
	Fmap_base      uintptr // *uint8
	Fmap_size      uint64
	Fstack         uintptr // *void
	Fstack_size    uint64
	Fguard_size    uint64
	Fstart_arg     uintptr // *void
	Fstart         uintptr // *func(TLS, uintptr) uintptr
	Fresult        uintptr // *void
	Fcancelbuf     uintptr // *S__ptcb
	Ftsd           uintptr // **void
	Frobust_list   struct {
		Fhead    uintptr
		Foff     int64
		Fpending uintptr
	}
	Ftimer_id      int32
	Flocale        uintptr // Tlocale_t = *S__locale_struct
	Fkilllock      [1]int32
	Fdlerror_buf   uintptr // *int8
	Fstdio_locks   uintptr // *void
	Fcanary_at_end uint64
	Fdtv_copy      uintptr // **void
}

type s21__ptcb = struct {
	F__f    uintptr // *func(TLS, uintptr)
	F__x    uintptr // *void
	F__next uintptr // *S__ptcb
}

type s58__locale_struct = struct{ Fcat [6]uintptr }

// linking mbstowcs.o

// Xmbstowcs is defined at mbstowcs.c:4:8
func Xmbstowcs(tls TLS, _ws uintptr /* *Twchar_t = int32 */, as uintptr, _wn uint64) (r uint64) {
	esc := MustMalloc(8)
	var _s = esc // **int8
	defer Free(esc)
	*(*uintptr)(unsafe.Pointer(_s)) = as
	return Xmbsrtowcs(tls, _ws, _s, _wn, null)
}

type t587__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t587__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t121size_t = uint64

// linking mbtowc.o

func set637(p *int32, v int32) int32 { *p = v; return v }

func postinc638(p *uintptr) uintptr { r := *p; *p += 1; return r }

// Xmbtowc is defined at mbtowc.c:6:5
func Xmbtowc(tls TLS, _wc uintptr /* *Twchar_t = int32 */, _src uintptr /* *int8 */, _n uint64) (r int32) {
	esc := MustMalloc(4)
	var (
		_c     uint32
		_s     uintptr // *uint8
		_dummy = esc   // *Twchar_t = int32
	)
	defer Free(esc)
	_s = _src
	if _s != 0 {
		goto _1
	}

	return int32(0)

_1:
	if _n != 0 {
		goto _2
	}

	goto lilseq

_2:
	if _wc != 0 {
		goto _3
	}

	_wc = _dummy
_3:
	if int32(*(*uint8)(unsafe.Pointer(_s))) >= int32(0x80) {
		goto _4
	}

	return bool2int(set637((*int32)(unsafe.Pointer(_wc)), int32(*(*uint8)(unsafe.Pointer(_s)))) != 0)

_4:
	if func() int32 {
		if *(*uintptr)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(x20__pthread_self(tls) + 192)))) != 0 {
			return int32(4)
		}
		return int32(1)
	}() != int32(1) {
		goto _5
	}

	return func() int32 {
		*(*int32)(unsafe.Pointer(_wc)) = int32(0xdfff) & int32(int8(*(*uint8)(unsafe.Pointer(_s))))
		return int32(1)
	}()

_5:
	if uint32(*(*uint8)(unsafe.Pointer(_s)))-uint32(0xc2) <= uint32(50) {
		goto _6
	}

	goto lilseq

_6:
	_c = *(*uint32)(unsafe.Pointer(X__fsmu8 + 4*uintptr(uint32(*(*uint8)(unsafe.Pointer(postinc638(&_s))))-uint32(0xc2))))
	if _n >= uint64(4) || _c<<(uint(uint64(6)*_n-uint64(6))%32)&uint32(2147483648) == 0 {
		goto _7
	}

	goto lilseq

_7:
	if (int32(*(*uint8)(unsafe.Pointer(_s)))>>(uint(3)%32)-int32(0x10)|(int32(*(*uint8)(unsafe.Pointer(_s)))>>(uint(3)%32)+int32(_c)>>(uint(26)%32)))&int32(-8) == 0 {
		goto _8
	}

	goto lilseq

_8:
	_c = _c<<(uint(6)%32) | uint32(int32(*(*uint8)(unsafe.Pointer(postinc638(&_s))))-int32(0x80))
	if _c&uint32(2147483648) != 0 {
		goto _9
	}

	*(*int32)(unsafe.Pointer(_wc)) = int32(_c)
	return int32(2)

_9:
	if uint32(*(*uint8)(unsafe.Pointer(_s)))-uint32(0x80) < uint32(0x40) {
		goto _10
	}

	goto lilseq

_10:
	_c = _c<<(uint(6)%32) | uint32(int32(*(*uint8)(unsafe.Pointer(postinc638(&_s))))-int32(0x80))
	if _c&uint32(2147483648) != 0 {
		goto _11
	}

	*(*int32)(unsafe.Pointer(_wc)) = int32(_c)
	return int32(3)

_11:
	if uint32(*(*uint8)(unsafe.Pointer(_s)))-uint32(0x80) < uint32(0x40) {
		goto _12
	}

	goto lilseq

_12:
	*(*int32)(unsafe.Pointer(_wc)) = int32(_c<<(uint(6)%32) | uint32(int32(*(*uint8)(unsafe.Pointer(postinc638(&_s))))-int32(0x80)))
	return int32(4)

	goto lilseq
lilseq:
	*(*int32)(unsafe.Pointer(X__errno_location(tls))) = int32(84)
	return int32(-1)
}

type t588__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t588__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t122size_t = uint64

type t14wchar_t = int32

// x__pthread_self is defined at pthread_arch.h:1:30
func x20__pthread_self(tls TLS) (r uintptr /* *S__pthread */) {
	return uintptr(tls)
	return r
}

type t109uint32_t = uint32

type t17int32_t = int32

type s25__pthread = struct {
	Fself          uintptr // *S__pthread
	Fdtv           uintptr // **void
	Funused1       uintptr // *void
	Funused2       uintptr // *void
	Fsysinfo       uint64
	Fcanary        uint64
	Fcanary2       uint64
	Ftid           int32
	Ferrno_val     int32
	Fdetach_state  int32
	Fcancel        int32
	Fcanceldisable uint8
	Fcancelasync   uint8
	F74            uint8
	Fmap_base      uintptr // *uint8
	Fmap_size      uint64
	Fstack         uintptr // *void
	Fstack_size    uint64
	Fguard_size    uint64
	Fstart_arg     uintptr // *void
	Fstart         uintptr // *func(TLS, uintptr) uintptr
	Fresult        uintptr // *void
	Fcancelbuf     uintptr // *S__ptcb
	Ftsd           uintptr // **void
	Frobust_list   struct {
		Fhead    uintptr
		Foff     int64
		Fpending uintptr
	}
	Ftimer_id      int32
	Flocale        uintptr // Tlocale_t = *S__locale_struct
	Fkilllock      [1]int32
	Fdlerror_buf   uintptr // *int8
	Fstdio_locks   uintptr // *void
	Fcanary_at_end uint64
	Fdtv_copy      uintptr // **void
}

type t26uintptr_t = uint64

type s22__ptcb = struct {
	F__f    uintptr // *func(TLS, uintptr)
	F__x    uintptr // *void
	F__next uintptr // *S__ptcb
}

type s59__locale_struct = struct{ Fcat [6]uintptr }

// linking wcrtomb.o

func postinc639(p *uintptr) uintptr { r := *p; *p += 1; return r }

// Xwcrtomb is defined at wcrtomb.c:6:8
func Xwcrtomb(tls TLS, _s uintptr /* *int8 */, _wc int32, _st uintptr /* *Tmbstate_t = struct{F__opaque1 uint32;F__opaque2 uint32;} */) (r uint64) {
	if _s != 0 {
		goto _1
	}

	return uint64(1)

_1:
	if uint32(_wc) >= uint32(0x80) {
		goto _2
	}

	*(*int8)(unsafe.Pointer(_s)) = int8(_wc)
	return uint64(1)

	goto _3

_2:
	if func() int32 {
		if *(*uintptr)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(x21__pthread_self(tls) + 192)))) != 0 {
			return int32(4)
		}
		return int32(1)
	}() != int32(1) {
		goto _4
	}

	if uint32(_wc)-uint32(0xdf80) < uint32(0x80) {
		goto _6
	}

	*(*int32)(unsafe.Pointer(X__errno_location(tls))) = int32(84)
	return uint64(18446744073709551615)

_6:
	*(*int8)(unsafe.Pointer(_s)) = int8(_wc)
	return uint64(1)

	goto _5

_4:
	if uint32(_wc) >= uint32(0x800) {
		goto _7
	}

	*(*int8)(unsafe.Pointer(postinc639(&_s))) = int8(int32(0xc0) | _wc>>(uint(6)%32))
	*(*int8)(unsafe.Pointer(_s)) = int8(int32(0x80) | _wc&int32(0x3f))
	return uint64(2)

	goto _8

_7:
	if uint32(_wc) >= uint32(0xd800) && uint32(_wc)-uint32(0xe000) >= uint32(0x2000) {
		goto _9
	}

	*(*int8)(unsafe.Pointer(postinc639(&_s))) = int8(int32(0xe0) | _wc>>(uint(12)%32))
	*(*int8)(unsafe.Pointer(postinc639(&_s))) = int8(int32(0x80) | _wc>>(uint(6)%32)&int32(0x3f))
	*(*int8)(unsafe.Pointer(_s)) = int8(int32(0x80) | _wc&int32(0x3f))
	return uint64(3)

	goto _10

_9:
	if uint32(_wc)-uint32(0x10000) >= uint32(0x100000) {
		goto _11
	}

	*(*int8)(unsafe.Pointer(postinc639(&_s))) = int8(int32(0xf0) | _wc>>(uint(18)%32))
	*(*int8)(unsafe.Pointer(postinc639(&_s))) = int8(int32(0x80) | _wc>>(uint(12)%32)&int32(0x3f))
	*(*int8)(unsafe.Pointer(postinc639(&_s))) = int8(int32(0x80) | _wc>>(uint(6)%32)&int32(0x3f))
	*(*int8)(unsafe.Pointer(_s)) = int8(int32(0x80) | _wc&int32(0x3f))
	return uint64(4)

_11:
_10:
_8:
_5:
_3:
	*(*int32)(unsafe.Pointer(X__errno_location(tls))) = int32(84)
	return uint64(18446744073709551615)
}

type t589__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t589__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t15wchar_t = int32

type t123size_t = uint64

// x__pthread_self is defined at pthread_arch.h:1:30
func x21__pthread_self(tls TLS) (r uintptr /* *S__pthread */) {
	return uintptr(tls)
	return r
}

type s26__pthread = struct {
	Fself          uintptr // *S__pthread
	Fdtv           uintptr // **void
	Funused1       uintptr // *void
	Funused2       uintptr // *void
	Fsysinfo       uint64
	Fcanary        uint64
	Fcanary2       uint64
	Ftid           int32
	Ferrno_val     int32
	Fdetach_state  int32
	Fcancel        int32
	Fcanceldisable uint8
	Fcancelasync   uint8
	F74            uint8
	Fmap_base      uintptr // *uint8
	Fmap_size      uint64
	Fstack         uintptr // *void
	Fstack_size    uint64
	Fguard_size    uint64
	Fstart_arg     uintptr // *void
	Fstart         uintptr // *func(TLS, uintptr) uintptr
	Fresult        uintptr // *void
	Fcancelbuf     uintptr // *S__ptcb
	Ftsd           uintptr // **void
	Frobust_list   struct {
		Fhead    uintptr
		Foff     int64
		Fpending uintptr
	}
	Ftimer_id      int32
	Flocale        uintptr // Tlocale_t = *S__locale_struct
	Fkilllock      [1]int32
	Fdlerror_buf   uintptr // *int8
	Fstdio_locks   uintptr // *void
	Fcanary_at_end uint64
	Fdtv_copy      uintptr // **void
}

type t27uintptr_t = uint64

type s23__ptcb = struct {
	F__f    uintptr // *func(TLS, uintptr)
	F__x    uintptr // *void
	F__next uintptr // *S__ptcb
}

type s60__locale_struct = struct{ Fcat [6]uintptr }

// linking wcsnrtombs.o

func set640(p *uint64, v uint64) uint64 { *p = v; return v }

// Xwcsnrtombs is defined at wcsnrtombs.c:3:8
func Xwcsnrtombs(tls TLS, _dst uintptr /* *int8 */, _wcs uintptr /* **Twchar_t = int32 */, _wn uint64, _n uint64, _st uintptr /* *Tmbstate_t = struct{F__opaque1 uint32;F__opaque2 uint32;} */) (r uint64) {
	esc := MustMalloc(264)
	var (
		_l      uint64
		_cnt    uint64
		_n2     uint64
		_s      uintptr     // *int8
		_buf    = esc       // *[256]int8
		_ws     = esc + 256 // **Twchar_t = int32
		_tmp_ws uintptr     // *Twchar_t = int32
	)
	defer Free(esc)
	_cnt = uint64(0)
	*(*uintptr)(unsafe.Pointer(_ws)) = *(*uintptr)(unsafe.Pointer(_wcs))
	if _dst != 0 {
		goto _1
	}

	_s = _buf
	_n = uint64(256)
	goto _2

_1:
	_s = _dst
_2:
_3:
	if *(*uintptr)(unsafe.Pointer(_ws)) == 0 || _n == 0 || set640(&_n2, _wn) < _n && _n2 <= uint64(32) {
		goto _4
	}

	if _n2 < _n {
		goto _5
	}

	_n2 = _n
_5:
	_tmp_ws = *(*uintptr)(unsafe.Pointer(_ws))
	_l = Xwcsrtombs(tls, _s, _ws, _n2, null)
	if _l+uint64(1) != 0 {
		goto _6
	}

	_cnt = _l
	_n = uint64(0)
	goto _4

_6:
	if _s == _buf {
		goto _7
	}

	_s += uintptr(_l)
	_n = _n - _l
_7:
	_wn = func() uint64 {
		if *(*uintptr)(unsafe.Pointer(_ws)) != 0 {
			return _wn - uint64(int64((*(*uintptr)(unsafe.Pointer(_ws))-_tmp_ws)/4))
		}
		return uint64(0)
	}()
	_cnt = _cnt + _l
	goto _3

_4:
	if *(*uintptr)(unsafe.Pointer(_ws)) == 0 {
		goto _8
	}

_9:
	if _n == 0 || _wn == 0 {
		goto _10
	}

	_l = Xwcrtomb(tls, _s, *(*int32)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_ws)))), null)
	if _l+uint64(1) > uint64(1) {
		goto _11
	}

	if _l != 0 {
		goto _12
	}

	*(*uintptr)(unsafe.Pointer(_ws)) = null
	goto _13

_12:
	_cnt = _l
_13:
	goto _10

_11:
	*(*uintptr)(unsafe.Pointer(_ws)) += 4
	_wn--
	_s += uintptr(_l)
	_n = _n - _l
	_cnt = _cnt + _l
	goto _9

_10:
_8:
	if _dst == 0 {
		goto _14
	}

	*(*uintptr)(unsafe.Pointer(_wcs)) = *(*uintptr)(unsafe.Pointer(_ws))
_14:
	return _cnt
}

type t590__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t590__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t124size_t = uint64

type t16wchar_t = int32

// linking wcsrtombs.o

func postinc641(p *uintptr) uintptr { r := *p; *p += 1; return r }

// Xwcsrtombs is defined at wcsrtombs.c:3:8
func Xwcsrtombs(tls TLS, _s uintptr /* *int8 */, _ws uintptr /* **Twchar_t = int32 */, _n uint64, _st uintptr /* *Tmbstate_t = struct{F__opaque1 uint32;F__opaque2 uint32;} */) (r uint64) {
	esc := MustMalloc(4)
	var (
		_ws2 uintptr // *Twchar_t = int32
		_buf = esc   // *[4]int8
		_N   uint64
		_l   uint64
	)
	defer Free(esc)
	_N = _n
	if _s != 0 {
		goto _1
	}

	_n = uint64(0)
	_ws2 = *(*uintptr)(unsafe.Pointer(_ws))
_2:
	if *(*int32)(unsafe.Pointer(_ws2)) == 0 {
		goto _4
	}

	if uint32(*(*int32)(unsafe.Pointer(_ws2))) < uint32(0x80) {
		goto _5
	}

	_l = Xwcrtomb(tls, _buf, *(*int32)(unsafe.Pointer(_ws2)), null)
	if _l+uint64(1) != 0 {
		goto _7
	}

	return uint64(18446744073709551615)

_7:
	_n = _n + _l
	goto _6

_5:
	_n++
_6:
	_ws2 += 4
	goto _2

_4:
	return _n

_1:
_8:
	if _n < uint64(4) {
		goto _9
	}

	if uint32(**(**int32)(unsafe.Pointer(_ws)))-uint32(1) < uint32(0x7f) {
		goto _10
	}

	if **(**int32)(unsafe.Pointer(_ws)) != 0 {
		goto _12
	}

	*(*int8)(unsafe.Pointer(_s)) = int8(0)
	*(*uintptr)(unsafe.Pointer(_ws)) = null
	return _N - _n

_12:
	_l = Xwcrtomb(tls, _s, **(**int32)(unsafe.Pointer(_ws)), null)
	if _l+uint64(1) != 0 {
		goto _13
	}

	return uint64(18446744073709551615)

_13:
	_s += uintptr(_l)
	_n = _n - _l
	goto _11

_10:
	*(*int8)(unsafe.Pointer(postinc641(&_s))) = int8(**(**int32)(unsafe.Pointer(_ws)))
	_n--
_11:
	*(*uintptr)(unsafe.Pointer(_ws)) += 4
	goto _8

_9:
_14:
	if _n == 0 {
		goto _15
	}

	if uint32(**(**int32)(unsafe.Pointer(_ws)))-uint32(1) < uint32(0x7f) {
		goto _16
	}

	if **(**int32)(unsafe.Pointer(_ws)) != 0 {
		goto _18
	}

	*(*int8)(unsafe.Pointer(_s)) = int8(0)
	*(*uintptr)(unsafe.Pointer(_ws)) = null
	return _N - _n

_18:
	_l = Xwcrtomb(tls, _buf, **(**int32)(unsafe.Pointer(_ws)), null)
	if _l+uint64(1) != 0 {
		goto _19
	}

	return uint64(18446744073709551615)

_19:
	if _l <= _n {
		goto _20
	}

	return _N - _n

_20:
	Xwcrtomb(tls, _s, **(**int32)(unsafe.Pointer(_ws)), null)
	_s += uintptr(_l)
	_n = _n - _l
	goto _17

_16:
	*(*int8)(unsafe.Pointer(postinc641(&_s))) = int8(**(**int32)(unsafe.Pointer(_ws)))
	_n--
_17:
	*(*uintptr)(unsafe.Pointer(_ws)) += 4
	goto _14

_15:
	return _N
}

type t591__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t591__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t125size_t = uint64

type t17wchar_t = int32

// linking wcstombs.o

// Xwcstombs is defined at wcstombs.c:5:8
func Xwcstombs(tls TLS, _s uintptr /* *int8 */, _ws uintptr /* *Twchar_t = int32 */, _n uint64) (r uint64) {
	X__assert_fail(tls, ts+0 /* "TODO(ccgo)" */, ts+2500 /* "src/multibyte/wc..." */, int32(7), x642__func__)
	return r
}

type t592__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t592__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t126size_t = uint64

// x1__func__ [9]int8, escapes: true, wcstombs.c:6:1
var x642__func__ = ds + 43224

// linking wctob.o

// Xwctob is defined at wctob.c:6:5
func Xwctob(tls TLS, _c uint32) (r int32) {
	if _c >= uint32(128) {
		goto _1
	}

	return int32(_c)

_1:
	if func() int32 {
		if *(*uintptr)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(x22__pthread_self(tls) + 192)))) != 0 {
			return int32(4)
		}
		return int32(1)
	}() != int32(1) || _c-uint32(0xdf80) >= uint32(0x80) {
		goto _2
	}

	return int32(uint8(_c))

_2:
	return int32(-1)
}

type t593__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t593__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t16wint_t = uint32

// x__pthread_self is defined at pthread_arch.h:1:30
func x22__pthread_self(tls TLS) (r uintptr /* *S__pthread */) {
	return uintptr(tls)
	return r
}

type s27__pthread = struct {
	Fself          uintptr // *S__pthread
	Fdtv           uintptr // **void
	Funused1       uintptr // *void
	Funused2       uintptr // *void
	Fsysinfo       uint64
	Fcanary        uint64
	Fcanary2       uint64
	Ftid           int32
	Ferrno_val     int32
	Fdetach_state  int32
	Fcancel        int32
	Fcanceldisable uint8
	Fcancelasync   uint8
	F74            uint8
	Fmap_base      uintptr // *uint8
	Fmap_size      uint64
	Fstack         uintptr // *void
	Fstack_size    uint64
	Fguard_size    uint64
	Fstart_arg     uintptr // *void
	Fstart         uintptr // *func(TLS, uintptr) uintptr
	Fresult        uintptr // *void
	Fcancelbuf     uintptr // *S__ptcb
	Ftsd           uintptr // **void
	Frobust_list   struct {
		Fhead    uintptr
		Foff     int64
		Fpending uintptr
	}
	Ftimer_id      int32
	Flocale        uintptr // Tlocale_t = *S__locale_struct
	Fkilllock      [1]int32
	Fdlerror_buf   uintptr // *int8
	Fstdio_locks   uintptr // *void
	Fcanary_at_end uint64
	Fdtv_copy      uintptr // **void
}

type t28uintptr_t = uint64

type t127size_t = uint64

type s24__ptcb = struct {
	F__f    uintptr // *func(TLS, uintptr)
	F__x    uintptr // *void
	F__next uintptr // *S__ptcb
}

type s61__locale_struct = struct{ Fcat [6]uintptr }

// linking wctomb.o

// Xwctomb is defined at wctomb.c:4:5
func Xwctomb(tls TLS, _s uintptr /* *int8 */, _wc int32) (r int32) {
	if _s != 0 {
		goto _1
	}

	return int32(0)

_1:
	return int32(Xwcrtomb(tls, _s, _wc, null))
}

type t594__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t594__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t18wchar_t = int32

type t128size_t = uint64

// linking accept.o

// Xaccept is defined at accept.c:6:5
func Xaccept(tls TLS, _fd int32, _addr uintptr /* *Ssockaddr */, _len uintptr /* *Tsocklen_t = uint32 */) (r int32) {
	X__assert_fail(tls, ts+0 /* "TODO(ccgo)" */, ts+2528 /* "src/network/acce..." */, int32(8), x643__func__)
	return r
}

type t595__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t595__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type Ssockaddr = struct {
	Fsa_family uint16
	Fsa_data   [14]int8
}

// x1__func__ [7]int8, escapes: true, accept.c:7:1
var x643__func__ = ds + 43240

type Tsa_family_t = uint16

// linking accept4.o

// Xaccept4 is defined at accept4.c:9:5
func Xaccept4(tls TLS, _fd int32, _addr uintptr /* *Ssockaddr */, _len uintptr /* *Tsocklen_t = uint32 */, _flg int32) (r int32) {
	if _flg != 0 {
		goto _1
	}

	return Xaccept(tls, _fd, _addr, _len)

_1:
	X__assert_fail(tls, ts+0 /* "TODO(ccgo)" */, ts+2552 /* "src/network/acce..." */, int32(12), x644__func__)
	return r
}

type t596__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t596__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type s1sockaddr = struct {
	Fsa_family uint16
	Fsa_data   [14]int8
}

// x1__func__ [8]int8, escapes: true, accept4.c:10:1
var x644__func__ = ds + 43248

type t1sa_family_t = uint16

// linking bind.o

// Xbind is defined at bind.c:4:5
func Xbind(tls TLS, _fd int32, _addr uintptr /* *Ssockaddr */, _len uint32) (r int32) {
	return int32(X__syscall_ret(tls, uint64(x7__syscall6(tls, int64(49), int64(_fd), int64(_addr), int64(_len), int64(0), int64(0), int64(0)))))
}

type t597__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t597__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t1socklen_t = uint32

type s2sockaddr = struct {
	Fsa_family uint16
	Fsa_data   [14]int8
}

// x__syscall6 is defined at syscall_arch.h:63:22
func x7__syscall6(tls TLS, _n int64, _a1 int64, _a2 int64, _a3 int64, _a4 int64, _a5 int64, _a6 int64) (r int64) {
	return X__syscall(tls, _n, _a1, _a2, _a3, _a4, _a5, _a6)
}

type t2sa_family_t = uint16

// linking connect.o

// Xconnect is defined at connect.c:6:5
func Xconnect(tls TLS, _fd int32, _addr uintptr /* *Ssockaddr */, _len uint32) (r int32) {
	X__assert_fail(tls, ts+0 /* "TODO(ccgo)" */, ts+2576 /* "src/network/conn..." */, int32(8), x645__func__)
	return r
}

type t598__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t598__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t2socklen_t = uint32

type s3sockaddr = struct {
	Fsa_family uint16
	Fsa_data   [14]int8
}

// x1__func__ [8]int8, escapes: true, connect.c:7:1
var x645__func__ = ds + 43256

type t3sa_family_t = uint16

// linking dn_comp.o

func set646(p *int32, v int32) int32 { *p = v; return v }

func postinc647(p *int32) int32 { r := *p; *p += 1; return r }

func postinc648(p *uintptr) uintptr { r := *p; *p += 8; return r }

// X__dn_comp is defined at dn_comp.c:58:5
func X__dn_comp(tls TLS, _src uintptr /* *int8 */, _dst uintptr /* *uint8 */, _space int32, _dnptrs uintptr /* **uint8 */, _lastdnptr uintptr /* **uint8 */) (r int32) {
	esc := MustMalloc(143)
	var (
		_i       int32
		_j       int32
		_n       int32
		_m       int32
		_offset  = esc // *int32
		_bestlen int32
		_bestoff int32
		_lens    = esc + 16 // *[127]uint8
		_p       uintptr    // **uint8
		_end     uintptr    // *int8
		_l       uint64
	)
	defer Free(esc)
	_m = int32(0)
	_bestlen = int32(0)
	_l = Xstrnlen(tls, _src, uint64(255))
	if _l == 0 || int32(*(*int8)(unsafe.Pointer(_src + uintptr(_l-uint64(1))))) != int32('.') {
		goto _1
	}

	_l--
_1:
	if _l <= uint64(253) && _space > int32(0) {
		goto _2
	}

	return int32(-1)

_2:
	if _l != 0 {
		goto _3
	}

	*(*uint8)(unsafe.Pointer(_dst)) = uint8(0)
	return int32(1)

_3:
	_end = _src + uintptr(_l)
	_n = xgetlens(tls, _lens, _src, int32(_l))
	if _n != 0 {
		goto _4
	}

	return int32(-1)

_4:
	_p = _dnptrs
	if _p == 0 || *(*uintptr)(unsafe.Pointer(_p)) == 0 {
		goto _5
	}

	_p += 8
_6:
	if *(*uintptr)(unsafe.Pointer(_p)) == 0 {
		goto _8
	}

	_m = xmatch(tls, _offset, *(*uintptr)(unsafe.Pointer(_dnptrs)), *(*uintptr)(unsafe.Pointer(_p)), _end, _lens, _n)
	if _m <= _bestlen {
		goto _9
	}

	_bestlen = _m
	_bestoff = *(*int32)(unsafe.Pointer(_offset))
	if uint64(_m) != _l {
		goto _10
	}

	goto _8

_10:
_9:
	_p += 8
	goto _6

_8:
_5:
	if uint64(_space) >= _l-uint64(_bestlen)+uint64(2)+uint64(bool2int(uint64(_bestlen-int32(1)) < _l-uint64(1))) {
		goto _11
	}

	return int32(-1)

_11:
	Xmemcpy(tls, _dst+uintptr(1), _src, _l-uint64(_bestlen))
	_i = set646(&_j, int32(0))
_12:
	if uint64(_i) >= _l-uint64(_bestlen) {
		goto _14
	}

	*(*uint8)(unsafe.Pointer(_dst + uintptr(_i))) = *(*uint8)(unsafe.Pointer(_lens + uintptr(_j)))
	_i = _i + (int32(*(*uint8)(unsafe.Pointer(_lens + uintptr(postinc647(&_j))))) + int32(1))
	goto _12

_14:
	if _bestlen == 0 {
		goto _15
	}

	*(*uint8)(unsafe.Pointer(_dst + uintptr(postinc647(&_i)))) = uint8(int32(0xc0) | _bestoff>>(uint(8)%32))
	*(*uint8)(unsafe.Pointer(_dst + uintptr(postinc647(&_i)))) = uint8(_bestoff)
	goto _16

_15:
	*(*uint8)(unsafe.Pointer(_dst + uintptr(postinc647(&_i)))) = uint8(0)
_16:
	if _i <= int32(2) || _lastdnptr == 0 || _dnptrs == 0 || *(*uintptr)(unsafe.Pointer(_dnptrs)) == 0 {
		goto _17
	}

_18:
	if *(*uintptr)(unsafe.Pointer(_p)) == 0 {
		goto _19
	}

	_p += 8
	goto _18

_19:
	if (_p + 8*uintptr(1)) >= _lastdnptr {
		goto _20
	}

	*(*uintptr)(unsafe.Pointer(postinc648(&_p))) = _dst
	*(*uintptr)(unsafe.Pointer(_p)) = null
_20:
_17:
	return _i
}

type t599__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t599__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t129size_t = uint64

func preinc649(p *int32) int32 { *p += 1; return *p }

// xgetlens is defined at dn_comp.c:24:12
func xgetlens(tls TLS, _lens uintptr /* *uint8 */, _s uintptr /* *int8 */, _l int32) (r int32) {
	var (
		_i int32
		_j int32
		_k int32
	)
	_i = int32(0)
	_j = int32(0)
	_k = int32(0)

_1:
_4:
	if _j >= _l || int32(*(*int8)(unsafe.Pointer(_s + uintptr(_j)))) == int32('.') {
		goto _6
	}

	_j++
	goto _4

_6:
	if uint32(_j-_k)-uint32(1) <= uint32(62) {
		goto _7
	}

	return int32(0)

_7:
	*(*uint8)(unsafe.Pointer(_lens + uintptr(postinc647(&_i)))) = uint8(_j - _k)
	if _j != _l {
		goto _8
	}

	return _i

_8:
	_k = preinc649(&_j)
	goto _1
	return r
}

func preinc650(p *int32) int32 { *p += -1; return *p }

// xmatch is defined at dn_comp.c:37:12
func xmatch(tls TLS, _offset uintptr /* *int32 */, _base uintptr /* *uint8 */, _dn uintptr /* *uint8 */, _end uintptr /* *int8 */, _lens uintptr /* *uint8 */, _nlen int32) (r int32) {
	esc := MustMalloc(256)
	var (
		_l    int32
		_o    int32
		_m    int32
		_offs = esc // *[128]int16
		_noff int32
	)
	defer Free(esc)
	_m = int32(0)
	_noff = xgetoffs(tls, _offs, _base, _dn)
	if _noff != 0 {
		goto _1
	}

	return int32(0)

_1:
_2:
	_l = int32(*(*uint8)(unsafe.Pointer(_lens + uintptr(preinc650(&_nlen)))))
	_o = int32(*(*int16)(unsafe.Pointer(_offs + 2*uintptr(preinc650(&_noff)))))
	_end -= uintptr(_l)
	if _l == int32(*(*uint8)(unsafe.Pointer(_base + uintptr(_o)))) && Xmemcmp(tls, (_base+uintptr(_o))+uintptr(1), _end, uint64(_l)) == 0 {
		goto _5
	}

	return _m

_5:
	*(*int32)(unsafe.Pointer(_offset)) = _o
	_m = _m + _l
	if _nlen == 0 {
		goto _6
	}

	_m++
_6:
	if _nlen != 0 && _noff != 0 {
		goto _7
	}

	return _m

_7:
	_end--
	goto _2
	return r
}

// xgetoffs is defined at dn_comp.c:8:12
func xgetoffs(tls TLS, _offs uintptr /* *int16 */, _base uintptr /* *uint8 */, _s uintptr /* *uint8 */) (r int32) {
	var _i int32

	_i = int32(0)

_1:
_4:
	if (int32(*(*uint8)(unsafe.Pointer(_s))) & int32(0xc0)) == 0 {
		goto _5
	}

	if int32(*(*uint8)(unsafe.Pointer(_s)))&int32(0xc0) == int32(0xc0) {
		goto _6
	}

	return int32(0)

_6:
	_s = _base + uintptr(int32(*(*uint8)(unsafe.Pointer(_s)))&int32(0x3f)<<(uint(8)%32)|int32(*(*uint8)(unsafe.Pointer(_s + 1))))
	goto _4

_5:
	if *(*uint8)(unsafe.Pointer(_s)) != 0 {
		goto _7
	}

	return _i

_7:
	if int64(_s-_base) < int64(0x4000) {
		goto _8
	}

	return int32(0)

_8:
	*(*int16)(unsafe.Pointer(_offs + 2*uintptr(postinc647(&_i)))) = int16(int64(_s - _base))
	_s += uintptr(int32(*(*uint8)(unsafe.Pointer(_s))) + int32(1))
	goto _1
	return r
}

// linking dn_expand.o

func postinc651(p *uintptr) uintptr { r := *p; *p += 1; return r }

func postinc652(p *int32) int32 { r := *p; *p += -1; return r }

// X__dn_expand is defined at dn_expand.c:4:5
func X__dn_expand(tls TLS, _base uintptr /* *uint8 */, _end uintptr /* *uint8 */, _src uintptr /* *uint8 */, _dest uintptr /* *int8 */, _space int32) (r int32) {
	var (
		_p      uintptr // *uint8
		_dend   uintptr // *int8
		_dbegin uintptr // *int8
		_len    int32
		_i      int32
		_j      int32
	)
	_p = _src
	_dbegin = _dest
	_len = int32(-1)
	if _p != _end && _space > int32(0) {
		goto _1
	}

	return int32(-1)

_1:
	_dend = _dest + uintptr(func() int32 {
		if _space > int32(254) {
			return int32(254)
		}
		return _space
	}())
	_i = int32(0)
_2:
	if int64(_i) >= int64(_end-_base) {
		goto _4
	}

	if (int32(*(*uint8)(unsafe.Pointer(_p))) & int32(0xc0)) == 0 {
		goto _5
	}

	if (_p + uintptr(1)) != _end {
		goto _7
	}

	return int32(-1)

_7:
	_j = int32(*(*uint8)(unsafe.Pointer(_p)))&int32(0x3f)<<(uint(8)%32) | int32(*(*uint8)(unsafe.Pointer(_p + 1)))
	if _len >= int32(0) {
		goto _8
	}

	_len = int32(int64((_p + uintptr(2)) - _src))
_8:
	if int64(_j) < int64(_end-_base) {
		goto _9
	}

	return int32(-1)

_9:
	_p = _base + uintptr(_j)
	goto _6

_5:
	if *(*uint8)(unsafe.Pointer(_p)) == 0 {
		goto _10
	}

	if _dest == _dbegin {
		goto _12
	}

	*(*int8)(unsafe.Pointer(postinc651(&_dest))) = int8('.')
_12:
	_j = int32(*(*uint8)(unsafe.Pointer(postinc651(&_p))))
	if int64(_j) < int64(_end-_p) && int64(_j) < int64(_dend-_dest) {
		goto _13
	}

	return int32(-1)

_13:
_14:
	if postinc652(&_j) == 0 {
		goto _15
	}

	*(*int8)(unsafe.Pointer(postinc651(&_dest))) = int8(*(*uint8)(unsafe.Pointer(postinc651(&_p))))
	goto _14

_15:
	goto _11

_10:
	*(*int8)(unsafe.Pointer(_dest)) = int8(0)
	if _len >= int32(0) {
		goto _16
	}

	_len = int32(int64((_p + uintptr(1)) - _src))
_16:
	return _len

_11:
_6:
	_i = _i + int32(2)
	goto _2

_4:
	return int32(-1)
}

type t600__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t600__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// linking dn_skipname.o

// Xdn_skipname is defined at dn_skipname.c:3:5
func Xdn_skipname(tls TLS, _s uintptr /* *uint8 */, _end uintptr /* *uint8 */) (r int32) {
	var _p uintptr // *uint8

	_p = _s
_1:
	if _p >= _end {
		goto _3
	}

	if *(*uint8)(unsafe.Pointer(_p)) != 0 {
		goto _4
	}

	return int32(int64(_p-_s) + int64(1))

	goto _5

_4:
	if int32(*(*uint8)(unsafe.Pointer(_p))) < int32(192) {
		goto _6
	}

	if (_p + uintptr(1)) >= _end {
		goto _7
	}

	return int32(int64(_p-_s) + int64(2))

	goto _8

_7:
	goto _3

_8:
_6:
_5:
	_p++
	goto _1

_3:
	return int32(-1)
}

type t601__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t601__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// linking dns_parse.o

func postinc653(p *int32) int32 { r := *p; *p += -1; return r }

func fn654(p uintptr) func(TLS, uintptr, int32, uintptr, int32, uintptr) int32 {
	return *(*func(TLS, uintptr, int32, uintptr, int32, uintptr) int32)(unsafe.Pointer(&p))
}

// X__dns_parse is defined at dns_parse.c:3:5
func X__dns_parse(tls TLS, _r uintptr /* *uint8 */, _rlen int32, _callback uintptr /* *func(TLS, uintptr, int32, uintptr, int32, uintptr) int32 */, _ctx uintptr /* *void */) (r int32) {
	var (
		_qdcount int32
		_ancount int32
		_p       uintptr // *uint8
		_len     int32
	)
	if _rlen >= int32(12) {
		goto _1
	}

	return int32(-1)

_1:
	if int32(*(*uint8)(unsafe.Pointer(_r + 3)))&int32(15) == 0 {
		goto _2
	}

	return int32(0)

_2:
	_p = _r + uintptr(12)
	_qdcount = int32(*(*uint8)(unsafe.Pointer(_r + 4)))*int32(256) + int32(*(*uint8)(unsafe.Pointer(_r + 5)))
	_ancount = int32(*(*uint8)(unsafe.Pointer(_r + 6)))*int32(256) + int32(*(*uint8)(unsafe.Pointer(_r + 7)))
	if _qdcount+_ancount <= int32(64) {
		goto _3
	}

	return int32(-1)

_3:
_4:
	if postinc653(&_qdcount) == 0 {
		goto _5
	}

_6:
	if int64(_p-_r) >= int64(_rlen) || uint32(*(*uint8)(unsafe.Pointer(_p)))-uint32(1) >= uint32(127) {
		goto _7
	}

	_p++
	goto _6

_7:
	if int32(*(*uint8)(unsafe.Pointer(_p))) <= int32(193) && (int32(*(*uint8)(unsafe.Pointer(_p))) != int32(193) || int32(*(*uint8)(unsafe.Pointer(_p + 1))) <= int32(254)) && _p <= ((_r+uintptr(_rlen))-uintptr(6)) {
		goto _8
	}

	return int32(-1)

_8:
	_p += uintptr(int32(5) + bool2int(*(*uint8)(unsafe.Pointer(_p)) != 0))
	goto _4

_5:
_9:
	if postinc653(&_ancount) == 0 {
		goto _10
	}

_11:
	if int64(_p-_r) >= int64(_rlen) || uint32(*(*uint8)(unsafe.Pointer(_p)))-uint32(1) >= uint32(127) {
		goto _12
	}

	_p++
	goto _11

_12:
	if int32(*(*uint8)(unsafe.Pointer(_p))) <= int32(193) && (int32(*(*uint8)(unsafe.Pointer(_p))) != int32(193) || int32(*(*uint8)(unsafe.Pointer(_p + 1))) <= int32(254)) && _p <= ((_r+uintptr(_rlen))-uintptr(6)) {
		goto _13
	}

	return int32(-1)

_13:
	_p += uintptr(int32(1) + bool2int(*(*uint8)(unsafe.Pointer(_p)) != 0))
	_len = int32(*(*uint8)(unsafe.Pointer(_p + 8)))*int32(256) + int32(*(*uint8)(unsafe.Pointer(_p + 9)))
	if (_p + uintptr(_len)) <= (_r + uintptr(_rlen)) {
		goto _14
	}

	return int32(-1)

_14:
	if fn654(_callback)(tls, _ctx, int32(*(*uint8)(unsafe.Pointer(_p + 1))), _p+uintptr(10), _len, _r) >= int32(0) {
		goto _15
	}

	return int32(-1)

_15:
	_p += uintptr(int32(10) + _len)
	goto _9

_10:
	return int32(0)
}

type t602__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t602__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// linking ent.o

// Xsethostent is defined at ent.c:3:6
func Xsethostent(tls TLS, _x int32) {
}

// Xgethostent is defined at ent.c:7:6
func Xgethostent(tls TLS) (r uintptr /* *void */) {
	return null
}

// Xendhostent is defined at ent.c:12:6
func Xendhostent(tls TLS) {
}

type t603__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t603__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// linking ether.o

// Xether_aton_r is defined at ether.c:5:19
func Xether_aton_r(tls TLS, _x uintptr /* *int8 */, _p_a uintptr /* *Sether_addr */) (r uintptr /* *Sether_addr */) {
	esc := MustMalloc(24)
	var (
		_a  = esc      // *Sether_addr
		_y  = esc + 16 // **int8
		_ii int32
		_n  uint64
	)
	defer Free(esc)

	_ii = int32(0)
_1:
	if _ii >= int32(6) {
		goto _3
	}

	if _ii == int32(0) {
		goto _4
	}

	if int32(*(*int8)(unsafe.Pointer(_x))) == int32(':') {
		goto _5
	}

	return null

	goto _6

_5:
	_x++
_6:
_4:
	_n = Xstrtoul(tls, _x, _y, int32(16))
	_x = *(*uintptr)(unsafe.Pointer(_y))
	if _n <= uint64(0xff) {
		goto _7
	}

	return null

_7:
	*(*uint8)(unsafe.Pointer(_a + uintptr(_ii))) = uint8(_n)
	_ii++
	goto _1

_3:
	if int32(*(*int8)(unsafe.Pointer(_x))) == int32(0) {
		goto _8
	}

	return null

_8:
	*(*Sether_addr)(unsafe.Pointer(_p_a)) = *(*Sether_addr)(unsafe.Pointer(_a))
	return _p_a
}

// Xether_aton is defined at ether.c:25:19
func Xether_aton(tls TLS, _x uintptr /* *int8 */) (r uintptr /* *Sether_addr */) {
	return Xether_aton_r(tls, _x, x655a)
}

// Xether_ntoa_r is defined at ether.c:31:6
func Xether_ntoa_r(tls TLS, _p_a uintptr /* *Sether_addr */, _x uintptr /* *int8 */) (r uintptr /* *int8 */) {
	var (
		_y  uintptr // *int8
		_ii int32
	)
	_y = _x

	_ii = int32(0)
_1:
	if _ii >= int32(6) {
		goto _3
	}

	_x += uintptr(Xsprintf(tls, _x, func() uintptr {
		if _ii == int32(0) {
			return ts + 2600 /* "%.2X" */
		}
		return ts + 2608 /* ":%.2X" */
	}(), int32(*(*uint8)(unsafe.Pointer(_p_a + uintptr(_ii))))))
	_ii++
	goto _1

_3:
	return _y
}

// Xether_ntoa is defined at ether.c:40:6
func Xether_ntoa(tls TLS, _p_a uintptr /* *Sether_addr */) (r uintptr /* *int8 */) {
	return Xether_ntoa_r(tls, _p_a, x656x)
}

// Xether_line is defined at ether.c:45:5
func Xether_line(tls TLS, _l uintptr /* *int8 */, _e uintptr /* *Sether_addr */, _hostname uintptr /* *int8 */) (r int32) {
	return int32(-1)
}

// Xether_ntohost is defined at ether.c:50:5
func Xether_ntohost(tls TLS, _hostname uintptr /* *int8 */, _e uintptr /* *Sether_addr */) (r int32) {
	return int32(-1)
}

// Xether_hostton is defined at ether.c:55:5
func Xether_hostton(tls TLS, _hostname uintptr /* *int8 */, _e uintptr /* *Sether_addr */) (r int32) {
	return int32(-1)
}

type t604__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t604__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type Sether_addr = struct{ Fether_addr_octet [6]uint8 }

type t3uint8_t = uint8

// x1a Sether_addr, escapes: true, ether.c:27:27
var x655a = bss + 2536

// x2x [18]int8, escapes: true, ether.c:41:14
var x656x = bss + 2544

// linking freeaddrinfo.o

// Xfreeaddrinfo is defined at freeaddrinfo.c:4:6
func Xfreeaddrinfo(tls TLS, _p uintptr /* *Saddrinfo */) {
	Xfree(tls, _p)
}

type t605__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t605__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type Saddrinfo = struct {
	Fai_flags     int32
	Fai_family    int32
	Fai_socktype  int32
	Fai_protocol  int32
	Fai_addrlen   uint32
	Fai_addr      uintptr // *Ssockaddr
	Fai_canonname uintptr // *int8
	Fai_next      uintptr // *Saddrinfo
}

type t3socklen_t = uint32

type s4sockaddr = struct {
	Fsa_family uint16
	Fsa_data   [14]int8
}

type t4sa_family_t = uint16

// linking gai_strerror.o

// Xgai_strerror is defined at gai_strerror.c:19:12
func Xgai_strerror(tls TLS, _ecode int32) (r uintptr /* *int8 */) {
	var _s uintptr // *int8

	_s = xmsgs
	_ecode++
_1:
	if _ecode == 0 || *(*int8)(unsafe.Pointer(_s)) == 0 {
		goto _3
	}

_4:
	if *(*int8)(unsafe.Pointer(_s)) == 0 {
		goto _6
	}

	_s++
	goto _4

_6:
	_ecode++
	_s++
	goto _1

_3:
	if *(*int8)(unsafe.Pointer(_s)) != 0 {
		goto _7
	}

	_s++
_7:
	return X__lctrans_cur(tls, _s)
}

type t606__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t606__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// xmsgs [239]int8, escapes: true, gai_strerror.c:4:19
var xmsgs = ds + 43264

// linking getaddrinfo.o

// Xgetaddrinfo is defined at getaddrinfo.c:13:5
func Xgetaddrinfo(tls TLS, _host uintptr /* *int8 */, _serv uintptr /* *int8 */, _hint uintptr /* *Saddrinfo */, _res uintptr /* **Saddrinfo */) (r int32) {
	var (
		_family   int32
		_flags    int32
		_proto    int32
		_         = _proto
		_socktype int32
		_         = _socktype
		_mask     int32
	)
	_family = int32(0)
	_flags = int32(0)
	_proto = int32(0)
	_socktype = int32(0)
	if _host != 0 || _serv != 0 {
		goto _1
	}

	return int32(-2)

_1:
	if _hint == 0 {
		goto _2
	}

	_family = *(*int32)(unsafe.Pointer(_hint + 4))
	_flags = *(*int32)(unsafe.Pointer(_hint))
	_proto = *(*int32)(unsafe.Pointer(_hint + 12))
	_socktype = *(*int32)(unsafe.Pointer(_hint + 8))
	_mask = int32(1087)
	if _flags&_mask == _flags {
		goto _3
	}

	return int32(-1)

_3:
	switch _family {
	case int32(2):
		goto _5
	case int32(10):
		goto _6
	case int32(0):
		goto _7
	default:
		goto _8
	}
_5:
_6:
_7:
	goto _4

_8:
	return int32(-6)

_4:
_2:
	X__assert_fail(tls, ts+0 /* "TODO(ccgo)" */, ts+2616 /* "src/network/geta..." */, int32(51), x657__func__)
	return r
}

type t607__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t607__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type s1addrinfo = struct {
	Fai_flags     int32
	Fai_family    int32
	Fai_socktype  int32
	Fai_protocol  int32
	Fai_addrlen   uint32
	Fai_addr      uintptr // *Ssockaddr
	Fai_canonname uintptr // *int8
	Fai_next      uintptr // *Saddrinfo
}

// x1__func__ [12]int8, escapes: true, getaddrinfo.c:14:1
var x657__func__ = ds + 43504

type t4socklen_t = uint32

type s5sockaddr = struct {
	Fsa_family uint16
	Fsa_data   [14]int8
}

type t5sa_family_t = uint16

// linking gethostbyaddr.o

func add658(p *uint64, v uint64) (r uint64) { r = *p + v; *p = r; return r }

// Xgethostbyaddr is defined at gethostbyaddr.c:7:16
func Xgethostbyaddr(tls TLS, _a uintptr /* *void */, _l uint32, _af int32) (r uintptr /* *Shostent */) {
	esc := MustMalloc(8)
	var (
		_size uint64
		_res  = esc // **Shostent
		_err  int32
	)
	defer Free(esc)
	_size = uint64(63)
_1:
	Xfree(tls, x659h)
	x659h = Xmalloc(tls, add658(&_size, _size+uint64(1)))
	if x659h != 0 {
		goto _4
	}

	*(*int32)(unsafe.Pointer(X__h_errno_location(tls))) = int32(3)
	return null

_4:
	_err = Xgethostbyaddr_r(tls, _a, _l, _af, x659h, x659h+32*uintptr(1), _size-uint64(32), _res, X__h_errno_location(tls))
	if _err == int32(34) {
		goto _1
	}

	if _err != 0 {
		return null
	}

	return x659h
}

type t608__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t608__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t5socklen_t = uint32

type Shostent = struct {
	Fh_name      uintptr // *int8
	Fh_aliases   uintptr // **int8
	Fh_addrtype  int32
	Fh_length    int32
	Fh_addr_list uintptr // **int8
}

// x1h *Shostent, escapes: false, gethostbyaddr.c:9:24
var x659h uintptr

type t130size_t = uint64

// linking gethostbyaddr_r.o

// Xgethostbyaddr_r is defined at gethostbyaddr_r.c:11:5
func Xgethostbyaddr_r(tls TLS, _a uintptr /* *void */, _l uint32, _af int32, _h uintptr /* *Shostent */, _buf uintptr /* *int8 */, _buflen uint64, _res uintptr /* **Shostent */, _err uintptr /* *int32 */) (r int32) {
	X__assert_fail(tls, ts+0 /* "TODO(ccgo)" */, ts+2644 /* "src/network/geth..." */, int32(15), x660__func__)
	return r
}

type t609__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t609__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t6socklen_t = uint32

type t131size_t = uint64

type s1hostent = struct {
	Fh_name      uintptr // *int8
	Fh_aliases   uintptr // **int8
	Fh_addrtype  int32
	Fh_length    int32
	Fh_addr_list uintptr // **int8
}

// x1__func__ [16]int8, escapes: true, gethostbyaddr_r.c:14:1
var x660__func__ = ds + 43520

// linking gethostbyname.o

// Xgethostbyname is defined at gethostbyname.c:8:16
func Xgethostbyname(tls TLS, _name uintptr /* *int8 */) (r uintptr /* *Shostent */) {
	return Xgethostbyname2(tls, _name, int32(2))
}

type t610__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t610__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type s2hostent = struct {
	Fh_name      uintptr // *int8
	Fh_aliases   uintptr // **int8
	Fh_addrtype  int32
	Fh_length    int32
	Fh_addr_list uintptr // **int8
}

// linking gethostbyname2.o

func add661(p *uint64, v uint64) (r uint64) { r = *p + v; *p = r; return r }

// Xgethostbyname2 is defined at gethostbyname2.c:8:16
func Xgethostbyname2(tls TLS, _name uintptr /* *int8 */, _af int32) (r uintptr /* *Shostent */) {
	esc := MustMalloc(8)
	var (
		_size uint64
		_res  = esc // **Shostent
		_err  int32
	)
	defer Free(esc)
	_size = uint64(63)
_1:
	Xfree(tls, x662h)
	x662h = Xmalloc(tls, add661(&_size, _size+uint64(1)))
	if x662h != 0 {
		goto _4
	}

	*(*int32)(unsafe.Pointer(X__h_errno_location(tls))) = int32(3)
	return null

_4:
	_err = Xgethostbyname2_r(tls, _name, _af, x662h, x662h+32*uintptr(1), _size-uint64(32), _res, X__h_errno_location(tls))
	if _err == int32(34) {
		goto _1
	}

	if _err != 0 {
		return null
	}

	return x662h
}

type t611__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t611__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type s3hostent = struct {
	Fh_name      uintptr // *int8
	Fh_aliases   uintptr // **int8
	Fh_addrtype  int32
	Fh_length    int32
	Fh_addr_list uintptr // **int8
}

// x1h *Shostent, escapes: false, gethostbyname2.c:10:24
var x662h uintptr

type t132size_t = uint64

// linking gethostbyname2_r.o

// Xgethostbyname2_r is defined at gethostbyname2_r.c:12:5
func Xgethostbyname2_r(tls TLS, _name uintptr /* *int8 */, _af int32, _h uintptr /* *Shostent */, _buf uintptr /* *int8 */, _buflen uint64, _res uintptr /* **Shostent */, _err uintptr /* *int32 */) (r int32) {
	*(*uintptr)(unsafe.Pointer(_res)) = null
	X__assert_fail(tls, ts+0 /* "TODO(ccgo)" */, ts+2676 /* "src/network/geth..." */, int32(22), x663__func__)
	return r
}

type t612__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t612__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t133size_t = uint64

type s4hostent = struct {
	Fh_name      uintptr // *int8
	Fh_aliases   uintptr // **int8
	Fh_addrtype  int32
	Fh_length    int32
	Fh_addr_list uintptr // **int8
}

// x1__func__ [17]int8, escapes: true, gethostbyname2_r.c:15:1
var x663__func__ = ds + 43536

// linking gethostbyname_r.o

// Xgethostbyname_r is defined at gethostbyname_r.c:6:5
func Xgethostbyname_r(tls TLS, _name uintptr /* *int8 */, _h uintptr /* *Shostent */, _buf uintptr /* *int8 */, _buflen uint64, _res uintptr /* **Shostent */, _err uintptr /* *int32 */) (r int32) {
	return Xgethostbyname2_r(tls, _name, int32(2), _h, _buf, _buflen, _res, _err)
}

type t613__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t613__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t134size_t = uint64

type s5hostent = struct {
	Fh_name      uintptr // *int8
	Fh_aliases   uintptr // **int8
	Fh_addrtype  int32
	Fh_length    int32
	Fh_addr_list uintptr // **int8
}

// linking getifaddrs.o

// Xfreeifaddrs is defined at getifaddrs.c:47:6
func Xfreeifaddrs(tls TLS, _ifp uintptr /* *Sifaddrs */) {
	var _n uintptr // *Sifaddrs

_1:
	if _ifp == 0 {
		goto _2
	}

	_n = *(*uintptr)(unsafe.Pointer(_ifp))
	Xfree(tls, _ifp)
	_ifp = _n
	goto _1

_2:
}

func fp664(f func(TLS, uintptr, uintptr) int32) uintptr { return *(*uintptr)(unsafe.Pointer(&f)) }

// Xgetifaddrs is defined at getifaddrs.c:207:5
func Xgetifaddrs(tls TLS, _ifap uintptr /* **Sifaddrs */) (r int32) {
	esc := MustMalloc(528)
	var (
		__ctx = esc   // *Sifaddrs_ctx
		_ctx  uintptr // *Sifaddrs_ctx
		_r    int32
	)
	defer Free(esc)
	_ctx = __ctx
	Xmemset(tls, _ctx, int32(0), uint64(528))
	_r = X__rtnetlink_enumerate(tls, int32(0), int32(0), fp664(xnetlink_msg_to_ifaddr), _ctx)
	if _r != int32(0) {
		goto _1
	}

	*(*uintptr)(unsafe.Pointer(_ifap)) = *(*uintptr)(unsafe.Pointer(_ctx))
	goto _2

_1:
	Xfreeifaddrs(tls, *(*uintptr)(unsafe.Pointer(_ctx)))
_2:
	return _r
}

type t614__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t614__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type Sifaddrs = struct {
	Fifa_next    uintptr // *Sifaddrs
	Fifa_name    uintptr // *int8
	Fifa_flags   uint32
	Fifa_addr    uintptr // *Ssockaddr
	Fifa_netmask uintptr // *Ssockaddr
	Fifa_ifu     struct {
		Fifu_broadaddr [0]uintptr
		Fifu_dstaddr   [0]uintptr
		F              int64
	}
	Fifa_data uintptr // *void
}

type Sifaddrs_ctx = struct {
	Ffirst uintptr // *Sifaddrs_storage
	Flast  uintptr // *Sifaddrs_storage
	Fhash  [64]uintptr
}

// xnetlink_msg_to_ifaddr is defined at getifaddrs.c:105:12
func xnetlink_msg_to_ifaddr(tls TLS, _pctx uintptr /* *void */, _h uintptr /* *Snlmsghdr */) (r int32) {
	var (
		_ctx       uintptr // *Sifaddrs_ctx
		_ifs       uintptr // *Sifaddrs_storage
		_ifs0      uintptr // *Sifaddrs_storage
		_ifi       uintptr // *Sifinfomsg
		_ifa       uintptr // *Sifaddrmsg
		_rta       uintptr // *Srtattr
		_stats_len int32
		_bucket    uint32
	)
	_ctx = _pctx
	_ifi = _h + uintptr(16)
	_ifa = _h + uintptr(16)
	_stats_len = int32(0)
	if int32(*(*uint16)(unsafe.Pointer(_h + 4))) != int32(16) {
		goto _1
	}

	_rta = (_h + uintptr(16)) + uintptr(16)
_3:
	if uint64(int64(_h+uintptr(*(*uint32)(unsafe.Pointer(_h)))-_rta)) < uint64(4) {
		goto _5
	}

	if int32(*(*uint16)(unsafe.Pointer(_rta + 2))) == int32(7) {
		goto _6
	}

	goto _4

_6:
	_stats_len = int32(uint64(*(*uint16)(unsafe.Pointer(_rta))) - uint64(4))
	goto _5

_4:
	_rta = _rta + uintptr((int32(*(*uint16)(unsafe.Pointer(_rta)))+int32(3))&int32(-4))
	goto _3

_5:
	goto _2

_1:
	_ifs0 = *(*uintptr)(unsafe.Pointer((_ctx + 16) + 8*uintptr(*(*uint32)(unsafe.Pointer(_ifa + 4))%uint32(64))))
_7:
	if _ifs0 == 0 {
		goto _9
	}

	if *(*uint32)(unsafe.Pointer(_ifs0 + 172)) != *(*uint32)(unsafe.Pointer(_ifa + 4)) {
		goto _10
	}

	goto _9

_10:
	_ifs0 = *(*uintptr)(unsafe.Pointer(_ifs0 + 56))
	goto _7

_9:
	if _ifs0 != 0 {
		goto _11
	}

	return int32(0)

_11:
_2:
	_ifs = Xcalloc(tls, uint64(1), uint64(200)+uint64(_stats_len))
	if _ifs != 0 {
		goto _12
	}

	return int32(-1)

_12:
	if int32(*(*uint16)(unsafe.Pointer(_h + 4))) != int32(16) {
		goto _13
	}

	*(*uint32)(unsafe.Pointer(_ifs + 172)) = uint32(*(*int32)(unsafe.Pointer(_ifi + 4)))
	*(*uint32)(unsafe.Pointer(_ifs + 16)) = *(*uint32)(unsafe.Pointer(_ifi + 8))
	_rta = (_h + uintptr(16)) + uintptr(16)
_15:
	if uint64(int64(_h+uintptr(*(*uint32)(unsafe.Pointer(_h)))-_rta)) < uint64(4) {
		goto _17
	}

	switch int32(*(*uint16)(unsafe.Pointer(_rta + 2))) {
	case int32(3):
		goto _19
	case int32(1):
		goto _20
	case int32(2):
		goto _21
	case int32(7):
		goto _22
	}
	goto _18

_19:
	if uint64(*(*uint16)(unsafe.Pointer(_rta)))-uint64(4) >= uint64(17) {
		goto _23
	}

	Xmemcpy(tls, _ifs+176, _rta+uintptr(4), uint64(*(*uint16)(unsafe.Pointer(_rta)))-uint64(4))
	*(*uintptr)(unsafe.Pointer(_ifs + 8)) = _ifs + 176
_23:
	goto _18

_20:
	xcopy_lladdr(tls, _ifs+24, _ifs+64, _rta+uintptr(4), uint64(*(*uint16)(unsafe.Pointer(_rta)))-uint64(4), *(*int32)(unsafe.Pointer(_ifi + 4)), *(*uint16)(unsafe.Pointer(_ifi + 2)))
	goto _18

_21:
	xcopy_lladdr(tls, _ifs+40, _ifs+136, _rta+uintptr(4), uint64(*(*uint16)(unsafe.Pointer(_rta)))-uint64(4), *(*int32)(unsafe.Pointer(_ifi + 4)), *(*uint16)(unsafe.Pointer(_ifi + 2)))
	goto _18

_22:
	*(*uintptr)(unsafe.Pointer(_ifs + 48)) = _ifs + 200*uintptr(1)
	Xmemcpy(tls, *(*uintptr)(unsafe.Pointer(_ifs + 48)), _rta+uintptr(4), uint64(*(*uint16)(unsafe.Pointer(_rta)))-uint64(4))
	goto _18

_18:
	_rta = _rta + uintptr((int32(*(*uint16)(unsafe.Pointer(_rta)))+int32(3))&int32(-4))
	goto _15

_17:
	if *(*uintptr)(unsafe.Pointer(_ifs + 8)) == 0 {
		goto _24
	}

	_bucket = *(*uint32)(unsafe.Pointer(_ifs + 172)) % uint32(64)
	*(*uintptr)(unsafe.Pointer(_ifs + 56)) = *(*uintptr)(unsafe.Pointer((_ctx + 16) + 8*uintptr(_bucket)))
	*(*uintptr)(unsafe.Pointer((_ctx + 16) + 8*uintptr(_bucket))) = _ifs
_24:
	goto _14

_13:
	*(*uintptr)(unsafe.Pointer(_ifs + 8)) = *(*uintptr)(unsafe.Pointer(_ifs0 + 8))
	*(*uint32)(unsafe.Pointer(_ifs + 16)) = *(*uint32)(unsafe.Pointer(_ifs0 + 16))
	_rta = (_h + uintptr(16)) + uintptr(8)
_25:
	if uint64(int64(_h+uintptr(*(*uint32)(unsafe.Pointer(_h)))-_rta)) < uint64(4) {
		goto _27
	}

	switch int32(*(*uint16)(unsafe.Pointer(_rta + 2))) {
	case int32(1):
		goto _29
	case int32(4):
		goto _30
	case int32(2):
		goto _31
	case int32(3):
		goto _32
	}
	goto _28

_29:
	if *(*uintptr)(unsafe.Pointer(_ifs + 24)) == 0 {
		goto _33
	}

	xcopy_addr(tls, _ifs+40, int32(*(*uint8)(unsafe.Pointer(_ifa))), _ifs+136, _rta+uintptr(4), uint64(*(*uint16)(unsafe.Pointer(_rta)))-uint64(4), int32(*(*uint32)(unsafe.Pointer(_ifa + 4))))
	goto _34

_33:
	xcopy_addr(tls, _ifs+24, int32(*(*uint8)(unsafe.Pointer(_ifa))), _ifs+64, _rta+uintptr(4), uint64(*(*uint16)(unsafe.Pointer(_rta)))-uint64(4), int32(*(*uint32)(unsafe.Pointer(_ifa + 4))))
_34:
	goto _28

_30:
	xcopy_addr(tls, _ifs+40, int32(*(*uint8)(unsafe.Pointer(_ifa))), _ifs+136, _rta+uintptr(4), uint64(*(*uint16)(unsafe.Pointer(_rta)))-uint64(4), int32(*(*uint32)(unsafe.Pointer(_ifa + 4))))
	goto _28

_31:
	if *(*uintptr)(unsafe.Pointer(_ifs + 24)) == 0 {
		goto _35
	}

	*(*Usockany)(unsafe.Pointer(_ifs + 136)) = *(*Usockany)(unsafe.Pointer(_ifs + 64))
	*(*uintptr)(unsafe.Pointer(_ifs + 40)) = _ifs + 136
	Xmemset(tls, _ifs+64, int32(0), uint64(36))
_35:
	xcopy_addr(tls, _ifs+24, int32(*(*uint8)(unsafe.Pointer(_ifa))), _ifs+64, _rta+uintptr(4), uint64(*(*uint16)(unsafe.Pointer(_rta)))-uint64(4), int32(*(*uint32)(unsafe.Pointer(_ifa + 4))))
	goto _28

_32:
	if uint64(*(*uint16)(unsafe.Pointer(_rta)))-uint64(4) >= uint64(17) {
		goto _36
	}

	Xmemcpy(tls, _ifs+176, _rta+uintptr(4), uint64(*(*uint16)(unsafe.Pointer(_rta)))-uint64(4))
	*(*uintptr)(unsafe.Pointer(_ifs + 8)) = _ifs + 176
_36:
	goto _28

_28:
	_rta = _rta + uintptr((int32(*(*uint16)(unsafe.Pointer(_rta)))+int32(3))&int32(-4))
	goto _25

_27:
	if *(*uintptr)(unsafe.Pointer(_ifs + 24)) == 0 {
		goto _37
	}

	xgen_netmask(tls, _ifs+32, int32(*(*uint8)(unsafe.Pointer(_ifa))), _ifs+100, int32(*(*uint8)(unsafe.Pointer(_ifa + 1))))
_37:
_14:
	if *(*uintptr)(unsafe.Pointer(_ifs + 8)) == 0 {
		goto _38
	}

	if *(*uintptr)(unsafe.Pointer(_ctx)) != 0 {
		goto _40
	}

	*(*uintptr)(unsafe.Pointer(_ctx)) = _ifs
_40:
	if *(*uintptr)(unsafe.Pointer(_ctx + 8)) == 0 {
		goto _41
	}

	*(*uintptr)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_ctx + 8)))) = _ifs
_41:
	*(*uintptr)(unsafe.Pointer(_ctx + 8)) = _ifs
	goto _39

_38:
	Xfree(tls, _ifs)
_39:
	return int32(0)
}

type s6sockaddr = struct {
	Fsa_family uint16
	Fsa_data   [14]int8
}

type Sifaddrs_storage = struct {
	Fifa       Sifaddrs
	Fhash_next uintptr // *Sifaddrs_storage
	Faddr      Usockany
	Fnetmask   Usockany
	Fifu       Usockany
	Findex     uint32
	Fname      [17]int8
}

type t135size_t = uint64

type Snlmsghdr = struct {
	Fnlmsg_len   uint32
	Fnlmsg_type  uint16
	Fnlmsg_flags uint16
	Fnlmsg_seq   uint32
	Fnlmsg_pid   uint32
}

type Sifinfomsg = struct {
	Fifi_family uint8
	F__ifi_pad  uint8
	Fifi_type   uint16
	Fifi_index  int32
	Fifi_flags  uint32
	Fifi_change uint32
}

type Sifaddrmsg = struct {
	Fifa_family    uint8
	Fifa_prefixlen uint8
	Fifa_flags     uint8
	Fifa_scope     uint8
	Fifa_index     uint32
}

type Srtattr = struct {
	Frta_len  uint16
	Frta_type uint16
}

type t2uint16_t = uint16

type t110uint32_t = uint32

// xcopy_lladdr is defined at getifaddrs.c:94:13
func xcopy_lladdr(tls TLS, _r uintptr /* **Ssockaddr */, _sa uintptr /* *Usockany */, _addr uintptr /* *void */, _addrlen uint64, _ifindex int32, _hatype uint16) {
	if _addrlen <= uint64(24) {
		goto _1
	}

	return

_1:
	*(*uint16)(unsafe.Pointer(_sa)) = uint16(17)
	*(*int32)(unsafe.Pointer(_sa + 4)) = _ifindex
	*(*uint16)(unsafe.Pointer(_sa + 8)) = _hatype
	*(*uint8)(unsafe.Pointer(_sa + 11)) = uint8(_addrlen)
	Xmemcpy(tls, _sa+12, _addr, _addrlen)
	*(*uintptr)(unsafe.Pointer(_r)) = _sa
}

// xcopy_addr is defined at getifaddrs.c:57:13
func xcopy_addr(tls TLS, _r uintptr /* **Ssockaddr */, _af int32, _sa uintptr /* *Usockany */, _addr uintptr /* *void */, _addrlen uint64, _ifindex int32) {
	var (
		_dst uintptr // *Tuint8_t = uint8
		_len int32
	)
	switch _af {
	case int32(2):
		goto _2
	case int32(10):
		goto _3
	default:
		goto _4
	}
_2:
	_dst = _sa + 4
	_len = int32(4)
	goto _1

_3:
	_dst = _sa + 8
	_len = int32(16)
	if (int32(*(*uint8)(unsafe.Pointer(_addr))) != int32(0xfe) || int32(*(*uint8)(unsafe.Pointer(_addr + 1)))&int32(0xc0) != int32(0x80)) && (int32(*(*uint8)(unsafe.Pointer(_addr))) != int32(0xff) || int32(*(*uint8)(unsafe.Pointer(_addr + 1)))&int32(0xf) != int32(0x2)) {
		goto _5
	}

	*(*uint32)(unsafe.Pointer(_sa + 24)) = uint32(_ifindex)
_5:
	goto _1

_4:
	return

_1:
	if _addrlen >= uint64(_len) {
		goto _6
	}

	return

_6:
	*(*uint16)(unsafe.Pointer(_sa)) = uint16(_af)
	Xmemcpy(tls, _dst, _addr, uint64(_len))
	*(*uintptr)(unsafe.Pointer(_r)) = _sa
}

type t4uint8_t = uint8

type Usockany = struct {
	Fsa [0]s6sockaddr
	Fll [0]Ssockaddr_ll_hack
	Fv4 [0]Ssockaddr_in
	Fv6 [0]Ssockaddr_in6
	F   int32
	_   [32]byte
}

func postinc665(p *int32) int32 { r := *p; *p += 1; return r }

// xgen_netmask is defined at getifaddrs.c:82:13
func xgen_netmask(tls TLS, _r uintptr /* **Ssockaddr */, _af int32, _sa uintptr /* *Usockany */, _prefixlen int32) {
	esc := MustMalloc(16)
	var (
		_addr = esc // *[16]uint8
		_i    int32
	)
	defer Free(esc)
	Copy(_addr, ts+2708 /* "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00" */, 16)
	if uint64(_prefixlen) <= uint64(128) {
		goto _1
	}

	_prefixlen = int32(128)
_1:
	_i = _prefixlen / int32(8)
	Xmemset(tls, _addr, int32(0xff), uint64(_i))
	if uint64(_i) >= uint64(16) {
		goto _2
	}

	*(*uint8)(unsafe.Pointer(_addr + uintptr(postinc665(&_i)))) = uint8(int32(0xff) << (uint(int32(8)-_prefixlen%int32(8)) % 32))
_2:
	xcopy_addr(tls, _r, _af, _sa, _addr, uint64(16), int32(0))
}

type t6sa_family_t = uint16

type Ssockaddr_ll_hack = struct {
	Fsll_family   uint16
	Fsll_protocol uint16
	Fsll_ifindex  int32
	Fsll_hatype   uint16
	Fsll_pkttype  uint8
	Fsll_halen    uint8
	Fsll_addr     [24]uint8
}

type Ssockaddr_in = struct {
	Fsin_family uint16
	Fsin_port   uint16
	Fsin_addr   Sin_addr
	Fsin_zero   [8]uint8
}

type Ssockaddr_in6 = struct {
	Fsin6_family   uint16
	Fsin6_port     uint16
	Fsin6_flowinfo uint32
	Fsin6_addr     Sin6_addr
	Fsin6_scope_id uint32
}

type Tin_port_t = uint16

type Sin_addr = struct{ Fs_addr uint32 }

type Sin6_addr = struct {
	F__in6_union struct {
		F__s6_addr   [0][16]uint8
		F__s6_addr16 [0][8]uint16
		F__s6_addr32 [0][4]uint32
		F            int32
		_            [12]byte
	}
}

type Tin_addr_t = uint32

// linking getnameinfo.o

func fp666(f func(TLS, uintptr, int32, uintptr, int32, uintptr) int32) uintptr {
	return *(*uintptr)(unsafe.Pointer(&f))
}

func preinc667(p *uintptr) uintptr { *p += 18446744073709551615; return *p }

// Xgetnameinfo is defined at getnameinfo.c:127:5
func Xgetnameinfo(tls TLS, _sa uintptr /* *Ssockaddr */, _sl uint32, _node uintptr /* *int8 */, _nodelen uint32, _serv uintptr /* *int8 */, _servlen uint32, _flags int32) (r int32) {
	esc := MustMalloc(977)
	var (
		_ptr     = esc       // *[78]int8
		_buf     = esc + 80  // *[256]int8
		_num     = esc + 336 // *[13]int8
		_af      int32
		_a       uintptr // *uint8
		_scopeid uint32
		_query   = esc + 352 // *[96]uint8
		_reply   = esc + 448 // *[512]uint8
		_qlen    int32
		_rlen    int32
		_p       uintptr     // *int8
		_tmp     = esc + 960 // *[17]int8
		_1p      uintptr     // *int8
		_port    int32
	)
	defer Free(esc)
	_af = int32(*(*uint16)(unsafe.Pointer(_sa)))
	switch _af {
	case int32(2):
		goto _2
	case int32(10):
		goto _3
	default:
		goto _4
	}
_2:
	_a = _sa + 4
	if uint64(_sl) >= uint64(16) {
		goto _5
	}

	return int32(-6)

_5:
	xmkptr4(tls, _ptr, _a)
	_scopeid = uint32(0)
	goto _1

_3:
	_a = _sa + 8
	if uint64(_sl) >= uint64(28) {
		goto _6
	}

	return int32(-6)

_6:
	if Xmemcmp(tls, _a, ts+2728 /* "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff" */, uint64(12)) == 0 {
		goto _7
	}

	xmkptr6(tls, _ptr, _a)
	goto _8

_7:
	xmkptr4(tls, _ptr, _a+uintptr(12))
_8:
	_scopeid = *(*uint32)(unsafe.Pointer(_sa + 24))
	goto _1

_4:
	return int32(-6)

_1:
	if _node == 0 || _nodelen == 0 {
		goto _9
	}

	*(*int8)(unsafe.Pointer(_buf)) = int8(0)
	if _flags&int32(0x1) != 0 {
		goto _10
	}

	xreverse_hosts(tls, _buf, _a, _scopeid, _af)
_10:
	if *(*int8)(unsafe.Pointer(_buf)) != 0 || _flags&int32(0x1) != 0 {
		goto _11
	}

	_qlen = X__res_mkquery(tls, int32(0), _ptr, int32(1), int32(12), null, int32(0), null, _query, int32(96))
	_rlen = X__res_send(tls, _query, _qlen, _reply, int32(512))
	*(*int8)(unsafe.Pointer(_buf)) = int8(0)
	if _rlen <= int32(0) {
		goto _12
	}

	X__dns_parse(tls, _reply, _rlen, fp666(xdns_parse_callback), _buf)
_12:
_11:
	if *(*int8)(unsafe.Pointer(_buf)) != 0 {
		goto _13
	}

	if (_flags & int32(0x8)) == 0 {
		goto _14
	}

	return int32(-2)

_14:
	Xinet_ntop(tls, _af, _a, _buf, uint32(256))
	if _scopeid == 0 {
		goto _15
	}

	_p = 0
	if _flags&int32(0x100) != 0 || (int32(*(*uint8)(unsafe.Pointer(_a))) != int32(0xfe) || int32(*(*uint8)(unsafe.Pointer(_a + 1)))&int32(0xc0) != int32(0x80)) && (int32(*(*uint8)(unsafe.Pointer(_a))) != int32(0xff) || int32(*(*uint8)(unsafe.Pointer(_a + 1)))&int32(0xf) != int32(0x2)) {
		goto _16
	}

	_p = Xif_indextoname(tls, _scopeid, _tmp+uintptr(1))
_16:
	if _p != 0 {
		goto _17
	}

	_p = xitoa(tls, _num, _scopeid)
_17:
	*(*int8)(unsafe.Pointer(preinc667(&_p))) = int8('%')
	Xstrcat(tls, _buf, _p)
_15:
_13:
	if Xstrlen(tls, _buf) < uint64(_nodelen) {
		goto _18
	}

	return int32(-12)

_18:
	Xstrcpy(tls, _node, _buf)
_9:
	if _serv == 0 || _servlen == 0 {
		goto _19
	}

	_1p = _buf
	_port = int32(Xntohs(tls, *(*uint16)(unsafe.Pointer(_sa + 2))))
	*(*int8)(unsafe.Pointer(_buf)) = int8(0)
	if _flags&int32(0x2) != 0 {
		goto _20
	}

	xreverse_services(tls, _buf, _port, _flags&int32(0x10))
_20:
	if *(*int8)(unsafe.Pointer(_1p)) != 0 {
		goto _21
	}

	_1p = xitoa(tls, _num, uint32(_port))
_21:
	if Xstrlen(tls, _1p) < uint64(_servlen) {
		goto _22
	}

	return int32(-12)

_22:
	Xstrcpy(tls, _serv, _1p)
_19:
	return int32(0)
}

type t615__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t615__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t7socklen_t = uint32

type s7sockaddr = struct {
	Fsa_family uint16
	Fsa_data   [14]int8
}

type t7sa_family_t = uint16

// xmkptr4 is defined at getnameinfo.c:32:13
func xmkptr4(tls TLS, _s uintptr /* *int8 */, _ip uintptr /* *uint8 */) {
	Xsprintf(tls, _s, ts+2744 /* "%d.%d.%d.%d.in-a..." */, int32(*(*uint8)(unsafe.Pointer(_ip + 3))), int32(*(*uint8)(unsafe.Pointer(_ip + 2))), int32(*(*uint8)(unsafe.Pointer(_ip + 1))), int32(*(*uint8)(unsafe.Pointer(_ip))))
}

func postinc668(p *uintptr) uintptr { r := *p; *p += 1; return r }

// xmkptr6 is defined at getnameinfo.c:38:13
func xmkptr6(tls TLS, _s uintptr /* *int8 */, _ip uintptr /* *uint8 */) {
	var _i int32

	_i = int32(15)
_1:
	if _i < int32(0) {
		goto _3
	}

	*(*int8)(unsafe.Pointer(postinc668(&_s))) = *(*int8)(unsafe.Pointer(x669xdigits + uintptr(int32(*(*uint8)(unsafe.Pointer(_ip + uintptr(_i))))&int32(15))))
	*(*int8)(unsafe.Pointer(postinc668(&_s))) = int8('.')
	*(*int8)(unsafe.Pointer(postinc668(&_s))) = *(*int8)(unsafe.Pointer(x669xdigits + uintptr(int32(*(*uint8)(unsafe.Pointer(_ip + uintptr(_i))))>>(uint(4)%32))))
	*(*int8)(unsafe.Pointer(postinc668(&_s))) = int8('.')
	_i--
	goto _1

_3:
	Xstrcpy(tls, _s, ts+2772 /* "ip6.arpa" */)
}

type t111uint32_t = uint32

func set670(p *uintptr, v uintptr) uintptr { *p = v; return v }

// xreverse_hosts is defined at getnameinfo.c:49:13
func xreverse_hosts(tls TLS, _buf uintptr /* *int8 */, _a uintptr /* *uint8 */, _scopeid uint32, _family int32) {
	esc := MustMalloc(1832)
	var (
		_line  = esc        // *[512]int8
		_p     uintptr      // *int8
		_z     uintptr      // *int8
		__buf  = esc + 512  // *[1032]uint8
		_atmp  = esc + 1552 // *[16]uint8
		_iplit = esc + 1568 // *Saddress
		__f    = esc + 1600 // *TFILE = S_IO_FILE
		_f     uintptr      // *TFILE = S_IO_FILE
	)
	defer Free(esc)
	_f = X__fopen_rb_ca(tls, ts+2784 /* "/etc/hosts" */, __f, __buf, uint64(1032))
	if _f != 0 {
		goto _1
	}

	return

_1:
	if _family != int32(2) {
		goto _2
	}

	Xmemcpy(tls, _atmp+uintptr(12), _a, uint64(4))
	Xmemcpy(tls, _atmp, ts+2728 /* "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff" */, uint64(12))
	_a = _atmp
_2:
_3:
	if Xfgets(tls, _line, int32(512), _f) == 0 {
		goto _4
	}

	if set670(&_p, Xstrchr(tls, _line, int32('#'))) == 0 {
		goto _5
	}

	*(*int8)(unsafe.Pointer(postinc668(&_p))) = int8('\n')
	*(*int8)(unsafe.Pointer(_p)) = int8(0)
_5:
	_p = _line
_6:
	if *(*int8)(unsafe.Pointer(_p)) == 0 || x3__isspace(tls, int32(*(*int8)(unsafe.Pointer(_p)))) != 0 {
		goto _8
	}

	_p++
	goto _6

_8:
	*(*int8)(unsafe.Pointer(postinc668(&_p))) = int8(0)
	X__assert_fail(tls, ts+0 /* "TODO(ccgo)" */, ts+2796 /* "src/network/getn..." */, int32(66), x671__func__)
	X__assert_fail(tls, ts+0 /* "TODO(ccgo)" */, ts+2796 /* "src/network/getn..." */, int32(68), x671__func__)
	if *(*int32)(unsafe.Pointer(_iplit)) != int32(2) {
		goto _9
	}

	Xmemcpy(tls, (_iplit+8)+uintptr(12), _iplit+8, uint64(4))
	Xmemcpy(tls, _iplit+8, ts+2728 /* "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff" */, uint64(12))
	*(*uint32)(unsafe.Pointer(_iplit + 4)) = uint32(0)
_9:
	if Xmemcmp(tls, _a, _iplit+8, uint64(16)) == 0 && *(*uint32)(unsafe.Pointer(_iplit + 4)) == _scopeid {
		goto _10
	}

	goto _3

_10:
_11:
	if *(*int8)(unsafe.Pointer(_p)) == 0 || x3__isspace(tls, int32(*(*int8)(unsafe.Pointer(_p)))) == 0 {
		goto _13
	}

	_p++
	goto _11

_13:
	_z = _p
_14:
	if *(*int8)(unsafe.Pointer(_z)) == 0 || x3__isspace(tls, int32(*(*int8)(unsafe.Pointer(_z)))) != 0 {
		goto _16
	}

	_z++
	goto _14

_16:
	*(*int8)(unsafe.Pointer(_z)) = int8(0)
	if int64(_z-_p) >= int64(256) {
		goto _17
	}

	Xmemcpy(tls, _buf, _p, uint64(int64(_z-_p)+int64(1)))
	goto _4

_17:
	goto _3

_4:
	X__fclose_ca(tls, _f)
}

// xdns_parse_callback is defined at getnameinfo.c:117:12
func xdns_parse_callback(tls TLS, _c uintptr /* *void */, _rr int32, _data uintptr /* *void */, _len int32, _packet uintptr /* *void */) (r int32) {
	if _rr == int32(12) {
		goto _1
	}

	return int32(0)

_1:
	if X__dn_expand(tls, _packet, _packet+uintptr(512), _data, _c, int32(256)) > int32(0) {
		goto _2
	}

	*(*int8)(unsafe.Pointer(_c)) = int8(0)
_2:
	return int32(0)
}

// xitoa is defined at getnameinfo.c:22:13
func xitoa(tls TLS, _p uintptr /* *int8 */, _x uint32) (r uintptr /* *int8 */) {
	_p += uintptr(12)
	*(*int8)(unsafe.Pointer(preinc667(&_p))) = int8(0)
_1:
	*(*int8)(unsafe.Pointer(preinc667(&_p))) = int8(uint32('0') + _x%uint32(10))
	_x = _x / uint32(10)
	if _x != 0 {
		goto _1
	}

	return _p
}

type t136size_t = uint64

type t1in_port_t = uint16

type t3uint16_t = uint16

// xreverse_services is defined at getnameinfo.c:91:13
func xreverse_services(tls TLS, _buf uintptr /* *int8 */, _port int32, _dgram int32) {
	esc := MustMalloc(1416)
	var (
		_svport uint64
		_line   = esc        // *[128]int8
		_p      uintptr      // *int8
		_z      = esc + 128  // **int8
		__buf   = esc + 144  // *[1032]uint8
		__f     = esc + 1184 // *TFILE = S_IO_FILE
		_f      uintptr      // *TFILE = S_IO_FILE
	)
	defer Free(esc)
	_f = X__fopen_rb_ca(tls, ts+2824 /* "/etc/services" */, __f, __buf, uint64(1032))
	if _f != 0 {
		goto _1
	}

	return

_1:
_2:
	if Xfgets(tls, _line, int32(128), _f) == 0 {
		goto _3
	}

	if set670(&_p, Xstrchr(tls, _line, int32('#'))) == 0 {
		goto _4
	}

	*(*int8)(unsafe.Pointer(postinc668(&_p))) = int8('\n')
	*(*int8)(unsafe.Pointer(_p)) = int8(0)
_4:
	_p = _line
_5:
	if *(*int8)(unsafe.Pointer(_p)) == 0 || x3__isspace(tls, int32(*(*int8)(unsafe.Pointer(_p)))) != 0 {
		goto _7
	}

	_p++
	goto _5

_7:
	if *(*int8)(unsafe.Pointer(_p)) != 0 {
		goto _8
	}

	goto _2

_8:
	*(*int8)(unsafe.Pointer(postinc668(&_p))) = int8(0)
	_svport = Xstrtoul(tls, _p, _z, int32(10))
	if _svport == uint64(_port) && *(*uintptr)(unsafe.Pointer(_z)) != _p {
		goto _9
	}

	goto _2

_9:
	if _dgram == 0 || Xstrncmp(tls, *(*uintptr)(unsafe.Pointer(_z)), ts+2840 /* "/udp" */, uint64(4)) == 0 {
		goto _10
	}

	goto _2

_10:
	if _dgram != 0 || Xstrncmp(tls, *(*uintptr)(unsafe.Pointer(_z)), ts+2848 /* "/tcp" */, uint64(4)) == 0 {
		goto _11
	}

	goto _2

_11:
	if int64(_p-_line) <= int64(32) {
		goto _12
	}

	goto _2

_12:
	Xmemcpy(tls, _buf, _line, uint64(int64(_p-_line)))
	goto _3

	goto _2

_3:
	X__fclose_ca(tls, _f)
}

// x7xdigits [17]int8, escapes: true, getnameinfo.c:40:20
var x669xdigits = ds + 43560

// x8__func__ [14]int8, escapes: true, getnameinfo.c:50:1
var x671__func__ = ds + 43584

type Saddress = struct {
	Ffamily  int32
	Fscopeid uint32
	Faddr    [16]uint8
	Fsortkey int32
}

type s7_IO_FILE = struct {
	Fflags        uint32
	Frpos         uintptr // *uint8
	Frend         uintptr // *uint8
	Fclose        uintptr // *func(TLS, uintptr) int32
	Fwend         uintptr // *uint8
	Fwpos         uintptr // *uint8
	Fmustbezero_1 uintptr // *uint8
	Fwbase        uintptr // *uint8
	Fread         uintptr // *func(TLS, uintptr, uintptr, uint64) uint64
	Fwrite        uintptr // *func(TLS, uintptr, uintptr, uint64) uint64
	Fseek         uintptr // *func(TLS, uintptr, int64, int32) int64
	Fbuf          uintptr // *uint8
	Fbuf_size     uint64
	Fprev         uintptr // *TFILE = S_IO_FILE
	Fnext         uintptr // *TFILE = S_IO_FILE
	Ffd           int32
	Fpipe_pid     int32
	Flockcount    int64
	Fdummy3       int16
	Fmode         int8
	Flbf          int8
	Flock         int32
	Fwaiters      int32
	Fcookie       uintptr // *void
	Foff          int64
	Fgetln_buf    uintptr // *int8
	Fmustbezero_2 uintptr // *void
	Fshend        uintptr // *uint8
	Fshlim        int64
	Fshcnt        int64
	Fprev_locked  uintptr // *TFILE = S_IO_FILE
	Fnext_locked  uintptr // *TFILE = S_IO_FILE
	Flocale       uintptr // *S__locale_struct
}

// x__isspace is defined at ctype.h:26:21
func x3__isspace(tls TLS, __c int32) (r int32) {
	return bool2int((__c == int32(' ')) || (uint32(__c)-uint32('\t') < uint32(5)))
}

type t5uint8_t = uint8

type t31off_t = int64

type s62__locale_struct = struct{ Fcat [6]uintptr }

// linking getpeername.o

// Xgetpeername is defined at getpeername.c:4:5
func Xgetpeername(tls TLS, _fd int32, _addr uintptr /* *Ssockaddr */, _len uintptr /* *Tsocklen_t = uint32 */) (r int32) {
	return int32(X__syscall_ret(tls, uint64(x8__syscall6(tls, int64(52), int64(_fd), int64(_addr), int64(_len), int64(0), int64(0), int64(0)))))
}

type t616__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t616__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type s8sockaddr = struct {
	Fsa_family uint16
	Fsa_data   [14]int8
}

// x__syscall6 is defined at syscall_arch.h:63:22
func x8__syscall6(tls TLS, _n int64, _a1 int64, _a2 int64, _a3 int64, _a4 int64, _a5 int64, _a6 int64) (r int64) {
	return X__syscall(tls, _n, _a1, _a2, _a3, _a4, _a5, _a6)
}

type t8sa_family_t = uint16

// linking getservbyname.o

// Xgetservbyname is defined at getservbyname.c:4:16
func Xgetservbyname(tls TLS, _name uintptr /* *int8 */, _prots uintptr /* *int8 */) (r uintptr /* *Sservent */) {
	esc := MustMalloc(8)
	var _res = esc // **Sservent
	defer Free(esc)
	if Xgetservbyname_r(tls, _name, _prots, x672se, x673buf, uint64(16), _res) == 0 {
		goto _1
	}

	return null

_1:
	return x672se
}

type t617__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t617__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type Sservent = struct {
	Fs_name    uintptr // *int8
	Fs_aliases uintptr // **int8
	Fs_port    int32
	Fs_proto   uintptr // *int8
}

// x1se Sservent, escapes: true, getservbyname.c:6:24
var x672se = bss + 2568

// x2buf [2]*int8, escapes: true, getservbyname.c:7:14
var x673buf = bss + 2600

type t137size_t = uint64

// linking getservbyname_r.o

// Xgetservbyname_r is defined at getservbyname_r.c:14:5
func Xgetservbyname_r(tls TLS, _name uintptr /* *int8 */, _prots uintptr /* *int8 */, _se uintptr /* *Sservent */, _buf uintptr /* *int8 */, _buflen uint64, _res uintptr /* **Sservent */) (r int32) {
	esc := MustMalloc(8)
	var (
		_proto int32
		_      = _proto
		_align int32
		_end   = esc // **int8
	)
	defer Free(esc)
	*(*uintptr)(unsafe.Pointer(_res)) = null
	*(*uintptr)(unsafe.Pointer(_end)) = ts + 112 /* "" */
	Xstrtoul(tls, _name, _end, int32(10))
	if *(*int8)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_end)))) != 0 {
		goto _1
	}

	return int32(2)

_1:
	_align = int32(-uint64(_buf) & uint64(7))
	if _buflen >= uint64(16)+uint64(_align) {
		goto _2
	}

	return int32(34)

_2:
	_buf += uintptr(_align)
	if _prots != 0 {
		goto _3
	}

	_proto = int32(0)
	goto _4

_3:
	if Xstrcmp(tls, _prots, ts+2856 /* "tcp" */) != 0 {
		goto _5
	}

	_proto = int32(6)
	goto _6

_5:
	if Xstrcmp(tls, _prots, ts+2860 /* "udp" */) != 0 {
		goto _7
	}

	_proto = int32(17)
	goto _8

_7:
	return int32(22)

_8:
_6:
_4:
	X__assert_fail(tls, ts+0 /* "TODO(ccgo)" */, ts+2864 /* "src/network/gets..." */, int32(38), x674__func__)
	return r
}

type t618__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t618__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t138size_t = uint64

type s1servent = struct {
	Fs_name    uintptr // *int8
	Fs_aliases uintptr // **int8
	Fs_port    int32
	Fs_proto   uintptr // *int8
}

// x1__func__ [16]int8, escapes: true, getservbyname_r.c:16:1
var x674__func__ = ds + 43600

type t29uintptr_t = uint64

// linking getservbyport.o

// Xgetservbyport is defined at getservbyport.c:4:16
func Xgetservbyport(tls TLS, _port int32, _prots uintptr /* *int8 */) (r uintptr /* *Sservent */) {
	esc := MustMalloc(8)
	var _res = esc // **Sservent
	defer Free(esc)
	if Xgetservbyport_r(tls, _port, _prots, x675se, x676buf, uint64(32), _res) == 0 {
		goto _1
	}

	return null

_1:
	return x675se
}

type t619__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t619__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type s2servent = struct {
	Fs_name    uintptr // *int8
	Fs_aliases uintptr // **int8
	Fs_port    int32
	Fs_proto   uintptr // *int8
}

// x1se Sservent, escapes: true, getservbyport.c:6:24
var x675se = bss + 2616

// x2buf [4]int64, escapes: true, getservbyport.c:7:14
var x676buf = bss + 2648

type t139size_t = uint64

// linking getservbyport_r.o

func set677(p *uintptr, v uintptr) uintptr { *p = v; return v }

// Xgetservbyport_r is defined at getservbyport_r.c:10:5
func Xgetservbyport_r(tls TLS, _port int32, _prots uintptr /* *int8 */, _se uintptr /* *Sservent */, _buf uintptr /* *int8 */, _buflen uint64, _res uintptr /* **Sservent */) (r int32) {
	esc := MustMalloc(16)
	var (
		_i   int32
		_sin = esc // *Ssockaddr_in
		_r   int32
	)
	defer Free(esc)
	*(*s1sockaddr_in)(unsafe.Pointer(_sin)) = s1sockaddr_in{
		Fsin_family: uint16(2),
		Fsin_port:   uint16(_port),
	}
	if _prots != 0 {
		goto _1
	}

	_r = Xgetservbyport_r(tls, _port, ts+2856 /* "tcp" */, _se, _buf, _buflen, _res)
	if _r == 0 {
		goto _2
	}

	_r = Xgetservbyport_r(tls, _port, ts+2860 /* "udp" */, _se, _buf, _buflen, _res)
_2:
	return _r

_1:
	*(*uintptr)(unsafe.Pointer(_res)) = null
	_i = int32(uint64(_buf) & uint64(7))
	if _i != 0 {
		goto _3
	}

	_i = int32(8)
_3:
	if _buflen >= uint64(24)-uint64(_i) {
		goto _4
	}

	return int32(34)

_4:
	_buf += uintptr(uint64(8) - uint64(_i))
	_buflen = _buflen - (uint64(8) - uint64(_i))
	if Xstrcmp(tls, _prots, ts+2856 /* "tcp" */) == 0 || Xstrcmp(tls, _prots, ts+2860 /* "udp" */) == 0 {
		goto _5
	}

	return int32(22)

_5:
	*(*int32)(unsafe.Pointer(_se + 16)) = _port
	*(*uintptr)(unsafe.Pointer(_se + 24)) = _prots
	*(*uintptr)(unsafe.Pointer(_se + 8)) = _buf
	_buf += uintptr(16)
	_buflen = _buflen - uint64(16)
	*(*uintptr)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_se + 8)) + 8)) = null
	*(*uintptr)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_se + 8)))) = set677((*uintptr)(unsafe.Pointer(_se)), _buf)
	switch Xgetnameinfo(tls, _sin, uint32(16), null, uint32(0), _buf, uint32(_buflen), func() int32 {
		if Xstrcmp(tls, _prots, ts+2860 /* "udp" */) != 0 {
			return int32(0)
		}
		return int32(0x10)
	}()) {
	case int32(-10):
		goto _7
	case int32(-11):
		goto _8
	default:
		goto _9

	case int32(0):
		goto _10
	}
_7:
_8:
	return int32(12)

_9:
	return int32(2)

_10:
	goto _6

_6:
	if Xstrtol(tls, _buf, null, int32(10)) != int64(Xntohs(tls, uint16(_port))) {
		goto _11
	}

	return int32(2)

_11:
	*(*uintptr)(unsafe.Pointer(_res)) = _se
	return int32(0)
}

type t620__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t620__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t140size_t = uint64

type s3servent = struct {
	Fs_name    uintptr // *int8
	Fs_aliases uintptr // **int8
	Fs_port    int32
	Fs_proto   uintptr // *int8
}

type s1sockaddr_in = struct {
	Fsin_family uint16
	Fsin_port   uint16
	Fsin_addr   s1in_addr
	Fsin_zero   [8]uint8
}

type t9sa_family_t = uint16

type t2in_port_t = uint16

type t4uint16_t = uint16

type t30uintptr_t = uint64

type s1in_addr = struct{ Fs_addr uint32 }

type t6uint8_t = uint8

type t8socklen_t = uint32

type t1in_addr_t = uint32

type t112uint32_t = uint32

// linking getsockname.o

// Xgetsockname is defined at getsockname.c:4:5
func Xgetsockname(tls TLS, _fd int32, _addr uintptr /* *Ssockaddr */, _len uintptr /* *Tsocklen_t = uint32 */) (r int32) {
	return int32(X__syscall_ret(tls, uint64(x9__syscall6(tls, int64(51), int64(_fd), int64(_addr), int64(_len), int64(0), int64(0), int64(0)))))
}

type t621__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t621__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type s9sockaddr = struct {
	Fsa_family uint16
	Fsa_data   [14]int8
}

// x__syscall6 is defined at syscall_arch.h:63:22
func x9__syscall6(tls TLS, _n int64, _a1 int64, _a2 int64, _a3 int64, _a4 int64, _a5 int64, _a6 int64) (r int64) {
	return X__syscall(tls, _n, _a1, _a2, _a3, _a4, _a5, _a6)
}

type t10sa_family_t = uint16

// linking getsockopt.o

// Xgetsockopt is defined at getsockopt.c:4:5
func Xgetsockopt(tls TLS, _fd int32, _level int32, _optname int32, _optval uintptr /* *void */, _optlen uintptr /* *Tsocklen_t = uint32 */) (r int32) {
	return int32(X__syscall_ret(tls, uint64(x10__syscall6(tls, int64(55), int64(_fd), int64(_level), int64(_optname), int64(_optval), int64(_optlen), int64(0)))))
}

type t622__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t622__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// x__syscall6 is defined at syscall_arch.h:63:22
func x10__syscall6(tls TLS, _n int64, _a1 int64, _a2 int64, _a3 int64, _a4 int64, _a5 int64, _a6 int64) (r int64) {
	return X__syscall(tls, _n, _a1, _a2, _a3, _a4, _a5, _a6)
}

// linking h_errno.o

// Xh_errno int32, escapes: true, h_errno.c:4:5
var Xh_errno = bss + 2680

// X__h_errno_location is defined at h_errno.c:6:5
func X__h_errno_location(tls TLS) (r uintptr /* *int32 */) {
	return Xh_errno
}

type t623__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t623__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// linking herror.o

// Xherror is defined at herror.c:5:6
func Xherror(tls TLS, _msg uintptr /* *int8 */) {
	Xfprintf(tls, *(*uintptr)(unsafe.Pointer(Xstderr)), ts+2896 /* "%s%s%s" */, func() uintptr {
		if _msg != 0 {
			return _msg
		}
		return ts + 112 /* "" */
	}(), func() uintptr {
		if _msg != 0 {
			return ts + 1404 /* ": " */
		}
		return ts + 112 /* "" */
	}(), Xhstrerror(tls, *(*int32)(unsafe.Pointer(X__h_errno_location(tls)))))
}

type t624__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t624__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// linking hstrerror.o

// Xhstrerror is defined at hstrerror.c:12:12
func Xhstrerror(tls TLS, _ecode int32) (r uintptr /* *int8 */) {
	var _s uintptr // *int8

	_s = x1msgs
	_ecode--
_1:
	if _ecode == 0 || *(*int8)(unsafe.Pointer(_s)) == 0 {
		goto _3
	}

_4:
	if *(*int8)(unsafe.Pointer(_s)) == 0 {
		goto _6
	}

	_s++
	goto _4

_6:
	_ecode--
	_s++
	goto _1

_3:
	if *(*int8)(unsafe.Pointer(_s)) != 0 {
		goto _7
	}

	_s++
_7:
	return X__lctrans_cur(tls, _s)
}

type t625__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t625__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// xmsgs [84]int8, escapes: true, hstrerror.c:5:19
var x1msgs = ds + 43616

// linking htonl.o

// Xhtonl is defined at htonl.c:4:10
func Xhtonl(tls TLS, _n uint32) (r uint32) {
	esc := MustMalloc(4)
	var _u = esc // *struct{Fi [0]int32;Fc [0]int8;F int32}
	defer Free(esc)
	Copy(_u, ts+2904 /* "\x01\x00\x00\x00" */, 4)
	if *(*int8)(unsafe.Pointer(_u)) != 0 {
		return x1__bswap_32(tls, _n)
	}

	return _n
}

type t626__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t626__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t113uint32_t = uint32

// x__bswap_32 is defined at byteswap.h:12:26
func x1__bswap_32(tls TLS, ___x uint32) (r uint32) {
	return ___x>>(uint(24)%32) | ___x>>(uint(8)%32)&uint32(0xff00) | ___x<<(uint(8)%32)&uint32(0xff0000) | ___x<<(uint(24)%32)
}

// linking htons.o

// Xhtons is defined at htons.c:4:10
func Xhtons(tls TLS, _n uint16) (r uint16) {
	esc := MustMalloc(4)
	var _u = esc // *struct{Fi [0]int32;Fc [0]int8;F int32}
	defer Free(esc)
	Copy(_u, ts+2904 /* "\x01\x00\x00\x00" */, 4)
	if *(*int8)(unsafe.Pointer(_u)) != 0 {
		return x__bswap_16(tls, _n)
	}

	return _n
}

type t627__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t627__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t5uint16_t = uint16

// x__bswap_16 is defined at byteswap.h:7:26
func x__bswap_16(tls TLS, ___x uint16) (r uint16) {
	return uint16(int32(___x)<<(uint(8)%32) | int32(___x)>>(uint(8)%32))
}

// linking if_freenameindex.o

// Xif_freenameindex is defined at if_freenameindex.c:4:6
func Xif_freenameindex(tls TLS, _idx uintptr /* *Sif_nameindex */) {
	Xfree(tls, _idx)
}

type t628__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t628__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type Sif_nameindex = struct {
	Fif_index uint32
	Fif_name  uintptr // *int8
}

// linking if_indextoname.o

func set678(p *int32, v int32) int32 { *p = v; return v }

// Xif_indextoname is defined at if_indextoname.c:9:6
func Xif_indextoname(tls TLS, _index uint32, _name uintptr /* *int8 */) (r uintptr /* *int8 */) {
	esc := MustMalloc(40)
	var (
		_ifr = esc // *Sifreq
		_fd  int32
		_r   int32
	)
	defer Free(esc)
	if set678(&_fd, Xsocket(tls, int32(1), int32(524290), int32(0))) >= int32(0) {
		goto _1
	}

	return null

_1:
	*(*int32)(unsafe.Pointer(_ifr + 16)) = int32(_index)
	_r = Xioctl(tls, _fd, int32(0x8910), _ifr)
	x25__syscall1(tls, int64(3), int64(_fd))
	if _r >= int32(0) {
		goto _2
	}

	if *(*int32)(unsafe.Pointer(X__errno_location(tls))) != int32(19) {
		goto _3
	}

	*(*int32)(unsafe.Pointer(X__errno_location(tls))) = int32(6)
_3:
	return null

_2:
	return Xstrncpy(tls, _name, _ifr, uint64(16))
}

type t629__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t629__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type Sifreq = struct {
	Fifr_ifrn struct {
		Fifrn_name [0][16]int8
		F          int8
		_          [15]byte
	}
	Fifr_ifru struct {
		Fifru_addr      [0]s10sockaddr
		Fifru_dstaddr   [0]s10sockaddr
		Fifru_broadaddr [0]s10sockaddr
		Fifru_netmask   [0]s10sockaddr
		Fifru_hwaddr    [0]s10sockaddr
		Fifru_flags     [0]int16
		Fifru_ivalue    [0]int32
		Fifru_mtu       [0]int32
		Fifru_map       [0]Sifmap
		Fifru_slave     [0][16]int8
		Fifru_newname   [0][16]int8
		Fifru_data      [0]uintptr
		F               int64
		_               [16]byte
	}
}

// x__syscall1 is defined at syscall_arch.h:16:22
func x25__syscall1(tls TLS, _n int64, _a1 int64) (r int64) {
	return X__syscall(tls, _n, _a1, int64(0), int64(0), int64(0), int64(0), int64(0))
}

type s10sockaddr = struct {
	Fsa_family uint16
	Fsa_data   [14]int8
}

type Sifmap = struct {
	Fmem_start uint64
	Fmem_end   uint64
	Fbase_addr uint16
	Firq       uint8
	Fdma       uint8
	Fport      uint8
}

type t141size_t = uint64

type t11sa_family_t = uint16

// linking if_nameindex.o

// Xif_nameindex is defined at if_nameindex.c:84:21
func Xif_nameindex(tls TLS) (r uintptr /* *Sif_nameindex */) {
	X__assert_fail(tls, ts+0 /* "TODO(ccgo)" */, ts+2912 /* "src/network/if_n..." */, int32(86), x679__func__)
	return r
}

type t630__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t630__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type s1if_nameindex = struct {
	Fif_index uint32
	Fif_name  uintptr // *int8
}

// x1__func__ [13]int8, escapes: true, if_nameindex.c:85:1
var x679__func__ = ds + 43704

// linking if_nametoindex.o

func set680(p *int32, v int32) int32 { *p = v; return v }

// Xif_nametoindex is defined at if_nametoindex.c:8:10
func Xif_nametoindex(tls TLS, _name uintptr /* *int8 */) (r uint32) {
	esc := MustMalloc(40)
	var (
		_ifr = esc // *Sifreq
		_fd  int32
		_r   int32
	)
	defer Free(esc)
	if set680(&_fd, Xsocket(tls, int32(1), int32(524290), int32(0))) >= int32(0) {
		goto _1
	}

	return uint32(0)

_1:
	Xstrncpy(tls, _ifr, _name, uint64(16))
	_r = Xioctl(tls, _fd, int32(0x8933), _ifr)
	x26__syscall1(tls, int64(3), int64(_fd))
	if _r < int32(0) {
		return uint32(0)
	}

	return uint32(*(*int32)(unsafe.Pointer(_ifr + 16)))
}

type t631__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t631__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type s1ifreq = struct {
	Fifr_ifrn struct {
		Fifrn_name [0][16]int8
		F          int8
		_          [15]byte
	}
	Fifr_ifru struct {
		Fifru_addr      [0]s11sockaddr
		Fifru_dstaddr   [0]s11sockaddr
		Fifru_broadaddr [0]s11sockaddr
		Fifru_netmask   [0]s11sockaddr
		Fifru_hwaddr    [0]s11sockaddr
		Fifru_flags     [0]int16
		Fifru_ivalue    [0]int32
		Fifru_mtu       [0]int32
		Fifru_map       [0]s1ifmap
		Fifru_slave     [0][16]int8
		Fifru_newname   [0][16]int8
		Fifru_data      [0]uintptr
		F               int64
		_               [16]byte
	}
}

// x__syscall1 is defined at syscall_arch.h:16:22
func x26__syscall1(tls TLS, _n int64, _a1 int64) (r int64) {
	return X__syscall(tls, _n, _a1, int64(0), int64(0), int64(0), int64(0), int64(0))
}

type s11sockaddr = struct {
	Fsa_family uint16
	Fsa_data   [14]int8
}

type s1ifmap = struct {
	Fmem_start uint64
	Fmem_end   uint64
	Fbase_addr uint16
	Firq       uint8
	Fdma       uint8
	Fport      uint8
}

type t142size_t = uint64

type t12sa_family_t = uint16

// linking in6addr_any.o

// Xin6addr_any Sin6_addr, escapes: true, in6addr_any.c:3:23
var Xin6addr_any = bss + 2688

type t632__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t632__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type s1in6_addr = struct {
	F__in6_union struct {
		F__s6_addr   [0][16]uint8
		F__s6_addr16 [0][8]uint16
		F__s6_addr32 [0][4]uint32
		F            int32
		_            [12]byte
	}
}

type t7uint8_t = uint8

type t6uint16_t = uint16

type t114uint32_t = uint32

// linking in6addr_loopback.o

// Xin6addr_loopback Sin6_addr, escapes: true, in6addr_loopback.c:3:23
var Xin6addr_loopback = ds + 43720

type t633__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t633__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type s2in6_addr = struct {
	F__in6_union struct {
		F__s6_addr   [0][16]uint8
		F__s6_addr16 [0][8]uint16
		F__s6_addr32 [0][4]uint32
		F            int32
		_            [12]byte
	}
}

type t8uint8_t = uint8

type t7uint16_t = uint16

type t115uint32_t = uint32

// linking inet_addr.o

// Xinet_addr is defined at inet_addr.c:7:11
func Xinet_addr(tls TLS, _p uintptr /* *int8 */) (r uint32) {
	esc := MustMalloc(4)
	var _a = esc // *Sin_addr
	defer Free(esc)
	if X__inet_aton(tls, _p, _a) != 0 {
		goto _1
	}

	return uint32(4294967295)

_1:
	return *(*uint32)(unsafe.Pointer(_a))
}

type t634__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t634__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t2in_addr_t = uint32

type t116uint32_t = uint32

type s2in_addr = struct{ Fs_addr uint32 }

// linking inet_aton.o

// X__inet_aton is defined at inet_aton.c:7:5
func X__inet_aton(tls TLS, _s0 uintptr /* *int8 */, _dest uintptr /* *Sin_addr */) (r int32) {
	esc := MustMalloc(40)
	var (
		_s uintptr    // *int8
		_d uintptr    // *uint8
		_a = esc      // *[4]uint64
		_z = esc + 32 // **int8
		_i int32
	)
	defer Free(esc)
	_s = _s0
	_d = _dest
	Copy(_a, ts+2940 /* "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00..." */, 32)
	_i = int32(0)
_1:
	if _i >= int32(4) {
		goto _3
	}

	*(*uint64)(unsafe.Pointer(_a + 8*uintptr(_i))) = Xstrtoul(tls, _s, _z, int32(0))
	if *(*uintptr)(unsafe.Pointer(_z)) != _s && (*(*int8)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_z)))) == 0 || int32(*(*int8)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_z))))) == int32('.')) && uint32(*(*int8)(unsafe.Pointer(_s)))-uint32('0') < uint32(10) {
		goto _4
	}

	return int32(0)

_4:
	if *(*int8)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_z)))) != 0 {
		goto _5
	}

	goto _3

_5:
	_s = *(*uintptr)(unsafe.Pointer(_z)) + uintptr(1)
	_i++
	goto _1

_3:
	if _i != int32(4) {
		goto _6
	}

	return int32(0)

_6:
	switch _i {
	case int32(0):
		goto _8
	case int32(1):
		goto _9
	case int32(2):
		goto _10
	}
	goto _7

_8:
	*(*uint64)(unsafe.Pointer(_a + 8)) = *(*uint64)(unsafe.Pointer(_a)) & uint64(0xffffff)
	{
		p := (*uint64)(unsafe.Pointer(_a))
		*p = *p >> uint32(24)
	}
_9:
	*(*uint64)(unsafe.Pointer(_a + 16)) = *(*uint64)(unsafe.Pointer(_a + 8)) & uint64(0xffff)
	{
		p := (*uint64)(unsafe.Pointer(_a + 8))
		*p = *p >> uint32(16)
	}
_10:
	*(*uint64)(unsafe.Pointer(_a + 24)) = *(*uint64)(unsafe.Pointer(_a + 16)) & uint64(0xff)
	{
		p := (*uint64)(unsafe.Pointer(_a + 16))
		*p = *p >> uint32(8)
	}
_7:
	_i = int32(0)
_11:
	if _i >= int32(4) {
		goto _13
	}

	if *(*uint64)(unsafe.Pointer(_a + 8*uintptr(_i))) <= uint64(255) {
		goto _14
	}

	return int32(0)

_14:
	*(*uint8)(unsafe.Pointer(_d + uintptr(_i))) = uint8(*(*uint64)(unsafe.Pointer(_a + 8*uintptr(_i))))
	_i++
	goto _11

_13:
	return int32(1)
}

type t635__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t635__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type s3in_addr = struct{ Fs_addr uint32 }

type t3in_addr_t = uint32

type t117uint32_t = uint32

// linking inet_legacy.o

// Xinet_network is defined at inet_legacy.c:5:11
func Xinet_network(tls TLS, _p uintptr /* *int8 */) (r uint32) {
	return Xntohl(tls, Xinet_addr(tls, _p))
}

// Xinet_makeaddr is defined at inet_legacy.c:10:16
func Xinet_makeaddr(tls TLS, _n uint32, _h uint32) (r struct{ Fs_addr uint32 }) {
	var _unnamed1 s4in_addr
	_ = _unnamed1
	if _n >= uint32(256) {
		goto _1
	}

	_h = _h | _n<<(uint(24)%32)
	goto _2

_1:
	if _n >= uint32(65536) {
		goto _3
	}

	_h = _h | _n<<(uint(16)%32)
	goto _4

_3:
	_h = _h | _n<<(uint(8)%32)
_4:
_2:
	return s4in_addr{Fs_addr: _h}
}

// Xinet_lnaof is defined at inet_legacy.c:18:11
func Xinet_lnaof(tls TLS, ain struct{ Fs_addr uint32 }) (r uint32) {
	esc := MustMalloc(4)
	var (
		_in = esc // *Sin_addr
		_h  uint32
	)
	defer Free(esc)
	*(*s4in_addr)(unsafe.Pointer(_in)) = ain
	_h = *(*uint32)(unsafe.Pointer(_in))
	if _h>>(uint(24)%32) >= uint32(128) {
		goto _1
	}

	return _h & uint32(0xffffff)

_1:
	if _h>>(uint(24)%32) >= uint32(192) {
		goto _2
	}

	return _h & uint32(0xffff)

_2:
	return _h & uint32(0xff)
}

// Xinet_netof is defined at inet_legacy.c:26:11
func Xinet_netof(tls TLS, ain struct{ Fs_addr uint32 }) (r uint32) {
	esc := MustMalloc(4)
	var (
		_in = esc // *Sin_addr
		_h  uint32
	)
	defer Free(esc)
	*(*s4in_addr)(unsafe.Pointer(_in)) = ain
	_h = *(*uint32)(unsafe.Pointer(_in))
	if _h>>(uint(24)%32) >= uint32(128) {
		goto _1
	}

	return _h >> (uint(24) % 32)

_1:
	if _h>>(uint(24)%32) >= uint32(192) {
		goto _2
	}

	return _h >> (uint(16) % 32)

_2:
	return _h >> (uint(8) % 32)
}

type t636__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t636__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t4in_addr_t = uint32

type t118uint32_t = uint32

type s4in_addr = struct{ Fs_addr uint32 }

// linking inet_ntoa.o

// Xinet_ntoa is defined at inet_ntoa.c:4:6
func Xinet_ntoa(tls TLS, ain struct{ Fs_addr uint32 }) (r uintptr /* *int8 */) {
	esc := MustMalloc(4)
	var (
		_in = esc   // *Sin_addr
		_a  uintptr // *uint8
	)
	defer Free(esc)
	*(*s5in_addr)(unsafe.Pointer(_in)) = ain
	_a = _in
	Xsnprintf(tls, x681buf, uint64(16), ts+2976 /* "%d.%d.%d.%d" */, int32(*(*uint8)(unsafe.Pointer(_a))), int32(*(*uint8)(unsafe.Pointer(_a + 1))), int32(*(*uint8)(unsafe.Pointer(_a + 2))), int32(*(*uint8)(unsafe.Pointer(_a + 3))))
	return x681buf
}

type t637__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t637__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type s5in_addr = struct{ Fs_addr uint32 }

type t5in_addr_t = uint32

type t119uint32_t = uint32

// x1buf [16]int8, escapes: true, inet_ntoa.c:6:14
var x681buf = bss + 2704

type t143size_t = uint64

// linking inet_ntop.o

func set682(p *int32, v int32) int32 { *p = v; return v }

func set683(p *int8, v int8) int8 { *p = v; return v }

// Xinet_ntop is defined at inet_ntop.c:7:12
func Xinet_ntop(tls TLS, _af int32, _a0 uintptr /* *void */, _s uintptr /* *int8 */, _l uint32) (r uintptr /* *int8 */) {
	esc := MustMalloc(100)
	var (
		_a    uintptr // *uint8
		_i    int32
		_j    int32
		_max  int32
		_best int32
		_buf  = esc // *[100]int8
	)
	defer Free(esc)
	_a = _a0
	switch _af {
	case int32(2):
		goto _2
	case int32(10):
		goto _3
	default:
		goto _4
	}
_2:
	if uint32(Xsnprintf(tls, _s, uint64(_l), ts+2976 /* "%d.%d.%d.%d" */, int32(*(*uint8)(unsafe.Pointer(_a))), int32(*(*uint8)(unsafe.Pointer(_a + 1))), int32(*(*uint8)(unsafe.Pointer(_a + 2))), int32(*(*uint8)(unsafe.Pointer(_a + 3))))) >= _l {
		goto _5
	}

	return _s

_5:
	goto _1

_3:
	if Xmemcmp(tls, _a, ts+2728 /* "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff" */, uint64(12)) == 0 {
		goto _6
	}

	Xsnprintf(tls, _buf, uint64(100), ts+2988 /* "%x:%x:%x:%x:%x:%..." */, int32(256)*int32(*(*uint8)(unsafe.Pointer(_a)))+int32(*(*uint8)(unsafe.Pointer(_a + 1))), int32(256)*int32(*(*uint8)(unsafe.Pointer(_a + 2)))+int32(*(*uint8)(unsafe.Pointer(_a + 3))), int32(256)*int32(*(*uint8)(unsafe.Pointer(_a + 4)))+int32(*(*uint8)(unsafe.Pointer(_a + 5))), int32(256)*int32(*(*uint8)(unsafe.Pointer(_a + 6)))+int32(*(*uint8)(unsafe.Pointer(_a + 7))), int32(256)*int32(*(*uint8)(unsafe.Pointer(_a + 8)))+int32(*(*uint8)(unsafe.Pointer(_a + 9))), int32(256)*int32(*(*uint8)(unsafe.Pointer(_a + 10)))+int32(*(*uint8)(unsafe.Pointer(_a + 11))), int32(256)*int32(*(*uint8)(unsafe.Pointer(_a + 12)))+int32(*(*uint8)(unsafe.Pointer(_a + 13))), int32(256)*int32(*(*uint8)(unsafe.Pointer(_a + 14)))+int32(*(*uint8)(unsafe.Pointer(_a + 15))))
	goto _7

_6:
	Xsnprintf(tls, _buf, uint64(100), ts+3012 /* "%x:%x:%x:%x:%x:%..." */, int32(256)*int32(*(*uint8)(unsafe.Pointer(_a)))+int32(*(*uint8)(unsafe.Pointer(_a + 1))), int32(256)*int32(*(*uint8)(unsafe.Pointer(_a + 2)))+int32(*(*uint8)(unsafe.Pointer(_a + 3))), int32(256)*int32(*(*uint8)(unsafe.Pointer(_a + 4)))+int32(*(*uint8)(unsafe.Pointer(_a + 5))), int32(256)*int32(*(*uint8)(unsafe.Pointer(_a + 6)))+int32(*(*uint8)(unsafe.Pointer(_a + 7))), int32(256)*int32(*(*uint8)(unsafe.Pointer(_a + 8)))+int32(*(*uint8)(unsafe.Pointer(_a + 9))), int32(256)*int32(*(*uint8)(unsafe.Pointer(_a + 10)))+int32(*(*uint8)(unsafe.Pointer(_a + 11))), int32(*(*uint8)(unsafe.Pointer(_a + 12))), int32(*(*uint8)(unsafe.Pointer(_a + 13))), int32(*(*uint8)(unsafe.Pointer(_a + 14))), int32(*(*uint8)(unsafe.Pointer(_a + 15))))
_7:
	_i = set682(&_best, int32(0))
	_max = int32(2)
_8:
	if *(*int8)(unsafe.Pointer(_buf + uintptr(_i))) == 0 {
		goto _10
	}

	if _i == 0 || int32(*(*int8)(unsafe.Pointer(_buf + uintptr(_i)))) == int32(':') {
		goto _11
	}

	goto _9

_11:
	_j = int32(Xstrspn(tls, _buf+uintptr(_i), ts+3044 /* ":0" */))
	if _j <= _max {
		goto _12
	}

	_best = _i
	_max = _j
_12:
_9:
	_i++
	goto _8

_10:
	if _max <= int32(3) {
		goto _13
	}

	*(*int8)(unsafe.Pointer(_buf + uintptr(_best))) = set683((*int8)(unsafe.Pointer(_buf+uintptr(_best+int32(1)))), int8(':'))
	Xmemmove(tls, (_buf+uintptr(_best))+uintptr(2), (_buf+uintptr(_best))+uintptr(_max), uint64(_i-_best-_max+int32(1)))
_13:
	if Xstrlen(tls, _buf) >= uint64(_l) {
		goto _14
	}

	Xstrcpy(tls, _s, _buf)
	return _s

_14:
	goto _1

_4:
	*(*int32)(unsafe.Pointer(X__errno_location(tls))) = int32(97)
	return null

_1:
	*(*int32)(unsafe.Pointer(X__errno_location(tls))) = int32(28)
	return null
}

type t638__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t638__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t9socklen_t = uint32

type t144size_t = uint64

// linking inet_pton.o

func set684(p *int32, v int32) int32 { *p = v; return v }

func preinc685(p *uintptr) uintptr { *p += 1; return *p }

func postinc686(p *uintptr) uintptr { r := *p; *p += 1; return r }

// Xinet_pton is defined at inet_pton.c:15:5
func Xinet_pton(tls TLS, _af int32, _s uintptr /* *int8 */, _a0 uintptr /* *void */) (r int32) {
	esc := MustMalloc(16)
	var (
		_ip      = esc   // *[8]uint16
		_a       uintptr // *uint8
		_i       int32
		_j       int32
		_v       int32
		_d       int32
		_brk     int32
		_need_v4 int32
	)
	defer Free(esc)
	_a = _a0
	_brk = int32(-1)
	_need_v4 = int32(0)
	if _af != int32(2) {
		goto _1
	}

	_i = int32(0)
_3:
	if _i >= int32(4) {
		goto _5
	}

	_v = set684(&_j, int32(0))
_6:
	if _j >= int32(3) || uint32(*(*int8)(unsafe.Pointer(_s + uintptr(_j))))-uint32('0') >= uint32(10) {
		goto _8
	}

	_v = int32(10)*_v + int32(*(*int8)(unsafe.Pointer(_s + uintptr(_j)))) - int32('0')
	_j++
	goto _6

_8:
	if _j != int32(0) && (_j <= int32(1) || int32(*(*int8)(unsafe.Pointer(_s))) != int32('0')) && _v <= int32(255) {
		goto _9
	}

	return int32(0)

_9:
	*(*uint8)(unsafe.Pointer(_a + uintptr(_i))) = uint8(_v)
	if int32(*(*int8)(unsafe.Pointer(_s + uintptr(_j)))) != int32(0) || _i != int32(3) {
		goto _10
	}

	return int32(1)

_10:
	if int32(*(*int8)(unsafe.Pointer(_s + uintptr(_j)))) == int32('.') {
		goto _11
	}

	return int32(0)

_11:
	_s += uintptr(_j + int32(1))
	_i++
	goto _3

_5:
	return int32(0)

	goto _2

_1:
	if _af == int32(10) {
		goto _12
	}

	*(*int32)(unsafe.Pointer(X__errno_location(tls))) = int32(97)
	return int32(-1)

_12:
_2:
	if int32(*(*int8)(unsafe.Pointer(_s))) != int32(':') || int32(*(*int8)(unsafe.Pointer(preinc685(&_s)))) == int32(':') {
		goto _13
	}

	return int32(0)

_13:
	_i = int32(0)
_14:
	if int32(*(*int8)(unsafe.Pointer(_s))) != int32(':') || _brk >= int32(0) {
		goto _17
	}

	_brk = _i
	*(*uint16)(unsafe.Pointer(_ip + 2*uintptr(_i&int32(7)))) = uint16(0)
	if *(*int8)(unsafe.Pointer(preinc685(&_s))) != 0 {
		goto _18
	}

	goto _16

_18:
	if _i != int32(7) {
		goto _19
	}

	return int32(0)

_19:
	goto _15

_17:
	_v = set684(&_j, int32(0))
_20:
	if _j >= int32(4) || set684(&_d, xhexval(tls, uint32(*(*int8)(unsafe.Pointer(_s + uintptr(_j)))))) < int32(0) {
		goto _22
	}

	_v = int32(16)*_v + _d
	_j++
	goto _20

_22:
	if _j != int32(0) {
		goto _23
	}

	return int32(0)

_23:
	*(*uint16)(unsafe.Pointer(_ip + 2*uintptr(_i&int32(7)))) = uint16(_v)
	if *(*int8)(unsafe.Pointer(_s + uintptr(_j))) != 0 || _brk < int32(0) && _i != int32(7) {
		goto _24
	}

	goto _16

_24:
	if _i != int32(7) {
		goto _25
	}

	return int32(0)

_25:
	if int32(*(*int8)(unsafe.Pointer(_s + uintptr(_j)))) == int32(':') {
		goto _26
	}

	if int32(*(*int8)(unsafe.Pointer(_s + uintptr(_j)))) == int32('.') && (_i >= int32(6) || _brk >= int32(0)) {
		goto _27
	}

	return int32(0)

_27:
	_need_v4 = int32(1)
	_i++
	goto _16

_26:
	_s += uintptr(_j + int32(1))

_15:
	_i++
	goto _14

_16:
	if _brk < int32(0) {
		goto _28
	}

	Xmemmove(tls, ((_ip+2*uintptr(_brk))+2*uintptr(7))-2*uintptr(_i), _ip+2*uintptr(_brk), uint64(int32(2)*(_i+int32(1)-_brk)))
	_j = int32(0)
_29:
	if _j >= int32(7)-_i {
		goto _31
	}

	*(*uint16)(unsafe.Pointer(_ip + 2*uintptr(_brk+_j))) = uint16(0)
	_j++
	goto _29

_31:
_28:
	_j = int32(0)
_32:
	if _j >= int32(8) {
		goto _34
	}

	*(*uint8)(unsafe.Pointer(postinc686(&_a))) = uint8(int32(*(*uint16)(unsafe.Pointer(_ip + 2*uintptr(_j)))) >> (uint(8) % 32))
	*(*uint8)(unsafe.Pointer(postinc686(&_a))) = uint8(*(*uint16)(unsafe.Pointer(_ip + 2*uintptr(_j))))
	_j++
	goto _32

_34:
	if _need_v4 == 0 || Xinet_pton(tls, int32(2), _s, _a-uintptr(4)) > int32(0) {
		goto _35
	}

	return int32(0)

_35:
	return int32(1)
}

type t639__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t639__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t8uint16_t = uint16

// xhexval is defined at inet_pton.c:7:12
func xhexval(tls TLS, _c uint32) (r int32) {
	if _c-uint32('0') >= uint32(10) {
		goto _1
	}

	return int32(_c - uint32('0'))

_1:
	_c = _c | uint32(32)
	if _c-uint32('a') >= uint32(6) {
		goto _2
	}

	return int32(_c - uint32('a') + uint32(10))

_2:
	return int32(-1)
}

type t145size_t = uint64

// linking listen.o

// Xlisten is defined at listen.c:4:5
func Xlisten(tls TLS, _fd int32, _backlog int32) (r int32) {
	return int32(X__syscall_ret(tls, uint64(x11__syscall6(tls, int64(50), int64(_fd), int64(_backlog), int64(0), int64(0), int64(0), int64(0)))))
}

type t640__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t640__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// x__syscall6 is defined at syscall_arch.h:63:22
func x11__syscall6(tls TLS, _n int64, _a1 int64, _a2 int64, _a3 int64, _a4 int64, _a5 int64, _a6 int64) (r int64) {
	return X__syscall(tls, _n, _a1, _a2, _a3, _a4, _a5, _a6)
}

// linking lookup_ipliteral.o

type t641__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t641__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// linking lookup_name.o

type t642__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t642__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// linking lookup_serv.o

type t643__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t643__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// linking netlink.o

// X__rtnetlink_enumerate is defined at netlink.c:42:5
func X__rtnetlink_enumerate(tls TLS, _link_af int32, _addr_af int32, _cb uintptr /* *func(TLS, uintptr, uintptr) int32 */, _ctx uintptr /* *void */) (r int32) {
	var (
		_fd int32
		_r  int32
	)
	_fd = Xsocket(tls, int32(16), int32(524291), int32(0))
	if _fd >= int32(0) {
		goto _1
	}

	return int32(-1)

_1:
	_r = x__netlink_enumerate(tls, _fd, uint32(1), int32(18), _link_af, _cb, _ctx)
	if _r != 0 {
		goto _2
	}

	_r = x__netlink_enumerate(tls, _fd, uint32(2), int32(22), _addr_af, _cb, _ctx)
_2:
	x27__syscall1(tls, int64(3), int64(_fd))
	return _r
}

type t644__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t644__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

func fn687(p uintptr) func(TLS, uintptr, uintptr) int32 {
	return *(*func(TLS, uintptr, uintptr) int32)(unsafe.Pointer(&p))
}

// x__netlink_enumerate is defined at netlink.c:7:12
func x__netlink_enumerate(tls TLS, _fd int32, _seq uint32, _type int32, _af int32, _cb uintptr /* *func(TLS, uintptr, uintptr) int32 */, _ctx uintptr /* *void */) (r int32) {
	esc := MustMalloc(8192)
	var (
		_h   uintptr // *Snlmsghdr
		_u   = esc   // *struct{Fbuf [0][8192]uint8;Freq ...Snlmsghdr;F int32; _ [8188]byte}
		_r   int32
		_ret int32
	)
	defer Free(esc)
	Xmemset(tls, _u, int32(0), uint64(20))
	*(*uint32)(unsafe.Pointer(_u)) = uint32(20)
	*(*uint16)(unsafe.Pointer(_u + 4)) = uint16(_type)
	*(*uint16)(unsafe.Pointer(_u + 6)) = uint16(769)
	*(*uint32)(unsafe.Pointer(_u + 8)) = _seq
	*(*uint8)(unsafe.Pointer(_u + 16)) = uint8(_af)
	_r = int32(Xsend(tls, _fd, _u, uint64(20), int32(0)))
	if _r >= int32(0) {
		goto _1
	}

	return _r

_1:
_2:
	_r = int32(Xrecv(tls, _fd, _u, uint64(8192), int32(0x40)))
	if _r > int32(0) {
		goto _4
	}

	return int32(-1)

_4:
	_h = _u
_5:
	if uint64(int64(_u+uintptr(_r)-_h)) < uint64(16) {
		goto _7
	}

	if int32(*(*uint16)(unsafe.Pointer(_h + 4))) != int32(0x3) {
		goto _8
	}

	return int32(0)

_8:
	if int32(*(*uint16)(unsafe.Pointer(_h + 4))) != int32(0x2) {
		goto _9
	}

	return int32(-1)

_9:
	_ret = fn687(_cb)(tls, _ctx, _h)
	if _ret == 0 {
		goto _10
	}

	return _ret

_10:
	_h = _h + uintptr((*(*uint32)(unsafe.Pointer(_h))+uint32(3))&uint32(4294967292))
	goto _5

_7:
	goto _2
	return r
}

// x__syscall1 is defined at syscall_arch.h:16:22
func x27__syscall1(tls TLS, _n int64, _a1 int64) (r int64) {
	return X__syscall(tls, _n, _a1, int64(0), int64(0), int64(0), int64(0), int64(0))
}

type s1nlmsghdr = struct {
	Fnlmsg_len   uint32
	Fnlmsg_type  uint16
	Fnlmsg_flags uint16
	Fnlmsg_seq   uint32
	Fnlmsg_pid   uint32
}

type t9uint8_t = uint8

type Srtgenmsg = struct{ Frtgen_family uint8 }

type t120uint32_t = uint32

type t9uint16_t = uint16

type t146size_t = uint64

type t23ssize_t = int64

// linking netname.o

// Xgetnetbyaddr is defined at netname.c:3:15
func Xgetnetbyaddr(tls TLS, _net uint32, _type int32) (r uintptr /* *Snetent */) {
	return null
}

// Xgetnetbyname is defined at netname.c:8:15
func Xgetnetbyname(tls TLS, _name uintptr /* *int8 */) (r uintptr /* *Snetent */) {
	return null
}

type t645__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t645__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t121uint32_t = uint32

type Snetent = struct {
	Fn_name     uintptr // *int8
	Fn_aliases  uintptr // **int8
	Fn_addrtype int32
	Fn_net      uint32
}

// linking ns_parse.o

// X_ns_flagdata [16]S_ns_flagdata, escapes: true, ns_parse.c:7:27
var X_ns_flagdata = ds + 43736

// Xns_get16 is defined at ns_parse.c:26:10
func Xns_get16(tls TLS, _cp uintptr /* *uint8 */) (r uint32) {
	return uint32(int32(*(*uint8)(unsafe.Pointer(_cp)))<<(uint(8)%32) | int32(*(*uint8)(unsafe.Pointer(_cp + 1))))
}

// Xns_get32 is defined at ns_parse.c:31:15
func Xns_get32(tls TLS, _cp uintptr /* *uint8 */) (r uint64) {
	return uint64(uint32(*(*uint8)(unsafe.Pointer(_cp)))<<(uint(24)%32) | uint32(int32(*(*uint8)(unsafe.Pointer(_cp + 1)))<<(uint(16)%32)) | uint32(int32(*(*uint8)(unsafe.Pointer(_cp + 2)))<<(uint(8)%32)) | uint32(*(*uint8)(unsafe.Pointer(_cp + 3))))
}

func postinc688(p *uintptr) uintptr { r := *p; *p += 1; return r }

// Xns_put16 is defined at ns_parse.c:36:6
func Xns_put16(tls TLS, _s uint32, _cp uintptr /* *uint8 */) {
	*(*uint8)(unsafe.Pointer(postinc688(&_cp))) = uint8(_s >> (uint(8) % 32))
	*(*uint8)(unsafe.Pointer(postinc688(&_cp))) = uint8(_s)
}

// Xns_put32 is defined at ns_parse.c:42:6
func Xns_put32(tls TLS, _l uint64, _cp uintptr /* *uint8 */) {
	*(*uint8)(unsafe.Pointer(postinc688(&_cp))) = uint8(_l >> (uint(24) % 64))
	*(*uint8)(unsafe.Pointer(postinc688(&_cp))) = uint8(_l >> (uint(16) % 64))
	*(*uint8)(unsafe.Pointer(postinc688(&_cp))) = uint8(_l >> (uint(8) % 64))
	*(*uint8)(unsafe.Pointer(postinc688(&_cp))) = uint8(_l)
}

// Xns_initparse is defined at ns_parse.c:50:5
func Xns_initparse(tls TLS, _msg uintptr /* *uint8 */, _msglen int32, _handle uintptr /* *Tns_msg = struct{F_msg *uint8;F...F_rrnum int32;F_msg_ptr *uint8;} */) (r int32) {
	var (
		_i int32
		_r int32
	)
	*(*uintptr)(unsafe.Pointer(_handle)) = _msg
	*(*uintptr)(unsafe.Pointer(_handle + 8)) = _msg + uintptr(_msglen)
	if _msglen >= int32(12) {
		goto _1
	}

	goto lbad

_1:
	*(*uint16)(unsafe.Pointer(_handle + 16)) = uint16(Xns_get16(tls, Preinc(&_msg, uintptr(2))-uintptr(2)))
	*(*uint16)(unsafe.Pointer(_handle + 18)) = uint16(Xns_get16(tls, Preinc(&_msg, uintptr(2))-uintptr(2)))
	_i = int32(0)
_2:
	if _i >= int32(4) {
		goto _4
	}

	*(*uint16)(unsafe.Pointer((_handle + 20) + 2*uintptr(_i))) = uint16(Xns_get16(tls, Preinc(&_msg, uintptr(2))-uintptr(2)))
	_i++
	goto _2

_4:
	_i = int32(0)
_5:
	if _i >= int32(4) {
		goto _7
	}

	if *(*uint16)(unsafe.Pointer((_handle + 20) + 2*uintptr(_i))) == 0 {
		goto _8
	}

	*(*uintptr)(unsafe.Pointer((_handle + 32) + 8*uintptr(_i))) = _msg
	_r = Xns_skiprr(tls, _msg, *(*uintptr)(unsafe.Pointer(_handle + 8)), _i, int32(*(*uint16)(unsafe.Pointer((_handle + 20) + 2*uintptr(_i)))))
	if _r >= int32(0) {
		goto _10
	}

	return int32(-1)

_10:
	_msg += uintptr(_r)
	goto _9

_8:
	*(*uintptr)(unsafe.Pointer((_handle + 32) + 8*uintptr(_i))) = null
_9:
	_i++
	goto _5

_7:
	if _msg == *(*uintptr)(unsafe.Pointer(_handle + 8)) {
		goto _11
	}

	goto lbad

_11:
	*(*E__ns_sect)(unsafe.Pointer(_handle + 64)) = E__ns_sect(4)
	*(*int32)(unsafe.Pointer(_handle + 68)) = int32(-1)
	*(*uintptr)(unsafe.Pointer(_handle + 72)) = null
	return int32(0)

	goto lbad
lbad:
	*(*int32)(unsafe.Pointer(X__errno_location(tls))) = int32(90)
	return int32(-1)
}

func postinc689(p *int32) int32 { r := *p; *p += -1; return r }

// Xns_skiprr is defined at ns_parse.c:80:5
func Xns_skiprr(tls TLS, _ptr uintptr /* *uint8 */, _eom uintptr /* *uint8 */, _section int32, _count int32) (r int32) {
	var (
		_p uintptr // *uint8
		_r int32
	)
	_p = _ptr
_1:
	if postinc689(&_count) == 0 {
		goto _2
	}

	_r = Xdn_skipname(tls, _p, _eom)
	if _r >= int32(0) {
		goto _3
	}

	goto lbad

_3:
	if int64(_r+int32(4)) <= int64(_eom-_p) {
		goto _4
	}

	goto lbad

_4:
	_p += uintptr(_r + int32(4))
	if _section == E__ns_sect(0) {
		goto _5
	}

	if int64(6) <= int64(_eom-_p) {
		goto _6
	}

	goto lbad

_6:
	_p += uintptr(4)
	_r = int32(Xns_get16(tls, Preinc(&_p, uintptr(2))-uintptr(2)))
	if int64(_r) <= int64(_eom-_p) {
		goto _7
	}

	goto lbad

_7:
	_p += uintptr(_r)
_5:
	goto _1

_2:
	return int32(int64(_p - _ptr))

	goto lbad
lbad:
	*(*int32)(unsafe.Pointer(X__errno_location(tls))) = int32(90)
	return int32(-1)
}

// Xns_parserr is defined at ns_parse.c:104:5
func Xns_parserr(tls TLS, _handle uintptr /* *Tns_msg = struct{F_msg *uint8;F...F_rrnum int32;F_msg_ptr *uint8;} */, _section int32, _rrnum int32, _rr uintptr /* *Tns_rr = struct{Fname [1025]int...Frdlength uint16;Frdata *uint8;} */) (r int32) {
	var _r int32

	if uint32(_section) >= uint32(0) && _section < E__ns_sect(4) {
		goto _1
	}

	goto lbad

_1:
	if _section == *(*E__ns_sect)(unsafe.Pointer(_handle + 64)) {
		goto _2
	}

	*(*E__ns_sect)(unsafe.Pointer(_handle + 64)) = _section
	*(*int32)(unsafe.Pointer(_handle + 68)) = int32(0)
	*(*uintptr)(unsafe.Pointer(_handle + 72)) = *(*uintptr)(unsafe.Pointer((_handle + 32) + 8*uintptr(_section)))
_2:
	if _rrnum != int32(-1) {
		goto _3
	}

	_rrnum = *(*int32)(unsafe.Pointer(_handle + 68))
_3:
	if _rrnum >= int32(0) && _rrnum < int32(*(*uint16)(unsafe.Pointer((_handle + 20) + 2*uintptr(_section)))) {
		goto _4
	}

	goto lbad

_4:
	if _rrnum >= *(*int32)(unsafe.Pointer(_handle + 68)) {
		goto _5
	}

	*(*int32)(unsafe.Pointer(_handle + 68)) = int32(0)
	*(*uintptr)(unsafe.Pointer(_handle + 72)) = *(*uintptr)(unsafe.Pointer((_handle + 32) + 8*uintptr(_section)))
_5:
	if _rrnum <= *(*int32)(unsafe.Pointer(_handle + 68)) {
		goto _6
	}

	_r = Xns_skiprr(tls, *(*uintptr)(unsafe.Pointer(_handle + 72)), *(*uintptr)(unsafe.Pointer(_handle + 8)), _section, _rrnum-*(*int32)(unsafe.Pointer(_handle + 68)))
	if _r >= int32(0) {
		goto _7
	}

	return int32(-1)

_7:
	*(*uintptr)(unsafe.Pointer(_handle + 72)) += uintptr(_r)
	*(*int32)(unsafe.Pointer(_handle + 68)) = _rrnum
_6:
	_r = Xns_name_uncompress(tls, *(*uintptr)(unsafe.Pointer(_handle)), *(*uintptr)(unsafe.Pointer(_handle + 8)), *(*uintptr)(unsafe.Pointer(_handle + 72)), _rr, uint64(1025))
	if _r >= int32(0) {
		goto _8
	}

	return int32(-1)

_8:
	*(*uintptr)(unsafe.Pointer(_handle + 72)) += uintptr(_r)
	if int64(4) <= int64(*(*uintptr)(unsafe.Pointer(_handle + 8))-*(*uintptr)(unsafe.Pointer(_handle + 72))) {
		goto _9
	}

	goto lsize

_9:
	*(*uint16)(unsafe.Pointer(_rr + 1026)) = uint16(Xns_get16(tls, Preinc((*uintptr)(unsafe.Pointer(_handle+72)), uintptr(2))-uintptr(2)))
	*(*uint16)(unsafe.Pointer(_rr + 1028)) = uint16(Xns_get16(tls, Preinc((*uintptr)(unsafe.Pointer(_handle+72)), uintptr(2))-uintptr(2)))
	if _section == E__ns_sect(0) {
		goto _10
	}

	if int64(6) <= int64(*(*uintptr)(unsafe.Pointer(_handle + 8))-*(*uintptr)(unsafe.Pointer(_handle + 72))) {
		goto _12
	}

	goto lsize

_12:
	*(*uint32)(unsafe.Pointer(_rr + 1032)) = uint32(Xns_get32(tls, Preinc((*uintptr)(unsafe.Pointer(_handle+72)), uintptr(4))-uintptr(4)))
	*(*uint16)(unsafe.Pointer(_rr + 1036)) = uint16(Xns_get16(tls, Preinc((*uintptr)(unsafe.Pointer(_handle+72)), uintptr(2))-uintptr(2)))
	if int64(*(*uint16)(unsafe.Pointer(_rr + 1036))) <= int64(*(*uintptr)(unsafe.Pointer(_handle + 8))-*(*uintptr)(unsafe.Pointer(_handle + 72))) {
		goto _13
	}

	goto lsize

_13:
	*(*uintptr)(unsafe.Pointer(_rr + 1040)) = *(*uintptr)(unsafe.Pointer(_handle + 72))
	*(*uintptr)(unsafe.Pointer(_handle + 72)) += uintptr(*(*uint16)(unsafe.Pointer(_rr + 1036)))
	goto _11

_10:
	*(*uint32)(unsafe.Pointer(_rr + 1032)) = uint32(0)
	*(*uint16)(unsafe.Pointer(_rr + 1036)) = uint16(0)
	*(*uintptr)(unsafe.Pointer(_rr + 1040)) = null
_11:
	*(*int32)(unsafe.Pointer(_handle + 68))++
	if *(*int32)(unsafe.Pointer(_handle + 68)) <= int32(*(*uint16)(unsafe.Pointer((_handle + 20) + 2*uintptr(_section)))) {
		goto _14
	}

	*(*E__ns_sect)(unsafe.Pointer(_handle + 64)) = E__ns_sect(uint32(_section) + uint32(1))
	if *(*E__ns_sect)(unsafe.Pointer(_handle + 64)) != E__ns_sect(4) {
		goto _15
	}

	*(*int32)(unsafe.Pointer(_handle + 68)) = int32(-1)
	*(*uintptr)(unsafe.Pointer(_handle + 72)) = null
	goto _16

_15:
	*(*int32)(unsafe.Pointer(_handle + 68)) = int32(0)
_16:
_14:
	return int32(0)

	goto lbad
lbad:
	*(*int32)(unsafe.Pointer(X__errno_location(tls))) = int32(19)
	return int32(-1)

	goto lsize
lsize:
	*(*int32)(unsafe.Pointer(X__errno_location(tls))) = int32(90)
	return int32(-1)
}

// Xns_name_uncompress is defined at ns_parse.c:163:5
func Xns_name_uncompress(tls TLS, _msg uintptr /* *uint8 */, _eom uintptr /* *uint8 */, _src uintptr /* *uint8 */, _dst uintptr /* *int8 */, _dstsiz uint64) (r int32) {
	var _r int32

	_r = Xdn_expand(tls, _msg, _eom, _src, _dst, int32(_dstsiz))
	if _r >= int32(0) {
		goto _1
	}

	*(*int32)(unsafe.Pointer(X__errno_location(tls))) = int32(90)
_1:
	return _r
}

type t646__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t646__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type S_ns_flagdata = struct {
	Fmask  int32
	Fshift int32
}

type t10uint16_t = uint16

type Tns_sect = E__ns_sect

type E__ns_sect = int32

// Values of E__ns_sect
const (
	Cns_s_qd  = 0
	Cns_s_zn  = 0
	Cns_s_an  = 1
	Cns_s_pr  = 1
	Cns_s_ns  = 2
	Cns_s_ud  = 2
	Cns_s_ar  = 3
	Cns_s_max = 4
)

type t122uint32_t = uint32

type t147size_t = uint64

// linking ntohl.o

// Xntohl is defined at ntohl.c:4:10
func Xntohl(tls TLS, _n uint32) (r uint32) {
	esc := MustMalloc(4)
	var _u = esc // *struct{Fi [0]int32;Fc [0]int8;F int32}
	defer Free(esc)
	Copy(_u, ts+2904 /* "\x01\x00\x00\x00" */, 4)
	if *(*int8)(unsafe.Pointer(_u)) != 0 {
		return x2__bswap_32(tls, _n)
	}

	return _n
}

type t647__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t647__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t123uint32_t = uint32

// x__bswap_32 is defined at byteswap.h:12:26
func x2__bswap_32(tls TLS, ___x uint32) (r uint32) {
	return ___x>>(uint(24)%32) | ___x>>(uint(8)%32)&uint32(0xff00) | ___x<<(uint(8)%32)&uint32(0xff0000) | ___x<<(uint(24)%32)
}

// linking ntohs.o

// Xntohs is defined at ntohs.c:4:10
func Xntohs(tls TLS, _n uint16) (r uint16) {
	esc := MustMalloc(4)
	var _u = esc // *struct{Fi [0]int32;Fc [0]int8;F int32}
	defer Free(esc)
	Copy(_u, ts+2904 /* "\x01\x00\x00\x00" */, 4)
	if *(*int8)(unsafe.Pointer(_u)) != 0 {
		return x1__bswap_16(tls, _n)
	}

	return _n
}

type t648__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t648__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t11uint16_t = uint16

// x__bswap_16 is defined at byteswap.h:7:26
func x1__bswap_16(tls TLS, ___x uint16) (r uint16) {
	return uint16(int32(___x)<<(uint(8)%32) | int32(___x)>>(uint(8)%32))
}

// linking proto.o

// Xendprotoent is defined at proto.c:47:6
func Xendprotoent(tls TLS) {
	xidx = int32(0)
}

// Xsetprotoent is defined at proto.c:52:6
func Xsetprotoent(tls TLS, _stayopen int32) {
	xidx = int32(0)
}

// Xgetprotoent is defined at proto.c:57:17
func Xgetprotoent(tls TLS) (r uintptr /* *Sprotoent */) {
	X__assert_fail(tls, ts+0 /* "TODO(ccgo)" */, ts+3048 /* "src/network/prot..." */, int32(61), x690__func__)
	return r
}

// Xgetprotobyname is defined at proto.c:70:17
func Xgetprotobyname(tls TLS, _name uintptr /* *int8 */) (r uintptr /* *Sprotoent */) {
	var _p uintptr // *Sprotoent

	Xendprotoent(tls)
_1:
	_p = Xgetprotoent(tls)
	if (_p != 0) && (Xstrcmp(tls, _name, *(*uintptr)(unsafe.Pointer(_p))) != 0) {
		goto _1
	}

	return _p
}

// Xgetprotobynumber is defined at proto.c:79:17
func Xgetprotobynumber(tls TLS, _num int32) (r uintptr /* *Sprotoent */) {
	var _p uintptr // *Sprotoent

	Xendprotoent(tls)
_1:
	_p = Xgetprotoent(tls)
	if (_p != 0) && (*(*int32)(unsafe.Pointer(_p + 16)) != _num) {
		goto _1
	}

	return _p
}

type t649__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t649__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// xidx int32, escapes: false, proto.c:7:12
var xidx int32

type Sprotoent = struct {
	Fp_name    uintptr // *int8
	Fp_aliases uintptr // **int8
	Fp_proto   int32
}

// x2__func__ [12]int8, escapes: true, proto.c:58:1
var x690__func__ = ds + 43864

// linking recv.o

// Xrecv is defined at recv.c:3:9
func Xrecv(tls TLS, _fd int32, _buf uintptr /* *void */, _len uint64, _flags int32) (r int64) {
	return Xrecvfrom(tls, _fd, _buf, _len, _flags, null, null)
}

type t650__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t650__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t148size_t = uint64

type t24ssize_t = int64

// linking recvfrom.o

// Xrecvfrom is defined at recvfrom.c:6:9
func Xrecvfrom(tls TLS, _fd int32, _buf uintptr /* *void */, _len uint64, _flags int32, _addr uintptr /* *Ssockaddr */, _alen uintptr /* *Tsocklen_t = uint32 */) (r int64) {
	X__assert_fail(tls, ts+0 /* "TODO(ccgo)" */, ts+3068 /* "src/network/recv..." */, int32(8), x691__func__)
	return r
}

type t651__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t651__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t149size_t = uint64

type t25ssize_t = int64

type s12sockaddr = struct {
	Fsa_family uint16
	Fsa_data   [14]int8
}

// x1__func__ [9]int8, escapes: true, recvfrom.c:7:1
var x691__func__ = ds + 43880

type t13sa_family_t = uint16

// linking recvmmsg.o

func set692(p *uint32, v uint32) uint32 { *p = v; return v }

// Xrecvmmsg is defined at recvmmsg.c:7:5
func Xrecvmmsg(tls TLS, _fd int32, _msgvec uintptr /* *Smmsghdr */, _vlen uint32, _flags uint32, _timeout uintptr /* *Stimespec */) (r int32) {
	var (
		_mh uintptr // *Smmsghdr
		_i  uint32
	)
	_mh = _msgvec
	_i = _vlen
_1:
	if _i == 0 {
		goto _3
	}

	*(*int32)(unsafe.Pointer(_mh + 28)) = int32(set692((*uint32)(unsafe.Pointer(_mh+44)), uint32(0)))
	_i--
	_mh += 64
	goto _1

_3:
	X__assert_fail(tls, ts+0 /* "TODO(ccgo)" */, ts+3092 /* "src/network/recv..." */, int32(15), x693__func__)
	return r
}

type t652__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t652__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type Smmsghdr = struct {
	Fmsg_hdr Smsghdr
	Fmsg_len uint32
}

// x1__func__ [9]int8, escapes: true, recvmmsg.c:8:1
var x693__func__ = ds + 43896

type t10socklen_t = uint32

type Smsghdr = struct {
	Fmsg_name       uintptr // *void
	Fmsg_namelen    uint32
	Fmsg_iov        uintptr // *Siovec
	Fmsg_iovlen     int32
	F__pad1         int32
	Fmsg_control    uintptr // *void
	Fmsg_controllen uint32
	F__pad2         uint32
	Fmsg_flags      int32
}

type s2iovec = struct {
	Fiov_base uintptr // *void
	Fiov_len  uint64
}

type t150size_t = uint64

type s13timespec struct{ uintptr }

// linking recvmsg.o

func set694(p *uint32, v uint32) uint32 { *p = v; return v }

// Xrecvmsg is defined at recvmsg.c:7:9
func Xrecvmsg(tls TLS, _fd int32, _msg uintptr /* *Smsghdr */, _flags int32) (r int64) {
	esc := MustMalloc(56)
	var (
		_r    int64
		_h    = esc   // *Smsghdr
		_orig uintptr // *Smsghdr
	)
	defer Free(esc)
	_orig = _msg
	if _msg == 0 {
		goto _1
	}

	*(*s1msghdr)(unsafe.Pointer(_h)) = *(*s1msghdr)(unsafe.Pointer(_msg))
	*(*int32)(unsafe.Pointer(_h + 28)) = int32(set694((*uint32)(unsafe.Pointer(_h+44)), uint32(0)))
	_msg = _h
_1:
	X__assert_fail(tls, ts+0 /* "TODO(ccgo)" */, ts+3116 /* "src/network/recv..." */, int32(18), x695__func__)
	if _orig == 0 {
		goto _2
	}

	*(*s1msghdr)(unsafe.Pointer(_orig)) = *(*s1msghdr)(unsafe.Pointer(_h))
_2:
	return _r
}

type t653__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t653__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t26ssize_t = int64

type s1msghdr = struct {
	Fmsg_name       uintptr // *void
	Fmsg_namelen    uint32
	Fmsg_iov        uintptr // *Siovec
	Fmsg_iovlen     int32
	F__pad1         int32
	Fmsg_control    uintptr // *void
	Fmsg_controllen uint32
	F__pad2         uint32
	Fmsg_flags      int32
}

// x1__func__ [8]int8, escapes: true, recvmsg.c:8:1
var x695__func__ = ds + 43912

type t11socklen_t = uint32

type s3iovec = struct {
	Fiov_base uintptr // *void
	Fiov_len  uint64
}

type t151size_t = uint64

// linking res_init.o

// Xres_init is defined at res_init.c:3:5
func Xres_init(tls TLS) (r int32) {
	return int32(0)
}

type t654__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t654__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// linking res_mkquery.o

// X__res_mkquery is defined at res_mkquery.c:6:5
func X__res_mkquery(tls TLS, _op int32, _dname uintptr /* *int8 */, _class int32, _type int32, _data uintptr /* *uint8 */, _datalen int32, _newrr uintptr /* *uint8 */, _buf uintptr /* *uint8 */, _buflen int32) (r int32) {
	esc := MustMalloc(304)
	var (
		_id int32
		_i  int32
		_j  int32
		_q  = esc       // *[280]uint8
		_ts = esc + 288 // *Stimespec
		_l  uint64
		_n  int32
	)
	defer Free(esc)
	_l = Xstrnlen(tls, _dname, uint64(255))
	if _l == 0 || int32(*(*int8)(unsafe.Pointer(_dname + uintptr(_l-uint64(1))))) != int32('.') {
		goto _1
	}

	_l--
_1:
	_n = int32(uint64(17) + _l + uint64(bool2int(_l != 0)))
	if _l <= uint64(253) && _buflen >= _n && uint32(_op) <= uint32(15) && uint32(_class) <= uint32(255) && uint32(_type) <= uint32(255) {
		goto _2
	}

	return int32(-1)

_2:
	Xmemset(tls, _q, int32(0), uint64(_n))
	*(*uint8)(unsafe.Pointer(_q + 2)) = uint8(_op*int32(8) + int32(1))
	*(*uint8)(unsafe.Pointer(_q + 5)) = uint8(1)
	Xmemcpy(tls, _q+uintptr(13), _dname, _l)
	_i = int32(13)
_3:
	if *(*uint8)(unsafe.Pointer(_q + uintptr(_i))) == 0 {
		goto _5
	}

	_j = _i
_6:
	if *(*uint8)(unsafe.Pointer(_q + uintptr(_j))) == 0 || int32(*(*uint8)(unsafe.Pointer(_q + uintptr(_j)))) == int32('.') {
		goto _8
	}

	_j++
	goto _6

_8:
	if uint32(_j-_i)-uint32(1) <= uint32(62) {
		goto _9
	}

	return int32(-1)

_9:
	*(*uint8)(unsafe.Pointer(_q + uintptr(_i-int32(1)))) = uint8(_j - _i)
	_i = _j + int32(1)
	goto _3

_5:
	*(*uint8)(unsafe.Pointer(_q + uintptr(_i+int32(1)))) = uint8(_type)
	*(*uint8)(unsafe.Pointer(_q + uintptr(_i+int32(3)))) = uint8(_class)
	Xclock_gettime(tls, int32(0), _ts)
	_id = int32((uint64(*(*int64)(unsafe.Pointer(_ts + 8))) + uint64(*(*int64)(unsafe.Pointer(_ts + 8)))/uint64(65536)) & uint64(0xffff))
	*(*uint8)(unsafe.Pointer(_q)) = uint8(_id / int32(256))
	*(*uint8)(unsafe.Pointer(_q + 1)) = uint8(_id)
	Xmemcpy(tls, _buf, _q, uint64(_n))
	return _n
}

type t655__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t655__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type s14timespec = struct {
	Ftv_sec  int64
	Ftv_nsec int64
}

type t152size_t = uint64

type t27time_t = int64

type t2clockid_t = int32

// linking res_msend.o

// X__res_msend_rc is defined at res_msend.c:31:5
func X__res_msend_rc(tls TLS, _nqueries int32, _queries uintptr /* **uint8 */, _qlens uintptr /* *int32 */, _answers uintptr /* **uint8 */, _alens uintptr /* *int32 */, _asize int32, _conf uintptr /* *Sresolvconf */) (r int32) {
	X__assert_fail(tls, ts+0 /* "TODO(ccgo)" */, ts+3140 /* "src/network/res_..." */, int32(37), x696__func__)
	return r
}

// X__res_msend is defined at res_msend.c:184:5
func X__res_msend(tls TLS, _nqueries int32, _queries uintptr /* **uint8 */, _qlens uintptr /* *int32 */, _answers uintptr /* **uint8 */, _alens uintptr /* *int32 */, _asize int32) (r int32) {
	esc := MustMalloc(100)
	var _conf = esc // *Sresolvconf
	defer Free(esc)
	if X__get_resolv_conf(tls, _conf, null, uint64(0)) >= int32(0) {
		goto _1
	}

	return int32(-1)

_1:
	return X__res_msend_rc(tls, _nqueries, _queries, _qlens, _answers, _alens, _asize, _conf)
}

type t656__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t656__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type Sresolvconf = struct {
	Fns       [3]s1address
	Fnns      uint32
	Fattempts uint32
	Fndots    uint32
	Ftimeout  uint32
}

// x1__func__ [15]int8, escapes: true, res_msend.c:34:1
var x696__func__ = ds + 43920

type s1address = struct {
	Ffamily  int32
	Fscopeid uint32
	Faddr    [16]uint8
	Fsortkey int32
}

type t153size_t = uint64

type t10uint8_t = uint8

// linking res_query.o

// X__res_query is defined at res_query.c:8:5
func X__res_query(tls TLS, _name uintptr /* *int8 */, _class int32, _type int32, _dest uintptr /* *uint8 */, _len int32) (r int32) {
	esc := MustMalloc(280)
	var (
		_q  = esc // *[280]uint8
		_ql int32
	)
	defer Free(esc)
	_ql = X__res_mkquery(tls, int32(0), _name, _class, _type, null, int32(0), null, _q, int32(280))
	if _ql >= int32(0) {
		goto _1
	}

	return _ql

_1:
	return X__res_send(tls, _q, _ql, _dest, _len)
}

type t657__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t657__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// linking res_querydomain.o

// Xres_querydomain is defined at res_querydomain.c:4:5
func Xres_querydomain(tls TLS, _name uintptr /* *int8 */, _domain uintptr /* *int8 */, _class int32, _type int32, _dest uintptr /* *uint8 */, _len int32) (r int32) {
	esc := MustMalloc(255)
	var (
		_tmp = esc // *[255]int8
		_nl  uint64
		_dl  uint64
	)
	defer Free(esc)
	_nl = Xstrnlen(tls, _name, uint64(255))
	_dl = Xstrnlen(tls, _domain, uint64(255))
	if _nl+_dl+uint64(1) <= uint64(254) {
		goto _1
	}

	return int32(-1)

_1:
	Xmemcpy(tls, _tmp, _name, _nl)
	*(*int8)(unsafe.Pointer(_tmp + uintptr(_nl))) = int8('.')
	Xmemcpy(tls, (_tmp+uintptr(_nl))+uintptr(1), _domain, _dl+uint64(1))
	return Xres_query(tls, _tmp, _class, _type, _dest, _len)
}

type t658__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t658__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t154size_t = uint64

// linking res_send.o

// X__res_send is defined at res_send.c:6:5
func X__res_send(tls TLS, amsg uintptr, amsglen int32, aanswer uintptr, aanslen int32) (r int32) {
	esc := MustMalloc(52)
	var (
		_msg    = esc      // **uint8
		_msglen = esc + 16 // *int32
		_answer = esc + 32 // **uint8
		_anslen = esc + 48 // *int32
		_r      int32
	)
	defer Free(esc)
	*(*uintptr)(unsafe.Pointer(_msg)) = amsg
	*(*int32)(unsafe.Pointer(_msglen)) = amsglen
	*(*uintptr)(unsafe.Pointer(_answer)) = aanswer
	*(*int32)(unsafe.Pointer(_anslen)) = aanslen
	_r = X__res_msend(tls, int32(1), _msg, _msglen, _answer, _anslen, *(*int32)(unsafe.Pointer(_anslen)))
	if _r < int32(0) {
		return _r
	}

	return *(*int32)(unsafe.Pointer(_anslen))
}

type t659__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t659__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// linking res_state.o

// X__res_state is defined at res_state.c:5:20
func X__res_state(tls TLS) (r uintptr /* *S__res_state */) {
	return x697res
}

type t660__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t660__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type S__res_state = struct {
	Fretrans     int32
	Fretry       int32
	Foptions     uint64
	Fnscount     int32
	Fnsaddr_list [3]s2sockaddr_in
	Fid          uint16
	Fdnsrch      [7]uintptr
	Fdefdname    [256]int8
	Fpfcode      uint64
	F392         uint32
	Fsort_list   [10]struct {
		Faddr s6in_addr
		Fmask uint32
	}
	Fqhook       uintptr // *void
	Frhook       uintptr // *void
	Fres_h_errno int32
	F_vcsock     int32
	F_flags      uint32
	F_u          struct {
		Fpad  [0][52]int8
		F_ext [0]struct {
			Fnscount    uint16
			Fnsmap      [3]uint16
			Fnssocks    [3]int32
			Fnscount6   uint16
			Fnsinit     uint16
			Fnsaddrs    [3]uintptr
			F_initstamp [2]uint32
		}
		F int64
		_ [48]byte
	}
}

// x1res S__res_state, escapes: true, res_state.c:7:28
var x697res = bss + 2720

type s2sockaddr_in = struct {
	Fsin_family uint16
	Fsin_port   uint16
	Fsin_addr   s6in_addr
	Fsin_zero   [8]uint8
}

type s6in_addr = struct{ Fs_addr uint32 }

type t124uint32_t = uint32

type t12uint16_t = uint16

type t14sa_family_t = uint16

type t3in_port_t = uint16

type t11uint8_t = uint8

type t6in_addr_t = uint32

// linking resolvconf.o

// X__get_resolv_conf is defined at resolvconf.c:9:5
func X__get_resolv_conf(tls TLS, _conf uintptr /* *Sresolvconf */, _search uintptr /* *int8 */, _search_sz uint64) (r int32) {
	esc := MustMalloc(760)
	var (
		_line = esc       // *[256]int8
		__buf = esc + 256 // *[256]uint8
		_f    uintptr     // *TFILE = S_IO_FILE
		__f   = esc + 512 // *TFILE = S_IO_FILE
		_nns  int32
		_p    uintptr     // *int8
		_z    = esc + 752 // **int8
		_c    int32
		_x    uint64
		_1x   uint64
		_2x   uint64
		_l    uint64
	)
	defer Free(esc)
	_nns = int32(0)
	*(*uint32)(unsafe.Pointer(_conf + 92)) = uint32(1)
	*(*uint32)(unsafe.Pointer(_conf + 96)) = uint32(5)
	*(*uint32)(unsafe.Pointer(_conf + 88)) = uint32(2)
	if _search == 0 {
		goto _1
	}

	*(*int8)(unsafe.Pointer(_search)) = int8(0)
_1:
	_f = X__fopen_rb_ca(tls, ts+3164 /* "/etc/resolv.conf" */, __f, __buf, uint64(256))
	if _f != 0 {
		goto _2
	}

	switch *(*int32)(unsafe.Pointer(X__errno_location(tls))) {
	case int32(2):
		goto _4
	case int32(20):
		goto _5
	case int32(13):
		goto _6
	default:
		goto _7
	}
_4:
_5:
_6:
	goto lno_resolv_conf

_7:
	return int32(-1)

_2:
_8:
	if Xfgets(tls, _line, int32(256), _f) == 0 {
		goto _9
	}

	if Xstrchr(tls, _line, int32('\n')) != 0 || *(*uint32)(unsafe.Pointer(_f))&uint32(16) != 0 {
		goto _10
	}

_11:
	_c = Xgetc(tls, _f)
	if (_c != int32('\n')) && (_c != int32(-1)) {
		goto _11
	}

	goto _8

_10:
	if Xstrncmp(tls, _line, ts+3184 /* "options" */, uint64(7)) != 0 || x4__isspace(tls, int32(*(*int8)(unsafe.Pointer(_line + 7)))) == 0 {
		goto _14
	}

	_p = Xstrstr(tls, _line, ts+3192 /* "ndots:" */)
	if _p == 0 || uint32(*(*int8)(unsafe.Pointer(_p + 6)))-uint32('0') >= uint32(10) {
		goto _15
	}

	_p += uintptr(6)
	_x = Xstrtoul(tls, _p, _z, int32(10))
	if *(*uintptr)(unsafe.Pointer(_z)) == _p {
		goto _16
	}

	*(*uint32)(unsafe.Pointer(_conf + 92)) = uint32(func() uint64 {
		if _x > uint64(15) {
			return uint64(15)
		}
		return _x
	}())
_16:
_15:
	_p = Xstrstr(tls, _line, ts+3200 /* "attempts:" */)
	if _p == 0 || uint32(*(*int8)(unsafe.Pointer(_p + 9)))-uint32('0') >= uint32(10) {
		goto _17
	}

	_p += uintptr(9)
	_1x = Xstrtoul(tls, _p, _z, int32(10))
	if *(*uintptr)(unsafe.Pointer(_z)) == _p {
		goto _18
	}

	*(*uint32)(unsafe.Pointer(_conf + 88)) = uint32(func() uint64 {
		if _1x > uint64(10) {
			return uint64(10)
		}
		return _1x
	}())
_18:
_17:
	_p = Xstrstr(tls, _line, ts+3212 /* "timeout:" */)
	if _p == 0 || uint32(*(*int8)(unsafe.Pointer(_p + 8)))-uint32('0') >= uint32(10) && int32(*(*int8)(unsafe.Pointer(_p + 8))) != int32('.') {
		goto _19
	}

	_p += uintptr(8)
	_2x = Xstrtoul(tls, _p, _z, int32(10))
	if *(*uintptr)(unsafe.Pointer(_z)) == _p {
		goto _20
	}

	*(*uint32)(unsafe.Pointer(_conf + 96)) = uint32(func() uint64 {
		if _2x > uint64(60) {
			return uint64(60)
		}
		return _2x
	}())
_20:
_19:
	goto _8

_14:
	if Xstrncmp(tls, _line, ts+3224 /* "nameserver" */, uint64(10)) != 0 || x4__isspace(tls, int32(*(*int8)(unsafe.Pointer(_line + 10)))) == 0 {
		goto _21
	}

	if _nns < int32(3) {
		goto _22
	}

	goto _8

_22:
	_p = _line + uintptr(11)
_23:
	if x4__isspace(tls, int32(*(*int8)(unsafe.Pointer(_p)))) == 0 {
		goto _25
	}

	_p++
	goto _23

_25:
	*(*uintptr)(unsafe.Pointer(_z)) = _p
_26:
	if *(*int8)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_z)))) == 0 || x4__isspace(tls, int32(*(*int8)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_z)))))) != 0 {
		goto _28
	}

	*(*uintptr)(unsafe.Pointer(_z))++
	goto _26

_28:
	*(*int8)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_z)))) = int8(0)
	X__assert_fail(tls, ts+0 /* "TODO(ccgo)" */, ts+3236 /* "src/network/reso..." */, int32(67), x698__func__)
	X__assert_fail(tls, ts+0 /* "TODO(ccgo)" */, ts+3236 /* "src/network/reso..." */, int32(69), x698__func__)
	goto _8

_21:
	if _search != 0 {
		goto _29
	}

	goto _8

_29:
	if (Xstrncmp(tls, _line, ts+3264 /* "domain" */, uint64(6)) == 0 || Xstrncmp(tls, _line, ts+3272 /* "search" */, uint64(6)) == 0) && x4__isspace(tls, int32(*(*int8)(unsafe.Pointer(_line + 6)))) != 0 {
		goto _30
	}

	goto _8

_30:
	_p = _line + uintptr(7)
_31:
	if x4__isspace(tls, int32(*(*int8)(unsafe.Pointer(_p)))) == 0 {
		goto _33
	}

	_p++
	goto _31

_33:
	_l = Xstrlen(tls, _p)
	if _l < _search_sz {
		goto _34
	}

	goto _8

_34:
	Xmemcpy(tls, _search, _p, _l+uint64(1))
	goto _8

_9:
	X__fclose_ca(tls, _f)
	goto lno_resolv_conf
lno_resolv_conf:
	if _nns != 0 {
		goto _35
	}

	X__assert_fail(tls, ts+0 /* "TODO(ccgo)" */, ts+3236 /* "src/network/reso..." */, int32(89), x698__func__)
	_nns = int32(1)
_35:
	*(*uint32)(unsafe.Pointer(_conf + 84)) = uint32(_nns)
	return int32(0)
}

type t661__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t661__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t155size_t = uint64

type s1resolvconf = struct {
	Fns       [3]s2address
	Fnns      uint32
	Fattempts uint32
	Fndots    uint32
	Ftimeout  uint32
}

// x1__func__ [18]int8, escapes: true, resolvconf.c:10:1
var x698__func__ = ds + 43936

type s8_IO_FILE = struct {
	Fflags        uint32
	Frpos         uintptr // *uint8
	Frend         uintptr // *uint8
	Fclose        uintptr // *func(TLS, uintptr) int32
	Fwend         uintptr // *uint8
	Fwpos         uintptr // *uint8
	Fmustbezero_1 uintptr // *uint8
	Fwbase        uintptr // *uint8
	Fread         uintptr // *func(TLS, uintptr, uintptr, uint64) uint64
	Fwrite        uintptr // *func(TLS, uintptr, uintptr, uint64) uint64
	Fseek         uintptr // *func(TLS, uintptr, int64, int32) int64
	Fbuf          uintptr // *uint8
	Fbuf_size     uint64
	Fprev         uintptr // *TFILE = S_IO_FILE
	Fnext         uintptr // *TFILE = S_IO_FILE
	Ffd           int32
	Fpipe_pid     int32
	Flockcount    int64
	Fdummy3       int16
	Fmode         int8
	Flbf          int8
	Flock         int32
	Fwaiters      int32
	Fcookie       uintptr // *void
	Foff          int64
	Fgetln_buf    uintptr // *int8
	Fmustbezero_2 uintptr // *void
	Fshend        uintptr // *uint8
	Fshlim        int64
	Fshcnt        int64
	Fprev_locked  uintptr // *TFILE = S_IO_FILE
	Fnext_locked  uintptr // *TFILE = S_IO_FILE
	Flocale       uintptr // *S__locale_struct
}

// x__isspace is defined at ctype.h:26:21
func x4__isspace(tls TLS, __c int32) (r int32) {
	return bool2int((__c == int32(' ')) || (uint32(__c)-uint32('\t') < uint32(5)))
}

type s2address = struct {
	Ffamily  int32
	Fscopeid uint32
	Faddr    [16]uint8
	Fsortkey int32
}

type t32off_t = int64

type s63__locale_struct = struct{ Fcat [6]uintptr }

type t12uint8_t = uint8

// linking send.o

// Xsend is defined at send.c:3:9
func Xsend(tls TLS, _fd int32, _buf uintptr /* *void */, _len uint64, _flags int32) (r int64) {
	return Xsendto(tls, _fd, _buf, _len, _flags, null, uint32(0))
}

type t662__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t662__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t156size_t = uint64

type t27ssize_t = int64

type t12socklen_t = uint32

// linking sendmmsg.o

// Xsendmmsg is defined at sendmmsg.c:7:5
func Xsendmmsg(tls TLS, _fd int32, _msgvec uintptr /* *Smmsghdr */, _vlen uint32, _flags uint32) (r int32) {
	var (
		_i int32
		_r int64
	)
	if _vlen <= uint32(1024) {
		goto _1
	}

	_vlen = uint32(1024)
_1:
	if _vlen != 0 {
		goto _2
	}

	return int32(0)

_2:
	_i = int32(0)
_3:
	if uint32(_i) >= _vlen {
		goto _5
	}

	_r = Xsendmsg(tls, _fd, _msgvec+64*uintptr(_i), int32(_flags))
	if _r >= int64(0) {
		goto _6
	}

	goto lerror

_6:
	*(*uint32)(unsafe.Pointer((_msgvec + 64*uintptr(_i)) + 56)) = uint32(_r)
	_i++
	goto _3

_5:
	goto lerror
lerror:
	if _i != 0 {
		return _i
	}

	return int32(-1)
}

type t663__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t663__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type s1mmsghdr = struct {
	Fmsg_hdr s2msghdr
	Fmsg_len uint32
}

type t28ssize_t = int64

type s2msghdr = struct {
	Fmsg_name       uintptr // *void
	Fmsg_namelen    uint32
	Fmsg_iov        uintptr // *Siovec
	Fmsg_iovlen     int32
	F__pad1         int32
	Fmsg_control    uintptr // *void
	Fmsg_controllen uint32
	F__pad2         uint32
	Fmsg_flags      int32
}

type t13socklen_t = uint32

type s4iovec = struct {
	Fiov_base uintptr // *void
	Fiov_len  uint64
}

type t157size_t = uint64

// linking sendmsg.o

func set699(p *uint32, v uint32) uint32 { *p = v; return v }

// Xsendmsg is defined at sendmsg.c:9:9
func Xsendmsg(tls TLS, _fd int32, _msg uintptr /* *Smsghdr */, _flags int32) (r int64) {
	esc := MustMalloc(1104)
	var (
		_h     = esc      // *Smsghdr
		_chbuf = esc + 64 // *[65]Scmsghdr
		_c     uintptr    // *Scmsghdr
	)
	defer Free(esc)
	if _msg == 0 {
		goto _1
	}

	*(*s3msghdr)(unsafe.Pointer(_h)) = *(*s3msghdr)(unsafe.Pointer(_msg))
	*(*int32)(unsafe.Pointer(_h + 28)) = int32(set699((*uint32)(unsafe.Pointer(_h+44)), uint32(0)))
	_msg = _h
	if *(*uint32)(unsafe.Pointer(_h + 40)) == 0 {
		goto _2
	}

	if *(*uint32)(unsafe.Pointer(_h + 40)) <= uint32(1024) {
		goto _3
	}

	*(*int32)(unsafe.Pointer(X__errno_location(tls))) = int32(12)
	return int64(-1)

_3:
	Xmemcpy(tls, _chbuf, *(*uintptr)(unsafe.Pointer(_h + 32)), uint64(*(*uint32)(unsafe.Pointer(_h + 40))))
	*(*uintptr)(unsafe.Pointer(_h + 32)) = _chbuf
	_c = func() uintptr {
		if uint64(*(*uint32)(unsafe.Pointer(_h + 40))) >= uint64(16) {
			return *(*uintptr)(unsafe.Pointer(_h + 32))
		}
		return null
	}()
_4:
	if _c == 0 {
		goto _6
	}

	*(*int32)(unsafe.Pointer(_c + 4)) = int32(0)
	_c = func() uintptr {
		if (uint64(*(*uint32)(unsafe.Pointer(_c))) < uint64(16)) || ((uint64(*(*uint32)(unsafe.Pointer(_c)))+uint64(8)-uint64(1))&uint64(18446744073709551608)+uint64(16) >= uint64(int64(*(*uintptr)(unsafe.Pointer(_h + 32))+uintptr(*(*uint32)(unsafe.Pointer(_h + 40)))-_c))) {
			return null
		}
		return _c + uintptr((uint64(*(*uint32)(unsafe.Pointer(_c)))+uint64(8)-uint64(1))&uint64(18446744073709551608))
	}()
	goto _4

_6:
_2:
_1:
	X__assert_fail(tls, ts+0 /* "TODO(ccgo)" */, ts+3280 /* "src/network/send..." */, int32(30), x700__func__)
	return r
}

type t664__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t664__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t29ssize_t = int64

type s3msghdr = struct {
	Fmsg_name       uintptr // *void
	Fmsg_namelen    uint32
	Fmsg_iov        uintptr // *Siovec
	Fmsg_iovlen     int32
	F__pad1         int32
	Fmsg_control    uintptr // *void
	Fmsg_controllen uint32
	F__pad2         uint32
	Fmsg_flags      int32
}

// x1__func__ [8]int8, escapes: true, sendmsg.c:10:1
var x700__func__ = ds + 43960

type Scmsghdr = struct {
	Fcmsg_len   uint32
	F__pad1     int32
	Fcmsg_level int32
	Fcmsg_type  int32
}

type t14socklen_t = uint32

type t158size_t = uint64

type s5iovec = struct {
	Fiov_base uintptr // *void
	Fiov_len  uint64
}

// linking sendto.o

// Xsendto is defined at sendto.c:6:9
func Xsendto(tls TLS, _fd int32, _buf uintptr /* *void */, _len uint64, _flags int32, _addr uintptr /* *Ssockaddr */, _alen uint32) (r int64) {
	X__assert_fail(tls, ts+0 /* "TODO(ccgo)" */, ts+3304 /* "src/network/send..." */, int32(8), x701__func__)
	return r
}

type t665__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t665__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t159size_t = uint64

type t15socklen_t = uint32

type t30ssize_t = int64

type s13sockaddr = struct {
	Fsa_family uint16
	Fsa_data   [14]int8
}

// x1__func__ [7]int8, escapes: true, sendto.c:7:1
var x701__func__ = ds + 43968

type t15sa_family_t = uint16

// linking serv.o

// Xendservent is defined at serv.c:3:6
func Xendservent(tls TLS) {
}

// Xsetservent is defined at serv.c:7:6
func Xsetservent(tls TLS, _stayopen int32) {
}

// Xgetservent is defined at serv.c:11:16
func Xgetservent(tls TLS) (r uintptr /* *Sservent */) {
	return null
}

type t666__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t666__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type s4servent = struct {
	Fs_name    uintptr // *int8
	Fs_aliases uintptr // **int8
	Fs_port    int32
	Fs_proto   uintptr // *int8
}

// linking setsockopt.o

// Xsetsockopt is defined at setsockopt.c:4:5
func Xsetsockopt(tls TLS, _fd int32, _level int32, _optname int32, _optval uintptr /* *void */, _optlen uint32) (r int32) {
	return int32(X__syscall_ret(tls, uint64(x12__syscall6(tls, int64(54), int64(_fd), int64(_level), int64(_optname), int64(_optval), int64(_optlen), int64(0)))))
}

type t667__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t667__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t16socklen_t = uint32

// x__syscall6 is defined at syscall_arch.h:63:22
func x12__syscall6(tls TLS, _n int64, _a1 int64, _a2 int64, _a3 int64, _a4 int64, _a5 int64, _a6 int64) (r int64) {
	return X__syscall(tls, _n, _a1, _a2, _a3, _a4, _a5, _a6)
}

// linking shutdown.o

// Xshutdown is defined at shutdown.c:4:5
func Xshutdown(tls TLS, _fd int32, _how int32) (r int32) {
	return int32(X__syscall_ret(tls, uint64(x13__syscall6(tls, int64(48), int64(_fd), int64(_how), int64(0), int64(0), int64(0), int64(0)))))
}

type t668__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t668__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// x__syscall6 is defined at syscall_arch.h:63:22
func x13__syscall6(tls TLS, _n int64, _a1 int64, _a2 int64, _a3 int64, _a4 int64, _a5 int64, _a6 int64) (r int64) {
	return X__syscall(tls, _n, _a1, _a2, _a3, _a4, _a5, _a6)
}

// linking sockatmark.o

// Xsockatmark is defined at sockatmark.c:4:5
func Xsockatmark(tls TLS, _s int32) (r int32) {
	esc := MustMalloc(4)
	var _ret = esc // *int32
	defer Free(esc)
	if Xioctl(tls, _s, int32(0x8905), _ret) >= int32(0) {
		goto _1
	}

	return int32(-1)

_1:
	return *(*int32)(unsafe.Pointer(_ret))
}

type t669__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t669__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// linking socket.o

// Xsocket is defined at socket.c:6:5
func Xsocket(tls TLS, _domain int32, _type int32, _protocol int32) (r int32) {
	var _s int32

	_s = int32(X__syscall_ret(tls, uint64(x14__syscall6(tls, int64(41), int64(_domain), int64(_type), int64(_protocol), int64(0), int64(0), int64(0)))))
	if _s >= int32(0) || *(*int32)(unsafe.Pointer(X__errno_location(tls))) != int32(22) && *(*int32)(unsafe.Pointer(X__errno_location(tls))) != int32(93) || _type&int32(526336) == 0 {
		goto _1
	}

	_s = int32(X__syscall_ret(tls, uint64(x14__syscall6(tls, int64(41), int64(_domain), int64(_type&int32(-526337)), int64(_protocol), int64(0), int64(0), int64(0)))))
	if _s >= int32(0) {
		goto _2
	}

	return _s

_2:
	if (_type & int32(02000000)) == 0 {
		goto _3
	}

	x32__syscall3(tls, int64(72), int64(_s), int64(2), int64(1))
_3:
	if (_type & int32(04000)) == 0 {
		goto _4
	}

	x32__syscall3(tls, int64(72), int64(_s), int64(4), int64(2048))
_4:
_1:
	return _s
}

type t670__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t670__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// x__syscall6 is defined at syscall_arch.h:63:22
func x14__syscall6(tls TLS, _n int64, _a1 int64, _a2 int64, _a3 int64, _a4 int64, _a5 int64, _a6 int64) (r int64) {
	return X__syscall(tls, _n, _a1, _a2, _a3, _a4, _a5, _a6)
}

// x__syscall3 is defined at syscall_arch.h:33:22
func x32__syscall3(tls TLS, _n int64, _a1 int64, _a2 int64, _a3 int64) (r int64) {
	return X__syscall(tls, _n, _a1, _a2, _a3, int64(0), int64(0), int64(0))
}

// linking socketpair.o

// Xsocketpair is defined at socketpair.c:6:5
func Xsocketpair(tls TLS, _domain int32, _type int32, _protocol int32, _fd uintptr /* [2]int32 */) (r int32) {
	var _r int32

	_r = int32(X__syscall_ret(tls, uint64(x15__syscall6(tls, int64(53), int64(_domain), int64(_type), int64(_protocol), int64(_fd), int64(0), int64(0)))))
	if _r >= int32(0) || *(*int32)(unsafe.Pointer(X__errno_location(tls))) != int32(22) && *(*int32)(unsafe.Pointer(X__errno_location(tls))) != int32(93) || _type&int32(526336) == 0 {
		goto _1
	}

	_r = int32(X__syscall_ret(tls, uint64(x15__syscall6(tls, int64(53), int64(_domain), int64(_type&int32(-526337)), int64(_protocol), int64(_fd), int64(0), int64(0)))))
	if _r >= int32(0) {
		goto _2
	}

	return _r

_2:
	if (_type & int32(02000000)) == 0 {
		goto _3
	}

	x33__syscall3(tls, int64(72), int64(*(*int32)(unsafe.Pointer(_fd))), int64(2), int64(1))
	x33__syscall3(tls, int64(72), int64(*(*int32)(unsafe.Pointer(_fd + 4))), int64(2), int64(1))
_3:
	if (_type & int32(04000)) == 0 {
		goto _4
	}

	x33__syscall3(tls, int64(72), int64(*(*int32)(unsafe.Pointer(_fd))), int64(4), int64(2048))
	x33__syscall3(tls, int64(72), int64(*(*int32)(unsafe.Pointer(_fd + 4))), int64(4), int64(2048))
_4:
_1:
	return _r
}

type t671__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t671__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// x__syscall6 is defined at syscall_arch.h:63:22
func x15__syscall6(tls TLS, _n int64, _a1 int64, _a2 int64, _a3 int64, _a4 int64, _a5 int64, _a6 int64) (r int64) {
	return X__syscall(tls, _n, _a1, _a2, _a3, _a4, _a5, _a6)
}

// x__syscall3 is defined at syscall_arch.h:33:22
func x33__syscall3(tls TLS, _n int64, _a1 int64, _a2 int64, _a3 int64) (r int64) {
	return X__syscall(tls, _n, _a1, _a2, _a3, int64(0), int64(0), int64(0))
}

// linking fgetgrent.o

// Xfgetgrent is defined at fgetgrent.c:4:14
func Xfgetgrent(tls TLS, _f uintptr /* *TFILE = S_IO_FILE */) (r uintptr /* *Sgroup */) {
	esc := MustMalloc(40)
	var (
		_res  = esc      // **Sgroup
		_size = esc + 16 // *Tsize_t = uint64
		_nmem = esc + 32 // *Tsize_t = uint64
	)
	defer Free(esc)
	*(*uint64)(unsafe.Pointer(_size)) = uint64(0)
	*(*uint64)(unsafe.Pointer(_nmem)) = uint64(0)
	X__getgrent_a(tls, _f, x702gr, x703line, _size, x704mem, _nmem, _res)
	return *(*uintptr)(unsafe.Pointer(_res))
}

type t672__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t672__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type Sgroup = struct {
	Fgr_name   uintptr // *int8
	Fgr_passwd uintptr // *int8
	Fgr_gid    uint32
	Fgr_mem    uintptr // **int8
}

// x1line *int8, escapes: true, fgetgrent.c:6:14
var x703line = bss + 3288

// x2mem **int8, escapes: true, fgetgrent.c:6:21
var x704mem = bss + 3296

// x3gr Sgroup, escapes: true, fgetgrent.c:7:22
var x702gr = bss + 3304

type t160size_t = uint64

type t11gid_t = uint32

type s9_IO_FILE struct{ uintptr }

// linking fgetpwent.o

// Xfgetpwent is defined at fgetpwent.c:4:15
func Xfgetpwent(tls TLS, _f uintptr /* *TFILE = S_IO_FILE */) (r uintptr /* *Spasswd */) {
	esc := MustMalloc(24)
	var (
		_size = esc      // *Tsize_t = uint64
		_res  = esc + 16 // **Spasswd
	)
	defer Free(esc)
	*(*uint64)(unsafe.Pointer(_size)) = uint64(0)
	X__getpwent_a(tls, _f, x705pw, x706line, _size, _res)
	return *(*uintptr)(unsafe.Pointer(_res))
}

type t673__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t673__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type s1passwd = struct {
	Fpw_name   uintptr // *int8
	Fpw_passwd uintptr // *int8
	Fpw_uid    uint32
	Fpw_gid    uint32
	Fpw_gecos  uintptr // *int8
	Fpw_dir    uintptr // *int8
	Fpw_shell  uintptr // *int8
}

// x1line *int8, escapes: true, fgetpwent.c:6:14
var x706line = bss + 3336

// x2pw Spasswd, escapes: true, fgetpwent.c:7:23
var x705pw = bss + 3344

type t161size_t = uint64

type t11uid_t = uint32

type t12gid_t = uint32

type s10_IO_FILE struct{ uintptr }

// linking fgetspent.o

// Xfgetspent is defined at fgetspent.c:4:13
func Xfgetspent(tls TLS, _f uintptr /* *TFILE = S_IO_FILE */) (r uintptr /* *Sspwd */) {
	esc := MustMalloc(20)
	var (
		_size = esc      // *Tsize_t = uint64
		_res  uintptr    // *Sspwd
		_cs   = esc + 16 // *int32
	)
	defer Free(esc)
	*(*uint64)(unsafe.Pointer(_size)) = uint64(0)
	_res = 0
	Xpthread_setcancelstate(tls, int32(1), _cs)
	if Xgetline(tls, x707line, _size, _f) < int64(0) || X__parsespent(tls, *(*uintptr)(unsafe.Pointer(x707line)), x708sp) < int32(0) {
		goto _1
	}

	_res = x708sp
_1:
	Xpthread_setcancelstate(tls, *(*int32)(unsafe.Pointer(_cs)), null)
	return _res
}

type t674__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t674__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type Sspwd = struct {
	Fsp_namp   uintptr // *int8
	Fsp_pwdp   uintptr // *int8
	Fsp_lstchg int64
	Fsp_min    int64
	Fsp_max    int64
	Fsp_warn   int64
	Fsp_inact  int64
	Fsp_expire int64
	Fsp_flag   uint64
}

// x1line *int8, escapes: true, fgetspent.c:6:14
var x707line = bss + 3392

// x2sp Sspwd, escapes: true, fgetspent.c:7:21
var x708sp = bss + 3400

type t162size_t = uint64

type t31ssize_t = int64

type s11_IO_FILE struct{ uintptr }

// linking getgr_a.o

func set709(p *int32, v int32) int32 { *p = v; return v }

func preinc710(p *int32) int32 { *p += 1; return *p }

// X__getgr_a is defined at getgr_a.c:20:5
func X__getgr_a(tls TLS, _name uintptr /* *int8 */, _gid uint32, _gr uintptr /* *Sgroup */, _buf uintptr /* **int8 */, _size uintptr /* *Tsize_t = uint64 */, _mem uintptr /* ***int8 */, _nmem uintptr /* *Tsize_t = uint64 */, _res uintptr /* **Sgroup */) (r int32) {
	esc := MustMalloc(84)
	var (
		_f          uintptr // *TFILE = S_IO_FILE
		_rv         int32
		_cs         = esc // *int32
		_req        int32
		_i          int32
		_key        uintptr    // *int8
		_groupbuf   = esc + 16 // *[6]int32
		_len        uint64
		_grlist_len uint64
		_gidbuf     = esc + 48 // *[11]int8
		_swap       = esc + 64 // *int32
		_ptr        uintptr    // *int8
		_name_len   = esc + 80 // *Tuint32_t = uint32
		_tmp        uintptr    // *int8
		_1tmp       uintptr    // **int8
	)
	defer Free(esc)
	_rv = int32(0)
	*(*uintptr)(unsafe.Pointer(_res)) = null
	Xpthread_setcancelstate(tls, int32(1), _cs)
	_f = Xfopen(tls, ts+3328 /* "/etc/group" */, ts+1456 /* "rbe" */)
	if _f != 0 {
		goto _1
	}

	_rv = *(*int32)(unsafe.Pointer(X__errno_location(tls)))
	goto ldone

_1:
_2:
	if set709(&_rv, X__getgrent_a(tls, _f, _gr, _buf, _size, _mem, _nmem, _res)) != 0 || *(*uintptr)(unsafe.Pointer(_res)) == 0 {
		goto _3
	}

	if (_name == 0 || Xstrcmp(tls, _name, *(*uintptr)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_res))))) != 0) && (_name != 0 || *(*uint32)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_res)) + 16)) != _gid) {
		goto _4
	}

	goto _3

_4:
	goto _2

_3:
	Xfclose(tls, _f)
	if *(*uintptr)(unsafe.Pointer(_res)) != 0 || _rv != int32(0) && _rv != int32(2) && _rv != int32(20) {
		goto _5
	}

	_req = func() int32 {
		if _name != 0 {
			return int32(2)
		}
		return int32(3)
	}()
	Copy(_groupbuf, ts+3340 /* "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00..." */, 24)
	_len = uint64(0)
	_grlist_len = uint64(0)
	Copy(_gidbuf, ts+3368 /* "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00" */, 11)
	*(*int32)(unsafe.Pointer(_swap)) = int32(0)
	if _name == 0 {
		goto _6
	}

	_key = _name
	goto _7

_6:
	if _gid >= uint32(0) && _gid <= uint32(0xffffffff) {
		goto _8
	}

	_rv = int32(0)
	goto ldone

_8:
	_key = x1itoa(tls, _gidbuf, _gid)
_7:
	_f = X__nscd_query(tls, _req, _key, _groupbuf, uint64(24), _swap)
	if _f != 0 {
		goto _9
	}

	_rv = *(*int32)(unsafe.Pointer(X__errno_location(tls)))
	goto ldone

_9:
	if *(*int32)(unsafe.Pointer(_groupbuf + 4)) != 0 {
		goto _10
	}

	_rv = int32(0)
	goto lcleanup_f

_10:
	if *(*int32)(unsafe.Pointer(_groupbuf + 8)) != 0 && *(*int32)(unsafe.Pointer(_groupbuf + 12)) != 0 {
		goto _11
	}

	_rv = int32(5)
	goto lcleanup_f

_11:
	if uint64(*(*int32)(unsafe.Pointer(_groupbuf + 8))) <= uint64(0xffffffffffffffff)-uint64(*(*int32)(unsafe.Pointer(_groupbuf + 12))) {
		goto _12
	}

	_rv = int32(12)
	goto lcleanup_f

_12:
	_len = uint64(*(*int32)(unsafe.Pointer(_groupbuf + 8)) + *(*int32)(unsafe.Pointer(_groupbuf + 12)))
	_i = int32(0)
_13:
	if _i >= *(*int32)(unsafe.Pointer(_groupbuf + 20)) {
		goto _15
	}

	if Xfread(tls, _name_len, uint64(4), uint64(1), _f) >= uint64(1) {
		goto _16
	}

	_rv = func() int32 {
		if Xferror(tls, _f) != 0 {
			return *(*int32)(unsafe.Pointer(X__errno_location(tls)))
		}
		return int32(5)
	}()
	goto lcleanup_f

_16:
	if *(*int32)(unsafe.Pointer(_swap)) == 0 {
		goto _17
	}

	*(*uint32)(unsafe.Pointer(_name_len)) = x3__bswap_32(tls, *(*uint32)(unsafe.Pointer(_name_len)))
_17:
	if uint64(*(*uint32)(unsafe.Pointer(_name_len))) <= uint64(0xffffffffffffffff)-_grlist_len && uint64(*(*uint32)(unsafe.Pointer(_name_len))) <= uint64(0xffffffffffffffff)-_len {
		goto _18
	}

	_rv = int32(12)
	goto lcleanup_f

_18:
	_len = _len + uint64(*(*uint32)(unsafe.Pointer(_name_len)))
	_grlist_len = _grlist_len + uint64(*(*uint32)(unsafe.Pointer(_name_len)))
	_i++
	goto _13

_15:
	if _len <= *(*uint64)(unsafe.Pointer(_size)) && *(*uintptr)(unsafe.Pointer(_buf)) != 0 {
		goto _19
	}

	_tmp = Xrealloc(tls, *(*uintptr)(unsafe.Pointer(_buf)), _len)
	if _tmp != 0 {
		goto _20
	}

	_rv = *(*int32)(unsafe.Pointer(X__errno_location(tls)))
	goto lcleanup_f

_20:
	*(*uintptr)(unsafe.Pointer(_buf)) = _tmp
	*(*uint64)(unsafe.Pointer(_size)) = _len
_19:
	if Xfread(tls, *(*uintptr)(unsafe.Pointer(_buf)), _len, uint64(1), _f) != 0 {
		goto _21
	}

	_rv = func() int32 {
		if Xferror(tls, _f) != 0 {
			return *(*int32)(unsafe.Pointer(X__errno_location(tls)))
		}
		return int32(5)
	}()
	goto lcleanup_f

_21:
	if uint64(*(*int32)(unsafe.Pointer(_groupbuf + 20))+int32(1)) <= *(*uint64)(unsafe.Pointer(_nmem)) {
		goto _22
	}

	if uint64(*(*int32)(unsafe.Pointer(_groupbuf + 20))+int32(1)) <= uint64(2305843009213693951) {
		goto _23
	}

	_rv = int32(12)
	goto lcleanup_f

_23:
	_1tmp = Xrealloc(tls, *(*uintptr)(unsafe.Pointer(_mem)), uint64(*(*int32)(unsafe.Pointer(_groupbuf + 20))+int32(1))*uint64(8))
	if _1tmp != 0 {
		goto _24
	}

	_rv = *(*int32)(unsafe.Pointer(X__errno_location(tls)))
	goto lcleanup_f

_24:
	*(*uintptr)(unsafe.Pointer(_mem)) = _1tmp
	*(*uint64)(unsafe.Pointer(_nmem)) = uint64(*(*int32)(unsafe.Pointer(_groupbuf + 20)) + int32(1))
_22:
	if *(*int32)(unsafe.Pointer(_groupbuf + 20)) == 0 {
		goto _25
	}

	*(*uintptr)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_mem)))) = (*(*uintptr)(unsafe.Pointer(_buf)) + uintptr(*(*int32)(unsafe.Pointer(_groupbuf + 8)))) + uintptr(*(*int32)(unsafe.Pointer(_groupbuf + 12)))
	_ptr = *(*uintptr)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_mem))))
	_i = int32(0)
_27:
	if _ptr == (*(*uintptr)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_mem)))) + uintptr(_grlist_len)) {
		goto _29
	}

	if *(*int8)(unsafe.Pointer(_ptr)) != 0 {
		goto _30
	}

	*(*uintptr)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_mem)) + 8*uintptr(preinc710(&_i)))) = _ptr + uintptr(1)
_30:
	_ptr++
	goto _27

_29:
	*(*uintptr)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_mem)) + 8*uintptr(_i))) = null
	if _i == *(*int32)(unsafe.Pointer(_groupbuf + 20)) {
		goto _31
	}

	_rv = int32(5)
	goto lcleanup_f

_31:
	goto _26

_25:
	*(*uintptr)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_mem)))) = null
_26:
	*(*uintptr)(unsafe.Pointer(_gr)) = *(*uintptr)(unsafe.Pointer(_buf))
	*(*uintptr)(unsafe.Pointer(_gr + 8)) = *(*uintptr)(unsafe.Pointer(_gr)) + uintptr(*(*int32)(unsafe.Pointer(_groupbuf + 8)))
	*(*uint32)(unsafe.Pointer(_gr + 16)) = uint32(*(*int32)(unsafe.Pointer(_groupbuf + 16)))
	*(*uintptr)(unsafe.Pointer(_gr + 24)) = *(*uintptr)(unsafe.Pointer(_mem))
	if *(*int8)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_gr + 8)) - 1)) == 0 && *(*int8)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_gr + 8)) + uintptr(*(*int32)(unsafe.Pointer(_groupbuf + 12))-int32(1)))) == 0 {
		goto _32
	}

	_rv = int32(5)
	goto lcleanup_f

_32:
	if (_name == 0 || Xstrcmp(tls, _name, *(*uintptr)(unsafe.Pointer(_gr))) == 0) && (_name != 0 || _gid == *(*uint32)(unsafe.Pointer(_gr + 16))) {
		goto _33
	}

	_rv = int32(5)
	goto lcleanup_f

_33:
	*(*uintptr)(unsafe.Pointer(_res)) = _gr
	goto lcleanup_f
lcleanup_f:
	Xfclose(tls, _f)
	goto ldone

_5:
	goto ldone
ldone:
	Xpthread_setcancelstate(tls, *(*int32)(unsafe.Pointer(_cs)), null)
	if _rv == 0 {
		goto _34
	}

	*(*int32)(unsafe.Pointer(X__errno_location(tls))) = _rv
_34:
	return _rv
}

type t675__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t675__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t13gid_t = uint32

type s1group = struct {
	Fgr_name   uintptr // *int8
	Fgr_passwd uintptr // *int8
	Fgr_gid    uint32
	Fgr_mem    uintptr // **int8
}

type t18int32_t = int32

type t163size_t = uint64

func preinc711(p *uintptr) uintptr { *p += 18446744073709551615; return *p }

// xitoa is defined at getgr_a.c:8:13
func x1itoa(tls TLS, _p uintptr /* *int8 */, _x uint32) (r uintptr /* *int8 */) {
	_p += uintptr(11)
	*(*int8)(unsafe.Pointer(preinc711(&_p))) = int8(0)
_1:
	*(*int8)(unsafe.Pointer(preinc711(&_p))) = int8(uint32('0') + _x%uint32(10))
	_x = _x / uint32(10)
	if _x != 0 {
		goto _1
	}

	return _p
}

type t125uint32_t = uint32

// x__bswap_32 is defined at byteswap.h:12:26
func x3__bswap_32(tls TLS, ___x uint32) (r uint32) {
	return ___x>>(uint(24)%32) | ___x>>(uint(8)%32)&uint32(0xff00) | ___x<<(uint(8)%32)&uint32(0xff0000) | ___x<<(uint(24)%32)
}

type s12_IO_FILE struct{ uintptr }

// linking getgr_r.o

// Xgetgrnam_r is defined at getgr_r.c:41:5
func Xgetgrnam_r(tls TLS, _name uintptr /* *int8 */, _gr uintptr /* *Sgroup */, _buf uintptr /* *int8 */, _size uint64, _res uintptr /* **Sgroup */) (r int32) {
	return xgetgr_r(tls, _name, uint32(0), _gr, _buf, _size, _res)
}

// Xgetgrgid_r is defined at getgr_r.c:46:5
func Xgetgrgid_r(tls TLS, _gid uint32, _gr uintptr /* *Sgroup */, _buf uintptr /* *int8 */, _size uint64, _res uintptr /* **Sgroup */) (r int32) {
	return xgetgr_r(tls, null, _gid, _gr, _buf, _size, _res)
}

type t676__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t676__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t164size_t = uint64

type s2group = struct {
	Fgr_name   uintptr // *int8
	Fgr_passwd uintptr // *int8
	Fgr_gid    uint32
	Fgr_mem    uintptr // **int8
}

// xgetgr_r is defined at getgr_r.c:6:12
func xgetgr_r(tls TLS, _name uintptr /* *int8 */, _gid uint32, _gr uintptr /* *Sgroup */, _buf uintptr /* *int8 */, _size uint64, _res uintptr /* **Sgroup */) (r int32) {
	esc := MustMalloc(68)
	var (
		_line = esc      // **int8
		_len  = esc + 16 // *Tsize_t = uint64
		_mem  = esc + 32 // ***int8
		_nmem = esc + 48 // *Tsize_t = uint64
		_rv   int32
		_i    uint64
		_cs   = esc + 64 // *int32
	)
	defer Free(esc)
	*(*uintptr)(unsafe.Pointer(_line)) = 0
	*(*uint64)(unsafe.Pointer(_len)) = uint64(0)
	*(*uintptr)(unsafe.Pointer(_mem)) = 0
	*(*uint64)(unsafe.Pointer(_nmem)) = uint64(0)
	_rv = int32(0)
	Xpthread_setcancelstate(tls, int32(1), _cs)
	_rv = X__getgr_a(tls, _name, _gid, _gr, _line, _len, _mem, _nmem, _res)
	if *(*uintptr)(unsafe.Pointer(_res)) == 0 || _size >= *(*uint64)(unsafe.Pointer(_len))+(*(*uint64)(unsafe.Pointer(_nmem))+uint64(1))*uint64(8)+uint64(32) {
		goto _1
	}

	*(*uintptr)(unsafe.Pointer(_res)) = null
	_rv = int32(34)
_1:
	if *(*uintptr)(unsafe.Pointer(_res)) == 0 {
		goto _2
	}

	_buf += uintptr((uint64(16) - uint64(_buf)) % uint64(16))
	*(*uintptr)(unsafe.Pointer(_gr + 24)) = _buf
	_buf += uintptr((*(*uint64)(unsafe.Pointer(_nmem)) + uint64(1)) * uint64(8))
	Xmemcpy(tls, _buf, *(*uintptr)(unsafe.Pointer(_line)), *(*uint64)(unsafe.Pointer(_len)))
	*(*uintptr)(unsafe.Pointer(_gr)) = uintptr(int64(*(*uintptr)(unsafe.Pointer(_gr))-*(*uintptr)(unsafe.Pointer(_line)))) + _buf
	*(*uintptr)(unsafe.Pointer(_gr + 8)) = uintptr(int64(*(*uintptr)(unsafe.Pointer(_gr + 8))-*(*uintptr)(unsafe.Pointer(_line)))) + _buf
	_i = uint64(0)
_3:
	if *(*uintptr)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_mem)) + 8*uintptr(_i))) == 0 {
		goto _5
	}

	*(*uintptr)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_gr + 24)) + 8*uintptr(_i))) = uintptr(int64(*(*uintptr)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_mem)) + 8*uintptr(_i)))-*(*uintptr)(unsafe.Pointer(_line)))) + _buf
	_i++
	goto _3

_5:
	*(*uintptr)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_gr + 24)) + 8*uintptr(_i))) = null
_2:
	Xfree(tls, *(*uintptr)(unsafe.Pointer(_mem)))
	Xfree(tls, *(*uintptr)(unsafe.Pointer(_line)))
	Xpthread_setcancelstate(tls, *(*int32)(unsafe.Pointer(_cs)), null)
	if _rv == 0 {
		goto _6
	}

	*(*int32)(unsafe.Pointer(X__errno_location(tls))) = _rv
_6:
	return _rv
}

type t14gid_t = uint32

type t31uintptr_t = uint64

// linking getgrent.o

// Xsetgrent is defined at getgrent.c:7:6
func Xsetgrent(tls TLS) {
	if x1f == 0 {
		goto _1
	}

	Xfclose(tls, x1f)
_1:
	x1f = null
}

// Xgetgrent is defined at getgrent.c:15:14
func Xgetgrent(tls TLS) (r uintptr /* *Sgroup */) {
	esc := MustMalloc(40)
	var (
		_res  = esc      // **Sgroup
		_size = esc + 16 // *Tsize_t = uint64
		_nmem = esc + 32 // *Tsize_t = uint64
	)
	defer Free(esc)
	*(*uint64)(unsafe.Pointer(_size)) = uint64(0)
	*(*uint64)(unsafe.Pointer(_nmem)) = uint64(0)
	if x1f != 0 {
		goto _1
	}

	x1f = Xfopen(tls, ts+3328 /* "/etc/group" */, ts+1456 /* "rbe" */)
_1:
	if x1f != 0 {
		goto _2
	}

	return null

_2:
	X__getgrent_a(tls, x1f, xgr, x1line, _size, xmem, _nmem, _res)
	return *(*uintptr)(unsafe.Pointer(_res))
}

// Xgetgrgid is defined at getgrent.c:25:14
func Xgetgrgid(tls TLS, _gid uint32) (r uintptr /* *Sgroup */) {
	esc := MustMalloc(40)
	var (
		_res  = esc      // **Sgroup
		_size = esc + 16 // *Tsize_t = uint64
		_nmem = esc + 32 // *Tsize_t = uint64
	)
	defer Free(esc)
	*(*uint64)(unsafe.Pointer(_size)) = uint64(0)
	*(*uint64)(unsafe.Pointer(_nmem)) = uint64(0)
	X__getgr_a(tls, null, _gid, xgr, x1line, _size, xmem, _nmem, _res)
	return *(*uintptr)(unsafe.Pointer(_res))
}

// Xgetgrnam is defined at getgrent.c:33:14
func Xgetgrnam(tls TLS, _name uintptr /* *int8 */) (r uintptr /* *Sgroup */) {
	esc := MustMalloc(40)
	var (
		_res  = esc      // **Sgroup
		_size = esc + 16 // *Tsize_t = uint64
		_nmem = esc + 32 // *Tsize_t = uint64
	)
	defer Free(esc)
	*(*uint64)(unsafe.Pointer(_size)) = uint64(0)
	*(*uint64)(unsafe.Pointer(_nmem)) = uint64(0)
	X__getgr_a(tls, _name, uint32(0), xgr, x1line, _size, xmem, _nmem, _res)
	return *(*uintptr)(unsafe.Pointer(_res))
}

type t677__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t677__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// xf *TFILE = S_IO_FILE, escapes: false, getgrent.c:3:13
var x1f uintptr

type s3group = struct {
	Fgr_name   uintptr // *int8
	Fgr_passwd uintptr // *int8
	Fgr_gid    uint32
	Fgr_mem    uintptr // **int8
}

type t165size_t = uint64

// xgr Sgroup, escapes: true, getgrent.c:5:21
var xgr = bss + 3472

// xline *int8, escapes: true, getgrent.c:4:13
var x1line = bss + 3504

// xmem **int8, escapes: true, getgrent.c:4:20
var xmem = bss + 3512

type t15gid_t = uint32

type s13_IO_FILE struct{ uintptr }

// linking getgrent_a.o

func set712(p *int64, v int64) int64 { *p = v; return v }

func postinc713(p *uintptr) uintptr { r := *p; *p += 1; return r }

func set714(p *uintptr, v uintptr) uintptr { *p = v; return v }

func preinc715(p *uint64) uint64 { *p += 1; return *p }

// X__getgrent_a is defined at getgrent_a.c:11:5
func X__getgrent_a(tls TLS, _f uintptr /* *TFILE = S_IO_FILE */, _gr uintptr /* *Sgroup */, _line uintptr /* **int8 */, _size uintptr /* *Tsize_t = uint64 */, _mem uintptr /* ***int8 */, _nmem uintptr /* *Tsize_t = uint64 */, _res uintptr /* **Sgroup */) (r int32) {
	esc := MustMalloc(20)
	var (
		_l    int64
		_s    = esc   // **int8
		_mems uintptr // *int8
		_i    uint64
		_rv   int32
		_cs   = esc + 16 // *int32
	)
	defer Free(esc)
	_rv = int32(0)
	Xpthread_setcancelstate(tls, int32(1), _cs)

_1:
	if set712(&_l, Xgetline(tls, _line, _size, _f)) >= int64(0) {
		goto _4
	}

	_rv = func() int32 {
		if Xferror(tls, _f) != 0 {
			return *(*int32)(unsafe.Pointer(X__errno_location(tls)))
		}
		return int32(0)
	}()
	Xfree(tls, *(*uintptr)(unsafe.Pointer(_line)))
	*(*uintptr)(unsafe.Pointer(_line)) = null
	_gr = null
	goto lend

_4:
	*(*int8)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_line)) + uintptr(_l-int64(1)))) = int8(0)
	*(*uintptr)(unsafe.Pointer(_s)) = *(*uintptr)(unsafe.Pointer(_line))
	*(*uintptr)(unsafe.Pointer(_gr)) = postinc713((*uintptr)(unsafe.Pointer(_s)))
	if set714((*uintptr)(unsafe.Pointer(_s)), Xstrchr(tls, *(*uintptr)(unsafe.Pointer(_s)), int32(':'))) != 0 {
		goto _5
	}

	goto _2

_5:
	*(*int8)(unsafe.Pointer(postinc713((*uintptr)(unsafe.Pointer(_s))))) = int8(0)
	*(*uintptr)(unsafe.Pointer(_gr + 8)) = *(*uintptr)(unsafe.Pointer(_s))
	if set714((*uintptr)(unsafe.Pointer(_s)), Xstrchr(tls, *(*uintptr)(unsafe.Pointer(_s)), int32(':'))) != 0 {
		goto _6
	}

	goto _2

_6:
	*(*int8)(unsafe.Pointer(postinc713((*uintptr)(unsafe.Pointer(_s))))) = int8(0)
	*(*uint32)(unsafe.Pointer(_gr + 16)) = xatou(tls, _s)
	if int32(*(*int8)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_s))))) == int32(':') {
		goto _7
	}

	goto _2

_7:
	*(*int8)(unsafe.Pointer(postinc713((*uintptr)(unsafe.Pointer(_s))))) = int8(0)
	_mems = *(*uintptr)(unsafe.Pointer(_s))
	goto _3

_2:
	goto _1

_3:
	*(*uint64)(unsafe.Pointer(_nmem)) = uint64(bool2int(*(*int8)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_s)))) != 0))
_8:
	if *(*int8)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_s)))) == 0 {
		goto _10
	}

	if int32(*(*int8)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_s))))) != int32(',') {
		goto _11
	}

	*(*uint64)(unsafe.Pointer(_nmem))++
_11:
	*(*uintptr)(unsafe.Pointer(_s))++
	goto _8

_10:
	Xfree(tls, *(*uintptr)(unsafe.Pointer(_mem)))
	*(*uintptr)(unsafe.Pointer(_mem)) = Xcalloc(tls, uint64(8), *(*uint64)(unsafe.Pointer(_nmem))+uint64(1))
	if *(*uintptr)(unsafe.Pointer(_mem)) != 0 {
		goto _12
	}

	_rv = *(*int32)(unsafe.Pointer(X__errno_location(tls)))
	Xfree(tls, *(*uintptr)(unsafe.Pointer(_line)))
	*(*uintptr)(unsafe.Pointer(_line)) = null
	_gr = null
	goto lend

_12:
	if *(*int8)(unsafe.Pointer(_mems)) == 0 {
		goto _13
	}

	*(*uintptr)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_mem)))) = _mems
	*(*uintptr)(unsafe.Pointer(_s)) = _mems
	_i = uint64(0)
_15:
	if *(*int8)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_s)))) == 0 {
		goto _17
	}

	if int32(*(*int8)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_s))))) != int32(',') {
		goto _18
	}

	*(*int8)(unsafe.Pointer(postinc713((*uintptr)(unsafe.Pointer(_s))))) = int8(0)
	*(*uintptr)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_mem)) + 8*uintptr(preinc715(&_i)))) = *(*uintptr)(unsafe.Pointer(_s))
_18:
	*(*uintptr)(unsafe.Pointer(_s))++
	goto _15

_17:
	*(*uintptr)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_mem)) + 8*uintptr(preinc715(&_i)))) = null
	goto _14

_13:
	*(*uintptr)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_mem)))) = null
_14:
	*(*uintptr)(unsafe.Pointer(_gr + 24)) = *(*uintptr)(unsafe.Pointer(_mem))
	goto lend
lend:
	Xpthread_setcancelstate(tls, *(*int32)(unsafe.Pointer(_cs)), null)
	*(*uintptr)(unsafe.Pointer(_res)) = _gr
	if _rv == 0 {
		goto _19
	}

	*(*int32)(unsafe.Pointer(X__errno_location(tls))) = _rv
_19:
	return _rv
}

type t678__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t678__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type s4group = struct {
	Fgr_name   uintptr // *int8
	Fgr_passwd uintptr // *int8
	Fgr_gid    uint32
	Fgr_mem    uintptr // **int8
}

type t32ssize_t = int64

type t166size_t = uint64

type t16gid_t = uint32

// xatou is defined at getgrent_a.c:4:17
func xatou(tls TLS, _s uintptr /* **int8 */) (r uint32) {
	var _x uint32

	_x = uint32(0)
_1:
	if uint32(int32(**(**int8)(unsafe.Pointer(_s)))-int32('0')) >= uint32(10) {
		goto _3
	}

	_x = uint32(10)*_x + uint32(int32(**(**int8)(unsafe.Pointer(_s)))-int32('0'))
	*(*uintptr)(unsafe.Pointer(_s))++
	goto _1

_3:
	return _x
}

type s14_IO_FILE struct{ uintptr }

// linking getgrouplist.o

func postinc716(p *uintptr) uintptr { r := *p; *p += 4; return r }

func set717(p *int32, v int32) int32 { *p = v; return v }

func preinc718(p *int64) int64 { *p += 1; return *p }

// Xgetgrouplist is defined at getgrouplist.c:12:5
func Xgetgrouplist(tls TLS, _user uintptr /* *int8 */, _gid uint32, _groups uintptr /* *Tgid_t = uint32 */, _ngroups uintptr /* *int32 */) (r int32) {
	esc := MustMalloc(136)
	var (
		_rv      int32
		_nlim    int32
		_ret     int32
		_i       int64
		_n       int64
		_gr      = esc       // *Sgroup
		_res     = esc + 32  // **Sgroup
		_f       uintptr     // *TFILE = S_IO_FILE
		_swap    = esc + 48  // *int32
		_resp    = esc + 64  // *[3]int32
		_nscdbuf uintptr     // *Tuint32_t = uint32
		_buf     = esc + 80  // **int8
		_mem     = esc + 96  // ***int8
		_nmem    = esc + 112 // *Tsize_t = uint64
		_size    = esc + 128 // *Tsize_t = uint64
	)
	defer Free(esc)
	_ret = int32(-1)
	_n = int64(1)
	*(*int32)(unsafe.Pointer(_swap)) = int32(0)
	_nscdbuf = 0
	*(*uintptr)(unsafe.Pointer(_buf)) = 0
	*(*uintptr)(unsafe.Pointer(_mem)) = 0
	*(*uint64)(unsafe.Pointer(_nmem)) = uint64(0)
	_nlim = *(*int32)(unsafe.Pointer(_ngroups))
	if _nlim < int32(1) {
		goto _1
	}

	*(*uint32)(unsafe.Pointer(postinc716(&_groups))) = _gid
_1:
	_f = X__nscd_query(tls, int32(15), _user, _resp, uint64(12), _swap)
	if _f != 0 {
		goto _2
	}

	goto lcleanup

_2:
	if *(*int32)(unsafe.Pointer(_resp + 4)) == 0 {
		goto _3
	}

	_nscdbuf = Xcalloc(tls, uint64(*(*int32)(unsafe.Pointer(_resp + 8))), uint64(4))
	if _nscdbuf != 0 {
		goto _4
	}

	goto lcleanup

_4:
	if Xfread(tls, _nscdbuf, uint64(4)*uint64(*(*int32)(unsafe.Pointer(_resp + 8))), uint64(1), _f) != 0 {
		goto _5
	}

	if Xferror(tls, _f) != 0 {
		goto _6
	}

	*(*int32)(unsafe.Pointer(X__errno_location(tls))) = int32(5)
_6:
	goto lcleanup

_5:
	if *(*int32)(unsafe.Pointer(_swap)) == 0 {
		goto _7
	}

	_i = int64(0)
_8:
	if _i >= int64(*(*int32)(unsafe.Pointer(_resp + 8))) {
		goto _10
	}

	*(*uint32)(unsafe.Pointer(_nscdbuf + 4*uintptr(_i))) = x4__bswap_32(tls, *(*uint32)(unsafe.Pointer(_nscdbuf + 4*uintptr(_i))))
	_i++
	goto _8

_10:
_7:
_3:
	Xfclose(tls, _f)
	_f = Xfopen(tls, ts+3328 /* "/etc/group" */, ts+1456 /* "rbe" */)
	if _f != 0 || *(*int32)(unsafe.Pointer(X__errno_location(tls))) == int32(2) || *(*int32)(unsafe.Pointer(X__errno_location(tls))) == int32(20) {
		goto _11
	}

	goto lcleanup

_11:
	if _f == 0 {
		goto _12
	}

_13:
	if set717(&_rv, X__getgrent_a(tls, _f, _gr, _buf, _size, _mem, _nmem, _res)) != 0 || *(*uintptr)(unsafe.Pointer(_res)) == 0 {
		goto _14
	}

	if _nscdbuf == 0 {
		goto _15
	}

	_i = int64(0)
_16:
	if _i >= int64(*(*int32)(unsafe.Pointer(_resp + 8))) {
		goto _18
	}

	if *(*uint32)(unsafe.Pointer(_nscdbuf + 4*uintptr(_i))) != *(*uint32)(unsafe.Pointer(_gr + 16)) {
		goto _19
	}

	*(*uint32)(unsafe.Pointer(_nscdbuf + 4*uintptr(_i))) = _gid
_19:
	_i++
	goto _16

_18:
_15:
	_i = int64(0)
_20:
	if *(*uintptr)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_gr + 24)) + 8*uintptr(_i))) == 0 || Xstrcmp(tls, _user, *(*uintptr)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_gr + 24)) + 8*uintptr(_i)))) == 0 {
		goto _22
	}

	_i++
	goto _20

_22:
	if *(*uintptr)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_gr + 24)) + 8*uintptr(_i))) != 0 {
		goto _23
	}

	goto _13

_23:
	if preinc718(&_n) > int64(_nlim) {
		goto _24
	}

	*(*uint32)(unsafe.Pointer(postinc716(&_groups))) = *(*uint32)(unsafe.Pointer(_gr + 16))
_24:
	goto _13

_14:
	if _rv == 0 {
		goto _25
	}

	*(*int32)(unsafe.Pointer(X__errno_location(tls))) = _rv
	goto lcleanup

_25:
_12:
	if _nscdbuf == 0 {
		goto _26
	}

	_i = int64(0)
_27:
	if _i >= int64(*(*int32)(unsafe.Pointer(_resp + 8))) {
		goto _29
	}

	if *(*uint32)(unsafe.Pointer(_nscdbuf + 4*uintptr(_i))) == _gid {
		goto _30
	}

	if preinc718(&_n) > int64(_nlim) {
		goto _31
	}

	*(*uint32)(unsafe.Pointer(postinc716(&_groups))) = *(*uint32)(unsafe.Pointer(_nscdbuf + 4*uintptr(_i)))
_31:
_30:
	_i++
	goto _27

_29:
_26:
	_ret = int32(func() int64 {
		if _n > int64(_nlim) {
			return int64(-1)
		}
		return _n
	}())
	*(*int32)(unsafe.Pointer(_ngroups)) = int32(_n)
	goto lcleanup
lcleanup:
	if _f == 0 {
		goto _32
	}

	Xfclose(tls, _f)
_32:
	Xfree(tls, _nscdbuf)
	Xfree(tls, *(*uintptr)(unsafe.Pointer(_buf)))
	Xfree(tls, *(*uintptr)(unsafe.Pointer(_mem)))
	return _ret
}

type t679__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t679__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t17gid_t = uint32

type t33ssize_t = int64

type s5group = struct {
	Fgr_name   uintptr // *int8
	Fgr_passwd uintptr // *int8
	Fgr_gid    uint32
	Fgr_mem    uintptr // **int8
}

type t19int32_t = int32

type t167size_t = uint64

type t126uint32_t = uint32

// x__bswap_32 is defined at byteswap.h:12:26
func x4__bswap_32(tls TLS, ___x uint32) (r uint32) {
	return ___x>>(uint(24)%32) | ___x>>(uint(8)%32)&uint32(0xff00) | ___x<<(uint(8)%32)&uint32(0xff0000) | ___x<<(uint(24)%32)
}

type s15_IO_FILE struct{ uintptr }

// linking getpw_a.o

func set719(p *int32, v int32) int32 { *p = v; return v }

// X__getpw_a is defined at getpw_a.c:21:5
func X__getpw_a(tls TLS, _name uintptr /* *int8 */, _uid uint32, _pw uintptr /* *Spasswd */, _buf uintptr /* **int8 */, _size uintptr /* *Tsize_t = uint64 */, _res uintptr /* **Spasswd */) (r int32) {
	esc := MustMalloc(75)
	var (
		_f         uintptr // *TFILE = S_IO_FILE
		_cs        = esc   // *int32
		_rv        int32
		_req       int32
		_          = _req
		_key       uintptr // *int8
		_          = _key
		_passwdbuf = esc + 16 // *[9]int32
		_len       uint64
		_uidbuf    = esc + 64 // *[11]int8
		_tmp       uintptr    // *int8
	)
	defer Free(esc)
	_rv = int32(0)
	*(*uintptr)(unsafe.Pointer(_res)) = null
	Xpthread_setcancelstate(tls, int32(1), _cs)
	_f = Xfopen(tls, ts+3380 /* "/etc/passwd" */, ts+1456 /* "rbe" */)
	if _f != 0 {
		goto _1
	}

	_rv = *(*int32)(unsafe.Pointer(X__errno_location(tls)))
	goto ldone

_1:
_2:
	if set719(&_rv, X__getpwent_a(tls, _f, _pw, _buf, _size, _res)) != 0 || *(*uintptr)(unsafe.Pointer(_res)) == 0 {
		goto _3
	}

	if (_name == 0 || Xstrcmp(tls, _name, *(*uintptr)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_res))))) != 0) && (_name != 0 || *(*uint32)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_res)) + 16)) != _uid) {
		goto _4
	}

	goto _3

_4:
	goto _2

_3:
	Xfclose(tls, _f)
	if *(*uintptr)(unsafe.Pointer(_res)) != 0 || _rv != int32(0) && _rv != int32(2) && _rv != int32(20) {
		goto _5
	}

	_req = func() int32 {
		if _name != 0 {
			return int32(0)
		}
		return int32(1)
	}()
	Copy(_passwdbuf, ts+3392 /* "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00..." */, 36)
	_len = uint64(0)
	Copy(_uidbuf, ts+3368 /* "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00" */, 11)
	if _name == 0 {
		goto _6
	}

	_key = _name
	goto _7

_6:
	if _uid >= uint32(0) && _uid <= uint32(0xffffffff) {
		goto _8
	}

	_rv = int32(0)
	goto ldone

_8:
	_key = x2itoa(tls, _uidbuf, _uid)
_7:
	X__assert_fail(tls, ts+0 /* "TODO(ccgo)" */, ts+3432 /* "src/passwd/getpw..." */, int32(66), x720__func__)
	if _f != 0 {
		goto _9
	}

	_rv = *(*int32)(unsafe.Pointer(X__errno_location(tls)))
	goto ldone

_9:
	if *(*int32)(unsafe.Pointer(_passwdbuf + 4)) != 0 {
		goto _10
	}

	_rv = int32(0)
	goto lcleanup_f

_10:
	if *(*int32)(unsafe.Pointer(_passwdbuf + 8)) != 0 && *(*int32)(unsafe.Pointer(_passwdbuf + 12)) != 0 && *(*int32)(unsafe.Pointer(_passwdbuf + 24)) != 0 && *(*int32)(unsafe.Pointer(_passwdbuf + 28)) != 0 && *(*int32)(unsafe.Pointer(_passwdbuf + 32)) != 0 {
		goto _11
	}

	_rv = int32(5)
	goto lcleanup_f

_11:
	if uint64(*(*int32)(unsafe.Pointer(_passwdbuf + 8))|*(*int32)(unsafe.Pointer(_passwdbuf + 12))|*(*int32)(unsafe.Pointer(_passwdbuf + 24))|*(*int32)(unsafe.Pointer(_passwdbuf + 28))|*(*int32)(unsafe.Pointer(_passwdbuf + 32))) < uint64(2305843009213693951) {
		goto _12
	}

	_rv = int32(12)
	goto lcleanup_f

_12:
	_len = uint64(*(*int32)(unsafe.Pointer(_passwdbuf + 8)) + *(*int32)(unsafe.Pointer(_passwdbuf + 12)) + *(*int32)(unsafe.Pointer(_passwdbuf + 24)) + *(*int32)(unsafe.Pointer(_passwdbuf + 28)) + *(*int32)(unsafe.Pointer(_passwdbuf + 32)))
	if _len <= *(*uint64)(unsafe.Pointer(_size)) && *(*uintptr)(unsafe.Pointer(_buf)) != 0 {
		goto _13
	}

	_tmp = Xrealloc(tls, *(*uintptr)(unsafe.Pointer(_buf)), _len)
	if _tmp != 0 {
		goto _14
	}

	_rv = *(*int32)(unsafe.Pointer(X__errno_location(tls)))
	goto lcleanup_f

_14:
	*(*uintptr)(unsafe.Pointer(_buf)) = _tmp
	*(*uint64)(unsafe.Pointer(_size)) = _len
_13:
	if Xfread(tls, *(*uintptr)(unsafe.Pointer(_buf)), _len, uint64(1), _f) != 0 {
		goto _15
	}

	_rv = func() int32 {
		if Xferror(tls, _f) != 0 {
			return *(*int32)(unsafe.Pointer(X__errno_location(tls)))
		}
		return int32(5)
	}()
	goto lcleanup_f

_15:
	*(*uintptr)(unsafe.Pointer(_pw)) = *(*uintptr)(unsafe.Pointer(_buf))
	*(*uintptr)(unsafe.Pointer(_pw + 8)) = *(*uintptr)(unsafe.Pointer(_pw)) + uintptr(*(*int32)(unsafe.Pointer(_passwdbuf + 8)))
	*(*uintptr)(unsafe.Pointer(_pw + 24)) = *(*uintptr)(unsafe.Pointer(_pw + 8)) + uintptr(*(*int32)(unsafe.Pointer(_passwdbuf + 12)))
	*(*uintptr)(unsafe.Pointer(_pw + 32)) = *(*uintptr)(unsafe.Pointer(_pw + 24)) + uintptr(*(*int32)(unsafe.Pointer(_passwdbuf + 24)))
	*(*uintptr)(unsafe.Pointer(_pw + 40)) = *(*uintptr)(unsafe.Pointer(_pw + 32)) + uintptr(*(*int32)(unsafe.Pointer(_passwdbuf + 28)))
	*(*uint32)(unsafe.Pointer(_pw + 16)) = uint32(*(*int32)(unsafe.Pointer(_passwdbuf + 16)))
	*(*uint32)(unsafe.Pointer(_pw + 20)) = uint32(*(*int32)(unsafe.Pointer(_passwdbuf + 20)))
	if *(*int8)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_pw + 8)) - 1)) == 0 && *(*int8)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_pw + 24)) - 1)) == 0 && *(*int8)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_pw + 32)) - 1)) == 0 && *(*int8)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_pw + 40)) + uintptr(*(*int32)(unsafe.Pointer(_passwdbuf + 32))-int32(1)))) == 0 {
		goto _16
	}

	_rv = int32(5)
	goto lcleanup_f

_16:
	if (_name == 0 || Xstrcmp(tls, _name, *(*uintptr)(unsafe.Pointer(_pw))) == 0) && (_name != 0 || _uid == *(*uint32)(unsafe.Pointer(_pw + 16))) {
		goto _17
	}

	_rv = int32(5)
	goto lcleanup_f

_17:
	*(*uintptr)(unsafe.Pointer(_res)) = _pw
	goto lcleanup_f
lcleanup_f:
	Xfclose(tls, _f)
	goto ldone

_5:
	goto ldone
ldone:
	Xpthread_setcancelstate(tls, *(*int32)(unsafe.Pointer(_cs)), null)
	if _rv == 0 {
		goto _18
	}

	*(*int32)(unsafe.Pointer(X__errno_location(tls))) = _rv
_18:
	return _rv
}

type t680__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t680__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t12uid_t = uint32

type s2passwd = struct {
	Fpw_name   uintptr // *int8
	Fpw_passwd uintptr // *int8
	Fpw_uid    uint32
	Fpw_gid    uint32
	Fpw_gecos  uintptr // *int8
	Fpw_dir    uintptr // *int8
	Fpw_shell  uintptr // *int8
}

// x1__func__ [10]int8, escapes: true, getpw_a.c:22:1
var x720__func__ = ds + 43976

type t20int32_t = int32

type t168size_t = uint64

func preinc721(p *uintptr) uintptr { *p += 18446744073709551615; return *p }

// xitoa is defined at getpw_a.c:9:13
func x2itoa(tls TLS, _p uintptr /* *int8 */, _x uint32) (r uintptr /* *int8 */) {
	_p += uintptr(11)
	*(*int8)(unsafe.Pointer(preinc721(&_p))) = int8(0)
_1:
	*(*int8)(unsafe.Pointer(preinc721(&_p))) = int8(uint32('0') + _x%uint32(10))
	_x = _x / uint32(10)
	if _x != 0 {
		goto _1
	}

	return _p
}

type t18gid_t = uint32

type t127uint32_t = uint32

type s16_IO_FILE struct{ uintptr }

// linking getpw_r.o

// Xgetpwnam_r is defined at getpw_r.c:34:5
func Xgetpwnam_r(tls TLS, _name uintptr /* *int8 */, _pw uintptr /* *Spasswd */, _buf uintptr /* *int8 */, _size uint64, _res uintptr /* **Spasswd */) (r int32) {
	return xgetpw_r(tls, _name, uint32(0), _pw, _buf, _size, _res)
}

// Xgetpwuid_r is defined at getpw_r.c:39:5
func Xgetpwuid_r(tls TLS, _uid uint32, _pw uintptr /* *Spasswd */, _buf uintptr /* *int8 */, _size uint64, _res uintptr /* **Spasswd */) (r int32) {
	return xgetpw_r(tls, null, _uid, _pw, _buf, _size, _res)
}

type t681__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t681__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t169size_t = uint64

type s3passwd = struct {
	Fpw_name   uintptr // *int8
	Fpw_passwd uintptr // *int8
	Fpw_uid    uint32
	Fpw_gid    uint32
	Fpw_gecos  uintptr // *int8
	Fpw_dir    uintptr // *int8
	Fpw_shell  uintptr // *int8
}

// xgetpw_r is defined at getpw_r.c:6:12
func xgetpw_r(tls TLS, _name uintptr /* *int8 */, _uid uint32, _pw uintptr /* *Spasswd */, _buf uintptr /* *int8 */, _size uint64, _res uintptr /* **Spasswd */) (r int32) {
	esc := MustMalloc(36)
	var (
		_line = esc      // **int8
		_len  = esc + 16 // *Tsize_t = uint64
		_rv   int32
		_cs   = esc + 32 // *int32
	)
	defer Free(esc)
	*(*uintptr)(unsafe.Pointer(_line)) = 0
	*(*uint64)(unsafe.Pointer(_len)) = uint64(0)
	_rv = int32(0)
	Xpthread_setcancelstate(tls, int32(1), _cs)
	_rv = X__getpw_a(tls, _name, _uid, _pw, _line, _len, _res)
	if *(*uintptr)(unsafe.Pointer(_res)) == 0 || _size >= *(*uint64)(unsafe.Pointer(_len)) {
		goto _1
	}

	*(*uintptr)(unsafe.Pointer(_res)) = null
	_rv = int32(34)
_1:
	if *(*uintptr)(unsafe.Pointer(_res)) == 0 {
		goto _2
	}

	Xmemcpy(tls, _buf, *(*uintptr)(unsafe.Pointer(_line)), *(*uint64)(unsafe.Pointer(_len)))
	*(*uintptr)(unsafe.Pointer(_pw)) = uintptr(int64(*(*uintptr)(unsafe.Pointer(_pw))-*(*uintptr)(unsafe.Pointer(_line)))) + _buf
	*(*uintptr)(unsafe.Pointer(_pw + 8)) = uintptr(int64(*(*uintptr)(unsafe.Pointer(_pw + 8))-*(*uintptr)(unsafe.Pointer(_line)))) + _buf
	*(*uintptr)(unsafe.Pointer(_pw + 24)) = uintptr(int64(*(*uintptr)(unsafe.Pointer(_pw + 24))-*(*uintptr)(unsafe.Pointer(_line)))) + _buf
	*(*uintptr)(unsafe.Pointer(_pw + 32)) = uintptr(int64(*(*uintptr)(unsafe.Pointer(_pw + 32))-*(*uintptr)(unsafe.Pointer(_line)))) + _buf
	*(*uintptr)(unsafe.Pointer(_pw + 40)) = uintptr(int64(*(*uintptr)(unsafe.Pointer(_pw + 40))-*(*uintptr)(unsafe.Pointer(_line)))) + _buf
_2:
	Xfree(tls, *(*uintptr)(unsafe.Pointer(_line)))
	Xpthread_setcancelstate(tls, *(*int32)(unsafe.Pointer(_cs)), null)
	if _rv == 0 {
		goto _3
	}

	*(*int32)(unsafe.Pointer(X__errno_location(tls))) = _rv
_3:
	return _rv
}

type t13uid_t = uint32

type t19gid_t = uint32

// linking getpwent.o

// Xsetpwent is defined at getpwent.c:8:6
func Xsetpwent(tls TLS) {
	if x2f == 0 {
		goto _1
	}

	Xfclose(tls, x2f)
_1:
	x2f = null
}

// Xgetpwent is defined at getpwent.c:16:15
func Xgetpwent(tls TLS) (r uintptr /* *Spasswd */) {
	esc := MustMalloc(8)
	var _res = esc // **Spasswd
	defer Free(esc)
	if x2f != 0 {
		goto _1
	}

	x2f = Xfopen(tls, ts+3380 /* "/etc/passwd" */, ts+1456 /* "rbe" */)
_1:
	if x2f != 0 {
		goto _2
	}

	return null

_2:
	X__getpwent_a(tls, x2f, xpw, x2line, xsize, _res)
	return *(*uintptr)(unsafe.Pointer(_res))
}

// Xgetpwuid is defined at getpwent.c:25:15
func Xgetpwuid(tls TLS, _uid uint32) (r uintptr /* *Spasswd */) {
	esc := MustMalloc(8)
	var _res = esc // **Spasswd
	defer Free(esc)
	X__getpw_a(tls, null, _uid, xpw, x2line, xsize, _res)
	return *(*uintptr)(unsafe.Pointer(_res))
}

// Xgetpwnam is defined at getpwent.c:32:15
func Xgetpwnam(tls TLS, _name uintptr /* *int8 */) (r uintptr /* *Spasswd */) {
	esc := MustMalloc(8)
	var _res = esc // **Spasswd
	defer Free(esc)
	X__getpw_a(tls, _name, uint32(0), xpw, x2line, xsize, _res)
	return *(*uintptr)(unsafe.Pointer(_res))
}

type t682__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t682__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// xf *TFILE = S_IO_FILE, escapes: false, getpwent.c:3:13
var x2f uintptr

type s4passwd = struct {
	Fpw_name   uintptr // *int8
	Fpw_passwd uintptr // *int8
	Fpw_uid    uint32
	Fpw_gid    uint32
	Fpw_gecos  uintptr // *int8
	Fpw_dir    uintptr // *int8
	Fpw_shell  uintptr // *int8
}

// xpw Spasswd, escapes: true, getpwent.c:5:22
var xpw = bss + 3520

// xline *int8, escapes: true, getpwent.c:4:13
var x2line = bss + 3568

// xsize Tsize_t = uint64, escapes: true, getpwent.c:6:15
var xsize = bss + 3576

type t14uid_t = uint32

type t20gid_t = uint32

type s17_IO_FILE struct{ uintptr }

// linking getpwent_a.o

func set722(p *int64, v int64) int64 { *p = v; return v }

func postinc723(p *uintptr) uintptr { r := *p; *p += 1; return r }

func set724(p *uintptr, v uintptr) uintptr { *p = v; return v }

// X__getpwent_a is defined at getpwent_a.c:11:5
func X__getpwent_a(tls TLS, _f uintptr /* *TFILE = S_IO_FILE */, _pw uintptr /* *Spasswd */, _line uintptr /* **int8 */, _size uintptr /* *Tsize_t = uint64 */, _res uintptr /* **Spasswd */) (r int32) {
	esc := MustMalloc(20)
	var (
		_l  int64
		_s  = esc // **int8
		_rv int32
		_cs = esc + 16 // *int32
	)
	defer Free(esc)
	_rv = int32(0)
	Xpthread_setcancelstate(tls, int32(1), _cs)

_1:
	if set722(&_l, Xgetline(tls, _line, _size, _f)) >= int64(0) {
		goto _4
	}

	_rv = func() int32 {
		if Xferror(tls, _f) != 0 {
			return *(*int32)(unsafe.Pointer(X__errno_location(tls)))
		}
		return int32(0)
	}()
	Xfree(tls, *(*uintptr)(unsafe.Pointer(_line)))
	*(*uintptr)(unsafe.Pointer(_line)) = null
	_pw = null
	goto _3

_4:
	*(*int8)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_line)) + uintptr(_l-int64(1)))) = int8(0)
	*(*uintptr)(unsafe.Pointer(_s)) = *(*uintptr)(unsafe.Pointer(_line))
	*(*uintptr)(unsafe.Pointer(_pw)) = postinc723((*uintptr)(unsafe.Pointer(_s)))
	if set724((*uintptr)(unsafe.Pointer(_s)), Xstrchr(tls, *(*uintptr)(unsafe.Pointer(_s)), int32(':'))) != 0 {
		goto _5
	}

	goto _2

_5:
	*(*int8)(unsafe.Pointer(postinc723((*uintptr)(unsafe.Pointer(_s))))) = int8(0)
	*(*uintptr)(unsafe.Pointer(_pw + 8)) = *(*uintptr)(unsafe.Pointer(_s))
	if set724((*uintptr)(unsafe.Pointer(_s)), Xstrchr(tls, *(*uintptr)(unsafe.Pointer(_s)), int32(':'))) != 0 {
		goto _6
	}

	goto _2

_6:
	*(*int8)(unsafe.Pointer(postinc723((*uintptr)(unsafe.Pointer(_s))))) = int8(0)
	*(*uint32)(unsafe.Pointer(_pw + 16)) = x1atou(tls, _s)
	if int32(*(*int8)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_s))))) == int32(':') {
		goto _7
	}

	goto _2

_7:
	*(*int8)(unsafe.Pointer(postinc723((*uintptr)(unsafe.Pointer(_s))))) = int8(0)
	*(*uint32)(unsafe.Pointer(_pw + 20)) = x1atou(tls, _s)
	if int32(*(*int8)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_s))))) == int32(':') {
		goto _8
	}

	goto _2

_8:
	*(*int8)(unsafe.Pointer(postinc723((*uintptr)(unsafe.Pointer(_s))))) = int8(0)
	*(*uintptr)(unsafe.Pointer(_pw + 24)) = *(*uintptr)(unsafe.Pointer(_s))
	if set724((*uintptr)(unsafe.Pointer(_s)), Xstrchr(tls, *(*uintptr)(unsafe.Pointer(_s)), int32(':'))) != 0 {
		goto _9
	}

	goto _2

_9:
	*(*int8)(unsafe.Pointer(postinc723((*uintptr)(unsafe.Pointer(_s))))) = int8(0)
	*(*uintptr)(unsafe.Pointer(_pw + 32)) = *(*uintptr)(unsafe.Pointer(_s))
	if set724((*uintptr)(unsafe.Pointer(_s)), Xstrchr(tls, *(*uintptr)(unsafe.Pointer(_s)), int32(':'))) != 0 {
		goto _10
	}

	goto _2

_10:
	*(*int8)(unsafe.Pointer(postinc723((*uintptr)(unsafe.Pointer(_s))))) = int8(0)
	*(*uintptr)(unsafe.Pointer(_pw + 40)) = *(*uintptr)(unsafe.Pointer(_s))
	goto _3

_2:
	goto _1

_3:
	Xpthread_setcancelstate(tls, *(*int32)(unsafe.Pointer(_cs)), null)
	*(*uintptr)(unsafe.Pointer(_res)) = _pw
	if _rv == 0 {
		goto _11
	}

	*(*int32)(unsafe.Pointer(X__errno_location(tls))) = _rv
_11:
	return _rv
}

type t683__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t683__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type s5passwd = struct {
	Fpw_name   uintptr // *int8
	Fpw_passwd uintptr // *int8
	Fpw_uid    uint32
	Fpw_gid    uint32
	Fpw_gecos  uintptr // *int8
	Fpw_dir    uintptr // *int8
	Fpw_shell  uintptr // *int8
}

type t34ssize_t = int64

type t15uid_t = uint32

// xatou is defined at getpwent_a.c:4:17
func x1atou(tls TLS, _s uintptr /* **int8 */) (r uint32) {
	var _x uint32

	_x = uint32(0)
_1:
	if uint32(int32(**(**int8)(unsafe.Pointer(_s)))-int32('0')) >= uint32(10) {
		goto _3
	}

	_x = uint32(10)*_x + uint32(int32(**(**int8)(unsafe.Pointer(_s)))-int32('0'))
	*(*uintptr)(unsafe.Pointer(_s))++
	goto _1

_3:
	return _x
}

type t21gid_t = uint32

type s18_IO_FILE struct{ uintptr }

// linking getspent.o

// Xsetspent is defined at getspent.c:3:6
func Xsetspent(tls TLS) {
}

// Xendspent is defined at getspent.c:7:6
func Xendspent(tls TLS) {
}

// Xgetspent is defined at getspent.c:11:13
func Xgetspent(tls TLS) (r uintptr /* *Sspwd */) {
	return null
}

type t684__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t684__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type s1spwd = struct {
	Fsp_namp   uintptr // *int8
	Fsp_pwdp   uintptr // *int8
	Fsp_lstchg int64
	Fsp_min    int64
	Fsp_max    int64
	Fsp_warn   int64
	Fsp_inact  int64
	Fsp_expire int64
	Fsp_flag   uint64
}

// linking getspnam.o

// Xgetspnam is defined at getspnam.c:5:13
func Xgetspnam(tls TLS, _name uintptr /* *int8 */) (r uintptr /* *Sspwd */) {
	esc := MustMalloc(8)
	var (
		_res = esc // **Sspwd
		_e   int32
	)
	defer Free(esc)
	if x725line != 0 {
		goto _1
	}

	x725line = Xmalloc(tls, uint64(256))
_1:
	if x725line != 0 {
		goto _2
	}

	return null

_2:
	_e = Xgetspnam_r(tls, _name, x726sp, x725line, uint64(256), _res)
	if _e == 0 {
		goto _3
	}

	*(*int32)(unsafe.Pointer(X__errno_location(tls))) = _e
_3:
	return *(*uintptr)(unsafe.Pointer(_res))
}

type t685__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t685__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type s2spwd = struct {
	Fsp_namp   uintptr // *int8
	Fsp_pwdp   uintptr // *int8
	Fsp_lstchg int64
	Fsp_min    int64
	Fsp_max    int64
	Fsp_warn   int64
	Fsp_inact  int64
	Fsp_expire int64
	Fsp_flag   uint64
}

// x1sp Sspwd, escapes: true, getspnam.c:7:21
var x726sp = bss + 3584

// x2line *int8, escapes: false, getspnam.c:8:14
var x725line uintptr

type t170size_t = uint64

// linking getspnam_r.o

func set727(p *uintptr, v uintptr) uintptr { *p = v; return v }

func preinc728(p *uintptr) uintptr { *p += 1; return *p }

// X__parsespent is defined at getspnam_r.c:23:5
func X__parsespent(tls TLS, as uintptr, _sp uintptr /* *Sspwd */) (r int32) {
	esc := MustMalloc(8)
	var _s = esc // **int8
	defer Free(esc)
	*(*uintptr)(unsafe.Pointer(_s)) = as
	*(*uintptr)(unsafe.Pointer(_sp)) = *(*uintptr)(unsafe.Pointer(_s))
	if set727((*uintptr)(unsafe.Pointer(_s)), Xstrchr(tls, *(*uintptr)(unsafe.Pointer(_s)), int32(':'))) != 0 {
		goto _1
	}

	return int32(-1)

_1:
	*(*int8)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_s)))) = int8(0)
	*(*uintptr)(unsafe.Pointer(_sp + 8)) = preinc728((*uintptr)(unsafe.Pointer(_s)))
	if set727((*uintptr)(unsafe.Pointer(_s)), Xstrchr(tls, *(*uintptr)(unsafe.Pointer(_s)), int32(':'))) != 0 {
		goto _2
	}

	return int32(-1)

_2:
	*(*int8)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_s)))) = int8(0)
	*(*uintptr)(unsafe.Pointer(_s))++
	*(*int64)(unsafe.Pointer(_sp + 16)) = xxatol(tls, _s)
	if int32(*(*int8)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_s))))) == int32(':') {
		goto _3
	}

	return int32(-1)

_3:
	*(*uintptr)(unsafe.Pointer(_s))++
	*(*int64)(unsafe.Pointer(_sp + 24)) = xxatol(tls, _s)
	if int32(*(*int8)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_s))))) == int32(':') {
		goto _4
	}

	return int32(-1)

_4:
	*(*uintptr)(unsafe.Pointer(_s))++
	*(*int64)(unsafe.Pointer(_sp + 32)) = xxatol(tls, _s)
	if int32(*(*int8)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_s))))) == int32(':') {
		goto _5
	}

	return int32(-1)

_5:
	*(*uintptr)(unsafe.Pointer(_s))++
	*(*int64)(unsafe.Pointer(_sp + 40)) = xxatol(tls, _s)
	if int32(*(*int8)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_s))))) == int32(':') {
		goto _6
	}

	return int32(-1)

_6:
	*(*uintptr)(unsafe.Pointer(_s))++
	*(*int64)(unsafe.Pointer(_sp + 48)) = xxatol(tls, _s)
	if int32(*(*int8)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_s))))) == int32(':') {
		goto _7
	}

	return int32(-1)

_7:
	*(*uintptr)(unsafe.Pointer(_s))++
	*(*int64)(unsafe.Pointer(_sp + 56)) = xxatol(tls, _s)
	if int32(*(*int8)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_s))))) == int32(':') {
		goto _8
	}

	return int32(-1)

_8:
	*(*uintptr)(unsafe.Pointer(_s))++
	*(*uint64)(unsafe.Pointer(_sp + 64)) = uint64(xxatol(tls, _s))
	if int32(*(*int8)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_s))))) == int32('\n') {
		goto _9
	}

	return int32(-1)

_9:
	return int32(0)
}

func set729(p *int32, v int32) int32 { *p = v; return v }

func fp730(f func(TLS, uintptr)) uintptr { return *(*uintptr)(unsafe.Pointer(&f)) }

func set731(p *uint64, v uint64) uint64 { *p = v; return v }

// Xgetspnam_r is defined at getspnam_r.c:61:5
func Xgetspnam_r(tls TLS, _name uintptr /* *int8 */, _sp uintptr /* *Sspwd */, _buf uintptr /* *int8 */, _size uint64, _res uintptr /* **Sspwd */) (r int32) {
	esc := MustMalloc(472)
	var (
		_path = esc   // *[275]int8
		_f    uintptr // *TFILE = S_IO_FILE
		_rv   int32
		_fd   int32
		_k    uint64
		_l    uint64
		_skip int32
		_cs   = esc + 288 // *int32
		_st   = esc + 304 // *Sstat
		___cb = esc + 448 // *S__ptcb
	)
	defer Free(esc)
	_f = 0
	_rv = int32(0)
	_l = Xstrlen(tls, _name)
	_skip = int32(0)
	*(*uintptr)(unsafe.Pointer(_res)) = null
	if int32(*(*int8)(unsafe.Pointer(_name))) != int32('.') && Xstrchr(tls, _name, int32('/')) == 0 && _l != 0 {
		goto _1
	}

	return set729((*int32)(unsafe.Pointer(X__errno_location(tls))), int32(22))

_1:
	if _size >= _l+uint64(100) {
		goto _2
	}

	return set729((*int32)(unsafe.Pointer(X__errno_location(tls))), int32(34))

_2:
	if uint64(Xsnprintf(tls, _path, uint64(275), ts+3456 /* "/etc/tcb/%s/shad..." */, _name)) < uint64(275) {
		goto _3
	}

	return set729((*int32)(unsafe.Pointer(X__errno_location(tls))), int32(22))

_3:
	_fd = Xopen(tls, _path, int32(657408))
	if _fd < int32(0) {
		goto _4
	}

	Copy(_st, ts+3476 /* "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00..." */, 144)
	*(*int32)(unsafe.Pointer(X__errno_location(tls))) = int32(22)
	if Xfstat(tls, _fd, _st) == 0 && *(*uint32)(unsafe.Pointer(_st + 24))&uint32(0170000) == uint32(0100000) && set727(&_f, Xfdopen(tls, _fd, ts+1460 /* "rb" */)) != 0 {
		goto _6
	}

	Xpthread_setcancelstate(tls, int32(1), _cs)
	Xclose(tls, _fd)
	Xpthread_setcancelstate(tls, *(*int32)(unsafe.Pointer(_cs)), null)
	return *(*int32)(unsafe.Pointer(X__errno_location(tls)))

_6:
	goto _5

_4:
	_f = Xfopen(tls, ts+3624 /* "/etc/shadow" */, ts+1456 /* "rbe" */)
	if _f != 0 {
		goto _7
	}

	return *(*int32)(unsafe.Pointer(X__errno_location(tls)))

_7:
_5:
	X_pthread_cleanup_push(tls, ___cb, fp730(x1cleanup), _f)
_9:
	if Xfgets(tls, _buf, int32(_size), _f) == 0 || set731(&_k, Xstrlen(tls, _buf)) <= uint64(0) {
		goto _10
	}

	if _skip == 0 && Xstrncmp(tls, _name, _buf, _l) == 0 && int32(*(*int8)(unsafe.Pointer(_buf + uintptr(_l)))) == int32(':') {
		goto _11
	}

	_skip = bool2int(int32(*(*int8)(unsafe.Pointer(_buf + uintptr(_k-uint64(1))))) != int32('\n'))
	goto _9

_11:
	if int32(*(*int8)(unsafe.Pointer(_buf + uintptr(_k-uint64(1))))) == int32('\n') {
		goto _12
	}

	_rv = int32(34)
	goto _10

_12:
	if X__parsespent(tls, _buf, _sp) >= int32(0) {
		goto _13
	}

	goto _9

_13:
	*(*uintptr)(unsafe.Pointer(_res)) = _sp
	goto _10

	goto _9

_10:
	X_pthread_cleanup_pop(tls, ___cb, int32(1))
	if _rv == 0 {
		goto _14
	}

	*(*int32)(unsafe.Pointer(X__errno_location(tls))) = _rv
_14:
	return _rv
}

type t686__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t686__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type s3spwd = struct {
	Fsp_namp   uintptr // *int8
	Fsp_pwdp   uintptr // *int8
	Fsp_lstchg int64
	Fsp_min    int64
	Fsp_max    int64
	Fsp_warn   int64
	Fsp_inact  int64
	Fsp_expire int64
	Fsp_flag   uint64
}

// xxatol is defined at getspnam_r.c:15:13
func xxatol(tls TLS, _s uintptr /* **int8 */) (r int64) {
	var _x int64

	if int32(**(**int8)(unsafe.Pointer(_s))) != int32(':') && int32(**(**int8)(unsafe.Pointer(_s))) != int32('\n') {
		goto _1
	}

	return int64(-1)

_1:
	_x = int64(0)
_2:
	if uint32(int32(**(**int8)(unsafe.Pointer(_s)))-int32('0')) >= uint32(10) {
		goto _4
	}

	_x = int64(10)*_x + int64(int32(**(**int8)(unsafe.Pointer(_s)))-int32('0'))
	*(*uintptr)(unsafe.Pointer(_s))++
	goto _2

_4:
	return _x
}

type t171size_t = uint64

type s5stat = struct {
	Fst_dev     uint64
	Fst_ino     uint64
	Fst_nlink   uint64
	Fst_mode    uint32
	Fst_uid     uint32
	Fst_gid     uint32
	F__pad0     uint32
	Fst_rdev    uint64
	Fst_size    int64
	Fst_blksize int64
	Fst_blocks  int64
	Fst_atim    s15timespec
	Fst_mtim    s15timespec
	Fst_ctim    s15timespec
	F__unused   [3]int64
}

type s25__ptcb = struct {
	F__f    uintptr // *func(TLS, uintptr)
	F__x    uintptr // *void
	F__next uintptr // *S__ptcb
}

type t13mode_t = uint32

// xcleanup is defined at getspnam_r.c:56:13
func x1cleanup(tls TLS, _p uintptr /* *void */) {
	Xfclose(tls, _p)
}

type t5dev_t = uint64

type t11ino_t = uint64

type t5nlink_t = uint64

type t16uid_t = uint32

type t22gid_t = uint32

type t33off_t = int64

type t5blksize_t = int64

type t5blkcnt_t = int64

type s15timespec = struct {
	Ftv_sec  int64
	Ftv_nsec int64
}

type t28time_t = int64

type s19_IO_FILE struct{ uintptr }

// linking lckpwdf.o

// Xlckpwdf is defined at lckpwdf.c:3:5
func Xlckpwdf(tls TLS) (r int32) {
	return int32(0)
}

// Xulckpwdf is defined at lckpwdf.c:8:5
func Xulckpwdf(tls TLS) (r int32) {
	return int32(0)
}

type t687__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t687__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// linking nscd_query.o

// X__nscd_query is defined at nscd_query.c:19:6
func X__nscd_query(tls TLS, _req int32, _key uintptr /* *int8 */, _buf uintptr /* *Tint32_t = int32 */, _len uint64, _swap uintptr /* *int32 */) (r uintptr /* *TFILE = S_IO_FILE */) {
	esc := MustMalloc(12)
	var (
		_f       uintptr // *TFILE = S_IO_FILE
		_        = _f
		_req_buf = esc // *[3]int32
	)
	defer Free(esc)
	_f = 0
	*(*[3]int32)(unsafe.Pointer(_req_buf)) = [3]int32{
		0: int32(2),
		1: _req,
		2: int32(Xstrnlen(tls, _key, uint64(256)) + uint64(1)),
	}
	X__assert_fail(tls, ts+0 /* "TODO(ccgo)" */, ts+3636 /* "src/passwd/nscd_..." */, int32(29), x732__func__)
	return r
}

type t688__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t688__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t21int32_t = int32

type t172size_t = uint64

// x1__func__ [13]int8, escapes: true, nscd_query.c:20:1
var x732__func__ = ds + 43992

type s20_IO_FILE struct{ uintptr }

// linking putgrent.o

func set733(p *int32, v int32) int32 { *p = v; return v }

// Xputgrent is defined at putgrent.c:5:5
func Xputgrent(tls TLS, _gr uintptr /* *Sgroup */, _f uintptr /* *TFILE = S_IO_FILE */) (r int32) {
	var (
		_r int32
		_i uint64
	)
	Xflockfile(tls, _f)
	if set733(&_r, Xfprintf(tls, _f, ts+3660 /* "%s:%s:%d:" */, *(*uintptr)(unsafe.Pointer(_gr)), *(*uintptr)(unsafe.Pointer(_gr + 8)), *(*uint32)(unsafe.Pointer(_gr + 16)))) >= int32(0) {
		goto _1
	}

	goto ldone

_1:
	if *(*uintptr)(unsafe.Pointer(_gr + 24)) == 0 {
		goto _2
	}

	_i = uint64(0)
_3:
	if *(*uintptr)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_gr + 24)) + 8*uintptr(_i))) == 0 {
		goto _5
	}

	if set733(&_r, Xfprintf(tls, _f, ts+3672 /* "%s%s" */, func() uintptr {
		if _i != 0 {
			return ts + 3680 /* "," */
		}
		return ts + 112 /* "" */
	}(), *(*uintptr)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_gr + 24)) + 8*uintptr(_i))))) >= int32(0) {
		goto _6
	}

	goto ldone

_6:
	_i++
	goto _3

_5:
_2:
	_r = Xfputc(tls, int32('\n'), _f)
	goto ldone
ldone:
	Xfunlockfile(tls, _f)
	if _r < int32(0) {
		return int32(-1)
	}

	return int32(0)
}

type t689__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t689__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type s6group = struct {
	Fgr_name   uintptr // *int8
	Fgr_passwd uintptr // *int8
	Fgr_gid    uint32
	Fgr_mem    uintptr // **int8
}

type t173size_t = uint64

type t23gid_t = uint32

type s21_IO_FILE struct{ uintptr }

// linking putpwent.o

// Xputpwent is defined at putpwent.c:5:5
func Xputpwent(tls TLS, _pw uintptr /* *Spasswd */, _f uintptr /* *TFILE = S_IO_FILE */) (r int32) {
	if Xfprintf(tls, _f, ts+3684 /* "%s:%s:%d:%d:%s:%..." */, *(*uintptr)(unsafe.Pointer(_pw)), *(*uintptr)(unsafe.Pointer(_pw + 8)), *(*uint32)(unsafe.Pointer(_pw + 16)), *(*uint32)(unsafe.Pointer(_pw + 20)), *(*uintptr)(unsafe.Pointer(_pw + 24)), *(*uintptr)(unsafe.Pointer(_pw + 32)), *(*uintptr)(unsafe.Pointer(_pw + 40))) < int32(0) {
		return int32(-1)
	}

	return int32(0)
}

type t690__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t690__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type s6passwd = struct {
	Fpw_name   uintptr // *int8
	Fpw_passwd uintptr // *int8
	Fpw_uid    uint32
	Fpw_gid    uint32
	Fpw_gecos  uintptr // *int8
	Fpw_dir    uintptr // *int8
	Fpw_shell  uintptr // *int8
}

type t17uid_t = uint32

type t24gid_t = uint32

type s22_IO_FILE struct{ uintptr }

// linking putspent.o

// Xputspent is defined at putspent.c:7:5
func Xputspent(tls TLS, _sp uintptr /* *Sspwd */, _f uintptr /* *TFILE = S_IO_FILE */) (r int32) {
	if Xfprintf(tls, _f, ts+3708 /* "%s:%s:%.*ld:%.*l..." */, func() uintptr {
		if *(*uintptr)(unsafe.Pointer(_sp)) != 0 {
			return *(*uintptr)(unsafe.Pointer(_sp))
		}
		return ts + 112 /* "" */
	}(), func() uintptr {
		if *(*uintptr)(unsafe.Pointer(_sp + 8)) != 0 {
			return *(*uintptr)(unsafe.Pointer(_sp + 8))
		}
		return ts + 112 /* "" */
	}(), func() int32 {
		if *(*int64)(unsafe.Pointer(_sp + 16)) == int64(-1) {
			return int32(0)
		}
		return int32(-1)
	}(), func() int64 {
		if *(*int64)(unsafe.Pointer(_sp + 16)) == int64(-1) {
			return int64(0)
		}
		return *(*int64)(unsafe.Pointer(_sp + 16))
	}(), func() int32 {
		if *(*int64)(unsafe.Pointer(_sp + 24)) == int64(-1) {
			return int32(0)
		}
		return int32(-1)
	}(), func() int64 {
		if *(*int64)(unsafe.Pointer(_sp + 24)) == int64(-1) {
			return int64(0)
		}
		return *(*int64)(unsafe.Pointer(_sp + 24))
	}(), func() int32 {
		if *(*int64)(unsafe.Pointer(_sp + 32)) == int64(-1) {
			return int32(0)
		}
		return int32(-1)
	}(), func() int64 {
		if *(*int64)(unsafe.Pointer(_sp + 32)) == int64(-1) {
			return int64(0)
		}
		return *(*int64)(unsafe.Pointer(_sp + 32))
	}(), func() int32 {
		if *(*int64)(unsafe.Pointer(_sp + 40)) == int64(-1) {
			return int32(0)
		}
		return int32(-1)
	}(), func() int64 {
		if *(*int64)(unsafe.Pointer(_sp + 40)) == int64(-1) {
			return int64(0)
		}
		return *(*int64)(unsafe.Pointer(_sp + 40))
	}(), func() int32 {
		if *(*int64)(unsafe.Pointer(_sp + 48)) == int64(-1) {
			return int32(0)
		}
		return int32(-1)
	}(), func() int64 {
		if *(*int64)(unsafe.Pointer(_sp + 48)) == int64(-1) {
			return int64(0)
		}
		return *(*int64)(unsafe.Pointer(_sp + 48))
	}(), func() int32 {
		if *(*int64)(unsafe.Pointer(_sp + 56)) == int64(-1) {
			return int32(0)
		}
		return int32(-1)
	}(), func() int64 {
		if *(*int64)(unsafe.Pointer(_sp + 56)) == int64(-1) {
			return int64(0)
		}
		return *(*int64)(unsafe.Pointer(_sp + 56))
	}(), func() int32 {
		if *(*uint64)(unsafe.Pointer(_sp + 64)) == uint64(18446744073709551615) {
			return int32(0)
		}
		return int32(-1)
	}(), func() uint64 {
		if *(*uint64)(unsafe.Pointer(_sp + 64)) == uint64(18446744073709551615) {
			return uint64(0)
		}
		return *(*uint64)(unsafe.Pointer(_sp + 64))
	}()) < int32(0) {
		return int32(-1)
	}

	return int32(0)
}

type t691__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t691__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type s4spwd = struct {
	Fsp_namp   uintptr // *int8
	Fsp_pwdp   uintptr // *int8
	Fsp_lstchg int64
	Fsp_min    int64
	Fsp_max    int64
	Fsp_warn   int64
	Fsp_inact  int64
	Fsp_expire int64
	Fsp_flag   uint64
}

type s23_IO_FILE struct{ uintptr }

// linking __rand48_step.o

// X__rand48_step is defined at __rand48_step.c:3:10
func X__rand48_step(tls TLS, _xi uintptr /* *uint16 */, _lc uintptr /* *uint16 */) (r uint64) {
	var (
		_a uint64
		_x uint64
	)
	_x = uint64(uint32(*(*uint16)(unsafe.Pointer(_xi)))|(uint32(*(*uint16)(unsafe.Pointer(_xi + 2)))+uint32(0))<<(uint(16)%32)) | (uint64(*(*uint16)(unsafe.Pointer(_xi + 4)))+uint64(0))<<(uint(32)%64)
	_a = uint64(uint32(*(*uint16)(unsafe.Pointer(_lc)))|(uint32(*(*uint16)(unsafe.Pointer(_lc + 2)))+uint32(0))<<(uint(16)%32)) | (uint64(*(*uint16)(unsafe.Pointer(_lc + 4)))+uint64(0))<<(uint(32)%64)
	_x = _a*_x + uint64(*(*uint16)(unsafe.Pointer(_lc + 6)))
	*(*uint16)(unsafe.Pointer(_xi)) = uint16(_x)
	*(*uint16)(unsafe.Pointer(_xi + 2)) = uint16(_x >> (uint(16) % 64))
	*(*uint16)(unsafe.Pointer(_xi + 4)) = uint16(_x >> (uint(32) % 64))
	return _x & uint64(0xffffffffffff)
}

type t692__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t692__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t69uint64_t = uint64

// linking __seed48.o

// X__seed48 [7]uint16, escapes: true, __seed48.c:1:16
var X__seed48 = ds + 44008

type t693__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t693__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// linking drand48.o

// Xerand48 is defined at drand48.c:7:8
func Xerand48(tls TLS, _s uintptr /* [3]uint16 */) (r float64) {
	esc := MustMalloc(8)
	var _x = esc // *struct{Fu [0]uint64;Ff [0]float64;F int64}
	defer Free(esc)
	*(*struct {
		Fu [0]uint64
		Ff [0]float64
		F  int64
	})(unsafe.Pointer(_x)) = *(*struct {
		Fu [0]uint64
		Ff [0]float64
		F  int64
	})(unsafe.Pointer(&struct{ f uint64 }{uint64(0x3ff0000000000000) | X__rand48_step(tls, _s, X__seed48+2*uintptr(3))<<(uint(4)%64)}))
	return *(*float64)(unsafe.Pointer(_x)) - float64(1)
}

// Xdrand48 is defined at drand48.c:16:8
func Xdrand48(tls TLS) (r float64) {
	return Xerand48(tls, X__seed48)
}

type t694__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t694__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t70uint64_t = uint64

// linking lcong48.o

// Xlcong48 is defined at lcong48.c:6:6
func Xlcong48(tls TLS, _p uintptr /* [7]uint16 */) {
	Xmemcpy(tls, X__seed48, _p, uint64(14))
}

type t695__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t695__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t174size_t = uint64

// linking lrand48.o

// Xnrand48 is defined at lrand48.c:7:6
func Xnrand48(tls TLS, _s uintptr /* [3]uint16 */) (r int64) {
	return int64(X__rand48_step(tls, _s, X__seed48+2*uintptr(3)) >> (uint(17) % 64))
}

// Xlrand48 is defined at lrand48.c:12:6
func Xlrand48(tls TLS) (r int64) {
	return Xnrand48(tls, X__seed48)
}

type t696__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t696__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t71uint64_t = uint64

// linking mrand48.o

// Xjrand48 is defined at mrand48.c:7:6
func Xjrand48(tls TLS, _s uintptr /* [3]uint16 */) (r int64) {
	return int64(int32(X__rand48_step(tls, _s, X__seed48+2*uintptr(3)) >> (uint(16) % 64)))
}

// Xmrand48 is defined at mrand48.c:12:6
func Xmrand48(tls TLS) (r int64) {
	return Xjrand48(tls, X__seed48)
}

type t697__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t697__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t22int32_t = int32

type t72uint64_t = uint64

// linking rand.o

// Xsrand is defined at rand.c:6:6
func Xsrand(tls TLS, _s uint32) {
	xseed = uint64(_s - uint32(1))
}

// Xrand is defined at rand.c:11:5
func Xrand(tls TLS) (r int32) {
	xseed = uint64(6364136223846793005)*xseed + uint64(1)
	return int32(xseed >> (uint(33) % 64))
}

type t698__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t698__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// xseed Tuint64_t = uint64, escapes: false, rand.c:4:17
var xseed uint64

type t73uint64_t = uint64

// linking rand_r.o

func set734(p *uint32, v uint32) uint32 { *p = v; return v }

// Xrand_r is defined at rand_r.c:12:5
func Xrand_r(tls TLS, _seed uintptr /* *uint32 */) (r int32) {
	return int32(xtemper(tls, set734((*uint32)(unsafe.Pointer(_seed)), *(*uint32)(unsafe.Pointer(_seed))*uint32(1103515245)+uint32(12345))) / uint32(2))
}

type t699__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t699__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// xtemper is defined at rand_r.c:3:17
func xtemper(tls TLS, _x uint32) (r uint32) {
	_x = _x ^ _x>>(uint(11)%32)
	_x = _x ^ _x<<(uint(7)%32)&uint32(0x9d2c5680)
	_x = _x ^ _x<<(uint(15)%32)&uint32(0xefc60000)
	_x = _x ^ _x>>(uint(18)%32)
	return _x
}

// linking random.o

// Xsrandom is defined at random.c:65:6
func Xsrandom(tls TLS, _seed uint32) {
	X__lock(tls, x3lock)
	x__srandom(tls, _seed)
	X__unlock(tls, x3lock)
}

// Xinitstate is defined at random.c:71:6
func Xinitstate(tls TLS, _seed uint32, _state uintptr /* *int8 */, _size uint64) (r uintptr /* *int8 */) {
	var _old uintptr // *void

	if _size >= uint64(8) {
		goto _1
	}

	return null

_1:
	X__lock(tls, x3lock)
	_old = xsavestate(tls)
	if _size >= uint64(32) {
		goto _2
	}

	xn = int32(0)
	goto _3

_2:
	if _size >= uint64(64) {
		goto _4
	}

	xn = int32(7)
	goto _5

_4:
	if _size >= uint64(128) {
		goto _6
	}

	xn = int32(15)
	goto _7

_6:
	if _size >= uint64(256) {
		goto _8
	}

	xn = int32(31)
	goto _9

_8:
	xn = int32(63)
_9:
_7:
_5:
_3:
	xx = _state + 4*uintptr(1)
	x__srandom(tls, _seed)
	xsavestate(tls)
	X__unlock(tls, x3lock)
	return _old
}

// Xsetstate is defined at random.c:95:6
func Xsetstate(tls TLS, _state uintptr /* *int8 */) (r uintptr /* *int8 */) {
	var _old uintptr // *void

	X__lock(tls, x3lock)
	_old = xsavestate(tls)
	xloadstate(tls, _state)
	X__unlock(tls, x3lock)
	return _old
}

func set735(p *uint32, v uint32) uint32 { *p = v; return v }

func preinc736(p *int32) int32 { *p += 1; return *p }

// Xrandom is defined at random.c:105:6
func Xrandom(tls TLS) (r int64) {
	var _k int64

	X__lock(tls, x3lock)
	if xn != int32(0) {
		goto _1
	}

	_k = int64(set735((*uint32)(unsafe.Pointer(xx)), xlcg31(tls, *(*uint32)(unsafe.Pointer(xx)))))
	goto lend

_1:
	{
		p := (*uint32)(unsafe.Pointer(xx + 4*uintptr(xi)))
		*p = *p + *(*uint32)(unsafe.Pointer(xx + 4*uintptr(xj)))
	}
	_k = int64(*(*uint32)(unsafe.Pointer(xx + 4*uintptr(xi))) >> (uint(1) % 32))
	if preinc736(&xi) != xn {
		goto _2
	}

	xi = int32(0)
_2:
	if preinc736(&xj) != xn {
		goto _3
	}

	xj = int32(0)
_3:
	goto lend
lend:
	X__unlock(tls, x3lock)
	return _k
}

type t700__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t700__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// xlock [1]int32, escapes: true, random.c:25:21
var x3lock = bss + 3656

// x__srandom is defined at random.c:47:13
func x__srandom(tls TLS, _seed uint32) {
	var (
		_k int32
		_s uint64
	)
	_s = uint64(_seed)
	if xn != int32(0) {
		goto _1
	}

	*(*uint32)(unsafe.Pointer(xx)) = uint32(_s)
	return

_1:
	xi = func() int32 {
		if (xn == int32(31)) || (xn == int32(7)) {
			return int32(3)
		}
		return int32(1)
	}()
	xj = int32(0)
	_k = int32(0)
_2:
	if _k >= xn {
		goto _4
	}

	_s = xlcg64(tls, _s)
	*(*uint32)(unsafe.Pointer(xx + 4*uintptr(_k))) = uint32(_s >> (uint(32) % 64))
	_k++
	goto _2

_4:
	{
		p := (*uint32)(unsafe.Pointer(xx))
		*p = *p | uint32(1)
	}
}

type t175size_t = uint64

// xsavestate is defined at random.c:35:13
func xsavestate(tls TLS) (r uintptr /* *void */) {
	*(*uint32)(unsafe.Pointer(xx - 4)) = uint32(xn<<(uint(16)%32) | xi<<(uint(8)%32) | xj)
	return xx - 4*uintptr(1)
}

// xn int32, escapes: false, random.c:21:12
var xn = int32(31)

// xx *Tuint32_t = uint32, escapes: false, random.c:24:17
var xx uintptr

func init() { xx = xinit + 4*uintptr(1) }

// xloadstate is defined at random.c:40:13
func xloadstate(tls TLS, _state uintptr /* *Tuint32_t = uint32 */) {
	xx = _state + 4*uintptr(1)
	xn = int32(*(*uint32)(unsafe.Pointer(xx - 4)) >> (uint(16) % 32))
	xi = int32(*(*uint32)(unsafe.Pointer(xx - 4)) >> (uint(8) % 32) & uint32(0xff))
	xj = int32(*(*uint32)(unsafe.Pointer(xx - 4)) & uint32(0xff))
}

type t128uint32_t = uint32

// xlcg31 is defined at random.c:27:17
func xlcg31(tls TLS, _x uint32) (r uint32) {
	return (uint32(1103515245)*_x + uint32(12345)) & uint32(0x7fffffff)
}

// xi int32, escapes: false, random.c:22:12
var xi = int32(3)

// xj int32, escapes: false, random.c:23:12
var xj int32

type t74uint64_t = uint64

// xlcg64 is defined at random.c:31:17
func xlcg64(tls TLS, _x uint64) (r uint64) {
	return uint64(6364136223846793005)*_x + uint64(1)
}

// xinit [32]uint32, escapes: true, random.c:11:17
var xinit = ds + 44024

// linking seed48.o

// Xseed48 is defined at seed48.c:6:16
func Xseed48(tls TLS, _s uintptr /* *uint16 */) (r uintptr /* *uint16 */) {
	Xmemcpy(tls, x737p, X__seed48, uint64(6))
	Xmemcpy(tls, X__seed48, _s, uint64(6))
	return x737p
}

type t701__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t701__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// x1p [3]uint16, escapes: true, seed48.c:8:24
var x737p = bss + 3664

type t176size_t = uint64

// linking srand48.o

// Xsrand48 is defined at srand48.c:4:6
func Xsrand48(tls TLS, _seed int64) {
	X__assert_fail(tls, ts+0 /* "TODO(ccgo)" */, ts+3760 /* "src/prng/srand48..." */, int32(6), x738__func__)
}

type t702__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t702__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// x1__func__ [8]int8, escapes: true, srand48.c:5:1
var x738__func__ = ds + 44152

// linking execl.o

// Xexecl is defined at execl.c:5:5
func Xexecl(tls TLS, _path uintptr /* *int8 */, _argv0 uintptr /* *int8 */, ap ...interface{}) (r int32) {
	X__assert_fail(tls, ts+0 /* "TODO(ccgo)" */, ts+3780 /* "src/process/exec..." */, int32(7), x739__func__)
	return r
}

type t703__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t703__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// x1__func__ [6]int8, escapes: true, execl.c:6:1
var x739__func__ = ds + 44160

// linking execle.o

// Xexecle is defined at execle.c:5:5
func Xexecle(tls TLS, _path uintptr /* *int8 */, _argv0 uintptr /* *int8 */, ap ...interface{}) (r int32) {
	X__assert_fail(tls, ts+0 /* "TODO(ccgo)" */, ts+3800 /* "src/process/exec..." */, int32(7), x740__func__)
	return r
}

type t704__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t704__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// x1__func__ [7]int8, escapes: true, execle.c:6:1
var x740__func__ = ds + 44168

// linking execlp.o

// Xexeclp is defined at execlp.c:5:5
func Xexeclp(tls TLS, _file uintptr /* *int8 */, _argv0 uintptr /* *int8 */, ap ...interface{}) (r int32) {
	X__assert_fail(tls, ts+0 /* "TODO(ccgo)" */, ts+3824 /* "src/process/exec..." */, int32(7), x741__func__)
	return r
}

type t705__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t705__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// x1__func__ [7]int8, escapes: true, execlp.c:6:1
var x741__func__ = ds + 44176

// linking execv.o

// Xexecv is defined at execv.c:5:5
func Xexecv(tls TLS, _path uintptr /* *int8 */, _argv uintptr /* uintptr */) (r int32) {
	return Xexecve(tls, _path, _argv, *(*uintptr)(unsafe.Pointer(X__environ)))
}

type t706__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t706__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// linking execve.o

// Xexecve is defined at execve.c:4:5
func Xexecve(tls TLS, _path uintptr /* *int8 */, _argv uintptr /* uintptr */, _envp uintptr /* uintptr */) (r int32) {
	return int32(X__syscall_ret(tls, uint64(x34__syscall3(tls, int64(59), int64(_path), int64(_argv), int64(_envp)))))
}

type t707__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t707__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// x__syscall3 is defined at syscall_arch.h:33:22
func x34__syscall3(tls TLS, _n int64, _a1 int64, _a2 int64, _a3 int64) (r int64) {
	return X__syscall(tls, _n, _a1, _a2, _a3, int64(0), int64(0), int64(0))
}

// linking execvp.o

// X__execvpe is defined at execvp.c:11:5
func X__execvpe(tls TLS, _file uintptr /* *int8 */, _argv uintptr /* uintptr */, _envp uintptr /* uintptr */) (r int32) {
	X__assert_fail(tls, ts+0 /* "TODO(ccgo)" */, ts+3848 /* "src/process/exec..." */, int32(13), x742__func__)
	return r
}

// Xexecvp is defined at execvp.c:59:5
func Xexecvp(tls TLS, _file uintptr /* *int8 */, _argv uintptr /* uintptr */) (r int32) {
	return X__execvpe(tls, _file, _argv, *(*uintptr)(unsafe.Pointer(X__environ)))
}

type t708__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t708__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// x1__func__ [10]int8, escapes: true, execvp.c:12:1
var x742__func__ = ds + 44184

// linking fexecve.o

// Xfexecve is defined at fexecve.c:6:5
func Xfexecve(tls TLS, _fd int32, _argv uintptr /* uintptr */, _envp uintptr /* uintptr */) (r int32) {
	esc := MustMalloc(27)
	var _buf = esc // *[27]int8
	defer Free(esc)
	X__procfdname(tls, _buf, uint32(_fd))
	Xexecve(tls, _buf, _argv, _envp)
	if *(*int32)(unsafe.Pointer(X__errno_location(tls))) != int32(2) {
		goto _1
	}

	*(*int32)(unsafe.Pointer(X__errno_location(tls))) = int32(9)
_1:
	return int32(-1)
}

type t709__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t709__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// linking fork.o

// Xfork is defined at fork.c:14:7
func Xfork(tls TLS) (r int32) {
	esc := MustMalloc(128)
	var (
		_ret  int32
		_set  = esc   // *Tsigset_t = struct{F__bits [16]uint64;}
		_self uintptr // Tpthread_t = *S__pthread
	)
	defer Free(esc)
	X__fork_handler(tls, int32(-1))
	X__block_all_sigs(tls, _set)
	_ret = int32(x3__syscall0(tls, int64(57)))
	if _ret != 0 {
		goto _1
	}

	_self = x23__pthread_self(tls)
	*(*int32)(unsafe.Pointer(_self + 56)) = int32(x3__syscall0(tls, int64(186)))
	*(*int64)(unsafe.Pointer((_self + 160) + 8)) = int64(0)
	*(*uintptr)(unsafe.Pointer((_self + 160) + 16)) = null
	*(*int32)(unsafe.Pointer(X__libc + 12)) = int32(0)
_1:
	X__restore_sigs(tls, _set)
	X__fork_handler(tls, bool2int(_ret == 0))
	return int32(X__syscall_ret(tls, uint64(_ret)))
}

type t710__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t710__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// xdummy is defined at fork.c:8:13
func x10dummy(tls TLS, _x int32) {
}

type t16pid_t = int32

type s28__pthread = struct {
	Fself          uintptr // *S__pthread
	Fdtv           uintptr // **void
	Funused1       uintptr // *void
	Funused2       uintptr // *void
	Fsysinfo       uint64
	Fcanary        uint64
	Fcanary2       uint64
	Ftid           int32
	Ferrno_val     int32
	Fdetach_state  int32
	Fcancel        int32
	Fcanceldisable uint8
	Fcancelasync   uint8
	F74            uint8
	Fmap_base      uintptr // *uint8
	Fmap_size      uint64
	Fstack         uintptr // *void
	Fstack_size    uint64
	Fguard_size    uint64
	Fstart_arg     uintptr // *void
	Fstart         uintptr // *func(TLS, uintptr) uintptr
	Fresult        uintptr // *void
	Fcancelbuf     uintptr // *S__ptcb
	Ftsd           uintptr // **void
	Frobust_list   struct {
		Fhead    uintptr
		Foff     int64
		Fpending uintptr
	}
	Ftimer_id      int32
	Flocale        uintptr // Tlocale_t = *S__locale_struct
	Fkilllock      [1]int32
	Fdlerror_buf   uintptr // *int8
	Fstdio_locks   uintptr // *void
	Fcanary_at_end uint64
	Fdtv_copy      uintptr // **void
}

// x__syscall0 is defined at syscall_arch.h:8:22
func x3__syscall0(tls TLS, _n int64) (r int64) {
	return X__syscall(tls, _n, int64(0), int64(0), int64(0), int64(0), int64(0), int64(0))
}

// x__pthread_self is defined at pthread_arch.h:1:30
func x23__pthread_self(tls TLS) (r uintptr /* *S__pthread */) {
	return uintptr(tls)
	return r
}

type t32uintptr_t = uint64

type t177size_t = uint64

type s26__ptcb = struct {
	F__f    uintptr // *func(TLS, uintptr)
	F__x    uintptr // *void
	F__next uintptr // *S__ptcb
}

type s64__locale_struct = struct{ Fcat [6]uintptr }

// linking posix_spawn.o

func fp743(f func(TLS, uintptr) int32) uintptr { return *(*uintptr)(unsafe.Pointer(&f)) }

// X__posix_spawnx is defined at posix_spawn.c:153:5
func X__posix_spawnx(tls TLS, _res uintptr /* *Tpid_t = int32 */, _path uintptr /* *int8 */, _exec uintptr /* *func(TLS, uintptr, uintptr, uintptr) int32 */, _fa uintptr /* *Tposix_spawn_file_actions_t = s...tions uintptr;F__pad [16]int32;} */, _attr uintptr /* *Tposix_spawnattr_t = struct{F__...;F__pol int32;F__pad [16]int32;} */, _argv uintptr /* uintptr */, _envp uintptr /* uintptr */) (r int32) {
	esc := MustMalloc(5700)
	var (
		_pid      int32
		_stack    = esc        // *[5120]int8
		_ec       = esc + 5120 // *int32
		_cs       = esc + 5136 // *int32
		_args     = esc + 5152 // *Sargs
		_unnamed1 = esc + 5344 // *Tposix_spawnattr_t = struct{F__f...;F__pol int32;F__pad [16]int32;}
		_lit      = esc + 5680 // *[2]uint64
		_status   = esc + 5696 // *int32
	)
	defer Free(esc)
	*(*int32)(unsafe.Pointer(_ec)) = int32(0)
	if Xpipe2(tls, _args, int32(02000000)) == 0 {
		goto _1
	}

	return *(*int32)(unsafe.Pointer(X__errno_location(tls)))

_1:
	Xpthread_setcancelstate(tls, int32(1), _cs)
	*(*uintptr)(unsafe.Pointer(_args + 136)) = _path
	*(*uintptr)(unsafe.Pointer(_args + 144)) = _exec
	*(*uintptr)(unsafe.Pointer(_args + 152)) = _fa
	*(*uintptr)(unsafe.Pointer(_args + 160)) = func() uintptr {
		if _attr != 0 {
			return _attr
		}
		return func() uintptr {
			*(*struct {
				F__flags int32
				F__pgrp  int32
				F__def   struct{ F__bits [16]uint64 }
				F__mask  struct{ F__bits [16]uint64 }
				F__prio  int32
				F__pol   int32
				F__pad   [16]int32
			})(unsafe.Pointer(_unnamed1)) = struct {
				F__flags int32
				F__pgrp  int32
				F__def   struct{ F__bits [16]uint64 }
				F__mask  struct{ F__bits [16]uint64 }
				F__prio  int32
				F__pol   int32
				F__pad   [16]int32
			}{}
			return _unnamed1
		}()
	}()
	*(*uintptr)(unsafe.Pointer(_args + 168)) = _argv
	*(*uintptr)(unsafe.Pointer(_args + 176)) = _envp
	Copy(_lit, ts+3872 /* "\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff" */, 16)
	Xpthread_sigmask(tls, int32(0), _lit, _args+8)
	_pid = X__clone(tls, fp743(xchild), _stack+uintptr(5120), int32(16657), _args)
	Xclose(tls, *(*int32)(unsafe.Pointer(_args + 4)))
	if _pid <= int32(0) {
		goto _2
	}

	if uint64(Xread(tls, *(*int32)(unsafe.Pointer(_args)), _ec, uint64(4))) == uint64(4) {
		goto _4
	}

	*(*int32)(unsafe.Pointer(_ec)) = int32(0)
	goto _5

_4:
	Xwaitpid(tls, _pid, _status, int32(0))
_5:
	goto _3

_2:
	*(*int32)(unsafe.Pointer(_ec)) = -_pid
_3:
	Xclose(tls, *(*int32)(unsafe.Pointer(_args)))
	if *(*int32)(unsafe.Pointer(_ec)) != 0 || _res == 0 {
		goto _6
	}

	*(*int32)(unsafe.Pointer(_res)) = _pid
_6:
	Xpthread_sigmask(tls, int32(2), _args+8, null)
	Xpthread_setcancelstate(tls, *(*int32)(unsafe.Pointer(_cs)), null)
	return *(*int32)(unsafe.Pointer(_ec))
}

func fp744(f func(TLS, uintptr, uintptr, uintptr) int32) uintptr {
	return *(*uintptr)(unsafe.Pointer(&f))
}

// Xposix_spawn is defined at posix_spawn.c:203:5
func Xposix_spawn(tls TLS, _res uintptr /* *Tpid_t = int32 */, _path uintptr /* *int8 */, _fa uintptr /* *Tposix_spawn_file_actions_t = s...tions uintptr;F__pad [16]int32;} */, _attr uintptr /* *Tposix_spawnattr_t = struct{F__...;F__pol int32;F__pad [16]int32;} */, _argv uintptr /* uintptr */, _envp uintptr /* uintptr */) (r int32) {
	return X__posix_spawnx(tls, _res, _path, fp744(Xexecve), _fa, _attr, _argv, _envp)
}

type t711__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t711__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t17pid_t = int32

type Tsigset_t = struct{ F__bits [16]uint64 }

type s1args = struct {
	Fp       [2]int32
	Foldmask struct{ F__bits [16]uint64 }
	Fpath    uintptr // *int8
	Fexec    uintptr // *func(TLS, uintptr, uintptr, uintptr) int32
	Ffa      uintptr // *Tposix_spawn_file_actions_t = s...tions uintptr;F__pad [16]int32;}
	Fattr    uintptr // *Tposix_spawnattr_t = struct{F__...;F__pol int32;F__pad [16]int32;}
	Fargv    uintptr // **int8
	Fenvp    uintptr // **int8
}

type Tposix_spawnattr_t = struct {
	F__flags int32
	F__pgrp  int32
	F__def   struct{ F__bits [16]uint64 }
	F__mask  struct{ F__bits [16]uint64 }
	F__prio  int32
	F__pol   int32
	F__pad   [16]int32
}

func set745(p *int32, v int32) int32 { *p = v; return v }

func fn746(p uintptr) func(TLS, uintptr, uintptr, uintptr) int32 {
	return *(*func(TLS, uintptr, uintptr, uintptr) int32)(unsafe.Pointer(&p))
}

// xchild is defined at posix_spawn.c:35:12
func xchild(tls TLS, _args_vp uintptr /* *void */) (r int32) {
	esc := MustMalloc(304)
	var (
		_i    int32
		_ret  = esc      // *int32
		_sa   = esc + 16 // *Ssigaction
		_args uintptr    // *Sargs
		_p    int32
		_fa   uintptr     // *Tposix_spawn_file_actions_t = s...tions uintptr;F__pad [16]int32;}
		_attr uintptr     // *Tposix_spawnattr_t = struct{F__...;F__pol int32;F__pad [16]int32;}
		_hset = esc + 176 // *Tsigset_t = struct{F__bits [16]uint64;}
		_op   uintptr     // *Sfdop
		_fd   int32
	)
	defer Free(esc)
	Copy(_sa, ts+3892 /* "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00..." */, 152)
	_args = _args_vp
	_p = *(*int32)(unsafe.Pointer(_args + 4))
	_fa = *(*uintptr)(unsafe.Pointer(_args + 152))
	_attr = *(*uintptr)(unsafe.Pointer(_args + 160))
	Xclose(tls, *(*int32)(unsafe.Pointer(_args)))
	X__get_handler_set(tls, _hset)
	_i = int32(1)
_1:
	if _i >= int32(65) {
		goto _3
	}

	if *(*int32)(unsafe.Pointer(_attr))&int32(4) == 0 || Xsigismember(tls, _attr+8, _i) == 0 {
		goto _4
	}

	*(*uintptr)(unsafe.Pointer(_sa)) = null
	goto _5

_4:
	if Xsigismember(tls, _hset, _i) == 0 {
		goto _6
	}

	if uint32(_i-int32(32)) >= uint32(3) {
		goto _8
	}

	*(*uintptr)(unsafe.Pointer(_sa)) = uintptr(1)
	goto _9

_8:
	X__libc_sigaction(tls, _i, null, _sa)
	if *(*uintptr)(unsafe.Pointer(_sa)) != uintptr(1) {
		goto _10
	}

	goto _2

_10:
	*(*uintptr)(unsafe.Pointer(_sa)) = null
_9:
	goto _7

_6:
	goto _2

_7:
_5:
	X__libc_sigaction(tls, _i, _sa, null)

_2:
	_i++
	goto _1

_3:
	if (*(*int32)(unsafe.Pointer(_attr)) & int32(128)) == 0 {
		goto _11
	}

	if set745((*int32)(unsafe.Pointer(_ret)), int32(x4__syscall0(tls, int64(112)))) >= int32(0) {
		goto _12
	}

	goto lfail

_12:
_11:
	if (*(*int32)(unsafe.Pointer(_attr)) & int32(2)) == 0 {
		goto _13
	}

	if set745((*int32)(unsafe.Pointer(_ret)), int32(x29__syscall2(tls, int64(109), int64(0), int64(*(*int32)(unsafe.Pointer(_attr + 4)))))) == 0 {
		goto _14
	}

	goto lfail

_14:
_13:
	if (*(*int32)(unsafe.Pointer(_attr)) & int32(1)) == 0 {
		goto _15
	}

	if set745((*int32)(unsafe.Pointer(_ret)), int32(x28__syscall1(tls, int64(106), x4__syscall0(tls, int64(104))))) == 0 && set745((*int32)(unsafe.Pointer(_ret)), int32(x28__syscall1(tls, int64(105), x4__syscall0(tls, int64(102))))) == 0 {
		goto _16
	}

	goto lfail

_16:
_15:
	if _fa == 0 || *(*uintptr)(unsafe.Pointer(_fa + 8)) == 0 {
		goto _17
	}

	_op = *(*uintptr)(unsafe.Pointer(_fa + 8))
_18:
	if *(*uintptr)(unsafe.Pointer(_op)) == 0 {
		goto _20
	}

	_op = *(*uintptr)(unsafe.Pointer(_op))
	goto _18

_20:
_21:
	if _op == 0 {
		goto _23
	}

	if *(*int32)(unsafe.Pointer(_op + 20)) != _p {
		goto _24
	}

	*(*int32)(unsafe.Pointer(_ret)) = int32(x28__syscall1(tls, int64(32), int64(_p)))
	if *(*int32)(unsafe.Pointer(_ret)) >= int32(0) {
		goto _25
	}

	goto lfail

_25:
	x28__syscall1(tls, int64(3), int64(_p))
	_p = *(*int32)(unsafe.Pointer(_ret))
_24:
	switch *(*int32)(unsafe.Pointer(_op + 16)) {
	case int32(1):
		goto _27
	case int32(2):
		goto _28
	case int32(3):
		goto _29
	}
	goto _26

_27:
	x28__syscall1(tls, int64(3), int64(*(*int32)(unsafe.Pointer(_op + 20))))
	goto _26

_28:
	_fd = *(*int32)(unsafe.Pointer(_op + 24))
	if _fd == *(*int32)(unsafe.Pointer(_op + 20)) {
		goto _30
	}

	if set745((*int32)(unsafe.Pointer(_ret)), x__sys_dup2(tls, _fd, *(*int32)(unsafe.Pointer(_op + 20)))) >= int32(0) {
		goto _32
	}

	goto lfail

_32:
	goto _31

_30:
	*(*int32)(unsafe.Pointer(_ret)) = int32(x29__syscall2(tls, int64(72), int64(_fd), int64(1)))
	*(*int32)(unsafe.Pointer(_ret)) = int32(x35__syscall3(tls, int64(72), int64(_fd), int64(2), int64(*(*int32)(unsafe.Pointer(_ret))&int32(-2))))
	if *(*int32)(unsafe.Pointer(_ret)) >= int32(0) {
		goto _33
	}

	goto lfail

_33:
_31:
	goto _26

_29:
	_fd = int32(x35__syscall3(tls, int64(2), int64(_op+40), int64(*(*int32)(unsafe.Pointer(_op + 28))|int32(0)), int64(*(*uint32)(unsafe.Pointer(_op + 32)))))
	if set745((*int32)(unsafe.Pointer(_ret)), _fd) >= int32(0) {
		goto _34
	}

	goto lfail

_34:
	if _fd == *(*int32)(unsafe.Pointer(_op + 20)) {
		goto _35
	}

	if set745((*int32)(unsafe.Pointer(_ret)), x__sys_dup2(tls, _fd, *(*int32)(unsafe.Pointer(_op + 20)))) >= int32(0) {
		goto _36
	}

	goto lfail

_36:
	x28__syscall1(tls, int64(3), int64(_fd))
_35:
	goto _26

_26:
	_op = *(*uintptr)(unsafe.Pointer(_op + 8))
	goto _21

_23:
_17:
	x35__syscall3(tls, int64(72), int64(_p), int64(2), int64(1))
	Xpthread_sigmask(tls, int32(2), func() uintptr {
		if *(*int32)(unsafe.Pointer(_attr))&int32(8) != 0 {
			return _attr + 136
		}
		return _args + 8
	}(), null)
	fn746(*(*uintptr)(unsafe.Pointer(_args + 144)))(tls, *(*uintptr)(unsafe.Pointer(_args + 136)), *(*uintptr)(unsafe.Pointer(_args + 168)), *(*uintptr)(unsafe.Pointer(_args + 176)))
	*(*int32)(unsafe.Pointer(_ret)) = -*(*int32)(unsafe.Pointer(X__errno_location(tls)))
	goto lfail
lfail:
	*(*int32)(unsafe.Pointer(_ret)) = -*(*int32)(unsafe.Pointer(_ret))
	if *(*int32)(unsafe.Pointer(_ret)) == 0 {
		goto _37
	}

_38:
	if x35__syscall3(tls, int64(1), int64(_p), int64(_ret), int64(4)) >= int64(0) {
		goto _39
	}

	goto _38

_39:
_37:
	X_exit(tls, int32(127))
	return r
}

type Ssigaction = struct {
	F__sa_handler struct {
		Fsa_handler   [0]uintptr
		Fsa_sigaction [0]uintptr
		F             int64
	}
	Fsa_mask     struct{ F__bits [16]uint64 }
	Fsa_flags    int32
	Fsa_restorer uintptr // *func(TLS)
}

type Sfdop = struct {
	Fnext  uintptr // *Sfdop
	Fprev  uintptr // *Sfdop
	Fcmd   int32
	Ffd    int32
	Fsrcfd int32
	Foflag int32
	Fmode  uint32
	Fpath  uintptr
}

// x__syscall0 is defined at syscall_arch.h:8:22
func x4__syscall0(tls TLS, _n int64) (r int64) {
	return X__syscall(tls, _n, int64(0), int64(0), int64(0), int64(0), int64(0), int64(0))
}

// x__syscall2 is defined at syscall_arch.h:24:22
func x29__syscall2(tls TLS, _n int64, _a1 int64, _a2 int64) (r int64) {
	return X__syscall(tls, _n, _a1, _a2, int64(0), int64(0), int64(0), int64(0))
}

// x__syscall1 is defined at syscall_arch.h:16:22
func x28__syscall1(tls TLS, _n int64, _a1 int64) (r int64) {
	return X__syscall(tls, _n, _a1, int64(0), int64(0), int64(0), int64(0), int64(0))
}

// x__sys_dup2 is defined at posix_spawn.c:26:12
func x__sys_dup2(tls TLS, _old int32, _new int32) (r int32) {
	return int32(x29__syscall2(tls, int64(33), int64(_old), int64(_new)))
}

// x__syscall3 is defined at syscall_arch.h:33:22
func x35__syscall3(tls TLS, _n int64, _a1 int64, _a2 int64, _a3 int64) (r int64) {
	return X__syscall(tls, _n, _a1, _a2, _a3, int64(0), int64(0), int64(0))
}

type t14mode_t = uint32

type t178size_t = uint64

type t35ssize_t = int64

// linking posix_spawn_file_actions_addclose.o

func set747(p *uintptr, v uintptr) uintptr { *p = v; return v }

// Xposix_spawn_file_actions_addclose is defined at posix_spawn_file_actions_addclose.c:6:5
func Xposix_spawn_file_actions_addclose(tls TLS, _fa uintptr /* *Tposix_spawn_file_actions_t = s...tions uintptr;F__pad [16]int32;} */, _fd int32) (r int32) {
	var _op uintptr // *Sfdop

	_op = Xmalloc(tls, uint64(48))
	if _op != 0 {
		goto _1
	}

	return int32(12)

_1:
	*(*int32)(unsafe.Pointer(_op + 16)) = int32(1)
	*(*int32)(unsafe.Pointer(_op + 20)) = _fd
	if set747((*uintptr)(unsafe.Pointer(_op)), *(*uintptr)(unsafe.Pointer(_fa + 8))) == 0 {
		goto _2
	}

	*(*uintptr)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_op)) + 8)) = _op
_2:
	*(*uintptr)(unsafe.Pointer(_op + 8)) = null
	*(*uintptr)(unsafe.Pointer(_fa + 8)) = _op
	return int32(0)
}

type t712__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t712__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type s1fdop = struct {
	Fnext  uintptr // *Sfdop
	Fprev  uintptr // *Sfdop
	Fcmd   int32
	Ffd    int32
	Fsrcfd int32
	Foflag int32
	Fmode  uint32
	Fpath  uintptr
}

type t15mode_t = uint32

type t179size_t = uint64

// linking posix_spawn_file_actions_adddup2.o

func set748(p *uintptr, v uintptr) uintptr { *p = v; return v }

// Xposix_spawn_file_actions_adddup2 is defined at posix_spawn_file_actions_adddup2.c:6:5
func Xposix_spawn_file_actions_adddup2(tls TLS, _fa uintptr /* *Tposix_spawn_file_actions_t = s...tions uintptr;F__pad [16]int32;} */, _srcfd int32, _fd int32) (r int32) {
	var _op uintptr // *Sfdop

	_op = Xmalloc(tls, uint64(48))
	if _op != 0 {
		goto _1
	}

	return int32(12)

_1:
	*(*int32)(unsafe.Pointer(_op + 16)) = int32(2)
	*(*int32)(unsafe.Pointer(_op + 24)) = _srcfd
	*(*int32)(unsafe.Pointer(_op + 20)) = _fd
	if set748((*uintptr)(unsafe.Pointer(_op)), *(*uintptr)(unsafe.Pointer(_fa + 8))) == 0 {
		goto _2
	}

	*(*uintptr)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_op)) + 8)) = _op
_2:
	*(*uintptr)(unsafe.Pointer(_op + 8)) = null
	*(*uintptr)(unsafe.Pointer(_fa + 8)) = _op
	return int32(0)
}

type t713__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t713__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type s2fdop = struct {
	Fnext  uintptr // *Sfdop
	Fprev  uintptr // *Sfdop
	Fcmd   int32
	Ffd    int32
	Fsrcfd int32
	Foflag int32
	Fmode  uint32
	Fpath  uintptr
}

type t16mode_t = uint32

type t180size_t = uint64

// linking posix_spawn_file_actions_addopen.o

func set749(p *uintptr, v uintptr) uintptr { *p = v; return v }

// Xposix_spawn_file_actions_addopen is defined at posix_spawn_file_actions_addopen.c:7:5
func Xposix_spawn_file_actions_addopen(tls TLS, _fa uintptr /* *Tposix_spawn_file_actions_t = s...tions uintptr;F__pad [16]int32;} */, _fd int32, _path uintptr /* *int8 */, _flags int32, _mode uint32) (r int32) {
	var _op uintptr // *Sfdop

	_op = Xmalloc(tls, uint64(48)+Xstrlen(tls, _path)+uint64(1))
	if _op != 0 {
		goto _1
	}

	return int32(12)

_1:
	*(*int32)(unsafe.Pointer(_op + 16)) = int32(3)
	*(*int32)(unsafe.Pointer(_op + 20)) = _fd
	*(*int32)(unsafe.Pointer(_op + 28)) = _flags
	*(*uint32)(unsafe.Pointer(_op + 32)) = _mode
	Xstrcpy(tls, _op+40, _path)
	if set749((*uintptr)(unsafe.Pointer(_op)), *(*uintptr)(unsafe.Pointer(_fa + 8))) == 0 {
		goto _2
	}

	*(*uintptr)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_op)) + 8)) = _op
_2:
	*(*uintptr)(unsafe.Pointer(_op + 8)) = null
	*(*uintptr)(unsafe.Pointer(_fa + 8)) = _op
	return int32(0)
}

type t714__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t714__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t17mode_t = uint32

type s3fdop = struct {
	Fnext  uintptr // *Sfdop
	Fprev  uintptr // *Sfdop
	Fcmd   int32
	Ffd    int32
	Fsrcfd int32
	Foflag int32
	Fmode  uint32
	Fpath  uintptr
}

type t181size_t = uint64

// linking posix_spawn_file_actions_destroy.o

// Xposix_spawn_file_actions_destroy is defined at posix_spawn_file_actions_destroy.c:5:5
func Xposix_spawn_file_actions_destroy(tls TLS, _fa uintptr /* *Tposix_spawn_file_actions_t = s...tions uintptr;F__pad [16]int32;} */) (r int32) {
	var (
		_op   uintptr // *Sfdop
		_next uintptr // *Sfdop
	)
	_op = *(*uintptr)(unsafe.Pointer(_fa + 8))
_1:
	if _op == 0 {
		goto _2
	}

	_next = *(*uintptr)(unsafe.Pointer(_op))
	Xfree(tls, _op)
	_op = _next
	goto _1

_2:
	return int32(0)
}

type t715__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t715__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type s4fdop = struct {
	Fnext  uintptr // *Sfdop
	Fprev  uintptr // *Sfdop
	Fcmd   int32
	Ffd    int32
	Fsrcfd int32
	Foflag int32
	Fmode  uint32
	Fpath  uintptr
}

type t18mode_t = uint32

// linking posix_spawn_file_actions_init.o

// Xposix_spawn_file_actions_init is defined at posix_spawn_file_actions_init.c:3:5
func Xposix_spawn_file_actions_init(tls TLS, _fa uintptr /* *Tposix_spawn_file_actions_t = s...tions uintptr;F__pad [16]int32;} */) (r int32) {
	*(*uintptr)(unsafe.Pointer(_fa + 8)) = null
	return int32(0)
}

type t716__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t716__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// linking posix_spawnattr_destroy.o

// Xposix_spawnattr_destroy is defined at posix_spawnattr_destroy.c:3:5
func Xposix_spawnattr_destroy(tls TLS, _attr uintptr /* *Tposix_spawnattr_t = struct{F__...;F__pol int32;F__pad [16]int32;} */) (r int32) {
	return int32(0)
}

type t717__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t717__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t18pid_t = int32

type t1sigset_t = struct{ F__bits [16]uint64 }

// linking posix_spawnattr_getflags.o

// Xposix_spawnattr_getflags is defined at posix_spawnattr_getflags.c:3:5
func Xposix_spawnattr_getflags(tls TLS, _attr uintptr /* *Tposix_spawnattr_t = struct{F__...;F__pol int32;F__pad [16]int32;} */, _flags uintptr /* *int16 */) (r int32) {
	*(*int16)(unsafe.Pointer(_flags)) = int16(*(*int32)(unsafe.Pointer(_attr)))
	return int32(0)
}

type t718__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t718__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t19pid_t = int32

type t2sigset_t = struct{ F__bits [16]uint64 }

// linking posix_spawnattr_getpgroup.o

// Xposix_spawnattr_getpgroup is defined at posix_spawnattr_getpgroup.c:3:5
func Xposix_spawnattr_getpgroup(tls TLS, _attr uintptr /* *Tposix_spawnattr_t = struct{F__...;F__pol int32;F__pad [16]int32;} */, _pgrp uintptr /* *Tpid_t = int32 */) (r int32) {
	*(*int32)(unsafe.Pointer(_pgrp)) = *(*int32)(unsafe.Pointer(_attr + 4))
	return int32(0)
}

type t719__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t719__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t20pid_t = int32

type t3sigset_t = struct{ F__bits [16]uint64 }

// linking posix_spawnattr_getsigdefault.o

// Xposix_spawnattr_getsigdefault is defined at posix_spawnattr_getsigdefault.c:3:5
func Xposix_spawnattr_getsigdefault(tls TLS, _attr uintptr /* *Tposix_spawnattr_t = struct{F__...;F__pol int32;F__pad [16]int32;} */, _def uintptr /* *Tsigset_t = struct{F__bits [16]uint64;} */) (r int32) {
	*(*struct{ F__bits [16]uint64 })(unsafe.Pointer(_def)) = *(*struct{ F__bits [16]uint64 })(unsafe.Pointer(_attr + 8))
	return int32(0)
}

type t720__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t720__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t21pid_t = int32

type t4sigset_t = struct{ F__bits [16]uint64 }

// linking posix_spawnattr_getsigmask.o

// Xposix_spawnattr_getsigmask is defined at posix_spawnattr_getsigmask.c:3:5
func Xposix_spawnattr_getsigmask(tls TLS, _attr uintptr /* *Tposix_spawnattr_t = struct{F__...;F__pol int32;F__pad [16]int32;} */, _mask uintptr /* *Tsigset_t = struct{F__bits [16]uint64;} */) (r int32) {
	*(*struct{ F__bits [16]uint64 })(unsafe.Pointer(_mask)) = *(*struct{ F__bits [16]uint64 })(unsafe.Pointer(_attr + 136))
	return int32(0)
}

type t721__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t721__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t22pid_t = int32

type t5sigset_t = struct{ F__bits [16]uint64 }

// linking posix_spawnattr_init.o

// Xposix_spawnattr_init is defined at posix_spawnattr_init.c:3:5
func Xposix_spawnattr_init(tls TLS, _attr uintptr /* *Tposix_spawnattr_t = struct{F__...;F__pol int32;F__pad [16]int32;} */) (r int32) {
	var _unnamed1 struct {
		F__flags int32
		F__pgrp  int32
		F__def   struct{ F__bits [16]uint64 }
		F__mask  struct{ F__bits [16]uint64 }
		F__prio  int32
		F__pol   int32
		F__pad   [16]int32
	}
	_ = _unnamed1
	*(*struct {
		F__flags int32
		F__pgrp  int32
		F__def   struct{ F__bits [16]uint64 }
		F__mask  struct{ F__bits [16]uint64 }
		F__prio  int32
		F__pol   int32
		F__pad   [16]int32
	})(unsafe.Pointer(_attr)) = struct {
		F__flags int32
		F__pgrp  int32
		F__def   struct{ F__bits [16]uint64 }
		F__mask  struct{ F__bits [16]uint64 }
		F__prio  int32
		F__pol   int32
		F__pad   [16]int32
	}{}
	return int32(0)
}

type t722__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t722__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t23pid_t = int32

type t6sigset_t = struct{ F__bits [16]uint64 }

type t1posix_spawnattr_t = struct {
	F__flags int32
	F__pgrp  int32
	F__def   struct{ F__bits [16]uint64 }
	F__mask  struct{ F__bits [16]uint64 }
	F__prio  int32
	F__pol   int32
	F__pad   [16]int32
}

// linking posix_spawnattr_sched.o

// Xposix_spawnattr_getschedparam is defined at posix_spawnattr_sched.c:5:5
func Xposix_spawnattr_getschedparam(tls TLS, _attr uintptr /* *Tposix_spawnattr_t = struct{F__...;F__pol int32;F__pad [16]int32;} */, _schedparam uintptr /* *Ssched_param */) (r int32) {
	return int32(38)
}

// Xposix_spawnattr_setschedparam is defined at posix_spawnattr_sched.c:11:5
func Xposix_spawnattr_setschedparam(tls TLS, _attr uintptr /* *Tposix_spawnattr_t = struct{F__...;F__pol int32;F__pad [16]int32;} */, _schedparam uintptr /* *Ssched_param */) (r int32) {
	return int32(38)
}

// Xposix_spawnattr_getschedpolicy is defined at posix_spawnattr_sched.c:17:5
func Xposix_spawnattr_getschedpolicy(tls TLS, _attr uintptr /* *Tposix_spawnattr_t = struct{F__...;F__pol int32;F__pad [16]int32;} */, _policy uintptr /* *int32 */) (r int32) {
	return int32(38)
}

// Xposix_spawnattr_setschedpolicy is defined at posix_spawnattr_sched.c:22:5
func Xposix_spawnattr_setschedpolicy(tls TLS, _attr uintptr /* *Tposix_spawnattr_t = struct{F__...;F__pol int32;F__pad [16]int32;} */, _policy int32) (r int32) {
	return int32(38)
}

type t723__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t723__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t24pid_t = int32

type t7sigset_t = struct{ F__bits [16]uint64 }

type Ssched_param = struct {
	Fsched_priority        int32
	Fsched_ss_low_priority int32
	Fsched_ss_repl_period  s16timespec
	Fsched_ss_init_budget  s16timespec
	Fsched_ss_max_repl     int32
}

type s16timespec = struct {
	Ftv_sec  int64
	Ftv_nsec int64
}

type t29time_t = int64

// linking posix_spawnattr_setflags.o

// Xposix_spawnattr_setflags is defined at posix_spawnattr_setflags.c:4:5
func Xposix_spawnattr_setflags(tls TLS, _attr uintptr /* *Tposix_spawnattr_t = struct{F__...;F__pol int32;F__pad [16]int32;} */, _flags int16) (r int32) {
	var _all_flags uint32

	_all_flags = uint32(255)
	if (uint32(_flags) & ^_all_flags) == 0 {
		goto _1
	}

	return int32(22)

_1:
	*(*int32)(unsafe.Pointer(_attr)) = int32(_flags)
	return int32(0)
}

type t724__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t724__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t25pid_t = int32

type t8sigset_t = struct{ F__bits [16]uint64 }

// linking posix_spawnattr_setpgroup.o

// Xposix_spawnattr_setpgroup is defined at posix_spawnattr_setpgroup.c:3:5
func Xposix_spawnattr_setpgroup(tls TLS, _attr uintptr /* *Tposix_spawnattr_t = struct{F__...;F__pol int32;F__pad [16]int32;} */, _pgrp int32) (r int32) {
	*(*int32)(unsafe.Pointer(_attr + 4)) = _pgrp
	return int32(0)
}

type t725__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t725__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t26pid_t = int32

type t9sigset_t = struct{ F__bits [16]uint64 }

// linking posix_spawnattr_setsigdefault.o

// Xposix_spawnattr_setsigdefault is defined at posix_spawnattr_setsigdefault.c:3:5
func Xposix_spawnattr_setsigdefault(tls TLS, _attr uintptr /* *Tposix_spawnattr_t = struct{F__...;F__pol int32;F__pad [16]int32;} */, _def uintptr /* *Tsigset_t = struct{F__bits [16]uint64;} */) (r int32) {
	*(*struct{ F__bits [16]uint64 })(unsafe.Pointer(_attr + 8)) = *(*struct{ F__bits [16]uint64 })(unsafe.Pointer(_def))
	return int32(0)
}

type t726__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t726__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t27pid_t = int32

type t10sigset_t = struct{ F__bits [16]uint64 }

// linking posix_spawnattr_setsigmask.o

// Xposix_spawnattr_setsigmask is defined at posix_spawnattr_setsigmask.c:3:5
func Xposix_spawnattr_setsigmask(tls TLS, _attr uintptr /* *Tposix_spawnattr_t = struct{F__...;F__pol int32;F__pad [16]int32;} */, _mask uintptr /* *Tsigset_t = struct{F__bits [16]uint64;} */) (r int32) {
	*(*struct{ F__bits [16]uint64 })(unsafe.Pointer(_attr + 136)) = *(*struct{ F__bits [16]uint64 })(unsafe.Pointer(_mask))
	return int32(0)
}

type t727__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t727__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t28pid_t = int32

type t11sigset_t = struct{ F__bits [16]uint64 }

// linking posix_spawnp.o

func fp750(f func(TLS, uintptr, uintptr, uintptr) int32) uintptr {
	return *(*uintptr)(unsafe.Pointer(&f))
}

// Xposix_spawnp is defined at posix_spawnp.c:11:5
func Xposix_spawnp(tls TLS, _res uintptr /* *Tpid_t = int32 */, _file uintptr /* *int8 */, _fa uintptr /* *Tposix_spawn_file_actions_t = s...tions uintptr;F__pad [16]int32;} */, _attr uintptr /* *Tposix_spawnattr_t = struct{F__...;F__pol int32;F__pad [16]int32;} */, _argv uintptr /* uintptr */, _envp uintptr /* uintptr */) (r int32) {
	return X__posix_spawnx(tls, _res, _file, fp750(X__execvpe), _fa, _attr, _argv, _envp)
}

type t728__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t728__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t29pid_t = int32

type t12sigset_t = struct{ F__bits [16]uint64 }

// linking system.o

// Xsystem is defined at system.c:13:5
func Xsystem(tls TLS, _cmd uintptr /* *int8 */) (r int32) {
	esc := MustMalloc(1128)
	var (
		_pid     = esc       // *Tpid_t = int32
		_old     = esc + 16  // *Tsigset_t = struct{F__bits [16]uint64;}
		_reset   = esc + 144 // *Tsigset_t = struct{F__bits [16]uint64;}
		_sa      = esc + 272 // *Ssigaction
		_oldint  = esc + 432 // *Ssigaction
		_oldquit = esc + 592 // *Ssigaction
		_status  = esc + 752 // *int32
		_ret     int32
		_attr    = esc + 768  // *Tposix_spawnattr_t = struct{F__f...;F__pol int32;F__pad [16]int32;}
		_sh      = esc + 1104 // *[3]*int8
	)
	defer Free(esc)
	*(*uintptr)(unsafe.Pointer(_sa)) = uintptr(1)
	*(*int32)(unsafe.Pointer(_status)) = int32(0x7f00)
	Xpthread_testcancel(tls)
	if _cmd != 0 {
		goto _1
	}

	return int32(1)

_1:
	Xsigaction(tls, int32(2), _sa, _oldint)
	Xsigaction(tls, int32(3), _sa, _oldquit)
	Xsigaddset(tls, _sa+8, int32(17))
	Xsigprocmask(tls, int32(0), _sa+8, _old)
	Xsigemptyset(tls, _reset)
	if *(*uintptr)(unsafe.Pointer(_oldint)) == uintptr(1) {
		goto _2
	}

	Xsigaddset(tls, _reset, int32(2))
_2:
	if *(*uintptr)(unsafe.Pointer(_oldquit)) == uintptr(1) {
		goto _3
	}

	Xsigaddset(tls, _reset, int32(3))
_3:
	Xposix_spawnattr_init(tls, _attr)
	Xposix_spawnattr_setsigmask(tls, _attr, _old)
	Xposix_spawnattr_setsigdefault(tls, _attr, _reset)
	Xposix_spawnattr_setflags(tls, _attr, int16(12))
	*(*uintptr)(unsafe.Pointer(_sh)) = ts + 2332 /* "sh" */
	*(*uintptr)(unsafe.Pointer(_sh + 8)) = _cmd
	*(*uintptr)(unsafe.Pointer(_sh + 16)) = null
	_ret = Xposix_spawn(tls, _pid, ts+2324 /* "/bin/sh" */, null, _attr, _sh, *(*uintptr)(unsafe.Pointer(X__environ)))
	Xposix_spawnattr_destroy(tls, _attr)
	if _ret != 0 {
		goto _4
	}

_5:
	if Xwaitpid(tls, *(*int32)(unsafe.Pointer(_pid)), _status, int32(0)) >= int32(0) || *(*int32)(unsafe.Pointer(X__errno_location(tls))) != int32(4) {
		goto _6
	}

	goto _5

_6:
_4:
	Xsigaction(tls, int32(2), _oldint, null)
	Xsigaction(tls, int32(3), _oldquit, null)
	Xsigprocmask(tls, int32(2), _old, null)
	if _ret == 0 {
		goto _7
	}

	*(*int32)(unsafe.Pointer(X__errno_location(tls))) = _ret
_7:
	return *(*int32)(unsafe.Pointer(_status))
}

type t729__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t729__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type s1sigaction = struct {
	F__sa_handler struct {
		Fsa_handler   [0]uintptr
		Fsa_sigaction [0]uintptr
		F             int64
	}
	Fsa_mask     struct{ F__bits [16]uint64 }
	Fsa_flags    int32
	Fsa_restorer uintptr // *func(TLS)
}

type t30pid_t = int32

type t13sigset_t = struct{ F__bits [16]uint64 }

// linking wait.o

// Xwait is defined at wait.c:3:7
func Xwait(tls TLS, _status uintptr /* *int32 */) (r int32) {
	return Xwaitpid(tls, int32(-1), _status, int32(0))
}

type t730__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t730__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t31pid_t = int32

// linking waitid.o

// Xwaitid is defined at waitid.c:6:5
func Xwaitid(tls TLS, _type int32, _id uint32, _info uintptr /* *Tsiginfo_t = struct{Fsi_signo i...uint32;};F int64; _ [104]byte};} */, _options int32) (r int32) {
	X__assert_fail(tls, ts+0 /* "TODO(ccgo)" */, ts+4048 /* "src/process/wait..." */, int32(8), x751__func__)
	return r
}

type t731__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t731__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type Tidtype_t = int32

type t2id_t = uint32

type t32pid_t = int32

type t18uid_t = uint32

type u4sigval = struct {
	Fsival_int [0]int32
	Fsival_ptr [0]uintptr // *void
	F          int64
}

type t1clock_t = int64

// x1__func__ [7]int8, escapes: true, waitid.c:7:1
var x751__func__ = ds + 44200

// linking waitpid.o

// Xwaitpid is defined at waitpid.c:6:7
func Xwaitpid(tls TLS, _pid int32, _status uintptr /* *int32 */, _options int32) (r int32) {
	return int32(X__syscall_ret(tls, uint64(X__syscall_cp(tls, int64(61), int64(_pid), int64(_status), int64(_options), int64(0), int64(0), int64(0)))))
}

type t732__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t732__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t33pid_t = int32

type t4syscall_arg_t = int64

// linking vfork.o

// linking src/process/x86_64/vfork.s

// .global __vfork
// .weak vfork
// .type __vfork,@function
// .type vfork,@function
// __vfork:
// vfork:
// 	pop %rdx
// 	mov $58,%eax
// 	syscall
// 	push %rdx
// 	mov %rax,%rdi
// 	jmp __syscall_ret

// linking fnmatch.o

func set752(p *int32, v int32) int32 { *p = v; return v }

// Xfnmatch is defined at fnmatch.c:298:5
func Xfnmatch(tls TLS, _pat uintptr /* *int8 */, _str uintptr /* *int8 */, _flags int32) (r int32) {
	esc := MustMalloc(8)
	var (
		_s   uintptr // *int8
		_p   uintptr // *int8
		_inc = esc   // *Tsize_t = uint64
		_c   int32
	)
	defer Free(esc)
	if (_flags & int32(0x1)) == 0 {
		goto _1
	}

_3:
	_s = _str
_6:
	if *(*int8)(unsafe.Pointer(_s)) == 0 || int32(*(*int8)(unsafe.Pointer(_s))) == int32('/') {
		goto _8
	}

	_s++
	goto _6

_8:
	_p = _pat
_9:
	if set752(&_c, xpat_next(tls, _p, uint64(18446744073709551615), _inc, _flags)) == int32(0) || _c == int32('/') {
		goto _11
	}

	_p += uintptr(*(*uint64)(unsafe.Pointer(_inc)))
	goto _9

_11:
	if _c == int32(*(*int8)(unsafe.Pointer(_s))) || *(*int8)(unsafe.Pointer(_s)) != 0 && _flags&int32(0x8) != 0 {
		goto _12
	}

	return int32(1)

_12:
	if xfnmatch_internal(tls, _pat, uint64(int64(_p-_pat)), _str, uint64(int64(_s-_str)), _flags) == 0 {
		goto _13
	}

	return int32(1)

_13:
	if _c != 0 {
		goto _14
	}

	return int32(0)

_14:
	_str = _s + uintptr(1)
	_pat = _p + uintptr(*(*uint64)(unsafe.Pointer(_inc)))
	goto _3

	goto _2

_1:
	if (_flags & int32(0x8)) == 0 {
		goto _15
	}

	_s = _str
_16:
	if *(*int8)(unsafe.Pointer(_s)) == 0 {
		goto _18
	}

	if int32(*(*int8)(unsafe.Pointer(_s))) == int32('/') {
		goto _19
	}

	goto _17

_19:
	if xfnmatch_internal(tls, _pat, uint64(18446744073709551615), _str, uint64(int64(_s-_str)), _flags) != 0 {
		goto _20
	}

	return int32(0)

_20:
_17:
	_s++
	goto _16

_18:
_15:
_2:
	return xfnmatch_internal(tls, _pat, uint64(18446744073709551615), _str, uint64(18446744073709551615), _flags)
}

type t733__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t733__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// xpat_next is defined at fnmatch.c:49:12
func xpat_next(tls TLS, _pat uintptr /* *int8 */, _m uint64, _step uintptr /* *Tsize_t = uint64 */, _flags int32) (r int32) {
	esc := MustMalloc(4)
	var (
		_esc int32
		_k   uint64
		_z   int32
		_wc  = esc // *Twchar_t = int32
		_1k  int32
	)
	defer Free(esc)
	_esc = int32(0)
	if _m != 0 && *(*int8)(unsafe.Pointer(_pat)) != 0 {
		goto _1
	}

	*(*uint64)(unsafe.Pointer(_step)) = uint64(0)
	return int32(0)

_1:
	*(*uint64)(unsafe.Pointer(_step)) = uint64(1)
	if int32(*(*int8)(unsafe.Pointer(_pat))) != int32('\\') || *(*int8)(unsafe.Pointer(_pat + 1)) == 0 || _flags&int32(0x2) != 0 {
		goto _2
	}

	*(*uint64)(unsafe.Pointer(_step)) = uint64(2)
	_pat++
	_esc = int32(1)
	goto lescaped

_2:
	if int32(*(*int8)(unsafe.Pointer(_pat))) != int32('[') {
		goto _3
	}

	_k = uint64(1)
	if _k >= _m {
		goto _4
	}

	if int32(*(*int8)(unsafe.Pointer(_pat + uintptr(_k)))) != int32('^') && int32(*(*int8)(unsafe.Pointer(_pat + uintptr(_k)))) != int32('!') {
		goto _5
	}

	_k++
_5:
_4:
	if _k >= _m {
		goto _6
	}

	if int32(*(*int8)(unsafe.Pointer(_pat + uintptr(_k)))) != int32(']') {
		goto _7
	}

	_k++
_7:
_6:
_8:
	if _k >= _m || *(*int8)(unsafe.Pointer(_pat + uintptr(_k))) == 0 || int32(*(*int8)(unsafe.Pointer(_pat + uintptr(_k)))) == int32(']') {
		goto _10
	}

	if _k+uint64(1) >= _m || *(*int8)(unsafe.Pointer(_pat + uintptr(_k+uint64(1)))) == 0 || int32(*(*int8)(unsafe.Pointer(_pat + uintptr(_k)))) != int32('[') || int32(*(*int8)(unsafe.Pointer(_pat + uintptr(_k+uint64(1))))) != int32(':') && int32(*(*int8)(unsafe.Pointer(_pat + uintptr(_k+uint64(1))))) != int32('.') && int32(*(*int8)(unsafe.Pointer(_pat + uintptr(_k+uint64(1))))) != int32('=') {
		goto _11
	}

	_z = int32(*(*int8)(unsafe.Pointer(_pat + uintptr(_k+uint64(1)))))
	_k = _k + uint64(2)
	if _k >= _m || *(*int8)(unsafe.Pointer(_pat + uintptr(_k))) == 0 {
		goto _12
	}

	_k++
_12:
_13:
	if _k >= _m || *(*int8)(unsafe.Pointer(_pat + uintptr(_k))) == 0 || int32(*(*int8)(unsafe.Pointer(_pat + uintptr(_k-uint64(1))))) == _z && int32(*(*int8)(unsafe.Pointer(_pat + uintptr(_k)))) == int32(']') {
		goto _14
	}

	_k++
	goto _13

_14:
	if _k != _m && *(*int8)(unsafe.Pointer(_pat + uintptr(_k))) != 0 {
		goto _15
	}

	goto _10

_15:
_11:
	_k++
	goto _8

_10:
	if _k != _m && *(*int8)(unsafe.Pointer(_pat + uintptr(_k))) != 0 {
		goto _16
	}

	*(*uint64)(unsafe.Pointer(_step)) = uint64(1)
	return int32('[')

_16:
	*(*uint64)(unsafe.Pointer(_step)) = _k + uint64(1)
	return int32(-3)

_3:
	if int32(*(*int8)(unsafe.Pointer(_pat))) != int32('*') {
		goto _17
	}

	return int32(-5)

_17:
	if int32(*(*int8)(unsafe.Pointer(_pat))) != int32('?') {
		goto _18
	}

	return int32(-4)

_18:
	goto lescaped
lescaped:
	if uint32(*(*int8)(unsafe.Pointer(_pat))) < uint32(128) {
		goto _19
	}

	_1k = Xmbtowc(tls, _wc, _pat, _m)
	if _1k >= int32(0) {
		goto _20
	}

	*(*uint64)(unsafe.Pointer(_step)) = uint64(0)
	return int32(-2)

_20:
	*(*uint64)(unsafe.Pointer(_step)) = uint64(_1k + _esc)
	return *(*int32)(unsafe.Pointer(_wc))

_19:
	return int32(*(*int8)(unsafe.Pointer(_pat)))
}

type t182size_t = uint64

func set753(p *uintptr, v uintptr) uintptr { *p = v; return v }

func preinc754(p *uintptr) uintptr { *p += 18446744073709551615; return *p }

// xfnmatch_internal is defined at fnmatch.c:163:12
func xfnmatch_internal(tls TLS, _pat uintptr /* *int8 */, _m uint64, _str uintptr /* *int8 */, _n uint64, _flags int32) (r int32) {
	esc := MustMalloc(24)
	var (
		_p       uintptr    // *int8
		_ptail   uintptr    // *int8
		_endpat  uintptr    // *int8
		_s       uintptr    // *int8
		_stail   uintptr    // *int8
		_endstr  uintptr    // *int8
		_pinc    = esc      // *Tsize_t = uint64
		_sinc    = esc + 16 // *Tsize_t = uint64
		_tailcnt uint64
		_c       int32
		_k       int32
		_kfold   int32
	)
	defer Free(esc)
	_tailcnt = uint64(0)
	if (_flags & int32(0x4)) == 0 {
		goto _1
	}

	if int32(*(*int8)(unsafe.Pointer(_str))) != int32('.') || int32(*(*int8)(unsafe.Pointer(_pat))) == int32('.') {
		goto _2
	}

	return int32(1)

_2:
_1:
_3:
	switch set752(&_c, xpat_next(tls, _pat, _m, _pinc, _flags)) {
	case int32(-2):
		goto _7
	case int32(-5):
		goto _8
	default:
		goto _9
	}
_7:
	return int32(1)

_8:
	_pat++
	_m--
	goto _6

_9:
	_k = xstr_next(tls, _str, _n, _sinc)
	if _k > int32(0) {
		goto _10
	}

	if _c == int32(0) {
		return int32(0)
	}

	return int32(1)

_10:
	_str += uintptr(*(*uint64)(unsafe.Pointer(_sinc)))
	_n = _n - *(*uint64)(unsafe.Pointer(_sinc))
	_kfold = func() int32 {
		if (_flags & int32(0x10)) != 0 {
			return xcasefold(tls, _k)
		}
		return _k
	}()
	if _c != int32(-3) {
		goto _11
	}

	if xmatch_bracket(tls, _pat, _k, _kfold) != 0 {
		goto _13
	}

	return int32(1)

_13:
	goto _12

_11:
	if _c == int32(-4) || _k == _c || _kfold == _c {
		goto _14
	}

	return int32(1)

_14:
_12:
	_pat += uintptr(*(*uint64)(unsafe.Pointer(_pinc)))
	_m = _m - *(*uint64)(unsafe.Pointer(_pinc))
	goto _4

_6:
	goto _5

_4:
	goto _3

_5:
	_m = Xstrnlen(tls, _pat, _m)
	_endpat = _pat + uintptr(_m)
	_p = set753(&_ptail, _pat)
_15:
	if _p >= _endpat {
		goto _17
	}

	switch xpat_next(tls, _p, uint64(int64(_endpat-_p)), _pinc, _flags) {
	case int32(-2):
		goto _19
	case int32(-5):
		goto _20
	default:
		goto _21
	}
_19:
	return int32(1)

_20:
	_tailcnt = uint64(0)
	_ptail = _p + uintptr(1)
	goto _18

_21:
	_tailcnt++
	goto _18

_18:
	_p += uintptr(*(*uint64)(unsafe.Pointer(_pinc)))
	goto _15

_17:
	_n = Xstrnlen(tls, _str, _n)
	_endstr = _str + uintptr(_n)
	if _n >= _tailcnt {
		goto _22
	}

	return int32(1)

_22:
	_s = _endstr
_23:
	if _s <= _str || _tailcnt == 0 {
		goto _25
	}

	if uint32(*(*int8)(unsafe.Pointer(_s - 1))) >= uint32(128) && func() int32 {
		if *(*uintptr)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(x24__pthread_self(tls) + 192)))) != 0 {
			return int32(4)
		}
		return int32(1)
	}() != int32(1) {
		goto _26
	}

	_s--
	goto _27

_26:
_28:
	if uint32(uint8(*(*int8)(unsafe.Pointer(preinc754(&_s)))))-uint32(0x80) >= uint32(0x40) || _s <= _str {
		goto _29
	}

	goto _28

_29:
_27:
	_tailcnt--
	goto _23

_25:
	if _tailcnt == 0 {
		goto _30
	}

	return int32(1)

_30:
	_stail = _s
	_p = _ptail

_31:
	_c = xpat_next(tls, _p, uint64(int64(_endpat-_p)), _pinc, _flags)
	_p += uintptr(*(*uint64)(unsafe.Pointer(_pinc)))
	if set752(&_k, xstr_next(tls, _s, uint64(int64(_endstr-_s)), _sinc)) > int32(0) {
		goto _34
	}

	if _c == int32(0) {
		goto _35
	}

	return int32(1)

_35:
	goto _33

_34:
	_s += uintptr(*(*uint64)(unsafe.Pointer(_sinc)))
	_kfold = func() int32 {
		if (_flags & int32(0x10)) != 0 {
			return xcasefold(tls, _k)
		}
		return _k
	}()
	if _c != int32(-3) {
		goto _36
	}

	if xmatch_bracket(tls, _p-uintptr(*(*uint64)(unsafe.Pointer(_pinc))), _k, _kfold) != 0 {
		goto _38
	}

	return int32(1)

_38:
	goto _37

_36:
	if _c == int32(-4) || _k == _c || _kfold == _c {
		goto _39
	}

	return int32(1)

_39:
_37:
	goto _31

_33:
	_endstr = _stail
	_endpat = _ptail
_40:
	if _pat >= _endpat {
		goto _41
	}

	_p = _pat
	_s = _str

_42:
	_c = xpat_next(tls, _p, uint64(int64(_endpat-_p)), _pinc, _flags)
	_p += uintptr(*(*uint64)(unsafe.Pointer(_pinc)))
	if _c != int32(-5) {
		goto _45
	}

	_pat = _p
	_str = _s
	goto _44

_45:
	_k = xstr_next(tls, _s, uint64(int64(_endstr-_s)), _sinc)
	if _k != 0 {
		goto _46
	}

	return int32(1)

_46:
	_kfold = func() int32 {
		if (_flags & int32(0x10)) != 0 {
			return xcasefold(tls, _k)
		}
		return _k
	}()
	if _c != int32(-3) {
		goto _47
	}

	if xmatch_bracket(tls, _p-uintptr(*(*uint64)(unsafe.Pointer(_pinc))), _k, _kfold) != 0 {
		goto _49
	}

	goto _44

_49:
	goto _48

_47:
	if _c == int32(-4) || _k == _c || _kfold == _c {
		goto _50
	}

	goto _44

_50:
_48:
	_s += uintptr(*(*uint64)(unsafe.Pointer(_sinc)))
	goto _42

_44:
	if _c != int32(-5) {
		goto _51
	}

	goto _40

_51:
	_k = xstr_next(tls, _str, uint64(int64(_endstr-_str)), _sinc)
	if _k <= int32(0) {
		goto _52
	}

	_str += uintptr(*(*uint64)(unsafe.Pointer(_sinc)))
	goto _53

_52:
	_str++
_54:
	if xstr_next(tls, _str, uint64(int64(_endstr-_str)), _sinc) >= int32(0) {
		goto _56
	}

	_str++
	goto _54

_56:
_53:
	goto _40

_41:
	return int32(0)
}

type t19wchar_t = int32

// xstr_next is defined at fnmatch.c:29:12
func xstr_next(tls TLS, _str uintptr /* *int8 */, _n uint64, _step uintptr /* *Tsize_t = uint64 */) (r int32) {
	esc := MustMalloc(4)
	var (
		_wc = esc // *Twchar_t = int32
		_k  int32
	)
	defer Free(esc)
	if _n != 0 {
		goto _1
	}

	*(*uint64)(unsafe.Pointer(_step)) = uint64(0)
	return int32(0)

_1:
	if uint32(*(*int8)(unsafe.Pointer(_str))) < uint32(128) {
		goto _2
	}

	_k = Xmbtowc(tls, _wc, _str, _n)
	if _k >= int32(0) {
		goto _3
	}

	*(*uint64)(unsafe.Pointer(_step)) = uint64(1)
	return int32(-1)

_3:
	*(*uint64)(unsafe.Pointer(_step)) = uint64(_k)
	return *(*int32)(unsafe.Pointer(_wc))

_2:
	*(*uint64)(unsafe.Pointer(_step)) = uint64(1)
	return int32(*(*int8)(unsafe.Pointer(_str)))
}

// xcasefold is defined at fnmatch.c:101:12
func xcasefold(tls TLS, _k int32) (r int32) {
	var _c int32

	_c = int32(Xtowupper(tls, uint32(_k)))
	if _c == _k {
		return int32(Xtowlower(tls, uint32(_k)))
	}

	return _c
}

// xmatch_bracket is defined at fnmatch.c:107:12
func xmatch_bracket(tls TLS, _p uintptr /* *int8 */, _k int32, _kfold int32) (r int32) {
	esc := MustMalloc(48)
	var (
		_wc  = esc // *Twchar_t = int32
		_inv int32
		_wc2 = esc + 16 // *Twchar_t = int32
		_l   int32
		_p0  uintptr // *int8
		_z   int32
		_buf = esc + 32 // *[16]int8
		_1l  int32
	)
	defer Free(esc)
	_inv = int32(0)
	_p++
	if int32(*(*int8)(unsafe.Pointer(_p))) != int32('^') && int32(*(*int8)(unsafe.Pointer(_p))) != int32('!') {
		goto _1
	}

	_inv = int32(1)
	_p++
_1:
	if int32(*(*int8)(unsafe.Pointer(_p))) != int32(']') {
		goto _2
	}

	if _k != int32(']') {
		goto _4
	}

	return bool2int(_inv == 0)

_4:
	_p++
	goto _3

_2:
	if int32(*(*int8)(unsafe.Pointer(_p))) != int32('-') {
		goto _5
	}

	if _k != int32('-') {
		goto _6
	}

	return bool2int(_inv == 0)

_6:
	_p++
_5:
_3:
	*(*int32)(unsafe.Pointer(_wc)) = int32(*(*int8)(unsafe.Pointer(_p - 1)))

_7:
	if int32(*(*int8)(unsafe.Pointer(_p))) == int32(']') {
		goto _9
	}

	if int32(*(*int8)(unsafe.Pointer(_p))) != int32('-') || int32(*(*int8)(unsafe.Pointer(_p + 1))) == int32(']') {
		goto _10
	}

	_l = Xmbtowc(tls, _wc2, _p+uintptr(1), uint64(4))
	if _l >= int32(0) {
		goto _11
	}

	return int32(0)

_11:
	if *(*int32)(unsafe.Pointer(_wc)) > *(*int32)(unsafe.Pointer(_wc2)) {
		goto _12
	}

	if uint32(_k)-uint32(*(*int32)(unsafe.Pointer(_wc))) > uint32(*(*int32)(unsafe.Pointer(_wc2))-*(*int32)(unsafe.Pointer(_wc))) && uint32(_kfold)-uint32(*(*int32)(unsafe.Pointer(_wc))) > uint32(*(*int32)(unsafe.Pointer(_wc2))-*(*int32)(unsafe.Pointer(_wc))) {
		goto _13
	}

	return bool2int(_inv == 0)

_13:
_12:
	_p += uintptr(_l - int32(1))
	goto _8

_10:
	if int32(*(*int8)(unsafe.Pointer(_p))) != int32('[') || int32(*(*int8)(unsafe.Pointer(_p + 1))) != int32(':') && int32(*(*int8)(unsafe.Pointer(_p + 1))) != int32('.') && int32(*(*int8)(unsafe.Pointer(_p + 1))) != int32('=') {
		goto _14
	}

	_p0 = _p + uintptr(2)
	_z = int32(*(*int8)(unsafe.Pointer(_p + 1)))
	_p += uintptr(3)
_15:
	if int32(*(*int8)(unsafe.Pointer(_p - 1))) == _z && int32(*(*int8)(unsafe.Pointer(_p))) == int32(']') {
		goto _16
	}

	_p++
	goto _15

_16:
	if _z != int32(':') || int64((_p-uintptr(1))-_p0) >= int64(16) {
		goto _17
	}

	Xmemcpy(tls, _buf, _p0, uint64(int64((_p-uintptr(1))-_p0)))
	*(*int8)(unsafe.Pointer(_buf + uintptr(int64((_p-uintptr(1))-_p0)))) = int8(0)
	if Xiswctype(tls, uint32(_k), Xwctype(tls, _buf)) == 0 && Xiswctype(tls, uint32(_kfold), Xwctype(tls, _buf)) == 0 {
		goto _18
	}

	return bool2int(_inv == 0)

_18:
_17:
	goto _8

_14:
	if uint32(*(*int8)(unsafe.Pointer(_p))) >= uint32(128) {
		goto _19
	}

	*(*int32)(unsafe.Pointer(_wc)) = int32(uint8(*(*int8)(unsafe.Pointer(_p))))
	goto _20

_19:
	_1l = Xmbtowc(tls, _wc, _p, uint64(4))
	if _1l >= int32(0) {
		goto _21
	}

	return int32(0)

_21:
	_p += uintptr(_1l - int32(1))
_20:
	if *(*int32)(unsafe.Pointer(_wc)) != _k && *(*int32)(unsafe.Pointer(_wc)) != _kfold {
		goto _22
	}

	return bool2int(_inv == 0)

_22:
_8:
	_p++
	goto _7

_9:
	return _inv
}

// x__pthread_self is defined at pthread_arch.h:1:30
func x24__pthread_self(tls TLS) (r uintptr /* *S__pthread */) {
	return uintptr(tls)
	return r
}

type t1wctype_t = uint64

type s29__pthread = struct {
	Fself          uintptr // *S__pthread
	Fdtv           uintptr // **void
	Funused1       uintptr // *void
	Funused2       uintptr // *void
	Fsysinfo       uint64
	Fcanary        uint64
	Fcanary2       uint64
	Ftid           int32
	Ferrno_val     int32
	Fdetach_state  int32
	Fcancel        int32
	Fcanceldisable uint8
	Fcancelasync   uint8
	F74            uint8
	Fmap_base      uintptr // *uint8
	Fmap_size      uint64
	Fstack         uintptr // *void
	Fstack_size    uint64
	Fguard_size    uint64
	Fstart_arg     uintptr // *void
	Fstart         uintptr // *func(TLS, uintptr) uintptr
	Fresult        uintptr // *void
	Fcancelbuf     uintptr // *S__ptcb
	Ftsd           uintptr // **void
	Frobust_list   struct {
		Fhead    uintptr
		Foff     int64
		Fpending uintptr
	}
	Ftimer_id      int32
	Flocale        uintptr // Tlocale_t = *S__locale_struct
	Fkilllock      [1]int32
	Fdlerror_buf   uintptr // *int8
	Fstdio_locks   uintptr // *void
	Fcanary_at_end uint64
	Fdtv_copy      uintptr // **void
}

type t17wint_t = uint32

type t33uintptr_t = uint64

type s27__ptcb = struct {
	F__f    uintptr // *func(TLS, uintptr)
	F__x    uintptr // *void
	F__next uintptr // *S__ptcb
}

type s65__locale_struct = struct{ Fcat [6]uintptr }

// linking glob.o

func fp755(f func(TLS, uintptr, int32) int32) uintptr { return *(*uintptr)(unsafe.Pointer(&f)) }

func fp756(f func(TLS, uintptr, uintptr) int32) uintptr { return *(*uintptr)(unsafe.Pointer(&f)) }

// Xglob is defined at glob.c:165:5
func Xglob(tls TLS, _pat uintptr /* *int8 */, _flags int32, _errfunc uintptr /* *func(TLS, uintptr, int32) int32 */, _g uintptr /* *Tglob_t = struct{Fgl_pathc uint...my1 int32;F__dummy2 [5]uintptr;} */) (r int32) {
	esc := MustMalloc(24)
	var (
		_p     uintptr    // *int8
		_d     uintptr    // *int8
		_head  = esc      // *Smatch
		_tail  = esc + 16 // **Smatch
		_cnt   uint64
		_i     uint64
		_offs  uint64
		_error int32
		_pathv uintptr // **int8
	)
	defer Free(esc)
	_p = _pat
	*(*s1match)(unsafe.Pointer(_head)) = s1match{}
	*(*uintptr)(unsafe.Pointer(_tail)) = _head
	_offs = func() uint64 {
		if _flags&int32(0x8) != 0 {
			return *(*uint64)(unsafe.Pointer(_g + 16))
		}
		return uint64(0)
	}()
	_error = int32(0)
	if int32(*(*int8)(unsafe.Pointer(_p))) != int32('/') {
		goto _1
	}

_3:
	if int32(*(*int8)(unsafe.Pointer(_p))) != int32('/') {
		goto _5
	}

	_p++
	goto _3

_5:
	_d = ts + 1380 /* "/" */
	goto _2

_1:
	_d = ts + 112 /* "" */
_2:
	if _errfunc != 0 {
		goto _6
	}

	_errfunc = fp755(xignore_err)
_6:
	if _flags&int32(0x20) != 0 {
		goto _7
	}

	*(*uint64)(unsafe.Pointer(_g + 16)) = _offs
	*(*uint64)(unsafe.Pointer(_g)) = uint64(0)
	*(*uintptr)(unsafe.Pointer(_g + 8)) = null
_7:
	if Xstrnlen(tls, _p, uint64(4097)) <= uint64(4096) {
		goto _8
	}

	return int32(1)

_8:
	if *(*int8)(unsafe.Pointer(_pat)) == 0 {
		goto _9
	}

	_error = xmatch_in_dir(tls, _d, _p, _flags, _errfunc, _tail)
_9:
	if _error != int32(1) {
		goto _10
	}

	xfreelist(tls, _head)
	return _error

_10:
	_cnt = uint64(0)
	*(*uintptr)(unsafe.Pointer(_tail)) = *(*uintptr)(unsafe.Pointer(_head))
_11:
	if *(*uintptr)(unsafe.Pointer(_tail)) == 0 {
		goto _13
	}

	*(*uintptr)(unsafe.Pointer(_tail)) = *(*uintptr)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_tail))))
	_cnt++
	goto _11

_13:
	if _cnt != 0 {
		goto _14
	}

	if (_flags & int32(0x10)) == 0 {
		goto _15
	}

	*(*uintptr)(unsafe.Pointer(_tail)) = _head
	if xappend(tls, _tail, _pat, Xstrlen(tls, _pat), int32(0)) == 0 {
		goto _17
	}

	return int32(1)

_17:
	_cnt++
	goto _16

_15:
	return int32(3)

_16:
_14:
	if (_flags & int32(0x20)) == 0 {
		goto _18
	}

	_pathv = Xrealloc(tls, *(*uintptr)(unsafe.Pointer(_g + 8)), (_offs+*(*uint64)(unsafe.Pointer(_g))+_cnt+uint64(1))*uint64(8))
	if _pathv != 0 {
		goto _20
	}

	xfreelist(tls, _head)
	return int32(1)

_20:
	*(*uintptr)(unsafe.Pointer(_g + 8)) = _pathv
	_offs = _offs + *(*uint64)(unsafe.Pointer(_g))
	goto _19

_18:
	*(*uintptr)(unsafe.Pointer(_g + 8)) = Xmalloc(tls, (_offs+_cnt+uint64(1))*uint64(8))
	if *(*uintptr)(unsafe.Pointer(_g + 8)) != 0 {
		goto _21
	}

	xfreelist(tls, _head)
	return int32(1)

_21:
	_i = uint64(0)
_22:
	if _i >= _offs {
		goto _24
	}

	*(*uintptr)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_g + 8)) + 8*uintptr(_i))) = null
	_i++
	goto _22

_24:
_19:
	_i = uint64(0)
	*(*uintptr)(unsafe.Pointer(_tail)) = *(*uintptr)(unsafe.Pointer(_head))
_25:
	if _i >= _cnt {
		goto _27
	}

	*(*uintptr)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_g + 8)) + 8*uintptr(_offs+_i))) = *(*uintptr)(unsafe.Pointer(_tail)) + 8
	*(*uintptr)(unsafe.Pointer(_tail)) = *(*uintptr)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_tail))))
	_i++
	goto _25

_27:
	*(*uintptr)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_g + 8)) + 8*uintptr(_offs+_i))) = null
	{
		p := (*uint64)(unsafe.Pointer(_g))
		*p = *p + _cnt
	}
	if _flags&int32(0x4) != 0 {
		goto _28
	}

	Xqsort(tls, *(*uintptr)(unsafe.Pointer(_g + 8))+8*uintptr(_offs), _cnt, uint64(8), fp756(xsort))
_28:
	return _error
}

// Xglobfree is defined at glob.c:235:6
func Xglobfree(tls TLS, _g uintptr /* *Tglob_t = struct{Fgl_pathc uint...my1 int32;F__dummy2 [5]uintptr;} */) {
	var _i uint64

	_i = uint64(0)
_1:
	if _i >= *(*uint64)(unsafe.Pointer(_g)) {
		goto _3
	}

	Xfree(tls, *(*uintptr)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_g + 8)) + 8*uintptr(*(*uint64)(unsafe.Pointer(_g + 16))+_i)))-uintptr(8))
	_i++
	goto _1

_3:
	Xfree(tls, *(*uintptr)(unsafe.Pointer(_g + 8)))
	*(*uint64)(unsafe.Pointer(_g)) = uint64(0)
	*(*uintptr)(unsafe.Pointer(_g + 8)) = null
}

type t734__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t734__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t183size_t = uint64

type s1match = struct {
	Fnext uintptr // *Smatch
	Fname [1]int8
}

// xignore_err is defined at glob.c:146:12
func xignore_err(tls TLS, _path uintptr /* *int8 */, _err int32) (r int32) {
	return int32(0)
}

// xmatch_in_dir is defined at glob.c:52:12
func xmatch_in_dir(tls TLS, _d uintptr /* *int8 */, _p uintptr /* *int8 */, _flags int32, _errfunc uintptr /* *func(TLS, uintptr, int32) int32 */, _tail uintptr /* **Smatch */) (r int32) {
	X__assert_fail(tls, ts+0 /* "TODO(ccgo)" */, ts+4072 /* "src/regex/glob.c" */, int32(54), x757__func__)
	return r
}

// xfreelist is defined at glob.c:151:13
func xfreelist(tls TLS, _head uintptr /* *Smatch */) {
	var (
		_match uintptr // *Smatch
		_next  uintptr // *Smatch
	)
	_match = *(*uintptr)(unsafe.Pointer(_head))
_1:
	if _match == 0 {
		goto _3
	}

	_next = *(*uintptr)(unsafe.Pointer(_match))
	Xfree(tls, _match)
	_match = _next
	goto _1

_3:
}

// xappend is defined at glob.c:40:12
func xappend(tls TLS, _tail uintptr /* **Smatch */, _name uintptr /* *int8 */, _len uint64, _mark int32) (r int32) {
	var _new uintptr // *Smatch

	_new = Xmalloc(tls, uint64(16)+_len+uint64(1))
	if _new != 0 {
		goto _1
	}

	return int32(-1)

_1:
	*(*uintptr)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_tail)))) = _new
	*(*uintptr)(unsafe.Pointer(_new)) = null
	Xstrcpy(tls, _new+8, _name)
	if _mark == 0 {
		goto _2
	}

	Xstrcat(tls, _new+8, ts+1380 /* "/" */)
_2:
	*(*uintptr)(unsafe.Pointer(_tail)) = _new
	return int32(0)
}

// xsort is defined at glob.c:160:12
func xsort(tls TLS, _a uintptr /* *void */, _b uintptr /* *void */) (r int32) {
	return Xstrcmp(tls, *(*uintptr)(unsafe.Pointer(_a)), *(*uintptr)(unsafe.Pointer(_b)))
}

// x6__func__ [13]int8, escapes: true, glob.c:53:1
var x757__func__ = ds + 44208

// linking regcomp.o

func postinc758(p *int32) int32 { r := *p; *p += 1; return r }

// Xregcomp is defined at regcomp.c:2691:1
func Xregcomp(tls TLS, _preg uintptr /* *Tregex_t = struct{Fre_nsub uint..._nsub2 uint64;F__padding2 int8;} */, _regex uintptr /* *int8 */, _cflags int32) (r int32) {
	esc := MustMalloc(56)
	var (
		_stack          uintptr // *Ttre_stack_t = Stre_stack_rec
		_tree           uintptr // *Ttre_ast_node_t = struct{Ftype ...asses *uint64;Fbackref int32;};}
		_tmp_ast_l      uintptr // *Ttre_ast_node_t = struct{Ftype ...asses *uint64;Fbackref int32;};}
		_tmp_ast_r      uintptr // *Ttre_ast_node_t = struct{Ftype ...asses *uint64;Fbackref int32;};}
		_p              uintptr // *Ttre_pos_and_tags_t = struct{Fp...classes *uint64;Fbackref int32;}
		_counts         uintptr // *int32
		_offs           uintptr // *int32
		_i              int32
		_add            int32
		_transitions    uintptr // *Ttre_tnfa_transition_t = Stnfa_transition
		_initial        uintptr // *Ttre_tnfa_transition_t = Stnfa_transition
		_tnfa           uintptr // *Ttre_tnfa_t = Stnfa
		_submatch_data  uintptr // *Ttre_submatch_data_t = Stre_submatch_data
		_tag_directions uintptr // *Ttre_tag_direction_t = int32
		_errcode        int32
		_mem            uintptr // Ttre_mem_t = *struct{Fblocks *st...ailed int32;Fprovided *uintptr;}
		_parse_ctx      = esc   // *Ttre_parse_ctx_t = struct{Fmem *...ax_backref int32;Fcflags int32;}
		_j              int32
	)
	defer Free(esc)
	_counts = 0
	_offs = 0
	_add = int32(0)
	_tnfa = 0
	_tag_directions = 0
	_stack = xtre_stack_new(tls, int32(512), int32(1024000), int32(128))
	if _stack != 0 {
		goto _1
	}

	return int32(12)

_1:
	_mem = X__tre_mem_new_impl(tls, int32(0), null)
	if _mem != 0 {
		goto _2
	}

	xtre_stack_destroy(tls, _stack)
	return int32(12)

_2:
	Xmemset(tls, _parse_ctx, int32(0), uint64(56))
	*(*uintptr)(unsafe.Pointer(_parse_ctx)) = _mem
	*(*uintptr)(unsafe.Pointer(_parse_ctx + 8)) = _stack
	*(*uintptr)(unsafe.Pointer(_parse_ctx + 32)) = _regex
	*(*int32)(unsafe.Pointer(_parse_ctx + 52)) = _cflags
	*(*int32)(unsafe.Pointer(_parse_ctx + 48)) = int32(-1)
	_errcode = xtre_parse(tls, _parse_ctx)
	if _errcode == int32(0) {
		goto _3
	}

	_errcode = _errcode

	goto lerror_exit

_3:
	*(*uint64)(unsafe.Pointer(_preg)) = uint64(*(*int32)(unsafe.Pointer(_parse_ctx + 40)) - int32(1))
	_tree = *(*uintptr)(unsafe.Pointer(_parse_ctx + 16))
	if *(*int32)(unsafe.Pointer(_parse_ctx + 48)) <= int32(*(*uint64)(unsafe.Pointer(_preg))) {
		goto _5
	}

	_errcode = int32(6)

	goto lerror_exit

_5:
	_tnfa = Xcalloc(tls, uint64(1), uint64(104))
	if _tnfa != null {
		goto _7
	}

	_errcode = int32(12)

	goto lerror_exit

_7:
	*(*int32)(unsafe.Pointer(_tnfa + 92)) = bool2int(*(*int32)(unsafe.Pointer(_parse_ctx + 48)) >= int32(0))
	*(*int32)(unsafe.Pointer(_tnfa + 96)) = int32(0)
	*(*uint32)(unsafe.Pointer(_tnfa + 52)) = uint32(*(*int32)(unsafe.Pointer(_parse_ctx + 40)))
	if *(*int32)(unsafe.Pointer(_tnfa + 92)) == 0 && _cflags&int32(8) != 0 {
		goto _9
	}

	_errcode = xtre_add_tags(tls, null, _stack, _tree, _tnfa)
	if _errcode == int32(0) {
		goto _10
	}

	_errcode = _errcode

	goto lerror_exit

_10:
	if *(*int32)(unsafe.Pointer(_tnfa + 72)) <= int32(0) {
		goto _12
	}

	_tag_directions = Xmalloc(tls, uint64(4)*uint64(*(*int32)(unsafe.Pointer(_tnfa + 72))+int32(1)))
	if _tag_directions != null {
		goto _13
	}

	_errcode = int32(12)

	goto lerror_exit

_13:
	*(*uintptr)(unsafe.Pointer(_tnfa + 56)) = _tag_directions
	Xmemset(tls, _tag_directions, int32(-1), uint64(4)*uint64(*(*int32)(unsafe.Pointer(_tnfa + 72))+int32(1)))
_12:
	*(*uintptr)(unsafe.Pointer(_tnfa + 64)) = Xcalloc(tls, uint64(uint32(*(*int32)(unsafe.Pointer(_tnfa + 72)))*uint32(2)+uint32(1)), uint64(4))
	if *(*uintptr)(unsafe.Pointer(_tnfa + 64)) != null {
		goto _15
	}

	_errcode = int32(12)

	goto lerror_exit

_15:
	_submatch_data = Xcalloc(tls, uint64(uint32(*(*int32)(unsafe.Pointer(_parse_ctx + 40)))), uint64(16))
	if _submatch_data != null {
		goto _17
	}

	_errcode = int32(12)

	goto lerror_exit

_17:
	*(*uintptr)(unsafe.Pointer(_tnfa + 32)) = _submatch_data
	_errcode = xtre_add_tags(tls, _mem, _stack, _tree, _tnfa)
	if _errcode == int32(0) {
		goto _19
	}

	_errcode = _errcode

	goto lerror_exit

_19:
_9:
	_errcode = xtre_expand_ast(tls, _mem, _stack, _tree, _parse_ctx+44, _tag_directions)
	if _errcode == int32(0) {
		goto _21
	}

	_errcode = _errcode

	goto lerror_exit

_21:
	_tmp_ast_l = _tree
	_tmp_ast_r = xtre_ast_new_literal(tls, _mem, int32(0), int32(0), postinc758((*int32)(unsafe.Pointer(_parse_ctx+44))))
	if _tmp_ast_r != null {
		goto _23
	}

	_errcode = int32(12)

	goto lerror_exit

_23:
	_tree = xtre_ast_new_catenation(tls, _mem, _tmp_ast_l, _tmp_ast_r)
	if _tree != null {
		goto _25
	}

	_errcode = int32(12)

	goto lerror_exit

_25:
	_errcode = xtre_compute_nfl(tls, _mem, _stack, _tree)
	if _errcode == int32(0) {
		goto _27
	}

	_errcode = _errcode

	goto lerror_exit

_27:
	_counts = Xmalloc(tls, uint64(4)*uint64(*(*int32)(unsafe.Pointer(_parse_ctx + 44))))
	if _counts != null {
		goto _29
	}

	_errcode = int32(12)

	goto lerror_exit

_29:
	_offs = Xmalloc(tls, uint64(4)*uint64(*(*int32)(unsafe.Pointer(_parse_ctx + 44))))
	if _offs != null {
		goto _31
	}

	_errcode = int32(12)

	goto lerror_exit

_31:
	_i = int32(0)
_33:
	if _i >= *(*int32)(unsafe.Pointer(_parse_ctx + 44)) {
		goto _35
	}

	*(*int32)(unsafe.Pointer(_counts + 4*uintptr(_i))) = int32(0)
	_i++
	goto _33

_35:
	xtre_ast_to_tnfa(tls, _tree, null, _counts, null)
	_add = int32(0)
	_i = int32(0)
_36:
	if _i >= *(*int32)(unsafe.Pointer(_parse_ctx + 44)) {
		goto _38
	}

	*(*int32)(unsafe.Pointer(_offs + 4*uintptr(_i))) = _add
	_add = _add + (*(*int32)(unsafe.Pointer(_counts + 4*uintptr(_i))) + int32(1))
	*(*int32)(unsafe.Pointer(_counts + 4*uintptr(_i))) = int32(0)
	_i++
	goto _36

_38:
	_transitions = Xcalloc(tls, uint64(uint32(_add)+uint32(1)), uint64(56))
	if _transitions != null {
		goto _39
	}

	_errcode = int32(12)

	goto lerror_exit

_39:
	*(*uintptr)(unsafe.Pointer(_tnfa)) = _transitions
	*(*uint32)(unsafe.Pointer(_tnfa + 8)) = uint32(_add)
	_errcode = xtre_ast_to_tnfa(tls, _tree, _transitions, _counts, _offs)
	if _errcode == int32(0) {
		goto _41
	}

	_errcode = _errcode

	goto lerror_exit

_41:
	*(*uintptr)(unsafe.Pointer(_tnfa + 40)) = null
	_p = *(*uintptr)(unsafe.Pointer(_tree + 32))
	_i = int32(0)
_43:
	if *(*int32)(unsafe.Pointer(_p)) < int32(0) {
		goto _44
	}

	_i++
	_p += 56
	goto _43

_44:
	_initial = Xcalloc(tls, uint64(uint32(_i)+uint32(1)), uint64(56))
	if _initial != null {
		goto _45
	}

	_errcode = int32(12)

	goto lerror_exit

_45:
	*(*uintptr)(unsafe.Pointer(_tnfa + 16)) = _initial
	_i = int32(0)
	_p = *(*uintptr)(unsafe.Pointer(_tree + 32))
_47:
	if *(*int32)(unsafe.Pointer(_p)) < int32(0) {
		goto _49
	}

	*(*uintptr)(unsafe.Pointer((_initial + 56*uintptr(_i)) + 8)) = _transitions + 56*uintptr(*(*int32)(unsafe.Pointer(_offs + 4*uintptr(*(*int32)(unsafe.Pointer(_p))))))
	*(*int32)(unsafe.Pointer((_initial + 56*uintptr(_i)) + 16)) = *(*int32)(unsafe.Pointer(_p))
	*(*uintptr)(unsafe.Pointer((_initial + 56*uintptr(_i)) + 24)) = null
	if *(*uintptr)(unsafe.Pointer(_p + 16)) == 0 {
		goto _50
	}

	_j = int32(0)
_51:
	if *(*int32)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_p + 16)) + 4*uintptr(_j))) < int32(0) {
		goto _53
	}

	_j++
	goto _51

_53:
	*(*uintptr)(unsafe.Pointer((_initial + 56*uintptr(_i)) + 24)) = Xmalloc(tls, uint64(4)*uint64(_j+int32(1)))
	if *(*uintptr)(unsafe.Pointer((_initial + 56*uintptr(_i)) + 24)) != 0 {
		goto _54
	}

	_errcode = int32(12)

	goto lerror_exit

_54:
	Xmemcpy(tls, *(*uintptr)(unsafe.Pointer((_initial + 56*uintptr(_i)) + 24)), *(*uintptr)(unsafe.Pointer(_p + 16)), uint64(4)*uint64(_j+int32(1)))
_50:
	*(*int32)(unsafe.Pointer((_initial + 56*uintptr(_i)) + 32)) = *(*int32)(unsafe.Pointer(_p + 24))
	_i++
	_p += 56
	goto _47

_49:
	*(*uintptr)(unsafe.Pointer((_initial + 56*uintptr(_i)) + 8)) = null
	*(*uint32)(unsafe.Pointer(_tnfa + 8)) = uint32(_add)
	*(*uintptr)(unsafe.Pointer(_tnfa + 24)) = _transitions + 56*uintptr(*(*int32)(unsafe.Pointer(_offs + 4*uintptr(*(*int32)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_tree + 40))))))))
	*(*int32)(unsafe.Pointer(_tnfa + 84)) = *(*int32)(unsafe.Pointer(_parse_ctx + 44))
	*(*int32)(unsafe.Pointer(_tnfa + 88)) = _cflags
	X__tre_mem_destroy(tls, _mem)
	xtre_stack_destroy(tls, _stack)
	Xfree(tls, _counts)
	Xfree(tls, _offs)
	*(*uintptr)(unsafe.Pointer(_preg + 8)) = _tnfa
	return int32(0)

	goto lerror_exit
lerror_exit:
	X__tre_mem_destroy(tls, _mem)
	if _stack == null {
		goto _56
	}

	xtre_stack_destroy(tls, _stack)
_56:
	if _counts == null {
		goto _57
	}

	Xfree(tls, _counts)
_57:
	if _offs == null {
		goto _58
	}

	Xfree(tls, _offs)
_58:
	*(*uintptr)(unsafe.Pointer(_preg + 8)) = _tnfa
	Xregfree(tls, _preg)
	return _errcode
}

// Xregfree is defined at regcomp.c:2907:1
func Xregfree(tls TLS, _preg uintptr /* *Tregex_t = struct{Fre_nsub uint..._nsub2 uint64;F__padding2 int8;} */) {
	var (
		_tnfa  uintptr // *Ttre_tnfa_t = Stnfa
		_i     uint32
		_trans uintptr // *Ttre_tnfa_transition_t = Stnfa_transition
	)
	_tnfa = *(*uintptr)(unsafe.Pointer(_preg + 8))
	if _tnfa != 0 {
		goto _1
	}

	return

_1:
	_i = uint32(0)
_2:
	if _i >= *(*uint32)(unsafe.Pointer(_tnfa + 8)) {
		goto _4
	}

	if *(*uintptr)(unsafe.Pointer((*(*uintptr)(unsafe.Pointer(_tnfa)) + 56*uintptr(_i)) + 8)) == 0 {
		goto _5
	}

	if *(*uintptr)(unsafe.Pointer((*(*uintptr)(unsafe.Pointer(_tnfa)) + 56*uintptr(_i)) + 24)) == 0 {
		goto _6
	}

	Xfree(tls, *(*uintptr)(unsafe.Pointer((*(*uintptr)(unsafe.Pointer(_tnfa)) + 56*uintptr(_i)) + 24)))
_6:
	if *(*uintptr)(unsafe.Pointer((*(*uintptr)(unsafe.Pointer(_tnfa)) + 56*uintptr(_i)) + 48)) == 0 {
		goto _7
	}

	Xfree(tls, *(*uintptr)(unsafe.Pointer((*(*uintptr)(unsafe.Pointer(_tnfa)) + 56*uintptr(_i)) + 48)))
_7:
_5:
	_i++
	goto _2

_4:
	if *(*uintptr)(unsafe.Pointer(_tnfa)) == 0 {
		goto _8
	}

	Xfree(tls, *(*uintptr)(unsafe.Pointer(_tnfa)))
_8:
	if *(*uintptr)(unsafe.Pointer(_tnfa + 16)) == 0 {
		goto _9
	}

	_trans = *(*uintptr)(unsafe.Pointer(_tnfa + 16))
_10:
	if *(*uintptr)(unsafe.Pointer(_trans + 8)) == 0 {
		goto _12
	}

	if *(*uintptr)(unsafe.Pointer(_trans + 24)) == 0 {
		goto _13
	}

	Xfree(tls, *(*uintptr)(unsafe.Pointer(_trans + 24)))
_13:
	_trans += 56
	goto _10

_12:
	Xfree(tls, *(*uintptr)(unsafe.Pointer(_tnfa + 16)))
_9:
	if *(*uintptr)(unsafe.Pointer(_tnfa + 32)) == 0 {
		goto _14
	}

	_i = uint32(0)
_15:
	if _i >= *(*uint32)(unsafe.Pointer(_tnfa + 52)) {
		goto _17
	}

	if *(*uintptr)(unsafe.Pointer((*(*uintptr)(unsafe.Pointer(_tnfa + 32)) + 16*uintptr(_i)) + 8)) == 0 {
		goto _18
	}

	Xfree(tls, *(*uintptr)(unsafe.Pointer((*(*uintptr)(unsafe.Pointer(_tnfa + 32)) + 16*uintptr(_i)) + 8)))
_18:
	_i++
	goto _15

_17:
	Xfree(tls, *(*uintptr)(unsafe.Pointer(_tnfa + 32)))
_14:
	if *(*uintptr)(unsafe.Pointer(_tnfa + 56)) == 0 {
		goto _19
	}

	Xfree(tls, *(*uintptr)(unsafe.Pointer(_tnfa + 56)))
_19:
	if *(*uintptr)(unsafe.Pointer(_tnfa + 40)) == 0 {
		goto _20
	}

	Xfree(tls, *(*uintptr)(unsafe.Pointer(_tnfa + 40)))
_20:
	if *(*uintptr)(unsafe.Pointer(_tnfa + 64)) == 0 {
		goto _21
	}

	Xfree(tls, *(*uintptr)(unsafe.Pointer(_tnfa + 64)))
_21:
	Xfree(tls, _tnfa)
}

type t735__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t735__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t184size_t = uint64

type Stre_stack_rec = struct {
	Fsize      int32
	Fmax_size  int32
	Fincrement int32
	Fptr       int32
	Fstack     uintptr // *Utre_stack_item
}

type Ttre_ast_type_t = int32

type Ttre_pos_and_tags_t = struct {
	Fposition    int32
	Fcode_min    int32
	Fcode_max    int32
	Ftags        uintptr // *int32
	Fassertions  int32
	Fclass       uint64
	Fneg_classes uintptr // *Ttre_ctype_t = Twctype_t = uint64
	Fbackref     int32
}

type Ttre_ctype_t = uint64

type t2wctype_t = uint64

type Stnfa_transition = struct {
	Fcode_min   uint32
	Fcode_max   uint32
	Fstate      uintptr // *Ttre_tnfa_transition_t = Stnfa_transition
	Fstate_id   int32
	Ftags       uintptr // *int32
	Fassertions int32
	Fu          struct {
		Fclass   [0]uint64
		Fbackref [0]int32
		F        int64
	}
	Fneg_classes uintptr // *Ttre_ctype_t = Twctype_t = uint64
}

type Stnfa = struct {
	Ftransitions     uintptr // *Ttre_tnfa_transition_t = Stnfa_transition
	Fnum_transitions uint32
	Finitial         uintptr // *Ttre_tnfa_transition_t = Stnfa_transition
	Ffinal           uintptr // *Ttre_tnfa_transition_t = Stnfa_transition
	Fsubmatch_data   uintptr // *Ttre_submatch_data_t = Stre_submatch_data
	Ffirstpos_chars  uintptr // *int8
	Ffirst_char      int32
	Fnum_submatches  uint32
	Ftag_directions  uintptr // *Ttre_tag_direction_t = int32
	Fminimal_tags    uintptr // *int32
	Fnum_tags        int32
	Fnum_minimals    int32
	Fend_tag         int32
	Fnum_states      int32
	Fcflags          int32
	Fhave_backrefs   int32
	Fhave_approx     int32
}

type Stre_submatch_data = struct {
	Fso_tag  int32
	Feo_tag  int32
	Fparents uintptr // *int32
}

type Treg_errcode_t = int32

type Ttre_list_t = struct {
	Fdata uintptr // *void
	Fnext uintptr // *Stre_list
}

type Ttre_mem_t = uintptr // Ttre_mem_t = *struct{Fblocks *st...ailed int32;Fprovided *uintptr;}

type Ttre_stack_t = Stre_stack_rec

type Ttre_ast_node_t = struct {
	Ftype           int32
	Fobj            uintptr // *void
	Fnullable       int32
	Fsubmatch_id    int32
	Fnum_submatches int32
	Fnum_tags       int32
	Ffirstpos       uintptr // *Ttre_pos_and_tags_t = struct{Fp...classes *uint64;Fbackref int32;}
	Flastpos        uintptr // *Ttre_pos_and_tags_t = struct{Fp...classes *uint64;Fbackref int32;}
}

// xtre_stack_new is defined at regcomp.c:301:20
func xtre_stack_new(tls TLS, _size int32, _max_size int32, _increment int32) (r uintptr /* *Ttre_stack_t = Stre_stack_rec */) {
	var _s uintptr // *Ttre_stack_t = Stre_stack_rec

	_s = Xmalloc(tls, uint64(24))
	if _s == null {
		goto _1
	}

	*(*uintptr)(unsafe.Pointer(_s + 16)) = Xmalloc(tls, uint64(8)*uint64(_size))
	if *(*uintptr)(unsafe.Pointer(_s + 16)) != null {
		goto _2
	}

	Xfree(tls, _s)
	return null

_2:
	*(*int32)(unsafe.Pointer(_s)) = _size
	*(*int32)(unsafe.Pointer(_s + 4)) = _max_size
	*(*int32)(unsafe.Pointer(_s + 8)) = _increment
	*(*int32)(unsafe.Pointer(_s + 12)) = int32(0)
_1:
	return _s
}

// xtre_stack_destroy is defined at regcomp.c:324:1
func xtre_stack_destroy(tls TLS, _s uintptr /* *Ttre_stack_t = Stre_stack_rec */) {
	Xfree(tls, *(*uintptr)(unsafe.Pointer(_s + 16)))
	Xfree(tls, _s)
}

func set759(p *int32, v int32) int32 { *p = v; return v }

func set760(p *uintptr, v uintptr) uintptr { *p = v; return v }

// xtre_parse is defined at regcomp.c:957:22
func xtre_parse(tls TLS, _ctx uintptr /* *Ttre_parse_ctx_t = struct{Fmem ...ax_backref int32;Fcflags int32;} */) (r int32) {
	esc := MustMalloc(20)
	var (
		_nbranch uintptr // *Ttre_ast_node_t = struct{Ftype ...asses *uint64;Fbackref int32;};}
		_nunion  uintptr // *Ttre_ast_node_t = struct{Ftype ...asses *uint64;Fbackref int32;};}
		_ere     int32
		_s       uintptr // *int8
		_subid   int32
		_depth   int32
		_err     int32
		_stack   uintptr    // *Ttre_stack_t = Stre_stack_rec
		_min     = esc      // *int32
		_max     = esc + 16 // *int32
		_c       int32
	)
	defer Free(esc)
	_nbranch = 0
	_nunion = 0
	_ere = *(*int32)(unsafe.Pointer(_ctx + 52)) & int32(1)
	_s = *(*uintptr)(unsafe.Pointer(_ctx + 32))
	_subid = int32(0)
	_depth = int32(0)
	_stack = *(*uintptr)(unsafe.Pointer(_ctx + 8))
	if set759(&_err, xtre_stack_push_int(tls, _stack, postinc758(&_subid))) == int32(0) {
		goto _2
	}

	return _err

_2:
_3:
	if (_ere != 0 || int32(*(*int8)(unsafe.Pointer(_s))) != int32('\\') || int32(*(*int8)(unsafe.Pointer(_s + 1))) != int32('(')) && (_ere == 0 || int32(*(*int8)(unsafe.Pointer(_s))) != int32('(')) {
		goto _6
	}

	if set759(&_err, xtre_stack_push_voidptr(tls, _stack, _nunion)) == int32(0) {
		goto _8
	}

	return _err

_8:
	if set759(&_err, xtre_stack_push_voidptr(tls, _stack, _nbranch)) == int32(0) {
		goto _10
	}

	return _err

_10:
	if set759(&_err, xtre_stack_push_int(tls, _stack, postinc758(&_subid))) == int32(0) {
		goto _12
	}

	return _err

_12:
	_s++
	if _ere != 0 {
		goto _13
	}

	_s++
_13:
	_depth++
	_nbranch = set760(&_nunion, null)
	*(*uintptr)(unsafe.Pointer(_ctx + 32)) = _s
	goto _4

_6:
	if (_ere != 0 || int32(*(*int8)(unsafe.Pointer(_s))) != int32('\\') || int32(*(*int8)(unsafe.Pointer(_s + 1))) != int32(')')) && (_ere == 0 || int32(*(*int8)(unsafe.Pointer(_s))) != int32(')') || _depth == 0) {
		goto _14
	}

	*(*uintptr)(unsafe.Pointer(_ctx + 16)) = xtre_ast_new_literal(tls, *(*uintptr)(unsafe.Pointer(_ctx)), int32(-1), int32(-1), int32(-1))
	if *(*uintptr)(unsafe.Pointer(_ctx + 16)) != 0 {
		goto _16
	}

	return int32(12)

_16:
	goto _15

_14:
	_err = xparse_atom(tls, _ctx, _s)
	if _err == int32(0) {
		goto _17
	}

	return _err

_17:
	_s = *(*uintptr)(unsafe.Pointer(_ctx + 24))
_15:
	goto lparse_iter
lparse_iter:
_18:
	if int32(*(*int8)(unsafe.Pointer(_s))) == int32('\\') || int32(*(*int8)(unsafe.Pointer(_s))) == int32('*') {
		goto _21
	}

	if _ere != 0 {
		goto _22
	}

	goto _20

_22:
	if int32(*(*int8)(unsafe.Pointer(_s))) == int32('+') || int32(*(*int8)(unsafe.Pointer(_s))) == int32('?') || int32(*(*int8)(unsafe.Pointer(_s))) == int32('{') {
		goto _23
	}

	goto _20

_23:
_21:
	if int32(*(*int8)(unsafe.Pointer(_s))) != int32('\\') || _ere == 0 {
		goto _24
	}

	goto _20

_24:
	if int32(*(*int8)(unsafe.Pointer(_s))) != int32('\\') || int32(*(*int8)(unsafe.Pointer(_s + 1))) == int32('+') || int32(*(*int8)(unsafe.Pointer(_s + 1))) == int32('?') || int32(*(*int8)(unsafe.Pointer(_s + 1))) == int32('{') {
		goto _25
	}

	goto _20

_25:
	if int32(*(*int8)(unsafe.Pointer(_s))) != int32('\\') {
		goto _26
	}

	_s++
_26:
	if _ere != 0 || _s != (*(*uintptr)(unsafe.Pointer(_ctx + 32))+uintptr(1)) || int32(*(*int8)(unsafe.Pointer(_s - 1))) != int32('^') {
		goto _27
	}

	goto _20

_27:
	if int32(*(*int8)(unsafe.Pointer(_s))) != int32('{') {
		goto _28
	}

	_s = xparse_dup(tls, _s+uintptr(1), _ere, _min, _max)
	if _s != 0 {
		goto _30
	}

	return int32(10)

_30:
	goto _29

_28:
	*(*int32)(unsafe.Pointer(_min)) = int32(0)
	*(*int32)(unsafe.Pointer(_max)) = int32(-1)
	if int32(*(*int8)(unsafe.Pointer(_s))) != int32('+') {
		goto _31
	}

	*(*int32)(unsafe.Pointer(_min)) = int32(1)
_31:
	if int32(*(*int8)(unsafe.Pointer(_s))) != int32('?') {
		goto _32
	}

	*(*int32)(unsafe.Pointer(_max)) = int32(1)
_32:
	_s++
_29:
	if *(*int32)(unsafe.Pointer(_max)) != int32(0) {
		goto _33
	}

	*(*uintptr)(unsafe.Pointer(_ctx + 16)) = xtre_ast_new_literal(tls, *(*uintptr)(unsafe.Pointer(_ctx)), int32(-1), int32(-1), int32(-1))
	goto _34

_33:
	*(*uintptr)(unsafe.Pointer(_ctx + 16)) = xtre_ast_new_iter(tls, *(*uintptr)(unsafe.Pointer(_ctx)), *(*uintptr)(unsafe.Pointer(_ctx + 16)), *(*int32)(unsafe.Pointer(_min)), *(*int32)(unsafe.Pointer(_max)), int32(0))
_34:
	if *(*uintptr)(unsafe.Pointer(_ctx + 16)) != 0 {
		goto _35
	}

	return int32(12)

_35:
	goto _18

_20:
	_nbranch = xtre_ast_new_catenation(tls, *(*uintptr)(unsafe.Pointer(_ctx)), _nbranch, *(*uintptr)(unsafe.Pointer(_ctx + 16)))
	if (_ere == 0 || int32(*(*int8)(unsafe.Pointer(_s))) != int32('|')) && (_ere == 0 || int32(*(*int8)(unsafe.Pointer(_s))) != int32(')') || _depth == 0) && (_ere != 0 || int32(*(*int8)(unsafe.Pointer(_s))) != int32('\\') || int32(*(*int8)(unsafe.Pointer(_s + 1))) != int32(')')) && (_ere != 0 || int32(*(*int8)(unsafe.Pointer(_s))) != int32('\\') || int32(*(*int8)(unsafe.Pointer(_s + 1))) != int32('|')) && *(*int8)(unsafe.Pointer(_s)) != 0 {
		goto _36
	}

	_c = int32(*(*int8)(unsafe.Pointer(_s)))
	_nunion = xtre_ast_new_union(tls, *(*uintptr)(unsafe.Pointer(_ctx)), _nunion, _nbranch)
	_nbranch = null
	if _c != int32('\\') || int32(*(*int8)(unsafe.Pointer(_s + 1))) != int32('|') {
		goto _37
	}

	_s += uintptr(2)
	*(*uintptr)(unsafe.Pointer(_ctx + 32)) = _s
	goto _38

_37:
	if _c != int32('|') {
		goto _39
	}

	_s++
	*(*uintptr)(unsafe.Pointer(_ctx + 32)) = _s
	goto _40

_39:
	if _c != int32('\\') {
		goto _41
	}

	if _depth != 0 {
		goto _43
	}

	return int32(8)

_43:
	_s += uintptr(2)
	goto _42

_41:
	if _c != int32(')') {
		goto _44
	}

	_s++
_44:
_42:
	_depth--
	_err = xmarksub(tls, _ctx, _nunion, xtre_stack_pop_int(tls, _stack))
	if _err == int32(0) {
		goto _45
	}

	return _err

_45:
	if _c != 0 || _depth >= int32(0) {
		goto _46
	}

	*(*int32)(unsafe.Pointer(_ctx + 40)) = _subid
	return int32(0)

_46:
	if _c != 0 && _depth >= int32(0) {
		goto _47
	}

	return int32(8)

_47:
	_nbranch = xtre_stack_pop_voidptr(tls, _stack)
	_nunion = xtre_stack_pop_voidptr(tls, _stack)
	goto lparse_iter

_40:
_38:
_36:
_4:
	goto _3
	return r
}

// xtre_add_tags is defined at regcomp.c:1203:1
func xtre_add_tags(tls TLS, _mem uintptr /* Ttre_mem_t = *struct{Fblocks *st...ailed int32;Fprovided *uintptr;} */, _stack uintptr /* *Ttre_stack_t = Stre_stack_rec */, _tree uintptr /* *Ttre_ast_node_t = struct{Ftype ...asses *uint64;Fbackref int32;};} */, _tnfa uintptr /* *Ttre_tnfa_t = Stnfa */) (r int32) {
	var (
		_status       int32
		_symbol       int32
		_node         uintptr // *Ttre_ast_node_t = struct{Ftype ...asses *uint64;Fbackref int32;};}
		_bottom       int32
		_first_pass   int32
		_regset       uintptr // *int32
		_orig_regset  uintptr // *int32
		_num_tags     int32
		_num_minimals int32
		_tag          int32
		_next_tag     int32
		_parents      uintptr // *int32
		_minimal_tag  int32
		_saved_states uintptr // *Ttre_tag_states_t = struct{Ftag int32;Fnext_tag int32;}
		_direction    int32
		_i            uint32
		_id           int32
		_1i           int32
		_2id          int32
		_3i           int32
		_p            uintptr // *int32
		_lit          uintptr // *Ttre_literal_t = struct{Fcode_m...ss uint64;Fneg_classes *uint64;}
		_4i           int32
		_cat          uintptr // *Ttre_catenation_t = struct{Flef...ses *uint64;Fbackref int32;};};}
		_left         uintptr // *Ttre_ast_node_t = struct{Ftype ...asses *uint64;Fbackref int32;};}
		_right        uintptr // *Ttre_ast_node_t = struct{Ftype ...asses *uint64;Fbackref int32;};}
		_reserved_tag int32
		_iter         uintptr // *Ttre_iteration_t = struct{Farg ...min int32;Fmax int32;F16 uint8;}
		_5i           int32
		_uni          uintptr // *Ttre_union_t = struct{Fleft *st...ses *uint64;Fbackref int32;};};}
		_6left        uintptr // *Ttre_ast_node_t = struct{Ftype ...asses *uint64;Fbackref int32;};}
		_7right       uintptr // *Ttre_ast_node_t = struct{Ftype ...asses *uint64;Fbackref int32;};}
		_left_tag     int32
		_right_tag    int32
		_8i           int32
		_9i           int32
		_minimal      int32
		_enter_tag    int32
		_new_tag      int32
		_added_tags   int32
		_tag_left     int32
		_tag_right    int32
		_10left       uintptr // *Ttre_ast_node_t = struct{Ftype ...asses *uint64;Fbackref int32;};}
		_11right      uintptr // *Ttre_ast_node_t = struct{Ftype ...asses *uint64;Fbackref int32;};}
		_12i          int32
	)
	_status = int32(0)
	_node = _tree
	_bottom = xtre_stack_num_objects(tls, _stack)
	_first_pass = bool2int((_mem == null) || (_tnfa == null))
	_num_tags = int32(0)
	_num_minimals = int32(0)
	_tag = int32(0)
	_next_tag = int32(1)
	_minimal_tag = int32(-1)
	_direction = int32(0)
	if _first_pass != 0 {
		goto _1
	}

	*(*int32)(unsafe.Pointer(_tnfa + 80)) = int32(0)
	*(*int32)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_tnfa + 64)))) = int32(-1)
_1:
	_regset = Xmalloc(tls, uint64(4)*uint64((*(*uint32)(unsafe.Pointer(_tnfa + 52))+uint32(1))*uint32(2)))
	if _regset != null {
		goto _2
	}

	return int32(12)

_2:
	*(*int32)(unsafe.Pointer(_regset)) = int32(-1)
	_orig_regset = _regset
	_parents = Xmalloc(tls, uint64(4)*uint64(*(*uint32)(unsafe.Pointer(_tnfa + 52))+uint32(1)))
	if _parents != null {
		goto _3
	}

	Xfree(tls, _regset)
	return int32(12)

_3:
	*(*int32)(unsafe.Pointer(_parents)) = int32(-1)
	_saved_states = Xmalloc(tls, uint64(8)*uint64(*(*uint32)(unsafe.Pointer(_tnfa + 52))+uint32(1)))
	if _saved_states != null {
		goto _4
	}

	Xfree(tls, _regset)
	Xfree(tls, _parents)
	return int32(12)

	goto _5

_4:
	_i = uint32(0)
_6:
	if _i > *(*uint32)(unsafe.Pointer(_tnfa + 52)) {
		goto _8
	}

	*(*int32)(unsafe.Pointer(_saved_states + 8*uintptr(_i))) = int32(-1)
	_i++
	goto _6

_8:
_5:
	_status = xtre_stack_push_voidptr(tls, _stack, _node)
	_status = xtre_stack_push_int(tls, _stack, int32(0))
_11:
	if xtre_stack_num_objects(tls, _stack) <= _bottom {
		goto _12
	}

	if _status == int32(0) {
		goto _13
	}

	goto _12

_13:
	_symbol = xtre_stack_pop_int(tls, _stack)
	switch _symbol {
	case int32(6):
		goto _15
	case int32(0):
		goto _16
	case int32(1):
		goto _17
	case int32(4):
		goto _18
	case int32(5):
		goto _19
	case int32(2):
		goto _20
	case int32(3):
		goto _21
	default:
		goto _22
	}
_15:
	_id = xtre_stack_pop_int(tls, _stack)
	_1i = int32(0)
_23:
	if *(*int32)(unsafe.Pointer(_regset + 4*uintptr(_1i))) < int32(0) {
		goto _25
	}

	_1i++
	goto _23

_25:
	*(*int32)(unsafe.Pointer(_regset + 4*uintptr(_1i))) = _id*int32(2) + int32(1)
	*(*int32)(unsafe.Pointer(_regset + 4*uintptr(_1i+int32(1)))) = int32(-1)
	_1i = int32(0)
_26:
	if *(*int32)(unsafe.Pointer(_parents + 4*uintptr(_1i))) < int32(0) {
		goto _28
	}

	_1i++
	goto _26

_28:
	*(*int32)(unsafe.Pointer(_parents + 4*uintptr(_1i-int32(1)))) = int32(-1)
	goto _14

_16:
	_node = xtre_stack_pop_voidptr(tls, _stack)
	if *(*int32)(unsafe.Pointer(_node + 20)) < int32(0) {
		goto _29
	}

	_2id = *(*int32)(unsafe.Pointer(_node + 20))
	_3i = int32(0)
_30:
	if *(*int32)(unsafe.Pointer(_regset + 4*uintptr(_3i))) < int32(0) {
		goto _32
	}

	_3i++
	goto _30

_32:
	*(*int32)(unsafe.Pointer(_regset + 4*uintptr(_3i))) = _2id * int32(2)
	*(*int32)(unsafe.Pointer(_regset + 4*uintptr(_3i+int32(1)))) = int32(-1)
	if _first_pass != 0 {
		goto _33
	}

	_3i = int32(0)
_34:
	if *(*int32)(unsafe.Pointer(_parents + 4*uintptr(_3i))) < int32(0) {
		goto _36
	}

	_3i++
	goto _34

_36:
	*(*uintptr)(unsafe.Pointer((*(*uintptr)(unsafe.Pointer(_tnfa + 32)) + 16*uintptr(_2id)) + 8)) = null
	if _3i <= int32(0) {
		goto _37
	}

	_p = Xmalloc(tls, uint64(4)*uint64(_3i+int32(1)))
	if _p != null {
		goto _38
	}

	_status = int32(12)
	goto _14

_38:
	*(*uintptr)(unsafe.Pointer((*(*uintptr)(unsafe.Pointer(_tnfa + 32)) + 16*uintptr(_2id)) + 8)) = _p
	_3i = int32(0)
_39:
	if *(*int32)(unsafe.Pointer(_parents + 4*uintptr(_3i))) < int32(0) {
		goto _41
	}

	*(*int32)(unsafe.Pointer(_p + 4*uintptr(_3i))) = *(*int32)(unsafe.Pointer(_parents + 4*uintptr(_3i)))
	_3i++
	goto _39

_41:
	*(*int32)(unsafe.Pointer(_p + 4*uintptr(_3i))) = int32(-1)
_37:
_33:
	_status = xtre_stack_push_int(tls, _stack, *(*int32)(unsafe.Pointer(_node + 20)))
	if _status == int32(0) {
		goto _42
	}

	goto _14

_42:
	_status = xtre_stack_push_int(tls, _stack, int32(6))
	if _status == int32(0) {
		goto _43
	}

	goto _14

_43:
_29:
	switch *(*int32)(unsafe.Pointer(_node)) {
	case int32(0):
		goto _45
	case int32(1):
		goto _46
	case int32(2):
		goto _47
	case int32(3):
		goto _48
	}
	goto _44

_45:
	_lit = *(*uintptr)(unsafe.Pointer(_node + 8))
	if *(*int64)(unsafe.Pointer(_lit)) < int64(0) && *(*int64)(unsafe.Pointer(_lit)) != int64(-4) {
		goto _49
	}

	if *(*int32)(unsafe.Pointer(_regset)) < int32(0) {
		goto _51
	}

	if _first_pass != 0 {
		goto _52
	}

	_status = xtre_add_tag_left(tls, _mem, _node, _tag)
	*(*int32)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_tnfa + 56)) + 4*uintptr(_tag))) = _direction
	if _minimal_tag < int32(0) {
		goto _54
	}

	_4i = int32(0)
_55:
	if *(*int32)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_tnfa + 64)) + 4*uintptr(_4i))) < int32(0) {
		goto _57
	}

	_4i++
	goto _55

_57:
	*(*int32)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_tnfa + 64)) + 4*uintptr(_4i))) = _tag
	*(*int32)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_tnfa + 64)) + 4*uintptr(_4i+int32(1)))) = _minimal_tag
	*(*int32)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_tnfa + 64)) + 4*uintptr(_4i+int32(2)))) = int32(-1)
	_minimal_tag = int32(-1)
	_num_minimals++
_54:
	xtre_purge_regset(tls, _regset, _tnfa, _tag)
	goto _53

_52:
	*(*int32)(unsafe.Pointer(_node + 28)) = int32(1)
_53:
	*(*int32)(unsafe.Pointer(_regset)) = int32(-1)
	_tag = _next_tag
	_num_tags++
	_next_tag++
_51:
	goto _50

_49:
_50:
	goto _44

_46:
	_cat = *(*uintptr)(unsafe.Pointer(_node + 8))
	_left = *(*uintptr)(unsafe.Pointer(_cat))
	_right = *(*uintptr)(unsafe.Pointer(_cat + 8))
	_reserved_tag = int32(-1)
	_status = xtre_stack_push_voidptr(tls, _stack, _node)
	if _status == int32(0) {
		goto _58
	}

	goto _44

_58:
	_status = xtre_stack_push_int(tls, _stack, int32(5))
	if _status == int32(0) {
		goto _59
	}

	goto _44

_59:
	_status = xtre_stack_push_voidptr(tls, _stack, _right)
	if _status == int32(0) {
		goto _60
	}

	goto _44

_60:
	_status = xtre_stack_push_int(tls, _stack, int32(0))
	if _status == int32(0) {
		goto _61
	}

	goto _44

_61:
	_status = xtre_stack_push_int(tls, _stack, _next_tag+*(*int32)(unsafe.Pointer(_left + 28)))
	if _status == int32(0) {
		goto _62
	}

	goto _44

_62:
	if *(*int32)(unsafe.Pointer(_left + 28)) <= int32(0) || *(*int32)(unsafe.Pointer(_right + 28)) <= int32(0) {
		goto _63
	}

	_reserved_tag = _next_tag
	_next_tag++
_63:
	_status = xtre_stack_push_int(tls, _stack, _reserved_tag)
	if _status == int32(0) {
		goto _64
	}

	goto _44

_64:
	_status = xtre_stack_push_int(tls, _stack, int32(4))
	if _status == int32(0) {
		goto _65
	}

	goto _44

_65:
	_status = xtre_stack_push_voidptr(tls, _stack, _left)
	if _status == int32(0) {
		goto _66
	}

	goto _44

_66:
	_status = xtre_stack_push_int(tls, _stack, int32(0))
	if _status == int32(0) {
		goto _67
	}

	goto _44

_67:
	goto _44

_47:
	_iter = *(*uintptr)(unsafe.Pointer(_node + 8))
	if _first_pass == 0 {
		goto _68
	}

	_status = xtre_stack_push_int(tls, _stack, bool2int((*(*int32)(unsafe.Pointer(_regset)) >= int32(0)) || ((uint32(*(*uint8)(unsafe.Pointer(_iter + 16)))<<31>>31) != 0)))
	if _status == int32(0) {
		goto _70
	}

	goto _44

_70:
	goto _69

_68:
	_status = xtre_stack_push_int(tls, _stack, _tag)
	if _status == int32(0) {
		goto _71
	}

	goto _44

_71:
	_status = xtre_stack_push_int(tls, _stack, int32(uint32(*(*uint8)(unsafe.Pointer(_iter + 16)))<<31>>31))
	if _status == int32(0) {
		goto _72
	}

	goto _44

_72:
_69:
	_status = xtre_stack_push_voidptr(tls, _stack, _node)
	if _status == int32(0) {
		goto _73
	}

	goto _44

_73:
	_status = xtre_stack_push_int(tls, _stack, int32(1))
	if _status == int32(0) {
		goto _74
	}

	goto _44

_74:
	_status = xtre_stack_push_voidptr(tls, _stack, *(*uintptr)(unsafe.Pointer(_iter)))
	if _status == int32(0) {
		goto _75
	}

	goto _44

_75:
	_status = xtre_stack_push_int(tls, _stack, int32(0))
	if _status == int32(0) {
		goto _76
	}

	goto _44

_76:
	if *(*int32)(unsafe.Pointer(_regset)) < int32(0) && (uint32(*(*uint8)(unsafe.Pointer(_iter + 16)))<<31>>31) == 0 {
		goto _77
	}

	if _first_pass != 0 {
		goto _78
	}

	_status = xtre_add_tag_left(tls, _mem, _node, _tag)
	if (uint32(*(*uint8)(unsafe.Pointer(_iter + 16))) << 31 >> 31) == 0 {
		goto _79
	}

	*(*int32)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_tnfa + 56)) + 4*uintptr(_tag))) = int32(1)
	goto _80

_79:
	*(*int32)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_tnfa + 56)) + 4*uintptr(_tag))) = _direction
_80:
	if _minimal_tag < int32(0) {
		goto _81
	}

	_5i = int32(0)
_82:
	if *(*int32)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_tnfa + 64)) + 4*uintptr(_5i))) < int32(0) {
		goto _84
	}

	_5i++
	goto _82

_84:
	*(*int32)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_tnfa + 64)) + 4*uintptr(_5i))) = _tag
	*(*int32)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_tnfa + 64)) + 4*uintptr(_5i+int32(1)))) = _minimal_tag
	*(*int32)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_tnfa + 64)) + 4*uintptr(_5i+int32(2)))) = int32(-1)
	_minimal_tag = int32(-1)
	_num_minimals++
_81:
	xtre_purge_regset(tls, _regset, _tnfa, _tag)
_78:
	*(*int32)(unsafe.Pointer(_regset)) = int32(-1)
	_tag = _next_tag
	_num_tags++
	_next_tag++
_77:
	_direction = int32(0)
	goto _44

_48:
	_uni = *(*uintptr)(unsafe.Pointer(_node + 8))
	_6left = *(*uintptr)(unsafe.Pointer(_uni))
	_7right = *(*uintptr)(unsafe.Pointer(_uni + 8))
	if *(*int32)(unsafe.Pointer(_regset)) < int32(0) {
		goto _85
	}

	_left_tag = _next_tag
	_right_tag = _next_tag + int32(1)
	goto _86

_85:
	_left_tag = _tag
	_right_tag = _next_tag
_86:
	_status = xtre_stack_push_int(tls, _stack, _right_tag)
	if _status == int32(0) {
		goto _87
	}

	goto _44

_87:
	_status = xtre_stack_push_int(tls, _stack, _left_tag)
	if _status == int32(0) {
		goto _88
	}

	goto _44

_88:
	_status = xtre_stack_push_voidptr(tls, _stack, _regset)
	if _status == int32(0) {
		goto _89
	}

	goto _44

_89:
	_status = xtre_stack_push_int(tls, _stack, bool2int(*(*int32)(unsafe.Pointer(_regset)) >= int32(0)))
	if _status == int32(0) {
		goto _90
	}

	goto _44

_90:
	_status = xtre_stack_push_voidptr(tls, _stack, _node)
	if _status == int32(0) {
		goto _91
	}

	goto _44

_91:
	_status = xtre_stack_push_voidptr(tls, _stack, _7right)
	if _status == int32(0) {
		goto _92
	}

	goto _44

_92:
	_status = xtre_stack_push_voidptr(tls, _stack, _6left)
	if _status == int32(0) {
		goto _93
	}

	goto _44

_93:
	_status = xtre_stack_push_int(tls, _stack, int32(3))
	if _status == int32(0) {
		goto _94
	}

	goto _44

_94:
	_status = xtre_stack_push_voidptr(tls, _stack, _7right)
	if _status == int32(0) {
		goto _95
	}

	goto _44

_95:
	_status = xtre_stack_push_int(tls, _stack, int32(0))
	if _status == int32(0) {
		goto _96
	}

	goto _44

_96:
	_status = xtre_stack_push_int(tls, _stack, int32(2))
	if _status == int32(0) {
		goto _97
	}

	goto _44

_97:
	_status = xtre_stack_push_voidptr(tls, _stack, _6left)
	if _status == int32(0) {
		goto _98
	}

	goto _44

_98:
	_status = xtre_stack_push_int(tls, _stack, int32(0))
	if _status == int32(0) {
		goto _99
	}

	goto _44

_99:
	if *(*int32)(unsafe.Pointer(_regset)) < int32(0) {
		goto _100
	}

	if _first_pass != 0 {
		goto _101
	}

	_status = xtre_add_tag_left(tls, _mem, _node, _tag)
	*(*int32)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_tnfa + 56)) + 4*uintptr(_tag))) = _direction
	if _minimal_tag < int32(0) {
		goto _102
	}

	_8i = int32(0)
_103:
	if *(*int32)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_tnfa + 64)) + 4*uintptr(_8i))) < int32(0) {
		goto _105
	}

	_8i++
	goto _103

_105:
	*(*int32)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_tnfa + 64)) + 4*uintptr(_8i))) = _tag
	*(*int32)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_tnfa + 64)) + 4*uintptr(_8i+int32(1)))) = _minimal_tag
	*(*int32)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_tnfa + 64)) + 4*uintptr(_8i+int32(2)))) = int32(-1)
	_minimal_tag = int32(-1)
	_num_minimals++
_102:
	xtre_purge_regset(tls, _regset, _tnfa, _tag)
_101:
	*(*int32)(unsafe.Pointer(_regset)) = int32(-1)
	_tag = _next_tag
	_num_tags++
	_next_tag++
_100:
	if *(*int32)(unsafe.Pointer(_node + 24)) <= int32(0) {
		goto _106
	}

	_next_tag++
	_tag = _next_tag
	_next_tag++
_106:
	goto _44

_44:
	if *(*int32)(unsafe.Pointer(_node + 20)) < int32(0) {
		goto _107
	}

	_9i = int32(0)
_108:
	if *(*int32)(unsafe.Pointer(_parents + 4*uintptr(_9i))) < int32(0) {
		goto _110
	}

	_9i++
	goto _108

_110:
	*(*int32)(unsafe.Pointer(_parents + 4*uintptr(_9i))) = *(*int32)(unsafe.Pointer(_node + 20))
	*(*int32)(unsafe.Pointer(_parents + 4*uintptr(_9i+int32(1)))) = int32(-1)
_107:
	goto _14

_17:
	_minimal = int32(0)
	_node = xtre_stack_pop_voidptr(tls, _stack)
	if _first_pass == 0 {
		goto _111
	}

	*(*int32)(unsafe.Pointer(_node + 28)) = *(*int32)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_node + 8)))) + 28)) + xtre_stack_pop_int(tls, _stack)
	_minimal_tag = int32(-1)
	goto _112

_111:
	_minimal = xtre_stack_pop_int(tls, _stack)
	_enter_tag = xtre_stack_pop_int(tls, _stack)
	if _minimal == 0 {
		goto _113
	}

	_minimal_tag = _enter_tag
_113:
_112:
	if _first_pass != 0 {
		goto _114
	}

	if _minimal == 0 {
		goto _115
	}

	_direction = int32(0)
	goto _116

_115:
	_direction = int32(1)
_116:
_114:
	goto _14

_18:
	_new_tag = xtre_stack_pop_int(tls, _stack)
	_next_tag = xtre_stack_pop_int(tls, _stack)
	if _new_tag < int32(0) {
		goto _117
	}

	_tag = _new_tag
_117:
	goto _14

_19:
	_node = xtre_stack_pop_voidptr(tls, _stack)
	if _first_pass == 0 {
		goto _118
	}

	*(*int32)(unsafe.Pointer(_node + 28)) = *(*int32)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_node + 8)))) + 28)) + *(*int32)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_node + 8)) + 8)) + 28))
_118:
	goto _14

_20:
_119:
	if *(*int32)(unsafe.Pointer(_regset)) < int32(0) {
		goto _120
	}

	_regset += 4
	goto _119

_120:
	goto _14

_21:
	_10left = xtre_stack_pop_voidptr(tls, _stack)
	_11right = xtre_stack_pop_voidptr(tls, _stack)
	_node = xtre_stack_pop_voidptr(tls, _stack)
	_added_tags = xtre_stack_pop_int(tls, _stack)
	if _first_pass == 0 {
		goto _121
	}

	*(*int32)(unsafe.Pointer(_node + 28)) = *(*int32)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_node + 8)))) + 28)) + *(*int32)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_node + 8)) + 8)) + 28)) + _added_tags + func() int32 {
		if *(*int32)(unsafe.Pointer(_node + 24)) > int32(0) {
			return int32(2)
		}
		return int32(0)
	}()
_121:
	_regset = xtre_stack_pop_voidptr(tls, _stack)
	_tag_left = xtre_stack_pop_int(tls, _stack)
	_tag_right = xtre_stack_pop_int(tls, _stack)
	if *(*int32)(unsafe.Pointer(_node + 24)) <= int32(0) {
		goto _122
	}

	if _first_pass != 0 {
		goto _123
	}

	_status = xtre_add_tag_right(tls, _mem, _10left, _tag_left)
	*(*int32)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_tnfa + 56)) + 4*uintptr(_tag_left))) = int32(1)
	if _status != int32(0) {
		goto _124
	}

	_status = xtre_add_tag_right(tls, _mem, _11right, _tag_right)
_124:
	*(*int32)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_tnfa + 56)) + 4*uintptr(_tag_right))) = int32(1)
_123:
	_num_tags = _num_tags + int32(2)
_122:
	_direction = int32(1)
	goto _14

_22:
	goto _14

_14:
	goto _11

_12:
	if _first_pass != 0 {
		goto _125
	}

	xtre_purge_regset(tls, _regset, _tnfa, _tag)
_125:
	if _first_pass != 0 || _minimal_tag < int32(0) {
		goto _126
	}

	_12i = int32(0)
_127:
	if *(*int32)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_tnfa + 64)) + 4*uintptr(_12i))) < int32(0) {
		goto _129
	}

	_12i++
	goto _127

_129:
	*(*int32)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_tnfa + 64)) + 4*uintptr(_12i))) = _tag
	*(*int32)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_tnfa + 64)) + 4*uintptr(_12i+int32(1)))) = _minimal_tag
	*(*int32)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_tnfa + 64)) + 4*uintptr(_12i+int32(2)))) = int32(-1)
	_minimal_tag = int32(-1)
	_num_minimals++
_126:
	*(*int32)(unsafe.Pointer(_tnfa + 80)) = _num_tags
	*(*int32)(unsafe.Pointer(_tnfa + 72)) = _num_tags
	*(*int32)(unsafe.Pointer(_tnfa + 76)) = _num_minimals
	Xfree(tls, _orig_regset)
	Xfree(tls, _parents)
	Xfree(tls, _saved_states)
	return _status
}

// xtre_expand_ast is defined at regcomp.c:1835:1
func xtre_expand_ast(tls TLS, _mem uintptr /* Ttre_mem_t = *struct{Fblocks *st...ailed int32;Fprovided *uintptr;} */, _stack uintptr /* *Ttre_stack_t = Stre_stack_rec */, _ast uintptr /* *Ttre_ast_node_t = struct{Ftype ...asses *uint64;Fbackref int32;};} */, _position uintptr /* *int32 */, _tag_directions uintptr /* *Ttre_tag_direction_t = int32 */) (r int32) {
	esc := MustMalloc(72)
	var (
		_status        int32
		_bottom        int32
		_pos_add       = esc // *int32
		_pos_add_total int32
		_max_pos       = esc + 16 // *int32
		_iter_depth    int32
		__status       int32
		_1_status      int32
		_node          uintptr // *Ttre_ast_node_t = struct{Ftype ...asses *uint64;Fbackref int32;};}
		_symbol        int32
		_lit           uintptr // *Ttre_literal_t = struct{Fcode_m...ss uint64;Fneg_classes *uint64;}
		_uni           uintptr // *Ttre_union_t = struct{Fleft *st...ses *uint64;Fbackref int32;};};}
		_cat           uintptr // *Ttre_catenation_t = struct{Flef...ses *uint64;Fbackref int32;};};}
		_iter          uintptr // *Ttre_iteration_t = struct{Farg ...min int32;Fmax int32;F16 uint8;}
		_2iter         uintptr // *Ttre_iteration_t = struct{Farg ...min int32;Fmax int32;F16 uint8;}
		_pos_add_last  int32
		_seq1          uintptr    // *Ttre_ast_node_t = struct{Ftype ...asses *uint64;Fbackref int32;};}
		_seq2          = esc + 32 // **Ttre_ast_node_t = struct{Ftype ...asses *uint64;Fbackref int32;};}
		_j             int32
		_pos_add_save  int32
		_copy          = esc + 48 // **Ttre_ast_node_t = struct{Ftype ...asses *uint64;Fbackref int32;};}
		_flags         int32
		_tmp           uintptr    // *Ttre_ast_node_t = struct{Ftype ...asses *uint64;Fbackref int32;};}
		_3copy         = esc + 64 // **Ttre_ast_node_t = struct{Ftype ...asses *uint64;Fbackref int32;};}
	)
	defer Free(esc)
	_status = int32(0)
	_bottom = xtre_stack_num_objects(tls, _stack)
	*(*int32)(unsafe.Pointer(_pos_add)) = int32(0)
	_pos_add_total = int32(0)
	*(*int32)(unsafe.Pointer(_max_pos)) = int32(0)
	_iter_depth = int32(0)
	__status = xtre_stack_push_voidptr(tls, _stack, _ast)
	if __status == int32(0) {
		goto _1
	}

	return __status

_1:
	_1_status = xtre_stack_push_int(tls, _stack, int32(0))
	if _1_status == int32(0) {
		goto _2
	}

	return _1_status

_2:
_3:
	if _status != int32(0) || xtre_stack_num_objects(tls, _stack) <= _bottom {
		goto _4
	}

	if _status == int32(0) {
		goto _5
	}

	goto _4

_5:
	_symbol = xtre_stack_pop_int(tls, _stack)
	_node = xtre_stack_pop_voidptr(tls, _stack)
	switch _symbol {
	case int32(0):
		goto _7
	case int32(1):
		goto _8
	default:
		goto _9
	}
_7:
	switch *(*int32)(unsafe.Pointer(_node)) {
	case int32(0):
		goto _11
	case int32(3):
		goto _12
	case int32(1):
		goto _13
	case int32(2):
		goto _14
	default:
		goto _15
	}
_11:
	_lit = *(*uintptr)(unsafe.Pointer(_node + 8))
	if *(*int64)(unsafe.Pointer(_lit)) < int64(0) && *(*int64)(unsafe.Pointer(_lit)) != int64(-4) {
		goto _16
	}

	{
		p := (*int32)(unsafe.Pointer(_lit + 16))
		*p = *p + *(*int32)(unsafe.Pointer(_pos_add))
	}
	if *(*int32)(unsafe.Pointer(_lit + 16)) <= *(*int32)(unsafe.Pointer(_max_pos)) {
		goto _17
	}

	*(*int32)(unsafe.Pointer(_max_pos)) = *(*int32)(unsafe.Pointer(_lit + 16))
_17:
_16:
	goto _10

_12:
	_uni = *(*uintptr)(unsafe.Pointer(_node + 8))
	_status = xtre_stack_push_voidptr(tls, _stack, *(*uintptr)(unsafe.Pointer(_uni + 8)))
	if _status == int32(0) {
		goto _18
	}

	goto _10

_18:
	_status = xtre_stack_push_int(tls, _stack, int32(0))
	if _status == int32(0) {
		goto _19
	}

	goto _10

_19:
	_status = xtre_stack_push_voidptr(tls, _stack, *(*uintptr)(unsafe.Pointer(_uni)))
	if _status == int32(0) {
		goto _20
	}

	goto _10

_20:
	_status = xtre_stack_push_int(tls, _stack, int32(0))
	if _status == int32(0) {
		goto _21
	}

	goto _10

_21:
	goto _10

_13:
	_cat = *(*uintptr)(unsafe.Pointer(_node + 8))
	_status = xtre_stack_push_voidptr(tls, _stack, *(*uintptr)(unsafe.Pointer(_cat + 8)))
	if _status == int32(0) {
		goto _22
	}

	goto _10

_22:
	_status = xtre_stack_push_int(tls, _stack, int32(0))
	if _status == int32(0) {
		goto _23
	}

	goto _10

_23:
	_status = xtre_stack_push_voidptr(tls, _stack, *(*uintptr)(unsafe.Pointer(_cat)))
	if _status == int32(0) {
		goto _24
	}

	goto _10

_24:
	_status = xtre_stack_push_int(tls, _stack, int32(0))
	if _status == int32(0) {
		goto _25
	}

	goto _10

_25:
	goto _10

_14:
	_iter = *(*uintptr)(unsafe.Pointer(_node + 8))
	_status = xtre_stack_push_int(tls, _stack, *(*int32)(unsafe.Pointer(_pos_add)))
	if _status == int32(0) {
		goto _26
	}

	goto _10

_26:
	_status = xtre_stack_push_voidptr(tls, _stack, _node)
	if _status == int32(0) {
		goto _27
	}

	goto _10

_27:
	_status = xtre_stack_push_int(tls, _stack, int32(1))
	if _status == int32(0) {
		goto _28
	}

	goto _10

_28:
	_status = xtre_stack_push_voidptr(tls, _stack, *(*uintptr)(unsafe.Pointer(_iter)))
	if _status == int32(0) {
		goto _29
	}

	goto _10

_29:
	_status = xtre_stack_push_int(tls, _stack, int32(0))
	if _status == int32(0) {
		goto _30
	}

	goto _10

_30:
	if *(*int32)(unsafe.Pointer(_iter + 8)) <= int32(1) && *(*int32)(unsafe.Pointer(_iter + 12)) <= int32(1) {
		goto _31
	}

	*(*int32)(unsafe.Pointer(_pos_add)) = int32(0)
_31:
	_iter_depth++
	goto _10

_15:
	goto _10

_10:
	goto _6

_8:
	_2iter = *(*uintptr)(unsafe.Pointer(_node + 8))
	*(*int32)(unsafe.Pointer(_pos_add)) = xtre_stack_pop_int(tls, _stack)
	_pos_add_last = *(*int32)(unsafe.Pointer(_pos_add))
	if *(*int32)(unsafe.Pointer(_2iter + 8)) <= int32(1) && *(*int32)(unsafe.Pointer(_2iter + 12)) <= int32(1) {
		goto _32
	}

	_seq1 = 0
	*(*uintptr)(unsafe.Pointer(_seq2)) = 0
	_pos_add_save = *(*int32)(unsafe.Pointer(_pos_add))
	_j = int32(0)
_33:
	if _j >= *(*int32)(unsafe.Pointer(_2iter + 8)) {
		goto _35
	}

	_flags = func() int32 {
		if _j+int32(1) < *(*int32)(unsafe.Pointer(_2iter + 8)) {
			return int32(1)
		}
		return int32(2)
	}()
	_pos_add_save = *(*int32)(unsafe.Pointer(_pos_add))
	_status = xtre_copy_ast(tls, _mem, _stack, *(*uintptr)(unsafe.Pointer(_2iter)), _flags, _pos_add, _tag_directions, _copy, _max_pos)
	if _status == int32(0) {
		goto _36
	}

	return _status

_36:
	if _seq1 == null {
		goto _37
	}

	_seq1 = xtre_ast_new_catenation(tls, _mem, _seq1, *(*uintptr)(unsafe.Pointer(_copy)))
	goto _38

_37:
	_seq1 = *(*uintptr)(unsafe.Pointer(_copy))
_38:
	if _seq1 != null {
		goto _39
	}

	return int32(12)

_39:
	_j++
	goto _33

_35:
	if *(*int32)(unsafe.Pointer(_2iter + 12)) != int32(-1) {
		goto _40
	}

	_pos_add_save = *(*int32)(unsafe.Pointer(_pos_add))
	_status = xtre_copy_ast(tls, _mem, _stack, *(*uintptr)(unsafe.Pointer(_2iter)), int32(0), _pos_add, null, _seq2, _max_pos)
	if _status == int32(0) {
		goto _42
	}

	return _status

_42:
	*(*uintptr)(unsafe.Pointer(_seq2)) = xtre_ast_new_iter(tls, _mem, *(*uintptr)(unsafe.Pointer(_seq2)), int32(0), int32(-1), int32(0))
	if *(*uintptr)(unsafe.Pointer(_seq2)) != null {
		goto _43
	}

	return int32(12)

_43:
	goto _41

_40:
	_j = *(*int32)(unsafe.Pointer(_2iter + 8))
_44:
	if _j >= *(*int32)(unsafe.Pointer(_2iter + 12)) {
		goto _46
	}

	_pos_add_save = *(*int32)(unsafe.Pointer(_pos_add))
	_status = xtre_copy_ast(tls, _mem, _stack, *(*uintptr)(unsafe.Pointer(_2iter)), int32(0), _pos_add, null, _3copy, _max_pos)
	if _status == int32(0) {
		goto _47
	}

	return _status

_47:
	if *(*uintptr)(unsafe.Pointer(_seq2)) == null {
		goto _48
	}

	*(*uintptr)(unsafe.Pointer(_seq2)) = xtre_ast_new_catenation(tls, _mem, *(*uintptr)(unsafe.Pointer(_3copy)), *(*uintptr)(unsafe.Pointer(_seq2)))
	goto _49

_48:
	*(*uintptr)(unsafe.Pointer(_seq2)) = *(*uintptr)(unsafe.Pointer(_3copy))
_49:
	if *(*uintptr)(unsafe.Pointer(_seq2)) != null {
		goto _50
	}

	return int32(12)

_50:
	_tmp = xtre_ast_new_literal(tls, _mem, int32(-1), int32(-1), int32(-1))
	if _tmp != null {
		goto _51
	}

	return int32(12)

_51:
	*(*uintptr)(unsafe.Pointer(_seq2)) = xtre_ast_new_union(tls, _mem, _tmp, *(*uintptr)(unsafe.Pointer(_seq2)))
	if *(*uintptr)(unsafe.Pointer(_seq2)) != null {
		goto _52
	}

	return int32(12)

_52:
	_j++
	goto _44

_46:
_41:
	*(*int32)(unsafe.Pointer(_pos_add)) = _pos_add_save
	if _seq1 != null {
		goto _53
	}

	_seq1 = *(*uintptr)(unsafe.Pointer(_seq2))
	goto _54

_53:
	if *(*uintptr)(unsafe.Pointer(_seq2)) == null {
		goto _55
	}

	_seq1 = xtre_ast_new_catenation(tls, _mem, _seq1, *(*uintptr)(unsafe.Pointer(_seq2)))
_55:
_54:
	if _seq1 != null {
		goto _56
	}

	return int32(12)

_56:
	*(*uintptr)(unsafe.Pointer(_node + 8)) = *(*uintptr)(unsafe.Pointer(_seq1 + 8))
	*(*int32)(unsafe.Pointer(_node)) = *(*int32)(unsafe.Pointer(_seq1))
_32:
	_iter_depth--
	_pos_add_total = _pos_add_total + (*(*int32)(unsafe.Pointer(_pos_add)) - _pos_add_last)
	if _iter_depth != int32(0) {
		goto _57
	}

	*(*int32)(unsafe.Pointer(_pos_add)) = _pos_add_total
_57:
	goto _6

_9:
	goto _6

_6:
	goto _3

_4:
	{
		p := (*int32)(unsafe.Pointer(_position))
		*p = *p + _pos_add_total
	}
	if *(*int32)(unsafe.Pointer(_max_pos)) <= *(*int32)(unsafe.Pointer(_position)) {
		goto _58
	}

	*(*int32)(unsafe.Pointer(_position)) = *(*int32)(unsafe.Pointer(_max_pos))
_58:
	return _status
}

// xtre_ast_new_literal is defined at regcomp.c:153:23
func xtre_ast_new_literal(tls TLS, _mem uintptr /* Ttre_mem_t = *struct{Fblocks *st...ailed int32;Fprovided *uintptr;} */, _code_min int32, _code_max int32, _position int32) (r uintptr /* *Ttre_ast_node_t = struct{Ftype ...asses *uint64;Fbackref int32;};} */) {
	var (
		_node uintptr // *Ttre_ast_node_t = struct{Ftype ...asses *uint64;Fbackref int32;};}
		_lit  uintptr // *Ttre_literal_t = struct{Fcode_m...ss uint64;Fneg_classes *uint64;}
	)
	_lit = X__tre_mem_alloc_impl(tls, _mem, int32(0), null, int32(1), uint64(40))
	_node = xtre_ast_new_node(tls, _mem, int32(0), _lit)
	if _node != 0 {
		goto _1
	}

	return null

_1:
	*(*int64)(unsafe.Pointer(_lit)) = int64(_code_min)
	*(*int64)(unsafe.Pointer(_lit + 8)) = int64(_code_max)
	*(*int32)(unsafe.Pointer(_lit + 16)) = _position
	return _node
}

// xtre_ast_new_catenation is defined at regcomp.c:205:23
func xtre_ast_new_catenation(tls TLS, _mem uintptr /* Ttre_mem_t = *struct{Fblocks *st...ailed int32;Fprovided *uintptr;} */, _left uintptr /* *Ttre_ast_node_t = struct{Ftype ...asses *uint64;Fbackref int32;};} */, _right uintptr /* *Ttre_ast_node_t = struct{Ftype ...asses *uint64;Fbackref int32;};} */) (r uintptr /* *Ttre_ast_node_t = struct{Ftype ...asses *uint64;Fbackref int32;};} */) {
	var (
		_node uintptr // *Ttre_ast_node_t = struct{Ftype ...asses *uint64;Fbackref int32;};}
		_cat  uintptr // *Ttre_catenation_t = struct{Flef...ses *uint64;Fbackref int32;};};}
	)
	if _left != 0 {
		goto _1
	}

	return _right

_1:
	_cat = X__tre_mem_alloc_impl(tls, _mem, int32(0), null, int32(1), uint64(16))
	_node = xtre_ast_new_node(tls, _mem, int32(1), _cat)
	if _node != 0 {
		goto _2
	}

	return null

_2:
	*(*uintptr)(unsafe.Pointer(_cat)) = _left
	*(*uintptr)(unsafe.Pointer(_cat + 8)) = _right
	*(*int32)(unsafe.Pointer(_node + 24)) = *(*int32)(unsafe.Pointer(_left + 24)) + *(*int32)(unsafe.Pointer(_right + 24))
	return _node
}

// xtre_compute_nfl is defined at regcomp.c:2244:1
func xtre_compute_nfl(tls TLS, _mem uintptr /* Ttre_mem_t = *struct{Fblocks *st...ailed int32;Fprovided *uintptr;} */, _stack uintptr /* *Ttre_stack_t = Stre_stack_rec */, _tree uintptr /* *Ttre_ast_node_t = struct{Ftype ...asses *uint64;Fbackref int32;};} */) (r int32) {
	esc := MustMalloc(20)
	var (
		_bottom     int32
		__status    int32
		_1_status   int32
		_symbol     int32
		_node       uintptr // *Ttre_ast_node_t = struct{Ftype ...asses *uint64;Fbackref int32;};}
		_lit        uintptr // *Ttre_literal_t = struct{Fcode_m...ss uint64;Fneg_classes *uint64;}
		_2_status   int32
		_3_status   int32
		_4_status   int32
		_5_status   int32
		_6_status   int32
		_7_status   int32
		_8_status   int32
		_9_status   int32
		_10_status  int32
		_11_status  int32
		_12_status  int32
		_13_status  int32
		_14_status  int32
		_15_status  int32
		_16_status  int32
		_17_status  int32
		_uni        uintptr    // *Ttre_union_t = struct{Fleft *st...ses *uint64;Fbackref int32;};};}
		_iter       uintptr    // *Ttre_iteration_t = struct{Farg ...min int32;Fmax int32;F16 uint8;}
		_num_tags   = esc      // *int32
		_tags       uintptr    // *int32
		_assertions = esc + 16 // *int32
		_status     int32
		_cat        uintptr // *Ttre_catenation_t = struct{Flef...ses *uint64;Fbackref int32;};};}
	)
	defer Free(esc)
	_bottom = xtre_stack_num_objects(tls, _stack)
	__status = xtre_stack_push_voidptr(tls, _stack, _tree)
	if __status == int32(0) {
		goto _1
	}

	return __status

_1:
	_1_status = xtre_stack_push_int(tls, _stack, int32(0))
	if _1_status == int32(0) {
		goto _2
	}

	return _1_status

_2:
_3:
	if xtre_stack_num_objects(tls, _stack) <= _bottom {
		goto _4
	}

	_symbol = xtre_stack_pop_int(tls, _stack)
	_node = xtre_stack_pop_voidptr(tls, _stack)
	switch _symbol {
	case int32(0):
		goto _6
	case int32(1):
		goto _7
	case int32(3):
		goto _8
	case int32(2):
		goto _9
	default:
		goto _10
	}
_6:
	switch *(*int32)(unsafe.Pointer(_node)) {
	case int32(0):
		goto _12
	case int32(3):
		goto _13
	case int32(1):
		goto _14
	case int32(2):
		goto _15
	}
	goto _11

_12:
	_lit = *(*uintptr)(unsafe.Pointer(_node + 8))
	if *(*int64)(unsafe.Pointer(_lit)) != int64(-4) {
		goto _16
	}

	*(*int32)(unsafe.Pointer(_node + 16)) = int32(0)
	*(*uintptr)(unsafe.Pointer(_node + 32)) = xtre_set_one(tls, _mem, *(*int32)(unsafe.Pointer(_lit + 16)), int32(0), int32(0x10ffff), uint64(0), null, int32(-1))
	if *(*uintptr)(unsafe.Pointer(_node + 32)) != 0 {
		goto _18
	}

	return int32(12)

_18:
	*(*uintptr)(unsafe.Pointer(_node + 40)) = xtre_set_one(tls, _mem, *(*int32)(unsafe.Pointer(_lit + 16)), int32(0), int32(0x10ffff), uint64(0), null, int32(*(*int64)(unsafe.Pointer(_lit + 8))))
	if *(*uintptr)(unsafe.Pointer(_node + 40)) != 0 {
		goto _19
	}

	return int32(12)

_19:
	goto _17

_16:
	if *(*int64)(unsafe.Pointer(_lit)) >= int64(0) {
		goto _20
	}

	*(*int32)(unsafe.Pointer(_node + 16)) = int32(1)
	*(*uintptr)(unsafe.Pointer(_node + 32)) = xtre_set_empty(tls, _mem)
	if *(*uintptr)(unsafe.Pointer(_node + 32)) != 0 {
		goto _22
	}

	return int32(12)

_22:
	*(*uintptr)(unsafe.Pointer(_node + 40)) = xtre_set_empty(tls, _mem)
	if *(*uintptr)(unsafe.Pointer(_node + 40)) != 0 {
		goto _23
	}

	return int32(12)

_23:
	goto _21

_20:
	*(*int32)(unsafe.Pointer(_node + 16)) = int32(0)
	*(*uintptr)(unsafe.Pointer(_node + 32)) = xtre_set_one(tls, _mem, *(*int32)(unsafe.Pointer(_lit + 16)), int32(*(*int64)(unsafe.Pointer(_lit))), int32(*(*int64)(unsafe.Pointer(_lit + 8))), uint64(0), null, int32(-1))
	if *(*uintptr)(unsafe.Pointer(_node + 32)) != 0 {
		goto _24
	}

	return int32(12)

_24:
	*(*uintptr)(unsafe.Pointer(_node + 40)) = xtre_set_one(tls, _mem, *(*int32)(unsafe.Pointer(_lit + 16)), int32(*(*int64)(unsafe.Pointer(_lit))), int32(*(*int64)(unsafe.Pointer(_lit + 8))), *(*uint64)(unsafe.Pointer(_lit + 24)), *(*uintptr)(unsafe.Pointer(_lit + 32)), int32(-1))
	if *(*uintptr)(unsafe.Pointer(_node + 40)) != 0 {
		goto _25
	}

	return int32(12)

_25:
_21:
_17:
	goto _11

_13:
	_2_status = xtre_stack_push_voidptr(tls, _stack, _node)
	if _2_status == int32(0) {
		goto _26
	}

	return _2_status

_26:
	_3_status = xtre_stack_push_int(tls, _stack, int32(1))
	if _3_status == int32(0) {
		goto _27
	}

	return _3_status

_27:
	_4_status = xtre_stack_push_voidptr(tls, _stack, *(*uintptr)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_node + 8)) + 8)))
	if _4_status == int32(0) {
		goto _28
	}

	return _4_status

_28:
	_5_status = xtre_stack_push_int(tls, _stack, int32(0))
	if _5_status == int32(0) {
		goto _29
	}

	return _5_status

_29:
	_6_status = xtre_stack_push_voidptr(tls, _stack, *(*uintptr)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_node + 8)))))
	if _6_status == int32(0) {
		goto _30
	}

	return _6_status

_30:
	_7_status = xtre_stack_push_int(tls, _stack, int32(0))
	if _7_status == int32(0) {
		goto _31
	}

	return _7_status

_31:
	goto _11

_14:
	_8_status = xtre_stack_push_voidptr(tls, _stack, _node)
	if _8_status == int32(0) {
		goto _32
	}

	return _8_status

_32:
	_9_status = xtre_stack_push_int(tls, _stack, int32(2))
	if _9_status == int32(0) {
		goto _33
	}

	return _9_status

_33:
	_10_status = xtre_stack_push_voidptr(tls, _stack, *(*uintptr)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_node + 8)) + 8)))
	if _10_status == int32(0) {
		goto _34
	}

	return _10_status

_34:
	_11_status = xtre_stack_push_int(tls, _stack, int32(0))
	if _11_status == int32(0) {
		goto _35
	}

	return _11_status

_35:
	_12_status = xtre_stack_push_voidptr(tls, _stack, *(*uintptr)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_node + 8)))))
	if _12_status == int32(0) {
		goto _36
	}

	return _12_status

_36:
	_13_status = xtre_stack_push_int(tls, _stack, int32(0))
	if _13_status == int32(0) {
		goto _37
	}

	return _13_status

_37:
	goto _11

_15:
	_14_status = xtre_stack_push_voidptr(tls, _stack, _node)
	if _14_status == int32(0) {
		goto _38
	}

	return _14_status

_38:
	_15_status = xtre_stack_push_int(tls, _stack, int32(3))
	if _15_status == int32(0) {
		goto _39
	}

	return _15_status

_39:
	_16_status = xtre_stack_push_voidptr(tls, _stack, *(*uintptr)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_node + 8)))))
	if _16_status == int32(0) {
		goto _40
	}

	return _16_status

_40:
	_17_status = xtre_stack_push_int(tls, _stack, int32(0))
	if _17_status == int32(0) {
		goto _41
	}

	return _17_status

_41:
	goto _11

_11:
	goto _5

_7:
	_uni = *(*uintptr)(unsafe.Pointer(_node + 8))
	*(*int32)(unsafe.Pointer(_node + 16)) = bool2int((*(*int32)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_uni)) + 16)) != 0) || (*(*int32)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_uni + 8)) + 16)) != 0))
	*(*uintptr)(unsafe.Pointer(_node + 32)) = xtre_set_union(tls, _mem, *(*uintptr)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_uni)) + 32)), *(*uintptr)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_uni + 8)) + 32)), null, int32(0))
	if *(*uintptr)(unsafe.Pointer(_node + 32)) != 0 {
		goto _42
	}

	return int32(12)

_42:
	*(*uintptr)(unsafe.Pointer(_node + 40)) = xtre_set_union(tls, _mem, *(*uintptr)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_uni)) + 40)), *(*uintptr)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_uni + 8)) + 40)), null, int32(0))
	if *(*uintptr)(unsafe.Pointer(_node + 40)) != 0 {
		goto _43
	}

	return int32(12)

_43:
	goto _5

_8:
	_iter = *(*uintptr)(unsafe.Pointer(_node + 8))
	if *(*int32)(unsafe.Pointer(_iter + 8)) != int32(0) && *(*int32)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_iter)) + 16)) == 0 {
		goto _44
	}

	*(*int32)(unsafe.Pointer(_node + 16)) = int32(1)
	goto _45

_44:
	*(*int32)(unsafe.Pointer(_node + 16)) = int32(0)
_45:
	*(*uintptr)(unsafe.Pointer(_node + 32)) = *(*uintptr)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_iter)) + 32))
	*(*uintptr)(unsafe.Pointer(_node + 40)) = *(*uintptr)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_iter)) + 40))
	goto _5

_9:
	_cat = *(*uintptr)(unsafe.Pointer(_node + 8))
	*(*int32)(unsafe.Pointer(_node + 16)) = bool2int((*(*int32)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_cat)) + 16)) != 0) && (*(*int32)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_cat + 8)) + 16)) != 0))
	if *(*int32)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_cat)) + 16)) == 0 {
		goto _46
	}

	_status = xtre_match_empty(tls, _stack, *(*uintptr)(unsafe.Pointer(_cat)), null, null, _num_tags)
	if _status == int32(0) {
		goto _48
	}

	return _status

_48:
	_tags = Xmalloc(tls, uint64(4)*uint64(*(*int32)(unsafe.Pointer(_num_tags))+int32(1)))
	if _tags != 0 {
		goto _49
	}

	return int32(12)

_49:
	*(*int32)(unsafe.Pointer(_tags)) = int32(-1)
	*(*int32)(unsafe.Pointer(_assertions)) = int32(0)
	_status = xtre_match_empty(tls, _stack, *(*uintptr)(unsafe.Pointer(_cat)), _tags, _assertions, null)
	if _status == int32(0) {
		goto _50
	}

	Xfree(tls, _tags)
	return _status

_50:
	*(*uintptr)(unsafe.Pointer(_node + 32)) = xtre_set_union(tls, _mem, *(*uintptr)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_cat + 8)) + 32)), *(*uintptr)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_cat)) + 32)), _tags, *(*int32)(unsafe.Pointer(_assertions)))
	Xfree(tls, _tags)
	if *(*uintptr)(unsafe.Pointer(_node + 32)) != 0 {
		goto _51
	}

	return int32(12)

_51:
	goto _47

_46:
	*(*uintptr)(unsafe.Pointer(_node + 32)) = *(*uintptr)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_cat)) + 32))
_47:
	if *(*int32)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_cat + 8)) + 16)) == 0 {
		goto _52
	}

	_status = xtre_match_empty(tls, _stack, *(*uintptr)(unsafe.Pointer(_cat + 8)), null, null, _num_tags)
	if _status == int32(0) {
		goto _54
	}

	return _status

_54:
	_tags = Xmalloc(tls, uint64(4)*uint64(*(*int32)(unsafe.Pointer(_num_tags))+int32(1)))
	if _tags != 0 {
		goto _55
	}

	return int32(12)

_55:
	*(*int32)(unsafe.Pointer(_tags)) = int32(-1)
	*(*int32)(unsafe.Pointer(_assertions)) = int32(0)
	_status = xtre_match_empty(tls, _stack, *(*uintptr)(unsafe.Pointer(_cat + 8)), _tags, _assertions, null)
	if _status == int32(0) {
		goto _56
	}

	Xfree(tls, _tags)
	return _status

_56:
	*(*uintptr)(unsafe.Pointer(_node + 40)) = xtre_set_union(tls, _mem, *(*uintptr)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_cat)) + 40)), *(*uintptr)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_cat + 8)) + 40)), _tags, *(*int32)(unsafe.Pointer(_assertions)))
	Xfree(tls, _tags)
	if *(*uintptr)(unsafe.Pointer(_node + 40)) != 0 {
		goto _57
	}

	return int32(12)

_57:
	goto _53

_52:
	*(*uintptr)(unsafe.Pointer(_node + 40)) = *(*uintptr)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_cat + 8)) + 40))
_53:
	goto _5

_10:
	goto _5

_5:
	goto _3

_4:
	return int32(0)
}

// xtre_ast_to_tnfa is defined at regcomp.c:2624:1
func xtre_ast_to_tnfa(tls TLS, _node uintptr /* *Ttre_ast_node_t = struct{Ftype ...asses *uint64;Fbackref int32;};} */, _transitions uintptr /* *Ttre_tnfa_transition_t = Stnfa_transition */, _counts uintptr /* *int32 */, _offs uintptr /* *int32 */) (r int32) {
	var (
		_uni     uintptr // *Ttre_union_t = struct{Fleft *st...ses *uint64;Fbackref int32;};};}
		_cat     uintptr // *Ttre_catenation_t = struct{Flef...ses *uint64;Fbackref int32;};};}
		_iter    uintptr // *Ttre_iteration_t = struct{Farg ...min int32;Fmax int32;F16 uint8;}
		_errcode int32
	)
	_errcode = int32(0)
	switch *(*int32)(unsafe.Pointer(_node)) {
	case int32(0):
		goto _2
	case int32(3):
		goto _3
	case int32(1):
		goto _4
	case int32(2):
		goto _5
	}
	goto _1

_2:
	goto _1

_3:
	_uni = *(*uintptr)(unsafe.Pointer(_node + 8))
	_errcode = xtre_ast_to_tnfa(tls, *(*uintptr)(unsafe.Pointer(_uni)), _transitions, _counts, _offs)
	if _errcode == int32(0) {
		goto _6
	}

	return _errcode

_6:
	_errcode = xtre_ast_to_tnfa(tls, *(*uintptr)(unsafe.Pointer(_uni + 8)), _transitions, _counts, _offs)
	goto _1

_4:
	_cat = *(*uintptr)(unsafe.Pointer(_node + 8))
	_errcode = xtre_make_trans(tls, *(*uintptr)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_cat)) + 40)), *(*uintptr)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_cat + 8)) + 32)), _transitions, _counts, _offs)
	if _errcode == int32(0) {
		goto _7
	}

	return _errcode

_7:
	_errcode = xtre_ast_to_tnfa(tls, *(*uintptr)(unsafe.Pointer(_cat)), _transitions, _counts, _offs)
	if _errcode == int32(0) {
		goto _8
	}

	return _errcode

_8:
	_errcode = xtre_ast_to_tnfa(tls, *(*uintptr)(unsafe.Pointer(_cat + 8)), _transitions, _counts, _offs)
	goto _1

_5:
	_iter = *(*uintptr)(unsafe.Pointer(_node + 8))

	if *(*int32)(unsafe.Pointer(_iter + 12)) != int32(-1) {
		goto _9
	}

	_errcode = xtre_make_trans(tls, *(*uintptr)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_iter)) + 40)), *(*uintptr)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_iter)) + 32)), _transitions, _counts, _offs)
	if _errcode == int32(0) {
		goto _10
	}

	return _errcode

_10:
_9:
	_errcode = xtre_ast_to_tnfa(tls, *(*uintptr)(unsafe.Pointer(_iter)), _transitions, _counts, _offs)
	goto _1

_1:
	return _errcode
}

type Utre_stack_item = struct {
	Fvoidptr_value [0]uintptr // *void
	Fint_value     [0]int32
	F              int64
}

type Ttre_cint_t = uint32

type t18wint_t = uint32

// xtre_stack_push_int is defined at regcomp.c:378:1
func xtre_stack_push_int(tls TLS, _s uintptr /* *Ttre_stack_t = Stre_stack_rec */, _value int32) (r int32) {
	esc := MustMalloc(8)
	var _item = esc // *Utre_stack_item
	defer Free(esc)
	*(*int32)(unsafe.Pointer(_item)) = _value
	return xtre_stack_push(tls, _s, *(*Utre_stack_item)(unsafe.Pointer(_item)))
}

// xtre_stack_push_voidptr is defined at regcomp.c:379:1
func xtre_stack_push_voidptr(tls TLS, _s uintptr /* *Ttre_stack_t = Stre_stack_rec */, _value uintptr /* *void */) (r int32) {
	esc := MustMalloc(8)
	var _item = esc // *Utre_stack_item
	defer Free(esc)
	*(*uintptr)(unsafe.Pointer(_item)) = _value
	return xtre_stack_push(tls, _s, *(*Utre_stack_item)(unsafe.Pointer(_item)))
}

func preinc761(p *uintptr) uintptr { *p += 1; return *p }

// xparse_atom is defined at regcomp.c:793:22
func xparse_atom(tls TLS, _ctx uintptr /* *Ttre_parse_ctx_t = struct{Fmem ...ax_backref int32;Fcflags int32;} */, _s uintptr /* *int8 */) (r int32) {
	esc := MustMalloc(4)
	var (
		_len   int32
		_ere   int32
		_p     uintptr // *int8
		_node  uintptr // *Ttre_ast_node_t = struct{Ftype ...asses *uint64;Fbackref int32;};}
		_wc    = esc   // *Twchar_t = int32
		_err   int32
		_i     int32
		_v     int32
		_c     int32
		_val   int32
		_tmp1  uintptr // *Ttre_ast_node_t = struct{Ftype ...asses *uint64;Fbackref int32;};}
		_tmp2  uintptr // *Ttre_ast_node_t = struct{Ftype ...asses *uint64;Fbackref int32;};}
		_1tmp1 uintptr // *Ttre_ast_node_t = struct{Ftype ...asses *uint64;Fbackref int32;};}
		_2tmp2 uintptr // *Ttre_ast_node_t = struct{Ftype ...asses *uint64;Fbackref int32;};}
	)
	defer Free(esc)
	_ere = *(*int32)(unsafe.Pointer(_ctx + 52)) & int32(1)
	switch int32(*(*int8)(unsafe.Pointer(_s))) {
	case int32('['):
		goto _2
	case int32('\\'):
		goto _3
	case int32('.'):
		goto _4
	case int32('^'):
		goto _5
	case int32('$'):
		goto _6
	case int32('*'):
		goto _7
	case int32('{'):
		goto _8
	case int32('+'):
		goto _9
	case int32('?'):
		goto _10
	case int32('|'):
		goto _11
	case int32(0):
		goto _12
	default:
		goto _13
	}
_2:
	return xparse_bracket(tls, _ctx, _s+uintptr(1))

_3:
	_p = xtre_expand_macro(tls, _s+uintptr(1))
	if _p == 0 {
		goto _14
	}

	_err = xparse_atom(tls, _ctx, _p)
	*(*uintptr)(unsafe.Pointer(_ctx + 24)) = _s + uintptr(2)
	return _err

_14:
	switch int32(*(*int8)(unsafe.Pointer(preinc761(&_s)))) {
	case int32(0):
		goto _16
	case int32('b'):
		goto _17
	case int32('B'):
		goto _18
	case int32('<'):
		goto _19
	case int32('>'):
		goto _20
	case int32('x'):
		goto _21
	case int32('{'):
		goto _22
	case int32('+'):
		goto _23
	case int32('?'):
		goto _24
	case int32('|'):
		goto _25
	default:
		goto _26
	}
_16:
	return int32(5)

_17:
	_node = xtre_ast_new_literal(tls, *(*uintptr)(unsafe.Pointer(_ctx)), int32(-2), int32(64), int32(-1))
	goto _15

_18:
	_node = xtre_ast_new_literal(tls, *(*uintptr)(unsafe.Pointer(_ctx)), int32(-2), int32(128), int32(-1))
	goto _15

_19:
	_node = xtre_ast_new_literal(tls, *(*uintptr)(unsafe.Pointer(_ctx)), int32(-2), int32(16), int32(-1))
	goto _15

_20:
	_node = xtre_ast_new_literal(tls, *(*uintptr)(unsafe.Pointer(_ctx)), int32(-2), int32(32), int32(-1))
	goto _15

_21:
	_s++
	_v = int32(0)
	_len = int32(2)
	if int32(*(*int8)(unsafe.Pointer(_s))) != int32('{') {
		goto _27
	}

	_len = int32(8)
	_s++
_27:
	_i = int32(0)
_28:
	if _i >= _len || _v >= int32(0x110000) {
		goto _30
	}

	_c = x1hexval(tls, uint32(*(*int8)(unsafe.Pointer(_s + uintptr(_i)))))
	if _c >= int32(0) {
		goto _31
	}

	goto _30

_31:
	_v = int32(16)*_v + _c
	_i++
	goto _28

_30:
	_s += uintptr(_i)
	if _len != int32(8) {
		goto _32
	}

	if int32(*(*int8)(unsafe.Pointer(_s))) == int32('}') {
		goto _33
	}

	return int32(9)

_33:
	_s++
_32:
	_node = xtre_ast_new_literal(tls, *(*uintptr)(unsafe.Pointer(_ctx)), _v, _v, postinc758((*int32)(unsafe.Pointer(_ctx+44))))
	_s--
	goto _15

_22:
_23:
_24:
	if _ere != 0 {
		goto _34
	}

	return int32(13)

_34:
_25:
	if _ere != 0 {
		goto _35
	}

	_node = xtre_ast_new_literal(tls, *(*uintptr)(unsafe.Pointer(_ctx)), int32(-1), int32(-1), int32(-1))
	_s--
	goto lend

_35:
_26:
	if _ere != 0 || uint32(*(*int8)(unsafe.Pointer(_s)))-uint32('1') >= uint32(9) {
		goto _36
	}

	_val = int32(*(*int8)(unsafe.Pointer(_s))) - int32('0')
	_node = xtre_ast_new_literal(tls, *(*uintptr)(unsafe.Pointer(_ctx)), int32(-4), _val, postinc758((*int32)(unsafe.Pointer(_ctx+44))))
	*(*int32)(unsafe.Pointer(_ctx + 48)) = func() int32 {
		if _val >= *(*int32)(unsafe.Pointer(_ctx + 48)) {
			return _val
		}
		return *(*int32)(unsafe.Pointer(_ctx + 48))
	}()
	goto _37

_36:
	goto lparse_literal

_37:
_15:
	_s++
	goto _1

_4:
	if (*(*int32)(unsafe.Pointer(_ctx + 52)) & int32(4)) == 0 {
		goto _38
	}

	_tmp1 = xtre_ast_new_literal(tls, *(*uintptr)(unsafe.Pointer(_ctx)), int32(0), int32(9), postinc758((*int32)(unsafe.Pointer(_ctx+44))))
	_tmp2 = xtre_ast_new_literal(tls, *(*uintptr)(unsafe.Pointer(_ctx)), int32(11), int32(0x10ffff), postinc758((*int32)(unsafe.Pointer(_ctx+44))))
	if _tmp1 == 0 || _tmp2 == 0 {
		goto _40
	}

	_node = xtre_ast_new_union(tls, *(*uintptr)(unsafe.Pointer(_ctx)), _tmp1, _tmp2)
	goto _41

_40:
	_node = null
_41:
	goto _39

_38:
	_node = xtre_ast_new_literal(tls, *(*uintptr)(unsafe.Pointer(_ctx)), int32(0), int32(0x10ffff), postinc758((*int32)(unsafe.Pointer(_ctx+44))))
_39:
	_s++
	goto _1

_5:
	if _ere != 0 || _s == *(*uintptr)(unsafe.Pointer(_ctx + 32)) {
		goto _42
	}

	goto lparse_literal

_42:
	_node = xtre_ast_new_literal(tls, *(*uintptr)(unsafe.Pointer(_ctx)), int32(-2), int32(1), int32(-1))
	_s++
	goto _1

_6:
	if _ere != 0 || *(*int8)(unsafe.Pointer(_s + 1)) == 0 || int32(*(*int8)(unsafe.Pointer(_s + 1))) == int32('\\') && (int32(*(*int8)(unsafe.Pointer(_s + 2))) == int32(')') || int32(*(*int8)(unsafe.Pointer(_s + 2))) == int32('|')) {
		goto _43
	}

	goto lparse_literal

_43:
	_node = xtre_ast_new_literal(tls, *(*uintptr)(unsafe.Pointer(_ctx)), int32(-2), int32(2), int32(-1))
	_s++
	goto _1

_7:
_8:
_9:
_10:
	if _ere == 0 {
		goto _44
	}

	return int32(13)

_44:
_11:
	if _ere != 0 {
		goto _45
	}

	goto lparse_literal

_45:
_12:
	_node = xtre_ast_new_literal(tls, *(*uintptr)(unsafe.Pointer(_ctx)), int32(-1), int32(-1), int32(-1))
	goto _1

_13:
	goto lparse_literal
lparse_literal:
	_len = Xmbtowc(tls, _wc, _s, uint64(18446744073709551615))
	if _len >= int32(0) {
		goto _46
	}

	return int32(2)

_46:
	if (*(*int32)(unsafe.Pointer(_ctx + 52))&int32(2)) == 0 || Xiswupper(tls, uint32(*(*int32)(unsafe.Pointer(_wc)))) == 0 && Xiswlower(tls, uint32(*(*int32)(unsafe.Pointer(_wc)))) == 0 {
		goto _47
	}

	_1tmp1 = xtre_ast_new_literal(tls, *(*uintptr)(unsafe.Pointer(_ctx)), int32(Xtowupper(tls, uint32(*(*int32)(unsafe.Pointer(_wc))))), int32(Xtowupper(tls, uint32(*(*int32)(unsafe.Pointer(_wc))))), *(*int32)(unsafe.Pointer(_ctx + 44)))
	_2tmp2 = xtre_ast_new_literal(tls, *(*uintptr)(unsafe.Pointer(_ctx)), int32(Xtowlower(tls, uint32(*(*int32)(unsafe.Pointer(_wc))))), int32(Xtowlower(tls, uint32(*(*int32)(unsafe.Pointer(_wc))))), *(*int32)(unsafe.Pointer(_ctx + 44)))
	if _1tmp1 == 0 || _2tmp2 == 0 {
		goto _49
	}

	_node = xtre_ast_new_union(tls, *(*uintptr)(unsafe.Pointer(_ctx)), _1tmp1, _2tmp2)
	goto _50

_49:
	_node = null
_50:
	goto _48

_47:
	_node = xtre_ast_new_literal(tls, *(*uintptr)(unsafe.Pointer(_ctx)), *(*int32)(unsafe.Pointer(_wc)), *(*int32)(unsafe.Pointer(_wc)), *(*int32)(unsafe.Pointer(_ctx + 44)))
_48:
	*(*int32)(unsafe.Pointer(_ctx + 44))++
	_s += uintptr(_len)
	goto _1

_1:
	goto lend
lend:
	if _node != 0 {
		goto _51
	}

	return int32(12)

_51:
	*(*uintptr)(unsafe.Pointer(_ctx + 16)) = _node
	*(*uintptr)(unsafe.Pointer(_ctx + 24)) = _s
	return int32(0)
}

func postinc762(p *uintptr) uintptr { r := *p; *p += 1; return r }

// xparse_dup is defined at regcomp.c:725:19
func xparse_dup(tls TLS, _s uintptr /* *int8 */, _ere int32, _pmin uintptr /* *int32 */, _pmax uintptr /* *int32 */) (r uintptr /* *int8 */) {
	esc := MustMalloc(20)
	var (
		_min = esc      // *int32
		_max = esc + 16 // *int32
	)
	defer Free(esc)
	_s = xparse_dup_count(tls, _s, _min)
	if int32(*(*int8)(unsafe.Pointer(_s))) != int32(',') {
		goto _1
	}

	_s = xparse_dup_count(tls, _s+uintptr(1), _max)
	goto _2

_1:
	*(*int32)(unsafe.Pointer(_max)) = *(*int32)(unsafe.Pointer(_min))
_2:
	if (*(*int32)(unsafe.Pointer(_max)) >= *(*int32)(unsafe.Pointer(_min)) || *(*int32)(unsafe.Pointer(_max)) < int32(0)) && *(*int32)(unsafe.Pointer(_max)) <= int32(255) && *(*int32)(unsafe.Pointer(_min)) <= int32(255) && *(*int32)(unsafe.Pointer(_min)) >= int32(0) && (_ere != 0 || int32(*(*int8)(unsafe.Pointer(postinc762(&_s)))) == int32('\\')) && int32(*(*int8)(unsafe.Pointer(postinc762(&_s)))) == int32('}') {
		goto _3
	}

	return null

_3:
	*(*int32)(unsafe.Pointer(_pmin)) = *(*int32)(unsafe.Pointer(_min))
	*(*int32)(unsafe.Pointer(_pmax)) = *(*int32)(unsafe.Pointer(_max))
	return _s
}

func setb763(p *uint8, v int32) uint32 {
	w := uint8(v) & (1<<1 - 1)
	*p = (*p &^ ((1<<1 - 1) << 0)) | (w << 0)
	return uint32(w) << (32 - 1) >> (32 - 1)
}

// xtre_ast_new_iter is defined at regcomp.c:169:23
func xtre_ast_new_iter(tls TLS, _mem uintptr /* Ttre_mem_t = *struct{Fblocks *st...ailed int32;Fprovided *uintptr;} */, _arg uintptr /* *Ttre_ast_node_t = struct{Ftype ...asses *uint64;Fbackref int32;};} */, _min int32, _max int32, _minimal int32) (r uintptr /* *Ttre_ast_node_t = struct{Ftype ...asses *uint64;Fbackref int32;};} */) {
	var (
		_node uintptr // *Ttre_ast_node_t = struct{Ftype ...asses *uint64;Fbackref int32;};}
		_iter uintptr // *Ttre_iteration_t = struct{Farg ...min int32;Fmax int32;F16 uint8;}
	)
	_iter = X__tre_mem_alloc_impl(tls, _mem, int32(0), null, int32(1), uint64(24))
	_node = xtre_ast_new_node(tls, _mem, int32(2), _iter)
	if _node != 0 {
		goto _1
	}

	return null

_1:
	*(*uintptr)(unsafe.Pointer(_iter)) = _arg
	*(*int32)(unsafe.Pointer(_iter + 8)) = _min
	*(*int32)(unsafe.Pointer(_iter + 12)) = _max
	setb763((*uint8)(unsafe.Pointer(_iter+16)), _minimal)
	*(*int32)(unsafe.Pointer(_node + 24)) = *(*int32)(unsafe.Pointer(_arg + 24))
	return _node
}

// xtre_ast_new_union is defined at regcomp.c:187:23
func xtre_ast_new_union(tls TLS, _mem uintptr /* Ttre_mem_t = *struct{Fblocks *st...ailed int32;Fprovided *uintptr;} */, _left uintptr /* *Ttre_ast_node_t = struct{Ftype ...asses *uint64;Fbackref int32;};} */, _right uintptr /* *Ttre_ast_node_t = struct{Ftype ...asses *uint64;Fbackref int32;};} */) (r uintptr /* *Ttre_ast_node_t = struct{Ftype ...asses *uint64;Fbackref int32;};} */) {
	var (
		_node uintptr // *Ttre_ast_node_t = struct{Ftype ...asses *uint64;Fbackref int32;};}
		_un   uintptr // *Ttre_union_t = struct{Fleft *st...ses *uint64;Fbackref int32;};};}
	)
	if _left != 0 {
		goto _1
	}

	return _right

_1:
	_un = X__tre_mem_alloc_impl(tls, _mem, int32(0), null, int32(1), uint64(16))
	_node = xtre_ast_new_node(tls, _mem, int32(3), _un)
	if _node != 0 && _right != 0 {
		goto _2
	}

	return null

_2:
	*(*uintptr)(unsafe.Pointer(_un)) = _left
	*(*uintptr)(unsafe.Pointer(_un + 8)) = _right
	*(*int32)(unsafe.Pointer(_node + 24)) = *(*int32)(unsafe.Pointer(_left + 24)) + *(*int32)(unsafe.Pointer(_right + 24))
	return _node
}

// xmarksub is defined at regcomp.c:757:22
func xmarksub(tls TLS, _ctx uintptr /* *Ttre_parse_ctx_t = struct{Fmem ...ax_backref int32;Fcflags int32;} */, _node uintptr /* *Ttre_ast_node_t = struct{Ftype ...asses *uint64;Fbackref int32;};} */, _subid int32) (r int32) {
	var _n uintptr // *Ttre_ast_node_t = struct{Ftype ...asses *uint64;Fbackref int32;};}

	if *(*int32)(unsafe.Pointer(_node + 20)) < int32(0) {
		goto _1
	}

	_n = xtre_ast_new_literal(tls, *(*uintptr)(unsafe.Pointer(_ctx)), int32(-1), int32(-1), int32(-1))
	if _n != 0 {
		goto _2
	}

	return int32(12)

_2:
	_n = xtre_ast_new_catenation(tls, *(*uintptr)(unsafe.Pointer(_ctx)), _n, _node)
	if _n != 0 {
		goto _3
	}

	return int32(12)

_3:
	*(*int32)(unsafe.Pointer(_n + 24)) = *(*int32)(unsafe.Pointer(_node + 24))
	_node = _n
_1:
	*(*int32)(unsafe.Pointer(_node + 20)) = _subid
	*(*int32)(unsafe.Pointer(_node + 24))++
	*(*uintptr)(unsafe.Pointer(_ctx + 16)) = _node
	return int32(0)
}

func preinc764(p *int32) int32 { *p += -1; return *p }

// xtre_stack_pop_int is defined at regcomp.c:386:1
func xtre_stack_pop_int(tls TLS, _s uintptr /* *Ttre_stack_t = Stre_stack_rec */) (r int32) {
	return *(*int32)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_s + 16)) + 8*uintptr(preinc764((*int32)(unsafe.Pointer(_s+12))))))
}

// xtre_stack_pop_voidptr is defined at regcomp.c:387:1
func xtre_stack_pop_voidptr(tls TLS, _s uintptr /* *Ttre_stack_t = Stre_stack_rec */) (r uintptr /* *void */) {
	return *(*uintptr)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_s + 16)) + 8*uintptr(preinc764((*int32)(unsafe.Pointer(_s+12))))))
}

type Ttre_addtags_symbol_t = int32

type Ttre_tag_direction_t = int32

// xtre_stack_num_objects is defined at regcomp.c:331:1
func xtre_stack_num_objects(tls TLS, _s uintptr /* *Ttre_stack_t = Stre_stack_rec */) (r int32) {
	return *(*int32)(unsafe.Pointer(_s + 12))
}

// xtre_add_tag_left is defined at regcomp.c:1105:1
func xtre_add_tag_left(tls TLS, _mem uintptr /* Ttre_mem_t = *struct{Fblocks *st...ailed int32;Fprovided *uintptr;} */, _node uintptr /* *Ttre_ast_node_t = struct{Ftype ...asses *uint64;Fbackref int32;};} */, _tag_id int32) (r int32) {
	var _c uintptr // *Ttre_catenation_t = struct{Flef...ses *uint64;Fbackref int32;};};}

	_c = X__tre_mem_alloc_impl(tls, _mem, int32(0), null, int32(0), uint64(16))
	if _c != null {
		goto _1
	}

	return int32(12)

_1:
	*(*uintptr)(unsafe.Pointer(_c)) = xtre_ast_new_literal(tls, _mem, int32(-3), _tag_id, int32(-1))
	if *(*uintptr)(unsafe.Pointer(_c)) != null {
		goto _2
	}

	return int32(12)

_2:
	*(*uintptr)(unsafe.Pointer(_c + 8)) = X__tre_mem_alloc_impl(tls, _mem, int32(0), null, int32(0), uint64(48))
	if *(*uintptr)(unsafe.Pointer(_c + 8)) != null {
		goto _3
	}

	return int32(12)

_3:
	*(*uintptr)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_c + 8)) + 8)) = *(*uintptr)(unsafe.Pointer(_node + 8))
	*(*int32)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_c + 8)))) = *(*int32)(unsafe.Pointer(_node))
	*(*int32)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_c + 8)) + 16)) = int32(-1)
	*(*int32)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_c + 8)) + 20)) = int32(-1)
	*(*uintptr)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_c + 8)) + 32)) = null
	*(*uintptr)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_c + 8)) + 40)) = null
	*(*int32)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_c + 8)) + 28)) = int32(0)
	*(*int32)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_c + 8)) + 24)) = int32(0)
	*(*uintptr)(unsafe.Pointer(_node + 8)) = _c
	*(*int32)(unsafe.Pointer(_node)) = int32(1)
	return int32(0)
}

// xtre_purge_regset is defined at regcomp.c:1183:1
func xtre_purge_regset(tls TLS, _regset uintptr /* *int32 */, _tnfa uintptr /* *Ttre_tnfa_t = Stnfa */, _tag int32) {
	var (
		_i     int32
		_id    int32
		_start int32
	)
	_i = int32(0)
_1:
	if *(*int32)(unsafe.Pointer(_regset + 4*uintptr(_i))) < int32(0) {
		goto _3
	}

	_id = *(*int32)(unsafe.Pointer(_regset + 4*uintptr(_i))) / int32(2)
	_start = bool2int(*(*int32)(unsafe.Pointer(_regset + 4*uintptr(_i)))%int32(2) == 0)
	if _start == 0 {
		goto _4
	}

	*(*int32)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_tnfa + 32)) + 16*uintptr(_id))) = _tag
	goto _5

_4:
	*(*int32)(unsafe.Pointer((*(*uintptr)(unsafe.Pointer(_tnfa + 32)) + 16*uintptr(_id)) + 4)) = _tag
_5:
	_i++
	goto _1

_3:
	*(*int32)(unsafe.Pointer(_regset)) = int32(-1)
}

// xtre_add_tag_right is defined at regcomp.c:1136:1
func xtre_add_tag_right(tls TLS, _mem uintptr /* Ttre_mem_t = *struct{Fblocks *st...ailed int32;Fprovided *uintptr;} */, _node uintptr /* *Ttre_ast_node_t = struct{Ftype ...asses *uint64;Fbackref int32;};} */, _tag_id int32) (r int32) {
	var _c uintptr // *Ttre_catenation_t = struct{Flef...ses *uint64;Fbackref int32;};};}

	_c = X__tre_mem_alloc_impl(tls, _mem, int32(0), null, int32(0), uint64(16))
	if _c != null {
		goto _1
	}

	return int32(12)

_1:
	*(*uintptr)(unsafe.Pointer(_c + 8)) = xtre_ast_new_literal(tls, _mem, int32(-3), _tag_id, int32(-1))
	if *(*uintptr)(unsafe.Pointer(_c + 8)) != null {
		goto _2
	}

	return int32(12)

_2:
	*(*uintptr)(unsafe.Pointer(_c)) = X__tre_mem_alloc_impl(tls, _mem, int32(0), null, int32(0), uint64(48))
	if *(*uintptr)(unsafe.Pointer(_c)) != null {
		goto _3
	}

	return int32(12)

_3:
	*(*uintptr)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_c)) + 8)) = *(*uintptr)(unsafe.Pointer(_node + 8))
	*(*int32)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_c)))) = *(*int32)(unsafe.Pointer(_node))
	*(*int32)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_c)) + 16)) = int32(-1)
	*(*int32)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_c)) + 20)) = int32(-1)
	*(*uintptr)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_c)) + 32)) = null
	*(*uintptr)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_c)) + 40)) = null
	*(*int32)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_c)) + 28)) = int32(0)
	*(*int32)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_c)) + 24)) = int32(0)
	*(*uintptr)(unsafe.Pointer(_node + 8)) = _c
	*(*int32)(unsafe.Pointer(_node)) = int32(1)
	return int32(0)
}

type Ttre_expand_ast_symbol_t = int32

// xtre_copy_ast is defined at regcomp.c:1687:1
func xtre_copy_ast(tls TLS, _mem uintptr /* Ttre_mem_t = *struct{Fblocks *st...ailed int32;Fprovided *uintptr;} */, _stack uintptr /* *Ttre_stack_t = Stre_stack_rec */, _ast uintptr /* *Ttre_ast_node_t = struct{Ftype ...asses *uint64;Fbackref int32;};} */, _flags int32, _pos_add uintptr /* *int32 */, _tag_directions uintptr /* *Ttre_tag_direction_t = int32 */, _copy uintptr /* **Ttre_ast_node_t = struct{Ftype...asses *uint64;Fbackref int32;};} */, _max_pos uintptr /* *int32 */) (r int32) {
	var (
		_status     int32
		_bottom     int32
		_num_copied int32
		_first_tag  int32
		_result     uintptr // **Ttre_ast_node_t = struct{Ftype...asses *uint64;Fbackref int32;};}
		_symbol     int32
		_node       uintptr // *Ttre_ast_node_t = struct{Ftype ...asses *uint64;Fbackref int32;};}
		_lit        uintptr // *Ttre_literal_t = struct{Fcode_m...ss uint64;Fneg_classes *uint64;}
		_pos        int32
		_min        int32
		_max        int32
		_p          uintptr // *Ttre_literal_t = struct{Fcode_m...ss uint64;Fneg_classes *uint64;}
		_uni        uintptr // *Ttre_union_t = struct{Fleft *st...ses *uint64;Fbackref int32;};};}
		_tmp        uintptr // *Ttre_union_t = struct{Fleft *st...ses *uint64;Fbackref int32;};};}
		_cat        uintptr // *Ttre_catenation_t = struct{Flef...ses *uint64;Fbackref int32;};};}
		_1tmp       uintptr // *Ttre_catenation_t = struct{Flef...ses *uint64;Fbackref int32;};};}
		_iter       uintptr // *Ttre_iteration_t = struct{Farg ...min int32;Fmax int32;F16 uint8;}
	)
	_status = int32(0)
	_bottom = xtre_stack_num_objects(tls, _stack)
	_num_copied = int32(0)
	_first_tag = int32(1)
	_result = _copy
	_status = xtre_stack_push_voidptr(tls, _stack, _ast)
	_status = xtre_stack_push_int(tls, _stack, int32(0))
_3:
	if _status != int32(0) || xtre_stack_num_objects(tls, _stack) <= _bottom {
		goto _4
	}

	if _status == int32(0) {
		goto _5
	}

	goto _4

_5:
	_symbol = xtre_stack_pop_int(tls, _stack)
	switch _symbol {
	case int32(1):
		goto _7
	case int32(0):
		goto _8
	}
	goto _6

_7:
	_result = xtre_stack_pop_voidptr(tls, _stack)
	goto _6

_8:
	_node = xtre_stack_pop_voidptr(tls, _stack)
	switch *(*int32)(unsafe.Pointer(_node)) {
	case int32(0):
		goto _10
	case int32(3):
		goto _11
	case int32(1):
		goto _12
	case int32(2):
		goto _13
	default:
		goto _14
	}
_10:
	_lit = *(*uintptr)(unsafe.Pointer(_node + 8))
	_pos = *(*int32)(unsafe.Pointer(_lit + 16))
	_min = int32(*(*int64)(unsafe.Pointer(_lit)))
	_max = int32(*(*int64)(unsafe.Pointer(_lit + 8)))
	if *(*int64)(unsafe.Pointer(_lit)) < int64(0) && *(*int64)(unsafe.Pointer(_lit)) != int64(-4) {
		goto _15
	}

	_pos = _pos + *(*int32)(unsafe.Pointer(_pos_add))
	_num_copied++
	goto _16

_15:
	if *(*int64)(unsafe.Pointer(_lit)) != int64(-3) || _flags&int32(1) == 0 {
		goto _17
	}

	_min = int32(-1)
	_max = set759(&_pos, int32(-1))
	goto _18

_17:
	if *(*int64)(unsafe.Pointer(_lit)) != int64(-3) || _flags&int32(2) == 0 || _first_tag == 0 {
		goto _19
	}

	*(*int32)(unsafe.Pointer(_tag_directions + 4*uintptr(_max))) = int32(1)
	_first_tag = int32(0)
_19:
_18:
_16:
	*(*uintptr)(unsafe.Pointer(_result)) = xtre_ast_new_literal(tls, _mem, _min, _max, _pos)
	if *(*uintptr)(unsafe.Pointer(_result)) != null {
		goto _20
	}

	_status = int32(12)
	goto _21

_20:
	_p = *(*uintptr)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_result)) + 8))
	*(*uint64)(unsafe.Pointer(_p + 24)) = *(*uint64)(unsafe.Pointer(_lit + 24))
	*(*uintptr)(unsafe.Pointer(_p + 32)) = *(*uintptr)(unsafe.Pointer(_lit + 32))
_21:
	if _pos <= *(*int32)(unsafe.Pointer(_max_pos)) {
		goto _22
	}

	*(*int32)(unsafe.Pointer(_max_pos)) = _pos
_22:
	goto _9

_11:
	_uni = *(*uintptr)(unsafe.Pointer(_node + 8))
	*(*uintptr)(unsafe.Pointer(_result)) = xtre_ast_new_union(tls, _mem, *(*uintptr)(unsafe.Pointer(_uni)), *(*uintptr)(unsafe.Pointer(_uni + 8)))
	if *(*uintptr)(unsafe.Pointer(_result)) != null {
		goto _23
	}

	_status = int32(12)
	goto _9

_23:
	_tmp = *(*uintptr)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_result)) + 8))
	_result = _tmp
	_status = xtre_stack_push_voidptr(tls, _stack, *(*uintptr)(unsafe.Pointer(_uni + 8)))
	if _status == int32(0) {
		goto _24
	}

	goto _9

_24:
	_status = xtre_stack_push_int(tls, _stack, int32(0))
	if _status == int32(0) {
		goto _25
	}

	goto _9

_25:
	_status = xtre_stack_push_voidptr(tls, _stack, _tmp+8)
	if _status == int32(0) {
		goto _26
	}

	goto _9

_26:
	_status = xtre_stack_push_int(tls, _stack, int32(1))
	if _status == int32(0) {
		goto _27
	}

	goto _9

_27:
	_status = xtre_stack_push_voidptr(tls, _stack, *(*uintptr)(unsafe.Pointer(_uni)))
	if _status == int32(0) {
		goto _28
	}

	goto _9

_28:
	_status = xtre_stack_push_int(tls, _stack, int32(0))
	if _status == int32(0) {
		goto _29
	}

	goto _9

_29:
	goto _9

_12:
	_cat = *(*uintptr)(unsafe.Pointer(_node + 8))
	*(*uintptr)(unsafe.Pointer(_result)) = xtre_ast_new_catenation(tls, _mem, *(*uintptr)(unsafe.Pointer(_cat)), *(*uintptr)(unsafe.Pointer(_cat + 8)))
	if *(*uintptr)(unsafe.Pointer(_result)) != null {
		goto _30
	}

	_status = int32(12)
	goto _9

_30:
	_1tmp = *(*uintptr)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_result)) + 8))
	*(*uintptr)(unsafe.Pointer(_1tmp)) = null
	*(*uintptr)(unsafe.Pointer(_1tmp + 8)) = null
	_result = _1tmp
	_status = xtre_stack_push_voidptr(tls, _stack, *(*uintptr)(unsafe.Pointer(_cat + 8)))
	if _status == int32(0) {
		goto _31
	}

	goto _9

_31:
	_status = xtre_stack_push_int(tls, _stack, int32(0))
	if _status == int32(0) {
		goto _32
	}

	goto _9

_32:
	_status = xtre_stack_push_voidptr(tls, _stack, _1tmp+8)
	if _status == int32(0) {
		goto _33
	}

	goto _9

_33:
	_status = xtre_stack_push_int(tls, _stack, int32(1))
	if _status == int32(0) {
		goto _34
	}

	goto _9

_34:
	_status = xtre_stack_push_voidptr(tls, _stack, *(*uintptr)(unsafe.Pointer(_cat)))
	if _status == int32(0) {
		goto _35
	}

	goto _9

_35:
	_status = xtre_stack_push_int(tls, _stack, int32(0))
	if _status == int32(0) {
		goto _36
	}

	goto _9

_36:
	goto _9

_13:
	_iter = *(*uintptr)(unsafe.Pointer(_node + 8))
	_status = xtre_stack_push_voidptr(tls, _stack, *(*uintptr)(unsafe.Pointer(_iter)))
	if _status == int32(0) {
		goto _37
	}

	goto _9

_37:
	_status = xtre_stack_push_int(tls, _stack, int32(0))
	if _status == int32(0) {
		goto _38
	}

	goto _9

_38:
	*(*uintptr)(unsafe.Pointer(_result)) = xtre_ast_new_iter(tls, _mem, *(*uintptr)(unsafe.Pointer(_iter)), *(*int32)(unsafe.Pointer(_iter + 8)), *(*int32)(unsafe.Pointer(_iter + 12)), int32(uint32(*(*uint8)(unsafe.Pointer(_iter + 16)))<<31>>31))
	if *(*uintptr)(unsafe.Pointer(_result)) != null {
		goto _39
	}

	_status = int32(12)
	goto _9

_39:
	_iter = *(*uintptr)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_result)) + 8))
	_result = _iter
	goto _9

_14:
	goto _9

_9:
	goto _6

_6:
	goto _3

_4:
	{
		p := (*int32)(unsafe.Pointer(_pos_add))
		*p = *p + _num_copied
	}
	return _status
}

// xtre_ast_new_node is defined at regcomp.c:140:23
func xtre_ast_new_node(tls TLS, _mem uintptr /* Ttre_mem_t = *struct{Fblocks *st...ailed int32;Fprovided *uintptr;} */, _type int32, _obj uintptr /* *void */) (r uintptr /* *Ttre_ast_node_t = struct{Ftype ...asses *uint64;Fbackref int32;};} */) {
	var _node uintptr // *Ttre_ast_node_t = struct{Ftype ...asses *uint64;Fbackref int32;};}

	_node = X__tre_mem_alloc_impl(tls, _mem, int32(0), null, int32(1), uint64(48))
	if _node != 0 && _obj != 0 {
		goto _1
	}

	return null

_1:
	*(*uintptr)(unsafe.Pointer(_node + 8)) = _obj
	*(*int32)(unsafe.Pointer(_node)) = _type
	*(*int32)(unsafe.Pointer(_node + 16)) = int32(-1)
	*(*int32)(unsafe.Pointer(_node + 20)) = int32(-1)
	return _node
}

type Ttre_nfl_stack_symbol_t = int32

// xtre_set_one is defined at regcomp.c:2035:27
func xtre_set_one(tls TLS, _mem uintptr /* Ttre_mem_t = *struct{Fblocks *st...ailed int32;Fprovided *uintptr;} */, _position int32, _code_min int32, _code_max int32, _class uint64, _neg_classes uintptr /* *Ttre_ctype_t = Twctype_t = uint64 */, _backref int32) (r uintptr /* *Ttre_pos_and_tags_t = struct{Fp...classes *uint64;Fbackref int32;} */) {
	var _new_set uintptr // *Ttre_pos_and_tags_t = struct{Fp...classes *uint64;Fbackref int32;}

	_new_set = X__tre_mem_alloc_impl(tls, _mem, int32(0), null, int32(1), uint64(112))
	if _new_set != null {
		goto _1
	}

	return null

_1:
	*(*int32)(unsafe.Pointer(_new_set)) = _position
	*(*int32)(unsafe.Pointer(_new_set + 4)) = _code_min
	*(*int32)(unsafe.Pointer(_new_set + 8)) = _code_max
	*(*uint64)(unsafe.Pointer(_new_set + 32)) = _class
	*(*uintptr)(unsafe.Pointer(_new_set + 40)) = _neg_classes
	*(*int32)(unsafe.Pointer(_new_set + 48)) = _backref
	*(*int32)(unsafe.Pointer(_new_set + 56)) = int32(-1)
	*(*int32)(unsafe.Pointer((_new_set + 56) + 4)) = int32(-1)
	*(*int32)(unsafe.Pointer((_new_set + 56) + 8)) = int32(-1)
	return _new_set
}

// xtre_set_empty is defined at regcomp.c:2019:27
func xtre_set_empty(tls TLS, _mem uintptr /* Ttre_mem_t = *struct{Fblocks *st...ailed int32;Fprovided *uintptr;} */) (r uintptr /* *Ttre_pos_and_tags_t = struct{Fp...classes *uint64;Fbackref int32;} */) {
	var _new_set uintptr // *Ttre_pos_and_tags_t = struct{Fp...classes *uint64;Fbackref int32;}

	_new_set = X__tre_mem_alloc_impl(tls, _mem, int32(0), null, int32(1), uint64(56))
	if _new_set != null {
		goto _1
	}

	return null

_1:
	*(*int32)(unsafe.Pointer(_new_set)) = int32(-1)
	*(*int32)(unsafe.Pointer(_new_set + 4)) = int32(-1)
	*(*int32)(unsafe.Pointer(_new_set + 8)) = int32(-1)
	return _new_set
}

// xtre_set_union is defined at regcomp.c:2058:27
func xtre_set_union(tls TLS, _mem uintptr /* Ttre_mem_t = *struct{Fblocks *st...ailed int32;Fprovided *uintptr;} */, _set1 uintptr /* *Ttre_pos_and_tags_t = struct{Fp...classes *uint64;Fbackref int32;} */, _set2 uintptr /* *Ttre_pos_and_tags_t = struct{Fp...classes *uint64;Fbackref int32;} */, _tags uintptr /* *int32 */, _assertions int32) (r uintptr /* *Ttre_pos_and_tags_t = struct{Fp...classes *uint64;Fbackref int32;} */) {
	var (
		_s1       int32
		_s2       int32
		_i        int32
		_j        int32
		_new_set  uintptr // *Ttre_pos_and_tags_t = struct{Fp...classes *uint64;Fbackref int32;}
		_new_tags uintptr // *int32
		_num_tags int32
	)
	_num_tags = int32(0)
_1:
	if _tags == null || *(*int32)(unsafe.Pointer(_tags + 4*uintptr(_num_tags))) < int32(0) {
		goto _3
	}

	_num_tags++
	goto _1

_3:
	_s1 = int32(0)
_4:
	if *(*int32)(unsafe.Pointer(_set1 + 56*uintptr(_s1))) < int32(0) {
		goto _6
	}

	_s1++
	goto _4

_6:
	_s2 = int32(0)
_7:
	if *(*int32)(unsafe.Pointer(_set2 + 56*uintptr(_s2))) < int32(0) {
		goto _9
	}

	_s2++
	goto _7

_9:
	_new_set = X__tre_mem_alloc_impl(tls, _mem, int32(0), null, int32(1), uint64(56)*uint64(_s1+_s2+int32(1)))
	if _new_set != 0 {
		goto _10
	}

	return null

_10:
	_s1 = int32(0)
_11:
	if *(*int32)(unsafe.Pointer(_set1 + 56*uintptr(_s1))) < int32(0) {
		goto _13
	}

	*(*int32)(unsafe.Pointer(_new_set + 56*uintptr(_s1))) = *(*int32)(unsafe.Pointer(_set1 + 56*uintptr(_s1)))
	*(*int32)(unsafe.Pointer((_new_set + 56*uintptr(_s1)) + 4)) = *(*int32)(unsafe.Pointer((_set1 + 56*uintptr(_s1)) + 4))
	*(*int32)(unsafe.Pointer((_new_set + 56*uintptr(_s1)) + 8)) = *(*int32)(unsafe.Pointer((_set1 + 56*uintptr(_s1)) + 8))
	*(*int32)(unsafe.Pointer((_new_set + 56*uintptr(_s1)) + 24)) = *(*int32)(unsafe.Pointer((_set1 + 56*uintptr(_s1)) + 24)) | _assertions
	*(*uint64)(unsafe.Pointer((_new_set + 56*uintptr(_s1)) + 32)) = *(*uint64)(unsafe.Pointer((_set1 + 56*uintptr(_s1)) + 32))
	*(*uintptr)(unsafe.Pointer((_new_set + 56*uintptr(_s1)) + 40)) = *(*uintptr)(unsafe.Pointer((_set1 + 56*uintptr(_s1)) + 40))
	*(*int32)(unsafe.Pointer((_new_set + 56*uintptr(_s1)) + 48)) = *(*int32)(unsafe.Pointer((_set1 + 56*uintptr(_s1)) + 48))
	if *(*uintptr)(unsafe.Pointer((_set1 + 56*uintptr(_s1)) + 16)) != null || _tags != null {
		goto _14
	}

	*(*uintptr)(unsafe.Pointer((_new_set + 56*uintptr(_s1)) + 16)) = null
	goto _15

_14:
	_i = int32(0)
_16:
	if *(*uintptr)(unsafe.Pointer((_set1 + 56*uintptr(_s1)) + 16)) == null || *(*int32)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer((_set1 + 56*uintptr(_s1)) + 16)) + 4*uintptr(_i))) < int32(0) {
		goto _18
	}

	_i++
	goto _16

_18:
	_new_tags = X__tre_mem_alloc_impl(tls, _mem, int32(0), null, int32(0), uint64(4)*uint64(_i+_num_tags+int32(1)))
	if _new_tags != null {
		goto _19
	}

	return null

_19:
	_j = int32(0)
_20:
	if _j >= _i {
		goto _22
	}

	*(*int32)(unsafe.Pointer(_new_tags + 4*uintptr(_j))) = *(*int32)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer((_set1 + 56*uintptr(_s1)) + 16)) + 4*uintptr(_j)))
	_j++
	goto _20

_22:
	_i = int32(0)
_23:
	if _i >= _num_tags {
		goto _25
	}

	*(*int32)(unsafe.Pointer(_new_tags + 4*uintptr(_j+_i))) = *(*int32)(unsafe.Pointer(_tags + 4*uintptr(_i)))
	_i++
	goto _23

_25:
	*(*int32)(unsafe.Pointer(_new_tags + 4*uintptr(_j+_i))) = int32(-1)
	*(*uintptr)(unsafe.Pointer((_new_set + 56*uintptr(_s1)) + 16)) = _new_tags
_15:
	_s1++
	goto _11

_13:
	_s2 = int32(0)
_26:
	if *(*int32)(unsafe.Pointer(_set2 + 56*uintptr(_s2))) < int32(0) {
		goto _28
	}

	*(*int32)(unsafe.Pointer(_new_set + 56*uintptr(_s1+_s2))) = *(*int32)(unsafe.Pointer(_set2 + 56*uintptr(_s2)))
	*(*int32)(unsafe.Pointer((_new_set + 56*uintptr(_s1+_s2)) + 4)) = *(*int32)(unsafe.Pointer((_set2 + 56*uintptr(_s2)) + 4))
	*(*int32)(unsafe.Pointer((_new_set + 56*uintptr(_s1+_s2)) + 8)) = *(*int32)(unsafe.Pointer((_set2 + 56*uintptr(_s2)) + 8))
	*(*int32)(unsafe.Pointer((_new_set + 56*uintptr(_s1+_s2)) + 24)) = *(*int32)(unsafe.Pointer((_set2 + 56*uintptr(_s2)) + 24))
	*(*uint64)(unsafe.Pointer((_new_set + 56*uintptr(_s1+_s2)) + 32)) = *(*uint64)(unsafe.Pointer((_set2 + 56*uintptr(_s2)) + 32))
	*(*uintptr)(unsafe.Pointer((_new_set + 56*uintptr(_s1+_s2)) + 40)) = *(*uintptr)(unsafe.Pointer((_set2 + 56*uintptr(_s2)) + 40))
	*(*int32)(unsafe.Pointer((_new_set + 56*uintptr(_s1+_s2)) + 48)) = *(*int32)(unsafe.Pointer((_set2 + 56*uintptr(_s2)) + 48))
	if *(*uintptr)(unsafe.Pointer((_set2 + 56*uintptr(_s2)) + 16)) != null {
		goto _29
	}

	*(*uintptr)(unsafe.Pointer((_new_set + 56*uintptr(_s1+_s2)) + 16)) = null
	goto _30

_29:
	_i = int32(0)
_31:
	if *(*int32)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer((_set2 + 56*uintptr(_s2)) + 16)) + 4*uintptr(_i))) < int32(0) {
		goto _33
	}

	_i++
	goto _31

_33:
	_new_tags = X__tre_mem_alloc_impl(tls, _mem, int32(0), null, int32(0), uint64(4)*uint64(_i+int32(1)))
	if _new_tags != null {
		goto _34
	}

	return null

_34:
	_j = int32(0)
_35:
	if _j >= _i {
		goto _37
	}

	*(*int32)(unsafe.Pointer(_new_tags + 4*uintptr(_j))) = *(*int32)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer((_set2 + 56*uintptr(_s2)) + 16)) + 4*uintptr(_j)))
	_j++
	goto _35

_37:
	*(*int32)(unsafe.Pointer(_new_tags + 4*uintptr(_j))) = int32(-1)
	*(*uintptr)(unsafe.Pointer((_new_set + 56*uintptr(_s1+_s2)) + 16)) = _new_tags
_30:
	_s2++
	goto _26

_28:
	*(*int32)(unsafe.Pointer(_new_set + 56*uintptr(_s1+_s2))) = int32(-1)
	return _new_set
}

// xtre_match_empty is defined at regcomp.c:2134:1
func xtre_match_empty(tls TLS, _stack uintptr /* *Ttre_stack_t = Stre_stack_rec */, _node uintptr /* *Ttre_ast_node_t = struct{Ftype ...asses *uint64;Fbackref int32;};} */, _tags uintptr /* *int32 */, _assertions uintptr /* *int32 */, _num_tags_seen uintptr /* *int32 */) (r int32) {
	var (
		_lit    uintptr // *Ttre_literal_t = struct{Fcode_m...ss uint64;Fneg_classes *uint64;}
		_uni    uintptr // *Ttre_union_t = struct{Fleft *st...ses *uint64;Fbackref int32;};};}
		_cat    uintptr // *Ttre_catenation_t = struct{Flef...ses *uint64;Fbackref int32;};};}
		_iter   uintptr // *Ttre_iteration_t = struct{Farg ...min int32;Fmax int32;F16 uint8;}
		_i      int32
		_bottom int32
		_status int32
	)
	_bottom = xtre_stack_num_objects(tls, _stack)
	_status = int32(0)
	if _num_tags_seen == 0 {
		goto _1
	}

	*(*int32)(unsafe.Pointer(_num_tags_seen)) = int32(0)
_1:
	_status = xtre_stack_push_voidptr(tls, _stack, _node)
_2:
	if _status != int32(0) || xtre_stack_num_objects(tls, _stack) <= _bottom {
		goto _3
	}

	_node = xtre_stack_pop_voidptr(tls, _stack)
	switch *(*int32)(unsafe.Pointer(_node)) {
	case int32(0):
		goto _5
	case int32(3):
		goto _6
	case int32(1):
		goto _7
	case int32(2):
		goto _8
	default:
		goto _9
	}
_5:
	_lit = *(*uintptr)(unsafe.Pointer(_node + 8))
	switch *(*int64)(unsafe.Pointer(_lit)) {
	case int64(-3):
		goto _11
	case int64(-2):
		goto _12
	case int64(-1):
		goto _13
	default:
		goto _14
	}
_11:
	if *(*int64)(unsafe.Pointer(_lit + 8)) < int64(0) {
		goto _15
	}

	if _tags == null {
		goto _16
	}

	_i = int32(0)
_17:
	if *(*int32)(unsafe.Pointer(_tags + 4*uintptr(_i))) < int32(0) {
		goto _19
	}

	if int64(*(*int32)(unsafe.Pointer(_tags + 4*uintptr(_i)))) != *(*int64)(unsafe.Pointer(_lit + 8)) {
		goto _20
	}

	goto _19

_20:
	_i++
	goto _17

_19:
	if *(*int32)(unsafe.Pointer(_tags + 4*uintptr(_i))) >= int32(0) {
		goto _21
	}

	*(*int32)(unsafe.Pointer(_tags + 4*uintptr(_i))) = int32(*(*int64)(unsafe.Pointer(_lit + 8)))
	*(*int32)(unsafe.Pointer(_tags + 4*uintptr(_i+int32(1)))) = int32(-1)
_21:
_16:
	if _num_tags_seen == 0 {
		goto _22
	}

	*(*int32)(unsafe.Pointer(_num_tags_seen))++
_22:
_15:
	goto _10

_12:
	if _assertions == null {
		goto _23
	}

	{
		p := (*int32)(unsafe.Pointer(_assertions))
		*p = int32(int64(*p) | *(*int64)(unsafe.Pointer(_lit + 8)))
	}
_23:
	goto _10

_13:
	goto _10

_14:
	goto _10

_10:
	goto _4

_6:
	_uni = *(*uintptr)(unsafe.Pointer(_node + 8))
	if *(*int32)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_uni)) + 16)) == 0 {
		goto _24
	}

	_status = xtre_stack_push_voidptr(tls, _stack, *(*uintptr)(unsafe.Pointer(_uni)))
	if _status == int32(0) {
		goto _26
	}

	goto _4

_26:
	goto _25

_24:
	if *(*int32)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_uni + 8)) + 16)) == 0 {
		goto _27
	}

	_status = xtre_stack_push_voidptr(tls, _stack, *(*uintptr)(unsafe.Pointer(_uni + 8)))
	if _status == int32(0) {
		goto _29
	}

	goto _4

_29:
	goto _28

_27:
_28:
_25:
	goto _4

_7:
	_cat = *(*uintptr)(unsafe.Pointer(_node + 8))

	_status = xtre_stack_push_voidptr(tls, _stack, *(*uintptr)(unsafe.Pointer(_cat)))
	if _status == int32(0) {
		goto _30
	}

	goto _4

_30:
	_status = xtre_stack_push_voidptr(tls, _stack, *(*uintptr)(unsafe.Pointer(_cat + 8)))
	if _status == int32(0) {
		goto _31
	}

	goto _4

_31:
	goto _4

_8:
	_iter = *(*uintptr)(unsafe.Pointer(_node + 8))
	if *(*int32)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_iter)) + 16)) == 0 {
		goto _32
	}

	_status = xtre_stack_push_voidptr(tls, _stack, *(*uintptr)(unsafe.Pointer(_iter)))
	if _status == int32(0) {
		goto _33
	}

	goto _4

_33:
_32:
	goto _4

_9:
	goto _4

_4:
	goto _2

_3:
	return _status
}

// xtre_make_trans is defined at regcomp.c:2470:1
func xtre_make_trans(tls TLS, _p1 uintptr /* *Ttre_pos_and_tags_t = struct{Fp...classes *uint64;Fbackref int32;} */, _p2 uintptr /* *Ttre_pos_and_tags_t = struct{Fp...classes *uint64;Fbackref int32;} */, _transitions uintptr /* *Ttre_tnfa_transition_t = Stnfa_transition */, _counts uintptr /* *int32 */, _offs uintptr /* *int32 */) (r int32) {
	var (
		_orig_p2     uintptr // *Ttre_pos_and_tags_t = struct{Fp...classes *uint64;Fbackref int32;}
		_trans       uintptr // *Ttre_tnfa_transition_t = Stnfa_transition
		_i           int32
		_j           int32
		_k           int32
		_l           int32
		_dup         int32
		_prev_p2_pos int32
	)
	_orig_p2 = _p2
	if _transitions == null {
		goto _1
	}

_3:
	if *(*int32)(unsafe.Pointer(_p1)) < int32(0) {
		goto _4
	}

	_p2 = _orig_p2
	_prev_p2_pos = int32(-1)
_5:
	if *(*int32)(unsafe.Pointer(_p2)) < int32(0) {
		goto _6
	}

	if *(*int32)(unsafe.Pointer(_p2)) != _prev_p2_pos {
		goto _7
	}

	_p2 += 56
	goto _5

_7:
	_prev_p2_pos = *(*int32)(unsafe.Pointer(_p2))
	_trans = _transitions + 56*uintptr(*(*int32)(unsafe.Pointer(_offs + 4*uintptr(*(*int32)(unsafe.Pointer(_p1))))))
_8:
	if *(*uintptr)(unsafe.Pointer(_trans + 8)) == null {
		goto _9
	}

	_trans += 56
	goto _8

_9:
	if *(*uintptr)(unsafe.Pointer(_trans + 8)) != null {
		goto _10
	}

	*(*uintptr)(unsafe.Pointer(_trans + 56*uintptr(1) + 8)) = null
_10:
	*(*uint32)(unsafe.Pointer(_trans)) = uint32(*(*int32)(unsafe.Pointer(_p1 + 4)))
	*(*uint32)(unsafe.Pointer(_trans + 4)) = uint32(*(*int32)(unsafe.Pointer(_p1 + 8)))
	*(*uintptr)(unsafe.Pointer(_trans + 8)) = _transitions + 56*uintptr(*(*int32)(unsafe.Pointer(_offs + 4*uintptr(*(*int32)(unsafe.Pointer(_p2))))))
	*(*int32)(unsafe.Pointer(_trans + 16)) = *(*int32)(unsafe.Pointer(_p2))
	*(*int32)(unsafe.Pointer(_trans + 32)) = *(*int32)(unsafe.Pointer(_p1 + 24)) | *(*int32)(unsafe.Pointer(_p2 + 24)) | func() int32 {
		if *(*uint64)(unsafe.Pointer(_p1 + 32)) != 0 {
			return int32(4)
		}
		return int32(0)
	}() | func() int32 {
		if *(*uintptr)(unsafe.Pointer(_p1 + 40)) != null {
			return int32(8)
		}
		return int32(0)
	}()
	if *(*int32)(unsafe.Pointer(_p1 + 48)) < int32(0) {
		goto _11
	}

	*(*int32)(unsafe.Pointer(_trans + 40)) = *(*int32)(unsafe.Pointer(_p1 + 48))
	{
		p := (*int32)(unsafe.Pointer(_trans + 32))
		*p = *p | int32(256)
	}
	goto _12

_11:
	*(*uint64)(unsafe.Pointer(_trans + 40)) = *(*uint64)(unsafe.Pointer(_p1 + 32))
_12:
	if *(*uintptr)(unsafe.Pointer(_p1 + 40)) == null {
		goto _13
	}

	_i = int32(0)
_15:
	if *(*uint64)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_p1 + 40)) + 8*uintptr(_i))) == uint64(0) {
		goto _17
	}

	_i++
	goto _15

_17:
	*(*uintptr)(unsafe.Pointer(_trans + 48)) = Xmalloc(tls, uint64(8)*uint64(_i+int32(1)))
	if *(*uintptr)(unsafe.Pointer(_trans + 48)) != null {
		goto _18
	}

	return int32(12)

_18:
	_i = int32(0)
_19:
	if *(*uint64)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_p1 + 40)) + 8*uintptr(_i))) == uint64(0) {
		goto _21
	}

	*(*uint64)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_trans + 48)) + 8*uintptr(_i))) = *(*uint64)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_p1 + 40)) + 8*uintptr(_i)))
	_i++
	goto _19

_21:
	*(*uint64)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_trans + 48)) + 8*uintptr(_i))) = uint64(0)
	goto _14

_13:
	*(*uintptr)(unsafe.Pointer(_trans + 48)) = null
_14:
	_i = int32(0)
	if *(*uintptr)(unsafe.Pointer(_p1 + 16)) == null {
		goto _22
	}

_23:
	if *(*int32)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_p1 + 16)) + 4*uintptr(_i))) < int32(0) {
		goto _24
	}

	_i++
	goto _23

_24:
_22:
	_j = int32(0)
	if *(*uintptr)(unsafe.Pointer(_p2 + 16)) == null {
		goto _25
	}

_26:
	if *(*int32)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_p2 + 16)) + 4*uintptr(_j))) < int32(0) {
		goto _27
	}

	_j++
	goto _26

_27:
_25:
	if *(*uintptr)(unsafe.Pointer(_trans + 24)) == null {
		goto _28
	}

	Xfree(tls, *(*uintptr)(unsafe.Pointer(_trans + 24)))
_28:
	*(*uintptr)(unsafe.Pointer(_trans + 24)) = null
	if _i+_j <= int32(0) {
		goto _29
	}

	*(*uintptr)(unsafe.Pointer(_trans + 24)) = Xmalloc(tls, uint64(4)*uint64(_i+_j+int32(1)))
	if *(*uintptr)(unsafe.Pointer(_trans + 24)) != 0 {
		goto _30
	}

	return int32(12)

_30:
	_i = int32(0)
	if *(*uintptr)(unsafe.Pointer(_p1 + 16)) == null {
		goto _31
	}

_32:
	if *(*int32)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_p1 + 16)) + 4*uintptr(_i))) < int32(0) {
		goto _33
	}

	*(*int32)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_trans + 24)) + 4*uintptr(_i))) = *(*int32)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_p1 + 16)) + 4*uintptr(_i)))
	_i++
	goto _32

_33:
_31:
	_l = _i
	_j = int32(0)
	if *(*uintptr)(unsafe.Pointer(_p2 + 16)) == null {
		goto _34
	}

_35:
	if *(*int32)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_p2 + 16)) + 4*uintptr(_j))) < int32(0) {
		goto _36
	}

	_dup = int32(0)
	_k = int32(0)
_37:
	if _k >= _i {
		goto _39
	}

	if *(*int32)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_trans + 24)) + 4*uintptr(_k))) != *(*int32)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_p2 + 16)) + 4*uintptr(_j))) {
		goto _40
	}

	_dup = int32(1)
	goto _39

_40:
	_k++
	goto _37

_39:
	if _dup != 0 {
		goto _41
	}

	*(*int32)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_trans + 24)) + 4*uintptr(postinc758(&_l)))) = *(*int32)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_p2 + 16)) + 4*uintptr(_j)))
_41:
	_j++
	goto _35

_36:
_34:
	*(*int32)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_trans + 24)) + 4*uintptr(_l))) = int32(-1)
_29:
	_p2 += 56
	goto _5

_6:
	_p1 += 56
	goto _3

_4:
	goto _2

_1:
_42:
	if *(*int32)(unsafe.Pointer(_p1)) < int32(0) {
		goto _43
	}

	_p2 = _orig_p2
_44:
	if *(*int32)(unsafe.Pointer(_p2)) < int32(0) {
		goto _45
	}

	*(*int32)(unsafe.Pointer(_counts + 4*uintptr(*(*int32)(unsafe.Pointer(_p1)))))++
	_p2 += 56
	goto _44

_45:
	_p1 += 56
	goto _42

_43:
_2:
	return int32(0)
}

// xtre_stack_push is defined at regcomp.c:337:1
func xtre_stack_push(tls TLS, _s uintptr /* *Ttre_stack_t = Stre_stack_rec */, _value struct {
	Fvoidptr_value [0]uintptr // *void
	Fint_value     [0]int32
	F              int64
}) (r int32) {
	var (
		_new_buffer uintptr // *Utre_stack_item
		_new_size   int32
	)
	if *(*int32)(unsafe.Pointer(_s + 12)) >= *(*int32)(unsafe.Pointer(_s)) {
		goto _1
	}

	*(*Utre_stack_item)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_s + 16)) + 8*uintptr(*(*int32)(unsafe.Pointer(_s + 12))))) = _value
	*(*int32)(unsafe.Pointer(_s + 12))++
	goto _2

_1:
	if *(*int32)(unsafe.Pointer(_s)) < *(*int32)(unsafe.Pointer(_s + 4)) {
		goto _3
	}

	return int32(12)

	goto _4

_3:
	_new_size = *(*int32)(unsafe.Pointer(_s)) + *(*int32)(unsafe.Pointer(_s + 8))
	if _new_size <= *(*int32)(unsafe.Pointer(_s + 4)) {
		goto _5
	}

	_new_size = *(*int32)(unsafe.Pointer(_s + 4))
_5:
	_new_buffer = Xrealloc(tls, *(*uintptr)(unsafe.Pointer(_s + 16)), uint64(8)*uint64(_new_size))
	if _new_buffer != null {
		goto _6
	}

	return int32(12)

_6:
	*(*int32)(unsafe.Pointer(_s)) = _new_size
	*(*uintptr)(unsafe.Pointer(_s + 16)) = _new_buffer
	xtre_stack_push(tls, _s, _value)
_4:
_2:
	return int32(0)
}

func fp765(f func(TLS, uintptr, uintptr) int32) uintptr { return *(*uintptr)(unsafe.Pointer(&f)) }

// xparse_bracket is defined at regcomp.c:613:22
func xparse_bracket(tls TLS, _ctx uintptr /* *Ttre_parse_ctx_t = struct{Fmem ...ax_backref int32;Fcflags int32;} */, _s uintptr /* *int8 */) (r int32) {
	esc := MustMalloc(552)
	var (
		_i      int32
		_max    int32
		_min    int32
		_negmax int32
		_negmin int32
		_node   uintptr    // *Ttre_ast_node_t = struct{Ftype ...asses *uint64;Fbackref int32;};}
		_n      uintptr    // *Ttre_ast_node_t = struct{Ftype ...asses *uint64;Fbackref int32;};}
		_nc     uintptr    // *Ttre_ctype_t = Twctype_t = uint64
		_lit    uintptr    // *Ttre_literal_t = struct{Fcode_m...ss uint64;Fneg_classes *uint64;}
		_ls     = esc      // *Sliterals
		_neg    = esc + 32 // *Sneg
		_err    int32
	)
	defer Free(esc)
	_node = 0
	_nc = 0
	*(*uintptr)(unsafe.Pointer(_ls)) = *(*uintptr)(unsafe.Pointer(_ctx))
	*(*int32)(unsafe.Pointer(_ls + 16)) = int32(0)
	*(*int32)(unsafe.Pointer(_ls + 20)) = int32(32)
	*(*uintptr)(unsafe.Pointer(_ls + 8)) = Xmalloc(tls, uint64(*(*int32)(unsafe.Pointer(_ls + 20)))*uint64(8))
	if *(*uintptr)(unsafe.Pointer(_ls + 8)) != 0 {
		goto _1
	}

	return int32(12)

_1:
	*(*int32)(unsafe.Pointer(_neg + 4)) = int32(0)
	*(*int32)(unsafe.Pointer(_neg)) = bool2int(int32(*(*int8)(unsafe.Pointer(_s))) == int32('^'))
	if *(*int32)(unsafe.Pointer(_neg)) == 0 {
		goto _2
	}

	_s++
_2:
	_err = xparse_bracket_terms(tls, _ctx, _s, _ls, _neg)
	if _err == int32(0) {
		goto _3
	}

	goto lparse_bracket_done

_3:
	if *(*int32)(unsafe.Pointer(_neg)) == 0 {
		goto _4
	}

	if (*(*int32)(unsafe.Pointer(_ctx + 52)) & int32(4)) == 0 {
		goto _5
	}

	_lit = xtre_new_lit(tls, _ls)
	if _lit != 0 {
		goto _6
	}

	_err = int32(12)
	goto lparse_bracket_done

_6:
	*(*int64)(unsafe.Pointer(_lit)) = int64('\n')
	*(*int64)(unsafe.Pointer(_lit + 8)) = int64('\n')
	*(*int32)(unsafe.Pointer(_lit + 16)) = int32(-1)
_5:
	Xqsort(tls, *(*uintptr)(unsafe.Pointer(_ls + 8)), uint64(*(*int32)(unsafe.Pointer(_ls + 16))), uint64(8), fp765(xtre_compare_lit))
	_lit = xtre_new_lit(tls, _ls)
	if _lit != 0 {
		goto _7
	}

	_err = int32(12)
	goto lparse_bracket_done

_7:
	*(*int64)(unsafe.Pointer(_lit)) = int64(1114112)
	*(*int64)(unsafe.Pointer(_lit + 8)) = int64(1114112)
	*(*int32)(unsafe.Pointer(_lit + 16)) = int32(-1)
	if *(*int32)(unsafe.Pointer(_neg + 4)) == 0 {
		goto _8
	}

	_nc = X__tre_mem_alloc_impl(tls, *(*uintptr)(unsafe.Pointer(_ctx)), int32(0), null, int32(0), uint64(*(*int32)(unsafe.Pointer(_neg + 4))+int32(1))*uint64(8))
	if _nc != 0 {
		goto _9
	}

	_err = int32(12)
	goto lparse_bracket_done

_9:
	Xmemcpy(tls, _nc, _neg+8, uint64(*(*int32)(unsafe.Pointer(_neg + 4)))*uint64(8))
	*(*uint64)(unsafe.Pointer(_nc + 8*uintptr(*(*int32)(unsafe.Pointer(_neg + 4))))) = uint64(0)
_8:
_4:
	_negmax = set759(&_negmin, int32(0))
	_i = int32(0)
_10:
	if _i >= *(*int32)(unsafe.Pointer(_ls + 16)) {
		goto _12
	}

	_lit = *(*uintptr)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_ls + 8)) + 8*uintptr(_i)))
	_min = int32(*(*int64)(unsafe.Pointer(_lit)))
	_max = int32(*(*int64)(unsafe.Pointer(_lit + 8)))
	if *(*int32)(unsafe.Pointer(_neg)) == 0 {
		goto _13
	}

	if _min > _negmin {
		goto _14
	}

	_negmin = func() int32 {
		if _max+int32(1) >= _negmin {
			return _max + int32(1)
		}
		return _negmin
	}()
	goto _11

_14:
	_negmax = _min - int32(1)
	*(*int64)(unsafe.Pointer(_lit)) = int64(_negmin)
	*(*int64)(unsafe.Pointer(_lit + 8)) = int64(_negmax)
	_negmin = _max + int32(1)
_13:
	*(*int32)(unsafe.Pointer(_lit + 16)) = *(*int32)(unsafe.Pointer(_ctx + 44))
	*(*uintptr)(unsafe.Pointer(_lit + 32)) = _nc
	_n = xtre_ast_new_node(tls, *(*uintptr)(unsafe.Pointer(_ctx)), int32(0), _lit)
	_node = xtre_ast_new_union(tls, *(*uintptr)(unsafe.Pointer(_ctx)), _node, _n)
	if _node != 0 {
		goto _15
	}

	_err = int32(12)
	goto _12

_15:
_11:
	_i++
	goto _10

_12:
	goto lparse_bracket_done
lparse_bracket_done:
	Xfree(tls, *(*uintptr)(unsafe.Pointer(_ls + 8)))
	*(*int32)(unsafe.Pointer(_ctx + 44))++
	*(*uintptr)(unsafe.Pointer(_ctx + 16)) = _node
	return _err
}

// xtre_expand_macro is defined at regcomp.c:431:19
func xtre_expand_macro(tls TLS, _s uintptr /* *int8 */) (r uintptr /* *int8 */) {
	var _i int32

	_i = int32(0)
_1:
	if *(*int8)(unsafe.Pointer(xtre_macros + 16*uintptr(_i))) == 0 || int32(*(*int8)(unsafe.Pointer(xtre_macros + 16*uintptr(_i)))) == int32(*(*int8)(unsafe.Pointer(_s))) {
		goto _3
	}

	_i++
	goto _1

_3:
	return *(*uintptr)(unsafe.Pointer((xtre_macros + 16*uintptr(_i)) + 8))
}

// xhexval is defined at regcomp.c:749:12
func x1hexval(tls TLS, _c uint32) (r int32) {
	if _c-uint32('0') >= uint32(10) {
		goto _1
	}

	return int32(_c - uint32('0'))

_1:
	_c = _c | uint32(32)
	if _c-uint32('a') >= uint32(6) {
		goto _2
	}

	return int32(_c - uint32('a') + uint32(10))

_2:
	return int32(-1)
}

type t20wchar_t = int32

// xparse_dup_count is defined at regcomp.c:710:19
func xparse_dup_count(tls TLS, _s uintptr /* *int8 */, _n uintptr /* *int32 */) (r uintptr /* *int8 */) {
	*(*int32)(unsafe.Pointer(_n)) = int32(-1)
	if uint32(*(*int8)(unsafe.Pointer(_s)))-uint32('0') < uint32(10) {
		goto _1
	}

	return _s

_1:
	*(*int32)(unsafe.Pointer(_n)) = int32(0)

_2:
	*(*int32)(unsafe.Pointer(_n)) = int32(10)**(*int32)(unsafe.Pointer(_n)) + (int32(*(*int8)(unsafe.Pointer(_s))) - int32('0'))
	_s++
	if uint32(*(*int8)(unsafe.Pointer(_s)))-uint32('0') < uint32(10) && *(*int32)(unsafe.Pointer(_n)) <= int32(255) {
		goto _5
	}

	goto _4

_5:
	goto _2

_4:
	return _s
}

type Ttre_copyast_symbol_t = int32

type Sliterals = struct {
	Fmem uintptr // Ttre_mem_t = *struct{Fblocks *st...ailed int32;Fprovided *uintptr;}
	Fa   uintptr // **Ttre_literal_t = struct{Fcode_...ss uint64;Fneg_classes *uint64;}
	Flen int32
	Fcap int32
}

type Sneg = struct {
	Fnegate int32
	Flen    int32
	Fa      [64]uint64
}

// xparse_bracket_terms is defined at regcomp.c:531:22
func xparse_bracket_terms(tls TLS, _ctx uintptr /* *Ttre_parse_ctx_t = struct{Fmem ...ax_backref int32;Fcflags int32;} */, _s uintptr /* *int8 */, _ls uintptr /* *Sliterals */, _neg uintptr /* *Sneg */) (r int32) {
	esc := MustMalloc(31)
	var (
		_start uintptr // *int8
		_class uint64
		_min   int32
		_max   int32
		_wc    = esc // *Twchar_t = int32
		_len   int32
		_tmp   = esc + 16 // *[15]int8
		_lit   uintptr    // *Ttre_literal_t = struct{Fcode_m...ss uint64;Fneg_classes *uint64;}
	)
	defer Free(esc)
	_start = _s

_1:
	_class = uint64(0)
	_len = Xmbtowc(tls, _wc, _s, uint64(18446744073709551615))
	if _len > int32(0) {
		goto _4
	}

	if *(*int8)(unsafe.Pointer(_s)) != 0 {
		return int32(2)
	}

	return int32(7)

_4:
	if int32(*(*int8)(unsafe.Pointer(_s))) != int32(']') || _s == _start {
		goto _5
	}

	*(*uintptr)(unsafe.Pointer(_ctx + 24)) = _s + uintptr(1)
	return int32(0)

_5:
	if int32(*(*int8)(unsafe.Pointer(_s))) != int32('-') || _s == _start || int32(*(*int8)(unsafe.Pointer(_s + 1))) == int32(']') || int32(*(*int8)(unsafe.Pointer(_s + 1))) == int32('-') && int32(*(*int8)(unsafe.Pointer(_s + 2))) != int32(']') {
		goto _6
	}

	return int32(11)

_6:
	if int32(*(*int8)(unsafe.Pointer(_s))) != int32('[') || int32(*(*int8)(unsafe.Pointer(_s + 1))) != int32('.') && int32(*(*int8)(unsafe.Pointer(_s + 1))) != int32('=') {
		goto _7
	}

	return int32(3)

_7:
	if int32(*(*int8)(unsafe.Pointer(_s))) != int32('[') || int32(*(*int8)(unsafe.Pointer(_s + 1))) != int32(':') {
		goto _8
	}

	_s += uintptr(2)
	_len = int32(0)
_10:
	if _len >= int32(14) || *(*int8)(unsafe.Pointer(_s + uintptr(_len))) == 0 {
		goto _12
	}

	if int32(*(*int8)(unsafe.Pointer(_s + uintptr(_len)))) != int32(':') {
		goto _13
	}

	Xmemcpy(tls, _tmp, _s, uint64(_len))
	*(*int8)(unsafe.Pointer(_tmp + uintptr(_len))) = int8(0)
	_class = Xwctype(tls, _tmp)
	goto _12

_13:
	_len++
	goto _10

_12:
	if _class != 0 && int32(*(*int8)(unsafe.Pointer(_s + uintptr(_len+int32(1))))) == int32(']') {
		goto _14
	}

	return int32(4)

_14:
	_min = int32(0)
	_max = int32(0x10ffff)
	_s += uintptr(_len + int32(2))
	goto _9

_8:
	_min = set759(&_max, *(*int32)(unsafe.Pointer(_wc)))
	_s += uintptr(_len)
	if int32(*(*int8)(unsafe.Pointer(_s))) != int32('-') || int32(*(*int8)(unsafe.Pointer(_s + 1))) == int32(']') {
		goto _15
	}

	_s++
	_len = Xmbtowc(tls, _wc, _s, uint64(18446744073709551615))
	_max = *(*int32)(unsafe.Pointer(_wc))
	if _len > int32(0) && _min <= _max {
		goto _16
	}

	return int32(11)

_16:
	_s += uintptr(_len)
_15:
_9:
	if _class == 0 || *(*int32)(unsafe.Pointer(_neg)) == 0 {
		goto _17
	}

	if *(*int32)(unsafe.Pointer(_neg + 4)) < int32(64) {
		goto _19
	}

	return int32(12)

_19:
	*(*uint64)(unsafe.Pointer((_neg + 8) + 8*uintptr(postinc758((*int32)(unsafe.Pointer(_neg+4)))))) = _class
	goto _18

_17:
	_lit = xtre_new_lit(tls, _ls)
	if _lit != 0 {
		goto _20
	}

	return int32(12)

_20:
	*(*int64)(unsafe.Pointer(_lit)) = int64(_min)
	*(*int64)(unsafe.Pointer(_lit + 8)) = int64(_max)
	*(*uint64)(unsafe.Pointer(_lit + 24)) = _class
	*(*int32)(unsafe.Pointer(_lit + 16)) = int32(-1)
	if (*(*int32)(unsafe.Pointer(_ctx + 52))&int32(2)) == 0 || _class != 0 {
		goto _21
	}

	if xadd_icase_literals(tls, _ls, _min, _max) == 0 {
		goto _22
	}

	return int32(12)

_22:
_21:
_18:
	goto _1
	return r
}

// xtre_new_lit is defined at regcomp.c:454:22
func xtre_new_lit(tls TLS, _p uintptr /* *Sliterals */) (r uintptr /* *Ttre_literal_t = struct{Fcode_m...ss uint64;Fneg_classes *uint64;} */) {
	var _a uintptr // **Ttre_literal_t = struct{Fcode_...ss uint64;Fneg_classes *uint64;}

	if *(*int32)(unsafe.Pointer(_p + 16)) < *(*int32)(unsafe.Pointer(_p + 20)) {
		goto _1
	}

	if *(*int32)(unsafe.Pointer(_p + 20)) < int32(32768) {
		goto _2
	}

	return null

_2:
	{
		p := (*int32)(unsafe.Pointer(_p + 20))
		*p = *p * int32(2)
	}
	_a = Xrealloc(tls, *(*uintptr)(unsafe.Pointer(_p + 8)), uint64(*(*int32)(unsafe.Pointer(_p + 20)))*uint64(8))
	if _a != 0 {
		goto _3
	}

	return null

_3:
	*(*uintptr)(unsafe.Pointer(_p + 8)) = _a
_1:
	_a = *(*uintptr)(unsafe.Pointer(_p + 8)) + 8*uintptr(postinc758((*int32)(unsafe.Pointer(_p+16))))
	*(*uintptr)(unsafe.Pointer(_a)) = X__tre_mem_alloc_impl(tls, *(*uintptr)(unsafe.Pointer(_p)), int32(0), null, int32(1), uint64(40))
	return *(*uintptr)(unsafe.Pointer(_a))
}

// xtre_compare_lit is defined at regcomp.c:439:1
func xtre_compare_lit(tls TLS, _a uintptr /* *void */, _b uintptr /* *void */) (r int32) {
	var (
		_la uintptr // **Ttre_literal_t = struct{Fcode_...ss uint64;Fneg_classes *uint64;}
		_lb uintptr // **Ttre_literal_t = struct{Fcode_...ss uint64;Fneg_classes *uint64;}
	)
	_la = _a
	_lb = _b
	return int32(*(*int64)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_la)))) - *(*int64)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_lb)))))
}

// xtre_macros [13]struct{Fc int8;Fexpansion *int8;}, escapes: true, regcomp.c:420:3
var xtre_macros = bss + 3672 // array of 13 struct{c char; expansion pointer to char}

func init() {
	*(*[13]struct {
		Fc         int8
		Fexpansion uintptr // *int8
	})(unsafe.Pointer(xtre_macros)) = [13]struct {
		Fc         int8
		Fexpansion uintptr // *int8
	}{
		0:

		// *int8
		{
			Fc:         int8('t'),
			Fexpansion: ts + 4092, /* "\t" */
		},
		1:

		// *int8
		{
			Fc:         int8('n'),
			Fexpansion: ts + 1440, /* "\n" */
		},
		2:

		// *int8
		{
			Fc:         int8('r'),
			Fexpansion: ts + 4096, /* "\r" */
		},
		3:

		// *int8
		{
			Fc:         int8('f'),
			Fexpansion: ts + 4100, /* "\f" */
		},
		4:

		// *int8
		{
			Fc:         int8('a'),
			Fexpansion: ts + 4104, /* "\a" */
		},
		5:

		// *int8
		{
			Fc:         int8('e'),
			Fexpansion: ts + 4108, /* "\x1b" */
		},
		6:

		// *int8
		{
			Fc:         int8('w'),
			Fexpansion: ts + 4112, /* "[[:alnum:]_]" */
		},
		7:

		// *int8
		{
			Fc:         int8('W'),
			Fexpansion: ts + 4128, /* "[^[:alnum:]_]" */
		},
		8:

		// *int8
		{
			Fc:         int8('s'),
			Fexpansion: ts + 4144, /* "[[:space:]]" */
		},
		9:

		// *int8
		{
			Fc:         int8('S'),
			Fexpansion: ts + 4156, /* "[^[:space:]]" */
		},
		10:

		// *int8
		{
			Fc:         int8('d'),
			Fexpansion: ts + 4172, /* "[[:digit:]]" */
		},
		11:

		// *int8
		{
			Fc:         int8('D'),
			Fexpansion: ts + 4184, /* "[^[:digit:]]" */
		},
	}
}

// xadd_icase_literals is defined at regcomp.c:471:12
func xadd_icase_literals(tls TLS, _ls uintptr /* *Sliterals */, _min int32, _max int32) (r int32) {
	var (
		_lit uintptr // *Ttre_literal_t = struct{Fcode_m...ss uint64;Fneg_classes *uint64;}
		_b   int32
		_e   int32
		_c   int32
	)
	_c = _min
_1:
	if _c > _max {
		goto _3
	}

	if Xiswlower(tls, uint32(_c)) == 0 {
		goto _4
	}

	_b = set759(&_e, int32(Xtowupper(tls, uint32(_c))))
	_c++
	_e++
_6:
	if _c > _max {
		goto _8
	}

	if Xtowupper(tls, uint32(_c)) == uint32(_e) {
		goto _9
	}

	goto _8

_9:
	_c++
	_e++
	goto _6

_8:
	goto _5

_4:
	if Xiswupper(tls, uint32(_c)) == 0 {
		goto _10
	}

	_b = set759(&_e, int32(Xtowlower(tls, uint32(_c))))
	_c++
	_e++
_12:
	if _c > _max {
		goto _14
	}

	if Xtowlower(tls, uint32(_c)) == uint32(_e) {
		goto _15
	}

	goto _14

_15:
	_c++
	_e++
	goto _12

_14:
	goto _11

_10:
	_c++
	goto _2

_11:
_5:
	_lit = xtre_new_lit(tls, _ls)
	if _lit != 0 {
		goto _16
	}

	return int32(-1)

_16:
	*(*int64)(unsafe.Pointer(_lit)) = int64(_b)
	*(*int64)(unsafe.Pointer(_lit + 8)) = int64(_e - int32(1))
	*(*int32)(unsafe.Pointer(_lit + 16)) = int32(-1)
_2:
	goto _1

_3:
	return int32(0)
}

type Stre_list struct{ uintptr }

// linking regerror.o

// Xregerror is defined at regerror.c:30:8
func Xregerror(tls TLS, _e int32, _preg uintptr /* *Tregex_t = struct{Fre_nsub uint..._nsub2 uint64;F__padding2 int8;} */, _buf uintptr /* *int8 */, _size uint64) (r uint64) {
	var _s uintptr // *int8

	_s = xmessages
_1:
	if _e == 0 || *(*int8)(unsafe.Pointer(_s)) == 0 {
		goto _3
	}

	_e--
	_s += uintptr(Xstrlen(tls, _s) + uint64(1))
	goto _1

_3:
	if *(*int8)(unsafe.Pointer(_s)) != 0 {
		goto _4
	}

	_s++
_4:
	_s = X__lctrans_cur(tls, _s)
	return uint64(int32(1) + Xsnprintf(tls, _buf, _size, ts+132 /* "%s" */, _s))
}

type t736__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t736__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t185size_t = uint64

// xmessages [286]int8, escapes: true, regerror.c:12:19
var xmessages = ds + 44224

// linking regexec.o

// Xregexec is defined at regexec.c:996:1
func Xregexec(tls TLS, _preg uintptr /* *Tregex_t = struct{Fre_nsub uint..._nsub2 uint64;F__padding2 int8;} */, _string uintptr /* *int8 */, _nmatch uint64, _pmatch uintptr /* uintptr */, _eflags int32) (r int32) {
	esc := MustMalloc(8)
	var (
		_tnfa   uintptr // *Ttre_tnfa_t = Stnfa
		_status int32
		_tags   uintptr // *Tregoff_t = int64
		_eo     = esc   // *Tregoff_t = int64
	)
	defer Free(esc)
	_tnfa = *(*uintptr)(unsafe.Pointer(_preg + 8))
	_tags = 0
	if (*(*int32)(unsafe.Pointer(_tnfa + 88)) & int32(8)) == 0 {
		goto _1
	}

	_nmatch = uint64(0)
_1:
	if *(*int32)(unsafe.Pointer(_tnfa + 72)) <= int32(0) || _nmatch <= uint64(0) {
		goto _2
	}

	_tags = Xmalloc(tls, uint64(8)*uint64(*(*int32)(unsafe.Pointer(_tnfa + 72))))
	if _tags != null {
		goto _3
	}

	return int32(12)

_3:
_2:
	if *(*int32)(unsafe.Pointer(_tnfa + 92)) == 0 {
		goto _4
	}

	_status = xtre_tnfa_run_backtrack(tls, _tnfa, _string, _tags, _eflags, _eo)
	goto _5

_4:
	_status = xtre_tnfa_run_parallel(tls, _tnfa, _string, _tags, _eflags, _eo)
_5:
	if _status != int32(0) {
		goto _6
	}

	xtre_fill_pmatch(tls, _nmatch, _pmatch, *(*int32)(unsafe.Pointer(_tnfa + 88)), _tnfa, _tags, *(*int64)(unsafe.Pointer(_eo)))
_6:
	if _tags == 0 {
		goto _7
	}

	Xfree(tls, _tags)
_7:
	return _status
}

type t737__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t737__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t186size_t = uint64

type s1tnfa = struct {
	Ftransitions     uintptr // *Ttre_tnfa_transition_t = Stnfa_transition
	Fnum_transitions uint32
	Finitial         uintptr // *Ttre_tnfa_transition_t = Stnfa_transition
	Ffinal           uintptr // *Ttre_tnfa_transition_t = Stnfa_transition
	Fsubmatch_data   uintptr // *Ttre_submatch_data_t = Stre_submatch_data
	Ffirstpos_chars  uintptr // *int8
	Ffirst_char      int32
	Fnum_submatches  uint32
	Ftag_directions  uintptr // *Ttre_tag_direction_t = int32
	Fminimal_tags    uintptr // *int32
	Fnum_tags        int32
	Fnum_minimals    int32
	Fend_tag         int32
	Fnum_states      int32
	Fcflags          int32
	Fhave_backrefs   int32
	Fhave_approx     int32
}

type t1reg_errcode_t = int32

func set766(p *int64, v int64) int64 { *p = v; return v }

func postinc767(p *uintptr) uintptr { r := *p; *p += 4; return r }

// xtre_tnfa_run_backtrack is defined at regexec.c:593:1
func xtre_tnfa_run_backtrack(tls TLS, _tnfa uintptr /* *Ttre_tnfa_t = Stnfa */, _string uintptr /* *void */, _match_tags uintptr /* *Tregoff_t = int64 */, _eflags int32, _match_end_ofs uintptr /* *Tregoff_t = int64 */) (r int32) {
	esc := MustMalloc(4)
	var (
		_prev_c         int32
		_next_c         = esc   // *Ttre_char_t = Twchar_t = int32
		_str_byte       uintptr // *int8
		_pos            int64
		_pos_add_next   int64
		_reg_notbol     int32
		_reg_noteol     int32
		_reg_newline    int32
		_next_c_start   int32
		_str_byte_start uintptr // *int8
		_pos_start      int64
		_match_eo       int64
		_next_tags      uintptr // *int32
		_tags           uintptr // *Tregoff_t = int64
		_state          uintptr // *Ttre_tnfa_transition_t = Stnfa_transition
		_states_seen    uintptr // *int32
		_mem            uintptr // Ttre_mem_t = *struct{Fblocks *st...ailed int32;Fprovided *uintptr;}
		_stack          uintptr // Ttre_backtrack_t = *struct{Fitem...t;Fnext *Stre_backtrack_struct;}
		_trans_i        uintptr // *Ttre_tnfa_transition_t = Stnfa_transition
		_pmatch         uintptr // *Tregmatch_t = struct{Frm_so int64;Frm_eo int64;}
		_ret            int32
		_i              int32
		_1i             int32
		_s              uintptr // Ttre_backtrack_t = *struct{Fitem...t;Fnext *Stre_backtrack_struct;}
		_tmp            uintptr // *int32
		_next_state     uintptr // *Ttre_tnfa_transition_t = Stnfa_transition
		_empty_br_match int32
		_2i             int32
		_so             int64
		_eo             int64
		_bt             int32
		_bt_len         int64
		_result         int32
		_3i             int32
		_4s             uintptr // Ttre_backtrack_t = *struct{Fitem...t;Fnext *Stre_backtrack_struct;}
		_5tmp           uintptr // *int32
		_6i             int32
	)
	defer Free(esc)
	_prev_c = int32(0)
	*(*int32)(unsafe.Pointer(_next_c)) = int32(0)
	_str_byte = _string
	_pos = int64(0)
	_pos_add_next = int64(1)
	_reg_notbol = _eflags & int32(1)
	_reg_noteol = _eflags & int32(2)
	_reg_newline = *(*int32)(unsafe.Pointer(_tnfa + 88)) & int32(4)
	_pos_start = int64(-1)
	_match_eo = int64(-1)
	_tags = 0
	_states_seen = 0
	_mem = X__tre_mem_new_impl(tls, int32(0), null)
	_pmatch = 0
	if _mem != 0 {
		goto _1
	}

	return int32(12)

_1:
	_stack = X__tre_mem_alloc_impl(tls, _mem, int32(0), null, int32(0), uint64(56))
	if _stack != 0 {
		goto _2
	}

	_ret = int32(12)
	goto lerror_exit

_2:
	*(*uintptr)(unsafe.Pointer(_stack + 40)) = null
	*(*uintptr)(unsafe.Pointer(_stack + 48)) = null
	if *(*int32)(unsafe.Pointer(_tnfa + 72)) == 0 {
		goto _3
	}

	_tags = Xmalloc(tls, uint64(8)*uint64(*(*int32)(unsafe.Pointer(_tnfa + 72))))
	if _tags != 0 {
		goto _4
	}

	_ret = int32(12)
	goto lerror_exit

_4:
_3:
	if *(*uint32)(unsafe.Pointer(_tnfa + 52)) == 0 {
		goto _5
	}

	_pmatch = Xmalloc(tls, uint64(16)*uint64(*(*uint32)(unsafe.Pointer(_tnfa + 52))))
	if _pmatch != 0 {
		goto _6
	}

	_ret = int32(12)
	goto lerror_exit

_6:
_5:
	if *(*int32)(unsafe.Pointer(_tnfa + 84)) == 0 {
		goto _7
	}

	_states_seen = Xmalloc(tls, uint64(4)*uint64(*(*int32)(unsafe.Pointer(_tnfa + 84))))
	if _states_seen != 0 {
		goto _8
	}

	_ret = int32(12)
	goto lerror_exit

_8:
_7:
	goto lretry
lretry:
	_i = int32(0)
_9:
	if _i >= *(*int32)(unsafe.Pointer(_tnfa + 72)) {
		goto _11
	}

	*(*int64)(unsafe.Pointer(_tags + 8*uintptr(_i))) = int64(-1)
	if _match_tags == 0 {
		goto _12
	}

	*(*int64)(unsafe.Pointer(_match_tags + 8*uintptr(_i))) = int64(-1)
_12:
	_i++
	goto _9

_11:
	_i = int32(0)
_13:
	if _i >= *(*int32)(unsafe.Pointer(_tnfa + 84)) {
		goto _15
	}

	*(*int32)(unsafe.Pointer(_states_seen + 4*uintptr(_i))) = int32(0)
	_i++
	goto _13

_15:
	_state = null
	_pos = _pos_start
	_prev_c = *(*int32)(unsafe.Pointer(_next_c))
	_pos = _pos + _pos_add_next
	if set766(&_pos_add_next, int64(Xmbtowc(tls, _next_c, _str_byte, uint64(4)))) > int64(0) {
		goto _17
	}

	if _pos_add_next >= int64(0) {
		goto _18
	}

	_ret = int32(1)
	goto lerror_exit

	goto _19

_18:
	_pos_add_next++
_19:
_17:
	_str_byte += uintptr(_pos_add_next)
	_pos_start = _pos
	_next_c_start = *(*int32)(unsafe.Pointer(_next_c))
	_str_byte_start = _str_byte
	_next_tags = null
	_trans_i = *(*uintptr)(unsafe.Pointer(_tnfa + 16))
_20:
	if *(*uintptr)(unsafe.Pointer(_trans_i + 8)) == 0 {
		goto _22
	}

	if *(*int32)(unsafe.Pointer(_trans_i + 32)) == 0 || (*(*int32)(unsafe.Pointer(_trans_i + 32))&int32(1) == 0 || _pos <= int64(0) && _reg_notbol == 0 || int64(_prev_c) == int64(10) && _reg_newline != 0) && (*(*int32)(unsafe.Pointer(_trans_i + 32))&int32(2) == 0 || int64(*(*int32)(unsafe.Pointer(_next_c))) == int64(0) && _reg_noteol == 0 || int64(*(*int32)(unsafe.Pointer(_next_c))) == int64(10) && _reg_newline != 0) && (*(*int32)(unsafe.Pointer(_trans_i + 32))&int32(16) == 0 || int64(_prev_c) != int64(95) && Xiswalnum(tls, uint32(_prev_c)) == 0 && (int64(*(*int32)(unsafe.Pointer(_next_c))) == int64(95) || Xiswalnum(tls, uint32(*(*int32)(unsafe.Pointer(_next_c)))) != 0)) && (*(*int32)(unsafe.Pointer(_trans_i + 32))&int32(32) == 0 || (int64(_prev_c) == int64(95) || Xiswalnum(tls, uint32(_prev_c)) != 0) && (int64(*(*int32)(unsafe.Pointer(_next_c))) != int64(95) && Xiswalnum(tls, uint32(*(*int32)(unsafe.Pointer(_next_c)))) == 0)) && (*(*int32)(unsafe.Pointer(_trans_i + 32))&int32(64) == 0 || (_pos == int64(0) || int64(*(*int32)(unsafe.Pointer(_next_c))) == int64(0) || bool2int((int64(_prev_c) == int64(95)) || (Xiswalnum(tls, uint32(_prev_c)) != 0)) != bool2int((int64(*(*int32)(unsafe.Pointer(_next_c))) == int64(95)) || (Xiswalnum(tls, uint32(*(*int32)(unsafe.Pointer(_next_c)))) != 0)))) && (*(*int32)(unsafe.Pointer(_trans_i + 32))&int32(128) == 0 || _pos != int64(0) && int64(*(*int32)(unsafe.Pointer(_next_c))) != int64(0) && bool2int((int64(_prev_c) == int64(95)) || (Xiswalnum(tls, uint32(_prev_c)) != 0)) == bool2int((int64(*(*int32)(unsafe.Pointer(_next_c))) == int64(95)) || (Xiswalnum(tls, uint32(*(*int32)(unsafe.Pointer(_next_c)))) != 0))) {
		goto _23
	}

	goto _21

_23:
	if _state != null {
		goto _24
	}

	_state = *(*uintptr)(unsafe.Pointer(_trans_i + 8))
	_next_tags = *(*uintptr)(unsafe.Pointer(_trans_i + 24))
	goto _25

_24:
	if *(*uintptr)(unsafe.Pointer(_stack + 48)) != 0 {
		goto _27
	}

	_s = X__tre_mem_alloc_impl(tls, _mem, int32(0), null, int32(0), uint64(56))
	if _s != 0 {
		goto _29
	}

	X__tre_mem_destroy(tls, _mem)
	if _tags == 0 {
		goto _30
	}

	Xfree(tls, _tags)
_30:
	if _pmatch == 0 {
		goto _31
	}

	Xfree(tls, _pmatch)
_31:
	if _states_seen == 0 {
		goto _32
	}

	Xfree(tls, _states_seen)
_32:
	return int32(12)

_29:
	*(*uintptr)(unsafe.Pointer(_s + 40)) = _stack
	*(*uintptr)(unsafe.Pointer(_s + 48)) = null
	*(*uintptr)(unsafe.Pointer(_s + 32)) = X__tre_mem_alloc_impl(tls, _mem, int32(0), null, int32(0), uint64(8)*uint64(*(*int32)(unsafe.Pointer(_tnfa + 72))))
	if *(*uintptr)(unsafe.Pointer(_s + 32)) != 0 {
		goto _33
	}

	X__tre_mem_destroy(tls, _mem)
	if _tags == 0 {
		goto _34
	}

	Xfree(tls, _tags)
_34:
	if _pmatch == 0 {
		goto _35
	}

	Xfree(tls, _pmatch)
_35:
	if _states_seen == 0 {
		goto _36
	}

	Xfree(tls, _states_seen)
_36:
	return int32(12)

_33:
	*(*uintptr)(unsafe.Pointer(_stack + 48)) = _s
	_stack = _s
	goto _28

_27:
	_stack = *(*uintptr)(unsafe.Pointer(_stack + 48))
_28:
	*(*int64)(unsafe.Pointer(_stack)) = _pos
	*(*uintptr)(unsafe.Pointer(_stack + 8)) = _str_byte
	*(*uintptr)(unsafe.Pointer(_stack + 16)) = *(*uintptr)(unsafe.Pointer(_trans_i + 8))
	*(*int32)(unsafe.Pointer(_stack + 24)) = *(*int32)(unsafe.Pointer(_trans_i + 16))
	*(*int32)(unsafe.Pointer(_stack + 28)) = *(*int32)(unsafe.Pointer(_next_c))
	_1i = int32(0)
_37:
	if _1i >= *(*int32)(unsafe.Pointer(_tnfa + 72)) {
		goto _39
	}

	*(*int64)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_stack + 32)) + 8*uintptr(_1i))) = *(*int64)(unsafe.Pointer(_tags + 8*uintptr(_1i)))
	_1i++
	goto _37

_39:
	_tmp = *(*uintptr)(unsafe.Pointer(_trans_i + 24))
	if _tmp == 0 {
		goto _40
	}

_41:
	if *(*int32)(unsafe.Pointer(_tmp)) < int32(0) {
		goto _42
	}

	*(*int64)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_stack + 32)) + 8*uintptr(*(*int32)(unsafe.Pointer(postinc767(&_tmp)))))) = _pos
	goto _41

_42:
_40:
_25:
_21:
	_trans_i += 56
	goto _20

_22:
	if _next_tags == 0 {
		goto _43
	}

_44:
	if *(*int32)(unsafe.Pointer(_next_tags)) < int32(0) {
		goto _46
	}

	*(*int64)(unsafe.Pointer(_tags + 8*uintptr(*(*int32)(unsafe.Pointer(_next_tags))))) = _pos
	_next_tags += 4
	goto _44

_46:
_43:
	if _state != null {
		goto _47
	}

	goto lbacktrack

_47:
_48:
	if _state != *(*uintptr)(unsafe.Pointer(_tnfa + 24)) {
		goto _50
	}

	if _match_eo >= _pos && (_match_eo != _pos || _match_tags == 0 || xtre_tag_order(tls, *(*int32)(unsafe.Pointer(_tnfa + 72)), *(*uintptr)(unsafe.Pointer(_tnfa + 56)), _tags, _match_tags) == 0) {
		goto _51
	}

	_match_eo = _pos
	if _match_tags == 0 {
		goto _52
	}

	_2i = int32(0)
_53:
	if _2i >= *(*int32)(unsafe.Pointer(_tnfa + 72)) {
		goto _55
	}

	*(*int64)(unsafe.Pointer(_match_tags + 8*uintptr(_2i))) = *(*int64)(unsafe.Pointer(_tags + 8*uintptr(_2i)))
	_2i++
	goto _53

_55:
_52:
_51:
	goto lbacktrack

_50:
	_empty_br_match = int32(0)
	_trans_i = _state
	if *(*uintptr)(unsafe.Pointer(_trans_i + 8)) == 0 || (*(*int32)(unsafe.Pointer(_trans_i + 32))&int32(256)) == 0 {
		goto _56
	}

	_bt = *(*int32)(unsafe.Pointer(_trans_i + 40))
	xtre_fill_pmatch(tls, uint64(_bt+int32(1)), _pmatch, *(*int32)(unsafe.Pointer(_tnfa + 88))&int32(-9), _tnfa, _tags, _pos)
	_so = *(*int64)(unsafe.Pointer(_pmatch + 16*uintptr(_bt)))
	_eo = *(*int64)(unsafe.Pointer((_pmatch + 16*uintptr(_bt)) + 8))
	_bt_len = _eo - _so
	_result = Xstrncmp(tls, _string+uintptr(_so), _str_byte-uintptr(1), uint64(_bt_len))
	if _result != int32(0) {
		goto _58
	}

	if _bt_len != int64(0) {
		goto _60
	}

	_empty_br_match = int32(1)
_60:
	if _empty_br_match == 0 || *(*int32)(unsafe.Pointer(_states_seen + 4*uintptr(*(*int32)(unsafe.Pointer(_trans_i + 16))))) == 0 {
		goto _61
	}

	goto lbacktrack

_61:
	*(*int32)(unsafe.Pointer(_states_seen + 4*uintptr(*(*int32)(unsafe.Pointer(_trans_i + 16))))) = _empty_br_match
	_str_byte += uintptr(_bt_len - int64(1))
	_pos = _pos + (_bt_len - int64(1))
	_prev_c = *(*int32)(unsafe.Pointer(_next_c))
	_pos = _pos + _pos_add_next
	if set766(&_pos_add_next, int64(Xmbtowc(tls, _next_c, _str_byte, uint64(4)))) > int64(0) {
		goto _63
	}

	if _pos_add_next >= int64(0) {
		goto _64
	}

	_ret = int32(1)
	goto lerror_exit

	goto _65

_64:
	_pos_add_next++
_65:
_63:
	_str_byte += uintptr(_pos_add_next)
	goto _59

_58:
	goto lbacktrack

_59:
	goto _57

_56:
	if int64(*(*int32)(unsafe.Pointer(_next_c))) != int64(0) {
		goto _66
	}

	goto lbacktrack

_66:
	_prev_c = *(*int32)(unsafe.Pointer(_next_c))
	_pos = _pos + _pos_add_next
	if set766(&_pos_add_next, int64(Xmbtowc(tls, _next_c, _str_byte, uint64(4)))) > int64(0) {
		goto _68
	}

	if _pos_add_next >= int64(0) {
		goto _69
	}

	_ret = int32(1)
	goto lerror_exit

	goto _70

_69:
	_pos_add_next++
_70:
_68:
	_str_byte += uintptr(_pos_add_next)
_57:
	_next_state = null
	_trans_i = _state
_71:
	if *(*uintptr)(unsafe.Pointer(_trans_i + 8)) == 0 {
		goto _73
	}

	if *(*uint32)(unsafe.Pointer(_trans_i)) > uint32(_prev_c) || *(*uint32)(unsafe.Pointer(_trans_i + 4)) < uint32(_prev_c) {
		goto _74
	}

	if *(*int32)(unsafe.Pointer(_trans_i + 32)) == 0 || (*(*int32)(unsafe.Pointer(_trans_i + 32))&int32(1) == 0 || _pos <= int64(0) && _reg_notbol == 0 || int64(_prev_c) == int64(10) && _reg_newline != 0) && (*(*int32)(unsafe.Pointer(_trans_i + 32))&int32(2) == 0 || int64(*(*int32)(unsafe.Pointer(_next_c))) == int64(0) && _reg_noteol == 0 || int64(*(*int32)(unsafe.Pointer(_next_c))) == int64(10) && _reg_newline != 0) && (*(*int32)(unsafe.Pointer(_trans_i + 32))&int32(16) == 0 || int64(_prev_c) != int64(95) && Xiswalnum(tls, uint32(_prev_c)) == 0 && (int64(*(*int32)(unsafe.Pointer(_next_c))) == int64(95) || Xiswalnum(tls, uint32(*(*int32)(unsafe.Pointer(_next_c)))) != 0)) && (*(*int32)(unsafe.Pointer(_trans_i + 32))&int32(32) == 0 || (int64(_prev_c) == int64(95) || Xiswalnum(tls, uint32(_prev_c)) != 0) && (int64(*(*int32)(unsafe.Pointer(_next_c))) != int64(95) && Xiswalnum(tls, uint32(*(*int32)(unsafe.Pointer(_next_c)))) == 0)) && (*(*int32)(unsafe.Pointer(_trans_i + 32))&int32(64) == 0 || (_pos == int64(0) || int64(*(*int32)(unsafe.Pointer(_next_c))) == int64(0) || bool2int((int64(_prev_c) == int64(95)) || (Xiswalnum(tls, uint32(_prev_c)) != 0)) != bool2int((int64(*(*int32)(unsafe.Pointer(_next_c))) == int64(95)) || (Xiswalnum(tls, uint32(*(*int32)(unsafe.Pointer(_next_c)))) != 0)))) && (*(*int32)(unsafe.Pointer(_trans_i + 32))&int32(128) == 0 || _pos != int64(0) && int64(*(*int32)(unsafe.Pointer(_next_c))) != int64(0) && bool2int((int64(_prev_c) == int64(95)) || (Xiswalnum(tls, uint32(_prev_c)) != 0)) == bool2int((int64(*(*int32)(unsafe.Pointer(_next_c))) == int64(95)) || (Xiswalnum(tls, uint32(*(*int32)(unsafe.Pointer(_next_c)))) != 0))) && ((*(*int32)(unsafe.Pointer(_trans_i + 32))&int32(4) == 0 || *(*int32)(unsafe.Pointer(_tnfa + 88))&int32(2) != 0 || Xiswctype(tls, uint32(_prev_c), *(*uint64)(unsafe.Pointer(_trans_i + 40))) != 0) && (*(*int32)(unsafe.Pointer(_trans_i + 32))&int32(4) == 0 || *(*int32)(unsafe.Pointer(_tnfa + 88))&int32(2) == 0 || Xiswctype(tls, Xtowlower(tls, uint32(_prev_c)), *(*uint64)(unsafe.Pointer(_trans_i + 40))) != 0 || Xiswctype(tls, Xtowupper(tls, uint32(_prev_c)), *(*uint64)(unsafe.Pointer(_trans_i + 40))) != 0) && (*(*int32)(unsafe.Pointer(_trans_i + 32))&int32(8) == 0 || xtre_neg_char_classes_match(tls, *(*uintptr)(unsafe.Pointer(_trans_i + 48)), uint32(_prev_c), *(*int32)(unsafe.Pointer(_tnfa + 88))&int32(2)) == 0)) {
		goto _75
	}

	goto _72

_75:
	if _next_state != null {
		goto _76
	}

	_next_state = *(*uintptr)(unsafe.Pointer(_trans_i + 8))
	_next_tags = *(*uintptr)(unsafe.Pointer(_trans_i + 24))
	goto _77

_76:
	if *(*uintptr)(unsafe.Pointer(_stack + 48)) != 0 {
		goto _79
	}

	_4s = X__tre_mem_alloc_impl(tls, _mem, int32(0), null, int32(0), uint64(56))
	if _4s != 0 {
		goto _81
	}

	X__tre_mem_destroy(tls, _mem)
	if _tags == 0 {
		goto _82
	}

	Xfree(tls, _tags)
_82:
	if _pmatch == 0 {
		goto _83
	}

	Xfree(tls, _pmatch)
_83:
	if _states_seen == 0 {
		goto _84
	}

	Xfree(tls, _states_seen)
_84:
	return int32(12)

_81:
	*(*uintptr)(unsafe.Pointer(_4s + 40)) = _stack
	*(*uintptr)(unsafe.Pointer(_4s + 48)) = null
	*(*uintptr)(unsafe.Pointer(_4s + 32)) = X__tre_mem_alloc_impl(tls, _mem, int32(0), null, int32(0), uint64(8)*uint64(*(*int32)(unsafe.Pointer(_tnfa + 72))))
	if *(*uintptr)(unsafe.Pointer(_4s + 32)) != 0 {
		goto _85
	}

	X__tre_mem_destroy(tls, _mem)
	if _tags == 0 {
		goto _86
	}

	Xfree(tls, _tags)
_86:
	if _pmatch == 0 {
		goto _87
	}

	Xfree(tls, _pmatch)
_87:
	if _states_seen == 0 {
		goto _88
	}

	Xfree(tls, _states_seen)
_88:
	return int32(12)

_85:
	*(*uintptr)(unsafe.Pointer(_stack + 48)) = _4s
	_stack = _4s
	goto _80

_79:
	_stack = *(*uintptr)(unsafe.Pointer(_stack + 48))
_80:
	*(*int64)(unsafe.Pointer(_stack)) = _pos
	*(*uintptr)(unsafe.Pointer(_stack + 8)) = _str_byte
	*(*uintptr)(unsafe.Pointer(_stack + 16)) = *(*uintptr)(unsafe.Pointer(_trans_i + 8))
	*(*int32)(unsafe.Pointer(_stack + 24)) = *(*int32)(unsafe.Pointer(_trans_i + 16))
	*(*int32)(unsafe.Pointer(_stack + 28)) = *(*int32)(unsafe.Pointer(_next_c))
	_3i = int32(0)
_89:
	if _3i >= *(*int32)(unsafe.Pointer(_tnfa + 72)) {
		goto _91
	}

	*(*int64)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_stack + 32)) + 8*uintptr(_3i))) = *(*int64)(unsafe.Pointer(_tags + 8*uintptr(_3i)))
	_3i++
	goto _89

_91:
	_5tmp = *(*uintptr)(unsafe.Pointer(_trans_i + 24))
_92:
	if _5tmp == 0 || *(*int32)(unsafe.Pointer(_5tmp)) < int32(0) {
		goto _94
	}

	*(*int64)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_stack + 32)) + 8*uintptr(*(*int32)(unsafe.Pointer(_5tmp))))) = _pos
	_5tmp += 4
	goto _92

_94:
_77:
_74:
_72:
	_trans_i += 56
	goto _71

_73:
	if _next_state == null {
		goto _95
	}

	_state = _next_state
	if _next_tags == 0 {
		goto _97
	}

_98:
	if *(*int32)(unsafe.Pointer(_next_tags)) < int32(0) {
		goto _99
	}

	*(*int64)(unsafe.Pointer(_tags + 8*uintptr(*(*int32)(unsafe.Pointer(postinc767(&_next_tags)))))) = _pos
	goto _98

_99:
_97:
	goto _96

_95:
	goto lbacktrack
lbacktrack:
	if *(*uintptr)(unsafe.Pointer(_stack + 40)) == 0 {
		goto _100
	}

	if (*(*int32)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_stack + 16)) + 32)) & int32(256)) == 0 {
		goto _102
	}

	*(*int32)(unsafe.Pointer(_states_seen + 4*uintptr(*(*int32)(unsafe.Pointer(_stack + 24))))) = int32(0)
_102:
	_pos = *(*int64)(unsafe.Pointer(_stack))
	_str_byte = *(*uintptr)(unsafe.Pointer(_stack + 8))
	_state = *(*uintptr)(unsafe.Pointer(_stack + 16))
	*(*int32)(unsafe.Pointer(_next_c)) = *(*int32)(unsafe.Pointer(_stack + 28))
	_6i = int32(0)
_104:
	if _6i >= *(*int32)(unsafe.Pointer(_tnfa + 72)) {
		goto _106
	}

	*(*int64)(unsafe.Pointer(_tags + 8*uintptr(_6i))) = *(*int64)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_stack + 32)) + 8*uintptr(_6i)))
	_6i++
	goto _104

_106:
	_stack = *(*uintptr)(unsafe.Pointer(_stack + 40))
	goto _101

_100:
	if _match_eo >= int64(0) {
		goto _107
	}

	if int64(*(*int32)(unsafe.Pointer(_next_c))) != int64(0) {
		goto _109
	}

	goto _49

_109:
	*(*int32)(unsafe.Pointer(_next_c)) = _next_c_start
	_str_byte = _str_byte_start
	goto lretry

	goto _108

_107:
	goto _49

_108:
_101:
_96:
	goto _48

_49:
	_ret = func() int32 {
		if _match_eo >= int64(0) {
			return int32(0)
		}
		return int32(1)
	}()
	*(*int64)(unsafe.Pointer(_match_end_ofs)) = _match_eo
	goto lerror_exit
lerror_exit:
	X__tre_mem_destroy(tls, _mem)
	if _tags == 0 {
		goto _110
	}

	Xfree(tls, _tags)
_110:
	if _pmatch == 0 {
		goto _111
	}

	Xfree(tls, _pmatch)
_111:
	if _states_seen == 0 {
		goto _112
	}

	Xfree(tls, _states_seen)
_112:
	return _ret
}

// xtre_tnfa_run_parallel is defined at regexec.c:170:1
func xtre_tnfa_run_parallel(tls TLS, _tnfa uintptr /* *Ttre_tnfa_t = Stnfa */, _string uintptr /* *void */, _match_tags uintptr /* *Tregoff_t = int64 */, _eflags int32, _match_end_ofs uintptr /* *Tregoff_t = int64 */) (r int32) {
	esc := MustMalloc(4)
	var (
		_prev_c       int32
		_next_c       = esc   // *Ttre_char_t = Twchar_t = int32
		_str_byte     uintptr // *int8
		_pos          int64
		_pos_add_next int64
		_reg_notbol   int32
		_reg_noteol   int32
		_reg_newline  int32
		_ret          int32
		_buf          uintptr // *int8
		_trans_i      uintptr // *Ttre_tnfa_transition_t = Stnfa_transition
		_reach        uintptr // *Ttre_tnfa_reach_t = struct{Fstate *Stnfa_transition;Ftags *int64;}
		_reach_next   uintptr // *Ttre_tnfa_reach_t = struct{Fstate *Stnfa_transition;Ftags *int64;}
		_reach_i      uintptr // *Ttre_tnfa_reach_t = struct{Fstate *Stnfa_transition;Ftags *int64;}
		_reach_next_i uintptr // *Ttre_tnfa_reach_t = struct{Fstate *Stnfa_transition;Ftags *int64;}
		_reach_pos    uintptr // *Ttre_reach_pos_t = struct{Fpos int64;Ftags **int64;}
		_tag_i        uintptr // *int32
		_num_tags     int32
		_i            int32
		_match_eo     int64
		_new_match    int32
		_tmp_tags     uintptr // *Tregoff_t = int64
		_tmp_iptr     uintptr // *Tregoff_t = int64
		_tbytes       uint64
		_rbytes       uint64
		_pbytes       uint64
		_xbytes       uint64
		_total_bytes  uint64
		_tmp_buf      uintptr // *int8
		_skip         int32
		_end          int32
		_start        int32
	)
	defer Free(esc)
	_prev_c = int32(0)
	*(*int32)(unsafe.Pointer(_next_c)) = int32(0)
	_str_byte = _string
	_pos = int64(-1)
	_pos_add_next = int64(1)
	_reg_notbol = _eflags & int32(1)
	_reg_noteol = _eflags & int32(2)
	_reg_newline = *(*int32)(unsafe.Pointer(_tnfa + 88)) & int32(4)
	_match_eo = int64(-1)
	_new_match = int32(0)
	_tmp_tags = 0
	if _match_tags != 0 {
		goto _1
	}

	_num_tags = int32(0)
	goto _2

_1:
	_num_tags = *(*int32)(unsafe.Pointer(_tnfa + 72))
_2:
	if uint64(_num_tags) <= uint64(0xffffffffffffffff)/(uint64(64)*uint64(*(*int32)(unsafe.Pointer(_tnfa + 84)))) {
		goto _3
	}

	return int32(12)

_3:
	if uint64(*(*int32)(unsafe.Pointer(_tnfa + 84))+int32(1)) <= uint64(144115188075855871) {
		goto _4
	}

	return int32(12)

_4:
	if uint64(*(*int32)(unsafe.Pointer(_tnfa + 84))) <= uint64(144115188075855871) {
		goto _5
	}

	return int32(12)

_5:
	_tbytes = uint64(8) * uint64(_num_tags)
	_rbytes = uint64(16) * uint64(*(*int32)(unsafe.Pointer(_tnfa + 84))+int32(1))
	_pbytes = uint64(16) * uint64(*(*int32)(unsafe.Pointer(_tnfa + 84)))
	_xbytes = uint64(8) * uint64(_num_tags)
	_total_bytes = uint64(28) + (_rbytes+_xbytes*uint64(*(*int32)(unsafe.Pointer(_tnfa + 84))))*uint64(2) + _tbytes + _pbytes
	_buf = Xcalloc(tls, _total_bytes, uint64(1))
	if _buf != null {
		goto _6
	}

	return int32(12)

_6:
	_tmp_tags = _buf
	_tmp_buf = _buf + uintptr(_tbytes)
	_tmp_buf += uintptr(func() uint64 {
		if uint64(int64(_tmp_buf))%uint64(8) != 0 {
			return uint64(8) - uint64(int64(_tmp_buf))%uint64(8)
		}
		return uint64(0)
	}())
	_reach_next = _tmp_buf
	_tmp_buf += uintptr(_rbytes)
	_tmp_buf += uintptr(func() uint64 {
		if uint64(int64(_tmp_buf))%uint64(8) != 0 {
			return uint64(8) - uint64(int64(_tmp_buf))%uint64(8)
		}
		return uint64(0)
	}())
	_reach = _tmp_buf
	_tmp_buf += uintptr(_rbytes)
	_tmp_buf += uintptr(func() uint64 {
		if uint64(int64(_tmp_buf))%uint64(8) != 0 {
			return uint64(8) - uint64(int64(_tmp_buf))%uint64(8)
		}
		return uint64(0)
	}())
	_reach_pos = _tmp_buf
	_tmp_buf += uintptr(_pbytes)
	_tmp_buf += uintptr(func() uint64 {
		if uint64(int64(_tmp_buf))%uint64(8) != 0 {
			return uint64(8) - uint64(int64(_tmp_buf))%uint64(8)
		}
		return uint64(0)
	}())
	_i = int32(0)
_7:
	if _i >= *(*int32)(unsafe.Pointer(_tnfa + 84)) {
		goto _9
	}

	*(*uintptr)(unsafe.Pointer((_reach + 16*uintptr(_i)) + 8)) = _tmp_buf
	_tmp_buf += uintptr(_xbytes)
	*(*uintptr)(unsafe.Pointer((_reach_next + 16*uintptr(_i)) + 8)) = _tmp_buf
	_tmp_buf += uintptr(_xbytes)
	_i++
	goto _7

_9:
	_i = int32(0)
_10:
	if _i >= *(*int32)(unsafe.Pointer(_tnfa + 84)) {
		goto _12
	}

	*(*int64)(unsafe.Pointer(_reach_pos + 16*uintptr(_i))) = int64(-1)
	_i++
	goto _10

_12:
	_prev_c = *(*int32)(unsafe.Pointer(_next_c))
	_pos = _pos + _pos_add_next
	if set766(&_pos_add_next, int64(Xmbtowc(tls, _next_c, _str_byte, uint64(4)))) > int64(0) {
		goto _14
	}

	if _pos_add_next >= int64(0) {
		goto _15
	}

	_ret = int32(1)
	goto lerror_exit

	goto _16

_15:
	_pos_add_next++
_16:
_14:
	_str_byte += uintptr(_pos_add_next)
	_pos = int64(0)
	_reach_next_i = _reach_next
_17:
	if _match_eo >= int64(0) {
		goto _19
	}

	_trans_i = *(*uintptr)(unsafe.Pointer(_tnfa + 16))
_21:
	if *(*uintptr)(unsafe.Pointer(_trans_i + 8)) == null {
		goto _22
	}

	if *(*int64)(unsafe.Pointer(_reach_pos + 16*uintptr(*(*int32)(unsafe.Pointer(_trans_i + 16))))) >= _pos {
		goto _23
	}

	if *(*int32)(unsafe.Pointer(_trans_i + 32)) == 0 || (*(*int32)(unsafe.Pointer(_trans_i + 32))&int32(1) == 0 || _pos <= int64(0) && _reg_notbol == 0 || int64(_prev_c) == int64(10) && _reg_newline != 0) && (*(*int32)(unsafe.Pointer(_trans_i + 32))&int32(2) == 0 || int64(*(*int32)(unsafe.Pointer(_next_c))) == int64(0) && _reg_noteol == 0 || int64(*(*int32)(unsafe.Pointer(_next_c))) == int64(10) && _reg_newline != 0) && (*(*int32)(unsafe.Pointer(_trans_i + 32))&int32(16) == 0 || int64(_prev_c) != int64(95) && Xiswalnum(tls, uint32(_prev_c)) == 0 && (int64(*(*int32)(unsafe.Pointer(_next_c))) == int64(95) || Xiswalnum(tls, uint32(*(*int32)(unsafe.Pointer(_next_c)))) != 0)) && (*(*int32)(unsafe.Pointer(_trans_i + 32))&int32(32) == 0 || (int64(_prev_c) == int64(95) || Xiswalnum(tls, uint32(_prev_c)) != 0) && (int64(*(*int32)(unsafe.Pointer(_next_c))) != int64(95) && Xiswalnum(tls, uint32(*(*int32)(unsafe.Pointer(_next_c)))) == 0)) && (*(*int32)(unsafe.Pointer(_trans_i + 32))&int32(64) == 0 || (_pos == int64(0) || int64(*(*int32)(unsafe.Pointer(_next_c))) == int64(0) || bool2int((int64(_prev_c) == int64(95)) || (Xiswalnum(tls, uint32(_prev_c)) != 0)) != bool2int((int64(*(*int32)(unsafe.Pointer(_next_c))) == int64(95)) || (Xiswalnum(tls, uint32(*(*int32)(unsafe.Pointer(_next_c)))) != 0)))) && (*(*int32)(unsafe.Pointer(_trans_i + 32))&int32(128) == 0 || _pos != int64(0) && int64(*(*int32)(unsafe.Pointer(_next_c))) != int64(0) && bool2int((int64(_prev_c) == int64(95)) || (Xiswalnum(tls, uint32(_prev_c)) != 0)) == bool2int((int64(*(*int32)(unsafe.Pointer(_next_c))) == int64(95)) || (Xiswalnum(tls, uint32(*(*int32)(unsafe.Pointer(_next_c)))) != 0))) {
		goto _24
	}

	_trans_i += 56
	goto _21

_24:
	*(*uintptr)(unsafe.Pointer(_reach_next_i)) = *(*uintptr)(unsafe.Pointer(_trans_i + 8))
	_i = int32(0)
_25:
	if _i >= _num_tags {
		goto _27
	}

	*(*int64)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_reach_next_i + 8)) + 8*uintptr(_i))) = int64(-1)
	_i++
	goto _25

_27:
	_tag_i = *(*uintptr)(unsafe.Pointer(_trans_i + 24))
	if _tag_i == 0 {
		goto _28
	}

_29:
	if *(*int32)(unsafe.Pointer(_tag_i)) < int32(0) {
		goto _30
	}

	if *(*int32)(unsafe.Pointer(_tag_i)) >= _num_tags {
		goto _31
	}

	*(*int64)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_reach_next_i + 8)) + 8*uintptr(*(*int32)(unsafe.Pointer(_tag_i))))) = _pos
_31:
	_tag_i += 4
	goto _29

_30:
_28:
	if *(*uintptr)(unsafe.Pointer(_reach_next_i)) != *(*uintptr)(unsafe.Pointer(_tnfa + 24)) {
		goto _32
	}

	_match_eo = _pos
	_new_match = int32(1)
	_i = int32(0)
_33:
	if _i >= _num_tags {
		goto _35
	}

	*(*int64)(unsafe.Pointer(_match_tags + 8*uintptr(_i))) = *(*int64)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_reach_next_i + 8)) + 8*uintptr(_i)))
	_i++
	goto _33

_35:
_32:
	*(*int64)(unsafe.Pointer(_reach_pos + 16*uintptr(*(*int32)(unsafe.Pointer(_trans_i + 16))))) = _pos
	*(*uintptr)(unsafe.Pointer((_reach_pos + 16*uintptr(*(*int32)(unsafe.Pointer(_trans_i + 16)))) + 8)) = _reach_next_i + 8
	_reach_next_i += 16
_23:
	_trans_i += 56
	goto _21

_22:
	*(*uintptr)(unsafe.Pointer(_reach_next_i)) = null
	goto _20

_19:
	if _num_tags != int32(0) && _reach_next_i != _reach_next {
		goto _36
	}

	goto _18

_36:
_20:
	if *(*int32)(unsafe.Pointer(_next_c)) != 0 {
		goto _37
	}

	goto _18

_37:
	_prev_c = *(*int32)(unsafe.Pointer(_next_c))
	_pos = _pos + _pos_add_next
	if set766(&_pos_add_next, int64(Xmbtowc(tls, _next_c, _str_byte, uint64(4)))) > int64(0) {
		goto _39
	}

	if _pos_add_next >= int64(0) {
		goto _40
	}

	_ret = int32(1)
	goto lerror_exit

	goto _41

_40:
	_pos_add_next++
_41:
_39:
	_str_byte += uintptr(_pos_add_next)
	_reach_i = _reach
	_reach = _reach_next
	_reach_next = _reach_i
	if *(*int32)(unsafe.Pointer(_tnfa + 76)) == 0 || _new_match == 0 {
		goto _42
	}

	_new_match = int32(0)
	_reach_next_i = _reach_next
	_reach_i = _reach
_43:
	if *(*uintptr)(unsafe.Pointer(_reach_i)) == 0 {
		goto _45
	}

	_skip = int32(0)
	_i = int32(0)
_46:
	if *(*int32)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_tnfa + 64)) + 4*uintptr(_i))) < int32(0) {
		goto _48
	}

	_end = *(*int32)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_tnfa + 64)) + 4*uintptr(_i)))
	_start = *(*int32)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_tnfa + 64)) + 4*uintptr(_i+int32(1))))
	if _end < _num_tags {
		goto _49
	}

	_skip = int32(1)
	goto _48

	goto _50

_49:
	if *(*int64)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_reach_i + 8)) + 8*uintptr(_start))) != *(*int64)(unsafe.Pointer(_match_tags + 8*uintptr(_start))) || *(*int64)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_reach_i + 8)) + 8*uintptr(_end))) >= *(*int64)(unsafe.Pointer(_match_tags + 8*uintptr(_end))) {
		goto _51
	}

	_skip = int32(1)
	goto _48

_51:
_50:
	_i = _i + int32(2)
	goto _46

_48:
	if _skip != 0 {
		goto _52
	}

	*(*uintptr)(unsafe.Pointer(_reach_next_i)) = *(*uintptr)(unsafe.Pointer(_reach_i))
	_tmp_iptr = *(*uintptr)(unsafe.Pointer(_reach_next_i + 8))
	*(*uintptr)(unsafe.Pointer(_reach_next_i + 8)) = *(*uintptr)(unsafe.Pointer(_reach_i + 8))
	*(*uintptr)(unsafe.Pointer(_reach_i + 8)) = _tmp_iptr
	_reach_next_i += 16
_52:
	_reach_i += 16
	goto _43

_45:
	*(*uintptr)(unsafe.Pointer(_reach_next_i)) = null
	_reach_i = _reach
	_reach = _reach_next
	_reach_next = _reach_i
_42:
	_reach_next_i = _reach_next
	_reach_i = _reach
_53:
	if *(*uintptr)(unsafe.Pointer(_reach_i)) == 0 {
		goto _55
	}

	_trans_i = *(*uintptr)(unsafe.Pointer(_reach_i))
_56:
	if *(*uintptr)(unsafe.Pointer(_trans_i + 8)) == 0 {
		goto _58
	}

	if *(*uint32)(unsafe.Pointer(_trans_i)) > uint32(_prev_c) || *(*uint32)(unsafe.Pointer(_trans_i + 4)) < uint32(_prev_c) {
		goto _59
	}

	if *(*int32)(unsafe.Pointer(_trans_i + 32)) == 0 || (*(*int32)(unsafe.Pointer(_trans_i + 32))&int32(1) == 0 || _pos <= int64(0) && _reg_notbol == 0 || int64(_prev_c) == int64(10) && _reg_newline != 0) && (*(*int32)(unsafe.Pointer(_trans_i + 32))&int32(2) == 0 || int64(*(*int32)(unsafe.Pointer(_next_c))) == int64(0) && _reg_noteol == 0 || int64(*(*int32)(unsafe.Pointer(_next_c))) == int64(10) && _reg_newline != 0) && (*(*int32)(unsafe.Pointer(_trans_i + 32))&int32(16) == 0 || int64(_prev_c) != int64(95) && Xiswalnum(tls, uint32(_prev_c)) == 0 && (int64(*(*int32)(unsafe.Pointer(_next_c))) == int64(95) || Xiswalnum(tls, uint32(*(*int32)(unsafe.Pointer(_next_c)))) != 0)) && (*(*int32)(unsafe.Pointer(_trans_i + 32))&int32(32) == 0 || (int64(_prev_c) == int64(95) || Xiswalnum(tls, uint32(_prev_c)) != 0) && (int64(*(*int32)(unsafe.Pointer(_next_c))) != int64(95) && Xiswalnum(tls, uint32(*(*int32)(unsafe.Pointer(_next_c)))) == 0)) && (*(*int32)(unsafe.Pointer(_trans_i + 32))&int32(64) == 0 || (_pos == int64(0) || int64(*(*int32)(unsafe.Pointer(_next_c))) == int64(0) || bool2int((int64(_prev_c) == int64(95)) || (Xiswalnum(tls, uint32(_prev_c)) != 0)) != bool2int((int64(*(*int32)(unsafe.Pointer(_next_c))) == int64(95)) || (Xiswalnum(tls, uint32(*(*int32)(unsafe.Pointer(_next_c)))) != 0)))) && (*(*int32)(unsafe.Pointer(_trans_i + 32))&int32(128) == 0 || _pos != int64(0) && int64(*(*int32)(unsafe.Pointer(_next_c))) != int64(0) && bool2int((int64(_prev_c) == int64(95)) || (Xiswalnum(tls, uint32(_prev_c)) != 0)) == bool2int((int64(*(*int32)(unsafe.Pointer(_next_c))) == int64(95)) || (Xiswalnum(tls, uint32(*(*int32)(unsafe.Pointer(_next_c)))) != 0))) && ((*(*int32)(unsafe.Pointer(_trans_i + 32))&int32(4) == 0 || *(*int32)(unsafe.Pointer(_tnfa + 88))&int32(2) != 0 || Xiswctype(tls, uint32(_prev_c), *(*uint64)(unsafe.Pointer(_trans_i + 40))) != 0) && (*(*int32)(unsafe.Pointer(_trans_i + 32))&int32(4) == 0 || *(*int32)(unsafe.Pointer(_tnfa + 88))&int32(2) == 0 || Xiswctype(tls, Xtowlower(tls, uint32(_prev_c)), *(*uint64)(unsafe.Pointer(_trans_i + 40))) != 0 || Xiswctype(tls, Xtowupper(tls, uint32(_prev_c)), *(*uint64)(unsafe.Pointer(_trans_i + 40))) != 0) && (*(*int32)(unsafe.Pointer(_trans_i + 32))&int32(8) == 0 || xtre_neg_char_classes_match(tls, *(*uintptr)(unsafe.Pointer(_trans_i + 48)), uint32(_prev_c), *(*int32)(unsafe.Pointer(_tnfa + 88))&int32(2)) == 0)) {
		goto _60
	}

	goto _57

_60:
	_i = int32(0)
_61:
	if _i >= _num_tags {
		goto _63
	}

	*(*int64)(unsafe.Pointer(_tmp_tags + 8*uintptr(_i))) = *(*int64)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_reach_i + 8)) + 8*uintptr(_i)))
	_i++
	goto _61

_63:
	_tag_i = *(*uintptr)(unsafe.Pointer(_trans_i + 24))
	if _tag_i == null {
		goto _64
	}

_65:
	if *(*int32)(unsafe.Pointer(_tag_i)) < int32(0) {
		goto _66
	}

	if *(*int32)(unsafe.Pointer(_tag_i)) >= _num_tags {
		goto _67
	}

	*(*int64)(unsafe.Pointer(_tmp_tags + 8*uintptr(*(*int32)(unsafe.Pointer(_tag_i))))) = _pos
_67:
	_tag_i += 4
	goto _65

_66:
_64:
	if *(*int64)(unsafe.Pointer(_reach_pos + 16*uintptr(*(*int32)(unsafe.Pointer(_trans_i + 16))))) >= _pos {
		goto _68
	}

	*(*uintptr)(unsafe.Pointer(_reach_next_i)) = *(*uintptr)(unsafe.Pointer(_trans_i + 8))
	_tmp_iptr = *(*uintptr)(unsafe.Pointer(_reach_next_i + 8))
	*(*uintptr)(unsafe.Pointer(_reach_next_i + 8)) = _tmp_tags
	_tmp_tags = _tmp_iptr
	*(*int64)(unsafe.Pointer(_reach_pos + 16*uintptr(*(*int32)(unsafe.Pointer(_trans_i + 16))))) = _pos
	*(*uintptr)(unsafe.Pointer((_reach_pos + 16*uintptr(*(*int32)(unsafe.Pointer(_trans_i + 16)))) + 8)) = _reach_next_i + 8
	if *(*uintptr)(unsafe.Pointer(_reach_next_i)) != *(*uintptr)(unsafe.Pointer(_tnfa + 24)) || _match_eo != int64(-1) && (_num_tags <= int32(0) || *(*int64)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_reach_next_i + 8)))) > *(*int64)(unsafe.Pointer(_match_tags))) {
		goto _70
	}

	_match_eo = _pos
	_new_match = int32(1)
	_i = int32(0)
_71:
	if _i >= _num_tags {
		goto _73
	}

	*(*int64)(unsafe.Pointer(_match_tags + 8*uintptr(_i))) = *(*int64)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_reach_next_i + 8)) + 8*uintptr(_i)))
	_i++
	goto _71

_73:
_70:
	_reach_next_i += 16
	goto _69

_68:
	if xtre_tag_order(tls, _num_tags, *(*uintptr)(unsafe.Pointer(_tnfa + 56)), _tmp_tags, *(*uintptr)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer((_reach_pos + 16*uintptr(*(*int32)(unsafe.Pointer(_trans_i + 16)))) + 8))))) == 0 {
		goto _74
	}

	_tmp_iptr = *(*uintptr)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer((_reach_pos + 16*uintptr(*(*int32)(unsafe.Pointer(_trans_i + 16)))) + 8))))
	*(*uintptr)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer((_reach_pos + 16*uintptr(*(*int32)(unsafe.Pointer(_trans_i + 16)))) + 8)))) = _tmp_tags
	if *(*uintptr)(unsafe.Pointer(_trans_i + 8)) != *(*uintptr)(unsafe.Pointer(_tnfa + 24)) {
		goto _75
	}

	_match_eo = _pos
	_new_match = int32(1)
	_i = int32(0)
_76:
	if _i >= _num_tags {
		goto _78
	}

	*(*int64)(unsafe.Pointer(_match_tags + 8*uintptr(_i))) = *(*int64)(unsafe.Pointer(_tmp_tags + 8*uintptr(_i)))
	_i++
	goto _76

_78:
_75:
	_tmp_tags = _tmp_iptr
_74:
_69:
_59:
_57:
	_trans_i += 56
	goto _56

_58:
	_reach_i += 16
	goto _53

_55:
	*(*uintptr)(unsafe.Pointer(_reach_next_i)) = null
	goto _17

_18:
	*(*int64)(unsafe.Pointer(_match_end_ofs)) = _match_eo
	_ret = func() int32 {
		if _match_eo >= int64(0) {
			return int32(0)
		}
		return int32(1)
	}()
	goto lerror_exit
lerror_exit:
	Xfree(tls, _buf)
	return _ret
}

// xtre_fill_pmatch is defined at regexec.c:930:1
func xtre_fill_pmatch(tls TLS, _nmatch uint64, _pmatch uintptr /* uintptr */, _cflags int32, _tnfa uintptr /* *Ttre_tnfa_t = Stnfa */, _tags uintptr /* *Tregoff_t = int64 */, _match_eo int64) {
	var (
		_submatch_data uintptr // *Ttre_submatch_data_t = Stre_submatch_data
		_i             uint32
		_j             uint32
		_parents       uintptr // *int32
	)
	_i = uint32(0)
	if _match_eo < int64(0) || _cflags&int32(8) != 0 {
		goto _1
	}

	_submatch_data = *(*uintptr)(unsafe.Pointer(_tnfa + 32))
_2:
	if _i >= *(*uint32)(unsafe.Pointer(_tnfa + 52)) || uint64(_i) >= _nmatch {
		goto _3
	}

	if *(*int32)(unsafe.Pointer(_submatch_data + 16*uintptr(_i))) != *(*int32)(unsafe.Pointer(_tnfa + 80)) {
		goto _4
	}

	*(*int64)(unsafe.Pointer(_pmatch + 16*uintptr(_i))) = _match_eo
	goto _5

_4:
	*(*int64)(unsafe.Pointer(_pmatch + 16*uintptr(_i))) = *(*int64)(unsafe.Pointer(_tags + 8*uintptr(*(*int32)(unsafe.Pointer(_submatch_data + 16*uintptr(_i))))))
_5:
	if *(*int32)(unsafe.Pointer((_submatch_data + 16*uintptr(_i)) + 4)) != *(*int32)(unsafe.Pointer(_tnfa + 80)) {
		goto _6
	}

	*(*int64)(unsafe.Pointer((_pmatch + 16*uintptr(_i)) + 8)) = _match_eo
	goto _7

_6:
	*(*int64)(unsafe.Pointer((_pmatch + 16*uintptr(_i)) + 8)) = *(*int64)(unsafe.Pointer(_tags + 8*uintptr(*(*int32)(unsafe.Pointer((_submatch_data + 16*uintptr(_i)) + 4)))))
_7:
	if *(*int64)(unsafe.Pointer(_pmatch + 16*uintptr(_i))) != int64(-1) && *(*int64)(unsafe.Pointer((_pmatch + 16*uintptr(_i)) + 8)) != int64(-1) {
		goto _8
	}

	*(*int64)(unsafe.Pointer(_pmatch + 16*uintptr(_i))) = set766((*int64)(unsafe.Pointer((_pmatch+16*uintptr(_i))+8)), int64(-1))
_8:
	_i++
	goto _2

_3:
	_i = uint32(0)
_9:
	if _i >= *(*uint32)(unsafe.Pointer(_tnfa + 52)) || uint64(_i) >= _nmatch {
		goto _10
	}

	if *(*int64)(unsafe.Pointer((_pmatch + 16*uintptr(_i)) + 8)) != int64(-1) {
		goto _11
	}

_11:
	_parents = *(*uintptr)(unsafe.Pointer((_submatch_data + 16*uintptr(_i)) + 8))
	if _parents == null {
		goto _12
	}

	_j = uint32(0)
_13:
	if *(*int32)(unsafe.Pointer(_parents + 4*uintptr(_j))) < int32(0) {
		goto _15
	}

	if *(*int64)(unsafe.Pointer(_pmatch + 16*uintptr(_i))) >= *(*int64)(unsafe.Pointer(_pmatch + 16*uintptr(*(*int32)(unsafe.Pointer(_parents + 4*uintptr(_j)))))) && *(*int64)(unsafe.Pointer((_pmatch + 16*uintptr(_i)) + 8)) <= *(*int64)(unsafe.Pointer((_pmatch + 16*uintptr(*(*int32)(unsafe.Pointer(_parents + 4*uintptr(_j))))) + 8)) {
		goto _16
	}

	*(*int64)(unsafe.Pointer(_pmatch + 16*uintptr(_i))) = set766((*int64)(unsafe.Pointer((_pmatch+16*uintptr(_i))+8)), int64(-1))
_16:
	_j++
	goto _13

_15:
_12:
	_i++
	goto _9

_10:
_1:
_17:
	if uint64(_i) >= _nmatch {
		goto _18
	}

	*(*int64)(unsafe.Pointer(_pmatch + 16*uintptr(_i))) = int64(-1)
	*(*int64)(unsafe.Pointer((_pmatch + 16*uintptr(_i)) + 8)) = int64(-1)
	_i++
	goto _17

_18:
}

type Tregoff_t = int64

type s1tnfa_transition = struct {
	Fcode_min   uint32
	Fcode_max   uint32
	Fstate      uintptr // *Ttre_tnfa_transition_t = Stnfa_transition
	Fstate_id   int32
	Ftags       uintptr // *int32
	Fassertions int32
	Fu          struct {
		Fclass   [0]uint64
		Fbackref [0]int32
		F        int64
	}
	Fneg_classes uintptr // *Ttre_ctype_t = Twctype_t = uint64
}

type s1tre_submatch_data = struct {
	Fso_tag  int32
	Feo_tag  int32
	Fparents uintptr // *int32
}

type Ttre_char_t = int32

type t21wchar_t = int32

type t1tre_list_t = struct {
	Fdata uintptr // *void
	Fnext uintptr // *Stre_list
}

type Ttre_backtrack_item_t = struct {
	Fpos      int64
	Fstr_byte uintptr // *int8
	Fstate    uintptr // *Ttre_tnfa_transition_t = Stnfa_transition
	Fstate_id int32
	Fnext_c   int32
	Ftags     uintptr // *Tregoff_t = int64
}

type Ttre_tnfa_transition_t = s1tnfa_transition

type Stre_backtrack_struct = struct {
	Fitem struct {
		Fpos      int64
		Fstr_byte uintptr // *int8
		Fstate    uintptr // *Ttre_tnfa_transition_t = Stnfa_transition
		Fstate_id int32
		Fnext_c   int32
		Ftags     uintptr // *Tregoff_t = int64
	}
	Fprev uintptr // *Stre_backtrack_struct
	Fnext uintptr // *Stre_backtrack_struct
}

// xtre_tag_order is defined at regexec.c:99:1
func xtre_tag_order(tls TLS, _num_tags int32, _tag_directions uintptr /* *Ttre_tag_direction_t = int32 */, _t1 uintptr /* *Tregoff_t = int64 */, _t2 uintptr /* *Tregoff_t = int64 */) (r int32) {
	var _i int32

	_i = int32(0)
_1:
	if _i >= _num_tags {
		goto _3
	}

	if *(*int32)(unsafe.Pointer(_tag_directions + 4*uintptr(_i))) != int32(0) {
		goto _4
	}

	if *(*int64)(unsafe.Pointer(_t1 + 8*uintptr(_i))) >= *(*int64)(unsafe.Pointer(_t2 + 8*uintptr(_i))) {
		goto _6
	}

	return int32(1)

_6:
	if *(*int64)(unsafe.Pointer(_t1 + 8*uintptr(_i))) <= *(*int64)(unsafe.Pointer(_t2 + 8*uintptr(_i))) {
		goto _7
	}

	return int32(0)

_7:
	goto _5

_4:
	if *(*int64)(unsafe.Pointer(_t1 + 8*uintptr(_i))) <= *(*int64)(unsafe.Pointer(_t2 + 8*uintptr(_i))) {
		goto _8
	}

	return int32(1)

_8:
	if *(*int64)(unsafe.Pointer(_t1 + 8*uintptr(_i))) >= *(*int64)(unsafe.Pointer(_t2 + 8*uintptr(_i))) {
		goto _9
	}

	return int32(0)

_9:
_5:
	_i++
	goto _1

_3:
	return int32(0)
}

type t1tre_cint_t = uint32

type t19wint_t = uint32

type t1tre_ctype_t = uint64

type t3wctype_t = uint64

// xtre_neg_char_classes_match is defined at regexec.c:125:1
func xtre_neg_char_classes_match(tls TLS, _classes uintptr /* *Ttre_ctype_t = Twctype_t = uint64 */, _wc uint32, _icase int32) (r int32) {
_1:
	if *(*uint64)(unsafe.Pointer(_classes)) == uint64(0) {
		goto _2
	}

	if (_icase != 0 || Xiswctype(tls, _wc, *(*uint64)(unsafe.Pointer(_classes))) == 0) && (_icase == 0 || Xiswctype(tls, Xtowupper(tls, _wc), *(*uint64)(unsafe.Pointer(_classes))) == 0 && Xiswctype(tls, Xtowlower(tls, _wc), *(*uint64)(unsafe.Pointer(_classes))) == 0) {
		goto _3
	}

	return int32(1)

	goto _4

_3:
	_classes += 8
_4:
	goto _1

_2:
	return int32(0)
}

type t1tre_tag_direction_t = int32

type s1tre_list struct{ uintptr }

// linking tre-mem.o

// X__tre_mem_new_impl is defined at tre-mem.c:53:1
func X__tre_mem_new_impl(tls TLS, _provided int32, _provided_block uintptr /* *void */) (r uintptr /* Ttre_mem_t = *struct{Fblocks *st...ailed int32;Fprovided *uintptr;} */) {
	var _mem uintptr // Ttre_mem_t = *struct{Fblocks *st...ailed int32;Fprovided *uintptr;}

	if _provided == 0 {
		goto _1
	}

	_mem = _provided_block
	Xmemset(tls, _mem, int32(0), uint64(48))
	goto _2

_1:
	_mem = Xcalloc(tls, uint64(1), uint64(48))
_2:
	if _mem != null {
		goto _3
	}

	return null

_3:
	return _mem
}

// X__tre_mem_destroy is defined at tre-mem.c:71:1
func X__tre_mem_destroy(tls TLS, _mem uintptr /* Ttre_mem_t = *struct{Fblocks *st...ailed int32;Fprovided *uintptr;} */) {
	var (
		_tmp uintptr // *Ttre_list_t = struct{Fdata uintptr;Fnext *Stre_list;}
		_l   uintptr // *Ttre_list_t = struct{Fdata uintptr;Fnext *Stre_list;}
	)
	_l = *(*uintptr)(unsafe.Pointer(_mem))
_1:
	if _l == null {
		goto _2
	}

	Xfree(tls, *(*uintptr)(unsafe.Pointer(_l)))
	_tmp = *(*uintptr)(unsafe.Pointer(_l + 8))
	Xfree(tls, _l)
	_l = _tmp
	goto _1

_2:
	Xfree(tls, _mem)
}

// X__tre_mem_alloc_impl is defined at tre-mem.c:88:6
func X__tre_mem_alloc_impl(tls TLS, _mem uintptr /* Ttre_mem_t = *struct{Fblocks *st...ailed int32;Fprovided *uintptr;} */, _provided int32, _provided_block uintptr /* *void */, _zero int32, _size uint64) (r uintptr /* *void */) {
	var (
		_ptr        uintptr // *void
		_l          uintptr // *Ttre_list_t = struct{Fdata uintptr;Fnext *Stre_list;}
		_block_size int32
	)
	if *(*int32)(unsafe.Pointer(_mem + 32)) == 0 {
		goto _1
	}

	return null

_1:
	if *(*uint64)(unsafe.Pointer(_mem + 24)) >= _size {
		goto _2
	}

	if _provided == 0 {
		goto _3
	}

	if _provided_block != null {
		goto _5
	}

	*(*int32)(unsafe.Pointer(_mem + 32)) = int32(1)
	return null

_5:
	*(*uintptr)(unsafe.Pointer(_mem + 16)) = _provided_block
	*(*uint64)(unsafe.Pointer(_mem + 24)) = uint64(1024)
	goto _4

_3:
	if _size*uint64(8) <= uint64(1024) {
		goto _6
	}

	_block_size = int32(_size * uint64(8))
	goto _7

_6:
	_block_size = int32(1024)
_7:
	_l = Xmalloc(tls, uint64(16))
	if _l != null {
		goto _8
	}

	*(*int32)(unsafe.Pointer(_mem + 32)) = int32(1)
	return null

_8:
	*(*uintptr)(unsafe.Pointer(_l)) = Xmalloc(tls, uint64(_block_size))
	if *(*uintptr)(unsafe.Pointer(_l)) != null {
		goto _9
	}

	Xfree(tls, _l)
	*(*int32)(unsafe.Pointer(_mem + 32)) = int32(1)
	return null

_9:
	*(*uintptr)(unsafe.Pointer(_l + 8)) = null
	if *(*uintptr)(unsafe.Pointer(_mem + 8)) == null {
		goto _10
	}

	*(*uintptr)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_mem + 8)) + 8)) = _l
_10:
	if *(*uintptr)(unsafe.Pointer(_mem)) != null {
		goto _11
	}

	*(*uintptr)(unsafe.Pointer(_mem)) = _l
_11:
	*(*uintptr)(unsafe.Pointer(_mem + 8)) = _l
	*(*uintptr)(unsafe.Pointer(_mem + 16)) = *(*uintptr)(unsafe.Pointer(_l))
	*(*uint64)(unsafe.Pointer(_mem + 24)) = uint64(_block_size)
_4:
_2:
	_size = _size + func() uint64 {
		if (uint64(int64(*(*uintptr)(unsafe.Pointer(_mem + 16))))+_size)%uint64(8) != 0 {
			return uint64(8) - (uint64(int64(*(*uintptr)(unsafe.Pointer(_mem + 16))))+_size)%uint64(8)
		}
		return uint64(0)
	}()
	_ptr = *(*uintptr)(unsafe.Pointer(_mem + 16))
	*(*uintptr)(unsafe.Pointer(_mem + 16)) += uintptr(_size)
	{
		p := (*uint64)(unsafe.Pointer(_mem + 24))
		*p = *p - _size
	}
	if _zero == 0 {
		goto _12
	}

	Xmemset(tls, _ptr, int32(0), _size)
_12:
	return _ptr
}

type t738__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t738__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t2tre_list_t = struct {
	Fdata uintptr // *void
	Fnext uintptr // *Stre_list
}

type s2tre_list = struct {
	Fdata uintptr // *void
	Fnext uintptr // *Stre_list
}

type t187size_t = uint64

// linking affinity.o

// Xsched_setaffinity is defined at affinity.c:7:5
func Xsched_setaffinity(tls TLS, _tid int32, _size uint64, _set uintptr /* *Tcpu_set_t = struct{F__bits [16]uint64;} */) (r int32) {
	return int32(X__syscall_ret(tls, uint64(x36__syscall3(tls, int64(203), int64(_tid), int64(_size), int64(_set)))))
}

// Xpthread_setaffinity_np is defined at affinity.c:12:5
func Xpthread_setaffinity_np(tls TLS, _td uintptr /* Tpthread_t = *S__pthread */, _size uint64, _set uintptr /* *Tcpu_set_t = struct{F__bits [16]uint64;} */) (r int32) {
	return int32(-x36__syscall3(tls, int64(203), int64(*(*int32)(unsafe.Pointer(_td + 56))), int64(_size), int64(_set)))
}

// Xsched_getaffinity is defined at affinity.c:25:5
func Xsched_getaffinity(tls TLS, _tid int32, _size uint64, _set uintptr /* *Tcpu_set_t = struct{F__bits [16]uint64;} */) (r int32) {
	return int32(X__syscall_ret(tls, uint64(xdo_getaffinity(tls, _tid, _size, _set))))
}

// Xpthread_getaffinity_np is defined at affinity.c:30:5
func Xpthread_getaffinity_np(tls TLS, _td uintptr /* Tpthread_t = *S__pthread */, _size uint64, _set uintptr /* *Tcpu_set_t = struct{F__bits [16]uint64;} */) (r int32) {
	return -xdo_getaffinity(tls, *(*int32)(unsafe.Pointer(_td + 56)), _size, _set)
}

type t739__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t739__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t34pid_t = int32

type t188size_t = uint64

// x__syscall3 is defined at syscall_arch.h:33:22
func x36__syscall3(tls TLS, _n int64, _a1 int64, _a2 int64, _a3 int64) (r int64) {
	return X__syscall(tls, _n, _a1, _a2, _a3, int64(0), int64(0), int64(0))
}

type s30__pthread = struct {
	Fself          uintptr // *S__pthread
	Fdtv           uintptr // **void
	Funused1       uintptr // *void
	Funused2       uintptr // *void
	Fsysinfo       uint64
	Fcanary        uint64
	Fcanary2       uint64
	Ftid           int32
	Ferrno_val     int32
	Fdetach_state  int32
	Fcancel        int32
	Fcanceldisable uint8
	Fcancelasync   uint8
	F74            uint8
	Fmap_base      uintptr // *uint8
	Fmap_size      uint64
	Fstack         uintptr // *void
	Fstack_size    uint64
	Fguard_size    uint64
	Fstart_arg     uintptr // *void
	Fstart         uintptr // *func(TLS, uintptr) uintptr
	Fresult        uintptr // *void
	Fcancelbuf     uintptr // *S__ptcb
	Ftsd           uintptr // **void
	Frobust_list   struct {
		Fhead    uintptr
		Foff     int64
		Fpending uintptr
	}
	Ftimer_id      int32
	Flocale        uintptr // Tlocale_t = *S__locale_struct
	Fkilllock      [1]int32
	Fdlerror_buf   uintptr // *int8
	Fstdio_locks   uintptr // *void
	Fcanary_at_end uint64
	Fdtv_copy      uintptr // **void
}

// xdo_getaffinity is defined at affinity.c:17:12
func xdo_getaffinity(tls TLS, _tid int32, _size uint64, _set uintptr /* *Tcpu_set_t = struct{F__bits [16]uint64;} */) (r int32) {
	var _ret int64

	_ret = x36__syscall3(tls, int64(204), int64(_tid), int64(_size), int64(_set))
	if _ret >= int64(0) {
		goto _1
	}

	return int32(_ret)

_1:
	if uint64(_ret) >= _size {
		goto _2
	}

	Xmemset(tls, _set+uintptr(_ret), int32(0), _size-uint64(_ret))
_2:
	return int32(0)
}

type t34uintptr_t = uint64

type s28__ptcb = struct {
	F__f    uintptr // *func(TLS, uintptr)
	F__x    uintptr // *void
	F__next uintptr // *S__ptcb
}

type s66__locale_struct = struct{ Fcat [6]uintptr }

// linking sched_cpucount.o

// X__sched_cpucount is defined at sched_cpucount.c:4:5
func X__sched_cpucount(tls TLS, _size uint64, _set uintptr /* *Tcpu_set_t = struct{F__bits [16]uint64;} */) (r int32) {
	var (
		_i   uint64
		_j   uint64
		_cnt uint64
		_p   uintptr // *uint8
	)
	_cnt = uint64(0)
	_p = _set
	_i = uint64(0)
_1:
	if _i >= _size {
		goto _3
	}

	_j = uint64(0)
_4:
	if _j >= uint64(8) {
		goto _6
	}

	if (int32(*(*uint8)(unsafe.Pointer(_p + uintptr(_i)))) & (int32(1) << (uint(_j) % 32))) == 0 {
		goto _7
	}

	_cnt++
_7:
	_j++
	goto _4

_6:
	_i++
	goto _1

_3:
	return int32(_cnt)
}

type t740__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t740__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t189size_t = uint64

// linking sched_get_priority_max.o

// Xsched_get_priority_max is defined at sched_get_priority_max.c:4:5
func Xsched_get_priority_max(tls TLS, _policy int32) (r int32) {
	return int32(X__syscall_ret(tls, uint64(x29__syscall1(tls, int64(146), int64(_policy)))))
}

// Xsched_get_priority_min is defined at sched_get_priority_max.c:9:5
func Xsched_get_priority_min(tls TLS, _policy int32) (r int32) {
	return int32(X__syscall_ret(tls, uint64(x29__syscall1(tls, int64(147), int64(_policy)))))
}

type t741__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t741__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// x__syscall1 is defined at syscall_arch.h:16:22
func x29__syscall1(tls TLS, _n int64, _a1 int64) (r int64) {
	return X__syscall(tls, _n, _a1, int64(0), int64(0), int64(0), int64(0), int64(0))
}

// linking sched_getcpu.o

func fn768(p uintptr) func(TLS, uintptr, uintptr, uintptr) int64 {
	return *(*func(TLS, uintptr, uintptr, uintptr) int64)(unsafe.Pointer(&p))
}

// Xsched_getcpu is defined at sched_getcpu.c:27:5
func Xsched_getcpu(tls TLS) (r int32) {
	esc := MustMalloc(4)
	var (
		_r   int32
		_cpu = esc   // *uint32
		_f   uintptr // Tgetcpu_f = *func(TLS, uintptr, uintptr, uintptr) int64
	)
	defer Free(esc)
	_f = xvdso_func
	if _f == 0 {
		goto _1
	}

	_r = int32(fn768(_f)(tls, _cpu, null, null))
	if _r != 0 {
		goto _2
	}

	return int32(*(*uint32)(unsafe.Pointer(_cpu)))

_2:
	if _r == int32(-38) {
		goto _3
	}

	return int32(X__syscall_ret(tls, uint64(_r)))

_3:
_1:
	_r = int32(x37__syscall3(tls, int64(309), int64(_cpu), int64(0), int64(0)))
	if _r != 0 {
		goto _4
	}

	return int32(*(*uint32)(unsafe.Pointer(_cpu)))

_4:
	return int32(X__syscall_ret(tls, uint64(_r)))
}

type t742__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t742__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

func fp769(f func(TLS, uintptr, uintptr, uintptr) int64) uintptr {
	return *(*uintptr)(unsafe.Pointer(&f))
}

// xvdso_func *void, escapes: false, sched_getcpu.c:23:13
var xvdso_func uintptr

func init() { xvdso_func = fp769(xgetcpu_init) }

// x__syscall3 is defined at syscall_arch.h:33:22
func x37__syscall3(tls TLS, _n int64, _a1 int64, _a2 int64, _a3 int64) (r int64) {
	return X__syscall(tls, _n, _a1, _a2, _a3, int64(0), int64(0), int64(0))
}

// xgetcpu_init is defined at sched_getcpu.c:15:13
func xgetcpu_init(tls TLS, _cpu uintptr /* *uint32 */, _node uintptr /* *uint32 */, _unused uintptr /* *void */) (r int64) {
	var (
		_p uintptr // *void
		_f uintptr // Tgetcpu_f = *func(TLS, uintptr, uintptr, uintptr) int64
	)
	_p = X__vdsosym(tls, ts+4200 /* "LINUX_2.6" */, ts+4212 /* "__vdso_getcpu" */)
	_f = _p
	x1a_cas_p(tls, xvdso_func, fp769(xgetcpu_init), _p)
	if _f != 0 {
		return fn768(_f)(tls, _cpu, _node, _unused)
	}

	return int64(-38)
}

// xa_cas_p is defined at atomic_arch.h:14:20
func x1a_cas_p(tls TLS, _p uintptr /* *void */, _t uintptr /* *void */, _s uintptr /* *void */) (r uintptr /* *void */) {
	return a_cas_p(_p, _t, _s)
	return r
}

// linking sched_getparam.o

// Xsched_getparam is defined at sched_getparam.c:5:5
func Xsched_getparam(tls TLS, _pid int32, _param uintptr /* *Ssched_param */) (r int32) {
	return int32(X__syscall_ret(tls, uint64(18446744073709551578)))
}

type t743__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t743__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t35pid_t = int32

type s1sched_param = struct {
	Fsched_priority        int32
	Fsched_ss_low_priority int32
	Fsched_ss_repl_period  s17timespec
	Fsched_ss_init_budget  s17timespec
	Fsched_ss_max_repl     int32
}

type s17timespec = struct {
	Ftv_sec  int64
	Ftv_nsec int64
}

type t30time_t = int64

// linking sched_getscheduler.o

// Xsched_getscheduler is defined at sched_getscheduler.c:5:5
func Xsched_getscheduler(tls TLS, _pid int32) (r int32) {
	return int32(X__syscall_ret(tls, uint64(18446744073709551578)))
}

type t744__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t744__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t36pid_t = int32

// linking sched_rr_get_interval.o

// Xsched_rr_get_interval is defined at sched_rr_get_interval.c:4:5
func Xsched_rr_get_interval(tls TLS, _pid int32, _ts uintptr /* *Stimespec */) (r int32) {
	return int32(X__syscall_ret(tls, uint64(x30__syscall2(tls, int64(148), int64(_pid), int64(_ts)))))
}

type t745__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t745__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t37pid_t = int32

type s18timespec = struct {
	Ftv_sec  int64
	Ftv_nsec int64
}

// x__syscall2 is defined at syscall_arch.h:24:22
func x30__syscall2(tls TLS, _n int64, _a1 int64, _a2 int64) (r int64) {
	return X__syscall(tls, _n, _a1, _a2, int64(0), int64(0), int64(0), int64(0))
}

type t31time_t = int64

// linking sched_setparam.o

// Xsched_setparam is defined at sched_setparam.c:5:5
func Xsched_setparam(tls TLS, _pid int32, _param uintptr /* *Ssched_param */) (r int32) {
	return int32(X__syscall_ret(tls, uint64(18446744073709551578)))
}

type t746__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t746__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t38pid_t = int32

type s2sched_param = struct {
	Fsched_priority        int32
	Fsched_ss_low_priority int32
	Fsched_ss_repl_period  s19timespec
	Fsched_ss_init_budget  s19timespec
	Fsched_ss_max_repl     int32
}

type s19timespec = struct {
	Ftv_sec  int64
	Ftv_nsec int64
}

type t32time_t = int64

// linking sched_setscheduler.o

// Xsched_setscheduler is defined at sched_setscheduler.c:5:5
func Xsched_setscheduler(tls TLS, _pid int32, _sched int32, _param uintptr /* *Ssched_param */) (r int32) {
	return int32(X__syscall_ret(tls, uint64(18446744073709551578)))
}

type t747__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t747__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t39pid_t = int32

type s3sched_param = struct {
	Fsched_priority        int32
	Fsched_ss_low_priority int32
	Fsched_ss_repl_period  s20timespec
	Fsched_ss_init_budget  s20timespec
	Fsched_ss_max_repl     int32
}

type s20timespec = struct {
	Ftv_sec  int64
	Ftv_nsec int64
}

type t33time_t = int64

// linking sched_yield.o

// Xsched_yield is defined at sched_yield.c:4:5
func Xsched_yield(tls TLS) (r int32) {
	return int32(X__syscall_ret(tls, uint64(x5__syscall0(tls, int64(24)))))
}

type t748__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t748__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// x__syscall0 is defined at syscall_arch.h:8:22
func x5__syscall0(tls TLS, _n int64) (r int64) {
	return X__syscall(tls, _n, int64(0), int64(0), int64(0), int64(0), int64(0), int64(0))
}

// linking hsearch.o

// Xhcreate is defined at hsearch.c:73:5
func Xhcreate(tls TLS, _nel uint64) (r int32) {
	return X__hcreate_r(tls, _nel, xhtab)
}

// Xhdestroy is defined at hsearch.c:78:6
func Xhdestroy(tls TLS) {
	X__hdestroy_r(tls, xhtab)
}

// Xhsearch is defined at hsearch.c:96:7
func Xhsearch(tls TLS, _item struct {
	Fkey  uintptr // *int8
	Fdata uintptr // *void
}, _action int32) (r uintptr /* *TENTRY = struct{Fkey *int8;Fdata uintptr;} */) {
	esc := MustMalloc(8)
	var _e = esc // **TENTRY = struct{Fkey *int8;Fdata uintptr;}
	defer Free(esc)
	X__hsearch_r(tls, _item, _action, _e, xhtab)
	return *(*uintptr)(unsafe.Pointer(_e))
}

// X__hcreate_r is defined at hsearch.c:104:5
func X__hcreate_r(tls TLS, _nel uint64, _htab uintptr /* *Shsearch_data */) (r int32) {
	var _r int32

	*(*uintptr)(unsafe.Pointer(_htab)) = Xcalloc(tls, uint64(1), uint64(24))
	if *(*uintptr)(unsafe.Pointer(_htab)) != 0 {
		goto _1
	}

	return int32(0)

_1:
	_r = xresize(tls, _nel, _htab)
	if _r != int32(0) {
		goto _2
	}

	Xfree(tls, *(*uintptr)(unsafe.Pointer(_htab)))
	*(*uintptr)(unsafe.Pointer(_htab)) = null
_2:
	return _r
}

// X__hdestroy_r is defined at hsearch.c:120:6
func X__hdestroy_r(tls TLS, _htab uintptr /* *Shsearch_data */) {
	if *(*uintptr)(unsafe.Pointer(_htab)) == 0 {
		goto _1
	}

	Xfree(tls, *(*uintptr)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_htab)))))
_1:
	Xfree(tls, *(*uintptr)(unsafe.Pointer(_htab)))
	*(*uintptr)(unsafe.Pointer(_htab)) = null
}

func preinc770(p *uint64) uint64 { *p += 1; return *p }

// X__hsearch_r is defined at hsearch.c:128:5
func X__hsearch_r(tls TLS, aitem struct {
	Fkey  uintptr // *int8
	Fdata uintptr // *void
}, _action int32, _retval uintptr /* **TENTRY = struct{Fkey *int8;Fdata uintptr;} */, _htab uintptr /* *Shsearch_data */) (r int32) {
	esc := MustMalloc(16)
	var (
		_item = esc // *struct{Fkey *int8;Fdata uintptr;}
		_hash uint64
		_e    uintptr // *TENTRY = struct{Fkey *int8;Fdata uintptr;}
	)
	defer Free(esc)
	*(*struct {
		Fkey  uintptr // *int8
		Fdata uintptr // *void
	})(unsafe.Pointer(_item)) = aitem
	_hash = xkeyhash(tls, *(*uintptr)(unsafe.Pointer(_item)))
	_e = xlookup(tls, *(*uintptr)(unsafe.Pointer(_item)), _hash, _htab)
	if *(*uintptr)(unsafe.Pointer(_e)) == 0 {
		goto _1
	}

	*(*uintptr)(unsafe.Pointer(_retval)) = _e
	return int32(1)

_1:
	if _action != int32(0) {
		goto _2
	}

	*(*uintptr)(unsafe.Pointer(_retval)) = null
	return int32(0)

_2:
	*(*struct {
		Fkey  uintptr // *int8
		Fdata uintptr // *void
	})(unsafe.Pointer(_e)) = *(*struct {
		Fkey  uintptr // *int8
		Fdata uintptr // *void
	})(unsafe.Pointer(_item))
	if preinc770((*uint64)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_htab))+16))) <= *(*uint64)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_htab)) + 8))-*(*uint64)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_htab)) + 8))/uint64(4) {
		goto _3
	}

	if xresize(tls, uint64(2)**(*uint64)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_htab)) + 16)), _htab) != 0 {
		goto _4
	}

	*(*uint64)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_htab)) + 16))--
	*(*uintptr)(unsafe.Pointer(_e)) = null
	*(*uintptr)(unsafe.Pointer(_retval)) = null
	return int32(0)

_4:
	_e = xlookup(tls, *(*uintptr)(unsafe.Pointer(_item)), _hash, _htab)
_3:
	*(*uintptr)(unsafe.Pointer(_retval)) = _e
	return int32(1)
}

type t749__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t749__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t190size_t = uint64

// xhtab Shsearch_data, escapes: true, hsearch.c:25:28
var xhtab = bss + 3880

type TENTRY = struct {
	Fkey  uintptr // *int8
	Fdata uintptr // *void
}

type TACTION = int32

type Shsearch_data = struct {
	F__tab     uintptr // *S__tab
	F__unused1 uint32
	F__unused2 uint32
}

func postinc771(p *uint64) uint64 { r := *p; *p += 1; return r }

// xresize is defined at hsearch.c:41:12
func xresize(tls TLS, _nel uint64, _htab uintptr /* *Shsearch_data */) (r int32) {
	var (
		_newsize uint64
		_i       uint64
		_j       uint64
		_e       uintptr // *TENTRY = struct{Fkey *int8;Fdata uintptr;}
		_newe    uintptr // *TENTRY = struct{Fkey *int8;Fdata uintptr;}
		_oldtab  uintptr // *TENTRY = struct{Fkey *int8;Fdata uintptr;}
		_oldend  uintptr // *TENTRY = struct{Fkey *int8;Fdata uintptr;}
	)
	_oldtab = *(*uintptr)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_htab))))
	_oldend = (*(*uintptr)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_htab)))) + 16*uintptr(*(*uint64)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_htab)) + 8)))) + 16*uintptr(1)
	if _nel <= uint64(9223372036854775808) {
		goto _1
	}

	_nel = uint64(9223372036854775808)
_1:
	_newsize = uint64(8)
_2:
	if _newsize >= _nel {
		goto _4
	}

	_newsize = _newsize * uint64(2)
	goto _2

_4:
	*(*uintptr)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_htab)))) = Xcalloc(tls, _newsize, uint64(16))
	if *(*uintptr)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_htab)))) != 0 {
		goto _5
	}

	*(*uintptr)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_htab)))) = _oldtab
	return int32(0)

_5:
	*(*uint64)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_htab)) + 8)) = _newsize - uint64(1)
	if _oldtab != 0 {
		goto _6
	}

	return int32(1)

_6:
	_e = _oldtab
_7:
	if _e >= _oldend {
		goto _9
	}

	if *(*uintptr)(unsafe.Pointer(_e)) == 0 {
		goto _10
	}

	_i = xkeyhash(tls, *(*uintptr)(unsafe.Pointer(_e)))
	_j = uint64(1)
_11:
	_newe = *(*uintptr)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_htab)))) + 16*uintptr(_i&*(*uint64)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_htab)) + 8)))
	if *(*uintptr)(unsafe.Pointer(_newe)) != 0 {
		goto _14
	}

	goto _13

_14:
	_i = _i + postinc771(&_j)
	goto _11

_13:
	*(*struct {
		Fkey  uintptr // *int8
		Fdata uintptr // *void
	})(unsafe.Pointer(_newe)) = *(*struct {
		Fkey  uintptr // *int8
		Fdata uintptr // *void
	})(unsafe.Pointer(_e))
_10:
	_e += 16
	goto _7

_9:
	Xfree(tls, _oldtab)
	return int32(1)
}

func postinc772(p *uintptr) uintptr { r := *p; *p += 1; return r }

// xkeyhash is defined at hsearch.c:31:15
func xkeyhash(tls TLS, _k uintptr /* *int8 */) (r uint64) {
	var (
		_p uintptr // *uint8
		_h uint64
	)
	_p = _k
	_h = uint64(0)
_1:
	if *(*uint8)(unsafe.Pointer(_p)) == 0 {
		goto _2
	}

	_h = uint64(31)*_h + uint64(*(*uint8)(unsafe.Pointer(postinc772(&_p))))
	goto _1

_2:
	return _h
}

// xlookup is defined at hsearch.c:83:14
func xlookup(tls TLS, _key uintptr /* *int8 */, _hash uint64, _htab uintptr /* *Shsearch_data */) (r uintptr /* *TENTRY = struct{Fkey *int8;Fdata uintptr;} */) {
	var (
		_i uint64
		_j uint64
		_e uintptr // *TENTRY = struct{Fkey *int8;Fdata uintptr;}
	)
	_i = _hash
	_j = uint64(1)
_1:
	_e = *(*uintptr)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_htab)))) + 16*uintptr(_i&*(*uint64)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_htab)) + 8)))
	if *(*uintptr)(unsafe.Pointer(_e)) != 0 && Xstrcmp(tls, *(*uintptr)(unsafe.Pointer(_e)), _key) != int32(0) {
		goto _4
	}

	goto _3

_4:
	_i = _i + postinc771(&_j)
	goto _1

_3:
	return _e
}

type S__tab = struct {
	Fentries uintptr // *TENTRY = struct{Fkey *int8;Fdata uintptr;}
	Fmask    uint64
	Fused    uint64
}

// linking insque.o

func set773(p *uintptr, v uintptr) uintptr { *p = v; return v }

// Xinsque is defined at insque.c:8:6
func Xinsque(tls TLS, _element uintptr /* *void */, _pred uintptr /* *void */) {
	var (
		_e uintptr // *Snode
		_p uintptr // *Snode
	)
	_e = _element
	_p = _pred
	if _p != 0 {
		goto _1
	}

	*(*uintptr)(unsafe.Pointer(_e)) = set773((*uintptr)(unsafe.Pointer(_e+8)), null)
	return

_1:
	*(*uintptr)(unsafe.Pointer(_e)) = *(*uintptr)(unsafe.Pointer(_p))
	*(*uintptr)(unsafe.Pointer(_e + 8)) = _p
	*(*uintptr)(unsafe.Pointer(_p)) = _e
	if *(*uintptr)(unsafe.Pointer(_e)) == 0 {
		goto _2
	}

	*(*uintptr)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_e)) + 8)) = _e
_2:
}

// Xremque is defined at insque.c:24:6
func Xremque(tls TLS, _element uintptr /* *void */) {
	var _e uintptr // *Snode

	_e = _element
	if *(*uintptr)(unsafe.Pointer(_e)) == 0 {
		goto _1
	}

	*(*uintptr)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_e)) + 8)) = *(*uintptr)(unsafe.Pointer(_e + 8))
_1:
	if *(*uintptr)(unsafe.Pointer(_e + 8)) == 0 {
		goto _2
	}

	*(*uintptr)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_e + 8)))) = *(*uintptr)(unsafe.Pointer(_e))
_2:
}

type t750__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t750__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type Snode = struct {
	Fnext uintptr // *Snode
	Fprev uintptr // *Snode
}

// linking lsearch.o

// Xlsearch is defined at lsearch.c:5:6
func Xlsearch(tls TLS, _key uintptr /* *void */, _base uintptr /* *void */, _nelp uintptr /* *Tsize_t = uint64 */, _width uint64, _compar uintptr /* *func(TLS, uintptr, uintptr) int32 */) (r uintptr /* *void */) {
	X__assert_fail(tls, ts+0 /* "TODO(ccgo)" */, ts+4228 /* "src/search/lsear..." */, int32(8), x774__func__)
	return r
}

// Xlfind is defined at lsearch.c:20:6
func Xlfind(tls TLS, _key uintptr /* *void */, _base uintptr /* *void */, _nelp uintptr /* *Tsize_t = uint64 */, _width uint64, _compar uintptr /* *func(TLS, uintptr, uintptr) int32 */) (r uintptr /* *void */) {
	X__assert_fail(tls, ts+0 /* "TODO(ccgo)" */, ts+4228 /* "src/search/lsear..." */, int32(23), x775__func__)
	return r
}

type t751__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t751__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t191size_t = uint64

// x1__func__ [8]int8, escapes: true, lsearch.c:7:1
var x774__func__ = ds + 44512

// x2__func__ [6]int8, escapes: true, lsearch.c:22:1
var x775__func__ = ds + 44520

// linking tdestroy.o

func fn776(p uintptr) func(TLS, uintptr) { return *(*func(TLS, uintptr))(unsafe.Pointer(&p)) }

// Xtdestroy is defined at tdestroy.c:11:6
func Xtdestroy(tls TLS, _root uintptr /* *void */, _freekey uintptr /* *func(TLS, uintptr) */) {
	var _r uintptr // *Snode

	_r = _root
	if _r != 0 {
		goto _1
	}

	return

_1:
	Xtdestroy(tls, *(*uintptr)(unsafe.Pointer(_r + 8)), _freekey)
	Xtdestroy(tls, *(*uintptr)(unsafe.Pointer(_r + 16)), _freekey)
	if _freekey == 0 {
		goto _2
	}

	fn776(_freekey)(tls, *(*uintptr)(unsafe.Pointer(_r)))
_2:
	Xfree(tls, _r)
}

type t752__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t752__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type s1node = struct {
	Fkey   uintptr // *void
	Fleft  uintptr // *Snode
	Fright uintptr // *Snode
}

// linking tsearch_avl.o

// Xtdelete is defined at tsearch_avl.c:151:6
func Xtdelete(tls TLS, _key uintptr /* *void */, _rootp uintptr /* **void */, _compar uintptr /* *func(TLS, uintptr, uintptr) int32 */) (r uintptr /* *void */) {
	esc := MustMalloc(8)
	var (
		_n   = esc   // **Snode
		_ret uintptr // *Snode
	)
	defer Free(esc)
	if _rootp != 0 {
		goto _1
	}

	return null

_1:
	*(*uintptr)(unsafe.Pointer(_n)) = *(*uintptr)(unsafe.Pointer(_rootp))
	_ret = xremove(tls, _n, _key, _compar, *(*uintptr)(unsafe.Pointer(_n)))
	*(*uintptr)(unsafe.Pointer(_rootp)) = *(*uintptr)(unsafe.Pointer(_n))
	return _ret
}

// Xtfind is defined at tsearch_avl.c:165:6
func Xtfind(tls TLS, _key uintptr /* *void */, _rootp uintptr /* **void */, _compar uintptr /* *func(TLS, uintptr, uintptr) int32 */) (r uintptr /* *void */) {
	if _rootp != 0 {
		goto _1
	}

	return null

_1:
	return xfind(tls, *(*uintptr)(unsafe.Pointer(_rootp)), _key, _compar)
}

// Xtsearch is defined at tsearch_avl.c:173:6
func Xtsearch(tls TLS, _key uintptr /* *void */, _rootp uintptr /* **void */, _compar uintptr /* *func(TLS, uintptr, uintptr) int32 */) (r uintptr /* *void */) {
	esc := MustMalloc(8)
	var (
		_update uintptr // *Snode
		_ret    = esc   // **Snode
	)
	defer Free(esc)
	if _rootp != 0 {
		goto _1
	}

	return null

_1:
	_update = xinsert(tls, *(*uintptr)(unsafe.Pointer(_rootp)), _key, _compar, _ret)
	if _update == 0 {
		goto _2
	}

	*(*uintptr)(unsafe.Pointer(_rootp)) = _update
_2:
	return *(*uintptr)(unsafe.Pointer(_ret))
}

// Xtwalk is defined at tsearch_avl.c:201:6
func Xtwalk(tls TLS, _root uintptr /* *void */, _action uintptr /* *func(TLS, uintptr, int32, int32) */) {
	xwalk(tls, _root, _action, int32(0))
}

type t753__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t753__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type s2node = struct {
	Fkey    uintptr // *void
	Fleft   uintptr // *Snode
	Fright  uintptr // *Snode
	Fheight int32
}

func fn777(p uintptr) func(TLS, uintptr, uintptr) int32 {
	return *(*func(TLS, uintptr, uintptr) int32)(unsafe.Pointer(&p))
}

// xremove is defined at tsearch_avl.c:122:20
func xremove(tls TLS, _n uintptr /* **Snode */, _k uintptr /* *void */, _cmp uintptr /* *func(TLS, uintptr, uintptr) int32 */, _parent uintptr /* *Snode */) (r uintptr /* *Snode */) {
	var (
		_c int32
		_r uintptr // *Snode
	)
	if *(*uintptr)(unsafe.Pointer(_n)) != 0 {
		goto _1
	}

	return null

_1:
	_c = fn777(_cmp)(tls, _k, *(*uintptr)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_n)))))
	if _c != int32(0) {
		goto _2
	}

	_r = *(*uintptr)(unsafe.Pointer(_n))
	if *(*uintptr)(unsafe.Pointer(_r + 8)) == 0 {
		goto _3
	}

	*(*uintptr)(unsafe.Pointer(_r + 8)) = xremove_rightmost(tls, *(*uintptr)(unsafe.Pointer(_r + 8)), _n)
	*(*uintptr)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_n)) + 8)) = *(*uintptr)(unsafe.Pointer(_r + 8))
	*(*uintptr)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_n)) + 16)) = *(*uintptr)(unsafe.Pointer(_r + 16))
	*(*uintptr)(unsafe.Pointer(_n)) = xbalance(tls, *(*uintptr)(unsafe.Pointer(_n)))
	goto _4

_3:
	*(*uintptr)(unsafe.Pointer(_n)) = *(*uintptr)(unsafe.Pointer(_r + 16))
_4:
	Xfree(tls, _r)
	return _parent

_2:
	if _c >= int32(0) {
		goto _5
	}

	_parent = xremove(tls, *(*uintptr)(unsafe.Pointer(_n))+8, _k, _cmp, *(*uintptr)(unsafe.Pointer(_n)))
	goto _6

_5:
	_parent = xremove(tls, *(*uintptr)(unsafe.Pointer(_n))+16, _k, _cmp, *(*uintptr)(unsafe.Pointer(_n)))
_6:
	if _parent == 0 {
		goto _7
	}

	*(*uintptr)(unsafe.Pointer(_n)) = xbalance(tls, *(*uintptr)(unsafe.Pointer(_n)))
_7:
	return _parent
}

// xfind is defined at tsearch_avl.c:64:20
func xfind(tls TLS, _n uintptr /* *Snode */, _k uintptr /* *void */, _cmp uintptr /* *func(TLS, uintptr, uintptr) int32 */) (r uintptr /* *Snode */) {
	var _c int32

	if _n != 0 {
		goto _1
	}

	return null

_1:
	_c = fn777(_cmp)(tls, _k, *(*uintptr)(unsafe.Pointer(_n)))
	if _c != int32(0) {
		goto _2
	}

	return _n

_2:
	if _c >= int32(0) {
		goto _3
	}

	return xfind(tls, *(*uintptr)(unsafe.Pointer(_n + 8)), _k, _cmp)

	goto _4

_3:
	return xfind(tls, *(*uintptr)(unsafe.Pointer(_n + 16)), _k, _cmp)

_4:
	return r
}

func set778(p *uintptr, v uintptr) uintptr { *p = v; return v }

// xinsert is defined at tsearch_avl.c:80:20
func xinsert(tls TLS, _n uintptr /* *Snode */, _k uintptr /* *void */, _cmp uintptr /* *func(TLS, uintptr, uintptr) int32 */, _found uintptr /* **Snode */) (r uintptr /* *Snode */) {
	var (
		_r uintptr // *Snode
		_c int32
	)
	if _n != 0 {
		goto _1
	}

	_n = Xmalloc(tls, uint64(32))
	if _n == 0 {
		goto _2
	}

	*(*uintptr)(unsafe.Pointer(_n)) = _k
	*(*uintptr)(unsafe.Pointer(_n + 8)) = set778((*uintptr)(unsafe.Pointer(_n+16)), null)
	*(*int32)(unsafe.Pointer(_n + 24)) = int32(1)
_2:
	*(*uintptr)(unsafe.Pointer(_found)) = _n
	return _n

_1:
	_c = fn777(_cmp)(tls, _k, *(*uintptr)(unsafe.Pointer(_n)))
	if _c != int32(0) {
		goto _3
	}

	*(*uintptr)(unsafe.Pointer(_found)) = _n
	return null

_3:
	_r = xinsert(tls, func() uintptr {
		if _c < int32(0) {
			return *(*uintptr)(unsafe.Pointer(_n + 8))
		}
		return *(*uintptr)(unsafe.Pointer(_n + 16))
	}(), _k, _cmp, _found)
	if _r == 0 {
		goto _4
	}

	if _c >= int32(0) {
		goto _5
	}

	*(*uintptr)(unsafe.Pointer(_n + 8)) = _r
	goto _6

_5:
	*(*uintptr)(unsafe.Pointer(_n + 16)) = _r
_6:
	_r = xbalance(tls, _n)
_4:
	return _r
}

type TVISIT = int32

func fn779(p uintptr) func(TLS, uintptr, int32, int32) {
	return *(*func(TLS, uintptr, int32, int32))(unsafe.Pointer(&p))
}

// xwalk is defined at tsearch_avl.c:186:13
func xwalk(tls TLS, _r uintptr /* *Snode */, _action uintptr /* *func(TLS, uintptr, int32, int32) */, _d int32) {
	if _r != 0 {
		goto _1
	}

	return

_1:
	if *(*uintptr)(unsafe.Pointer(_r + 8)) != 0 || *(*uintptr)(unsafe.Pointer(_r + 16)) != 0 {
		goto _2
	}

	fn779(_action)(tls, _r, int32(3), _d)
	goto _3

_2:
	fn779(_action)(tls, _r, int32(0), _d)
	xwalk(tls, *(*uintptr)(unsafe.Pointer(_r + 8)), _action, _d+int32(1))
	fn779(_action)(tls, _r, int32(1), _d)
	xwalk(tls, *(*uintptr)(unsafe.Pointer(_r + 16)), _action, _d+int32(1))
	fn779(_action)(tls, _r, int32(2), _d)
_3:
}

// xremove_rightmost is defined at tsearch_avl.c:112:20
func xremove_rightmost(tls TLS, _n uintptr /* *Snode */, _rightmost uintptr /* **Snode */) (r uintptr /* *Snode */) {
	if *(*uintptr)(unsafe.Pointer(_n + 16)) != 0 {
		goto _1
	}

	*(*uintptr)(unsafe.Pointer(_rightmost)) = _n
	return *(*uintptr)(unsafe.Pointer(_n + 8))

_1:
	*(*uintptr)(unsafe.Pointer(_n + 16)) = xremove_rightmost(tls, *(*uintptr)(unsafe.Pointer(_n + 16)), _rightmost)
	return xbalance(tls, _n)
}

// xbalance is defined at tsearch_avl.c:48:20
func xbalance(tls TLS, _n uintptr /* *Snode */) (r uintptr /* *Snode */) {
	var _d int32

	_d = xdelta(tls, _n)
	if _d >= int32(-1) {
		goto _1
	}

	if xdelta(tls, *(*uintptr)(unsafe.Pointer(_n + 16))) <= int32(0) {
		goto _3
	}

	*(*uintptr)(unsafe.Pointer(_n + 16)) = xrotr(tls, *(*uintptr)(unsafe.Pointer(_n + 16)))
_3:
	return xrotl(tls, _n)

	goto _2

_1:
	if _d <= int32(1) {
		goto _4
	}

	if xdelta(tls, *(*uintptr)(unsafe.Pointer(_n + 8))) >= int32(0) {
		goto _5
	}

	*(*uintptr)(unsafe.Pointer(_n + 8)) = xrotl(tls, *(*uintptr)(unsafe.Pointer(_n + 8)))
_5:
	return xrotr(tls, _n)

_4:
_2:
	xupdateheight(tls, _n)
	return _n
}

// xdelta is defined at tsearch_avl.c:17:12
func xdelta(tls TLS, _n uintptr /* *Snode */) (r int32) {
	return func() int32 {
		if *(*uintptr)(unsafe.Pointer(_n + 8)) != 0 {
			return *(*int32)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_n + 8)) + 24))
		}
		return int32(0)
	}() - func() int32 {
		if *(*uintptr)(unsafe.Pointer(_n + 16)) != 0 {
			return *(*int32)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_n + 16)) + 24))
		}
		return int32(0)
	}()
}

// xrotr is defined at tsearch_avl.c:39:20
func xrotr(tls TLS, _n uintptr /* *Snode */) (r uintptr /* *Snode */) {
	var _l uintptr // *Snode

	_l = *(*uintptr)(unsafe.Pointer(_n + 8))
	*(*uintptr)(unsafe.Pointer(_n + 8)) = *(*uintptr)(unsafe.Pointer(_l + 16))
	*(*uintptr)(unsafe.Pointer(_l + 16)) = _n
	xupdateheight(tls, _n)
	xupdateheight(tls, _l)
	return _l
}

// xrotl is defined at tsearch_avl.c:30:20
func xrotl(tls TLS, _n uintptr /* *Snode */) (r uintptr /* *Snode */) {
	var _r uintptr // *Snode

	_r = *(*uintptr)(unsafe.Pointer(_n + 16))
	*(*uintptr)(unsafe.Pointer(_n + 16)) = *(*uintptr)(unsafe.Pointer(_r + 8))
	*(*uintptr)(unsafe.Pointer(_r + 8)) = _n
	xupdateheight(tls, _n)
	xupdateheight(tls, _r)
	return _r
}

// xupdateheight is defined at tsearch_avl.c:21:13
func xupdateheight(tls TLS, _n uintptr /* *Snode */) {
	*(*int32)(unsafe.Pointer(_n + 24)) = int32(0)
	if *(*uintptr)(unsafe.Pointer(_n + 8)) == 0 || *(*int32)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_n + 8)) + 24)) <= *(*int32)(unsafe.Pointer(_n + 24)) {
		goto _1
	}

	*(*int32)(unsafe.Pointer(_n + 24)) = *(*int32)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_n + 8)) + 24))
_1:
	if *(*uintptr)(unsafe.Pointer(_n + 16)) == 0 || *(*int32)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_n + 16)) + 24)) <= *(*int32)(unsafe.Pointer(_n + 24)) {
		goto _2
	}

	*(*int32)(unsafe.Pointer(_n + 24)) = *(*int32)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_n + 16)) + 24))
_2:
	*(*int32)(unsafe.Pointer(_n + 24))++
}

type t192size_t = uint64

// linking poll.o

// Xpoll is defined at poll.c:8:5
func Xpoll(tls TLS, _fds uintptr /* *Spollfd */, _n uint64, _timeout int32) (r int32) {
	X__assert_fail(tls, ts+0 /* "TODO(ccgo)" */, ts+4252 /* "src/select/poll...." */, int32(11), x780__func__)
	return r
}

type t754__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t754__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t1nfds_t = uint64

type s2pollfd = struct {
	Ffd      int32
	Fevents  int16
	Frevents int16
}

// x1__func__ [5]int8, escapes: true, poll.c:9:1
var x780__func__ = ds + 44528

// linking pselect.o

// Xpselect is defined at pselect.c:8:5
func Xpselect(tls TLS, _n int32, _rfds uintptr /* *Tfd_set = struct{Ffds_bits [16]uint64;} */, _wfds uintptr /* *Tfd_set = struct{Ffds_bits [16]uint64;} */, _efds uintptr /* *Tfd_set = struct{Ffds_bits [16]uint64;} */, _ts uintptr /* *Stimespec */, _mask uintptr /* *Tsigset_t = struct{F__bits [16]uint64;} */) (r int32) {
	esc := MustMalloc(16)
	var (
		_data   = esc // *[2]int64
		_ts_tmp s21timespec
		_       = _ts_tmp
	)
	defer Free(esc)
	*(*[2]int64)(unsafe.Pointer(_data)) = [2]int64{
		0: int64(uint64(_mask)),
		1: int64(8),
	}
	if _ts == 0 {
		goto _1
	}

	_ts_tmp = *(*s21timespec)(unsafe.Pointer(_ts))
_1:
	X__assert_fail(tls, ts+0 /* "TODO(ccgo)" */, ts+4272 /* "src/select/psele..." */, int32(13), x781__func__)
	return r
}

type t755__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t755__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type s21timespec = struct {
	Ftv_sec  int64
	Ftv_nsec int64
}

// x1__func__ [8]int8, escapes: true, pselect.c:9:1
var x781__func__ = ds + 44536

type t5syscall_arg_t = int64

type t35uintptr_t = uint64

type t34time_t = int64

// linking select.o

// Xselect is defined at select.c:9:5
func Xselect(tls TLS, _n int32, _rfds uintptr /* *Tfd_set = struct{Ffds_bits [16]uint64;} */, _wfds uintptr /* *Tfd_set = struct{Ffds_bits [16]uint64;} */, _efds uintptr /* *Tfd_set = struct{Ffds_bits [16]uint64;} */, _tv uintptr /* *Stimeval */) (r int32) {
	return int32(X__syscall_ret(tls, uint64(X__syscall_cp(tls, int64(23), int64(_n), int64(_rfds), int64(_wfds), int64(_efds), int64(_tv), int64(0)))))
}

type t756__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t756__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type s12timeval = struct {
	Ftv_sec  int64
	Ftv_usec int64
}

type t35time_t = int64

type t12suseconds_t = int64

type t6syscall_arg_t = int64

// linking longjmp.o

// linking src/setjmp/x86_64/longjmp.s

// /* Copyright 2011-2012 Nicholas J. Kain, licensed under standard MIT license */
// .global _longjmp
// .global longjmp
// .type _longjmp,@function
// .type longjmp,@function
// _longjmp:
// longjmp:
// 	mov %rsi,%rax           /* val will be longjmp return */
// 	test %rax,%rax
// 	jnz 1f
// 	inc %rax                /* if val==0, val=1 per longjmp semantics */
// 1:
// 	mov (%rdi),%rbx         /* rdi is the jmp_buf, restore regs from it */
// 	mov 8(%rdi),%rbp
// 	mov 16(%rdi),%r12
// 	mov 24(%rdi),%r13
// 	mov 32(%rdi),%r14
// 	mov 40(%rdi),%r15
// 	mov 48(%rdi),%rdx       /* this ends up being the stack pointer */
// 	mov %rdx,%rsp
// 	mov 56(%rdi),%rdx       /* this is the instruction pointer */
// 	jmp *%rdx               /* goto saved address without altering rsp */

// linking setjmp.o

// linking src/setjmp/x86_64/setjmp.s

// /* Copyright 2011-2012 Nicholas J. Kain, licensed under standard MIT license */
// .global __setjmp
// .global _setjmp
// .global setjmp
// .type __setjmp,@function
// .type _setjmp,@function
// .type setjmp,@function
// __setjmp:
// _setjmp:
// setjmp:
// 	mov %rbx,(%rdi)         /* rdi is jmp_buf, move registers onto it */
// 	mov %rbp,8(%rdi)
// 	mov %r12,16(%rdi)
// 	mov %r13,24(%rdi)
// 	mov %r14,32(%rdi)
// 	mov %r15,40(%rdi)
// 	lea 8(%rsp),%rdx        /* this is our rsp WITHOUT current ret addr */
// 	mov %rdx,48(%rdi)
// 	mov (%rsp),%rdx         /* save return addr ptr for new rip */
// 	mov %rdx,56(%rdi)
// 	xor %rax,%rax           /* always return 0 */
// 	ret

// linking block.o

// X__block_all_sigs is defined at block.c:31:6
func X__block_all_sigs(tls TLS, _set uintptr /* *void */) {
	x19__syscall4(tls, int64(14), int64(0), int64(xall_mask), int64(_set), int64(8))
}

// X__block_app_sigs is defined at block.c:36:6
func X__block_app_sigs(tls TLS, _set uintptr /* *void */) {
	x19__syscall4(tls, int64(14), int64(0), int64(xapp_mask), int64(_set), int64(8))
}

// X__restore_sigs is defined at block.c:41:6
func X__restore_sigs(tls TLS, _set uintptr /* *void */) {
	x19__syscall4(tls, int64(14), int64(2), int64(_set), int64(0), int64(8))
}

type t757__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t757__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// x__syscall4 is defined at syscall_arch.h:42:22
func x19__syscall4(tls TLS, _n int64, _a1 int64, _a2 int64, _a3 int64, _a4 int64) (r int64) {
	return X__syscall(tls, _n, _a1, _a2, _a3, _a4, int64(0), int64(0))
}

// xall_mask [1]uint64, escapes: true, block.c:5:28
var xall_mask = ds + 44544

// xapp_mask [1]uint64, escapes: true, block.c:15:28
var xapp_mask = ds + 44552

// linking getitimer.o

// Xgetitimer is defined at getitimer.c:4:5
func Xgetitimer(tls TLS, _which int32, _old uintptr /* *Sitimerval */) (r int32) {
	return int32(X__syscall_ret(tls, uint64(x31__syscall2(tls, int64(36), int64(_which), int64(_old)))))
}

type t758__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t758__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type Sitimerval = struct {
	Fit_interval s13timeval
	Fit_value    s13timeval
}

// x__syscall2 is defined at syscall_arch.h:24:22
func x31__syscall2(tls TLS, _n int64, _a1 int64, _a2 int64) (r int64) {
	return X__syscall(tls, _n, _a1, _a2, int64(0), int64(0), int64(0), int64(0))
}

type s13timeval = struct {
	Ftv_sec  int64
	Ftv_usec int64
}

type t36time_t = int64

type t13suseconds_t = int64

// linking kill.o

// Xkill is defined at kill.c:4:5
func Xkill(tls TLS, _pid int32, _sig int32) (r int32) {
	return int32(X__syscall_ret(tls, uint64(x32__syscall2(tls, int64(62), int64(_pid), int64(_sig)))))
}

type t759__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t759__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t40pid_t = int32

// x__syscall2 is defined at syscall_arch.h:24:22
func x32__syscall2(tls TLS, _n int64, _a1 int64, _a2 int64) (r int64) {
	return X__syscall(tls, _n, _a1, _a2, int64(0), int64(0), int64(0), int64(0))
}

// linking killpg.o

// Xkillpg is defined at killpg.c:4:5
func Xkillpg(tls TLS, _pgid int32, _sig int32) (r int32) {
	if _pgid >= int32(0) {
		goto _1
	}

	*(*int32)(unsafe.Pointer(X__errno_location(tls))) = int32(22)
	return int32(-1)

_1:
	return Xkill(tls, -_pgid, _sig)
}

type t760__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t760__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t41pid_t = int32

// linking psiginfo.o

// Xpsiginfo is defined at psiginfo.c:5:6
func Xpsiginfo(tls TLS, _si uintptr /* *Tsiginfo_t = struct{Fsi_signo i...uint32;};F int64; _ [104]byte};} */, _msg uintptr /* *int8 */) {
	var _s uintptr // *int8

	_s = Xstrsignal(tls, *(*int32)(unsafe.Pointer(_si)))
	if _msg == 0 {
		goto _1
	}

	Xfprintf(tls, *(*uintptr)(unsafe.Pointer(Xstderr)), ts+4296 /* "%s: %s\n" */, _msg, _s)
	goto _2

_1:
	Xfprintf(tls, *(*uintptr)(unsafe.Pointer(Xstderr)), ts+4304 /* "%s\n" */, _s)
_2:
}

type t761__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t761__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t42pid_t = int32

type t19uid_t = uint32

type u5sigval = struct {
	Fsival_int [0]int32
	Fsival_ptr [0]uintptr // *void
	F          int64
}

type t2clock_t = int64

// linking psignal.o

// Xpsignal is defined at psignal.c:5:6
func Xpsignal(tls TLS, _sig int32, _msg uintptr /* *int8 */) {
	var _s uintptr // *int8

	_s = Xstrsignal(tls, _sig)
	if _msg == 0 {
		goto _1
	}

	Xfprintf(tls, *(*uintptr)(unsafe.Pointer(Xstderr)), ts+4296 /* "%s: %s\n" */, _msg, _s)
	goto _2

_1:
	Xfprintf(tls, *(*uintptr)(unsafe.Pointer(Xstderr)), ts+4304 /* "%s\n" */, _s)
_2:
}

type t762__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t762__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// linking raise.o

// Xraise is defined at raise.c:6:5
func Xraise(tls TLS, _sig int32) (r int32) {
	esc := MustMalloc(128)
	var (
		_tid int32
		_ret int32
		_set = esc // *Tsigset_t = struct{F__bits [16]uint64;}
	)
	defer Free(esc)
	X__block_app_sigs(tls, _set)
	_tid = int32(x6__syscall0(tls, int64(186)))
	_ret = int32(X__syscall_ret(tls, uint64(x33__syscall2(tls, int64(200), int64(_tid), int64(_sig)))))
	X__restore_sigs(tls, _set)
	return _ret
}

type t763__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t763__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// x__syscall0 is defined at syscall_arch.h:8:22
func x6__syscall0(tls TLS, _n int64) (r int64) {
	return X__syscall(tls, _n, int64(0), int64(0), int64(0), int64(0), int64(0), int64(0))
}

// x__syscall2 is defined at syscall_arch.h:24:22
func x33__syscall2(tls TLS, _n int64, _a1 int64, _a2 int64) (r int64) {
	return X__syscall(tls, _n, _a1, _a2, int64(0), int64(0), int64(0), int64(0))
}

// linking setitimer.o

// Xsetitimer is defined at setitimer.c:4:5
func Xsetitimer(tls TLS, _which int32, _new uintptr /* *Sitimerval */, _old uintptr /* *Sitimerval */) (r int32) {
	return int32(X__syscall_ret(tls, uint64(x38__syscall3(tls, int64(38), int64(_which), int64(_new), int64(_old)))))
}

type t764__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t764__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type s1itimerval = struct {
	Fit_interval s14timeval
	Fit_value    s14timeval
}

// x__syscall3 is defined at syscall_arch.h:33:22
func x38__syscall3(tls TLS, _n int64, _a1 int64, _a2 int64, _a3 int64) (r int64) {
	return X__syscall(tls, _n, _a1, _a2, _a3, int64(0), int64(0), int64(0))
}

type s14timeval = struct {
	Ftv_sec  int64
	Ftv_usec int64
}

type t37time_t = int64

type t14suseconds_t = int64

// linking sigaction.o

// X__get_handler_set is defined at sigaction.c:12:6
func X__get_handler_set(tls TLS, _set uintptr /* *Tsigset_t = struct{F__bits [16]uint64;} */) {
	Xmemcpy(tls, _set, xhandler_set, uint64(8))
}

func fp782(f func(TLS)) uintptr { return *(*uintptr)(unsafe.Pointer(&f)) }

// X__libc_sigaction is defined at sigaction.c:17:5
func X__libc_sigaction(tls TLS, _sig int32, _sa uintptr /* *Ssigaction */, _old uintptr /* *Ssigaction */) (r int32) {
	esc := MustMalloc(72)
	var (
		_ksa     = esc      // *Sk_sigaction
		_ksa_old = esc + 32 // *Sk_sigaction
		_xxx     = esc + 64 // *[1]uint64
		_p       uintptr    // *void
	)
	defer Free(esc)
	if _sa == 0 {
		goto _1
	}

	if uint64(*(*uintptr)(unsafe.Pointer(_sa))) <= uint64(1) {
		goto _2
	}

	xa_or_l(tls, xhandler_set+8*uintptr(uint64(_sig-int32(1))/uint64(64)), int64(uint64(1)<<(uint(uint64(_sig-int32(1))%uint64(64))%64)))
	if *(*int32)(unsafe.Pointer(X__libc + 4)) != 0 || xunmask_done != 0 {
		goto _3
	}

	*(*uint64)(unsafe.Pointer(_xxx)) = uint64(12884901888)
	_p = _xxx
	x20__syscall4(tls, int64(14), int64(1), int64(_p), int64(0), int64(8))
	xunmask_done = int32(1)
_3:
_2:
	*(*uintptr)(unsafe.Pointer(_ksa)) = *(*uintptr)(unsafe.Pointer(_sa))
	*(*uint64)(unsafe.Pointer(_ksa + 8)) = uint64(*(*int32)(unsafe.Pointer(_sa + 136)) | int32(0x4000000))
	*(*uintptr)(unsafe.Pointer(_ksa + 16)) = func() uintptr {
		if *(*int32)(unsafe.Pointer(_sa + 136))&int32(4) != 0 {
			return fp782(X__restore_rt)
		}
		return fp782(X__restore_rt)
	}()
	Xmemcpy(tls, _ksa+24, _sa+8, uint64(8))
_1:
	if X__syscall_ret(tls, uint64(x20__syscall4(tls, int64(13), int64(_sig), int64(func() uintptr {
		if _sa != 0 {
			return _ksa
		}
		return null
	}()), int64(func() uintptr {
		if _old != 0 {
			return _ksa_old
		}
		return null
	}()), int64(8)))) == 0 {
		goto _4
	}

	return int32(-1)

_4:
	if _old == 0 {
		goto _5
	}

	*(*uintptr)(unsafe.Pointer(_old)) = *(*uintptr)(unsafe.Pointer(_ksa_old))
	*(*int32)(unsafe.Pointer(_old + 136)) = int32(*(*uint64)(unsafe.Pointer(_ksa_old + 8)))
	Xmemcpy(tls, _old+8, _ksa_old+24, uint64(8))
_5:
	return int32(0)
}

// X__sigaction is defined at sigaction.c:58:5
func X__sigaction(tls TLS, _sig int32, _sa uintptr /* *Ssigaction */, _old uintptr /* *Ssigaction */) (r int32) {
	if uint32(_sig)-uint32(32) >= uint32(3) && uint32(_sig)-uint32(1) < uint32(64) {
		goto _1
	}

	*(*int32)(unsafe.Pointer(X__errno_location(tls))) = int32(22)
	return int32(-1)

_1:
	return X__libc_sigaction(tls, _sig, _sa, _old)
}

type t765__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t765__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// xhandler_set [1]uint64, escapes: true, sigaction.c:10:22
var xhandler_set = bss + 3896

type s2sigaction = struct {
	F__sa_handler struct {
		Fsa_handler   [0]uintptr
		Fsa_sigaction [0]uintptr
		F             int64
	}
	Fsa_mask     struct{ F__bits [16]uint64 }
	Fsa_flags    int32
	Fsa_restorer uintptr // *func(TLS)
}

type Sk_sigaction = struct {
	Fhandler  uintptr // *func(TLS, int32)
	Fflags    uint64
	Frestorer uintptr // *func(TLS)
	Fmask     [2]uint32
}

type t36uintptr_t = uint64

// xa_or_l is defined at atomic.h:239:20
func xa_or_l(tls TLS, _p uintptr /* *void */, _v int64) {
	goto _1

	xa_or(tls, _p, int32(_v))
	goto _2

_1:
	xa_or_64(tls, _p, uint64(_v))
_2:
}

// xunmask_done int32, escapes: false, sigaction.c:9:12
var xunmask_done int32

// x__syscall4 is defined at syscall_arch.h:42:22
func x20__syscall4(tls TLS, _n int64, _a1 int64, _a2 int64, _a3 int64, _a4 int64) (r int64) {
	return X__syscall(tls, _n, _a1, _a2, _a3, _a4, int64(0), int64(0))
}

type t193size_t = uint64

type t14sigset_t = struct{ F__bits [16]uint64 }

// xa_or is defined at atomic_arch.h:53:20
func xa_or(tls TLS, _p uintptr /* *int32 */, _v int32) {
	X__assert_fail(tls, ts+0 /* "TODO(ccgo)" */, ts+36 /* "arch/x86_64/atom..." */, int32(55), x783__func__)
}

// xa_or_64 is defined at atomic_arch.h:71:20
func xa_or_64(tls TLS, _p uintptr /* *Tuint64_t = uint64 */, _v uint64) {
	a_or_64(_p, _v)
}

// x7__func__ [5]int8, escapes: true, atomic_arch.h:54:1
var x783__func__ = ds + 44560

// linking sigaddset.o

// Xsigaddset is defined at sigaddset.c:4:5
func Xsigaddset(tls TLS, _set uintptr /* *Tsigset_t = struct{F__bits [16]uint64;} */, _sig int32) (r int32) {
	var _s uint32

	_s = uint32(_sig - int32(1))
	if _s < uint32(64) && uint32(_sig)-uint32(32) >= uint32(3) {
		goto _1
	}

	*(*int32)(unsafe.Pointer(X__errno_location(tls))) = int32(22)
	return int32(-1)

_1:
	{
		p := (*uint64)(unsafe.Pointer(_set + 8*uintptr(uint64(_s/uint32(8))/uint64(8))))
		*p = *p | uint64(1)<<(uint(uint64(_s)&uint64(63))%64)
	}
	return int32(0)
}

type t766__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t766__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// linking sigaltstack.o

// Xsigaltstack is defined at sigaltstack.c:5:5
func Xsigaltstack(tls TLS, _ss uintptr /* *Tstack_t = Ssigaltstack */, _old uintptr /* *Tstack_t = Ssigaltstack */) (r int32) {
	if _ss == 0 {
		goto _1
	}

	if *(*uint64)(unsafe.Pointer(_ss + 16)) >= uint64(2048) {
		goto _2
	}

	*(*int32)(unsafe.Pointer(X__errno_location(tls))) = int32(12)
	return int32(-1)

_2:
	if (*(*int32)(unsafe.Pointer(_ss + 8)) & int32(-3)) == 0 {
		goto _3
	}

	*(*int32)(unsafe.Pointer(X__errno_location(tls))) = int32(22)
	return int32(-1)

_3:
_1:
	return int32(X__syscall_ret(tls, uint64(x34__syscall2(tls, int64(131), int64(_ss), int64(_old)))))
}

type t767__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t767__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type Ssigaltstack = struct {
	Fss_sp    uintptr // *void
	Fss_flags int32
	Fss_size  uint64
}

type t194size_t = uint64

// x__syscall2 is defined at syscall_arch.h:24:22
func x34__syscall2(tls TLS, _n int64, _a1 int64, _a2 int64) (r int64) {
	return X__syscall(tls, _n, _a1, _a2, int64(0), int64(0), int64(0), int64(0))
}

// linking sigandset.o

// Xsigandset is defined at sigandset.c:6:5
func Xsigandset(tls TLS, _dest uintptr /* *Tsigset_t = struct{F__bits [16]uint64;} */, _left uintptr /* *Tsigset_t = struct{F__bits [16]uint64;} */, _right uintptr /* *Tsigset_t = struct{F__bits [16]uint64;} */) (r int32) {
	var (
		_i uint64
		_d uintptr // *uint64
		_l uintptr // *uint64
		_r uintptr // *uint64
	)
	_i = uint64(0)
	_d = _dest
	_l = _left
	_r = _right

_1:
	if _i >= uint64(1) {
		goto _3
	}

	*(*uint64)(unsafe.Pointer(_d + 8*uintptr(_i))) = *(*uint64)(unsafe.Pointer(_l + 8*uintptr(_i))) & *(*uint64)(unsafe.Pointer(_r + 8*uintptr(_i)))
	_i++
	goto _1

_3:
	return int32(0)
}

type t768__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t768__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// linking sigdelset.o

// Xsigdelset is defined at sigdelset.c:4:5
func Xsigdelset(tls TLS, _set uintptr /* *Tsigset_t = struct{F__bits [16]uint64;} */, _sig int32) (r int32) {
	var _s uint32

	_s = uint32(_sig - int32(1))
	if _s < uint32(64) && uint32(_sig)-uint32(32) >= uint32(3) {
		goto _1
	}

	*(*int32)(unsafe.Pointer(X__errno_location(tls))) = int32(22)
	return int32(-1)

_1:
	{
		p := (*uint64)(unsafe.Pointer(_set + 8*uintptr(uint64(_s/uint32(8))/uint64(8))))
		*p = *p & ^(uint64(1) << (uint(uint64(_s)&uint64(63)) % 64))
	}
	return int32(0)
}

type t769__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t769__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// linking sigemptyset.o

// Xsigemptyset is defined at sigemptyset.c:4:5
func Xsigemptyset(tls TLS, _set uintptr /* *Tsigset_t = struct{F__bits [16]uint64;} */) (r int32) {
	*(*uint64)(unsafe.Pointer(_set)) = uint64(0)

	goto _1

	*(*uint64)(unsafe.Pointer(_set + 8)) = uint64(0)
_1:
	goto _2

	*(*uint64)(unsafe.Pointer(_set + 16)) = uint64(0)
	*(*uint64)(unsafe.Pointer(_set + 24)) = uint64(0)
_2:
	return int32(0)
}

type t770__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t770__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// linking sigfillset.o

// Xsigfillset is defined at sigfillset.c:4:5
func Xsigfillset(tls TLS, _set uintptr /* *Tsigset_t = struct{F__bits [16]uint64;} */) (r int32) {
	*(*uint64)(unsafe.Pointer(_set)) = uint64(0xfffffffc7fffffff)

	goto _1

	*(*uint64)(unsafe.Pointer(_set + 8)) = uint64(0xffffffffffffffff)
_1:
	return int32(0)
}

type t771__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t771__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// linking sighold.o

// Xsighold is defined at sighold.c:3:5
func Xsighold(tls TLS, _sig int32) (r int32) {
	esc := MustMalloc(128)
	var _mask = esc // *Tsigset_t = struct{F__bits [16]uint64;}
	defer Free(esc)
	Xsigemptyset(tls, _mask)
	if Xsigaddset(tls, _mask, _sig) >= int32(0) {
		goto _1
	}

	return int32(-1)

_1:
	return Xsigprocmask(tls, int32(0), _mask, null)
}

type t772__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t772__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// linking sigignore.o

// Xsigignore is defined at sigignore.c:3:5
func Xsigignore(tls TLS, _sig int32) (r int32) {
	esc := MustMalloc(152)
	var _sa = esc // *Ssigaction
	defer Free(esc)
	Xsigemptyset(tls, _sa+8)
	*(*uintptr)(unsafe.Pointer(_sa)) = uintptr(1)
	*(*int32)(unsafe.Pointer(_sa + 136)) = int32(0)
	return Xsigaction(tls, _sig, _sa, null)
}

type t773__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t773__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type s3sigaction = struct {
	F__sa_handler struct {
		Fsa_handler   [0]uintptr
		Fsa_sigaction [0]uintptr
		F             int64
	}
	Fsa_mask     struct{ F__bits [16]uint64 }
	Fsa_flags    int32
	Fsa_restorer uintptr // *func(TLS)
}

type t15sigset_t = struct{ F__bits [16]uint64 }

// linking siginterrupt.o

// Xsiginterrupt is defined at siginterrupt.c:3:5
func Xsiginterrupt(tls TLS, _sig int32, _flag int32) (r int32) {
	esc := MustMalloc(152)
	var _sa = esc // *Ssigaction
	defer Free(esc)
	Xsigaction(tls, _sig, null, _sa)
	if _flag == 0 {
		goto _1
	}

	{
		p := (*int32)(unsafe.Pointer(_sa + 136))
		*p = *p & int32(-268435457)
	}
	goto _2

_1:
	{
		p := (*int32)(unsafe.Pointer(_sa + 136))
		*p = *p | int32(0x10000000)
	}
_2:
	return Xsigaction(tls, _sig, _sa, null)
}

type t774__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t774__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type s4sigaction = struct {
	F__sa_handler struct {
		Fsa_handler   [0]uintptr
		Fsa_sigaction [0]uintptr
		F             int64
	}
	Fsa_mask     struct{ F__bits [16]uint64 }
	Fsa_flags    int32
	Fsa_restorer uintptr // *func(TLS)
}

type t16sigset_t = struct{ F__bits [16]uint64 }

// linking sigisemptyset.o

// Xsigisemptyset is defined at sigisemptyset.c:5:5
func Xsigisemptyset(tls TLS, _set uintptr /* *Tsigset_t = struct{F__bits [16]uint64;} */) (r int32) {
	var _i uint64

	_i = uint64(0)
_1:
	if _i >= uint64(1) {
		goto _3
	}

	if *(*uint64)(unsafe.Pointer(_set + 8*uintptr(_i))) == 0 {
		goto _4
	}

	return int32(0)

_4:
	_i++
	goto _1

_3:
	return int32(1)
}

type t775__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t775__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t195size_t = uint64

// linking sigismember.o

// Xsigismember is defined at sigismember.c:3:5
func Xsigismember(tls TLS, _set uintptr /* *Tsigset_t = struct{F__bits [16]uint64;} */, _sig int32) (r int32) {
	var _s uint32

	_s = uint32(_sig - int32(1))
	if _s < uint32(64) {
		goto _1
	}

	return int32(0)

_1:
	return bool2int(*(*uint64)(unsafe.Pointer(_set + 8*uintptr(uint64(_s/uint32(8))/uint64(8))))&(uint64(1)<<(uint(uint64(_s)&uint64(63))%64)) != 0)
}

type t776__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t776__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// linking siglongjmp.o

// Xsiglongjmp is defined at siglongjmp.c:7:16
func Xsiglongjmp(tls TLS, _buf uintptr /* [1]struct{F__jb [8]uint64;F__fl uint64;F__ss [16]uint64;} */, _ret int32) {
	X__assert_fail(tls, ts+0 /* "TODO(ccgo)" */, ts+4308 /* "src/signal/siglo..." */, int32(9), x784__func__)
}

type t777__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t777__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type Tsigjmp_buf = [1]struct {
	F__jb [8]uint64
	F__fl uint64
	F__ss [16]uint64
}

type Tjmp_buf = [1]struct {
	F__jb [8]uint64
	F__fl uint64
	F__ss [16]uint64
}

type T__jmp_buf = [8]uint64

// x1__func__ [11]int8, escapes: true, siglongjmp.c:8:1
var x784__func__ = ds + 44568

// linking signal.o

// Xsignal is defined at signal.c:8:6
func Xsignal(tls TLS, _sig int32, _func uintptr /* *func(TLS, int32) */) (r uintptr /* *func(TLS, int32) */) {
	esc := MustMalloc(312)
	var (
		_sa_old = esc       // *Ssigaction
		_sa     = esc + 160 // *Ssigaction
	)
	defer Free(esc)
	*(*uintptr)(unsafe.Pointer(_sa)) = _func
	*(*int32)(unsafe.Pointer(_sa + 136)) = int32(0x10000000)
	if X__sigaction(tls, _sig, _sa, _sa_old) >= int32(0) {
		goto _1
	}

	return uintptr(18446744073709551615)

_1:
	return *(*uintptr)(unsafe.Pointer(_sa_old))
}

type t778__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t778__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type s5sigaction = struct {
	F__sa_handler struct {
		Fsa_handler   [0]uintptr
		Fsa_sigaction [0]uintptr
		F             int64
	}
	Fsa_mask     struct{ F__bits [16]uint64 }
	Fsa_flags    int32
	Fsa_restorer uintptr // *func(TLS)
}

type t17sigset_t = struct{ F__bits [16]uint64 }

// linking sigorset.o

// Xsigorset is defined at sigorset.c:6:5
func Xsigorset(tls TLS, _dest uintptr /* *Tsigset_t = struct{F__bits [16]uint64;} */, _left uintptr /* *Tsigset_t = struct{F__bits [16]uint64;} */, _right uintptr /* *Tsigset_t = struct{F__bits [16]uint64;} */) (r int32) {
	var (
		_i uint64
		_d uintptr // *uint64
		_l uintptr // *uint64
		_r uintptr // *uint64
	)
	_i = uint64(0)
	_d = _dest
	_l = _left
	_r = _right

_1:
	if _i >= uint64(1) {
		goto _3
	}

	*(*uint64)(unsafe.Pointer(_d + 8*uintptr(_i))) = *(*uint64)(unsafe.Pointer(_l + 8*uintptr(_i))) | *(*uint64)(unsafe.Pointer(_r + 8*uintptr(_i)))
	_i++
	goto _1

_3:
	return int32(0)
}

type t779__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t779__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// linking sigpause.o

// Xsigpause is defined at sigpause.c:3:5
func Xsigpause(tls TLS, _sig int32) (r int32) {
	esc := MustMalloc(128)
	var _mask = esc // *Tsigset_t = struct{F__bits [16]uint64;}
	defer Free(esc)
	Xsigprocmask(tls, int32(0), null, _mask)
	Xsigdelset(tls, _mask, _sig)
	return Xsigsuspend(tls, _mask)
}

type t780__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t780__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// linking sigpending.o

// Xsigpending is defined at sigpending.c:4:5
func Xsigpending(tls TLS, _set uintptr /* *Tsigset_t = struct{F__bits [16]uint64;} */) (r int32) {
	return int32(X__syscall_ret(tls, uint64(x35__syscall2(tls, int64(127), int64(_set), int64(8)))))
}

type t781__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t781__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// x__syscall2 is defined at syscall_arch.h:24:22
func x35__syscall2(tls TLS, _n int64, _a1 int64, _a2 int64) (r int64) {
	return X__syscall(tls, _n, _a1, _a2, int64(0), int64(0), int64(0), int64(0))
}

// linking sigprocmask.o

// Xsigprocmask is defined at sigprocmask.c:4:5
func Xsigprocmask(tls TLS, _how int32, _set uintptr /* *Tsigset_t = struct{F__bits [16]uint64;} */, _old uintptr /* *Tsigset_t = struct{F__bits [16]uint64;} */) (r int32) {
	var _r int32

	_r = Xpthread_sigmask(tls, _how, _set, _old)
	if _r != 0 {
		goto _1
	}

	return _r

_1:
	*(*int32)(unsafe.Pointer(X__errno_location(tls))) = _r
	return int32(-1)
}

type t782__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t782__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// linking sigqueue.o

// Xsigqueue is defined at sigqueue.c:7:5
func Xsigqueue(tls TLS, _pid int32, _sig int32, _value struct {
	Fsival_int [0]int32
	Fsival_ptr [0]uintptr // *void
	F          int64
}) (r int32) {
	esc := MustMalloc(256)
	var (
		_si  = esc       // *Tsiginfo_t = struct{Fsi_signo in...uint32;};F int64; _ [104]byte};}
		_set = esc + 128 // *Tsigset_t = struct{F__bits [16]uint64;}
		_r   int32
	)
	defer Free(esc)
	Xmemset(tls, _si, int32(0), uint64(128))
	*(*int32)(unsafe.Pointer(_si)) = _sig
	*(*int32)(unsafe.Pointer(_si + 8)) = int32(-1)
	*(*u6sigval)(unsafe.Pointer(_si + 16 + 8)) = _value
	*(*uint32)(unsafe.Pointer(_si + 16 + 4)) = Xgetuid(tls)
	X__block_app_sigs(tls, _set)
	*(*int32)(unsafe.Pointer(_si + 16)) = Xgetpid(tls)
	_r = int32(X__syscall_ret(tls, uint64(x39__syscall3(tls, int64(129), int64(_pid), int64(_sig), int64(_si)))))
	X__restore_sigs(tls, _set)
	return _r
}

type t783__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t783__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t43pid_t = int32

type u6sigval = struct {
	Fsival_int [0]int32
	Fsival_ptr [0]uintptr // *void
	F          int64
}

type t20uid_t = uint32

type t3clock_t = int64

// x__syscall3 is defined at syscall_arch.h:33:22
func x39__syscall3(tls TLS, _n int64, _a1 int64, _a2 int64, _a3 int64) (r int64) {
	return X__syscall(tls, _n, _a1, _a2, _a3, int64(0), int64(0), int64(0))
}

type t196size_t = uint64

// linking sigrelse.o

// Xsigrelse is defined at sigrelse.c:3:5
func Xsigrelse(tls TLS, _sig int32) (r int32) {
	esc := MustMalloc(128)
	var _mask = esc // *Tsigset_t = struct{F__bits [16]uint64;}
	defer Free(esc)
	Xsigemptyset(tls, _mask)
	if Xsigaddset(tls, _mask, _sig) >= int32(0) {
		goto _1
	}

	return int32(-1)

_1:
	return Xsigprocmask(tls, int32(1), _mask, null)
}

type t784__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t784__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// linking sigrtmax.o

// X__libc_current_sigrtmax is defined at sigrtmax.c:3:5
func X__libc_current_sigrtmax(tls TLS) (r int32) {
	return int32(64)
}

type t785__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t785__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// linking sigrtmin.o

// X__libc_current_sigrtmin is defined at sigrtmin.c:3:5
func X__libc_current_sigrtmin(tls TLS) (r int32) {
	return int32(35)
}

type t786__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t786__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// linking sigset.o

// Xsigset is defined at sigset.c:3:6
func Xsigset(tls TLS, _sig int32, _handler uintptr /* *func(TLS, int32) */) (r uintptr /* *func(TLS, int32) */) {
	esc := MustMalloc(448)
	var (
		_sa     = esc       // *Ssigaction
		_sa_old = esc + 160 // *Ssigaction
		_mask   = esc + 320 // *Tsigset_t = struct{F__bits [16]uint64;}
	)
	defer Free(esc)
	Xsigemptyset(tls, _mask)
	if Xsigaddset(tls, _mask, _sig) >= int32(0) {
		goto _1
	}

	return uintptr(18446744073709551615)

_1:
	if _handler != uintptr(2) {
		goto _2
	}

	if Xsigaction(tls, _sig, null, _sa_old) >= int32(0) {
		goto _4
	}

	return uintptr(18446744073709551615)

_4:
	if Xsigprocmask(tls, int32(0), _mask, _mask) >= int32(0) {
		goto _5
	}

	return uintptr(18446744073709551615)

_5:
	goto _3

_2:
	*(*uintptr)(unsafe.Pointer(_sa)) = _handler
	*(*int32)(unsafe.Pointer(_sa + 136)) = int32(0)
	Xsigemptyset(tls, _sa+8)
	if Xsigaction(tls, _sig, _sa, _sa_old) >= int32(0) {
		goto _6
	}

	return uintptr(18446744073709551615)

_6:
	if Xsigprocmask(tls, int32(1), _mask, _mask) >= int32(0) {
		goto _7
	}

	return uintptr(18446744073709551615)

_7:
_3:
	if Xsigismember(tls, _mask, _sig) != 0 {
		return uintptr(2)
	}

	return *(*uintptr)(unsafe.Pointer(_sa_old))
}

type t787__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t787__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type s6sigaction = struct {
	F__sa_handler struct {
		Fsa_handler   [0]uintptr
		Fsa_sigaction [0]uintptr
		F             int64
	}
	Fsa_mask     struct{ F__bits [16]uint64 }
	Fsa_flags    int32
	Fsa_restorer uintptr // *func(TLS)
}

type t18sigset_t = struct{ F__bits [16]uint64 }

// linking sigsetjmp_tail.o

// X__sigsetjmp_tail is defined at sigsetjmp_tail.c:6:5
func X__sigsetjmp_tail(tls TLS, _jb uintptr /* [1]struct{F__jb [8]uint64;F__fl uint64;F__ss [16]uint64;} */, _ret int32) (r int32) {
	var _p uintptr // *void

	_p = _jb + 72
	x21__syscall4(tls, int64(14), int64(2), int64(func() uintptr {
		if _ret != 0 {
			return _p
		}
		return null
	}()), int64(func() uintptr {
		if _ret != 0 {
			return null
		}
		return _p
	}()), int64(8))
	return _ret
}

type t788__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t788__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t1sigjmp_buf = [1]struct {
	F__jb [8]uint64
	F__fl uint64
	F__ss [16]uint64
}

type t1jmp_buf = [1]struct {
	F__jb [8]uint64
	F__fl uint64
	F__ss [16]uint64
}

type t1__jmp_buf = [8]uint64

// x__syscall4 is defined at syscall_arch.h:42:22
func x21__syscall4(tls TLS, _n int64, _a1 int64, _a2 int64, _a3 int64, _a4 int64) (r int64) {
	return X__syscall(tls, _n, _a1, _a2, _a3, _a4, int64(0), int64(0))
}

// linking sigsuspend.o

// Xsigsuspend is defined at sigsuspend.c:6:5
func Xsigsuspend(tls TLS, _mask uintptr /* *Tsigset_t = struct{F__bits [16]uint64;} */) (r int32) {
	X__assert_fail(tls, ts+0 /* "TODO(ccgo)" */, ts+4332 /* "src/signal/sigsu..." */, int32(8), x785__func__)
	return r
}

type t789__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t789__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// x1__func__ [11]int8, escapes: true, sigsuspend.c:7:1
var x785__func__ = ds + 44584

// linking sigtimedwait.o

// Xsigtimedwait is defined at sigtimedwait.c:7:5
func Xsigtimedwait(tls TLS, _mask uintptr /* *Tsigset_t = struct{F__bits [16]uint64;} */, _si uintptr /* *Tsiginfo_t = struct{Fsi_signo i...uint32;};F int64; _ [104]byte};} */, _timeout uintptr /* *Stimespec */) (r int32) {
	var _ret int32

	X__assert_fail(tls, ts+0 /* "TODO(ccgo)" */, ts+4356 /* "src/signal/sigti..." */, int32(10), x786__func__)
	X__assert_fail(tls, ts+0 /* "TODO(ccgo)" */, ts+4356 /* "src/signal/sigti..." */, int32(12), x786__func__)
_1:
	if _ret >= int32(0) || *(*int32)(unsafe.Pointer(X__errno_location(tls))) != int32(4) {
		goto _2
	}

	goto _1

_2:
	return _ret
}

type t790__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t790__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t44pid_t = int32

type t21uid_t = uint32

type u7sigval = struct {
	Fsival_int [0]int32
	Fsival_ptr [0]uintptr // *void
	F          int64
}

type t4clock_t = int64

type s22timespec = struct {
	Ftv_sec  int64
	Ftv_nsec int64
}

// x1__func__ [13]int8, escapes: true, sigtimedwait.c:8:1
var x786__func__ = ds + 44600

type t38time_t = int64

// linking sigwait.o

// Xsigwait is defined at sigwait.c:3:5
func Xsigwait(tls TLS, _mask uintptr /* *Tsigset_t = struct{F__bits [16]uint64;} */, _sig uintptr /* *int32 */) (r int32) {
	esc := MustMalloc(128)
	var _si = esc // *Tsiginfo_t = struct{Fsi_signo in...uint32;};F int64; _ [104]byte};}
	defer Free(esc)
	if Xsigtimedwait(tls, _mask, _si, null) >= int32(0) {
		goto _1
	}

	return int32(-1)

_1:
	*(*int32)(unsafe.Pointer(_sig)) = *(*int32)(unsafe.Pointer(_si))
	return int32(0)
}

type t791__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t791__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t45pid_t = int32

type t22uid_t = uint32

type u8sigval = struct {
	Fsival_int [0]int32
	Fsival_ptr [0]uintptr // *void
	F          int64
}

type t5clock_t = int64

// linking sigwaitinfo.o

// Xsigwaitinfo is defined at sigwaitinfo.c:3:5
func Xsigwaitinfo(tls TLS, _mask uintptr /* *Tsigset_t = struct{F__bits [16]uint64;} */, _si uintptr /* *Tsiginfo_t = struct{Fsi_signo i...uint32;};F int64; _ [104]byte};} */) (r int32) {
	return Xsigtimedwait(tls, _mask, _si, null)
}

type t792__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t792__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t46pid_t = int32

type t23uid_t = uint32

type u9sigval = struct {
	Fsival_int [0]int32
	Fsival_ptr [0]uintptr // *void
	F          int64
}

type t6clock_t = int64

// linking restore.o

// linking src/signal/x86_64/restore.s

// 	nop
// .global __restore_rt
// .type __restore_rt,@function
// __restore_rt:
// 	mov $15, %rax
// 	syscall
// .size __restore_rt,.-__restore_rt

// linking sigsetjmp.o

// linking src/signal/x86_64/sigsetjmp.s

// .global sigsetjmp
// .global __sigsetjmp
// .type sigsetjmp,@function
// .type __sigsetjmp,@function
// sigsetjmp:
// __sigsetjmp:
// 	test %esi,%esi
// 	jz 1f
//
// 	popq 64(%rdi)
// 	mov %rbx,72+8(%rdi)
// 	mov %rdi,%rbx
//
// 	call setjmp@PLT
//
// 	pushq 64(%rbx)
// 	mov %rbx,%rdi
// 	mov %eax,%esi
// 	mov 72+8(%rbx),%rbx
//
// .hidden __sigsetjmp_tail
// 	jmp __sigsetjmp_tail
//
// 1:	jmp setjmp@PLT

// linking __xstat.o

// X__fxstat is defined at __xstat.c:4:5
func X__fxstat(tls TLS, _ver int32, _fd int32, _buf uintptr /* *Sstat */) (r int32) {
	return Xfstat(tls, _fd, _buf)
}

// X__fxstatat is defined at __xstat.c:9:5
func X__fxstatat(tls TLS, _ver int32, _fd int32, _path uintptr /* *int8 */, _buf uintptr /* *Sstat */, _flag int32) (r int32) {
	return Xfstatat(tls, _fd, _path, _buf, _flag)
}

// X__lxstat is defined at __xstat.c:14:5
func X__lxstat(tls TLS, _ver int32, _path uintptr /* *int8 */, _buf uintptr /* *Sstat */) (r int32) {
	return Xlstat(tls, _path, _buf)
}

// X__xstat is defined at __xstat.c:19:5
func X__xstat(tls TLS, _ver int32, _path uintptr /* *int8 */, _buf uintptr /* *Sstat */) (r int32) {
	return Xstat(tls, _path, _buf)
}

// X__xmknod is defined at __xstat.c:29:5
func X__xmknod(tls TLS, _ver int32, _path uintptr /* *int8 */, _mode uint32, _dev uintptr /* *Tdev_t = uint64 */) (r int32) {
	return Xmknod(tls, _path, _mode, *(*uint64)(unsafe.Pointer(_dev)))
}

// X__xmknodat is defined at __xstat.c:34:5
func X__xmknodat(tls TLS, _ver int32, _fd int32, _path uintptr /* *int8 */, _mode uint32, _dev uintptr /* *Tdev_t = uint64 */) (r int32) {
	return Xmknodat(tls, _fd, _path, _mode, *(*uint64)(unsafe.Pointer(_dev)))
}

type t793__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t793__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type s6stat = struct {
	Fst_dev     uint64
	Fst_ino     uint64
	Fst_nlink   uint64
	Fst_mode    uint32
	Fst_uid     uint32
	Fst_gid     uint32
	F__pad0     uint32
	Fst_rdev    uint64
	Fst_size    int64
	Fst_blksize int64
	Fst_blocks  int64
	Fst_atim    s23timespec
	Fst_mtim    s23timespec
	Fst_ctim    s23timespec
	F__unused   [3]int64
}

type t19mode_t = uint32

type t6dev_t = uint64

type t12ino_t = uint64

type t6nlink_t = uint64

type t24uid_t = uint32

type t25gid_t = uint32

type t34off_t = int64

type t6blksize_t = int64

type t6blkcnt_t = int64

type s23timespec = struct {
	Ftv_sec  int64
	Ftv_nsec int64
}

type t39time_t = int64

// linking chmod.o

// Xchmod is defined at chmod.c:5:5
func Xchmod(tls TLS, _path uintptr /* *int8 */, _mode uint32) (r int32) {
	return int32(X__syscall_ret(tls, uint64(x36__syscall2(tls, int64(90), int64(_path), int64(_mode)))))
}

type t794__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t794__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t20mode_t = uint32

// x__syscall2 is defined at syscall_arch.h:24:22
func x36__syscall2(tls TLS, _n int64, _a1 int64, _a2 int64) (r int64) {
	return X__syscall(tls, _n, _a1, _a2, int64(0), int64(0), int64(0), int64(0))
}

// linking fchmod.o

// Xfchmod is defined at fchmod.c:8:5
func Xfchmod(tls TLS, _fd int32, _mode uint32) (r int32) {
	esc := MustMalloc(27)
	var (
		_ret int32
		_buf = esc // *[27]int8
	)
	defer Free(esc)
	_ret = int32(x37__syscall2(tls, int64(91), int64(_fd), int64(_mode)))
	if _ret == int32(-9) && x37__syscall2(tls, int64(72), int64(_fd), int64(1)) >= int64(0) {
		goto _1
	}

	return int32(X__syscall_ret(tls, uint64(_ret)))

_1:
	X__procfdname(tls, _buf, uint32(_fd))
	return int32(X__syscall_ret(tls, uint64(x37__syscall2(tls, int64(90), int64(_buf), int64(_mode)))))
}

type t795__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t795__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t21mode_t = uint32

// x__syscall2 is defined at syscall_arch.h:24:22
func x37__syscall2(tls TLS, _n int64, _a1 int64, _a2 int64) (r int64) {
	return X__syscall(tls, _n, _a1, _a2, int64(0), int64(0), int64(0), int64(0))
}

// linking fchmodat.o

func set787(p *int32, v int32) int32 { *p = v; return v }

// Xfchmodat is defined at fchmodat.c:8:5
func Xfchmodat(tls TLS, _fd int32, _path uintptr /* *int8 */, _mode uint32, _flag int32) (r int32) {
	esc := MustMalloc(171)
	var (
		_st   = esc // *Sstat
		_ret  int32
		_fd2  int32
		_proc = esc + 144 // *[27]int8
	)
	defer Free(esc)
	if _flag != 0 {
		goto _1
	}

	return int32(X__syscall_ret(tls, uint64(x22__syscall4(tls, int64(268), int64(_fd), int64(_path), int64(_mode), int64(_flag)))))

_1:
	if _flag == int32(0x100) {
		goto _2
	}

	return int32(X__syscall_ret(tls, uint64(18446744073709551594)))

_2:
	if set787(&_ret, int32(x22__syscall4(tls, int64(262), int64(_fd), int64(_path), int64(_st), int64(_flag)))) == 0 {
		goto _3
	}

	return int32(X__syscall_ret(tls, uint64(_ret)))

_3:
	if *(*uint32)(unsafe.Pointer(_st + 24))&uint32(0170000) != uint32(0120000) {
		goto _4
	}

	return int32(X__syscall_ret(tls, uint64(18446744073709551521)))

_4:
	if set787(&_fd2, int32(x40__syscall3(tls, int64(257), int64(_fd), int64(_path), int64(2752768)))) >= int32(0) {
		goto _5
	}

	if _fd2 != int32(-40) {
		goto _6
	}

	return int32(X__syscall_ret(tls, uint64(18446744073709551521)))

_6:
	return int32(X__syscall_ret(tls, uint64(_fd2)))

_5:
	X__procfdname(tls, _proc, uint32(_fd2))
	_ret = int32(x22__syscall4(tls, int64(262), int64(-100), int64(_proc), int64(_st), int64(0)))
	if _ret != 0 {
		goto _7
	}

	if *(*uint32)(unsafe.Pointer(_st + 24))&uint32(0170000) != uint32(0120000) {
		goto _8
	}

	_ret = int32(-95)
	goto _9

_8:
	_ret = int32(x40__syscall3(tls, int64(268), int64(-100), int64(_proc), int64(_mode)))
_9:
_7:
	x30__syscall1(tls, int64(3), int64(_fd2))
	return int32(X__syscall_ret(tls, uint64(_ret)))
}

type t796__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t796__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t22mode_t = uint32

type s7stat = struct {
	Fst_dev     uint64
	Fst_ino     uint64
	Fst_nlink   uint64
	Fst_mode    uint32
	Fst_uid     uint32
	Fst_gid     uint32
	F__pad0     uint32
	Fst_rdev    uint64
	Fst_size    int64
	Fst_blksize int64
	Fst_blocks  int64
	Fst_atim    s24timespec
	Fst_mtim    s24timespec
	Fst_ctim    s24timespec
	F__unused   [3]int64
}

// x__syscall4 is defined at syscall_arch.h:42:22
func x22__syscall4(tls TLS, _n int64, _a1 int64, _a2 int64, _a3 int64, _a4 int64) (r int64) {
	return X__syscall(tls, _n, _a1, _a2, _a3, _a4, int64(0), int64(0))
}

// x__syscall3 is defined at syscall_arch.h:33:22
func x40__syscall3(tls TLS, _n int64, _a1 int64, _a2 int64, _a3 int64) (r int64) {
	return X__syscall(tls, _n, _a1, _a2, _a3, int64(0), int64(0), int64(0))
}

// x__syscall1 is defined at syscall_arch.h:16:22
func x30__syscall1(tls TLS, _n int64, _a1 int64) (r int64) {
	return X__syscall(tls, _n, _a1, int64(0), int64(0), int64(0), int64(0), int64(0))
}

type t7dev_t = uint64

type t13ino_t = uint64

type t7nlink_t = uint64

type t25uid_t = uint32

type t26gid_t = uint32

type t35off_t = int64

type t7blksize_t = int64

type t7blkcnt_t = int64

type s24timespec = struct {
	Ftv_sec  int64
	Ftv_nsec int64
}

type t40time_t = int64

// linking fstat.o

// Xfstat is defined at fstat.c:9:5
func Xfstat(tls TLS, _fd int32, _st uintptr /* *Sstat */) (r int32) {
	esc := MustMalloc(27)
	var (
		_ret int32
		_buf = esc // *[27]int8
	)
	defer Free(esc)
	_ret = int32(x38__syscall2(tls, int64(5), int64(_fd), int64(_st)))
	if _ret == int32(-9) && x38__syscall2(tls, int64(72), int64(_fd), int64(1)) >= int64(0) {
		goto _1
	}

	return int32(X__syscall_ret(tls, uint64(_ret)))

_1:
	X__procfdname(tls, _buf, uint32(_fd))
	return int32(X__syscall_ret(tls, uint64(x38__syscall2(tls, int64(4), int64(_buf), int64(_st)))))
}

type t797__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t797__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type s8stat = struct {
	Fst_dev     uint64
	Fst_ino     uint64
	Fst_nlink   uint64
	Fst_mode    uint32
	Fst_uid     uint32
	Fst_gid     uint32
	F__pad0     uint32
	Fst_rdev    uint64
	Fst_size    int64
	Fst_blksize int64
	Fst_blocks  int64
	Fst_atim    s25timespec
	Fst_mtim    s25timespec
	Fst_ctim    s25timespec
	F__unused   [3]int64
}

// x__syscall2 is defined at syscall_arch.h:24:22
func x38__syscall2(tls TLS, _n int64, _a1 int64, _a2 int64) (r int64) {
	return X__syscall(tls, _n, _a1, _a2, int64(0), int64(0), int64(0), int64(0))
}

type t8dev_t = uint64

type t14ino_t = uint64

type t8nlink_t = uint64

type t23mode_t = uint32

type t26uid_t = uint32

type t27gid_t = uint32

type t36off_t = int64

type t8blksize_t = int64

type t8blkcnt_t = int64

type s25timespec = struct {
	Ftv_sec  int64
	Ftv_nsec int64
}

type t41time_t = int64

// linking fstatat.o

// Xfstatat is defined at fstatat.c:5:5
func Xfstatat(tls TLS, _fd int32, _path uintptr /* *int8 */, _buf uintptr /* *Sstat */, _flag int32) (r int32) {
	return int32(X__syscall_ret(tls, uint64(x23__syscall4(tls, int64(262), int64(_fd), int64(_path), int64(_buf), int64(_flag)))))
}

type t798__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t798__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type s9stat = struct {
	Fst_dev     uint64
	Fst_ino     uint64
	Fst_nlink   uint64
	Fst_mode    uint32
	Fst_uid     uint32
	Fst_gid     uint32
	F__pad0     uint32
	Fst_rdev    uint64
	Fst_size    int64
	Fst_blksize int64
	Fst_blocks  int64
	Fst_atim    s26timespec
	Fst_mtim    s26timespec
	Fst_ctim    s26timespec
	F__unused   [3]int64
}

// x__syscall4 is defined at syscall_arch.h:42:22
func x23__syscall4(tls TLS, _n int64, _a1 int64, _a2 int64, _a3 int64, _a4 int64) (r int64) {
	return X__syscall(tls, _n, _a1, _a2, _a3, _a4, int64(0), int64(0))
}

type t9dev_t = uint64

type t15ino_t = uint64

type t9nlink_t = uint64

type t24mode_t = uint32

type t27uid_t = uint32

type t28gid_t = uint32

type t37off_t = int64

type t9blksize_t = int64

type t9blkcnt_t = int64

type s26timespec = struct {
	Ftv_sec  int64
	Ftv_nsec int64
}

type t42time_t = int64

// linking futimens.o

// Xfutimens is defined at futimens.c:3:5
func Xfutimens(tls TLS, _fd int32, _times uintptr /* [2]Stimespec */) (r int32) {
	return Xutimensat(tls, _fd, null, _times, int32(0))
}

type t799__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t799__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type s27timespec = struct {
	Ftv_sec  int64
	Ftv_nsec int64
}

type t43time_t = int64

// linking futimesat.o

// X__futimesat is defined at futimesat.c:8:5
func X__futimesat(tls TLS, _dirfd int32, _pathname uintptr /* *int8 */, _times uintptr /* [2]Stimeval */) (r int32) {
	esc := MustMalloc(32)
	var (
		_ts = esc // *[2]Stimespec
		_i  int32
	)
	defer Free(esc)
	if _times == 0 {
		goto _1
	}

	_i = int32(0)
_2:
	if _i >= int32(2) {
		goto _4
	}

	if uint64(*(*int64)(unsafe.Pointer((_times + 16*uintptr(_i)) + 8))) < uint64(1000000) {
		goto _5
	}

	return int32(X__syscall_ret(tls, uint64(18446744073709551594)))

_5:
	*(*int64)(unsafe.Pointer(_ts + 16*uintptr(_i))) = *(*int64)(unsafe.Pointer(_times + 16*uintptr(_i)))
	*(*int64)(unsafe.Pointer((_ts + 16*uintptr(_i)) + 8)) = *(*int64)(unsafe.Pointer((_times + 16*uintptr(_i)) + 8)) * int64(1000)
	_i++
	goto _2

_4:
_1:
	return Xutimensat(tls, _dirfd, _pathname, func() uintptr {
		if _times != 0 {
			return _ts
		}
		return null
	}(), int32(0))
}

type t800__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t800__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type s15timeval = struct {
	Ftv_sec  int64
	Ftv_usec int64
}

type s28timespec = struct {
	Ftv_sec  int64
	Ftv_nsec int64
}

type t15suseconds_t = int64

type t44time_t = int64

// linking lchmod.o

// Xlchmod is defined at lchmod.c:5:5
func Xlchmod(tls TLS, _path uintptr /* *int8 */, _mode uint32) (r int32) {
	return Xfchmodat(tls, int32(-100), _path, _mode, int32(0x100))
}

type t801__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t801__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t25mode_t = uint32

// linking lstat.o

// Xlstat is defined at lstat.c:6:5
func Xlstat(tls TLS, _path uintptr /* *int8 */, _buf uintptr /* *Sstat */) (r int32) {
	return int32(X__syscall_ret(tls, uint64(x39__syscall2(tls, int64(6), int64(_path), int64(_buf)))))
}

type t802__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t802__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type s10stat = struct {
	Fst_dev     uint64
	Fst_ino     uint64
	Fst_nlink   uint64
	Fst_mode    uint32
	Fst_uid     uint32
	Fst_gid     uint32
	F__pad0     uint32
	Fst_rdev    uint64
	Fst_size    int64
	Fst_blksize int64
	Fst_blocks  int64
	Fst_atim    s29timespec
	Fst_mtim    s29timespec
	Fst_ctim    s29timespec
	F__unused   [3]int64
}

// x__syscall2 is defined at syscall_arch.h:24:22
func x39__syscall2(tls TLS, _n int64, _a1 int64, _a2 int64) (r int64) {
	return X__syscall(tls, _n, _a1, _a2, int64(0), int64(0), int64(0), int64(0))
}

type t10dev_t = uint64

type t16ino_t = uint64

type t10nlink_t = uint64

type t26mode_t = uint32

type t28uid_t = uint32

type t29gid_t = uint32

type t38off_t = int64

type t10blksize_t = int64

type t10blkcnt_t = int64

type s29timespec = struct {
	Ftv_sec  int64
	Ftv_nsec int64
}

type t45time_t = int64

// linking mkdir.o

// Xmkdir is defined at mkdir.c:5:5
func Xmkdir(tls TLS, _path uintptr /* *int8 */, _mode uint32) (r int32) {
	return int32(X__syscall_ret(tls, uint64(x40__syscall2(tls, int64(83), int64(_path), int64(_mode)))))
}

type t803__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t803__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t27mode_t = uint32

// x__syscall2 is defined at syscall_arch.h:24:22
func x40__syscall2(tls TLS, _n int64, _a1 int64, _a2 int64) (r int64) {
	return X__syscall(tls, _n, _a1, _a2, int64(0), int64(0), int64(0), int64(0))
}

// linking mkdirat.o

// Xmkdirat is defined at mkdirat.c:4:5
func Xmkdirat(tls TLS, _fd int32, _path uintptr /* *int8 */, _mode uint32) (r int32) {
	return int32(X__syscall_ret(tls, uint64(x41__syscall3(tls, int64(258), int64(_fd), int64(_path), int64(_mode)))))
}

type t804__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t804__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t28mode_t = uint32

// x__syscall3 is defined at syscall_arch.h:33:22
func x41__syscall3(tls TLS, _n int64, _a1 int64, _a2 int64, _a3 int64) (r int64) {
	return X__syscall(tls, _n, _a1, _a2, _a3, int64(0), int64(0), int64(0))
}

// linking mkfifo.o

// Xmkfifo is defined at mkfifo.c:3:5
func Xmkfifo(tls TLS, _path uintptr /* *int8 */, _mode uint32) (r int32) {
	return Xmknod(tls, _path, _mode|uint32(010000), uint64(0))
}

type t805__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t805__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t29mode_t = uint32

type t11dev_t = uint64

// linking mkfifoat.o

// Xmkfifoat is defined at mkfifoat.c:3:5
func Xmkfifoat(tls TLS, _fd int32, _path uintptr /* *int8 */, _mode uint32) (r int32) {
	return Xmknodat(tls, _fd, _path, _mode|uint32(010000), uint64(0))
}

type t806__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t806__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t30mode_t = uint32

type t12dev_t = uint64

// linking mknod.o

// Xmknod is defined at mknod.c:5:5
func Xmknod(tls TLS, _path uintptr /* *int8 */, _mode uint32, _dev uint64) (r int32) {
	return int32(X__syscall_ret(tls, uint64(x42__syscall3(tls, int64(133), int64(_path), int64(_mode), int64(_dev)))))
}

type t807__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t807__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t31mode_t = uint32

type t13dev_t = uint64

// x__syscall3 is defined at syscall_arch.h:33:22
func x42__syscall3(tls TLS, _n int64, _a1 int64, _a2 int64, _a3 int64) (r int64) {
	return X__syscall(tls, _n, _a1, _a2, _a3, int64(0), int64(0), int64(0))
}

// linking mknodat.o

// Xmknodat is defined at mknodat.c:4:5
func Xmknodat(tls TLS, _fd int32, _path uintptr /* *int8 */, _mode uint32, _dev uint64) (r int32) {
	return int32(X__syscall_ret(tls, uint64(x24__syscall4(tls, int64(259), int64(_fd), int64(_path), int64(_mode), int64(_dev)))))
}

type t808__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t808__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t32mode_t = uint32

type t14dev_t = uint64

// x__syscall4 is defined at syscall_arch.h:42:22
func x24__syscall4(tls TLS, _n int64, _a1 int64, _a2 int64, _a3 int64, _a4 int64) (r int64) {
	return X__syscall(tls, _n, _a1, _a2, _a3, _a4, int64(0), int64(0))
}

// linking stat.o

// Xstat is defined at stat.c:6:5
func Xstat(tls TLS, _path uintptr /* *int8 */, _buf uintptr /* *Sstat */) (r int32) {
	return int32(X__syscall_ret(tls, uint64(x41__syscall2(tls, int64(4), int64(_path), int64(_buf)))))
}

type t809__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t809__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type s11stat = struct {
	Fst_dev     uint64
	Fst_ino     uint64
	Fst_nlink   uint64
	Fst_mode    uint32
	Fst_uid     uint32
	Fst_gid     uint32
	F__pad0     uint32
	Fst_rdev    uint64
	Fst_size    int64
	Fst_blksize int64
	Fst_blocks  int64
	Fst_atim    s30timespec
	Fst_mtim    s30timespec
	Fst_ctim    s30timespec
	F__unused   [3]int64
}

// x__syscall2 is defined at syscall_arch.h:24:22
func x41__syscall2(tls TLS, _n int64, _a1 int64, _a2 int64) (r int64) {
	return X__syscall(tls, _n, _a1, _a2, int64(0), int64(0), int64(0), int64(0))
}

type t15dev_t = uint64

type t17ino_t = uint64

type t11nlink_t = uint64

type t33mode_t = uint32

type t29uid_t = uint32

type t30gid_t = uint32

type t39off_t = int64

type t11blksize_t = int64

type t11blkcnt_t = int64

type s30timespec = struct {
	Ftv_sec  int64
	Ftv_nsec int64
}

type t46time_t = int64

// linking statvfs.o

// X__statfs is defined at statvfs.c:6:5
func X__statfs(tls TLS, _path uintptr /* *int8 */, _buf uintptr /* *Sstatfs */) (r int32) {
	var _unnamed1 Sstatfs
	_ = _unnamed1
	*(*Sstatfs)(unsafe.Pointer(_buf)) = Sstatfs{}
	return int32(X__syscall_ret(tls, uint64(x42__syscall2(tls, int64(137), int64(_path), int64(_buf)))))
}

// X__fstatfs is defined at statvfs.c:16:5
func X__fstatfs(tls TLS, _fd int32, _buf uintptr /* *Sstatfs */) (r int32) {
	var _unnamed1 Sstatfs
	_ = _unnamed1
	*(*Sstatfs)(unsafe.Pointer(_buf)) = Sstatfs{}
	return int32(X__syscall_ret(tls, uint64(x42__syscall2(tls, int64(138), int64(_fd), int64(_buf)))))
}

// Xstatvfs is defined at statvfs.c:45:5
func Xstatvfs(tls TLS, _path uintptr /* *int8 */, _buf uintptr /* *Sstatvfs */) (r int32) {
	esc := MustMalloc(120)
	var _kbuf = esc // *Sstatfs
	defer Free(esc)
	if X__statfs(tls, _path, _kbuf) >= int32(0) {
		goto _1
	}

	return int32(-1)

_1:
	xfixup(tls, _buf, _kbuf)
	return int32(0)
}

// Xfstatvfs is defined at statvfs.c:53:5
func Xfstatvfs(tls TLS, _fd int32, _buf uintptr /* *Sstatvfs */) (r int32) {
	esc := MustMalloc(120)
	var _kbuf = esc // *Sstatfs
	defer Free(esc)
	if X__fstatfs(tls, _fd, _kbuf) >= int32(0) {
		goto _1
	}

	return int32(-1)

_1:
	xfixup(tls, _buf, _kbuf)
	return int32(0)
}

type t810__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t810__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type Sstatfs = struct {
	Ff_type    uint64
	Ff_bsize   uint64
	Ff_blocks  uint64
	Ff_bfree   uint64
	Ff_bavail  uint64
	Ff_files   uint64
	Ff_ffree   uint64
	Ff_fsid    struct{ F__val [2]int32 }
	Ff_namelen uint64
	Ff_frsize  uint64
	Ff_flags   uint64
	Ff_spare   [4]uint64
}

// x__syscall2 is defined at syscall_arch.h:24:22
func x42__syscall2(tls TLS, _n int64, _a1 int64, _a2 int64) (r int64) {
	return X__syscall(tls, _n, _a1, _a2, int64(0), int64(0), int64(0), int64(0))
}

type Sstatvfs = struct {
	Ff_bsize    uint64
	Ff_frsize   uint64
	Ff_blocks   uint64
	Ff_bfree    uint64
	Ff_bavail   uint64
	Ff_files    uint64
	Ff_ffree    uint64
	Ff_favail   uint64
	Ff_fsid     uint64
	Ff_flag     uint64
	Ff_namemax  uint64
	F__reserved [6]int32
}

// xfixup is defined at statvfs.c:29:13
func xfixup(tls TLS, _out uintptr /* *Sstatvfs */, _in uintptr /* *Sstatfs */) {
	var _unnamed1 Sstatvfs
	_ = _unnamed1
	*(*Sstatvfs)(unsafe.Pointer(_out)) = Sstatvfs{}
	*(*uint64)(unsafe.Pointer(_out)) = *(*uint64)(unsafe.Pointer(_in + 8))
	*(*uint64)(unsafe.Pointer(_out + 8)) = func() uint64 {
		if *(*uint64)(unsafe.Pointer(_in + 72)) != 0 {
			return *(*uint64)(unsafe.Pointer(_in + 72))
		}
		return *(*uint64)(unsafe.Pointer(_in + 8))
	}()
	*(*uint64)(unsafe.Pointer(_out + 16)) = *(*uint64)(unsafe.Pointer(_in + 16))
	*(*uint64)(unsafe.Pointer(_out + 24)) = *(*uint64)(unsafe.Pointer(_in + 24))
	*(*uint64)(unsafe.Pointer(_out + 32)) = *(*uint64)(unsafe.Pointer(_in + 32))
	*(*uint64)(unsafe.Pointer(_out + 40)) = *(*uint64)(unsafe.Pointer(_in + 40))
	*(*uint64)(unsafe.Pointer(_out + 48)) = *(*uint64)(unsafe.Pointer(_in + 48))
	*(*uint64)(unsafe.Pointer(_out + 56)) = *(*uint64)(unsafe.Pointer(_in + 48))
	*(*uint64)(unsafe.Pointer(_out + 64)) = uint64(*(*int32)(unsafe.Pointer(_in + 56)))
	*(*uint64)(unsafe.Pointer(_out + 72)) = *(*uint64)(unsafe.Pointer(_in + 80))
	*(*uint64)(unsafe.Pointer(_out + 80)) = *(*uint64)(unsafe.Pointer(_in + 64))
}

type Tfsblkcnt_t = uint64

type Tfsfilcnt_t = uint64

type Tfsid_t = struct{ F__val [2]int32 }

// linking umask.o

// Xumask is defined at umask.c:4:8
func Xumask(tls TLS, _mode uint32) (r uint32) {
	return uint32(X__syscall_ret(tls, uint64(x31__syscall1(tls, int64(95), int64(_mode)))))
}

type t811__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t811__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t34mode_t = uint32

// x__syscall1 is defined at syscall_arch.h:16:22
func x31__syscall1(tls TLS, _n int64, _a1 int64) (r int64) {
	return X__syscall(tls, _n, _a1, int64(0), int64(0), int64(0), int64(0), int64(0))
}

// linking utimensat.o

// Xutimensat is defined at utimensat.c:7:5
func Xutimensat(tls TLS, _fd int32, _path uintptr /* *int8 */, _times uintptr /* [2]Stimespec */, _flags int32) (r int32) {
	esc := MustMalloc(32)
	var (
		_r   int32
		_tv  uintptr // *Stimeval
		_tmp = esc   // *[2]Stimeval
		_i   int32
	)
	defer Free(esc)
	_r = int32(x25__syscall4(tls, int64(280), int64(_fd), int64(_path), int64(_times), int64(_flags)))
	if _r == int32(-38) && _flags == 0 {
		goto _1
	}

	return int32(X__syscall_ret(tls, uint64(_r)))

_1:
	_tv = 0
	if _times == 0 {
		goto _2
	}

	_tv = _tmp
	_i = int32(0)
_3:
	if _i >= int32(2) {
		goto _5
	}

	if uint64(*(*int64)(unsafe.Pointer((_times + 16*uintptr(_i)) + 8))) < uint64(1000000000) {
		goto _6
	}

	if *(*int64)(unsafe.Pointer((_times + 16*uintptr(_i)) + 8)) != int64(0x3fffffff) || *(*int64)(unsafe.Pointer((_times + 16*uintptr(int32(1)-_i)) + 8)) != int64(0x3fffffff) {
		goto _7
	}

	_tv = null
	goto _5

_7:
	if *(*int64)(unsafe.Pointer((_times + 16*uintptr(_i)) + 8)) != int64(0x3ffffffe) {
		goto _8
	}

	return int32(X__syscall_ret(tls, uint64(18446744073709551578)))

_8:
	return int32(X__syscall_ret(tls, uint64(18446744073709551594)))

_6:
	*(*int64)(unsafe.Pointer(_tmp + 16*uintptr(_i))) = *(*int64)(unsafe.Pointer(_times + 16*uintptr(_i)))
	*(*int64)(unsafe.Pointer((_tmp + 16*uintptr(_i)) + 8)) = *(*int64)(unsafe.Pointer((_times + 16*uintptr(_i)) + 8)) / int64(1000)
	_i++
	goto _3

_5:
_2:
	_r = int32(x43__syscall3(tls, int64(261), int64(_fd), int64(_path), int64(_tv)))
	if _r == int32(-38) && _fd == int32(-100) {
		goto _9
	}

	return int32(X__syscall_ret(tls, uint64(_r)))

_9:
	_r = int32(x43__syscall2(tls, int64(235), int64(_path), int64(_tv)))
	return int32(X__syscall_ret(tls, uint64(_r)))
}

type t812__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t812__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type s31timespec = struct {
	Ftv_sec  int64
	Ftv_nsec int64
}

type s16timeval = struct {
	Ftv_sec  int64
	Ftv_usec int64
}

// x__syscall4 is defined at syscall_arch.h:42:22
func x25__syscall4(tls TLS, _n int64, _a1 int64, _a2 int64, _a3 int64, _a4 int64) (r int64) {
	return X__syscall(tls, _n, _a1, _a2, _a3, _a4, int64(0), int64(0))
}

type t47time_t = int64

type t16suseconds_t = int64

// x__syscall3 is defined at syscall_arch.h:33:22
func x43__syscall3(tls TLS, _n int64, _a1 int64, _a2 int64, _a3 int64) (r int64) {
	return X__syscall(tls, _n, _a1, _a2, _a3, int64(0), int64(0), int64(0))
}

// x__syscall2 is defined at syscall_arch.h:24:22
func x43__syscall2(tls TLS, _n int64, _a1 int64, _a2 int64) (r int64) {
	return X__syscall(tls, _n, _a1, _a2, int64(0), int64(0), int64(0), int64(0))
}

// linking __fclose_ca.o

func fn788(p uintptr) func(TLS, uintptr) int32 {
	return *(*func(TLS, uintptr) int32)(unsafe.Pointer(&p))
}

// X__fclose_ca is defined at __fclose_ca.c:3:5
func X__fclose_ca(tls TLS, _f uintptr /* *TFILE = S_IO_FILE */) (r int32) {
	return fn788(*(*uintptr)(unsafe.Pointer(_f + 24)))(tls, _f)
}

type t813__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t813__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type s24_IO_FILE = struct {
	Fflags        uint32
	Frpos         uintptr // *uint8
	Frend         uintptr // *uint8
	Fclose        uintptr // *func(TLS, uintptr) int32
	Fwend         uintptr // *uint8
	Fwpos         uintptr // *uint8
	Fmustbezero_1 uintptr // *uint8
	Fwbase        uintptr // *uint8
	Fread         uintptr // *func(TLS, uintptr, uintptr, uint64) uint64
	Fwrite        uintptr // *func(TLS, uintptr, uintptr, uint64) uint64
	Fseek         uintptr // *func(TLS, uintptr, int64, int32) int64
	Fbuf          uintptr // *uint8
	Fbuf_size     uint64
	Fprev         uintptr // *TFILE = S_IO_FILE
	Fnext         uintptr // *TFILE = S_IO_FILE
	Ffd           int32
	Fpipe_pid     int32
	Flockcount    int64
	Fdummy3       int16
	Fmode         int8
	Flbf          int8
	Flock         int32
	Fwaiters      int32
	Fcookie       uintptr // *void
	Foff          int64
	Fgetln_buf    uintptr // *int8
	Fmustbezero_2 uintptr // *void
	Fshend        uintptr // *uint8
	Fshlim        int64
	Fshcnt        int64
	Fprev_locked  uintptr // *TFILE = S_IO_FILE
	Fnext_locked  uintptr // *TFILE = S_IO_FILE
	Flocale       uintptr // *S__locale_struct
}

type t197size_t = uint64

type t40off_t = int64

type s67__locale_struct = struct{ Fcat [6]uintptr }

// linking __fdopen.o

func set789(p *uintptr, v uintptr) uintptr { *p = v; return v }

func fp790(f func(TLS, uintptr, uintptr, uint64) uint64) uintptr {
	return *(*uintptr)(unsafe.Pointer(&f))
}

func fp791(f func(TLS, uintptr, int64, int32) int64) uintptr { return *(*uintptr)(unsafe.Pointer(&f)) }

func fp792(f func(TLS, uintptr) int32) uintptr { return *(*uintptr)(unsafe.Pointer(&f)) }

// X__fdopen is defined at __fdopen.c:8:6
func X__fdopen(tls TLS, _fd int32, _mode uintptr /* *int8 */) (r uintptr /* *TFILE = S_IO_FILE */) {
	esc := MustMalloc(8)
	var (
		_f     uintptr // *TFILE = S_IO_FILE
		_wsz   = esc   // *Swinsize
		_flags int32
	)
	defer Free(esc)
	if Xstrchr(tls, ts+4384 /* "rwa" */, int32(*(*int8)(unsafe.Pointer(_mode)))) != 0 {
		goto _1
	}

	*(*int32)(unsafe.Pointer(X__errno_location(tls))) = int32(22)
	return null

_1:
	if set789(&_f, Xmalloc(tls, uint64(1264))) != 0 {
		goto _2
	}

	return null

_2:
	Xmemset(tls, _f, int32(0), uint64(232))
	if Xstrchr(tls, _mode, int32('+')) != 0 {
		goto _3
	}

	*(*uint32)(unsafe.Pointer(_f)) = uint32(func() int32 {
		if int32(*(*int8)(unsafe.Pointer(_mode))) == int32('r') {
			return int32(8)
		}
		return int32(4)
	}())
_3:
	if Xstrchr(tls, _mode, int32('e')) == 0 {
		goto _4
	}

	x44__syscall3(tls, int64(72), int64(_fd), int64(2), int64(1))
_4:
	if int32(*(*int8)(unsafe.Pointer(_mode))) != int32('a') {
		goto _5
	}

	_flags = int32(x44__syscall2(tls, int64(72), int64(_fd), int64(3)))
	if _flags&int32(02000) != 0 {
		goto _6
	}

	x44__syscall3(tls, int64(72), int64(_fd), int64(4), int64(_flags|int32(02000)))
_6:
	{
		p := (*uint32)(unsafe.Pointer(_f))
		*p = *p | uint32(128)
	}
_5:
	*(*int32)(unsafe.Pointer(_f + 120)) = _fd
	*(*uintptr)(unsafe.Pointer(_f + 88)) = (_f + uintptr(232)) + uintptr(8)
	*(*uint64)(unsafe.Pointer(_f + 96)) = uint64(1024)
	*(*int8)(unsafe.Pointer(_f + 139)) = int8(-1)
	if *(*uint32)(unsafe.Pointer(_f))&uint32(8) != 0 || x44__syscall3(tls, int64(16), int64(_fd), int64(21523), int64(_wsz)) != 0 {
		goto _7
	}

	*(*int8)(unsafe.Pointer(_f + 139)) = int8('\n')
_7:
	*(*uintptr)(unsafe.Pointer(_f + 64)) = fp790(X__stdio_read)
	*(*uintptr)(unsafe.Pointer(_f + 72)) = fp790(X__stdio_write)
	*(*uintptr)(unsafe.Pointer(_f + 80)) = fp791(X__stdio_seek)
	*(*uintptr)(unsafe.Pointer(_f + 24)) = fp792(X__stdio_close)
	if *(*int32)(unsafe.Pointer(X__libc + 4)) != 0 {
		goto _8
	}

	*(*int32)(unsafe.Pointer(_f + 140)) = int32(-1)
_8:
	return X__ofl_add(tls, _f)
}

type t814__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t814__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type s25_IO_FILE = struct {
	Fflags        uint32
	Frpos         uintptr // *uint8
	Frend         uintptr // *uint8
	Fclose        uintptr // *func(TLS, uintptr) int32
	Fwend         uintptr // *uint8
	Fwpos         uintptr // *uint8
	Fmustbezero_1 uintptr // *uint8
	Fwbase        uintptr // *uint8
	Fread         uintptr // *func(TLS, uintptr, uintptr, uint64) uint64
	Fwrite        uintptr // *func(TLS, uintptr, uintptr, uint64) uint64
	Fseek         uintptr // *func(TLS, uintptr, int64, int32) int64
	Fbuf          uintptr // *uint8
	Fbuf_size     uint64
	Fprev         uintptr // *TFILE = S_IO_FILE
	Fnext         uintptr // *TFILE = S_IO_FILE
	Ffd           int32
	Fpipe_pid     int32
	Flockcount    int64
	Fdummy3       int16
	Fmode         int8
	Flbf          int8
	Flock         int32
	Fwaiters      int32
	Fcookie       uintptr // *void
	Foff          int64
	Fgetln_buf    uintptr // *int8
	Fmustbezero_2 uintptr // *void
	Fshend        uintptr // *uint8
	Fshlim        int64
	Fshcnt        int64
	Fprev_locked  uintptr // *TFILE = S_IO_FILE
	Fnext_locked  uintptr // *TFILE = S_IO_FILE
	Flocale       uintptr // *S__locale_struct
}

type s2winsize = struct {
	Fws_row    uint16
	Fws_col    uint16
	Fws_xpixel uint16
	Fws_ypixel uint16
}

// x__syscall3 is defined at syscall_arch.h:33:22
func x44__syscall3(tls TLS, _n int64, _a1 int64, _a2 int64, _a3 int64) (r int64) {
	return X__syscall(tls, _n, _a1, _a2, _a3, int64(0), int64(0), int64(0))
}

// x__syscall2 is defined at syscall_arch.h:24:22
func x44__syscall2(tls TLS, _n int64, _a1 int64, _a2 int64) (r int64) {
	return X__syscall(tls, _n, _a1, _a2, int64(0), int64(0), int64(0), int64(0))
}

type t198size_t = uint64

type t41off_t = int64

type s68__locale_struct = struct{ Fcat [6]uintptr }

// linking __fmodeflags.o

// X__fmodeflags is defined at __fmodeflags.c:4:5
func X__fmodeflags(tls TLS, _mode uintptr /* *int8 */) (r int32) {
	var _flags int32

	if Xstrchr(tls, _mode, int32('+')) == 0 {
		goto _1
	}

	_flags = int32(02)
	goto _2

_1:
	if int32(*(*int8)(unsafe.Pointer(_mode))) != int32('r') {
		goto _3
	}

	_flags = int32(0)
	goto _4

_3:
	_flags = int32(01)
_4:
_2:
	if Xstrchr(tls, _mode, int32('x')) == 0 {
		goto _5
	}

	_flags = _flags | int32(0200)
_5:
	if Xstrchr(tls, _mode, int32('e')) == 0 {
		goto _6
	}

	_flags = _flags | int32(02000000)
_6:
	if int32(*(*int8)(unsafe.Pointer(_mode))) == int32('r') {
		goto _7
	}

	_flags = _flags | int32(0100)
_7:
	if int32(*(*int8)(unsafe.Pointer(_mode))) != int32('w') {
		goto _8
	}

	_flags = _flags | int32(01000)
_8:
	if int32(*(*int8)(unsafe.Pointer(_mode))) != int32('a') {
		goto _9
	}

	_flags = _flags | int32(02000)
_9:
	return _flags
}

type t815__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t815__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// linking __fopen_rb_ca.o

func fp793(f func(TLS, uintptr, uintptr, uint64) uint64) uintptr {
	return *(*uintptr)(unsafe.Pointer(&f))
}

func fp794(f func(TLS, uintptr, int64, int32) int64) uintptr { return *(*uintptr)(unsafe.Pointer(&f)) }

func fp795(f func(TLS, uintptr) int32) uintptr { return *(*uintptr)(unsafe.Pointer(&f)) }

// X__fopen_rb_ca is defined at __fopen_rb_ca.c:6:6
func X__fopen_rb_ca(tls TLS, _filename uintptr /* *int8 */, _f uintptr /* *TFILE = S_IO_FILE */, _buf uintptr /* *uint8 */, _len uint64) (r uintptr /* *TFILE = S_IO_FILE */) {
	Xmemset(tls, _f, int32(0), uint64(232))
	*(*int32)(unsafe.Pointer(_f + 120)) = int32(X__syscall_ret(tls, uint64(x45__syscall2(tls, int64(2), int64(_filename), int64(524288)))))
	if *(*int32)(unsafe.Pointer(_f + 120)) >= int32(0) {
		goto _1
	}

	return null

_1:
	x45__syscall3(tls, int64(72), int64(*(*int32)(unsafe.Pointer(_f + 120))), int64(2), int64(1))
	*(*uint32)(unsafe.Pointer(_f)) = uint32(9)
	*(*uintptr)(unsafe.Pointer(_f + 88)) = _buf + uintptr(8)
	*(*uint64)(unsafe.Pointer(_f + 96)) = _len - uint64(8)
	*(*uintptr)(unsafe.Pointer(_f + 64)) = fp793(X__stdio_read)
	*(*uintptr)(unsafe.Pointer(_f + 80)) = fp794(X__stdio_seek)
	*(*uintptr)(unsafe.Pointer(_f + 24)) = fp795(X__stdio_close)
	*(*int32)(unsafe.Pointer(_f + 140)) = int32(-1)
	return _f
}

type t816__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t816__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t199size_t = uint64

type s26_IO_FILE = struct {
	Fflags        uint32
	Frpos         uintptr // *uint8
	Frend         uintptr // *uint8
	Fclose        uintptr // *func(TLS, uintptr) int32
	Fwend         uintptr // *uint8
	Fwpos         uintptr // *uint8
	Fmustbezero_1 uintptr // *uint8
	Fwbase        uintptr // *uint8
	Fread         uintptr // *func(TLS, uintptr, uintptr, uint64) uint64
	Fwrite        uintptr // *func(TLS, uintptr, uintptr, uint64) uint64
	Fseek         uintptr // *func(TLS, uintptr, int64, int32) int64
	Fbuf          uintptr // *uint8
	Fbuf_size     uint64
	Fprev         uintptr // *TFILE = S_IO_FILE
	Fnext         uintptr // *TFILE = S_IO_FILE
	Ffd           int32
	Fpipe_pid     int32
	Flockcount    int64
	Fdummy3       int16
	Fmode         int8
	Flbf          int8
	Flock         int32
	Fwaiters      int32
	Fcookie       uintptr // *void
	Foff          int64
	Fgetln_buf    uintptr // *int8
	Fmustbezero_2 uintptr // *void
	Fshend        uintptr // *uint8
	Fshlim        int64
	Fshcnt        int64
	Fprev_locked  uintptr // *TFILE = S_IO_FILE
	Fnext_locked  uintptr // *TFILE = S_IO_FILE
	Flocale       uintptr // *S__locale_struct
}

// x__syscall2 is defined at syscall_arch.h:24:22
func x45__syscall2(tls TLS, _n int64, _a1 int64, _a2 int64) (r int64) {
	return X__syscall(tls, _n, _a1, _a2, int64(0), int64(0), int64(0), int64(0))
}

// x__syscall3 is defined at syscall_arch.h:33:22
func x45__syscall3(tls TLS, _n int64, _a1 int64, _a2 int64, _a3 int64) (r int64) {
	return X__syscall(tls, _n, _a1, _a2, _a3, int64(0), int64(0), int64(0))
}

type t42off_t = int64

type s69__locale_struct = struct{ Fcat [6]uintptr }

// linking __lockfile.o

func set796(p *int32, v int32) int32 { *p = v; return v }

// X__lockfile is defined at __lockfile.c:6:5
func X__lockfile(tls TLS, _f uintptr /* *TFILE = S_IO_FILE */) (r int32) {
	var (
		_owner int32
		_tid   int32
	)
	_owner = *(*int32)(unsafe.Pointer(_f + 140))
	_tid = *(*int32)(unsafe.Pointer(x25__pthread_self(tls) + 56))
	if _owner&int32(-1073741825) != _tid {
		goto _1
	}

	return int32(0)

_1:
_2:
	_owner = x2a_cas(tls, _f+140, int32(0), _tid)
	if _owner != 0 {
		goto _5
	}

	return int32(1)

_5:
	if x2a_cas(tls, _f+140, _owner, _owner|int32(0x40000000)) != _owner {
		goto _6
	}

	goto _4

_6:
	goto _2

_4:
_7:
	if set796(&_owner, x2a_cas(tls, _f+140, int32(0), _tid|int32(0x40000000))) == 0 {
		goto _8
	}

	x__futexwait(tls, _f+140, _owner, int32(1))
	goto _7

_8:
	return int32(1)
}

// X__unlockfile is defined at __lockfile.c:21:6
func X__unlockfile(tls TLS, _f uintptr /* *TFILE = S_IO_FILE */) {
	if (x1a_swap(tls, _f+140, int32(0)) & int32(0x40000000)) == 0 {
		goto _1
	}

	x1__wake(tls, _f+140, int32(1), int32(1))
_1:
}

type t817__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t817__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type s27_IO_FILE = struct {
	Fflags        uint32
	Frpos         uintptr // *uint8
	Frend         uintptr // *uint8
	Fclose        uintptr // *func(TLS, uintptr) int32
	Fwend         uintptr // *uint8
	Fwpos         uintptr // *uint8
	Fmustbezero_1 uintptr // *uint8
	Fwbase        uintptr // *uint8
	Fread         uintptr // *func(TLS, uintptr, uintptr, uint64) uint64
	Fwrite        uintptr // *func(TLS, uintptr, uintptr, uint64) uint64
	Fseek         uintptr // *func(TLS, uintptr, int64, int32) int64
	Fbuf          uintptr // *uint8
	Fbuf_size     uint64
	Fprev         uintptr // *TFILE = S_IO_FILE
	Fnext         uintptr // *TFILE = S_IO_FILE
	Ffd           int32
	Fpipe_pid     int32
	Flockcount    int64
	Fdummy3       int16
	Fmode         int8
	Flbf          int8
	Flock         int32
	Fwaiters      int32
	Fcookie       uintptr // *void
	Foff          int64
	Fgetln_buf    uintptr // *int8
	Fmustbezero_2 uintptr // *void
	Fshend        uintptr // *uint8
	Fshlim        int64
	Fshcnt        int64
	Fprev_locked  uintptr // *TFILE = S_IO_FILE
	Fnext_locked  uintptr // *TFILE = S_IO_FILE
	Flocale       uintptr // *S__locale_struct
}

// x__pthread_self is defined at pthread_arch.h:1:30
func x25__pthread_self(tls TLS) (r uintptr /* *S__pthread */) {
	return uintptr(tls)
	return r
}

// xa_cas is defined at atomic_arch.h:4:19
func x2a_cas(tls TLS, _p uintptr /* *int32 */, _t int32, _s int32) (r int32) {
	return a_cas(_p, _t, _s)
	return r
}

// x__futexwait is defined at pthread_impl.h:161:20
func x__futexwait(tls TLS, _addr uintptr /* *void */, _val int32, _priv int32) {
	if _priv == 0 {
		goto _1
	}

	_priv = int32(128)
_1:
	if x26__syscall4(tls, int64(202), int64(_addr), int64(int32(0)|_priv), int64(_val), int64(0)) == int64(-38) {
		x26__syscall4(tls, int64(202), int64(_addr), int64(0), int64(_val), int64(0))
	}
}

// xa_swap is defined at atomic_arch.h:24:19
func x1a_swap(tls TLS, _p uintptr /* *int32 */, _v int32) (r int32) {
	return atomic.SwapInt32((*int32)(unsafe.Pointer(_p)), _v)
	return r
}

// x__wake is defined at pthread_impl.h:154:20
func x1__wake(tls TLS, _addr uintptr /* *void */, _cnt int32, _priv int32) {
	if _priv == 0 {
		goto _1
	}

	_priv = int32(128)
_1:
	if _cnt >= int32(0) {
		goto _2
	}

	_cnt = int32(0x7fffffff)
_2:
	if x46__syscall3(tls, int64(202), int64(_addr), int64(int32(1)|_priv), int64(_cnt)) == int64(-38) {
		x46__syscall3(tls, int64(202), int64(_addr), int64(1), int64(_cnt))
	}
}

type t200size_t = uint64

type t43off_t = int64

type s70__locale_struct = struct{ Fcat [6]uintptr }

type s31__pthread = struct {
	Fself          uintptr // *S__pthread
	Fdtv           uintptr // **void
	Funused1       uintptr // *void
	Funused2       uintptr // *void
	Fsysinfo       uint64
	Fcanary        uint64
	Fcanary2       uint64
	Ftid           int32
	Ferrno_val     int32
	Fdetach_state  int32
	Fcancel        int32
	Fcanceldisable uint8
	Fcancelasync   uint8
	F74            uint8
	Fmap_base      uintptr // *uint8
	Fmap_size      uint64
	Fstack         uintptr // *void
	Fstack_size    uint64
	Fguard_size    uint64
	Fstart_arg     uintptr // *void
	Fstart         uintptr // *func(TLS, uintptr) uintptr
	Fresult        uintptr // *void
	Fcancelbuf     uintptr // *S__ptcb
	Ftsd           uintptr // **void
	Frobust_list   struct {
		Fhead    uintptr
		Foff     int64
		Fpending uintptr
	}
	Ftimer_id      int32
	Flocale        uintptr // Tlocale_t = *S__locale_struct
	Fkilllock      [1]int32
	Fdlerror_buf   uintptr // *int8
	Fstdio_locks   uintptr // *void
	Fcanary_at_end uint64
	Fdtv_copy      uintptr // **void
}

// x__syscall4 is defined at syscall_arch.h:42:22
func x26__syscall4(tls TLS, _n int64, _a1 int64, _a2 int64, _a3 int64, _a4 int64) (r int64) {
	return X__syscall(tls, _n, _a1, _a2, _a3, _a4, int64(0), int64(0))
}

// x__syscall3 is defined at syscall_arch.h:33:22
func x46__syscall3(tls TLS, _n int64, _a1 int64, _a2 int64, _a3 int64) (r int64) {
	return X__syscall(tls, _n, _a1, _a2, _a3, int64(0), int64(0), int64(0))
}

type t37uintptr_t = uint64

type s29__ptcb = struct {
	F__f    uintptr // *func(TLS, uintptr)
	F__x    uintptr // *void
	F__next uintptr // *S__ptcb
}

// linking __overflow.o

func set797(p *uint8, v uint8) uint8 { *p = v; return v }

func postinc798(p *uintptr) uintptr { r := *p; *p += 1; return r }

func fn799(p uintptr) func(TLS, uintptr, uintptr, uint64) uint64 {
	return *(*func(TLS, uintptr, uintptr, uint64) uint64)(unsafe.Pointer(&p))
}

// X__overflow is defined at __overflow.c:3:5
func X__overflow(tls TLS, _f uintptr /* *TFILE = S_IO_FILE */, __c int32) (r int32) {
	esc := MustMalloc(1)
	var _c = esc // *uint8
	defer Free(esc)
	*(*uint8)(unsafe.Pointer(_c)) = uint8(__c)
	if *(*uintptr)(unsafe.Pointer(_f + 32)) != 0 || X__towrite(tls, _f) == 0 {
		goto _1
	}

	return int32(-1)

_1:
	if *(*uintptr)(unsafe.Pointer(_f + 40)) >= *(*uintptr)(unsafe.Pointer(_f + 32)) || int32(*(*uint8)(unsafe.Pointer(_c))) == int32(*(*int8)(unsafe.Pointer(_f + 139))) {
		goto _2
	}

	return int32(set797((*uint8)(unsafe.Pointer(postinc798((*uintptr)(unsafe.Pointer(_f+40))))), *(*uint8)(unsafe.Pointer(_c))))

_2:
	if fn799(*(*uintptr)(unsafe.Pointer(_f + 72)))(tls, _f, _c, uint64(1)) == uint64(1) {
		goto _3
	}

	return int32(-1)

_3:
	return int32(*(*uint8)(unsafe.Pointer(_c)))
}

type t818__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t818__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type s28_IO_FILE = struct {
	Fflags        uint32
	Frpos         uintptr // *uint8
	Frend         uintptr // *uint8
	Fclose        uintptr // *func(TLS, uintptr) int32
	Fwend         uintptr // *uint8
	Fwpos         uintptr // *uint8
	Fmustbezero_1 uintptr // *uint8
	Fwbase        uintptr // *uint8
	Fread         uintptr // *func(TLS, uintptr, uintptr, uint64) uint64
	Fwrite        uintptr // *func(TLS, uintptr, uintptr, uint64) uint64
	Fseek         uintptr // *func(TLS, uintptr, int64, int32) int64
	Fbuf          uintptr // *uint8
	Fbuf_size     uint64
	Fprev         uintptr // *TFILE = S_IO_FILE
	Fnext         uintptr // *TFILE = S_IO_FILE
	Ffd           int32
	Fpipe_pid     int32
	Flockcount    int64
	Fdummy3       int16
	Fmode         int8
	Flbf          int8
	Flock         int32
	Fwaiters      int32
	Fcookie       uintptr // *void
	Foff          int64
	Fgetln_buf    uintptr // *int8
	Fmustbezero_2 uintptr // *void
	Fshend        uintptr // *uint8
	Fshlim        int64
	Fshcnt        int64
	Fprev_locked  uintptr // *TFILE = S_IO_FILE
	Fnext_locked  uintptr // *TFILE = S_IO_FILE
	Flocale       uintptr // *S__locale_struct
}

type t201size_t = uint64

type t44off_t = int64

type s71__locale_struct = struct{ Fcat [6]uintptr }

// linking __stdio_close.o

// X__stdio_close is defined at __stdio_close.c:10:5
func X__stdio_close(tls TLS, _f uintptr /* *TFILE = S_IO_FILE */) (r int32) {
	return int32(X__syscall_ret(tls, uint64(x32__syscall1(tls, int64(3), int64(X__aio_close(tls, *(*int32)(unsafe.Pointer(_f + 120))))))))
}

type t819__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t819__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// xdummy is defined at __stdio_close.c:3:12
func x11dummy(tls TLS, _fd int32) (r int32) {
	return _fd
}

type s29_IO_FILE = struct {
	Fflags        uint32
	Frpos         uintptr // *uint8
	Frend         uintptr // *uint8
	Fclose        uintptr // *func(TLS, uintptr) int32
	Fwend         uintptr // *uint8
	Fwpos         uintptr // *uint8
	Fmustbezero_1 uintptr // *uint8
	Fwbase        uintptr // *uint8
	Fread         uintptr // *func(TLS, uintptr, uintptr, uint64) uint64
	Fwrite        uintptr // *func(TLS, uintptr, uintptr, uint64) uint64
	Fseek         uintptr // *func(TLS, uintptr, int64, int32) int64
	Fbuf          uintptr // *uint8
	Fbuf_size     uint64
	Fprev         uintptr // *TFILE = S_IO_FILE
	Fnext         uintptr // *TFILE = S_IO_FILE
	Ffd           int32
	Fpipe_pid     int32
	Flockcount    int64
	Fdummy3       int16
	Fmode         int8
	Flbf          int8
	Flock         int32
	Fwaiters      int32
	Fcookie       uintptr // *void
	Foff          int64
	Fgetln_buf    uintptr // *int8
	Fmustbezero_2 uintptr // *void
	Fshend        uintptr // *uint8
	Fshlim        int64
	Fshcnt        int64
	Fprev_locked  uintptr // *TFILE = S_IO_FILE
	Fnext_locked  uintptr // *TFILE = S_IO_FILE
	Flocale       uintptr // *S__locale_struct
}

// x__syscall1 is defined at syscall_arch.h:16:22
func x32__syscall1(tls TLS, _n int64, _a1 int64) (r int64) {
	return X__syscall(tls, _n, _a1, int64(0), int64(0), int64(0), int64(0), int64(0))
}

type t202size_t = uint64

type t45off_t = int64

type s72__locale_struct = struct{ Fcat [6]uintptr }

// linking __stdio_exit.o

// X__stdio_exit is defined at __stdio_exit.c:16:6
func X__stdio_exit(tls TLS) {
	var _f uintptr // *TFILE = S_IO_FILE

	_f = *(*uintptr)(unsafe.Pointer(X__ofl_lock(tls)))
_1:
	if _f == 0 {
		goto _3
	}

	xclose_file(tls, _f)
	_f = *(*uintptr)(unsafe.Pointer(_f + 112))
	goto _1

_3:
	xclose_file(tls, *(*uintptr)(unsafe.Pointer(X__stdin_used)))
	xclose_file(tls, *(*uintptr)(unsafe.Pointer(X__stdout_used)))
}

type t820__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t820__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type s30_IO_FILE = struct {
	Fflags        uint32
	Frpos         uintptr // *uint8
	Frend         uintptr // *uint8
	Fclose        uintptr // *func(TLS, uintptr) int32
	Fwend         uintptr // *uint8
	Fwpos         uintptr // *uint8
	Fmustbezero_1 uintptr // *uint8
	Fwbase        uintptr // *uint8
	Fread         uintptr // *func(TLS, uintptr, uintptr, uint64) uint64
	Fwrite        uintptr // *func(TLS, uintptr, uintptr, uint64) uint64
	Fseek         uintptr // *func(TLS, uintptr, int64, int32) int64
	Fbuf          uintptr // *uint8
	Fbuf_size     uint64
	Fprev         uintptr // *TFILE = S_IO_FILE
	Fnext         uintptr // *TFILE = S_IO_FILE
	Ffd           int32
	Fpipe_pid     int32
	Flockcount    int64
	Fdummy3       int16
	Fmode         int8
	Flbf          int8
	Flock         int32
	Fwaiters      int32
	Fcookie       uintptr // *void
	Foff          int64
	Fgetln_buf    uintptr // *int8
	Fmustbezero_2 uintptr // *void
	Fshend        uintptr // *uint8
	Fshlim        int64
	Fshcnt        int64
	Fprev_locked  uintptr // *TFILE = S_IO_FILE
	Fnext_locked  uintptr // *TFILE = S_IO_FILE
	Flocale       uintptr // *S__locale_struct
}

func fn800(p uintptr) func(TLS, uintptr, uintptr, uint64) uint64 {
	return *(*func(TLS, uintptr, uintptr, uint64) uint64)(unsafe.Pointer(&p))
}

func fn801(p uintptr) func(TLS, uintptr, int64, int32) int64 {
	return *(*func(TLS, uintptr, int64, int32) int64)(unsafe.Pointer(&p))
}

// xclose_file is defined at __stdio_exit.c:8:13
func xclose_file(tls TLS, _f uintptr /* *TFILE = S_IO_FILE */) {
	if _f != 0 {
		goto _1
	}

	return

_1:
	if *(*int32)(unsafe.Pointer(_f + 140)) >= int32(0) {
		X__lockfile(tls, _f)
	} else {
	}
	if *(*uintptr)(unsafe.Pointer(_f + 40)) <= *(*uintptr)(unsafe.Pointer(_f + 56)) {
		goto _2
	}

	fn800(*(*uintptr)(unsafe.Pointer(_f + 72)))(tls, _f, null, uint64(0))
_2:
	if *(*uintptr)(unsafe.Pointer(_f + 8)) >= *(*uintptr)(unsafe.Pointer(_f + 16)) {
		goto _3
	}

	fn801(*(*uintptr)(unsafe.Pointer(_f + 80)))(tls, _f, int64(*(*uintptr)(unsafe.Pointer(_f + 8))-*(*uintptr)(unsafe.Pointer(_f + 16))), int32(1))
_3:
}

type t203size_t = uint64

type t46off_t = int64

type s73__locale_struct = struct{ Fcat [6]uintptr }

// linking __stdio_read.o

func postinc802(p *uintptr) uintptr { r := *p; *p += 1; return r }

// X__stdio_read is defined at __stdio_read.c:4:8
func X__stdio_read(tls TLS, _f uintptr /* *TFILE = S_IO_FILE */, _buf uintptr /* *uint8 */, _len uint64) (r uint64) {
	esc := MustMalloc(32)
	var (
		_iov = esc // *[2]Siovec
		_cnt int64
	)
	defer Free(esc)
	*(*[2]s6iovec)(unsafe.Pointer(_iov)) = [2]s6iovec{
		0: {
			Fiov_base: _buf,
			Fiov_len:  _len - uint64(bool2int(*(*uint64)(unsafe.Pointer(_f + 96)) != 0)),
		},
		1: {
			Fiov_base: *(*uintptr)(unsafe.Pointer(_f + 88)),
			Fiov_len:  *(*uint64)(unsafe.Pointer(_f + 96)),
		},
	}
	_cnt = func() int64 {
		if *(*uint64)(unsafe.Pointer(_iov + 8)) != 0 {
			return X__syscall_ret(tls, uint64(x47__syscall3(tls, int64(19), int64(*(*int32)(unsafe.Pointer(_f + 120))), int64(_iov), int64(2))))
		}
		return X__syscall_ret(tls, uint64(x47__syscall3(tls, int64(0), int64(*(*int32)(unsafe.Pointer(_f + 120))), int64(*(*uintptr)(unsafe.Pointer(_iov + 16))), int64(*(*uint64)(unsafe.Pointer((_iov + 16) + 8))))))
	}()
	if _cnt > int64(0) {
		goto _1
	}

	{
		p := (*uint32)(unsafe.Pointer(_f))
		*p = *p | uint32(func() int32 {
			if _cnt != 0 {
				return int32(32)
			}
			return int32(16)
		}())
	}
	return uint64(0)

_1:
	if uint64(_cnt) > *(*uint64)(unsafe.Pointer(_iov + 8)) {
		goto _2
	}

	return uint64(_cnt)

_2:
	_cnt = int64(uint64(_cnt) - *(*uint64)(unsafe.Pointer(_iov + 8)))
	*(*uintptr)(unsafe.Pointer(_f + 8)) = *(*uintptr)(unsafe.Pointer(_f + 88))
	*(*uintptr)(unsafe.Pointer(_f + 16)) = *(*uintptr)(unsafe.Pointer(_f + 88)) + uintptr(_cnt)
	if *(*uint64)(unsafe.Pointer(_f + 96)) == 0 {
		goto _3
	}

	*(*uint8)(unsafe.Pointer(_buf + uintptr(_len-uint64(1)))) = *(*uint8)(unsafe.Pointer(postinc802((*uintptr)(unsafe.Pointer(_f + 8)))))
_3:
	return _len
}

type t821__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t821__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t204size_t = uint64

type s31_IO_FILE = struct {
	Fflags        uint32
	Frpos         uintptr // *uint8
	Frend         uintptr // *uint8
	Fclose        uintptr // *func(TLS, uintptr) int32
	Fwend         uintptr // *uint8
	Fwpos         uintptr // *uint8
	Fmustbezero_1 uintptr // *uint8
	Fwbase        uintptr // *uint8
	Fread         uintptr // *func(TLS, uintptr, uintptr, uint64) uint64
	Fwrite        uintptr // *func(TLS, uintptr, uintptr, uint64) uint64
	Fseek         uintptr // *func(TLS, uintptr, int64, int32) int64
	Fbuf          uintptr // *uint8
	Fbuf_size     uint64
	Fprev         uintptr // *TFILE = S_IO_FILE
	Fnext         uintptr // *TFILE = S_IO_FILE
	Ffd           int32
	Fpipe_pid     int32
	Flockcount    int64
	Fdummy3       int16
	Fmode         int8
	Flbf          int8
	Flock         int32
	Fwaiters      int32
	Fcookie       uintptr // *void
	Foff          int64
	Fgetln_buf    uintptr // *int8
	Fmustbezero_2 uintptr // *void
	Fshend        uintptr // *uint8
	Fshlim        int64
	Fshcnt        int64
	Fprev_locked  uintptr // *TFILE = S_IO_FILE
	Fnext_locked  uintptr // *TFILE = S_IO_FILE
	Flocale       uintptr // *S__locale_struct
}

type s6iovec = struct {
	Fiov_base uintptr // *void
	Fiov_len  uint64
}

type t36ssize_t = int64

// x__syscall3 is defined at syscall_arch.h:33:22
func x47__syscall3(tls TLS, _n int64, _a1 int64, _a2 int64, _a3 int64) (r int64) {
	return X__syscall(tls, _n, _a1, _a2, _a3, int64(0), int64(0), int64(0))
}

type t47off_t = int64

type s74__locale_struct = struct{ Fcat [6]uintptr }

// linking __stdio_seek.o

// X__stdio_seek is defined at __stdio_seek.c:3:7
func X__stdio_seek(tls TLS, _f uintptr /* *TFILE = S_IO_FILE */, _off int64, _whence int32) (r int64) {
	var _ret int64

	_ret = X__syscall_ret(tls, uint64(x48__syscall3(tls, int64(8), int64(*(*int32)(unsafe.Pointer(_f + 120))), _off, int64(_whence))))
	return _ret
}

type t822__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t822__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t48off_t = int64

type s32_IO_FILE = struct {
	Fflags        uint32
	Frpos         uintptr // *uint8
	Frend         uintptr // *uint8
	Fclose        uintptr // *func(TLS, uintptr) int32
	Fwend         uintptr // *uint8
	Fwpos         uintptr // *uint8
	Fmustbezero_1 uintptr // *uint8
	Fwbase        uintptr // *uint8
	Fread         uintptr // *func(TLS, uintptr, uintptr, uint64) uint64
	Fwrite        uintptr // *func(TLS, uintptr, uintptr, uint64) uint64
	Fseek         uintptr // *func(TLS, uintptr, int64, int32) int64
	Fbuf          uintptr // *uint8
	Fbuf_size     uint64
	Fprev         uintptr // *TFILE = S_IO_FILE
	Fnext         uintptr // *TFILE = S_IO_FILE
	Ffd           int32
	Fpipe_pid     int32
	Flockcount    int64
	Fdummy3       int16
	Fmode         int8
	Flbf          int8
	Flock         int32
	Fwaiters      int32
	Fcookie       uintptr // *void
	Foff          int64
	Fgetln_buf    uintptr // *int8
	Fmustbezero_2 uintptr // *void
	Fshend        uintptr // *uint8
	Fshlim        int64
	Fshcnt        int64
	Fprev_locked  uintptr // *TFILE = S_IO_FILE
	Fnext_locked  uintptr // *TFILE = S_IO_FILE
	Flocale       uintptr // *S__locale_struct
}

// x__syscall3 is defined at syscall_arch.h:33:22
func x48__syscall3(tls TLS, _n int64, _a1 int64, _a2 int64, _a3 int64) (r int64) {
	return X__syscall(tls, _n, _a1, _a2, _a3, int64(0), int64(0), int64(0))
}

type t205size_t = uint64

type s75__locale_struct = struct{ Fcat [6]uintptr }

// linking __stdio_write.o

func set803(p *uintptr, v uintptr) uintptr { *p = v; return v }

// X__stdio_write is defined at __stdio_write.c:4:8
func X__stdio_write(tls TLS, _f uintptr /* *TFILE = S_IO_FILE */, _buf uintptr /* *uint8 */, _len uint64) (r uint64) {
	esc := MustMalloc(32)
	var (
		_iovs   = esc   // *[2]Siovec
		_iov    uintptr // *Siovec
		_rem    uint64
		_iovcnt int32
		_cnt    int64
	)
	defer Free(esc)
	*(*[2]s7iovec)(unsafe.Pointer(_iovs)) = [2]s7iovec{
		0: {
			Fiov_base: *(*uintptr)(unsafe.Pointer(_f + 56)),
			Fiov_len:  uint64(int64(*(*uintptr)(unsafe.Pointer(_f + 40)) - *(*uintptr)(unsafe.Pointer(_f + 56)))),
		},
		1: {
			Fiov_base: _buf,
			Fiov_len:  _len,
		},
	}
	_iov = _iovs
	_rem = *(*uint64)(unsafe.Pointer(_iov + 8)) + *(*uint64)(unsafe.Pointer((_iov + 16) + 8))
	_iovcnt = int32(2)

_1:
	_cnt = X__syscall_ret(tls, uint64(x49__syscall3(tls, int64(20), int64(*(*int32)(unsafe.Pointer(_f + 120))), int64(_iov), int64(_iovcnt))))
	if uint64(_cnt) != _rem {
		goto _4
	}

	*(*uintptr)(unsafe.Pointer(_f + 32)) = *(*uintptr)(unsafe.Pointer(_f + 88)) + uintptr(*(*uint64)(unsafe.Pointer(_f + 96)))
	*(*uintptr)(unsafe.Pointer(_f + 40)) = set803((*uintptr)(unsafe.Pointer(_f+56)), *(*uintptr)(unsafe.Pointer(_f + 88)))
	return _len

_4:
	if _cnt >= int64(0) {
		goto _5
	}

	*(*uintptr)(unsafe.Pointer(_f + 40)) = set803((*uintptr)(unsafe.Pointer(_f+56)), set803((*uintptr)(unsafe.Pointer(_f+32)), null))
	{
		p := (*uint32)(unsafe.Pointer(_f))
		*p = *p | uint32(32)
	}
	if _iovcnt == int32(2) {
		return uint64(0)
	}

	return _len - *(*uint64)(unsafe.Pointer(_iov + 8))

_5:
	_rem = _rem - uint64(_cnt)
	if uint64(_cnt) <= *(*uint64)(unsafe.Pointer(_iov + 8)) {
		goto _6
	}

	_cnt = int64(uint64(_cnt) - *(*uint64)(unsafe.Pointer(_iov + 8)))
	_iov += 16
	_iovcnt--
_6:
	*(*uintptr)(unsafe.Pointer(_iov)) = *(*uintptr)(unsafe.Pointer(_iov)) + uintptr(_cnt)
	{
		p := (*uint64)(unsafe.Pointer(_iov + 8))
		*p = *p - uint64(_cnt)
	}
	goto _1
	return r
}

type t823__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t823__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t206size_t = uint64

type s33_IO_FILE = struct {
	Fflags        uint32
	Frpos         uintptr // *uint8
	Frend         uintptr // *uint8
	Fclose        uintptr // *func(TLS, uintptr) int32
	Fwend         uintptr // *uint8
	Fwpos         uintptr // *uint8
	Fmustbezero_1 uintptr // *uint8
	Fwbase        uintptr // *uint8
	Fread         uintptr // *func(TLS, uintptr, uintptr, uint64) uint64
	Fwrite        uintptr // *func(TLS, uintptr, uintptr, uint64) uint64
	Fseek         uintptr // *func(TLS, uintptr, int64, int32) int64
	Fbuf          uintptr // *uint8
	Fbuf_size     uint64
	Fprev         uintptr // *TFILE = S_IO_FILE
	Fnext         uintptr // *TFILE = S_IO_FILE
	Ffd           int32
	Fpipe_pid     int32
	Flockcount    int64
	Fdummy3       int16
	Fmode         int8
	Flbf          int8
	Flock         int32
	Fwaiters      int32
	Fcookie       uintptr // *void
	Foff          int64
	Fgetln_buf    uintptr // *int8
	Fmustbezero_2 uintptr // *void
	Fshend        uintptr // *uint8
	Fshlim        int64
	Fshcnt        int64
	Fprev_locked  uintptr // *TFILE = S_IO_FILE
	Fnext_locked  uintptr // *TFILE = S_IO_FILE
	Flocale       uintptr // *S__locale_struct
}

type s7iovec = struct {
	Fiov_base uintptr // *void
	Fiov_len  uint64
}

type t37ssize_t = int64

// x__syscall3 is defined at syscall_arch.h:33:22
func x49__syscall3(tls TLS, _n int64, _a1 int64, _a2 int64, _a3 int64) (r int64) {
	return X__syscall(tls, _n, _a1, _a2, _a3, int64(0), int64(0), int64(0))
}

type t49off_t = int64

type s76__locale_struct = struct{ Fcat [6]uintptr }

// linking __stdout_write.o

func fp804(f func(TLS, uintptr, uintptr, uint64) uint64) uintptr {
	return *(*uintptr)(unsafe.Pointer(&f))
}

// X__stdout_write is defined at __stdout_write.c:4:8
func X__stdout_write(tls TLS, _f uintptr /* *TFILE = S_IO_FILE */, _buf uintptr /* *uint8 */, _len uint64) (r uint64) {
	esc := MustMalloc(8)
	var _wsz = esc // *Swinsize
	defer Free(esc)
	*(*uintptr)(unsafe.Pointer(_f + 72)) = fp804(X__stdio_write)
	if *(*uint32)(unsafe.Pointer(_f))&uint32(64) != 0 || x50__syscall3(tls, int64(16), int64(*(*int32)(unsafe.Pointer(_f + 120))), int64(21523), int64(_wsz)) == 0 {
		goto _1
	}

	*(*int8)(unsafe.Pointer(_f + 139)) = int8(-1)
_1:
	return X__stdio_write(tls, _f, _buf, _len)
}

type t824__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t824__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t207size_t = uint64

type s34_IO_FILE = struct {
	Fflags        uint32
	Frpos         uintptr // *uint8
	Frend         uintptr // *uint8
	Fclose        uintptr // *func(TLS, uintptr) int32
	Fwend         uintptr // *uint8
	Fwpos         uintptr // *uint8
	Fmustbezero_1 uintptr // *uint8
	Fwbase        uintptr // *uint8
	Fread         uintptr // *func(TLS, uintptr, uintptr, uint64) uint64
	Fwrite        uintptr // *func(TLS, uintptr, uintptr, uint64) uint64
	Fseek         uintptr // *func(TLS, uintptr, int64, int32) int64
	Fbuf          uintptr // *uint8
	Fbuf_size     uint64
	Fprev         uintptr // *TFILE = S_IO_FILE
	Fnext         uintptr // *TFILE = S_IO_FILE
	Ffd           int32
	Fpipe_pid     int32
	Flockcount    int64
	Fdummy3       int16
	Fmode         int8
	Flbf          int8
	Flock         int32
	Fwaiters      int32
	Fcookie       uintptr // *void
	Foff          int64
	Fgetln_buf    uintptr // *int8
	Fmustbezero_2 uintptr // *void
	Fshend        uintptr // *uint8
	Fshlim        int64
	Fshcnt        int64
	Fprev_locked  uintptr // *TFILE = S_IO_FILE
	Fnext_locked  uintptr // *TFILE = S_IO_FILE
	Flocale       uintptr // *S__locale_struct
}

type s3winsize = struct {
	Fws_row    uint16
	Fws_col    uint16
	Fws_xpixel uint16
	Fws_ypixel uint16
}

// x__syscall3 is defined at syscall_arch.h:33:22
func x50__syscall3(tls TLS, _n int64, _a1 int64, _a2 int64, _a3 int64) (r int64) {
	return X__syscall(tls, _n, _a1, _a2, _a3, int64(0), int64(0), int64(0))
}

type t50off_t = int64

type s77__locale_struct = struct{ Fcat [6]uintptr }

// linking __string_read.o

// X__string_read is defined at __string_read.c:4:8
func X__string_read(tls TLS, _f uintptr /* *TFILE = S_IO_FILE */, _buf uintptr /* *uint8 */, _len uint64) (r uint64) {
	var (
		_src uintptr // *int8
		_k   uint64
		_end uintptr // *int8
	)
	_src = *(*uintptr)(unsafe.Pointer(_f + 152))
	_k = _len + uint64(256)
	_end = Xmemchr(tls, _src, int32(0), _k)
	if _end == 0 {
		goto _1
	}

	_k = uint64(int64(_end - _src))
_1:
	if _k >= _len {
		goto _2
	}

	_len = _k
_2:
	Xmemcpy(tls, _buf, _src, _len)
	*(*uintptr)(unsafe.Pointer(_f + 8)) = _src + uintptr(_len)
	*(*uintptr)(unsafe.Pointer(_f + 16)) = _src + uintptr(_k)
	*(*uintptr)(unsafe.Pointer(_f + 152)) = _src + uintptr(_k)
	return _len
}

type t825__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t825__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t208size_t = uint64

type s35_IO_FILE = struct {
	Fflags        uint32
	Frpos         uintptr // *uint8
	Frend         uintptr // *uint8
	Fclose        uintptr // *func(TLS, uintptr) int32
	Fwend         uintptr // *uint8
	Fwpos         uintptr // *uint8
	Fmustbezero_1 uintptr // *uint8
	Fwbase        uintptr // *uint8
	Fread         uintptr // *func(TLS, uintptr, uintptr, uint64) uint64
	Fwrite        uintptr // *func(TLS, uintptr, uintptr, uint64) uint64
	Fseek         uintptr // *func(TLS, uintptr, int64, int32) int64
	Fbuf          uintptr // *uint8
	Fbuf_size     uint64
	Fprev         uintptr // *TFILE = S_IO_FILE
	Fnext         uintptr // *TFILE = S_IO_FILE
	Ffd           int32
	Fpipe_pid     int32
	Flockcount    int64
	Fdummy3       int16
	Fmode         int8
	Flbf          int8
	Flock         int32
	Fwaiters      int32
	Fcookie       uintptr // *void
	Foff          int64
	Fgetln_buf    uintptr // *int8
	Fmustbezero_2 uintptr // *void
	Fshend        uintptr // *uint8
	Fshlim        int64
	Fshcnt        int64
	Fprev_locked  uintptr // *TFILE = S_IO_FILE
	Fnext_locked  uintptr // *TFILE = S_IO_FILE
	Flocale       uintptr // *S__locale_struct
}

type t51off_t = int64

type s78__locale_struct = struct{ Fcat [6]uintptr }

// linking __toread.o

func fn805(p uintptr) func(TLS, uintptr, uintptr, uint64) uint64 {
	return *(*func(TLS, uintptr, uintptr, uint64) uint64)(unsafe.Pointer(&p))
}

func set806(p *uintptr, v uintptr) uintptr { *p = v; return v }

// X__toread is defined at __toread.c:3:5
func X__toread(tls TLS, _f uintptr /* *TFILE = S_IO_FILE */) (r int32) {
	{
		p := (*int8)(unsafe.Pointer(_f + 138))
		*p = int8(int32(*p) | (int32(*(*int8)(unsafe.Pointer(_f + 138))) - int32(1)))
	}
	if *(*uintptr)(unsafe.Pointer(_f + 40)) <= *(*uintptr)(unsafe.Pointer(_f + 56)) {
		goto _1
	}

	fn805(*(*uintptr)(unsafe.Pointer(_f + 72)))(tls, _f, null, uint64(0))
_1:
	*(*uintptr)(unsafe.Pointer(_f + 40)) = set806((*uintptr)(unsafe.Pointer(_f+56)), set806((*uintptr)(unsafe.Pointer(_f+32)), null))
	if (*(*uint32)(unsafe.Pointer(_f)) & uint32(4)) == 0 {
		goto _2
	}

	{
		p := (*uint32)(unsafe.Pointer(_f))
		*p = *p | uint32(32)
	}
	return int32(-1)

_2:
	*(*uintptr)(unsafe.Pointer(_f + 8)) = set806((*uintptr)(unsafe.Pointer(_f+16)), *(*uintptr)(unsafe.Pointer(_f + 88))+uintptr(*(*uint64)(unsafe.Pointer(_f + 96))))
	if *(*uint32)(unsafe.Pointer(_f))&uint32(16) != 0 {
		return int32(-1)
	}

	return int32(0)
}

// X__toread_needs_stdio_exit is defined at __toread.c:18:6
func X__toread_needs_stdio_exit(tls TLS) {
	X__stdio_exit_needed(tls)
}

type t826__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t826__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type s36_IO_FILE = struct {
	Fflags        uint32
	Frpos         uintptr // *uint8
	Frend         uintptr // *uint8
	Fclose        uintptr // *func(TLS, uintptr) int32
	Fwend         uintptr // *uint8
	Fwpos         uintptr // *uint8
	Fmustbezero_1 uintptr // *uint8
	Fwbase        uintptr // *uint8
	Fread         uintptr // *func(TLS, uintptr, uintptr, uint64) uint64
	Fwrite        uintptr // *func(TLS, uintptr, uintptr, uint64) uint64
	Fseek         uintptr // *func(TLS, uintptr, int64, int32) int64
	Fbuf          uintptr // *uint8
	Fbuf_size     uint64
	Fprev         uintptr // *TFILE = S_IO_FILE
	Fnext         uintptr // *TFILE = S_IO_FILE
	Ffd           int32
	Fpipe_pid     int32
	Flockcount    int64
	Fdummy3       int16
	Fmode         int8
	Flbf          int8
	Flock         int32
	Fwaiters      int32
	Fcookie       uintptr // *void
	Foff          int64
	Fgetln_buf    uintptr // *int8
	Fmustbezero_2 uintptr // *void
	Fshend        uintptr // *uint8
	Fshlim        int64
	Fshcnt        int64
	Fprev_locked  uintptr // *TFILE = S_IO_FILE
	Fnext_locked  uintptr // *TFILE = S_IO_FILE
	Flocale       uintptr // *S__locale_struct
}

type t209size_t = uint64

type t52off_t = int64

type s79__locale_struct = struct{ Fcat [6]uintptr }

// linking __towrite.o

func set807(p *uintptr, v uintptr) uintptr { *p = v; return v }

// X__towrite is defined at __towrite.c:3:5
func X__towrite(tls TLS, _f uintptr /* *TFILE = S_IO_FILE */) (r int32) {
	{
		p := (*int8)(unsafe.Pointer(_f + 138))
		*p = int8(int32(*p) | (int32(*(*int8)(unsafe.Pointer(_f + 138))) - int32(1)))
	}
	if (*(*uint32)(unsafe.Pointer(_f)) & uint32(8)) == 0 {
		goto _1
	}

	{
		p := (*uint32)(unsafe.Pointer(_f))
		*p = *p | uint32(32)
	}
	return int32(-1)

_1:
	*(*uintptr)(unsafe.Pointer(_f + 8)) = set807((*uintptr)(unsafe.Pointer(_f+16)), null)
	*(*uintptr)(unsafe.Pointer(_f + 40)) = set807((*uintptr)(unsafe.Pointer(_f+56)), *(*uintptr)(unsafe.Pointer(_f + 88)))
	*(*uintptr)(unsafe.Pointer(_f + 32)) = *(*uintptr)(unsafe.Pointer(_f + 88)) + uintptr(*(*uint64)(unsafe.Pointer(_f + 96)))
	return int32(0)
}

// X__towrite_needs_stdio_exit is defined at __towrite.c:22:6
func X__towrite_needs_stdio_exit(tls TLS) {
	X__stdio_exit_needed(tls)
}

type t827__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t827__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type s37_IO_FILE = struct {
	Fflags        uint32
	Frpos         uintptr // *uint8
	Frend         uintptr // *uint8
	Fclose        uintptr // *func(TLS, uintptr) int32
	Fwend         uintptr // *uint8
	Fwpos         uintptr // *uint8
	Fmustbezero_1 uintptr // *uint8
	Fwbase        uintptr // *uint8
	Fread         uintptr // *func(TLS, uintptr, uintptr, uint64) uint64
	Fwrite        uintptr // *func(TLS, uintptr, uintptr, uint64) uint64
	Fseek         uintptr // *func(TLS, uintptr, int64, int32) int64
	Fbuf          uintptr // *uint8
	Fbuf_size     uint64
	Fprev         uintptr // *TFILE = S_IO_FILE
	Fnext         uintptr // *TFILE = S_IO_FILE
	Ffd           int32
	Fpipe_pid     int32
	Flockcount    int64
	Fdummy3       int16
	Fmode         int8
	Flbf          int8
	Flock         int32
	Fwaiters      int32
	Fcookie       uintptr // *void
	Foff          int64
	Fgetln_buf    uintptr // *int8
	Fmustbezero_2 uintptr // *void
	Fshend        uintptr // *uint8
	Fshlim        int64
	Fshcnt        int64
	Fprev_locked  uintptr // *TFILE = S_IO_FILE
	Fnext_locked  uintptr // *TFILE = S_IO_FILE
	Flocale       uintptr // *S__locale_struct
}

type t210size_t = uint64

type t53off_t = int64

type s80__locale_struct = struct{ Fcat [6]uintptr }

// linking __uflow.o

func fn808(p uintptr) func(TLS, uintptr, uintptr, uint64) uint64 {
	return *(*func(TLS, uintptr, uintptr, uint64) uint64)(unsafe.Pointer(&p))
}

// X__uflow is defined at __uflow.c:6:5
func X__uflow(tls TLS, _f uintptr /* *TFILE = S_IO_FILE */) (r int32) {
	esc := MustMalloc(1)
	var _c = esc // *uint8
	defer Free(esc)
	if X__toread(tls, _f) != 0 || fn808(*(*uintptr)(unsafe.Pointer(_f + 64)))(tls, _f, _c, uint64(1)) != uint64(1) {
		goto _1
	}

	return int32(*(*uint8)(unsafe.Pointer(_c)))

_1:
	return int32(-1)
}

type t828__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t828__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type s38_IO_FILE = struct {
	Fflags        uint32
	Frpos         uintptr // *uint8
	Frend         uintptr // *uint8
	Fclose        uintptr // *func(TLS, uintptr) int32
	Fwend         uintptr // *uint8
	Fwpos         uintptr // *uint8
	Fmustbezero_1 uintptr // *uint8
	Fwbase        uintptr // *uint8
	Fread         uintptr // *func(TLS, uintptr, uintptr, uint64) uint64
	Fwrite        uintptr // *func(TLS, uintptr, uintptr, uint64) uint64
	Fseek         uintptr // *func(TLS, uintptr, int64, int32) int64
	Fbuf          uintptr // *uint8
	Fbuf_size     uint64
	Fprev         uintptr // *TFILE = S_IO_FILE
	Fnext         uintptr // *TFILE = S_IO_FILE
	Ffd           int32
	Fpipe_pid     int32
	Flockcount    int64
	Fdummy3       int16
	Fmode         int8
	Flbf          int8
	Flock         int32
	Fwaiters      int32
	Fcookie       uintptr // *void
	Foff          int64
	Fgetln_buf    uintptr // *int8
	Fmustbezero_2 uintptr // *void
	Fshend        uintptr // *uint8
	Fshlim        int64
	Fshcnt        int64
	Fprev_locked  uintptr // *TFILE = S_IO_FILE
	Fnext_locked  uintptr // *TFILE = S_IO_FILE
	Flocale       uintptr // *S__locale_struct
}

type t211size_t = uint64

type t54off_t = int64

type s81__locale_struct = struct{ Fcat [6]uintptr }

// linking asprintf.o

// Xasprintf is defined at asprintf.c:5:5
func Xasprintf(tls TLS, _s uintptr /* **int8 */, _fmt uintptr /* *int8 */, ap ...interface{}) (r int32) {
	var (
		_ret int32
		_ap  uintptr // Tva_list = T__builtin_va_list = ...truct{Fsize int32;Fdata int8;};}
	)
	_ap = X__builtin_va_start(tls, ap)
	_ret = Xvasprintf(tls, _s, _fmt, _ap)
	X__builtin_free(tls, _ap)
	return _ret
}

type t829__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t829__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// linking clearerr.o

// Xclearerr is defined at clearerr.c:3:6
func Xclearerr(tls TLS, _f uintptr /* *TFILE = S_IO_FILE */) {
	var ___need_unlock int32

	___need_unlock = func() int32 {
		if *(*int32)(unsafe.Pointer(_f + 140)) >= int32(0) {
			return X__lockfile(tls, _f)
		}
		return int32(0)
	}()
	{
		p := (*uint32)(unsafe.Pointer(_f))
		*p = *p & uint32(4294967247)
	}
	if ___need_unlock == 0 {
		goto _2
	}

	X__unlockfile(tls, _f)
_2:
}

type t830__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t830__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type s39_IO_FILE = struct {
	Fflags        uint32
	Frpos         uintptr // *uint8
	Frend         uintptr // *uint8
	Fclose        uintptr // *func(TLS, uintptr) int32
	Fwend         uintptr // *uint8
	Fwpos         uintptr // *uint8
	Fmustbezero_1 uintptr // *uint8
	Fwbase        uintptr // *uint8
	Fread         uintptr // *func(TLS, uintptr, uintptr, uint64) uint64
	Fwrite        uintptr // *func(TLS, uintptr, uintptr, uint64) uint64
	Fseek         uintptr // *func(TLS, uintptr, int64, int32) int64
	Fbuf          uintptr // *uint8
	Fbuf_size     uint64
	Fprev         uintptr // *TFILE = S_IO_FILE
	Fnext         uintptr // *TFILE = S_IO_FILE
	Ffd           int32
	Fpipe_pid     int32
	Flockcount    int64
	Fdummy3       int16
	Fmode         int8
	Flbf          int8
	Flock         int32
	Fwaiters      int32
	Fcookie       uintptr // *void
	Foff          int64
	Fgetln_buf    uintptr // *int8
	Fmustbezero_2 uintptr // *void
	Fshend        uintptr // *uint8
	Fshlim        int64
	Fshcnt        int64
	Fprev_locked  uintptr // *TFILE = S_IO_FILE
	Fnext_locked  uintptr // *TFILE = S_IO_FILE
	Flocale       uintptr // *S__locale_struct
}

type t212size_t = uint64

type t55off_t = int64

type s82__locale_struct = struct{ Fcat [6]uintptr }

// linking dprintf.o

// Xdprintf is defined at dprintf.c:4:5
func Xdprintf(tls TLS, _fd int32, _fmt uintptr /* *int8 */, ap ...interface{}) (r int32) {
	var (
		_ret int32
		_ap  uintptr // Tva_list = T__builtin_va_list = ...truct{Fsize int32;Fdata int8;};}
	)
	_ap = X__builtin_va_start(tls, ap)
	_ret = Xvdprintf(tls, _fd, _fmt, _ap)
	X__builtin_free(tls, _ap)
	return _ret
}

type t831__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t831__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// linking ext.o

// X_flushlbf is defined at ext.c:5:6
func X_flushlbf(tls TLS) {
	Xfflush(tls, null)
}

// X__fsetlocking is defined at ext.c:10:5
func X__fsetlocking(tls TLS, _f uintptr /* *TFILE = S_IO_FILE */, _type int32) (r int32) {
	return int32(0)
}

// X__fwriting is defined at ext.c:15:5
func X__fwriting(tls TLS, _f uintptr /* *TFILE = S_IO_FILE */) (r int32) {
	return bool2int((*(*uint32)(unsafe.Pointer(_f))&uint32(4) != 0) || (*(*uintptr)(unsafe.Pointer(_f + 32)) != 0))
}

// X__freading is defined at ext.c:20:5
func X__freading(tls TLS, _f uintptr /* *TFILE = S_IO_FILE */) (r int32) {
	return bool2int((*(*uint32)(unsafe.Pointer(_f))&uint32(8) != 0) || (*(*uintptr)(unsafe.Pointer(_f + 16)) != 0))
}

// X__freadable is defined at ext.c:25:5
func X__freadable(tls TLS, _f uintptr /* *TFILE = S_IO_FILE */) (r int32) {
	return bool2int(*(*uint32)(unsafe.Pointer(_f))&uint32(4) == 0)
}

// X__fwritable is defined at ext.c:30:5
func X__fwritable(tls TLS, _f uintptr /* *TFILE = S_IO_FILE */) (r int32) {
	return bool2int(*(*uint32)(unsafe.Pointer(_f))&uint32(8) == 0)
}

// X__flbf is defined at ext.c:35:5
func X__flbf(tls TLS, _f uintptr /* *TFILE = S_IO_FILE */) (r int32) {
	return bool2int(int32(*(*int8)(unsafe.Pointer(_f + 139))) >= int32(0))
}

// X__fbufsize is defined at ext.c:40:8
func X__fbufsize(tls TLS, _f uintptr /* *TFILE = S_IO_FILE */) (r uint64) {
	return *(*uint64)(unsafe.Pointer(_f + 96))
}

// X__fpending is defined at ext.c:45:8
func X__fpending(tls TLS, _f uintptr /* *TFILE = S_IO_FILE */) (r uint64) {
	if *(*uintptr)(unsafe.Pointer(_f + 32)) != 0 {
		return uint64(int64(*(*uintptr)(unsafe.Pointer(_f + 40)) - *(*uintptr)(unsafe.Pointer(_f + 56))))
	}

	return uint64(0)
}

func set809(p *uintptr, v uintptr) uintptr { *p = v; return v }

// X__fpurge is defined at ext.c:50:5
func X__fpurge(tls TLS, _f uintptr /* *TFILE = S_IO_FILE */) (r int32) {
	*(*uintptr)(unsafe.Pointer(_f + 40)) = set809((*uintptr)(unsafe.Pointer(_f+56)), set809((*uintptr)(unsafe.Pointer(_f+32)), null))
	*(*uintptr)(unsafe.Pointer(_f + 8)) = set809((*uintptr)(unsafe.Pointer(_f+16)), null)
	return int32(0)
}

type t832__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t832__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type s40_IO_FILE = struct {
	Fflags        uint32
	Frpos         uintptr // *uint8
	Frend         uintptr // *uint8
	Fclose        uintptr // *func(TLS, uintptr) int32
	Fwend         uintptr // *uint8
	Fwpos         uintptr // *uint8
	Fmustbezero_1 uintptr // *uint8
	Fwbase        uintptr // *uint8
	Fread         uintptr // *func(TLS, uintptr, uintptr, uint64) uint64
	Fwrite        uintptr // *func(TLS, uintptr, uintptr, uint64) uint64
	Fseek         uintptr // *func(TLS, uintptr, int64, int32) int64
	Fbuf          uintptr // *uint8
	Fbuf_size     uint64
	Fprev         uintptr // *TFILE = S_IO_FILE
	Fnext         uintptr // *TFILE = S_IO_FILE
	Ffd           int32
	Fpipe_pid     int32
	Flockcount    int64
	Fdummy3       int16
	Fmode         int8
	Flbf          int8
	Flock         int32
	Fwaiters      int32
	Fcookie       uintptr // *void
	Foff          int64
	Fgetln_buf    uintptr // *int8
	Fmustbezero_2 uintptr // *void
	Fshend        uintptr // *uint8
	Fshlim        int64
	Fshcnt        int64
	Fprev_locked  uintptr // *TFILE = S_IO_FILE
	Fnext_locked  uintptr // *TFILE = S_IO_FILE
	Flocale       uintptr // *S__locale_struct
}

type t213size_t = uint64

type t56off_t = int64

type s83__locale_struct = struct{ Fcat [6]uintptr }

// linking ext2.o

// X__freadahead is defined at ext2.c:3:8
func X__freadahead(tls TLS, _f uintptr /* *TFILE = S_IO_FILE */) (r uint64) {
	return uint64(int64(*(*uintptr)(unsafe.Pointer(_f + 16)) - *(*uintptr)(unsafe.Pointer(_f + 8))))
}

// X__freadptr is defined at ext2.c:8:12
func X__freadptr(tls TLS, _f uintptr /* *TFILE = S_IO_FILE */, _sizep uintptr /* *Tsize_t = uint64 */) (r uintptr /* *int8 */) {
	var _size uint64

	_size = uint64(int64(*(*uintptr)(unsafe.Pointer(_f + 16)) - *(*uintptr)(unsafe.Pointer(_f + 8))))
	if _size != 0 {
		goto _1
	}

	return null

_1:
	*(*uint64)(unsafe.Pointer(_sizep)) = _size
	return *(*uintptr)(unsafe.Pointer(_f + 8))
}

// X__freadptrinc is defined at ext2.c:16:6
func X__freadptrinc(tls TLS, _f uintptr /* *TFILE = S_IO_FILE */, _inc uint64) {
	*(*uintptr)(unsafe.Pointer(_f + 8)) += uintptr(_inc)
}

// X__fseterr is defined at ext2.c:21:6
func X__fseterr(tls TLS, _f uintptr /* *TFILE = S_IO_FILE */) {
	{
		p := (*uint32)(unsafe.Pointer(_f))
		*p = *p | uint32(32)
	}
}

type t833__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t833__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t214size_t = uint64

type s41_IO_FILE = struct {
	Fflags        uint32
	Frpos         uintptr // *uint8
	Frend         uintptr // *uint8
	Fclose        uintptr // *func(TLS, uintptr) int32
	Fwend         uintptr // *uint8
	Fwpos         uintptr // *uint8
	Fmustbezero_1 uintptr // *uint8
	Fwbase        uintptr // *uint8
	Fread         uintptr // *func(TLS, uintptr, uintptr, uint64) uint64
	Fwrite        uintptr // *func(TLS, uintptr, uintptr, uint64) uint64
	Fseek         uintptr // *func(TLS, uintptr, int64, int32) int64
	Fbuf          uintptr // *uint8
	Fbuf_size     uint64
	Fprev         uintptr // *TFILE = S_IO_FILE
	Fnext         uintptr // *TFILE = S_IO_FILE
	Ffd           int32
	Fpipe_pid     int32
	Flockcount    int64
	Fdummy3       int16
	Fmode         int8
	Flbf          int8
	Flock         int32
	Fwaiters      int32
	Fcookie       uintptr // *void
	Foff          int64
	Fgetln_buf    uintptr // *int8
	Fmustbezero_2 uintptr // *void
	Fshend        uintptr // *uint8
	Fshlim        int64
	Fshcnt        int64
	Fprev_locked  uintptr // *TFILE = S_IO_FILE
	Fnext_locked  uintptr // *TFILE = S_IO_FILE
	Flocale       uintptr // *S__locale_struct
}

type t57off_t = int64

type s84__locale_struct = struct{ Fcat [6]uintptr }

// linking fclose.o

func set810(p *int32, v int32) int32 { *p = v; return v }

func fn811(p uintptr) func(TLS, uintptr) int32 {
	return *(*func(TLS, uintptr) int32)(unsafe.Pointer(&p))
}

// Xfclose is defined at fclose.c:7:5
func Xfclose(tls TLS, _f uintptr /* *TFILE = S_IO_FILE */) (r int32) {
	var (
		_r             int32
		_perm          int32
		___need_unlock int32
		_head          uintptr // **TFILE = S_IO_FILE
	)
	___need_unlock = func() int32 {
		if *(*int32)(unsafe.Pointer(_f + 140)) >= int32(0) {
			return X__lockfile(tls, _f)
		}
		return int32(0)
	}()
	X__unlist_locked_file(tls, _f)
	if set810(&_perm, int32(*(*uint32)(unsafe.Pointer(_f))&uint32(1))) != 0 {
		goto _1
	}

	_head = X__ofl_lock(tls)
	if *(*uintptr)(unsafe.Pointer(_f + 104)) == 0 {
		goto _2
	}

	*(*uintptr)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_f + 104)) + 112)) = *(*uintptr)(unsafe.Pointer(_f + 112))
_2:
	if *(*uintptr)(unsafe.Pointer(_f + 112)) == 0 {
		goto _3
	}

	*(*uintptr)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_f + 112)) + 104)) = *(*uintptr)(unsafe.Pointer(_f + 104))
_3:
	if *(*uintptr)(unsafe.Pointer(_head)) != _f {
		goto _4
	}

	*(*uintptr)(unsafe.Pointer(_head)) = *(*uintptr)(unsafe.Pointer(_f + 112))
_4:
	X__ofl_unlock(tls)
_1:
	_r = Xfflush(tls, _f)
	_r = _r | fn811(*(*uintptr)(unsafe.Pointer(_f + 24)))(tls, _f)
	Xfree(tls, *(*uintptr)(unsafe.Pointer(_f + 168)))
	if _perm != 0 {
		goto _5
	}

	Xfree(tls, _f)
	goto _6

_5:
	if ___need_unlock == 0 {
		goto _8
	}

	X__unlockfile(tls, _f)
_8:
_6:
	return _r
}

type t834__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t834__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// xdummy is defined at fclose.c:4:13
func x12dummy(tls TLS, _f uintptr /* *TFILE = S_IO_FILE */) {
}

type s42_IO_FILE = struct {
	Fflags        uint32
	Frpos         uintptr // *uint8
	Frend         uintptr // *uint8
	Fclose        uintptr // *func(TLS, uintptr) int32
	Fwend         uintptr // *uint8
	Fwpos         uintptr // *uint8
	Fmustbezero_1 uintptr // *uint8
	Fwbase        uintptr // *uint8
	Fread         uintptr // *func(TLS, uintptr, uintptr, uint64) uint64
	Fwrite        uintptr // *func(TLS, uintptr, uintptr, uint64) uint64
	Fseek         uintptr // *func(TLS, uintptr, int64, int32) int64
	Fbuf          uintptr // *uint8
	Fbuf_size     uint64
	Fprev         uintptr // *TFILE = S_IO_FILE
	Fnext         uintptr // *TFILE = S_IO_FILE
	Ffd           int32
	Fpipe_pid     int32
	Flockcount    int64
	Fdummy3       int16
	Fmode         int8
	Flbf          int8
	Flock         int32
	Fwaiters      int32
	Fcookie       uintptr // *void
	Foff          int64
	Fgetln_buf    uintptr // *int8
	Fmustbezero_2 uintptr // *void
	Fshend        uintptr // *uint8
	Fshlim        int64
	Fshcnt        int64
	Fprev_locked  uintptr // *TFILE = S_IO_FILE
	Fnext_locked  uintptr // *TFILE = S_IO_FILE
	Flocale       uintptr // *S__locale_struct
}

type t215size_t = uint64

type t58off_t = int64

type s85__locale_struct = struct{ Fcat [6]uintptr }

// linking feof.o

// Xfeof is defined at feof.c:5:5
func Xfeof(tls TLS, _f uintptr /* *TFILE = S_IO_FILE */) (r int32) {
	var (
		___need_unlock int32
		_ret           int32
	)
	___need_unlock = func() int32 {
		if *(*int32)(unsafe.Pointer(_f + 140)) >= int32(0) {
			return X__lockfile(tls, _f)
		}
		return int32(0)
	}()
	_ret = bool2int(*(*uint32)(unsafe.Pointer(_f))&uint32(16) != 0)
	if ___need_unlock == 0 {
		goto _2
	}

	X__unlockfile(tls, _f)
_2:
	return _ret
}

type t835__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t835__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type s43_IO_FILE = struct {
	Fflags        uint32
	Frpos         uintptr // *uint8
	Frend         uintptr // *uint8
	Fclose        uintptr // *func(TLS, uintptr) int32
	Fwend         uintptr // *uint8
	Fwpos         uintptr // *uint8
	Fmustbezero_1 uintptr // *uint8
	Fwbase        uintptr // *uint8
	Fread         uintptr // *func(TLS, uintptr, uintptr, uint64) uint64
	Fwrite        uintptr // *func(TLS, uintptr, uintptr, uint64) uint64
	Fseek         uintptr // *func(TLS, uintptr, int64, int32) int64
	Fbuf          uintptr // *uint8
	Fbuf_size     uint64
	Fprev         uintptr // *TFILE = S_IO_FILE
	Fnext         uintptr // *TFILE = S_IO_FILE
	Ffd           int32
	Fpipe_pid     int32
	Flockcount    int64
	Fdummy3       int16
	Fmode         int8
	Flbf          int8
	Flock         int32
	Fwaiters      int32
	Fcookie       uintptr // *void
	Foff          int64
	Fgetln_buf    uintptr // *int8
	Fmustbezero_2 uintptr // *void
	Fshend        uintptr // *uint8
	Fshlim        int64
	Fshcnt        int64
	Fprev_locked  uintptr // *TFILE = S_IO_FILE
	Fnext_locked  uintptr // *TFILE = S_IO_FILE
	Flocale       uintptr // *S__locale_struct
}

type t216size_t = uint64

type t59off_t = int64

type s86__locale_struct = struct{ Fcat [6]uintptr }

// linking ferror.o

// Xferror is defined at ferror.c:5:5
func Xferror(tls TLS, _f uintptr /* *TFILE = S_IO_FILE */) (r int32) {
	var (
		___need_unlock int32
		_ret           int32
	)
	___need_unlock = func() int32 {
		if *(*int32)(unsafe.Pointer(_f + 140)) >= int32(0) {
			return X__lockfile(tls, _f)
		}
		return int32(0)
	}()
	_ret = bool2int(*(*uint32)(unsafe.Pointer(_f))&uint32(32) != 0)
	if ___need_unlock == 0 {
		goto _2
	}

	X__unlockfile(tls, _f)
_2:
	return _ret
}

type t836__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t836__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type s44_IO_FILE = struct {
	Fflags        uint32
	Frpos         uintptr // *uint8
	Frend         uintptr // *uint8
	Fclose        uintptr // *func(TLS, uintptr) int32
	Fwend         uintptr // *uint8
	Fwpos         uintptr // *uint8
	Fmustbezero_1 uintptr // *uint8
	Fwbase        uintptr // *uint8
	Fread         uintptr // *func(TLS, uintptr, uintptr, uint64) uint64
	Fwrite        uintptr // *func(TLS, uintptr, uintptr, uint64) uint64
	Fseek         uintptr // *func(TLS, uintptr, int64, int32) int64
	Fbuf          uintptr // *uint8
	Fbuf_size     uint64
	Fprev         uintptr // *TFILE = S_IO_FILE
	Fnext         uintptr // *TFILE = S_IO_FILE
	Ffd           int32
	Fpipe_pid     int32
	Flockcount    int64
	Fdummy3       int16
	Fmode         int8
	Flbf          int8
	Flock         int32
	Fwaiters      int32
	Fcookie       uintptr // *void
	Foff          int64
	Fgetln_buf    uintptr // *int8
	Fmustbezero_2 uintptr // *void
	Fshend        uintptr // *uint8
	Fshlim        int64
	Fshcnt        int64
	Fprev_locked  uintptr // *TFILE = S_IO_FILE
	Fnext_locked  uintptr // *TFILE = S_IO_FILE
	Flocale       uintptr // *S__locale_struct
}

type t217size_t = uint64

type t60off_t = int64

type s87__locale_struct = struct{ Fcat [6]uintptr }

// linking fflush.o

func fn812(p uintptr) func(TLS, uintptr, uintptr, uint64) uint64 {
	return *(*func(TLS, uintptr, uintptr, uint64) uint64)(unsafe.Pointer(&p))
}

func fn813(p uintptr) func(TLS, uintptr, int64, int32) int64 {
	return *(*func(TLS, uintptr, int64, int32) int64)(unsafe.Pointer(&p))
}

func set814(p *uintptr, v uintptr) uintptr { *p = v; return v }

// Xfflush is defined at fflush.c:7:5
func Xfflush(tls TLS, _f uintptr /* *TFILE = S_IO_FILE */) (r int32) {
	var (
		_r              int32
		___need_unlock  int32
		_1__need_unlock int32
	)
	if _f != 0 {
		goto _1
	}

	_r = func() int32 {
		if *(*uintptr)(unsafe.Pointer(X__stdout_used)) != 0 {
			return Xfflush(tls, *(*uintptr)(unsafe.Pointer(X__stdout_used)))
		}
		return int32(0)
	}()
	_f = *(*uintptr)(unsafe.Pointer(X__ofl_lock(tls)))
_2:
	if _f == 0 {
		goto _4
	}

	___need_unlock = func() int32 {
		if *(*int32)(unsafe.Pointer(_f + 140)) >= int32(0) {
			return X__lockfile(tls, _f)
		}
		return int32(0)
	}()
	if *(*uintptr)(unsafe.Pointer(_f + 40)) <= *(*uintptr)(unsafe.Pointer(_f + 56)) {
		goto _5
	}

	_r = _r | Xfflush(tls, _f)
_5:
	if ___need_unlock == 0 {
		goto _7
	}

	X__unlockfile(tls, _f)
_7:
	_f = *(*uintptr)(unsafe.Pointer(_f + 112))
	goto _2

_4:
	X__ofl_unlock(tls)
	return _r

_1:
	_1__need_unlock = func() int32 {
		if *(*int32)(unsafe.Pointer(_f + 140)) >= int32(0) {
			return X__lockfile(tls, _f)
		}
		return int32(0)
	}()
	if *(*uintptr)(unsafe.Pointer(_f + 40)) <= *(*uintptr)(unsafe.Pointer(_f + 56)) {
		goto _8
	}

	fn812(*(*uintptr)(unsafe.Pointer(_f + 72)))(tls, _f, null, uint64(0))
	if *(*uintptr)(unsafe.Pointer(_f + 40)) != 0 {
		goto _9
	}

	if _1__need_unlock == 0 {
		goto _11
	}

	X__unlockfile(tls, _f)
_11:
	return int32(-1)

_9:
_8:
	if *(*uintptr)(unsafe.Pointer(_f + 8)) >= *(*uintptr)(unsafe.Pointer(_f + 16)) {
		goto _12
	}

	fn813(*(*uintptr)(unsafe.Pointer(_f + 80)))(tls, _f, int64(*(*uintptr)(unsafe.Pointer(_f + 8))-*(*uintptr)(unsafe.Pointer(_f + 16))), int32(1))
_12:
	*(*uintptr)(unsafe.Pointer(_f + 40)) = set814((*uintptr)(unsafe.Pointer(_f+56)), set814((*uintptr)(unsafe.Pointer(_f+32)), null))
	*(*uintptr)(unsafe.Pointer(_f + 8)) = set814((*uintptr)(unsafe.Pointer(_f+16)), null)
	if _1__need_unlock == 0 {
		goto _14
	}

	X__unlockfile(tls, _f)
_14:
	return int32(0)
}

type t837__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t837__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type s45_IO_FILE = struct {
	Fflags        uint32
	Frpos         uintptr // *uint8
	Frend         uintptr // *uint8
	Fclose        uintptr // *func(TLS, uintptr) int32
	Fwend         uintptr // *uint8
	Fwpos         uintptr // *uint8
	Fmustbezero_1 uintptr // *uint8
	Fwbase        uintptr // *uint8
	Fread         uintptr // *func(TLS, uintptr, uintptr, uint64) uint64
	Fwrite        uintptr // *func(TLS, uintptr, uintptr, uint64) uint64
	Fseek         uintptr // *func(TLS, uintptr, int64, int32) int64
	Fbuf          uintptr // *uint8
	Fbuf_size     uint64
	Fprev         uintptr // *TFILE = S_IO_FILE
	Fnext         uintptr // *TFILE = S_IO_FILE
	Ffd           int32
	Fpipe_pid     int32
	Flockcount    int64
	Fdummy3       int16
	Fmode         int8
	Flbf          int8
	Flock         int32
	Fwaiters      int32
	Fcookie       uintptr // *void
	Foff          int64
	Fgetln_buf    uintptr // *int8
	Fmustbezero_2 uintptr // *void
	Fshend        uintptr // *uint8
	Fshlim        int64
	Fshcnt        int64
	Fprev_locked  uintptr // *TFILE = S_IO_FILE
	Fnext_locked  uintptr // *TFILE = S_IO_FILE
	Flocale       uintptr // *S__locale_struct
}

type t218size_t = uint64

type t61off_t = int64

type s88__locale_struct = struct{ Fcat [6]uintptr }

// linking fgetc.o

func postinc815(p *uintptr) uintptr { r := *p; *p += 1; return r }

// Xfgetc is defined at fgetc.c:3:5
func Xfgetc(tls TLS, _f uintptr /* *TFILE = S_IO_FILE */) (r int32) {
	var _c int32

	if *(*int32)(unsafe.Pointer(_f + 140)) >= int32(0) && X__lockfile(tls, _f) != 0 {
		goto _1
	}

	return func() int32 {
		if *(*uintptr)(unsafe.Pointer(_f + 8)) < *(*uintptr)(unsafe.Pointer(_f + 16)) {
			return int32(*(*uint8)(unsafe.Pointer(postinc815((*uintptr)(unsafe.Pointer(_f + 8))))))
		}
		return X__uflow(tls, _f)
	}()

_1:
	_c = func() int32 {
		if *(*uintptr)(unsafe.Pointer(_f + 8)) < *(*uintptr)(unsafe.Pointer(_f + 16)) {
			return int32(*(*uint8)(unsafe.Pointer(postinc815((*uintptr)(unsafe.Pointer(_f + 8))))))
		}
		return X__uflow(tls, _f)
	}()
	X__unlockfile(tls, _f)
	return _c
}

type t838__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t838__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type s46_IO_FILE = struct {
	Fflags        uint32
	Frpos         uintptr // *uint8
	Frend         uintptr // *uint8
	Fclose        uintptr // *func(TLS, uintptr) int32
	Fwend         uintptr // *uint8
	Fwpos         uintptr // *uint8
	Fmustbezero_1 uintptr // *uint8
	Fwbase        uintptr // *uint8
	Fread         uintptr // *func(TLS, uintptr, uintptr, uint64) uint64
	Fwrite        uintptr // *func(TLS, uintptr, uintptr, uint64) uint64
	Fseek         uintptr // *func(TLS, uintptr, int64, int32) int64
	Fbuf          uintptr // *uint8
	Fbuf_size     uint64
	Fprev         uintptr // *TFILE = S_IO_FILE
	Fnext         uintptr // *TFILE = S_IO_FILE
	Ffd           int32
	Fpipe_pid     int32
	Flockcount    int64
	Fdummy3       int16
	Fmode         int8
	Flbf          int8
	Flock         int32
	Fwaiters      int32
	Fcookie       uintptr // *void
	Foff          int64
	Fgetln_buf    uintptr // *int8
	Fmustbezero_2 uintptr // *void
	Fshend        uintptr // *uint8
	Fshlim        int64
	Fshcnt        int64
	Fprev_locked  uintptr // *TFILE = S_IO_FILE
	Fnext_locked  uintptr // *TFILE = S_IO_FILE
	Flocale       uintptr // *S__locale_struct
}

type t219size_t = uint64

type t62off_t = int64

type s89__locale_struct = struct{ Fcat [6]uintptr }

// linking fgetln.o

func postinc816(p *uintptr) uintptr { r := *p; *p += 1; return r }

// Xfgetln is defined at fgetln.c:6:6
func Xfgetln(tls TLS, _f uintptr /* *TFILE = S_IO_FILE */, _plen uintptr /* *Tsize_t = uint64 */) (r uintptr /* *int8 */) {
	var (
		_ret           uintptr // *int8
		___need_unlock int32
	)
	_ret = 0
	___need_unlock = func() int32 {
		if *(*int32)(unsafe.Pointer(_f + 140)) >= int32(0) {
			return X__lockfile(tls, _f)
		}
		return int32(0)
	}()
	Xungetc(tls, func() int32 {
		if *(*uintptr)(unsafe.Pointer(_f + 8)) < *(*uintptr)(unsafe.Pointer(_f + 16)) {
			return int32(*(*uint8)(unsafe.Pointer(postinc816((*uintptr)(unsafe.Pointer(_f + 8))))))
		}
		return X__uflow(tls, _f)
	}(), _f)
	X__assert_fail(tls, ts+0 /* "TODO(ccgo)" */, ts+4388 /* "src/stdio/fgetln..." */, int32(12), x817__func__)
	X__assert_fail(tls, ts+0 /* "TODO(ccgo)" */, ts+4388 /* "src/stdio/fgetln..." */, int32(14), x817__func__)
	X__assert_fail(tls, ts+0 /* "TODO(ccgo)" */, ts+4388 /* "src/stdio/fgetln..." */, int32(16), x817__func__)
	X__assert_fail(tls, ts+0 /* "TODO(ccgo)" */, ts+4388 /* "src/stdio/fgetln..." */, int32(18), x817__func__)
	X__assert_fail(tls, ts+0 /* "TODO(ccgo)" */, ts+4388 /* "src/stdio/fgetln..." */, int32(20), x817__func__)
	X__assert_fail(tls, ts+0 /* "TODO(ccgo)" */, ts+4388 /* "src/stdio/fgetln..." */, int32(22), x817__func__)
	X__assert_fail(tls, ts+0 /* "TODO(ccgo)" */, ts+4388 /* "src/stdio/fgetln..." */, int32(24), x817__func__)
	X__assert_fail(tls, ts+0 /* "TODO(ccgo)" */, ts+4388 /* "src/stdio/fgetln..." */, int32(26), x817__func__)
	if ___need_unlock == 0 {
		goto _2
	}

	X__unlockfile(tls, _f)
_2:
	return _ret
}

type t839__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t839__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type s47_IO_FILE = struct {
	Fflags        uint32
	Frpos         uintptr // *uint8
	Frend         uintptr // *uint8
	Fclose        uintptr // *func(TLS, uintptr) int32
	Fwend         uintptr // *uint8
	Fwpos         uintptr // *uint8
	Fmustbezero_1 uintptr // *uint8
	Fwbase        uintptr // *uint8
	Fread         uintptr // *func(TLS, uintptr, uintptr, uint64) uint64
	Fwrite        uintptr // *func(TLS, uintptr, uintptr, uint64) uint64
	Fseek         uintptr // *func(TLS, uintptr, int64, int32) int64
	Fbuf          uintptr // *uint8
	Fbuf_size     uint64
	Fprev         uintptr // *TFILE = S_IO_FILE
	Fnext         uintptr // *TFILE = S_IO_FILE
	Ffd           int32
	Fpipe_pid     int32
	Flockcount    int64
	Fdummy3       int16
	Fmode         int8
	Flbf          int8
	Flock         int32
	Fwaiters      int32
	Fcookie       uintptr // *void
	Foff          int64
	Fgetln_buf    uintptr // *int8
	Fmustbezero_2 uintptr // *void
	Fshend        uintptr // *uint8
	Fshlim        int64
	Fshcnt        int64
	Fprev_locked  uintptr // *TFILE = S_IO_FILE
	Fnext_locked  uintptr // *TFILE = S_IO_FILE
	Flocale       uintptr // *S__locale_struct
}

// x1__func__ [7]int8, escapes: true, fgetln.c:7:1
var x817__func__ = ds + 44616

type t220size_t = uint64

type t63off_t = int64

type s90__locale_struct = struct{ Fcat [6]uintptr }

// linking fgetpos.o

// Xfgetpos is defined at fgetpos.c:3:5
func Xfgetpos(tls TLS, _f uintptr /* *TFILE = S_IO_FILE */, _pos uintptr /* *Tfpos_t = struct{F__opaque [0][...n [0]float64;F int64; _ [8]byte} */) (r int32) {
	var _off int64

	_off = X__ftello(tls, _f)
	if _off >= int64(0) {
		goto _1
	}

	return int32(-1)

_1:
	*(*int64)(unsafe.Pointer(_pos)) = _off
	return int32(0)
}

type t840__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t840__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type s48_IO_FILE = struct {
	Fflags        uint32
	Frpos         uintptr // *uint8
	Frend         uintptr // *uint8
	Fclose        uintptr // *func(TLS, uintptr) int32
	Fwend         uintptr // *uint8
	Fwpos         uintptr // *uint8
	Fmustbezero_1 uintptr // *uint8
	Fwbase        uintptr // *uint8
	Fread         uintptr // *func(TLS, uintptr, uintptr, uint64) uint64
	Fwrite        uintptr // *func(TLS, uintptr, uintptr, uint64) uint64
	Fseek         uintptr // *func(TLS, uintptr, int64, int32) int64
	Fbuf          uintptr // *uint8
	Fbuf_size     uint64
	Fprev         uintptr // *TFILE = S_IO_FILE
	Fnext         uintptr // *TFILE = S_IO_FILE
	Ffd           int32
	Fpipe_pid     int32
	Flockcount    int64
	Fdummy3       int16
	Fmode         int8
	Flbf          int8
	Flock         int32
	Fwaiters      int32
	Fcookie       uintptr // *void
	Foff          int64
	Fgetln_buf    uintptr // *int8
	Fmustbezero_2 uintptr // *void
	Fshend        uintptr // *uint8
	Fshlim        int64
	Fshcnt        int64
	Fprev_locked  uintptr // *TFILE = S_IO_FILE
	Fnext_locked  uintptr // *TFILE = S_IO_FILE
	Flocale       uintptr // *S__locale_struct
}

type t64off_t = int64

type t221size_t = uint64

type s91__locale_struct = struct{ Fcat [6]uintptr }

// linking fgets.o

func postinc818(p *int32) int32 { r := *p; *p += -1; return r }

func set819(p *int32, v int32) int32 { *p = v; return v }

func postinc820(p *uintptr) uintptr { r := *p; *p += 1; return r }

func set821(p *int8, v int8) int8 { *p = v; return v }

// Xfgets is defined at fgets.c:6:6
func Xfgets(tls TLS, _s uintptr /* *int8 */, _n int32, _f uintptr /* *TFILE = S_IO_FILE */) (r uintptr /* *int8 */) {
	var (
		_p             uintptr // *int8
		_z             uintptr // *uint8
		_k             uint64
		_c             int32
		___need_unlock int32
	)
	_p = _s
	___need_unlock = func() int32 {
		if *(*int32)(unsafe.Pointer(_f + 140)) >= int32(0) {
			return X__lockfile(tls, _f)
		}
		return int32(0)
	}()
	if postinc818(&_n) > int32(1) {
		goto _1
	}

	{
		p := (*int8)(unsafe.Pointer(_f + 138))
		*p = int8(int32(*p) | (int32(*(*int8)(unsafe.Pointer(_f + 138))) - int32(1)))
	}
	if ___need_unlock == 0 {
		goto _3
	}

	X__unlockfile(tls, _f)
_3:
	if _n == 0 {
		goto _4
	}

	return null

_4:
	*(*int8)(unsafe.Pointer(_s)) = int8(0)
	return _s

_1:
_5:
	if _n == 0 {
		goto _6
	}

	_z = Xmemchr(tls, *(*uintptr)(unsafe.Pointer(_f + 8)), int32('\n'), uint64(int64(*(*uintptr)(unsafe.Pointer(_f + 16))-*(*uintptr)(unsafe.Pointer(_f + 8)))))
	_k = uint64(func() int64 {
		if _z != 0 {
			return int64(_z-*(*uintptr)(unsafe.Pointer(_f + 8))) + int64(1)
		}
		return int64(*(*uintptr)(unsafe.Pointer(_f + 16)) - *(*uintptr)(unsafe.Pointer(_f + 8)))
	}())
	_k = func() uint64 {
		if _k < uint64(_n) {
			return _k
		}
		return uint64(_n)
	}()
	Xmemcpy(tls, _p, *(*uintptr)(unsafe.Pointer(_f + 8)), _k)
	*(*uintptr)(unsafe.Pointer(_f + 8)) += uintptr(_k)
	_p += uintptr(_k)
	_n = int32(uint64(_n) - _k)
	if _z == 0 && _n != 0 {
		goto _7
	}

	goto _6

_7:
	if set819(&_c, func() int32 {
		if *(*uintptr)(unsafe.Pointer(_f + 8)) < *(*uintptr)(unsafe.Pointer(_f + 16)) {
			return int32(*(*uint8)(unsafe.Pointer(postinc820((*uintptr)(unsafe.Pointer(_f + 8))))))
		}
		return X__uflow(tls, _f)
	}()) >= int32(0) {
		goto _8
	}

	if _p != _s && *(*uint32)(unsafe.Pointer(_f))&uint32(16) != 0 {
		goto _9
	}

	_s = null
_9:
	goto _6

_8:
	_n--
	if int32(set821((*int8)(unsafe.Pointer(postinc820(&_p))), int8(_c))) != int32('\n') {
		goto _10
	}

	goto _6

_10:
	goto _5

_6:
	if _s == 0 {
		goto _11
	}

	*(*int8)(unsafe.Pointer(_p)) = int8(0)
_11:
	if ___need_unlock == 0 {
		goto _13
	}

	X__unlockfile(tls, _f)
_13:
	return _s
}

type t841__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t841__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type s49_IO_FILE = struct {
	Fflags        uint32
	Frpos         uintptr // *uint8
	Frend         uintptr // *uint8
	Fclose        uintptr // *func(TLS, uintptr) int32
	Fwend         uintptr // *uint8
	Fwpos         uintptr // *uint8
	Fmustbezero_1 uintptr // *uint8
	Fwbase        uintptr // *uint8
	Fread         uintptr // *func(TLS, uintptr, uintptr, uint64) uint64
	Fwrite        uintptr // *func(TLS, uintptr, uintptr, uint64) uint64
	Fseek         uintptr // *func(TLS, uintptr, int64, int32) int64
	Fbuf          uintptr // *uint8
	Fbuf_size     uint64
	Fprev         uintptr // *TFILE = S_IO_FILE
	Fnext         uintptr // *TFILE = S_IO_FILE
	Ffd           int32
	Fpipe_pid     int32
	Flockcount    int64
	Fdummy3       int16
	Fmode         int8
	Flbf          int8
	Flock         int32
	Fwaiters      int32
	Fcookie       uintptr // *void
	Foff          int64
	Fgetln_buf    uintptr // *int8
	Fmustbezero_2 uintptr // *void
	Fshend        uintptr // *uint8
	Fshlim        int64
	Fshcnt        int64
	Fprev_locked  uintptr // *TFILE = S_IO_FILE
	Fnext_locked  uintptr // *TFILE = S_IO_FILE
	Flocale       uintptr // *S__locale_struct
}

type t222size_t = uint64

type t65off_t = int64

type s92__locale_struct = struct{ Fcat [6]uintptr }

// linking fgetwc.o

// X__fgetwc_unlocked is defined at fgetwc.c:42:8
func X__fgetwc_unlocked(tls TLS, _f uintptr /* *TFILE = S_IO_FILE */) (r uint32) {
	var (
		_ploc uintptr // **S__locale_struct
		_loc  uintptr // Tlocale_t = *S__locale_struct
		_wc   int32
	)
	_ploc = x26__pthread_self(tls) + 192
	_loc = *(*uintptr)(unsafe.Pointer(_ploc))
	if int32(*(*int8)(unsafe.Pointer(_f + 138))) > int32(0) {
		goto _1
	}

	Xfwide(tls, _f, int32(1))
_1:
	*(*uintptr)(unsafe.Pointer(_ploc)) = *(*uintptr)(unsafe.Pointer(_f + 224))
	_wc = int32(x__fgetwc_unlocked_internal(tls, _f))
	*(*uintptr)(unsafe.Pointer(_ploc)) = _loc
	return uint32(_wc)
}

// Xfgetwc is defined at fgetwc.c:52:8
func Xfgetwc(tls TLS, _f uintptr /* *TFILE = S_IO_FILE */) (r uint32) {
	var (
		_c             uint32
		___need_unlock int32
	)
	___need_unlock = func() int32 {
		if *(*int32)(unsafe.Pointer(_f + 140)) >= int32(0) {
			return X__lockfile(tls, _f)
		}
		return int32(0)
	}()
	_c = X__fgetwc_unlocked(tls, _f)
	if ___need_unlock == 0 {
		goto _2
	}

	X__unlockfile(tls, _f)
_2:
	return _c
}

type t842__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t842__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t20wint_t = uint32

type s50_IO_FILE = struct {
	Fflags        uint32
	Frpos         uintptr // *uint8
	Frend         uintptr // *uint8
	Fclose        uintptr // *func(TLS, uintptr) int32
	Fwend         uintptr // *uint8
	Fwpos         uintptr // *uint8
	Fmustbezero_1 uintptr // *uint8
	Fwbase        uintptr // *uint8
	Fread         uintptr // *func(TLS, uintptr, uintptr, uint64) uint64
	Fwrite        uintptr // *func(TLS, uintptr, uintptr, uint64) uint64
	Fseek         uintptr // *func(TLS, uintptr, int64, int32) int64
	Fbuf          uintptr // *uint8
	Fbuf_size     uint64
	Fprev         uintptr // *TFILE = S_IO_FILE
	Fnext         uintptr // *TFILE = S_IO_FILE
	Ffd           int32
	Fpipe_pid     int32
	Flockcount    int64
	Fdummy3       int16
	Fmode         int8
	Flbf          int8
	Flock         int32
	Fwaiters      int32
	Fcookie       uintptr // *void
	Foff          int64
	Fgetln_buf    uintptr // *int8
	Fmustbezero_2 uintptr // *void
	Fshend        uintptr // *uint8
	Fshlim        int64
	Fshcnt        int64
	Fprev_locked  uintptr // *TFILE = S_IO_FILE
	Fnext_locked  uintptr // *TFILE = S_IO_FILE
	Flocale       uintptr // *S__locale_struct
}

type s93__locale_struct = struct{ Fcat [6]uintptr }

type t22wchar_t = int32

// x__pthread_self is defined at pthread_arch.h:1:30
func x26__pthread_self(tls TLS) (r uintptr /* *S__pthread */) {
	return uintptr(tls)
	return r
}

func set822(p *int32, v int32) int32 { *p = v; return v }

func postinc823(p *uintptr) uintptr { r := *p; *p += 1; return r }

// x__fgetwc_unlocked_internal is defined at fgetwc.c:6:15
func x__fgetwc_unlocked_internal(tls TLS, _f uintptr /* *TFILE = S_IO_FILE */) (r uint32) {
	esc := MustMalloc(33)
	var (
		_wc    = esc // *Twchar_t = int32
		_c     int32
		_l     uint64
		_st    = esc + 16 // *Tmbstate_t = struct{F__opaque1 uint32;F__opaque2 uint32;}
		_b     = esc + 32 // *uint8
		_first int32
	)
	defer Free(esc)
	if *(*uintptr)(unsafe.Pointer(_f + 8)) >= *(*uintptr)(unsafe.Pointer(_f + 16)) {
		goto _1
	}

	_l = uint64(Xmbtowc(tls, _wc, *(*uintptr)(unsafe.Pointer(_f + 8)), uint64(int64(*(*uintptr)(unsafe.Pointer(_f + 16))-*(*uintptr)(unsafe.Pointer(_f + 8))))))
	if _l+uint64(1) < uint64(1) {
		goto _2
	}

	*(*uintptr)(unsafe.Pointer(_f + 8)) += uintptr(_l + uint64(bool2int(_l == 0)))
	return uint32(*(*int32)(unsafe.Pointer(_wc)))

_2:
_1:
	Copy(_st, ts+1124 /* "\x00\x00\x00\x00\x00\x00\x00\x00" */, 8)
	_first = int32(1)
_3:
	*(*uint8)(unsafe.Pointer(_b)) = uint8(set822(&_c, func() int32 {
		if *(*uintptr)(unsafe.Pointer(_f + 8)) < *(*uintptr)(unsafe.Pointer(_f + 16)) {
			return int32(*(*uint8)(unsafe.Pointer(postinc823((*uintptr)(unsafe.Pointer(_f + 8))))))
		}
		return X__uflow(tls, _f)
	}()))
	if _c >= int32(0) {
		goto _6
	}

	if _first != 0 {
		goto _7
	}

	*(*int32)(unsafe.Pointer(X__errno_location(tls))) = int32(84)
_7:
	return uint32(0xffffffff)

_6:
	_l = Xmbrtowc(tls, _wc, _b, uint64(1), _st)
	if _l != uint64(18446744073709551615) {
		goto _8
	}

	if _first != 0 {
		goto _9
	}

	Xungetc(tls, int32(*(*uint8)(unsafe.Pointer(_b))), _f)
_9:
	return uint32(0xffffffff)

_8:
	_first = int32(0)
	if _l == uint64(18446744073709551614) {
		goto _3
	}

	return uint32(*(*int32)(unsafe.Pointer(_wc)))
}

type t223size_t = uint64

type t66off_t = int64

type s32__pthread = struct {
	Fself          uintptr // *S__pthread
	Fdtv           uintptr // **void
	Funused1       uintptr // *void
	Funused2       uintptr // *void
	Fsysinfo       uint64
	Fcanary        uint64
	Fcanary2       uint64
	Ftid           int32
	Ferrno_val     int32
	Fdetach_state  int32
	Fcancel        int32
	Fcanceldisable uint8
	Fcancelasync   uint8
	F74            uint8
	Fmap_base      uintptr // *uint8
	Fmap_size      uint64
	Fstack         uintptr // *void
	Fstack_size    uint64
	Fguard_size    uint64
	Fstart_arg     uintptr // *void
	Fstart         uintptr // *func(TLS, uintptr) uintptr
	Fresult        uintptr // *void
	Fcancelbuf     uintptr // *S__ptcb
	Ftsd           uintptr // **void
	Frobust_list   struct {
		Fhead    uintptr
		Foff     int64
		Fpending uintptr
	}
	Ftimer_id      int32
	Flocale        uintptr // Tlocale_t = *S__locale_struct
	Fkilllock      [1]int32
	Fdlerror_buf   uintptr // *int8
	Fstdio_locks   uintptr // *void
	Fcanary_at_end uint64
	Fdtv_copy      uintptr // **void
}

type t38uintptr_t = uint64

type s30__ptcb = struct {
	F__f    uintptr // *func(TLS, uintptr)
	F__x    uintptr // *void
	F__next uintptr // *S__ptcb
}

// linking fgetws.o

func postinc824(p *int32) int32 { r := *p; *p += -1; return r }

func postinc825(p *uintptr) uintptr { r := *p; *p += 4; return r }

// Xfgetws is defined at fgetws.c:7:9
func Xfgetws(tls TLS, _s uintptr /* *Twchar_t = int32 */, _n int32, _f uintptr /* *TFILE = S_IO_FILE */) (r uintptr /* *Twchar_t = int32 */) {
	var (
		_p             uintptr // *Twchar_t = int32
		___need_unlock int32
		_c             uint32
	)
	_p = _s
	if postinc824(&_n) != 0 {
		goto _1
	}

	return _s

_1:
	___need_unlock = func() int32 {
		if *(*int32)(unsafe.Pointer(_f + 140)) >= int32(0) {
			return X__lockfile(tls, _f)
		}
		return int32(0)
	}()
	*(*int32)(unsafe.Pointer(X__errno_location(tls))) = int32(11)

_2:
	if _n == 0 {
		goto _4
	}

	_c = X__fgetwc_unlocked(tls, _f)
	if _c != uint32(0xffffffff) {
		goto _5
	}

	goto _4

_5:
	*(*int32)(unsafe.Pointer(postinc825(&_p))) = int32(_c)
	if _c != uint32('\n') {
		goto _6
	}

	goto _4

_6:
	_n--
	goto _2

_4:
	*(*int32)(unsafe.Pointer(_p)) = int32(0)
	if *(*uint32)(unsafe.Pointer(_f))&uint32(32) == 0 && *(*int32)(unsafe.Pointer(X__errno_location(tls))) != int32(84) {
		goto _7
	}

	_p = _s
_7:
	if ___need_unlock == 0 {
		goto _9
	}

	X__unlockfile(tls, _f)
_9:
	if _p == _s {
		return null
	}

	return _s
}

type t843__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t843__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type s51_IO_FILE = struct {
	Fflags        uint32
	Frpos         uintptr // *uint8
	Frend         uintptr // *uint8
	Fclose        uintptr // *func(TLS, uintptr) int32
	Fwend         uintptr // *uint8
	Fwpos         uintptr // *uint8
	Fmustbezero_1 uintptr // *uint8
	Fwbase        uintptr // *uint8
	Fread         uintptr // *func(TLS, uintptr, uintptr, uint64) uint64
	Fwrite        uintptr // *func(TLS, uintptr, uintptr, uint64) uint64
	Fseek         uintptr // *func(TLS, uintptr, int64, int32) int64
	Fbuf          uintptr // *uint8
	Fbuf_size     uint64
	Fprev         uintptr // *TFILE = S_IO_FILE
	Fnext         uintptr // *TFILE = S_IO_FILE
	Ffd           int32
	Fpipe_pid     int32
	Flockcount    int64
	Fdummy3       int16
	Fmode         int8
	Flbf          int8
	Flock         int32
	Fwaiters      int32
	Fcookie       uintptr // *void
	Foff          int64
	Fgetln_buf    uintptr // *int8
	Fmustbezero_2 uintptr // *void
	Fshend        uintptr // *uint8
	Fshlim        int64
	Fshcnt        int64
	Fprev_locked  uintptr // *TFILE = S_IO_FILE
	Fnext_locked  uintptr // *TFILE = S_IO_FILE
	Flocale       uintptr // *S__locale_struct
}

type t21wint_t = uint32

type t23wchar_t = int32

type t224size_t = uint64

type t67off_t = int64

type s94__locale_struct = struct{ Fcat [6]uintptr }

// linking fileno.o

// Xfileno is defined at fileno.c:3:5
func Xfileno(tls TLS, _f uintptr /* *TFILE = S_IO_FILE */) (r int32) {
	var ___need_unlock int32

	___need_unlock = func() int32 {
		if *(*int32)(unsafe.Pointer(_f + 140)) >= int32(0) {
			return X__lockfile(tls, _f)
		}
		return int32(0)
	}()
	if ___need_unlock == 0 {
		goto _2
	}

	X__unlockfile(tls, _f)
_2:
	return *(*int32)(unsafe.Pointer(_f + 120))
}

type t844__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t844__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type s52_IO_FILE = struct {
	Fflags        uint32
	Frpos         uintptr // *uint8
	Frend         uintptr // *uint8
	Fclose        uintptr // *func(TLS, uintptr) int32
	Fwend         uintptr // *uint8
	Fwpos         uintptr // *uint8
	Fmustbezero_1 uintptr // *uint8
	Fwbase        uintptr // *uint8
	Fread         uintptr // *func(TLS, uintptr, uintptr, uint64) uint64
	Fwrite        uintptr // *func(TLS, uintptr, uintptr, uint64) uint64
	Fseek         uintptr // *func(TLS, uintptr, int64, int32) int64
	Fbuf          uintptr // *uint8
	Fbuf_size     uint64
	Fprev         uintptr // *TFILE = S_IO_FILE
	Fnext         uintptr // *TFILE = S_IO_FILE
	Ffd           int32
	Fpipe_pid     int32
	Flockcount    int64
	Fdummy3       int16
	Fmode         int8
	Flbf          int8
	Flock         int32
	Fwaiters      int32
	Fcookie       uintptr // *void
	Foff          int64
	Fgetln_buf    uintptr // *int8
	Fmustbezero_2 uintptr // *void
	Fshend        uintptr // *uint8
	Fshlim        int64
	Fshcnt        int64
	Fprev_locked  uintptr // *TFILE = S_IO_FILE
	Fnext_locked  uintptr // *TFILE = S_IO_FILE
	Flocale       uintptr // *S__locale_struct
}

type t225size_t = uint64

type t68off_t = int64

type s95__locale_struct = struct{ Fcat [6]uintptr }

// linking flockfile.o

// Xflockfile is defined at flockfile.c:6:6
func Xflockfile(tls TLS, _f uintptr /* *TFILE = S_IO_FILE */) {
	if Xftrylockfile(tls, _f) != 0 {
		goto _1
	}

	return

_1:
	X__lockfile(tls, _f)
	X__register_locked_file(tls, _f, x27__pthread_self(tls))
}

type t845__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t845__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type s53_IO_FILE = struct {
	Fflags        uint32
	Frpos         uintptr // *uint8
	Frend         uintptr // *uint8
	Fclose        uintptr // *func(TLS, uintptr) int32
	Fwend         uintptr // *uint8
	Fwpos         uintptr // *uint8
	Fmustbezero_1 uintptr // *uint8
	Fwbase        uintptr // *uint8
	Fread         uintptr // *func(TLS, uintptr, uintptr, uint64) uint64
	Fwrite        uintptr // *func(TLS, uintptr, uintptr, uint64) uint64
	Fseek         uintptr // *func(TLS, uintptr, int64, int32) int64
	Fbuf          uintptr // *uint8
	Fbuf_size     uint64
	Fprev         uintptr // *TFILE = S_IO_FILE
	Fnext         uintptr // *TFILE = S_IO_FILE
	Ffd           int32
	Fpipe_pid     int32
	Flockcount    int64
	Fdummy3       int16
	Fmode         int8
	Flbf          int8
	Flock         int32
	Fwaiters      int32
	Fcookie       uintptr // *void
	Foff          int64
	Fgetln_buf    uintptr // *int8
	Fmustbezero_2 uintptr // *void
	Fshend        uintptr // *uint8
	Fshlim        int64
	Fshcnt        int64
	Fprev_locked  uintptr // *TFILE = S_IO_FILE
	Fnext_locked  uintptr // *TFILE = S_IO_FILE
	Flocale       uintptr // *S__locale_struct
}

// x__pthread_self is defined at pthread_arch.h:1:30
func x27__pthread_self(tls TLS) (r uintptr /* *S__pthread */) {
	return uintptr(tls)
	return r
}

type t226size_t = uint64

type t69off_t = int64

type s96__locale_struct = struct{ Fcat [6]uintptr }

type s33__pthread = struct {
	Fself          uintptr // *S__pthread
	Fdtv           uintptr // **void
	Funused1       uintptr // *void
	Funused2       uintptr // *void
	Fsysinfo       uint64
	Fcanary        uint64
	Fcanary2       uint64
	Ftid           int32
	Ferrno_val     int32
	Fdetach_state  int32
	Fcancel        int32
	Fcanceldisable uint8
	Fcancelasync   uint8
	F74            uint8
	Fmap_base      uintptr // *uint8
	Fmap_size      uint64
	Fstack         uintptr // *void
	Fstack_size    uint64
	Fguard_size    uint64
	Fstart_arg     uintptr // *void
	Fstart         uintptr // *func(TLS, uintptr) uintptr
	Fresult        uintptr // *void
	Fcancelbuf     uintptr // *S__ptcb
	Ftsd           uintptr // **void
	Frobust_list   struct {
		Fhead    uintptr
		Foff     int64
		Fpending uintptr
	}
	Ftimer_id      int32
	Flocale        uintptr // Tlocale_t = *S__locale_struct
	Fkilllock      [1]int32
	Fdlerror_buf   uintptr // *int8
	Fstdio_locks   uintptr // *void
	Fcanary_at_end uint64
	Fdtv_copy      uintptr // **void
}

type t39uintptr_t = uint64

type s31__ptcb = struct {
	F__f    uintptr // *func(TLS, uintptr)
	F__x    uintptr // *void
	F__next uintptr // *S__ptcb
}

// linking fmemopen.o

func set826(p *uint64, v uint64) uint64 { *p = v; return v }

func fp827(f func(TLS, uintptr, uintptr, uint64) uint64) uintptr {
	return *(*uintptr)(unsafe.Pointer(&f))
}

func fp828(f func(TLS, uintptr, int64, int32) int64) uintptr { return *(*uintptr)(unsafe.Pointer(&f)) }

func fp829(f func(TLS, uintptr) int32) uintptr { return *(*uintptr)(unsafe.Pointer(&f)) }

// Xfmemopen is defined at fmemopen.c:83:6
func Xfmemopen(tls TLS, _buf uintptr /* *void */, _size uint64, _mode uintptr /* *int8 */) (r uintptr /* *TFILE = S_IO_FILE */) {
	var (
		_f    uintptr // *Smem_FILE
		_plus int32
	)
	_plus = bool2int(Xstrchr(tls, _mode, int32('+')) != 0)
	if _size != 0 && Xstrchr(tls, ts+4384 /* "rwa" */, int32(*(*int8)(unsafe.Pointer(_mode)))) != 0 {
		goto _1
	}

	*(*int32)(unsafe.Pointer(X__errno_location(tls))) = int32(22)
	return null

_1:
	if _buf != 0 || _size <= uint64(0x7fffffffffffffff) {
		goto _2
	}

	*(*int32)(unsafe.Pointer(X__errno_location(tls))) = int32(12)
	return null

_2:
	_f = Xmalloc(tls, uint64(1312)+func() uint64 {
		if _buf != 0 {
			return uint64(0)
		}
		return _size
	}())
	if _f != 0 {
		goto _3
	}

	return null

_3:
	Xmemset(tls, _f, int32(0), uint64(232))
	*(*uintptr)(unsafe.Pointer(_f + 152)) = _f + 232
	*(*int32)(unsafe.Pointer(_f + 120)) = int32(-1)
	*(*int8)(unsafe.Pointer(_f + 139)) = int8(-1)
	*(*uintptr)(unsafe.Pointer(_f + 88)) = (_f + 272) + uintptr(8)
	*(*uint64)(unsafe.Pointer(_f + 96)) = uint64(1024)
	if _buf != 0 {
		goto _4
	}

	_buf = _f + 1304
	Xmemset(tls, _buf, int32(0), _size)
_4:
	Xmemset(tls, _f+232, int32(0), uint64(40))
	*(*uintptr)(unsafe.Pointer((_f + 232) + 24)) = _buf
	*(*uint64)(unsafe.Pointer((_f + 232) + 16)) = _size
	*(*int32)(unsafe.Pointer((_f + 232) + 32)) = int32(*(*int8)(unsafe.Pointer(_mode)))
	if _plus != 0 {
		goto _5
	}

	*(*uint32)(unsafe.Pointer(_f)) = uint32(func() int32 {
		if int32(*(*int8)(unsafe.Pointer(_mode))) == int32('r') {
			return int32(8)
		}
		return int32(4)
	}())
_5:
	if int32(*(*int8)(unsafe.Pointer(_mode))) != int32('r') {
		goto _6
	}

	*(*uint64)(unsafe.Pointer((_f + 232) + 8)) = _size
	goto _7

_6:
	if int32(*(*int8)(unsafe.Pointer(_mode))) != int32('a') {
		goto _8
	}

	*(*uint64)(unsafe.Pointer((_f + 232) + 8)) = set826((*uint64)(unsafe.Pointer(_f+232)), Xstrnlen(tls, _buf, _size))
_8:
_7:
	*(*uintptr)(unsafe.Pointer(_f + 64)) = fp827(xmread)
	*(*uintptr)(unsafe.Pointer(_f + 72)) = fp827(xmwrite)
	*(*uintptr)(unsafe.Pointer(_f + 80)) = fp828(xmseek)
	*(*uintptr)(unsafe.Pointer(_f + 24)) = fp829(xmclose)
	if *(*int32)(unsafe.Pointer(X__libc + 4)) != 0 {
		goto _9
	}

	*(*int32)(unsafe.Pointer(_f + 140)) = int32(-1)
_9:
	return X__ofl_add(tls, _f)
}

type t846__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t846__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t227size_t = uint64

type s54_IO_FILE = struct {
	Fflags        uint32
	Frpos         uintptr // *uint8
	Frend         uintptr // *uint8
	Fclose        uintptr // *func(TLS, uintptr) int32
	Fwend         uintptr // *uint8
	Fwpos         uintptr // *uint8
	Fmustbezero_1 uintptr // *uint8
	Fwbase        uintptr // *uint8
	Fread         uintptr // *func(TLS, uintptr, uintptr, uint64) uint64
	Fwrite        uintptr // *func(TLS, uintptr, uintptr, uint64) uint64
	Fseek         uintptr // *func(TLS, uintptr, int64, int32) int64
	Fbuf          uintptr // *uint8
	Fbuf_size     uint64
	Fprev         uintptr // *TFILE = S_IO_FILE
	Fnext         uintptr // *TFILE = S_IO_FILE
	Ffd           int32
	Fpipe_pid     int32
	Flockcount    int64
	Fdummy3       int16
	Fmode         int8
	Flbf          int8
	Flock         int32
	Fwaiters      int32
	Fcookie       uintptr // *void
	Foff          int64
	Fgetln_buf    uintptr // *int8
	Fmustbezero_2 uintptr // *void
	Fshend        uintptr // *uint8
	Fshlim        int64
	Fshcnt        int64
	Fprev_locked  uintptr // *TFILE = S_IO_FILE
	Fnext_locked  uintptr // *TFILE = S_IO_FILE
	Flocale       uintptr // *S__locale_struct
}

type Smem_FILE = struct {
	Ff    s54_IO_FILE
	Fc    Scookie
	Fbuf  [1032]uint8
	Fbuf2 uintptr
}

// xmread is defined at fmemopen.c:36:15
func xmread(tls TLS, _f uintptr /* *TFILE = S_IO_FILE */, _buf uintptr /* *uint8 */, _len uint64) (r uint64) {
	var (
		_c   uintptr // *Scookie
		_rem uint64
	)
	_c = *(*uintptr)(unsafe.Pointer(_f + 152))
	_rem = *(*uint64)(unsafe.Pointer(_c + 8)) - *(*uint64)(unsafe.Pointer(_c))
	if *(*uint64)(unsafe.Pointer(_c)) <= *(*uint64)(unsafe.Pointer(_c + 8)) {
		goto _1
	}

	_rem = uint64(0)
_1:
	if _len <= _rem {
		goto _2
	}

	_len = _rem
	{
		p := (*uint32)(unsafe.Pointer(_f))
		*p = *p | uint32(16)
	}
_2:
	Xmemcpy(tls, _buf, *(*uintptr)(unsafe.Pointer(_c + 24))+uintptr(*(*uint64)(unsafe.Pointer(_c))), _len)
	{
		p := (*uint64)(unsafe.Pointer(_c))
		*p = *p + _len
	}
	_rem = _rem - _len
	if _rem <= *(*uint64)(unsafe.Pointer(_f + 96)) {
		goto _3
	}

	_rem = *(*uint64)(unsafe.Pointer(_f + 96))
_3:
	*(*uintptr)(unsafe.Pointer(_f + 8)) = *(*uintptr)(unsafe.Pointer(_f + 88))
	*(*uintptr)(unsafe.Pointer(_f + 16)) = *(*uintptr)(unsafe.Pointer(_f + 88)) + uintptr(_rem)
	Xmemcpy(tls, *(*uintptr)(unsafe.Pointer(_f + 8)), *(*uintptr)(unsafe.Pointer(_c + 24))+uintptr(*(*uint64)(unsafe.Pointer(_c))), _rem)
	{
		p := (*uint64)(unsafe.Pointer(_c))
		*p = *p + _rem
	}
	return _len
}

// xmwrite is defined at fmemopen.c:56:15
func xmwrite(tls TLS, _f uintptr /* *TFILE = S_IO_FILE */, _buf uintptr /* *uint8 */, _len uint64) (r uint64) {
	var (
		_c    uintptr // *Scookie
		_rem  uint64
		_len2 uint64
	)
	_c = *(*uintptr)(unsafe.Pointer(_f + 152))
	_len2 = uint64(int64(*(*uintptr)(unsafe.Pointer(_f + 40)) - *(*uintptr)(unsafe.Pointer(_f + 56))))
	if _len2 == 0 {
		goto _1
	}

	*(*uintptr)(unsafe.Pointer(_f + 40)) = *(*uintptr)(unsafe.Pointer(_f + 56))
	if xmwrite(tls, _f, *(*uintptr)(unsafe.Pointer(_f + 40)), _len2) >= _len2 {
		goto _2
	}

	return uint64(0)

_2:
_1:
	if *(*int32)(unsafe.Pointer(_c + 32)) != int32('a') {
		goto _3
	}

	*(*uint64)(unsafe.Pointer(_c)) = *(*uint64)(unsafe.Pointer(_c + 8))
_3:
	_rem = *(*uint64)(unsafe.Pointer(_c + 16)) - *(*uint64)(unsafe.Pointer(_c))
	if _len <= _rem {
		goto _4
	}

	_len = _rem
_4:
	Xmemcpy(tls, *(*uintptr)(unsafe.Pointer(_c + 24))+uintptr(*(*uint64)(unsafe.Pointer(_c))), _buf, _len)
	{
		p := (*uint64)(unsafe.Pointer(_c))
		*p = *p + _len
	}
	if *(*uint64)(unsafe.Pointer(_c)) <= *(*uint64)(unsafe.Pointer(_c + 8)) {
		goto _5
	}

	*(*uint64)(unsafe.Pointer(_c + 8)) = *(*uint64)(unsafe.Pointer(_c))
	if *(*uint64)(unsafe.Pointer(_c + 8)) >= *(*uint64)(unsafe.Pointer(_c + 16)) {
		goto _6
	}

	*(*uint8)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_c + 24)) + uintptr(*(*uint64)(unsafe.Pointer(_c + 8))))) = uint8(0)
	goto _7

_6:
	if *(*uint32)(unsafe.Pointer(_f))&uint32(4) == 0 || *(*uint64)(unsafe.Pointer(_c + 16)) == 0 {
		goto _8
	}

	*(*uint8)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_c + 24)) + uintptr(*(*uint64)(unsafe.Pointer(_c + 16))-uint64(1)))) = uint8(0)
_8:
_7:
_5:
	return _len
}

// xmseek is defined at fmemopen.c:19:14
func xmseek(tls TLS, _f uintptr /* *TFILE = S_IO_FILE */, _off int64, _whence int32) (r int64) {
	var _c uintptr // *Scookie
	_ = _c
	_c = *(*uintptr)(unsafe.Pointer(_f + 152))
	if uint32(_whence) <= uint32(2) {
		goto _1
	}

	goto lfail
lfail:
	*(*int32)(unsafe.Pointer(X__errno_location(tls))) = int32(22)
	return int64(-1)

_1:
	X__assert_fail(tls, ts+0 /* "TODO(ccgo)" */, ts+4408 /* "src/stdio/fmemop..." */, int32(28), x830__func__)
	X__assert_fail(tls, ts+0 /* "TODO(ccgo)" */, ts+4408 /* "src/stdio/fmemop..." */, int32(30), x830__func__)
	X__assert_fail(tls, ts+0 /* "TODO(ccgo)" */, ts+4408 /* "src/stdio/fmemop..." */, int32(32), x830__func__)
	return r
}

type t70off_t = int64

// xmclose is defined at fmemopen.c:78:12
func xmclose(tls TLS, _m uintptr /* *TFILE = S_IO_FILE */) (r int32) {
	return int32(0)
}

type s97__locale_struct = struct{ Fcat [6]uintptr }

type TFILE = s54_IO_FILE

type Scookie = struct {
	Fpos  uint64
	Flen  uint64
	Fsize uint64
	Fbuf  uintptr // *uint8
	Fmode int32
}

// x5__func__ [6]int8, escapes: true, fmemopen.c:20:1
var x830__func__ = ds + 44624

// linking fopen.o

// Xfopen is defined at fopen.c:7:6
func Xfopen(tls TLS, _filename uintptr /* *int8 */, _mode uintptr /* *int8 */) (r uintptr /* *TFILE = S_IO_FILE */) {
	var (
		_f     uintptr // *TFILE = S_IO_FILE
		_fd    int32
		_flags int32
	)
	if Xstrchr(tls, ts+4384 /* "rwa" */, int32(*(*int8)(unsafe.Pointer(_mode)))) != 0 {
		goto _1
	}

	*(*int32)(unsafe.Pointer(X__errno_location(tls))) = int32(22)
	return null

_1:
	_flags = X__fmodeflags(tls, _mode)
	_fd = int32(X__syscall_ret(tls, uint64(x51__syscall3(tls, int64(2), int64(_filename), int64(_flags|int32(0)), int64(438)))))
	if _fd >= int32(0) {
		goto _2
	}

	return null

_2:
	if (_flags & int32(02000000)) == 0 {
		goto _3
	}

	x51__syscall3(tls, int64(72), int64(_fd), int64(2), int64(1))
_3:
	_f = X__fdopen(tls, _fd, _mode)
	if _f == 0 {
		goto _4
	}

	return _f

_4:
	x33__syscall1(tls, int64(3), int64(_fd))
	return null
}

type t847__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t847__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type s55_IO_FILE = struct {
	Fflags        uint32
	Frpos         uintptr // *uint8
	Frend         uintptr // *uint8
	Fclose        uintptr // *func(TLS, uintptr) int32
	Fwend         uintptr // *uint8
	Fwpos         uintptr // *uint8
	Fmustbezero_1 uintptr // *uint8
	Fwbase        uintptr // *uint8
	Fread         uintptr // *func(TLS, uintptr, uintptr, uint64) uint64
	Fwrite        uintptr // *func(TLS, uintptr, uintptr, uint64) uint64
	Fseek         uintptr // *func(TLS, uintptr, int64, int32) int64
	Fbuf          uintptr // *uint8
	Fbuf_size     uint64
	Fprev         uintptr // *TFILE = S_IO_FILE
	Fnext         uintptr // *TFILE = S_IO_FILE
	Ffd           int32
	Fpipe_pid     int32
	Flockcount    int64
	Fdummy3       int16
	Fmode         int8
	Flbf          int8
	Flock         int32
	Fwaiters      int32
	Fcookie       uintptr // *void
	Foff          int64
	Fgetln_buf    uintptr // *int8
	Fmustbezero_2 uintptr // *void
	Fshend        uintptr // *uint8
	Fshlim        int64
	Fshcnt        int64
	Fprev_locked  uintptr // *TFILE = S_IO_FILE
	Fnext_locked  uintptr // *TFILE = S_IO_FILE
	Flocale       uintptr // *S__locale_struct
}

// x__syscall3 is defined at syscall_arch.h:33:22
func x51__syscall3(tls TLS, _n int64, _a1 int64, _a2 int64, _a3 int64) (r int64) {
	return X__syscall(tls, _n, _a1, _a2, _a3, int64(0), int64(0), int64(0))
}

// x__syscall1 is defined at syscall_arch.h:16:22
func x33__syscall1(tls TLS, _n int64, _a1 int64) (r int64) {
	return X__syscall(tls, _n, _a1, int64(0), int64(0), int64(0), int64(0), int64(0))
}

type t228size_t = uint64

type t71off_t = int64

type s98__locale_struct = struct{ Fcat [6]uintptr }

// linking fopencookie.o

func set831(p *uintptr, v uintptr) uintptr { *p = v; return v }

func fp832(f func(TLS, uintptr, uintptr, uint64) uint64) uintptr {
	return *(*uintptr)(unsafe.Pointer(&f))
}

func fp833(f func(TLS, uintptr, int64, int32) int64) uintptr { return *(*uintptr)(unsafe.Pointer(&f)) }

func fp834(f func(TLS, uintptr) int32) uintptr { return *(*uintptr)(unsafe.Pointer(&f)) }

// Xfopencookie is defined at fopencookie.c:98:6
func Xfopencookie(tls TLS, _cookie uintptr /* *void */, _mode uintptr /* *int8 */, _iofuncs struct {
	Fread  uintptr // *Tcookie_read_function_t = func(... uintptr, uintptr, uint64) int64
	Fwrite uintptr // *Tcookie_write_function_t = func... uintptr, uintptr, uint64) int64
	Fseek  uintptr // *Tcookie_seek_function_t = func(TLS, uintptr, uintptr, int32) int32
	Fclose uintptr // *Tcookie_close_function_t = func(TLS, uintptr) int32
}) (r uintptr /* *TFILE = S_IO_FILE */) {
	var _f uintptr // *Scookie_FILE

	if Xstrchr(tls, ts+4384 /* "rwa" */, int32(*(*int8)(unsafe.Pointer(_mode)))) != 0 {
		goto _1
	}

	*(*int32)(unsafe.Pointer(X__errno_location(tls))) = int32(22)
	return null

_1:
	if set831(&_f, Xmalloc(tls, uint64(1304))) != 0 {
		goto _2
	}

	return null

_2:
	Xmemset(tls, _f, int32(0), uint64(232))
	if Xstrchr(tls, _mode, int32('+')) != 0 {
		goto _3
	}

	*(*uint32)(unsafe.Pointer(_f)) = uint32(func() int32 {
		if int32(*(*int8)(unsafe.Pointer(_mode))) == int32('r') {
			return int32(8)
		}
		return int32(4)
	}())
_3:
	*(*uintptr)(unsafe.Pointer(_f + 232)) = _cookie
	*(*struct {
		Fread  uintptr // *Tcookie_read_function_t = func(... uintptr, uintptr, uint64) int64
		Fwrite uintptr // *Tcookie_write_function_t = func... uintptr, uintptr, uint64) int64
		Fseek  uintptr // *Tcookie_seek_function_t = func(TLS, uintptr, uintptr, int32) int32
		Fclose uintptr // *Tcookie_close_function_t = func(TLS, uintptr) int32
	})(unsafe.Pointer((_f + 232) + 8)) = _iofuncs
	*(*int32)(unsafe.Pointer(_f + 120)) = int32(-1)
	*(*uintptr)(unsafe.Pointer(_f + 152)) = _f + 232
	*(*uintptr)(unsafe.Pointer(_f + 88)) = (_f + 272) + uintptr(8)
	*(*uint64)(unsafe.Pointer(_f + 96)) = uint64(1024)
	*(*int8)(unsafe.Pointer(_f + 139)) = int8(-1)
	*(*uintptr)(unsafe.Pointer(_f + 64)) = fp832(xcookieread)
	*(*uintptr)(unsafe.Pointer(_f + 72)) = fp832(xcookiewrite)
	*(*uintptr)(unsafe.Pointer(_f + 80)) = fp833(xcookieseek)
	*(*uintptr)(unsafe.Pointer(_f + 24)) = fp834(xcookieclose)
	return X__ofl_add(tls, _f)
}

type t848__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t848__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type Tcookie_io_functions_t = struct {
	Fread  uintptr // *Tcookie_read_function_t = func(... uintptr, uintptr, uint64) int64
	Fwrite uintptr // *Tcookie_write_function_t = func... uintptr, uintptr, uint64) int64
	Fseek  uintptr // *Tcookie_seek_function_t = func(TLS, uintptr, uintptr, int32) int32
	Fclose uintptr // *Tcookie_close_function_t = func(TLS, uintptr) int32
}

type t229size_t = uint64

type t38ssize_t = int64

type s56_IO_FILE = struct {
	Fflags        uint32
	Frpos         uintptr // *uint8
	Frend         uintptr // *uint8
	Fclose        uintptr // *func(TLS, uintptr) int32
	Fwend         uintptr // *uint8
	Fwpos         uintptr // *uint8
	Fmustbezero_1 uintptr // *uint8
	Fwbase        uintptr // *uint8
	Fread         uintptr // *func(TLS, uintptr, uintptr, uint64) uint64
	Fwrite        uintptr // *func(TLS, uintptr, uintptr, uint64) uint64
	Fseek         uintptr // *func(TLS, uintptr, int64, int32) int64
	Fbuf          uintptr // *uint8
	Fbuf_size     uint64
	Fprev         uintptr // *TFILE = S_IO_FILE
	Fnext         uintptr // *TFILE = S_IO_FILE
	Ffd           int32
	Fpipe_pid     int32
	Flockcount    int64
	Fdummy3       int16
	Fmode         int8
	Flbf          int8
	Flock         int32
	Fwaiters      int32
	Fcookie       uintptr // *void
	Foff          int64
	Fgetln_buf    uintptr // *int8
	Fmustbezero_2 uintptr // *void
	Fshend        uintptr // *uint8
	Fshlim        int64
	Fshcnt        int64
	Fprev_locked  uintptr // *TFILE = S_IO_FILE
	Fnext_locked  uintptr // *TFILE = S_IO_FILE
	Flocale       uintptr // *S__locale_struct
}

type Scookie_FILE = struct {
	Ff   s56_IO_FILE
	Ffc  Sfcookie
	Fbuf [1032]uint8
}

func fn835(p uintptr) func(TLS, uintptr, uintptr, uint64) int64 {
	return *(*func(TLS, uintptr, uintptr, uint64) int64)(unsafe.Pointer(&p))
}

func postinc836(p *uint64) uint64 { r := *p; *p += 1; return r }

func postinc837(p *uintptr) uintptr { r := *p; *p += 1; return r }

// xcookieread is defined at fopencookie.c:20:15
func xcookieread(tls TLS, _f uintptr /* *TFILE = S_IO_FILE */, _buf uintptr /* *uint8 */, _len uint64) (r uint64) {
	var (
		_fc      uintptr // *Sfcookie
		_ret     int64
		_remain  uint64
		_readlen uint64
		_len2    uint64
	)
	_fc = *(*uintptr)(unsafe.Pointer(_f + 152))
	_ret = int64(-1)
	_remain = _len
	_readlen = uint64(0)
	_len2 = _len - uint64(bool2int(*(*uint64)(unsafe.Pointer(_f + 96)) != 0))
	if *(*uintptr)(unsafe.Pointer(_fc + 8)) != 0 {
		goto _1
	}

	goto lbail

_1:
	if _len2 == 0 {
		goto _2
	}

	_ret = fn835(*(*uintptr)(unsafe.Pointer(_fc + 8)))(tls, *(*uintptr)(unsafe.Pointer(_fc)), _buf, _len2)
	if _ret > int64(0) {
		goto _3
	}

	goto lbail

_3:
	_readlen = _readlen + uint64(_ret)
	_remain = _remain - uint64(_ret)
_2:
	if *(*uint64)(unsafe.Pointer(_f + 96)) != 0 && _remain <= uint64(bool2int(*(*uint64)(unsafe.Pointer(_f + 96)) != 0)) {
		goto _4
	}

	return _readlen

_4:
	*(*uintptr)(unsafe.Pointer(_f + 8)) = *(*uintptr)(unsafe.Pointer(_f + 88))
	_ret = fn835(*(*uintptr)(unsafe.Pointer(_fc + 8)))(tls, *(*uintptr)(unsafe.Pointer(_fc)), *(*uintptr)(unsafe.Pointer(_f + 8)), *(*uint64)(unsafe.Pointer(_f + 96)))
	if _ret > int64(0) {
		goto _5
	}

	goto lbail

_5:
	*(*uintptr)(unsafe.Pointer(_f + 16)) = *(*uintptr)(unsafe.Pointer(_f + 8)) + uintptr(_ret)
	*(*uint8)(unsafe.Pointer(_buf + uintptr(postinc836(&_readlen)))) = *(*uint8)(unsafe.Pointer(postinc837((*uintptr)(unsafe.Pointer(_f + 8)))))
	return _readlen

	goto lbail
lbail:
	{
		p := (*uint32)(unsafe.Pointer(_f))
		*p = *p | uint32(func() int32 {
			if _ret == int64(0) {
				return int32(16)
			}
			return int32(32)
		}())
	}
	*(*uintptr)(unsafe.Pointer(_f + 8)) = set831((*uintptr)(unsafe.Pointer(_f+16)), *(*uintptr)(unsafe.Pointer(_f + 88)))
	return _readlen
}

// xcookiewrite is defined at fopencookie.c:54:15
func xcookiewrite(tls TLS, _f uintptr /* *TFILE = S_IO_FILE */, _buf uintptr /* *uint8 */, _len uint64) (r uint64) {
	var (
		_fc   uintptr // *Sfcookie
		_ret  int64
		_len2 uint64
	)
	_fc = *(*uintptr)(unsafe.Pointer(_f + 152))
	_len2 = uint64(int64(*(*uintptr)(unsafe.Pointer(_f + 40)) - *(*uintptr)(unsafe.Pointer(_f + 56))))
	if *(*uintptr)(unsafe.Pointer((_fc + 8) + 8)) != 0 {
		goto _1
	}

	return _len

_1:
	if _len2 == 0 {
		goto _2
	}

	*(*uintptr)(unsafe.Pointer(_f + 40)) = *(*uintptr)(unsafe.Pointer(_f + 56))
	if xcookiewrite(tls, _f, *(*uintptr)(unsafe.Pointer(_f + 40)), _len2) >= _len2 {
		goto _3
	}

	return uint64(0)

_3:
_2:
	_ret = fn835(*(*uintptr)(unsafe.Pointer((_fc + 8) + 8)))(tls, *(*uintptr)(unsafe.Pointer(_fc)), _buf, _len)
	if _ret >= int64(0) {
		goto _4
	}

	*(*uintptr)(unsafe.Pointer(_f + 40)) = set831((*uintptr)(unsafe.Pointer(_f+56)), set831((*uintptr)(unsafe.Pointer(_f+32)), null))
	{
		p := (*uint32)(unsafe.Pointer(_f))
		*p = *p | uint32(32)
	}
	return uint64(0)

_4:
	return uint64(_ret)
}

func fn838(p uintptr) func(TLS, uintptr, uintptr, int32) int32 {
	return *(*func(TLS, uintptr, uintptr, int32) int32)(unsafe.Pointer(&p))
}

// xcookieseek is defined at fopencookie.c:73:14
func xcookieseek(tls TLS, _f uintptr /* *TFILE = S_IO_FILE */, aoff int64, _whence int32) (r int64) {
	esc := MustMalloc(8)
	var (
		_off = esc   // *int64
		_fc  uintptr // *Sfcookie
		_res int32
	)
	defer Free(esc)
	*(*int64)(unsafe.Pointer(_off)) = aoff
	_fc = *(*uintptr)(unsafe.Pointer(_f + 152))
	if uint32(_whence) <= uint32(2) {
		goto _1
	}

	*(*int32)(unsafe.Pointer(X__errno_location(tls))) = int32(22)
	return int64(-1)

_1:
	if *(*uintptr)(unsafe.Pointer((_fc + 8) + 16)) != 0 {
		goto _2
	}

	*(*int32)(unsafe.Pointer(X__errno_location(tls))) = int32(95)
	return int64(-1)

_2:
	_res = fn838(*(*uintptr)(unsafe.Pointer((_fc + 8) + 16)))(tls, *(*uintptr)(unsafe.Pointer(_fc)), _off, _whence)
	if _res >= int32(0) {
		goto _3
	}

	return int64(_res)

_3:
	return *(*int64)(unsafe.Pointer(_off))
}

type t72off_t = int64

func fn839(p uintptr) func(TLS, uintptr) int32 {
	return *(*func(TLS, uintptr) int32)(unsafe.Pointer(&p))
}

// xcookieclose is defined at fopencookie.c:91:12
func xcookieclose(tls TLS, _f uintptr /* *TFILE = S_IO_FILE */) (r int32) {
	var _fc uintptr // *Sfcookie

	_fc = *(*uintptr)(unsafe.Pointer(_f + 152))
	if *(*uintptr)(unsafe.Pointer((_fc + 8) + 24)) == 0 {
		goto _1
	}

	return fn839(*(*uintptr)(unsafe.Pointer((_fc + 8) + 24)))(tls, *(*uintptr)(unsafe.Pointer(_fc)))

_1:
	return int32(0)
}

type s99__locale_struct = struct{ Fcat [6]uintptr }

type t1FILE = s56_IO_FILE

type Sfcookie = struct {
	Fcookie  uintptr // *void
	Fiofuncs struct {
		Fread  uintptr // *Tcookie_read_function_t = func(... uintptr, uintptr, uint64) int64
		Fwrite uintptr // *Tcookie_write_function_t = func... uintptr, uintptr, uint64) int64
		Fseek  uintptr // *Tcookie_seek_function_t = func(TLS, uintptr, uintptr, int32) int32
		Fclose uintptr // *Tcookie_close_function_t = func(TLS, uintptr) int32
	}
}

// linking fprintf.o

// Xfprintf is defined at fprintf.c:4:5
func Xfprintf(tls TLS, _f uintptr /* *TFILE = S_IO_FILE */, _fmt uintptr /* *int8 */, ap ...interface{}) (r int32) {
	var (
		_ret int32
		_ap  uintptr // Tva_list = T__builtin_va_list = ...truct{Fsize int32;Fdata int8;};}
	)
	_ap = X__builtin_va_start(tls, ap)
	_ret = Xvfprintf(tls, _f, _fmt, _ap)
	X__builtin_free(tls, _ap)
	return _ret
}

type t849__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t849__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type s57_IO_FILE struct{ uintptr }

// linking fputc.o

func set840(p *uint8, v uint8) uint8 { *p = v; return v }

func postinc841(p *uintptr) uintptr { r := *p; *p += 1; return r }

// Xfputc is defined at fputc.c:3:5
func Xfputc(tls TLS, _c int32, _f uintptr /* *TFILE = S_IO_FILE */) (r int32) {
	if *(*int32)(unsafe.Pointer(_f + 140)) >= int32(0) && X__lockfile(tls, _f) != 0 {
		goto _1
	}

	return func() int32 {
		if (int32(uint8(_c)) != int32(*(*int8)(unsafe.Pointer(_f + 139)))) && (*(*uintptr)(unsafe.Pointer(_f + 40)) < *(*uintptr)(unsafe.Pointer(_f + 32))) {
			return int32(set840((*uint8)(unsafe.Pointer(postinc841((*uintptr)(unsafe.Pointer(_f+40))))), uint8(_c)))
		}
		return X__overflow(tls, _f, _c)
	}()

_1:
	_c = func() int32 {
		if (int32(uint8(_c)) != int32(*(*int8)(unsafe.Pointer(_f + 139)))) && (*(*uintptr)(unsafe.Pointer(_f + 40)) < *(*uintptr)(unsafe.Pointer(_f + 32))) {
			return int32(set840((*uint8)(unsafe.Pointer(postinc841((*uintptr)(unsafe.Pointer(_f+40))))), uint8(_c)))
		}
		return X__overflow(tls, _f, _c)
	}()
	X__unlockfile(tls, _f)
	return _c
}

type t850__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t850__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type s58_IO_FILE = struct {
	Fflags        uint32
	Frpos         uintptr // *uint8
	Frend         uintptr // *uint8
	Fclose        uintptr // *func(TLS, uintptr) int32
	Fwend         uintptr // *uint8
	Fwpos         uintptr // *uint8
	Fmustbezero_1 uintptr // *uint8
	Fwbase        uintptr // *uint8
	Fread         uintptr // *func(TLS, uintptr, uintptr, uint64) uint64
	Fwrite        uintptr // *func(TLS, uintptr, uintptr, uint64) uint64
	Fseek         uintptr // *func(TLS, uintptr, int64, int32) int64
	Fbuf          uintptr // *uint8
	Fbuf_size     uint64
	Fprev         uintptr // *TFILE = S_IO_FILE
	Fnext         uintptr // *TFILE = S_IO_FILE
	Ffd           int32
	Fpipe_pid     int32
	Flockcount    int64
	Fdummy3       int16
	Fmode         int8
	Flbf          int8
	Flock         int32
	Fwaiters      int32
	Fcookie       uintptr // *void
	Foff          int64
	Fgetln_buf    uintptr // *int8
	Fmustbezero_2 uintptr // *void
	Fshend        uintptr // *uint8
	Fshlim        int64
	Fshcnt        int64
	Fprev_locked  uintptr // *TFILE = S_IO_FILE
	Fnext_locked  uintptr // *TFILE = S_IO_FILE
	Flocale       uintptr // *S__locale_struct
}

type t230size_t = uint64

type t73off_t = int64

type s100__locale_struct = struct{ Fcat [6]uintptr }

// linking fputs.o

// Xfputs is defined at fputs.c:4:5
func Xfputs(tls TLS, _s uintptr /* *int8 */, _f uintptr /* *TFILE = S_IO_FILE */) (r int32) {
	var _l uint64

	_l = Xstrlen(tls, _s)
	return bool2int(Xfwrite(tls, _s, uint64(1), _l, _f) == _l) - int32(1)
}

type t851__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t851__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type s59_IO_FILE = struct {
	Fflags        uint32
	Frpos         uintptr // *uint8
	Frend         uintptr // *uint8
	Fclose        uintptr // *func(TLS, uintptr) int32
	Fwend         uintptr // *uint8
	Fwpos         uintptr // *uint8
	Fmustbezero_1 uintptr // *uint8
	Fwbase        uintptr // *uint8
	Fread         uintptr // *func(TLS, uintptr, uintptr, uint64) uint64
	Fwrite        uintptr // *func(TLS, uintptr, uintptr, uint64) uint64
	Fseek         uintptr // *func(TLS, uintptr, int64, int32) int64
	Fbuf          uintptr // *uint8
	Fbuf_size     uint64
	Fprev         uintptr // *TFILE = S_IO_FILE
	Fnext         uintptr // *TFILE = S_IO_FILE
	Ffd           int32
	Fpipe_pid     int32
	Flockcount    int64
	Fdummy3       int16
	Fmode         int8
	Flbf          int8
	Flock         int32
	Fwaiters      int32
	Fcookie       uintptr // *void
	Foff          int64
	Fgetln_buf    uintptr // *int8
	Fmustbezero_2 uintptr // *void
	Fshend        uintptr // *uint8
	Fshlim        int64
	Fshcnt        int64
	Fprev_locked  uintptr // *TFILE = S_IO_FILE
	Fnext_locked  uintptr // *TFILE = S_IO_FILE
	Flocale       uintptr // *S__locale_struct
}

type t231size_t = uint64

type t74off_t = int64

type s101__locale_struct = struct{ Fcat [6]uintptr }

// linking fputwc.o

func set842(p *uint8, v uint8) uint8 { *p = v; return v }

func postinc843(p *uintptr) uintptr { r := *p; *p += 1; return r }

// X__fputwc_unlocked is defined at fputwc.c:7:8
func X__fputwc_unlocked(tls TLS, _c int32, _f uintptr /* *TFILE = S_IO_FILE */) (r uint32) {
	esc := MustMalloc(4)
	var (
		_mbc  = esc // *[4]int8
		_l    int32
		_ploc uintptr // **S__locale_struct
		_loc  uintptr // Tlocale_t = *S__locale_struct
	)
	defer Free(esc)
	_ploc = x28__pthread_self(tls) + 192
	_loc = *(*uintptr)(unsafe.Pointer(_ploc))
	if int32(*(*int8)(unsafe.Pointer(_f + 138))) > int32(0) {
		goto _1
	}

	Xfwide(tls, _f, int32(1))
_1:
	*(*uintptr)(unsafe.Pointer(_ploc)) = *(*uintptr)(unsafe.Pointer(_f + 224))
	if uint32(_c) >= uint32(128) {
		goto _2
	}

	_c = func() int32 {
		if (int32(uint8(_c)) != int32(*(*int8)(unsafe.Pointer(_f + 139)))) && (*(*uintptr)(unsafe.Pointer(_f + 40)) < *(*uintptr)(unsafe.Pointer(_f + 32))) {
			return int32(set842((*uint8)(unsafe.Pointer(postinc843((*uintptr)(unsafe.Pointer(_f+40))))), uint8(_c)))
		}
		return X__overflow(tls, _f, _c)
	}()
	goto _3

_2:
	if (*(*uintptr)(unsafe.Pointer(_f + 40)) + uintptr(4)) >= *(*uintptr)(unsafe.Pointer(_f + 32)) {
		goto _4
	}

	_l = Xwctomb(tls, *(*uintptr)(unsafe.Pointer(_f + 40)), _c)
	if _l >= int32(0) {
		goto _6
	}

	_c = int32(-0x1)
	goto _7

_6:
	*(*uintptr)(unsafe.Pointer(_f + 40)) += uintptr(_l)
_7:
	goto _5

_4:
	_l = Xwctomb(tls, _mbc, _c)
	if _l >= int32(0) && X__fwritex(tls, _mbc, uint64(_l), _f) >= uint64(_l) {
		goto _8
	}

	_c = int32(-0x1)
_8:
_5:
_3:
	if uint32(_c) != uint32(0xffffffff) {
		goto _9
	}

	{
		p := (*uint32)(unsafe.Pointer(_f))
		*p = *p | uint32(32)
	}
_9:
	*(*uintptr)(unsafe.Pointer(_ploc)) = _loc
	return uint32(_c)
}

// Xfputwc is defined at fputwc.c:31:8
func Xfputwc(tls TLS, _c int32, _f uintptr /* *TFILE = S_IO_FILE */) (r uint32) {
	var ___need_unlock int32

	___need_unlock = func() int32 {
		if *(*int32)(unsafe.Pointer(_f + 140)) >= int32(0) {
			return X__lockfile(tls, _f)
		}
		return int32(0)
	}()
	_c = int32(X__fputwc_unlocked(tls, _c, _f))
	if ___need_unlock == 0 {
		goto _2
	}

	X__unlockfile(tls, _f)
_2:
	return uint32(_c)
}

type t852__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t852__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t24wchar_t = int32

type t22wint_t = uint32

type s60_IO_FILE = struct {
	Fflags        uint32
	Frpos         uintptr // *uint8
	Frend         uintptr // *uint8
	Fclose        uintptr // *func(TLS, uintptr) int32
	Fwend         uintptr // *uint8
	Fwpos         uintptr // *uint8
	Fmustbezero_1 uintptr // *uint8
	Fwbase        uintptr // *uint8
	Fread         uintptr // *func(TLS, uintptr, uintptr, uint64) uint64
	Fwrite        uintptr // *func(TLS, uintptr, uintptr, uint64) uint64
	Fseek         uintptr // *func(TLS, uintptr, int64, int32) int64
	Fbuf          uintptr // *uint8
	Fbuf_size     uint64
	Fprev         uintptr // *TFILE = S_IO_FILE
	Fnext         uintptr // *TFILE = S_IO_FILE
	Ffd           int32
	Fpipe_pid     int32
	Flockcount    int64
	Fdummy3       int16
	Fmode         int8
	Flbf          int8
	Flock         int32
	Fwaiters      int32
	Fcookie       uintptr // *void
	Foff          int64
	Fgetln_buf    uintptr // *int8
	Fmustbezero_2 uintptr // *void
	Fshend        uintptr // *uint8
	Fshlim        int64
	Fshcnt        int64
	Fprev_locked  uintptr // *TFILE = S_IO_FILE
	Fnext_locked  uintptr // *TFILE = S_IO_FILE
	Flocale       uintptr // *S__locale_struct
}

type s102__locale_struct = struct{ Fcat [6]uintptr }

// x__pthread_self is defined at pthread_arch.h:1:30
func x28__pthread_self(tls TLS) (r uintptr /* *S__pthread */) {
	return uintptr(tls)
	return r
}

type t232size_t = uint64

type t75off_t = int64

type s34__pthread = struct {
	Fself          uintptr // *S__pthread
	Fdtv           uintptr // **void
	Funused1       uintptr // *void
	Funused2       uintptr // *void
	Fsysinfo       uint64
	Fcanary        uint64
	Fcanary2       uint64
	Ftid           int32
	Ferrno_val     int32
	Fdetach_state  int32
	Fcancel        int32
	Fcanceldisable uint8
	Fcancelasync   uint8
	F74            uint8
	Fmap_base      uintptr // *uint8
	Fmap_size      uint64
	Fstack         uintptr // *void
	Fstack_size    uint64
	Fguard_size    uint64
	Fstart_arg     uintptr // *void
	Fstart         uintptr // *func(TLS, uintptr) uintptr
	Fresult        uintptr // *void
	Fcancelbuf     uintptr // *S__ptcb
	Ftsd           uintptr // **void
	Frobust_list   struct {
		Fhead    uintptr
		Foff     int64
		Fpending uintptr
	}
	Ftimer_id      int32
	Flocale        uintptr // Tlocale_t = *S__locale_struct
	Fkilllock      [1]int32
	Fdlerror_buf   uintptr // *int8
	Fstdio_locks   uintptr // *void
	Fcanary_at_end uint64
	Fdtv_copy      uintptr // **void
}

type t40uintptr_t = uint64

type s32__ptcb = struct {
	F__f    uintptr // *func(TLS, uintptr)
	F__x    uintptr // *void
	F__next uintptr // *S__ptcb
}

// linking fputws.o

func set844(p *uint64, v uint64) uint64 { *p = v; return v }

// Xfputws is defined at fputws.c:5:5
func Xfputws(tls TLS, aws uintptr, _f uintptr /* *TFILE = S_IO_FILE */) (r int32) {
	esc := MustMalloc(1040)
	var (
		_ws            = esc      // **int32
		_buf           = esc + 16 // *[1024]uint8
		_l             uint64
		_ploc          uintptr // **S__locale_struct
		_loc           uintptr // Tlocale_t = *S__locale_struct
		___need_unlock int32
	)
	defer Free(esc)
	*(*uintptr)(unsafe.Pointer(_ws)) = aws
	_l = uint64(0)
	_ploc = x29__pthread_self(tls) + 192
	_loc = *(*uintptr)(unsafe.Pointer(_ploc))
	___need_unlock = func() int32 {
		if *(*int32)(unsafe.Pointer(_f + 140)) >= int32(0) {
			return X__lockfile(tls, _f)
		}
		return int32(0)
	}()
	Xfwide(tls, _f, int32(1))
	*(*uintptr)(unsafe.Pointer(_ploc)) = *(*uintptr)(unsafe.Pointer(_f + 224))
_1:
	if *(*uintptr)(unsafe.Pointer(_ws)) == 0 || set844(&_l, Xwcsrtombs(tls, _buf, _ws, uint64(1024), null))+uint64(1) <= uint64(1) {
		goto _2
	}

	if X__fwritex(tls, _buf, _l, _f) >= _l {
		goto _3
	}

	if ___need_unlock == 0 {
		goto _5
	}

	X__unlockfile(tls, _f)
_5:
	*(*uintptr)(unsafe.Pointer(_ploc)) = _loc
	return int32(-1)

_3:
	goto _1

_2:
	if ___need_unlock == 0 {
		goto _7
	}

	X__unlockfile(tls, _f)
_7:
	*(*uintptr)(unsafe.Pointer(_ploc)) = _loc
	return int32(_l)
}

type t853__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t853__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type s61_IO_FILE = struct {
	Fflags        uint32
	Frpos         uintptr // *uint8
	Frend         uintptr // *uint8
	Fclose        uintptr // *func(TLS, uintptr) int32
	Fwend         uintptr // *uint8
	Fwpos         uintptr // *uint8
	Fmustbezero_1 uintptr // *uint8
	Fwbase        uintptr // *uint8
	Fread         uintptr // *func(TLS, uintptr, uintptr, uint64) uint64
	Fwrite        uintptr // *func(TLS, uintptr, uintptr, uint64) uint64
	Fseek         uintptr // *func(TLS, uintptr, int64, int32) int64
	Fbuf          uintptr // *uint8
	Fbuf_size     uint64
	Fprev         uintptr // *TFILE = S_IO_FILE
	Fnext         uintptr // *TFILE = S_IO_FILE
	Ffd           int32
	Fpipe_pid     int32
	Flockcount    int64
	Fdummy3       int16
	Fmode         int8
	Flbf          int8
	Flock         int32
	Fwaiters      int32
	Fcookie       uintptr // *void
	Foff          int64
	Fgetln_buf    uintptr // *int8
	Fmustbezero_2 uintptr // *void
	Fshend        uintptr // *uint8
	Fshlim        int64
	Fshcnt        int64
	Fprev_locked  uintptr // *TFILE = S_IO_FILE
	Fnext_locked  uintptr // *TFILE = S_IO_FILE
	Flocale       uintptr // *S__locale_struct
}

type t25wchar_t = int32

type t233size_t = uint64

type s103__locale_struct = struct{ Fcat [6]uintptr }

// x__pthread_self is defined at pthread_arch.h:1:30
func x29__pthread_self(tls TLS) (r uintptr /* *S__pthread */) {
	return uintptr(tls)
	return r
}

type t76off_t = int64

type s35__pthread = struct {
	Fself          uintptr // *S__pthread
	Fdtv           uintptr // **void
	Funused1       uintptr // *void
	Funused2       uintptr // *void
	Fsysinfo       uint64
	Fcanary        uint64
	Fcanary2       uint64
	Ftid           int32
	Ferrno_val     int32
	Fdetach_state  int32
	Fcancel        int32
	Fcanceldisable uint8
	Fcancelasync   uint8
	F74            uint8
	Fmap_base      uintptr // *uint8
	Fmap_size      uint64
	Fstack         uintptr // *void
	Fstack_size    uint64
	Fguard_size    uint64
	Fstart_arg     uintptr // *void
	Fstart         uintptr // *func(TLS, uintptr) uintptr
	Fresult        uintptr // *void
	Fcancelbuf     uintptr // *S__ptcb
	Ftsd           uintptr // **void
	Frobust_list   struct {
		Fhead    uintptr
		Foff     int64
		Fpending uintptr
	}
	Ftimer_id      int32
	Flocale        uintptr // Tlocale_t = *S__locale_struct
	Fkilllock      [1]int32
	Fdlerror_buf   uintptr // *int8
	Fstdio_locks   uintptr // *void
	Fcanary_at_end uint64
	Fdtv_copy      uintptr // **void
}

type t41uintptr_t = uint64

type s33__ptcb = struct {
	F__f    uintptr // *func(TLS, uintptr)
	F__x    uintptr // *void
	F__next uintptr // *S__ptcb
}

// linking fread.o

func fn845(p uintptr) func(TLS, uintptr, uintptr, uint64) uint64 {
	return *(*func(TLS, uintptr, uintptr, uint64) uint64)(unsafe.Pointer(&p))
}

// Xfread is defined at fread.c:6:8
func Xfread(tls TLS, _destv uintptr /* *void */, _size uint64, _nmemb uint64, _f uintptr /* *TFILE = S_IO_FILE */) (r uint64) {
	var (
		_dest          uintptr // *uint8
		_len           uint64
		_l             uint64
		_k             uint64
		___need_unlock int32
	)
	_dest = _destv
	_len = _size * _nmemb
	_l = _len
	if _size != 0 {
		goto _1
	}

	_nmemb = uint64(0)
_1:
	___need_unlock = func() int32 {
		if *(*int32)(unsafe.Pointer(_f + 140)) >= int32(0) {
			return X__lockfile(tls, _f)
		}
		return int32(0)
	}()
	{
		p := (*int8)(unsafe.Pointer(_f + 138))
		*p = int8(int32(*p) | (int32(*(*int8)(unsafe.Pointer(_f + 138))) - int32(1)))
	}
	if int64(*(*uintptr)(unsafe.Pointer(_f + 16))-*(*uintptr)(unsafe.Pointer(_f + 8))) <= int64(0) {
		goto _2
	}

	_k = func() uint64 {
		if uint64(int64(*(*uintptr)(unsafe.Pointer(_f + 16))-*(*uintptr)(unsafe.Pointer(_f + 8)))) < _l {
			return uint64(int64(*(*uintptr)(unsafe.Pointer(_f + 16)) - *(*uintptr)(unsafe.Pointer(_f + 8))))
		}
		return _l
	}()
	Xmemcpy(tls, _dest, *(*uintptr)(unsafe.Pointer(_f + 8)), _k)
	*(*uintptr)(unsafe.Pointer(_f + 8)) += uintptr(_k)
	_dest += uintptr(_k)
	_l = _l - _k
_2:
_3:
	if _l == 0 {
		goto _5
	}

	_k = func() uint64 {
		if X__toread(tls, _f) != 0 {
			return uint64(0)
		}
		return fn845(*(*uintptr)(unsafe.Pointer(_f + 64)))(tls, _f, _dest, _l)
	}()
	if _k != 0 {
		goto _6
	}

	if ___need_unlock == 0 {
		goto _8
	}

	X__unlockfile(tls, _f)
_8:
	return (_len - _l) / _size

_6:
	_l = _l - _k
	_dest += uintptr(_k)
	goto _3

_5:
	if ___need_unlock == 0 {
		goto _10
	}

	X__unlockfile(tls, _f)
_10:
	return _nmemb
}

type t854__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t854__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t234size_t = uint64

type s62_IO_FILE = struct {
	Fflags        uint32
	Frpos         uintptr // *uint8
	Frend         uintptr // *uint8
	Fclose        uintptr // *func(TLS, uintptr) int32
	Fwend         uintptr // *uint8
	Fwpos         uintptr // *uint8
	Fmustbezero_1 uintptr // *uint8
	Fwbase        uintptr // *uint8
	Fread         uintptr // *func(TLS, uintptr, uintptr, uint64) uint64
	Fwrite        uintptr // *func(TLS, uintptr, uintptr, uint64) uint64
	Fseek         uintptr // *func(TLS, uintptr, int64, int32) int64
	Fbuf          uintptr // *uint8
	Fbuf_size     uint64
	Fprev         uintptr // *TFILE = S_IO_FILE
	Fnext         uintptr // *TFILE = S_IO_FILE
	Ffd           int32
	Fpipe_pid     int32
	Flockcount    int64
	Fdummy3       int16
	Fmode         int8
	Flbf          int8
	Flock         int32
	Fwaiters      int32
	Fcookie       uintptr // *void
	Foff          int64
	Fgetln_buf    uintptr // *int8
	Fmustbezero_2 uintptr // *void
	Fshend        uintptr // *uint8
	Fshlim        int64
	Fshcnt        int64
	Fprev_locked  uintptr // *TFILE = S_IO_FILE
	Fnext_locked  uintptr // *TFILE = S_IO_FILE
	Flocale       uintptr // *S__locale_struct
}

type t77off_t = int64

type s104__locale_struct = struct{ Fcat [6]uintptr }

// linking freopen.o

// Xfreopen is defined at freopen.c:14:6
func Xfreopen(tls TLS, _filename uintptr /* *int8 */, _mode uintptr /* *int8 */, _f uintptr /* *TFILE = S_IO_FILE */) (r uintptr /* *TFILE = S_IO_FILE */) {
	var (
		_fl            int32
		_f2            uintptr // *TFILE = S_IO_FILE
		___need_unlock int32
	)
	_fl = X__fmodeflags(tls, _mode)
	___need_unlock = func() int32 {
		if *(*int32)(unsafe.Pointer(_f + 140)) >= int32(0) {
			return X__lockfile(tls, _f)
		}
		return int32(0)
	}()
	Xfflush(tls, _f)
	if _filename != 0 {
		goto _1
	}

	if (_fl & int32(02000000)) == 0 {
		goto _3
	}

	x52__syscall3(tls, int64(72), int64(*(*int32)(unsafe.Pointer(_f + 120))), int64(2), int64(1))
_3:
	_fl = _fl & int32(-524481)
	if X__syscall_ret(tls, uint64(x52__syscall3(tls, int64(72), int64(*(*int32)(unsafe.Pointer(_f + 120))), int64(4), int64(_fl)))) >= int64(0) {
		goto _4
	}

	goto lfail

_4:
	goto _2

_1:
	_f2 = Xfopen(tls, _filename, _mode)
	if _f2 != 0 {
		goto _5
	}

	goto lfail

_5:
	if *(*int32)(unsafe.Pointer(_f2 + 120)) != *(*int32)(unsafe.Pointer(_f + 120)) {
		goto _6
	}

	*(*int32)(unsafe.Pointer(_f2 + 120)) = int32(-1)
	goto _7

_6:
	if X__dup3(tls, *(*int32)(unsafe.Pointer(_f2 + 120)), *(*int32)(unsafe.Pointer(_f + 120)), _fl&int32(02000000)) >= int32(0) {
		goto _8
	}

	goto lfail2

_8:
_7:
	*(*uint32)(unsafe.Pointer(_f)) = *(*uint32)(unsafe.Pointer(_f))&uint32(1) | *(*uint32)(unsafe.Pointer(_f2))
	*(*uintptr)(unsafe.Pointer(_f + 64)) = *(*uintptr)(unsafe.Pointer(_f2 + 64))
	*(*uintptr)(unsafe.Pointer(_f + 72)) = *(*uintptr)(unsafe.Pointer(_f2 + 72))
	*(*uintptr)(unsafe.Pointer(_f + 80)) = *(*uintptr)(unsafe.Pointer(_f2 + 80))
	*(*uintptr)(unsafe.Pointer(_f + 24)) = *(*uintptr)(unsafe.Pointer(_f2 + 24))
	Xfclose(tls, _f2)
_2:
	if ___need_unlock == 0 {
		goto _10
	}

	X__unlockfile(tls, _f)
_10:
	return _f

	goto lfail2
lfail2:
	Xfclose(tls, _f2)
	goto lfail
lfail:
	Xfclose(tls, _f)
	return null
}

type t855__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t855__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type s63_IO_FILE = struct {
	Fflags        uint32
	Frpos         uintptr // *uint8
	Frend         uintptr // *uint8
	Fclose        uintptr // *func(TLS, uintptr) int32
	Fwend         uintptr // *uint8
	Fwpos         uintptr // *uint8
	Fmustbezero_1 uintptr // *uint8
	Fwbase        uintptr // *uint8
	Fread         uintptr // *func(TLS, uintptr, uintptr, uint64) uint64
	Fwrite        uintptr // *func(TLS, uintptr, uintptr, uint64) uint64
	Fseek         uintptr // *func(TLS, uintptr, int64, int32) int64
	Fbuf          uintptr // *uint8
	Fbuf_size     uint64
	Fprev         uintptr // *TFILE = S_IO_FILE
	Fnext         uintptr // *TFILE = S_IO_FILE
	Ffd           int32
	Fpipe_pid     int32
	Flockcount    int64
	Fdummy3       int16
	Fmode         int8
	Flbf          int8
	Flock         int32
	Fwaiters      int32
	Fcookie       uintptr // *void
	Foff          int64
	Fgetln_buf    uintptr // *int8
	Fmustbezero_2 uintptr // *void
	Fshend        uintptr // *uint8
	Fshlim        int64
	Fshcnt        int64
	Fprev_locked  uintptr // *TFILE = S_IO_FILE
	Fnext_locked  uintptr // *TFILE = S_IO_FILE
	Flocale       uintptr // *S__locale_struct
}

// x__syscall3 is defined at syscall_arch.h:33:22
func x52__syscall3(tls TLS, _n int64, _a1 int64, _a2 int64, _a3 int64) (r int64) {
	return X__syscall(tls, _n, _a1, _a2, _a3, int64(0), int64(0), int64(0))
}

type t235size_t = uint64

type t78off_t = int64

type s105__locale_struct = struct{ Fcat [6]uintptr }

// linking fscanf.o

// Xfscanf is defined at fscanf.c:5:5
func Xfscanf(tls TLS, _f uintptr /* *TFILE = S_IO_FILE */, _fmt uintptr /* *int8 */, ap ...interface{}) (r int32) {
	var (
		_ret int32
		_ap  uintptr // Tva_list = T__builtin_va_list = ...truct{Fsize int32;Fdata int8;};}
	)
	_ap = X__builtin_va_start(tls, ap)
	_ret = Xvfscanf(tls, _f, _fmt, _ap)
	X__builtin_free(tls, _ap)
	return _ret
}

type t856__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t856__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type s64_IO_FILE struct{ uintptr }

// linking fseek.o

func fn846(p uintptr) func(TLS, uintptr, uintptr, uint64) uint64 {
	return *(*func(TLS, uintptr, uintptr, uint64) uint64)(unsafe.Pointer(&p))
}

func set847(p *uintptr, v uintptr) uintptr { *p = v; return v }

func fn848(p uintptr) func(TLS, uintptr, int64, int32) int64 {
	return *(*func(TLS, uintptr, int64, int32) int64)(unsafe.Pointer(&p))
}

// X__fseeko_unlocked is defined at fseek.c:3:5
func X__fseeko_unlocked(tls TLS, _f uintptr /* *TFILE = S_IO_FILE */, _off int64, _whence int32) (r int32) {
	if _whence != int32(1) {
		goto _1
	}

	_off = _off - int64(*(*uintptr)(unsafe.Pointer(_f + 16))-*(*uintptr)(unsafe.Pointer(_f + 8)))
_1:
	if *(*uintptr)(unsafe.Pointer(_f + 40)) <= *(*uintptr)(unsafe.Pointer(_f + 56)) {
		goto _2
	}

	fn846(*(*uintptr)(unsafe.Pointer(_f + 72)))(tls, _f, null, uint64(0))
	if *(*uintptr)(unsafe.Pointer(_f + 40)) != 0 {
		goto _3
	}

	return int32(-1)

_3:
_2:
	*(*uintptr)(unsafe.Pointer(_f + 40)) = set847((*uintptr)(unsafe.Pointer(_f+56)), set847((*uintptr)(unsafe.Pointer(_f+32)), null))
	if fn848(*(*uintptr)(unsafe.Pointer(_f + 80)))(tls, _f, _off, _whence) >= int64(0) {
		goto _4
	}

	return int32(-1)

_4:
	*(*uintptr)(unsafe.Pointer(_f + 8)) = set847((*uintptr)(unsafe.Pointer(_f+16)), null)
	{
		p := (*uint32)(unsafe.Pointer(_f))
		*p = *p & uint32(4294967279)
	}
	return int32(0)
}

// X__fseeko is defined at fseek.c:27:5
func X__fseeko(tls TLS, _f uintptr /* *TFILE = S_IO_FILE */, _off int64, _whence int32) (r int32) {
	var (
		_result        int32
		___need_unlock int32
	)
	___need_unlock = func() int32 {
		if *(*int32)(unsafe.Pointer(_f + 140)) >= int32(0) {
			return X__lockfile(tls, _f)
		}
		return int32(0)
	}()
	_result = X__fseeko_unlocked(tls, _f, _off, _whence)
	if ___need_unlock == 0 {
		goto _2
	}

	X__unlockfile(tls, _f)
_2:
	return _result
}

// Xfseek is defined at fseek.c:36:5
func Xfseek(tls TLS, _f uintptr /* *TFILE = S_IO_FILE */, _off int64, _whence int32) (r int32) {
	return X__fseeko(tls, _f, _off, _whence)
}

type t857__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t857__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t79off_t = int64

type s65_IO_FILE = struct {
	Fflags        uint32
	Frpos         uintptr // *uint8
	Frend         uintptr // *uint8
	Fclose        uintptr // *func(TLS, uintptr) int32
	Fwend         uintptr // *uint8
	Fwpos         uintptr // *uint8
	Fmustbezero_1 uintptr // *uint8
	Fwbase        uintptr // *uint8
	Fread         uintptr // *func(TLS, uintptr, uintptr, uint64) uint64
	Fwrite        uintptr // *func(TLS, uintptr, uintptr, uint64) uint64
	Fseek         uintptr // *func(TLS, uintptr, int64, int32) int64
	Fbuf          uintptr // *uint8
	Fbuf_size     uint64
	Fprev         uintptr // *TFILE = S_IO_FILE
	Fnext         uintptr // *TFILE = S_IO_FILE
	Ffd           int32
	Fpipe_pid     int32
	Flockcount    int64
	Fdummy3       int16
	Fmode         int8
	Flbf          int8
	Flock         int32
	Fwaiters      int32
	Fcookie       uintptr // *void
	Foff          int64
	Fgetln_buf    uintptr // *int8
	Fmustbezero_2 uintptr // *void
	Fshend        uintptr // *uint8
	Fshlim        int64
	Fshcnt        int64
	Fprev_locked  uintptr // *TFILE = S_IO_FILE
	Fnext_locked  uintptr // *TFILE = S_IO_FILE
	Flocale       uintptr // *S__locale_struct
}

type t236size_t = uint64

type s106__locale_struct = struct{ Fcat [6]uintptr }

// linking fsetpos.o

// Xfsetpos is defined at fsetpos.c:3:5
func Xfsetpos(tls TLS, _f uintptr /* *TFILE = S_IO_FILE */, _pos uintptr /* *Tfpos_t = struct{F__opaque [0][...n [0]float64;F int64; _ [8]byte} */) (r int32) {
	return X__fseeko(tls, _f, *(*int64)(unsafe.Pointer(_pos)), int32(0))
}

type t858__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t858__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type s66_IO_FILE = struct {
	Fflags        uint32
	Frpos         uintptr // *uint8
	Frend         uintptr // *uint8
	Fclose        uintptr // *func(TLS, uintptr) int32
	Fwend         uintptr // *uint8
	Fwpos         uintptr // *uint8
	Fmustbezero_1 uintptr // *uint8
	Fwbase        uintptr // *uint8
	Fread         uintptr // *func(TLS, uintptr, uintptr, uint64) uint64
	Fwrite        uintptr // *func(TLS, uintptr, uintptr, uint64) uint64
	Fseek         uintptr // *func(TLS, uintptr, int64, int32) int64
	Fbuf          uintptr // *uint8
	Fbuf_size     uint64
	Fprev         uintptr // *TFILE = S_IO_FILE
	Fnext         uintptr // *TFILE = S_IO_FILE
	Ffd           int32
	Fpipe_pid     int32
	Flockcount    int64
	Fdummy3       int16
	Fmode         int8
	Flbf          int8
	Flock         int32
	Fwaiters      int32
	Fcookie       uintptr // *void
	Foff          int64
	Fgetln_buf    uintptr // *int8
	Fmustbezero_2 uintptr // *void
	Fshend        uintptr // *uint8
	Fshlim        int64
	Fshcnt        int64
	Fprev_locked  uintptr // *TFILE = S_IO_FILE
	Fnext_locked  uintptr // *TFILE = S_IO_FILE
	Flocale       uintptr // *S__locale_struct
}

type t237size_t = uint64

type t80off_t = int64

type s107__locale_struct = struct{ Fcat [6]uintptr }

// linking ftell.o

func fn849(p uintptr) func(TLS, uintptr, int64, int32) int64 {
	return *(*func(TLS, uintptr, int64, int32) int64)(unsafe.Pointer(&p))
}

// X__ftello_unlocked is defined at ftell.c:5:7
func X__ftello_unlocked(tls TLS, _f uintptr /* *TFILE = S_IO_FILE */) (r int64) {
	var _pos int64

	_pos = fn849(*(*uintptr)(unsafe.Pointer(_f + 80)))(tls, _f, int64(0), func() int32 {
		if (*(*uint32)(unsafe.Pointer(_f))&uint32(128) != 0) && (*(*uintptr)(unsafe.Pointer(_f + 40)) > *(*uintptr)(unsafe.Pointer(_f + 56))) {
			return int32(2)
		}
		return int32(1)
	}())
	if _pos >= int64(0) {
		goto _1
	}

	return _pos

_1:
	return _pos - int64(*(*uintptr)(unsafe.Pointer(_f + 16))-*(*uintptr)(unsafe.Pointer(_f + 8))) + int64(*(*uintptr)(unsafe.Pointer(_f + 40))-*(*uintptr)(unsafe.Pointer(_f + 56)))
}

// X__ftello is defined at ftell.c:16:7
func X__ftello(tls TLS, _f uintptr /* *TFILE = S_IO_FILE */) (r int64) {
	var (
		_pos           int64
		___need_unlock int32
	)
	___need_unlock = func() int32 {
		if *(*int32)(unsafe.Pointer(_f + 140)) >= int32(0) {
			return X__lockfile(tls, _f)
		}
		return int32(0)
	}()
	_pos = X__ftello_unlocked(tls, _f)
	if ___need_unlock == 0 {
		goto _2
	}

	X__unlockfile(tls, _f)
_2:
	return _pos
}

// Xftell is defined at ftell.c:25:6
func Xftell(tls TLS, _f uintptr /* *TFILE = S_IO_FILE */) (r int64) {
	var _pos int64

	_pos = X__ftello(tls, _f)
	if _pos <= int64(0x7fffffffffffffff) {
		goto _1
	}

	*(*int32)(unsafe.Pointer(X__errno_location(tls))) = int32(75)
	return int64(-1)

_1:
	return _pos
}

type t859__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t859__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t81off_t = int64

type s67_IO_FILE = struct {
	Fflags        uint32
	Frpos         uintptr // *uint8
	Frend         uintptr // *uint8
	Fclose        uintptr // *func(TLS, uintptr) int32
	Fwend         uintptr // *uint8
	Fwpos         uintptr // *uint8
	Fmustbezero_1 uintptr // *uint8
	Fwbase        uintptr // *uint8
	Fread         uintptr // *func(TLS, uintptr, uintptr, uint64) uint64
	Fwrite        uintptr // *func(TLS, uintptr, uintptr, uint64) uint64
	Fseek         uintptr // *func(TLS, uintptr, int64, int32) int64
	Fbuf          uintptr // *uint8
	Fbuf_size     uint64
	Fprev         uintptr // *TFILE = S_IO_FILE
	Fnext         uintptr // *TFILE = S_IO_FILE
	Ffd           int32
	Fpipe_pid     int32
	Flockcount    int64
	Fdummy3       int16
	Fmode         int8
	Flbf          int8
	Flock         int32
	Fwaiters      int32
	Fcookie       uintptr // *void
	Foff          int64
	Fgetln_buf    uintptr // *int8
	Fmustbezero_2 uintptr // *void
	Fshend        uintptr // *uint8
	Fshlim        int64
	Fshcnt        int64
	Fprev_locked  uintptr // *TFILE = S_IO_FILE
	Fnext_locked  uintptr // *TFILE = S_IO_FILE
	Flocale       uintptr // *S__locale_struct
}

type t238size_t = uint64

type s108__locale_struct = struct{ Fcat [6]uintptr }

// linking ftrylockfile.o

// X__do_orphaned_stdio_locks is defined at ftrylockfile.c:7:6
func X__do_orphaned_stdio_locks(tls TLS) {
	var _f uintptr // *TFILE = S_IO_FILE

	_f = *(*uintptr)(unsafe.Pointer(x30__pthread_self(tls) + 216))
_1:
	if _f == 0 {
		goto _3
	}

	x2a_store(tls, _f+140, int32(0x40000000))
	_f = *(*uintptr)(unsafe.Pointer(_f + 216))
	goto _1

_3:
}

// X__unlist_locked_file is defined at ftrylockfile.c:14:6
func X__unlist_locked_file(tls TLS, _f uintptr /* *TFILE = S_IO_FILE */) {
	if *(*int64)(unsafe.Pointer(_f + 128)) == 0 {
		goto _1
	}

	if *(*uintptr)(unsafe.Pointer(_f + 216)) == 0 {
		goto _2
	}

	*(*uintptr)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_f + 216)) + 208)) = *(*uintptr)(unsafe.Pointer(_f + 208))
_2:
	if *(*uintptr)(unsafe.Pointer(_f + 208)) == 0 {
		goto _3
	}

	*(*uintptr)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_f + 208)) + 216)) = *(*uintptr)(unsafe.Pointer(_f + 216))
	goto _4

_3:
	*(*uintptr)(unsafe.Pointer(x30__pthread_self(tls) + 216)) = *(*uintptr)(unsafe.Pointer(_f + 216))
_4:
_1:
}

// X__register_locked_file is defined at ftrylockfile.c:23:6
func X__register_locked_file(tls TLS, _f uintptr /* *TFILE = S_IO_FILE */, _self uintptr /* Tpthread_t = *S__pthread */) {
	*(*int64)(unsafe.Pointer(_f + 128)) = int64(1)
	*(*uintptr)(unsafe.Pointer(_f + 208)) = null
	*(*uintptr)(unsafe.Pointer(_f + 216)) = *(*uintptr)(unsafe.Pointer(_self + 216))
	if *(*uintptr)(unsafe.Pointer(_f + 216)) == 0 {
		goto _1
	}

	*(*uintptr)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_f + 216)) + 208)) = _f
_1:
	*(*uintptr)(unsafe.Pointer(_self + 216)) = _f
}

func set850(p *int32, v int32) int32 { *p = v; return v }

// Xftrylockfile is defined at ftrylockfile.c:32:5
func Xftrylockfile(tls TLS, _f uintptr /* *TFILE = S_IO_FILE */) (r int32) {
	var (
		_self  uintptr // Tpthread_t = *S__pthread
		_tid   int32
		_owner int32
	)
	_self = x30__pthread_self(tls)
	_tid = *(*int32)(unsafe.Pointer(_self + 56))
	_owner = *(*int32)(unsafe.Pointer(_f + 140))
	if _owner&int32(-1073741825) != _tid {
		goto _1
	}

	if *(*int64)(unsafe.Pointer(_f + 128)) != int64(0x7fffffffffffffff) {
		goto _2
	}

	return int32(-1)

_2:
	*(*int64)(unsafe.Pointer(_f + 128))++
	return int32(0)

_1:
	if _owner >= int32(0) {
		goto _3
	}

	*(*int32)(unsafe.Pointer(_f + 140)) = set850(&_owner, int32(0))
_3:
	if _owner == 0 && x3a_cas(tls, _f+140, int32(0), _tid) == 0 {
		goto _4
	}

	return int32(-1)

_4:
	X__register_locked_file(tls, _f, _self)
	return int32(0)
}

type t860__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t860__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type s68_IO_FILE = struct {
	Fflags        uint32
	Frpos         uintptr // *uint8
	Frend         uintptr // *uint8
	Fclose        uintptr // *func(TLS, uintptr) int32
	Fwend         uintptr // *uint8
	Fwpos         uintptr // *uint8
	Fmustbezero_1 uintptr // *uint8
	Fwbase        uintptr // *uint8
	Fread         uintptr // *func(TLS, uintptr, uintptr, uint64) uint64
	Fwrite        uintptr // *func(TLS, uintptr, uintptr, uint64) uint64
	Fseek         uintptr // *func(TLS, uintptr, int64, int32) int64
	Fbuf          uintptr // *uint8
	Fbuf_size     uint64
	Fprev         uintptr // *TFILE = S_IO_FILE
	Fnext         uintptr // *TFILE = S_IO_FILE
	Ffd           int32
	Fpipe_pid     int32
	Flockcount    int64
	Fdummy3       int16
	Fmode         int8
	Flbf          int8
	Flock         int32
	Fwaiters      int32
	Fcookie       uintptr // *void
	Foff          int64
	Fgetln_buf    uintptr // *int8
	Fmustbezero_2 uintptr // *void
	Fshend        uintptr // *uint8
	Fshlim        int64
	Fshcnt        int64
	Fprev_locked  uintptr // *TFILE = S_IO_FILE
	Fnext_locked  uintptr // *TFILE = S_IO_FILE
	Flocale       uintptr // *S__locale_struct
}

// x__pthread_self is defined at pthread_arch.h:1:30
func x30__pthread_self(tls TLS) (r uintptr /* *S__pthread */) {
	return uintptr(tls)
	return r
}

// xa_store is defined at atomic_arch.h:98:20
func x2a_store(tls TLS, _p uintptr /* *int32 */, _x int32) {
	X__assert_fail(tls, ts+0 /* "TODO(ccgo)" */, ts+36 /* "arch/x86_64/atom..." */, int32(100), x851__func__)
}

type s36__pthread = struct {
	Fself          uintptr // *S__pthread
	Fdtv           uintptr // **void
	Funused1       uintptr // *void
	Funused2       uintptr // *void
	Fsysinfo       uint64
	Fcanary        uint64
	Fcanary2       uint64
	Ftid           int32
	Ferrno_val     int32
	Fdetach_state  int32
	Fcancel        int32
	Fcanceldisable uint8
	Fcancelasync   uint8
	F74            uint8
	Fmap_base      uintptr // *uint8
	Fmap_size      uint64
	Fstack         uintptr // *void
	Fstack_size    uint64
	Fguard_size    uint64
	Fstart_arg     uintptr // *void
	Fstart         uintptr // *func(TLS, uintptr) uintptr
	Fresult        uintptr // *void
	Fcancelbuf     uintptr // *S__ptcb
	Ftsd           uintptr // **void
	Frobust_list   struct {
		Fhead    uintptr
		Foff     int64
		Fpending uintptr
	}
	Ftimer_id      int32
	Flocale        uintptr // Tlocale_t = *S__locale_struct
	Fkilllock      [1]int32
	Fdlerror_buf   uintptr // *int8
	Fstdio_locks   uintptr // *void
	Fcanary_at_end uint64
	Fdtv_copy      uintptr // **void
}

// xa_cas is defined at atomic_arch.h:4:19
func x3a_cas(tls TLS, _p uintptr /* *int32 */, _t int32, _s int32) (r int32) {
	return a_cas(_p, _t, _s)
	return r
}

type t239size_t = uint64

type t82off_t = int64

type s109__locale_struct = struct{ Fcat [6]uintptr }

// x4__func__ [8]int8, escapes: true, atomic_arch.h:99:1
var x851__func__ = ds + 44632

type t42uintptr_t = uint64

type s34__ptcb = struct {
	F__f    uintptr // *func(TLS, uintptr)
	F__x    uintptr // *void
	F__next uintptr // *S__ptcb
}

// linking funlockfile.o

// Xfunlockfile is defined at funlockfile.c:6:6
func Xfunlockfile(tls TLS, _f uintptr /* *TFILE = S_IO_FILE */) {
	if *(*int64)(unsafe.Pointer(_f + 128)) != int64(1) {
		goto _1
	}

	X__unlist_locked_file(tls, _f)
	*(*int64)(unsafe.Pointer(_f + 128)) = int64(0)
	X__unlockfile(tls, _f)
	goto _2

_1:
	*(*int64)(unsafe.Pointer(_f + 128))--
_2:
}

type t861__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t861__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type s69_IO_FILE = struct {
	Fflags        uint32
	Frpos         uintptr // *uint8
	Frend         uintptr // *uint8
	Fclose        uintptr // *func(TLS, uintptr) int32
	Fwend         uintptr // *uint8
	Fwpos         uintptr // *uint8
	Fmustbezero_1 uintptr // *uint8
	Fwbase        uintptr // *uint8
	Fread         uintptr // *func(TLS, uintptr, uintptr, uint64) uint64
	Fwrite        uintptr // *func(TLS, uintptr, uintptr, uint64) uint64
	Fseek         uintptr // *func(TLS, uintptr, int64, int32) int64
	Fbuf          uintptr // *uint8
	Fbuf_size     uint64
	Fprev         uintptr // *TFILE = S_IO_FILE
	Fnext         uintptr // *TFILE = S_IO_FILE
	Ffd           int32
	Fpipe_pid     int32
	Flockcount    int64
	Fdummy3       int16
	Fmode         int8
	Flbf          int8
	Flock         int32
	Fwaiters      int32
	Fcookie       uintptr // *void
	Foff          int64
	Fgetln_buf    uintptr // *int8
	Fmustbezero_2 uintptr // *void
	Fshend        uintptr // *uint8
	Fshlim        int64
	Fshcnt        int64
	Fprev_locked  uintptr // *TFILE = S_IO_FILE
	Fnext_locked  uintptr // *TFILE = S_IO_FILE
	Flocale       uintptr // *S__locale_struct
}

type t240size_t = uint64

type t83off_t = int64

type s110__locale_struct = struct{ Fcat [6]uintptr }

// linking fwide.o

// Xfwide is defined at fwide.c:5:5
func Xfwide(tls TLS, _f uintptr /* *TFILE = S_IO_FILE */, _mode int32) (r int32) {
	var ___need_unlock int32

	___need_unlock = func() int32 {
		if *(*int32)(unsafe.Pointer(_f + 140)) >= int32(0) {
			return X__lockfile(tls, _f)
		}
		return int32(0)
	}()
	if _mode == 0 {
		goto _1
	}

	X__assert_fail(tls, ts+0 /* "TODO(ccgo)" */, ts+4432 /* "src/stdio/fwide...." */, int32(9), x852__func__)
	X__assert_fail(tls, ts+0 /* "TODO(ccgo)" */, ts+4432 /* "src/stdio/fwide...." */, int32(11), x852__func__)
	if *(*int8)(unsafe.Pointer(_f + 138)) != 0 {
		goto _2
	}

	*(*int8)(unsafe.Pointer(_f + 138)) = int8(func() int32 {
		if _mode > int32(0) {
			return int32(1)
		}
		return int32(-1)
	}())
_2:
_1:
	_mode = int32(*(*int8)(unsafe.Pointer(_f + 138)))
	if ___need_unlock == 0 {
		goto _4
	}

	X__unlockfile(tls, _f)
_4:
	return _mode
}

type t862__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t862__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type s70_IO_FILE = struct {
	Fflags        uint32
	Frpos         uintptr // *uint8
	Frend         uintptr // *uint8
	Fclose        uintptr // *func(TLS, uintptr) int32
	Fwend         uintptr // *uint8
	Fwpos         uintptr // *uint8
	Fmustbezero_1 uintptr // *uint8
	Fwbase        uintptr // *uint8
	Fread         uintptr // *func(TLS, uintptr, uintptr, uint64) uint64
	Fwrite        uintptr // *func(TLS, uintptr, uintptr, uint64) uint64
	Fseek         uintptr // *func(TLS, uintptr, int64, int32) int64
	Fbuf          uintptr // *uint8
	Fbuf_size     uint64
	Fprev         uintptr // *TFILE = S_IO_FILE
	Fnext         uintptr // *TFILE = S_IO_FILE
	Ffd           int32
	Fpipe_pid     int32
	Flockcount    int64
	Fdummy3       int16
	Fmode         int8
	Flbf          int8
	Flock         int32
	Fwaiters      int32
	Fcookie       uintptr // *void
	Foff          int64
	Fgetln_buf    uintptr // *int8
	Fmustbezero_2 uintptr // *void
	Fshend        uintptr // *uint8
	Fshlim        int64
	Fshcnt        int64
	Fprev_locked  uintptr // *TFILE = S_IO_FILE
	Fnext_locked  uintptr // *TFILE = S_IO_FILE
	Flocale       uintptr // *S__locale_struct
}

// x1__func__ [6]int8, escapes: true, fwide.c:6:1
var x852__func__ = ds + 44640

type t241size_t = uint64

type t84off_t = int64

type s111__locale_struct = struct{ Fcat [6]uintptr }

// linking fwprintf.o

// Xfwprintf is defined at fwprintf.c:5:5
func Xfwprintf(tls TLS, _f uintptr /* *TFILE = S_IO_FILE */, _fmt uintptr /* *Twchar_t = int32 */, ap ...interface{}) (r int32) {
	var (
		_ret int32
		_ap  uintptr // Tva_list = T__builtin_va_list = ...truct{Fsize int32;Fdata int8;};}
	)
	_ap = X__builtin_va_start(tls, ap)
	_ret = Xvfwprintf(tls, _f, _fmt, _ap)
	X__builtin_free(tls, _ap)
	return _ret
}

type t863__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t863__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type s71_IO_FILE struct{ uintptr }

// linking fwrite.o

func fn853(p uintptr) func(TLS, uintptr, uintptr, uint64) uint64 {
	return *(*func(TLS, uintptr, uintptr, uint64) uint64)(unsafe.Pointer(&p))
}

// X__fwritex is defined at fwrite.c:4:8
func X__fwritex(tls TLS, _s uintptr /* *uint8 */, _l uint64, _f uintptr /* *TFILE = S_IO_FILE */) (r uint64) {
	var (
		_i uint64
		_n uint64
	)
	_i = uint64(0)
	if *(*uintptr)(unsafe.Pointer(_f + 32)) != 0 || X__towrite(tls, _f) == 0 {
		goto _1
	}

	return uint64(0)

_1:
	if _l <= uint64(int64(*(*uintptr)(unsafe.Pointer(_f + 32))-*(*uintptr)(unsafe.Pointer(_f + 40)))) {
		goto _2
	}

	return fn853(*(*uintptr)(unsafe.Pointer(_f + 72)))(tls, _f, _s, _l)

_2:
	if int32(*(*int8)(unsafe.Pointer(_f + 139))) < int32(0) {
		goto _3
	}

	_i = _l
_4:
	if _i == 0 || int32(*(*uint8)(unsafe.Pointer(_s + uintptr(_i-uint64(1))))) == int32('\n') {
		goto _6
	}

	_i--
	goto _4

_6:
	if _i == 0 {
		goto _7
	}

	_n = fn853(*(*uintptr)(unsafe.Pointer(_f + 72)))(tls, _f, _s, _i)
	if _n >= _i {
		goto _8
	}

	return _n

_8:
	_s += uintptr(_i)
	_l = _l - _i
_7:
_3:
	Xmemcpy(tls, *(*uintptr)(unsafe.Pointer(_f + 40)), _s, _l)
	*(*uintptr)(unsafe.Pointer(_f + 40)) += uintptr(_l)
	return _l + _i
}

// Xfwrite is defined at fwrite.c:28:8
func Xfwrite(tls TLS, _src uintptr /* *void */, _size uint64, _nmemb uint64, _f uintptr /* *TFILE = S_IO_FILE */) (r uint64) {
	var (
		_k             uint64
		_l             uint64
		___need_unlock int32
	)
	_l = _size * _nmemb
	if _size != 0 {
		goto _1
	}

	_nmemb = uint64(0)
_1:
	___need_unlock = func() int32 {
		if *(*int32)(unsafe.Pointer(_f + 140)) >= int32(0) {
			return X__lockfile(tls, _f)
		}
		return int32(0)
	}()
	_k = X__fwritex(tls, _src, _l, _f)
	if ___need_unlock == 0 {
		goto _3
	}

	X__unlockfile(tls, _f)
_3:
	if _k == _l {
		return _nmemb
	}

	return _k / _size
}

type t864__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t864__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t242size_t = uint64

type s72_IO_FILE = struct {
	Fflags        uint32
	Frpos         uintptr // *uint8
	Frend         uintptr // *uint8
	Fclose        uintptr // *func(TLS, uintptr) int32
	Fwend         uintptr // *uint8
	Fwpos         uintptr // *uint8
	Fmustbezero_1 uintptr // *uint8
	Fwbase        uintptr // *uint8
	Fread         uintptr // *func(TLS, uintptr, uintptr, uint64) uint64
	Fwrite        uintptr // *func(TLS, uintptr, uintptr, uint64) uint64
	Fseek         uintptr // *func(TLS, uintptr, int64, int32) int64
	Fbuf          uintptr // *uint8
	Fbuf_size     uint64
	Fprev         uintptr // *TFILE = S_IO_FILE
	Fnext         uintptr // *TFILE = S_IO_FILE
	Ffd           int32
	Fpipe_pid     int32
	Flockcount    int64
	Fdummy3       int16
	Fmode         int8
	Flbf          int8
	Flock         int32
	Fwaiters      int32
	Fcookie       uintptr // *void
	Foff          int64
	Fgetln_buf    uintptr // *int8
	Fmustbezero_2 uintptr // *void
	Fshend        uintptr // *uint8
	Fshlim        int64
	Fshcnt        int64
	Fprev_locked  uintptr // *TFILE = S_IO_FILE
	Fnext_locked  uintptr // *TFILE = S_IO_FILE
	Flocale       uintptr // *S__locale_struct
}

type t85off_t = int64

type s112__locale_struct = struct{ Fcat [6]uintptr }

// linking fwscanf.o

// Xfwscanf is defined at fwscanf.c:6:5
func Xfwscanf(tls TLS, _f uintptr /* *TFILE = S_IO_FILE */, _fmt uintptr /* *Twchar_t = int32 */, ap ...interface{}) (r int32) {
	var (
		_ret int32
		_ap  uintptr // Tva_list = T__builtin_va_list = ...truct{Fsize int32;Fdata int8;};}
	)
	_ap = X__builtin_va_start(tls, ap)
	_ret = Xvfwscanf(tls, _f, _fmt, _ap)
	X__builtin_free(tls, _ap)
	return _ret
}

type t865__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t865__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type s73_IO_FILE struct{ uintptr }

// linking getc.o

func postinc854(p *uintptr) uintptr { r := *p; *p += 1; return r }

// Xgetc is defined at getc.c:3:5
func Xgetc(tls TLS, _f uintptr /* *TFILE = S_IO_FILE */) (r int32) {
	var _c int32

	if *(*int32)(unsafe.Pointer(_f + 140)) >= int32(0) && X__lockfile(tls, _f) != 0 {
		goto _1
	}

	return func() int32 {
		if *(*uintptr)(unsafe.Pointer(_f + 8)) < *(*uintptr)(unsafe.Pointer(_f + 16)) {
			return int32(*(*uint8)(unsafe.Pointer(postinc854((*uintptr)(unsafe.Pointer(_f + 8))))))
		}
		return X__uflow(tls, _f)
	}()

_1:
	_c = func() int32 {
		if *(*uintptr)(unsafe.Pointer(_f + 8)) < *(*uintptr)(unsafe.Pointer(_f + 16)) {
			return int32(*(*uint8)(unsafe.Pointer(postinc854((*uintptr)(unsafe.Pointer(_f + 8))))))
		}
		return X__uflow(tls, _f)
	}()
	X__unlockfile(tls, _f)
	return _c
}

type t866__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t866__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type s74_IO_FILE = struct {
	Fflags        uint32
	Frpos         uintptr // *uint8
	Frend         uintptr // *uint8
	Fclose        uintptr // *func(TLS, uintptr) int32
	Fwend         uintptr // *uint8
	Fwpos         uintptr // *uint8
	Fmustbezero_1 uintptr // *uint8
	Fwbase        uintptr // *uint8
	Fread         uintptr // *func(TLS, uintptr, uintptr, uint64) uint64
	Fwrite        uintptr // *func(TLS, uintptr, uintptr, uint64) uint64
	Fseek         uintptr // *func(TLS, uintptr, int64, int32) int64
	Fbuf          uintptr // *uint8
	Fbuf_size     uint64
	Fprev         uintptr // *TFILE = S_IO_FILE
	Fnext         uintptr // *TFILE = S_IO_FILE
	Ffd           int32
	Fpipe_pid     int32
	Flockcount    int64
	Fdummy3       int16
	Fmode         int8
	Flbf          int8
	Flock         int32
	Fwaiters      int32
	Fcookie       uintptr // *void
	Foff          int64
	Fgetln_buf    uintptr // *int8
	Fmustbezero_2 uintptr // *void
	Fshend        uintptr // *uint8
	Fshlim        int64
	Fshcnt        int64
	Fprev_locked  uintptr // *TFILE = S_IO_FILE
	Fnext_locked  uintptr // *TFILE = S_IO_FILE
	Flocale       uintptr // *S__locale_struct
}

type t243size_t = uint64

type t86off_t = int64

type s113__locale_struct = struct{ Fcat [6]uintptr }

// linking getc_unlocked.o

func postinc855(p *uintptr) uintptr { r := *p; *p += 1; return r }

// Xgetc_unlocked is defined at getc_unlocked.c:3:5
func Xgetc_unlocked(tls TLS, _f uintptr /* *TFILE = S_IO_FILE */) (r int32) {
	return func() int32 {
		if *(*uintptr)(unsafe.Pointer(_f + 8)) < *(*uintptr)(unsafe.Pointer(_f + 16)) {
			return int32(*(*uint8)(unsafe.Pointer(postinc855((*uintptr)(unsafe.Pointer(_f + 8))))))
		}
		return X__uflow(tls, _f)
	}()
}

type t867__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t867__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type s75_IO_FILE = struct {
	Fflags        uint32
	Frpos         uintptr // *uint8
	Frend         uintptr // *uint8
	Fclose        uintptr // *func(TLS, uintptr) int32
	Fwend         uintptr // *uint8
	Fwpos         uintptr // *uint8
	Fmustbezero_1 uintptr // *uint8
	Fwbase        uintptr // *uint8
	Fread         uintptr // *func(TLS, uintptr, uintptr, uint64) uint64
	Fwrite        uintptr // *func(TLS, uintptr, uintptr, uint64) uint64
	Fseek         uintptr // *func(TLS, uintptr, int64, int32) int64
	Fbuf          uintptr // *uint8
	Fbuf_size     uint64
	Fprev         uintptr // *TFILE = S_IO_FILE
	Fnext         uintptr // *TFILE = S_IO_FILE
	Ffd           int32
	Fpipe_pid     int32
	Flockcount    int64
	Fdummy3       int16
	Fmode         int8
	Flbf          int8
	Flock         int32
	Fwaiters      int32
	Fcookie       uintptr // *void
	Foff          int64
	Fgetln_buf    uintptr // *int8
	Fmustbezero_2 uintptr // *void
	Fshend        uintptr // *uint8
	Fshlim        int64
	Fshcnt        int64
	Fprev_locked  uintptr // *TFILE = S_IO_FILE
	Fnext_locked  uintptr // *TFILE = S_IO_FILE
	Flocale       uintptr // *S__locale_struct
}

type t244size_t = uint64

type t87off_t = int64

type s114__locale_struct = struct{ Fcat [6]uintptr }

// linking getchar.o

// Xgetchar is defined at getchar.c:3:5
func Xgetchar(tls TLS) (r int32) {
	return Xfgetc(tls, *(*uintptr)(unsafe.Pointer(Xstdin)))
}

type t868__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t868__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// linking getchar_unlocked.o

func postinc856(p *uintptr) uintptr { r := *p; *p += 1; return r }

// Xgetchar_unlocked is defined at getchar_unlocked.c:3:5
func Xgetchar_unlocked(tls TLS) (r int32) {
	return func() int32 {
		if *(*uintptr)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(Xstdin)) + 8)) < *(*uintptr)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(Xstdin)) + 16)) {
			return int32(*(*uint8)(unsafe.Pointer(postinc856((*uintptr)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(Xstdin)) + 8))))))
		}
		return X__uflow(tls, *(*uintptr)(unsafe.Pointer(Xstdin)))
	}()
}

type t869__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t869__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// linking getdelim.o

func set857(p *int32, v int32) int32 { *p = v; return v }

func postinc858(p *uintptr) uintptr { r := *p; *p += 1; return r }

func set859(p *int8, v int8) int8 { *p = v; return v }

func postinc860(p *uint64) uint64 { r := *p; *p += 1; return r }

// Xgetdelim is defined at getdelim.c:6:9
func Xgetdelim(tls TLS, _s uintptr /* **int8 */, _n uintptr /* *Tsize_t = uint64 */, _delim int32, _f uintptr /* *TFILE = S_IO_FILE */) (r int64) {
	var (
		_tmp           uintptr // *int8
		_z             uintptr // *uint8
		_k             uint64
		_i             uint64
		_c             int32
		___need_unlock int32
		_m             uint64
	)
	_i = uint64(0)
	___need_unlock = func() int32 {
		if *(*int32)(unsafe.Pointer(_f + 140)) >= int32(0) {
			return X__lockfile(tls, _f)
		}
		return int32(0)
	}()
	if _n != 0 && _s != 0 {
		goto _1
	}

	{
		p := (*uint32)(unsafe.Pointer(_f))
		*p = *p | uint32(32)
	}
	if ___need_unlock == 0 {
		goto _3
	}

	X__unlockfile(tls, _f)
_3:
	*(*int32)(unsafe.Pointer(X__errno_location(tls))) = int32(22)
	return int64(-1)

_1:
	if *(*uintptr)(unsafe.Pointer(_s)) != 0 {
		goto _4
	}

	*(*uint64)(unsafe.Pointer(_n)) = uint64(0)
_4:
_5:
	_z = Xmemchr(tls, *(*uintptr)(unsafe.Pointer(_f + 8)), _delim, uint64(int64(*(*uintptr)(unsafe.Pointer(_f + 16))-*(*uintptr)(unsafe.Pointer(_f + 8)))))
	_k = uint64(func() int64 {
		if _z != 0 {
			return int64(_z-*(*uintptr)(unsafe.Pointer(_f + 8))) + int64(1)
		}
		return int64(*(*uintptr)(unsafe.Pointer(_f + 16)) - *(*uintptr)(unsafe.Pointer(_f + 8)))
	}())
	if _i+_k+uint64(1) < *(*uint64)(unsafe.Pointer(_n)) {
		goto _8
	}

	if _k < uint64(9223372036854775807)-_i {
		goto _9
	}

	goto loom

_9:
	_m = _i + _k + uint64(2)
	if _z != 0 || _m >= uint64(4611686018427387903) {
		goto _10
	}

	_m = _m + _m/uint64(2)
_10:
	_tmp = Xrealloc(tls, *(*uintptr)(unsafe.Pointer(_s)), _m)
	if _tmp != 0 {
		goto _11
	}

	_m = _i + _k + uint64(2)
	_tmp = Xrealloc(tls, *(*uintptr)(unsafe.Pointer(_s)), _m)
	if _tmp != 0 {
		goto _12
	}

	goto loom

_12:
_11:
	*(*uintptr)(unsafe.Pointer(_s)) = _tmp
	*(*uint64)(unsafe.Pointer(_n)) = _m
_8:
	Xmemcpy(tls, *(*uintptr)(unsafe.Pointer(_s))+uintptr(_i), *(*uintptr)(unsafe.Pointer(_f + 8)), _k)
	*(*uintptr)(unsafe.Pointer(_f + 8)) += uintptr(_k)
	_i = _i + _k
	if _z == 0 {
		goto _13
	}

	goto _7

_13:
	if set857(&_c, func() int32 {
		if *(*uintptr)(unsafe.Pointer(_f + 8)) < *(*uintptr)(unsafe.Pointer(_f + 16)) {
			return int32(*(*uint8)(unsafe.Pointer(postinc858((*uintptr)(unsafe.Pointer(_f + 8))))))
		}
		return X__uflow(tls, _f)
	}()) != int32(-1) {
		goto _14
	}

	if _i != 0 && *(*uint32)(unsafe.Pointer(_f))&uint32(16) != 0 {
		goto _15
	}

	if ___need_unlock == 0 {
		goto _17
	}

	X__unlockfile(tls, _f)
_17:
	return int64(-1)

_15:
	goto _7

_14:
	if int32(set859((*int8)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_s))+uintptr(postinc860(&_i)))), int8(_c))) != _delim {
		goto _18
	}

	goto _7

_18:
	goto _5

_7:
	*(*int8)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_s)) + uintptr(_i))) = int8(0)
	if ___need_unlock == 0 {
		goto _20
	}

	X__unlockfile(tls, _f)
_20:
	return int64(_i)

	goto loom
loom:
	{
		p := (*uint32)(unsafe.Pointer(_f))
		*p = *p | uint32(32)
	}
	if ___need_unlock == 0 {
		goto _22
	}

	X__unlockfile(tls, _f)
_22:
	*(*int32)(unsafe.Pointer(X__errno_location(tls))) = int32(12)
	return int64(-1)
}

type t870__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t870__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t39ssize_t = int64

type s76_IO_FILE = struct {
	Fflags        uint32
	Frpos         uintptr // *uint8
	Frend         uintptr // *uint8
	Fclose        uintptr // *func(TLS, uintptr) int32
	Fwend         uintptr // *uint8
	Fwpos         uintptr // *uint8
	Fmustbezero_1 uintptr // *uint8
	Fwbase        uintptr // *uint8
	Fread         uintptr // *func(TLS, uintptr, uintptr, uint64) uint64
	Fwrite        uintptr // *func(TLS, uintptr, uintptr, uint64) uint64
	Fseek         uintptr // *func(TLS, uintptr, int64, int32) int64
	Fbuf          uintptr // *uint8
	Fbuf_size     uint64
	Fprev         uintptr // *TFILE = S_IO_FILE
	Fnext         uintptr // *TFILE = S_IO_FILE
	Ffd           int32
	Fpipe_pid     int32
	Flockcount    int64
	Fdummy3       int16
	Fmode         int8
	Flbf          int8
	Flock         int32
	Fwaiters      int32
	Fcookie       uintptr // *void
	Foff          int64
	Fgetln_buf    uintptr // *int8
	Fmustbezero_2 uintptr // *void
	Fshend        uintptr // *uint8
	Fshlim        int64
	Fshcnt        int64
	Fprev_locked  uintptr // *TFILE = S_IO_FILE
	Fnext_locked  uintptr // *TFILE = S_IO_FILE
	Flocale       uintptr // *S__locale_struct
}

type t245size_t = uint64

type t88off_t = int64

type s115__locale_struct = struct{ Fcat [6]uintptr }

// linking getline.o

// Xgetline is defined at getline.c:3:9
func Xgetline(tls TLS, _s uintptr /* **int8 */, _n uintptr /* *Tsize_t = uint64 */, _f uintptr /* *TFILE = S_IO_FILE */) (r int64) {
	return Xgetdelim(tls, _s, _n, int32('\n'), _f)
}

type t871__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t871__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t40ssize_t = int64

type s77_IO_FILE struct{ uintptr }

// linking gets.o

// Xgets is defined at gets.c:5:6
func Xgets(tls TLS, _s uintptr /* *int8 */) (r uintptr /* *int8 */) {
	var _ret uintptr // *int8

	_ret = Xfgets(tls, _s, int32(0x7fffffff), *(*uintptr)(unsafe.Pointer(Xstdin)))
	if _ret == 0 || int32(*(*int8)(unsafe.Pointer(_s + uintptr(Xstrlen(tls, _s)-uint64(1))))) != int32('\n') {
		goto _1
	}

	*(*int8)(unsafe.Pointer(_s + uintptr(Xstrlen(tls, _s)-uint64(1)))) = int8(0)
_1:
	return _ret
}

type t872__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t872__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t246size_t = uint64

// linking getw.o

// Xgetw is defined at getw.c:4:5
func Xgetw(tls TLS, _f uintptr /* *TFILE = S_IO_FILE */) (r int32) {
	esc := MustMalloc(4)
	var _x = esc // *int32
	defer Free(esc)
	if Xfread(tls, _x, uint64(4), uint64(1), _f) != 0 {
		return *(*int32)(unsafe.Pointer(_x))
	}

	return int32(-1)
}

type t873__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t873__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t247size_t = uint64

type s78_IO_FILE struct{ uintptr }

// linking getwc.o

// Xgetwc is defined at getwc.c:4:8
func Xgetwc(tls TLS, _f uintptr /* *TFILE = S_IO_FILE */) (r uint32) {
	return Xfgetwc(tls, _f)
}

type t874__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t874__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t23wint_t = uint32

type s79_IO_FILE = struct {
	Fflags        uint32
	Frpos         uintptr // *uint8
	Frend         uintptr // *uint8
	Fclose        uintptr // *func(TLS, uintptr) int32
	Fwend         uintptr // *uint8
	Fwpos         uintptr // *uint8
	Fmustbezero_1 uintptr // *uint8
	Fwbase        uintptr // *uint8
	Fread         uintptr // *func(TLS, uintptr, uintptr, uint64) uint64
	Fwrite        uintptr // *func(TLS, uintptr, uintptr, uint64) uint64
	Fseek         uintptr // *func(TLS, uintptr, int64, int32) int64
	Fbuf          uintptr // *uint8
	Fbuf_size     uint64
	Fprev         uintptr // *TFILE = S_IO_FILE
	Fnext         uintptr // *TFILE = S_IO_FILE
	Ffd           int32
	Fpipe_pid     int32
	Flockcount    int64
	Fdummy3       int16
	Fmode         int8
	Flbf          int8
	Flock         int32
	Fwaiters      int32
	Fcookie       uintptr // *void
	Foff          int64
	Fgetln_buf    uintptr // *int8
	Fmustbezero_2 uintptr // *void
	Fshend        uintptr // *uint8
	Fshlim        int64
	Fshcnt        int64
	Fprev_locked  uintptr // *TFILE = S_IO_FILE
	Fnext_locked  uintptr // *TFILE = S_IO_FILE
	Flocale       uintptr // *S__locale_struct
}

type t248size_t = uint64

type t89off_t = int64

type s116__locale_struct = struct{ Fcat [6]uintptr }

// linking getwchar.o

// Xgetwchar is defined at getwchar.c:4:8
func Xgetwchar(tls TLS) (r uint32) {
	return Xfgetwc(tls, *(*uintptr)(unsafe.Pointer(Xstdin)))
}

type t875__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t875__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t24wint_t = uint32

// linking ofl.o

// X__ofl_lock is defined at ofl.c:7:6
func X__ofl_lock(tls TLS) (r uintptr /* **TFILE = S_IO_FILE */) {
	X__lock(tls, xofl_lock)
	return xofl_head
}

// X__ofl_unlock is defined at ofl.c:13:6
func X__ofl_unlock(tls TLS) {
	X__unlock(tls, xofl_lock)
}

type t876__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t876__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type s80_IO_FILE = struct {
	Fflags        uint32
	Frpos         uintptr // *uint8
	Frend         uintptr // *uint8
	Fclose        uintptr // *func(TLS, uintptr) int32
	Fwend         uintptr // *uint8
	Fwpos         uintptr // *uint8
	Fmustbezero_1 uintptr // *uint8
	Fwbase        uintptr // *uint8
	Fread         uintptr // *func(TLS, uintptr, uintptr, uint64) uint64
	Fwrite        uintptr // *func(TLS, uintptr, uintptr, uint64) uint64
	Fseek         uintptr // *func(TLS, uintptr, int64, int32) int64
	Fbuf          uintptr // *uint8
	Fbuf_size     uint64
	Fprev         uintptr // *TFILE = S_IO_FILE
	Fnext         uintptr // *TFILE = S_IO_FILE
	Ffd           int32
	Fpipe_pid     int32
	Flockcount    int64
	Fdummy3       int16
	Fmode         int8
	Flbf          int8
	Flock         int32
	Fwaiters      int32
	Fcookie       uintptr // *void
	Foff          int64
	Fgetln_buf    uintptr // *int8
	Fmustbezero_2 uintptr // *void
	Fshend        uintptr // *uint8
	Fshlim        int64
	Fshcnt        int64
	Fprev_locked  uintptr // *TFILE = S_IO_FILE
	Fnext_locked  uintptr // *TFILE = S_IO_FILE
	Flocale       uintptr // *S__locale_struct
}

// xofl_lock [1]int32, escapes: true, ofl.c:5:21
var xofl_lock = bss + 3904

// xofl_head *TFILE = S_IO_FILE, escapes: true, ofl.c:4:13
var xofl_head = bss + 3912

type t249size_t = uint64

type t90off_t = int64

type s117__locale_struct = struct{ Fcat [6]uintptr }

// linking ofl_add.o

// X__ofl_add is defined at ofl_add.c:3:6
func X__ofl_add(tls TLS, _f uintptr /* *TFILE = S_IO_FILE */) (r uintptr /* *TFILE = S_IO_FILE */) {
	var _head uintptr // **TFILE = S_IO_FILE

	_head = X__ofl_lock(tls)
	*(*uintptr)(unsafe.Pointer(_f + 112)) = *(*uintptr)(unsafe.Pointer(_head))
	if *(*uintptr)(unsafe.Pointer(_head)) == 0 {
		goto _1
	}

	*(*uintptr)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_head)) + 104)) = _f
_1:
	*(*uintptr)(unsafe.Pointer(_head)) = _f
	X__ofl_unlock(tls)
	return _f
}

type t877__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t877__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type s81_IO_FILE = struct {
	Fflags        uint32
	Frpos         uintptr // *uint8
	Frend         uintptr // *uint8
	Fclose        uintptr // *func(TLS, uintptr) int32
	Fwend         uintptr // *uint8
	Fwpos         uintptr // *uint8
	Fmustbezero_1 uintptr // *uint8
	Fwbase        uintptr // *uint8
	Fread         uintptr // *func(TLS, uintptr, uintptr, uint64) uint64
	Fwrite        uintptr // *func(TLS, uintptr, uintptr, uint64) uint64
	Fseek         uintptr // *func(TLS, uintptr, int64, int32) int64
	Fbuf          uintptr // *uint8
	Fbuf_size     uint64
	Fprev         uintptr // *TFILE = S_IO_FILE
	Fnext         uintptr // *TFILE = S_IO_FILE
	Ffd           int32
	Fpipe_pid     int32
	Flockcount    int64
	Fdummy3       int16
	Fmode         int8
	Flbf          int8
	Flock         int32
	Fwaiters      int32
	Fcookie       uintptr // *void
	Foff          int64
	Fgetln_buf    uintptr // *int8
	Fmustbezero_2 uintptr // *void
	Fshend        uintptr // *uint8
	Fshlim        int64
	Fshcnt        int64
	Fprev_locked  uintptr // *TFILE = S_IO_FILE
	Fnext_locked  uintptr // *TFILE = S_IO_FILE
	Flocale       uintptr // *S__locale_struct
}

type t250size_t = uint64

type t91off_t = int64

type s118__locale_struct = struct{ Fcat [6]uintptr }

// linking open_memstream.o

func set861(p *uintptr, v uintptr) uintptr { *p = v; return v }

func set862(p *uint64, v uint64) uint64 { *p = v; return v }

func fp863(f func(TLS, uintptr, uintptr, uint64) uint64) uintptr {
	return *(*uintptr)(unsafe.Pointer(&f))
}

func fp864(f func(TLS, uintptr, int64, int32) int64) uintptr { return *(*uintptr)(unsafe.Pointer(&f)) }

func fp865(f func(TLS, uintptr) int32) uintptr { return *(*uintptr)(unsafe.Pointer(&f)) }

// Xopen_memstream is defined at open_memstream.c:66:6
func Xopen_memstream(tls TLS, _bufp uintptr /* **int8 */, _sizep uintptr /* *Tsize_t = uint64 */) (r uintptr /* *TFILE = S_IO_FILE */) {
	var (
		_f   uintptr // *Sms_FILE
		_buf uintptr // *int8
	)
	if set861(&_f, Xmalloc(tls, uint64(1304))) != 0 {
		goto _1
	}

	return null

_1:
	if set861(&_buf, Xmalloc(tls, uint64(1))) != 0 {
		goto _2
	}

	Xfree(tls, _f)
	return null

_2:
	Xmemset(tls, _f, int32(0), uint64(232))
	Xmemset(tls, _f+232, int32(0), uint64(48))
	*(*uintptr)(unsafe.Pointer(_f + 152)) = _f + 232
	*(*uintptr)(unsafe.Pointer(_f + 232)) = _bufp
	*(*uintptr)(unsafe.Pointer((_f + 232) + 8)) = _sizep
	*(*uint64)(unsafe.Pointer((_f + 232) + 16)) = set862((*uint64)(unsafe.Pointer((_f+232)+32)), set862((*uint64)(unsafe.Pointer((_f+232)+40)), set862((*uint64)(unsafe.Pointer(_sizep)), uint64(0))))
	*(*uintptr)(unsafe.Pointer((_f + 232) + 24)) = set861((*uintptr)(unsafe.Pointer(_bufp)), _buf)
	*(*int8)(unsafe.Pointer(_buf)) = int8(0)
	*(*uint32)(unsafe.Pointer(_f)) = uint32(4)
	*(*int32)(unsafe.Pointer(_f + 120)) = int32(-1)
	*(*uintptr)(unsafe.Pointer(_f + 88)) = _f + 280
	*(*uint64)(unsafe.Pointer(_f + 96)) = uint64(1024)
	*(*int8)(unsafe.Pointer(_f + 139)) = int8(-1)
	*(*uintptr)(unsafe.Pointer(_f + 72)) = fp863(xms_write)
	*(*uintptr)(unsafe.Pointer(_f + 80)) = fp864(xms_seek)
	*(*uintptr)(unsafe.Pointer(_f + 24)) = fp865(xms_close)
	if *(*int32)(unsafe.Pointer(X__libc + 4)) != 0 {
		goto _3
	}

	*(*int32)(unsafe.Pointer(_f + 140)) = int32(-1)
_3:
	return X__ofl_add(tls, _f)
}

type t878__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t878__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type s82_IO_FILE = struct {
	Fflags        uint32
	Frpos         uintptr // *uint8
	Frend         uintptr // *uint8
	Fclose        uintptr // *func(TLS, uintptr) int32
	Fwend         uintptr // *uint8
	Fwpos         uintptr // *uint8
	Fmustbezero_1 uintptr // *uint8
	Fwbase        uintptr // *uint8
	Fread         uintptr // *func(TLS, uintptr, uintptr, uint64) uint64
	Fwrite        uintptr // *func(TLS, uintptr, uintptr, uint64) uint64
	Fseek         uintptr // *func(TLS, uintptr, int64, int32) int64
	Fbuf          uintptr // *uint8
	Fbuf_size     uint64
	Fprev         uintptr // *TFILE = S_IO_FILE
	Fnext         uintptr // *TFILE = S_IO_FILE
	Ffd           int32
	Fpipe_pid     int32
	Flockcount    int64
	Fdummy3       int16
	Fmode         int8
	Flbf          int8
	Flock         int32
	Fwaiters      int32
	Fcookie       uintptr // *void
	Foff          int64
	Fgetln_buf    uintptr // *int8
	Fmustbezero_2 uintptr // *void
	Fshend        uintptr // *uint8
	Fshlim        int64
	Fshcnt        int64
	Fprev_locked  uintptr // *TFILE = S_IO_FILE
	Fnext_locked  uintptr // *TFILE = S_IO_FILE
	Flocale       uintptr // *S__locale_struct
}

type Sms_FILE = struct {
	Ff   s82_IO_FILE
	Fc   s1cookie
	Fbuf [1024]uint8
}

type t251size_t = uint64

// xms_write is defined at open_memstream.c:37:15
func xms_write(tls TLS, _f uintptr /* *TFILE = S_IO_FILE */, _buf uintptr /* *uint8 */, _len uint64) (r uint64) {
	var (
		_c      uintptr // *Scookie
		_len2   uint64
		_newbuf uintptr // *int8
	)
	_c = *(*uintptr)(unsafe.Pointer(_f + 152))
	_len2 = uint64(int64(*(*uintptr)(unsafe.Pointer(_f + 40)) - *(*uintptr)(unsafe.Pointer(_f + 56))))
	if _len2 == 0 {
		goto _1
	}

	*(*uintptr)(unsafe.Pointer(_f + 40)) = *(*uintptr)(unsafe.Pointer(_f + 56))
	if xms_write(tls, _f, *(*uintptr)(unsafe.Pointer(_f + 56)), _len2) >= _len2 {
		goto _2
	}

	return uint64(0)

_2:
_1:
	if _len+*(*uint64)(unsafe.Pointer(_c + 16)) < *(*uint64)(unsafe.Pointer(_c + 40)) {
		goto _3
	}

	_len2 = uint64(2)**(*uint64)(unsafe.Pointer(_c + 40)) + uint64(1) | (*(*uint64)(unsafe.Pointer(_c + 16)) + _len + uint64(1))
	_newbuf = Xrealloc(tls, *(*uintptr)(unsafe.Pointer(_c + 24)), _len2)
	if _newbuf != 0 {
		goto _4
	}

	return uint64(0)

_4:
	*(*uintptr)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_c)))) = set861((*uintptr)(unsafe.Pointer(_c+24)), _newbuf)
	Xmemset(tls, *(*uintptr)(unsafe.Pointer(_c + 24))+uintptr(*(*uint64)(unsafe.Pointer(_c + 40))), int32(0), _len2-*(*uint64)(unsafe.Pointer(_c + 40)))
	*(*uint64)(unsafe.Pointer(_c + 40)) = _len2
_3:
	Xmemcpy(tls, *(*uintptr)(unsafe.Pointer(_c + 24))+uintptr(*(*uint64)(unsafe.Pointer(_c + 16))), _buf, _len)
	{
		p := (*uint64)(unsafe.Pointer(_c + 16))
		*p = *p + _len
	}
	if *(*uint64)(unsafe.Pointer(_c + 16)) < *(*uint64)(unsafe.Pointer(_c + 32)) {
		goto _5
	}

	*(*uint64)(unsafe.Pointer(_c + 32)) = *(*uint64)(unsafe.Pointer(_c + 16))
_5:
	*(*uint64)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_c + 8)))) = *(*uint64)(unsafe.Pointer(_c + 16))
	return _len
}

// xms_seek is defined at open_memstream.c:22:14
func xms_seek(tls TLS, _f uintptr /* *TFILE = S_IO_FILE */, _off int64, _whence int32) (r int64) {
	var (
		_base int64
		_c    uintptr // *Scookie
	)
	_c = *(*uintptr)(unsafe.Pointer(_f + 152))
	if uint32(_whence) <= uint32(2) {
		goto _1
	}

	goto lfail
lfail:
	*(*int32)(unsafe.Pointer(X__errno_location(tls))) = int32(22)
	return int64(-1)

_1:
	X__assert_fail(tls, ts+0 /* "TODO(ccgo)" */, ts+4452 /* "src/stdio/open_m..." */, int32(31), x866__func__)
	if _off >= -_base && _off <= int64(0x7fffffffffffffff)-_base {
		goto _2
	}

	goto lfail

_2:
	return int64(set862((*uint64)(unsafe.Pointer(_c+16)), uint64(_base+_off)))
}

type t92off_t = int64

// xms_close is defined at open_memstream.c:61:12
func xms_close(tls TLS, _f uintptr /* *TFILE = S_IO_FILE */) (r int32) {
	return int32(0)
}

type s119__locale_struct = struct{ Fcat [6]uintptr }

type t2FILE = s82_IO_FILE

type s1cookie = struct {
	Fbufp  uintptr // **int8
	Fsizep uintptr // *Tsize_t = uint64
	Fpos   uint64
	Fbuf   uintptr // *int8
	Flen   uint64
	Fspace uint64
}

// x4__func__ [8]int8, escapes: true, open_memstream.c:23:1
var x866__func__ = ds + 44648

type t41ssize_t = int64

// linking open_wmemstream.o

func set867(p *uintptr, v uintptr) uintptr { *p = v; return v }

func set868(p *uint64, v uint64) uint64 { *p = v; return v }

func fp869(f func(TLS, uintptr, uintptr, uint64) uint64) uintptr {
	return *(*uintptr)(unsafe.Pointer(&f))
}

func fp870(f func(TLS, uintptr, int64, int32) int64) uintptr { return *(*uintptr)(unsafe.Pointer(&f)) }

func fp871(f func(TLS, uintptr) int32) uintptr { return *(*uintptr)(unsafe.Pointer(&f)) }

// Xopen_wmemstream is defined at open_wmemstream.c:68:6
func Xopen_wmemstream(tls TLS, _bufp uintptr /* **Twchar_t = int32 */, _sizep uintptr /* *Tsize_t = uint64 */) (r uintptr /* *TFILE = S_IO_FILE */) {
	var (
		_f   uintptr // *Swms_FILE
		_buf uintptr // *Twchar_t = int32
	)
	if set867(&_f, Xmalloc(tls, uint64(296))) != 0 {
		goto _1
	}

	return null

_1:
	if set867(&_buf, Xmalloc(tls, uint64(4))) != 0 {
		goto _2
	}

	Xfree(tls, _f)
	return null

_2:
	Xmemset(tls, _f, int32(0), uint64(232))
	Xmemset(tls, _f+232, int32(0), uint64(56))
	*(*uintptr)(unsafe.Pointer(_f + 152)) = _f + 232
	*(*uintptr)(unsafe.Pointer(_f + 232)) = _bufp
	*(*uintptr)(unsafe.Pointer((_f + 232) + 8)) = _sizep
	*(*uint64)(unsafe.Pointer((_f + 232) + 16)) = set868((*uint64)(unsafe.Pointer((_f+232)+32)), set868((*uint64)(unsafe.Pointer((_f+232)+40)), set868((*uint64)(unsafe.Pointer(_sizep)), uint64(0))))
	*(*uintptr)(unsafe.Pointer((_f + 232) + 24)) = set867((*uintptr)(unsafe.Pointer(_bufp)), _buf)
	*(*int32)(unsafe.Pointer(_buf)) = int32(0)
	*(*uint32)(unsafe.Pointer(_f)) = uint32(4)
	*(*int32)(unsafe.Pointer(_f + 120)) = int32(-1)
	*(*uintptr)(unsafe.Pointer(_f + 88)) = _f + 288
	*(*uint64)(unsafe.Pointer(_f + 96)) = uint64(0)
	*(*int8)(unsafe.Pointer(_f + 139)) = int8(-1)
	*(*uintptr)(unsafe.Pointer(_f + 72)) = fp869(xwms_write)
	*(*uintptr)(unsafe.Pointer(_f + 80)) = fp870(xwms_seek)
	*(*uintptr)(unsafe.Pointer(_f + 24)) = fp871(xwms_close)
	if *(*int32)(unsafe.Pointer(X__libc + 4)) != 0 {
		goto _3
	}

	*(*int32)(unsafe.Pointer(_f + 140)) = int32(-1)
_3:
	return X__ofl_add(tls, _f)
}

type t879__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t879__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type s83_IO_FILE = struct {
	Fflags        uint32
	Frpos         uintptr // *uint8
	Frend         uintptr // *uint8
	Fclose        uintptr // *func(TLS, uintptr) int32
	Fwend         uintptr // *uint8
	Fwpos         uintptr // *uint8
	Fmustbezero_1 uintptr // *uint8
	Fwbase        uintptr // *uint8
	Fread         uintptr // *func(TLS, uintptr, uintptr, uint64) uint64
	Fwrite        uintptr // *func(TLS, uintptr, uintptr, uint64) uint64
	Fseek         uintptr // *func(TLS, uintptr, int64, int32) int64
	Fbuf          uintptr // *uint8
	Fbuf_size     uint64
	Fprev         uintptr // *TFILE = S_IO_FILE
	Fnext         uintptr // *TFILE = S_IO_FILE
	Ffd           int32
	Fpipe_pid     int32
	Flockcount    int64
	Fdummy3       int16
	Fmode         int8
	Flbf          int8
	Flock         int32
	Fwaiters      int32
	Fcookie       uintptr // *void
	Foff          int64
	Fgetln_buf    uintptr // *int8
	Fmustbezero_2 uintptr // *void
	Fshend        uintptr // *uint8
	Fshlim        int64
	Fshcnt        int64
	Fprev_locked  uintptr // *TFILE = S_IO_FILE
	Fnext_locked  uintptr // *TFILE = S_IO_FILE
	Flocale       uintptr // *S__locale_struct
}

type Swms_FILE = struct {
	Ff   s83_IO_FILE
	Fc   s2cookie
	Fbuf [1]uint8
}

type t252size_t = uint64

type t26wchar_t = int32

// xwms_write is defined at open_wmemstream.c:40:15
func xwms_write(tls TLS, _f uintptr /* *TFILE = S_IO_FILE */, abuf uintptr, _len uint64) (r uint64) {
	esc := MustMalloc(8)
	var (
		_buf    = esc   // **uint8
		_c      uintptr // *Scookie
		_len2   uint64
		_newbuf uintptr // *Twchar_t = int32
	)
	defer Free(esc)
	*(*uintptr)(unsafe.Pointer(_buf)) = abuf
	_c = *(*uintptr)(unsafe.Pointer(_f + 152))
	if _len+*(*uint64)(unsafe.Pointer(_c + 16)) < *(*uint64)(unsafe.Pointer(_c + 40)) {
		goto _1
	}

	_len2 = uint64(2)**(*uint64)(unsafe.Pointer(_c + 40)) + uint64(1) | (*(*uint64)(unsafe.Pointer(_c + 16)) + _len + uint64(1))
	if _len2 <= uint64(2305843009213693951) {
		goto _2
	}

	return uint64(0)

_2:
	_newbuf = Xrealloc(tls, *(*uintptr)(unsafe.Pointer(_c + 24)), _len2*uint64(4))
	if _newbuf != 0 {
		goto _3
	}

	return uint64(0)

_3:
	*(*uintptr)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_c)))) = set867((*uintptr)(unsafe.Pointer(_c+24)), _newbuf)
	Xmemset(tls, *(*uintptr)(unsafe.Pointer(_c + 24))+4*uintptr(*(*uint64)(unsafe.Pointer(_c + 40))), int32(0), uint64(4)*(_len2-*(*uint64)(unsafe.Pointer(_c + 40))))
	*(*uint64)(unsafe.Pointer(_c + 40)) = _len2
_1:
	_len2 = Xmbsnrtowcs(tls, *(*uintptr)(unsafe.Pointer(_c + 24))+4*uintptr(*(*uint64)(unsafe.Pointer(_c + 16))), _buf, _len, *(*uint64)(unsafe.Pointer(_c + 40))-*(*uint64)(unsafe.Pointer(_c + 16)), _c+48)
	if _len2 != uint64(18446744073709551615) {
		goto _4
	}

	return uint64(0)

_4:
	{
		p := (*uint64)(unsafe.Pointer(_c + 16))
		*p = *p + _len2
	}
	if *(*uint64)(unsafe.Pointer(_c + 16)) < *(*uint64)(unsafe.Pointer(_c + 32)) {
		goto _5
	}

	*(*uint64)(unsafe.Pointer(_c + 32)) = *(*uint64)(unsafe.Pointer(_c + 16))
_5:
	*(*uint64)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_c + 8)))) = *(*uint64)(unsafe.Pointer(_c + 16))
	return _len
}

// xwms_seek is defined at open_wmemstream.c:24:14
func xwms_seek(tls TLS, _f uintptr /* *TFILE = S_IO_FILE */, _off int64, _whence int32) (r int64) {
	var (
		_base int64
		_c    uintptr // *Scookie
	)
	_c = *(*uintptr)(unsafe.Pointer(_f + 152))
	if uint32(_whence) <= uint32(2) {
		goto _1
	}

	goto lfail
lfail:
	*(*int32)(unsafe.Pointer(X__errno_location(tls))) = int32(22)
	return int64(-1)

_1:
	X__assert_fail(tls, ts+0 /* "TODO(ccgo)" */, ts+4480 /* "src/stdio/open_w..." */, int32(33), x872__func__)
	if _off >= -_base && _off <= int64(2305843009213693951)-_base {
		goto _2
	}

	goto lfail

_2:
	Xmemset(tls, _c+48, int32(0), uint64(8))
	return int64(set868((*uint64)(unsafe.Pointer(_c+16)), uint64(_base+_off)))
}

type t93off_t = int64

// xwms_close is defined at open_wmemstream.c:63:12
func xwms_close(tls TLS, _f uintptr /* *TFILE = S_IO_FILE */) (r int32) {
	return int32(0)
}

type s120__locale_struct = struct{ Fcat [6]uintptr }

type t3FILE = s83_IO_FILE

type s2cookie = struct {
	Fbufp  uintptr // **Twchar_t = int32
	Fsizep uintptr // *Tsize_t = uint64
	Fpos   uint64
	Fbuf   uintptr // *Twchar_t = int32
	Flen   uint64
	Fspace uint64
	Fmbs   struct {
		F__opaque1 uint32
		F__opaque2 uint32
	}
}

// x4__func__ [9]int8, escapes: true, open_wmemstream.c:25:1
var x872__func__ = ds + 44656

type t42ssize_t = int64

type Tmbstate_t = struct {
	F__opaque1 uint32
	F__opaque2 uint32
}

// linking pclose.o

func set873(p *int32, v int32) int32 { *p = v; return v }

// Xpclose is defined at pclose.c:5:5
func Xpclose(tls TLS, _f uintptr /* *TFILE = S_IO_FILE */) (r int32) {
	esc := MustMalloc(4)
	var (
		_status = esc // *int32
		_r      int32
		_pid    int32
	)
	defer Free(esc)
	_pid = *(*int32)(unsafe.Pointer(_f + 124))
	Xfclose(tls, _f)
_1:
	if set873(&_r, int32(x27__syscall4(tls, int64(61), int64(_pid), int64(_status), int64(0), int64(0)))) != int32(-4) {
		goto _2
	}

	goto _1

_2:
	if _r >= int32(0) {
		goto _3
	}

	return int32(X__syscall_ret(tls, uint64(_r)))

_3:
	return *(*int32)(unsafe.Pointer(_status))
}

type t880__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t880__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type s84_IO_FILE = struct {
	Fflags        uint32
	Frpos         uintptr // *uint8
	Frend         uintptr // *uint8
	Fclose        uintptr // *func(TLS, uintptr) int32
	Fwend         uintptr // *uint8
	Fwpos         uintptr // *uint8
	Fmustbezero_1 uintptr // *uint8
	Fwbase        uintptr // *uint8
	Fread         uintptr // *func(TLS, uintptr, uintptr, uint64) uint64
	Fwrite        uintptr // *func(TLS, uintptr, uintptr, uint64) uint64
	Fseek         uintptr // *func(TLS, uintptr, int64, int32) int64
	Fbuf          uintptr // *uint8
	Fbuf_size     uint64
	Fprev         uintptr // *TFILE = S_IO_FILE
	Fnext         uintptr // *TFILE = S_IO_FILE
	Ffd           int32
	Fpipe_pid     int32
	Flockcount    int64
	Fdummy3       int16
	Fmode         int8
	Flbf          int8
	Flock         int32
	Fwaiters      int32
	Fcookie       uintptr // *void
	Foff          int64
	Fgetln_buf    uintptr // *int8
	Fmustbezero_2 uintptr // *void
	Fshend        uintptr // *uint8
	Fshlim        int64
	Fshcnt        int64
	Fprev_locked  uintptr // *TFILE = S_IO_FILE
	Fnext_locked  uintptr // *TFILE = S_IO_FILE
	Flocale       uintptr // *S__locale_struct
}

type t47pid_t = int32

// x__syscall4 is defined at syscall_arch.h:42:22
func x27__syscall4(tls TLS, _n int64, _a1 int64, _a2 int64, _a3 int64, _a4 int64) (r int64) {
	return X__syscall(tls, _n, _a1, _a2, _a3, _a4, int64(0), int64(0))
}

type t253size_t = uint64

type t94off_t = int64

type s121__locale_struct = struct{ Fcat [6]uintptr }

// linking perror.o

// Xperror is defined at perror.c:6:6
func Xperror(tls TLS, _msg uintptr /* *int8 */) {
	var (
		_f             uintptr // *TFILE = S_IO_FILE
		_errstr        uintptr // *int8
		___need_unlock int32
	)
	_f = *(*uintptr)(unsafe.Pointer(Xstderr))
	_errstr = Xstrerror(tls, *(*int32)(unsafe.Pointer(X__errno_location(tls))))
	___need_unlock = func() int32 {
		if *(*int32)(unsafe.Pointer(_f + 140)) >= int32(0) {
			return X__lockfile(tls, _f)
		}
		return int32(0)
	}()
	if _msg == 0 || *(*int8)(unsafe.Pointer(_msg)) == 0 {
		goto _1
	}

	Xfwrite(tls, _msg, Xstrlen(tls, _msg), uint64(1), _f)
	Xfputc(tls, int32(':'), _f)
	Xfputc(tls, int32(' '), _f)
_1:
	Xfwrite(tls, _errstr, Xstrlen(tls, _errstr), uint64(1), _f)
	Xfputc(tls, int32('\n'), _f)
	if ___need_unlock == 0 {
		goto _3
	}

	X__unlockfile(tls, _f)
_3:
}

type t881__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t881__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type s85_IO_FILE = struct {
	Fflags        uint32
	Frpos         uintptr // *uint8
	Frend         uintptr // *uint8
	Fclose        uintptr // *func(TLS, uintptr) int32
	Fwend         uintptr // *uint8
	Fwpos         uintptr // *uint8
	Fmustbezero_1 uintptr // *uint8
	Fwbase        uintptr // *uint8
	Fread         uintptr // *func(TLS, uintptr, uintptr, uint64) uint64
	Fwrite        uintptr // *func(TLS, uintptr, uintptr, uint64) uint64
	Fseek         uintptr // *func(TLS, uintptr, int64, int32) int64
	Fbuf          uintptr // *uint8
	Fbuf_size     uint64
	Fprev         uintptr // *TFILE = S_IO_FILE
	Fnext         uintptr // *TFILE = S_IO_FILE
	Ffd           int32
	Fpipe_pid     int32
	Flockcount    int64
	Fdummy3       int16
	Fmode         int8
	Flbf          int8
	Flock         int32
	Fwaiters      int32
	Fcookie       uintptr // *void
	Foff          int64
	Fgetln_buf    uintptr // *int8
	Fmustbezero_2 uintptr // *void
	Fshend        uintptr // *uint8
	Fshlim        int64
	Fshcnt        int64
	Fprev_locked  uintptr // *TFILE = S_IO_FILE
	Fnext_locked  uintptr // *TFILE = S_IO_FILE
	Flocale       uintptr // *S__locale_struct
}

type t254size_t = uint64

type t95off_t = int64

type s122__locale_struct = struct{ Fcat [6]uintptr }

// linking popen.o

// Xpopen is defined at popen.c:12:6
func Xpopen(tls TLS, _cmd uintptr /* *int8 */, _mode uintptr /* *int8 */) (r uintptr /* *TFILE = S_IO_FILE */) {
	esc := MustMalloc(96)
	var (
		_p             = esc // *[2]int32
		_op            int32
		_e             int32
		_f             uintptr    // *TFILE = S_IO_FILE
		_fa            = esc + 16 // *Tposix_spawn_file_actions_t = st...tions uintptr;F__pad [16]int32;}
		___need_unlock int32
		_              = ___need_unlock
		_tmp           int32
	)
	defer Free(esc)
	if int32(*(*int8)(unsafe.Pointer(_mode))) != int32('r') {
		goto _1
	}

	_op = int32(0)
	goto _2

_1:
	if int32(*(*int8)(unsafe.Pointer(_mode))) != int32('w') {
		goto _3
	}

	_op = int32(1)
	goto _4

_3:
	*(*int32)(unsafe.Pointer(X__errno_location(tls))) = int32(22)
	return null

_4:
_2:
	if Xpipe2(tls, _p, int32(02000000)) == 0 {
		goto _5
	}

	return null

_5:
	_f = Xfdopen(tls, *(*int32)(unsafe.Pointer(_p + 4*uintptr(_op))), _mode)
	if _f != 0 {
		goto _6
	}

	x34__syscall1(tls, int64(3), int64(*(*int32)(unsafe.Pointer(_p))))
	x34__syscall1(tls, int64(3), int64(*(*int32)(unsafe.Pointer(_p + 4))))
	return null

_6:
	___need_unlock = func() int32 {
		if *(*int32)(unsafe.Pointer(_f + 140)) >= int32(0) {
			return X__lockfile(tls, _f)
		}
		return int32(0)
	}()
	if *(*int32)(unsafe.Pointer(_p + 4*uintptr(int32(1)-_op))) != int32(1)-_op {
		goto _7
	}

	_tmp = Xfcntl(tls, int32(1)-_op, int32(1030), int32(0))
	if _tmp >= int32(0) {
		goto _8
	}

	_e = *(*int32)(unsafe.Pointer(X__errno_location(tls)))
	goto lfail

_8:
	x34__syscall1(tls, int64(3), int64(*(*int32)(unsafe.Pointer(_p + 4*uintptr(int32(1)-_op)))))
	*(*int32)(unsafe.Pointer(_p + 4*uintptr(int32(1)-_op))) = _tmp
_7:
	_e = int32(12)
	if Xposix_spawn_file_actions_init(tls, _fa) != 0 {
		goto _9
	}

	if Xposix_spawn_file_actions_adddup2(tls, _fa, *(*int32)(unsafe.Pointer(_p + 4*uintptr(int32(1)-_op))), int32(1)-_op) != 0 {
		goto _10
	}

	X__assert_fail(tls, ts+0 /* "TODO(ccgo)" */, ts+4508 /* "src/stdio/popen...." */, int32(55), x874__func__)
	X__assert_fail(tls, ts+0 /* "TODO(ccgo)" */, ts+4508 /* "src/stdio/popen...." */, int32(57), x874__func__)
	X__assert_fail(tls, ts+0 /* "TODO(ccgo)" */, ts+4508 /* "src/stdio/popen...." */, int32(59), x874__func__)
	X__assert_fail(tls, ts+0 /* "TODO(ccgo)" */, ts+4508 /* "src/stdio/popen...." */, int32(61), x874__func__)
	X__assert_fail(tls, ts+0 /* "TODO(ccgo)" */, ts+4508 /* "src/stdio/popen...." */, int32(63), x874__func__)
	X__assert_fail(tls, ts+0 /* "TODO(ccgo)" */, ts+4508 /* "src/stdio/popen...." */, int32(65), x874__func__)
	X__assert_fail(tls, ts+0 /* "TODO(ccgo)" */, ts+4508 /* "src/stdio/popen...." */, int32(67), x874__func__)
	X__assert_fail(tls, ts+0 /* "TODO(ccgo)" */, ts+4508 /* "src/stdio/popen...." */, int32(69), x874__func__)
	X__assert_fail(tls, ts+0 /* "TODO(ccgo)" */, ts+4508 /* "src/stdio/popen...." */, int32(71), x874__func__)
	X__assert_fail(tls, ts+0 /* "TODO(ccgo)" */, ts+4508 /* "src/stdio/popen...." */, int32(73), x874__func__)
_10:
	Xposix_spawn_file_actions_destroy(tls, _fa)
_9:
	goto lfail
lfail:
	Xfclose(tls, _f)
	x34__syscall1(tls, int64(3), int64(*(*int32)(unsafe.Pointer(_p + 4*uintptr(int32(1)-_op)))))
	*(*int32)(unsafe.Pointer(X__errno_location(tls))) = _e
	return null
}

type t882__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t882__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type s86_IO_FILE = struct {
	Fflags        uint32
	Frpos         uintptr // *uint8
	Frend         uintptr // *uint8
	Fclose        uintptr // *func(TLS, uintptr) int32
	Fwend         uintptr // *uint8
	Fwpos         uintptr // *uint8
	Fmustbezero_1 uintptr // *uint8
	Fwbase        uintptr // *uint8
	Fread         uintptr // *func(TLS, uintptr, uintptr, uint64) uint64
	Fwrite        uintptr // *func(TLS, uintptr, uintptr, uint64) uint64
	Fseek         uintptr // *func(TLS, uintptr, int64, int32) int64
	Fbuf          uintptr // *uint8
	Fbuf_size     uint64
	Fprev         uintptr // *TFILE = S_IO_FILE
	Fnext         uintptr // *TFILE = S_IO_FILE
	Ffd           int32
	Fpipe_pid     int32
	Flockcount    int64
	Fdummy3       int16
	Fmode         int8
	Flbf          int8
	Flock         int32
	Fwaiters      int32
	Fcookie       uintptr // *void
	Foff          int64
	Fgetln_buf    uintptr // *int8
	Fmustbezero_2 uintptr // *void
	Fshend        uintptr // *uint8
	Fshlim        int64
	Fshcnt        int64
	Fprev_locked  uintptr // *TFILE = S_IO_FILE
	Fnext_locked  uintptr // *TFILE = S_IO_FILE
	Flocale       uintptr // *S__locale_struct
}

// x1__func__ [6]int8, escapes: true, popen.c:13:1
var x874__func__ = ds + 44672

// x__syscall1 is defined at syscall_arch.h:16:22
func x34__syscall1(tls TLS, _n int64, _a1 int64) (r int64) {
	return X__syscall(tls, _n, _a1, int64(0), int64(0), int64(0), int64(0), int64(0))
}

type t255size_t = uint64

type t96off_t = int64

type s123__locale_struct = struct{ Fcat [6]uintptr }

// linking printf.o

// Xprintf is defined at printf.c:5:5
func Xprintf(tls TLS, _fmt uintptr /* *int8 */, ap ...interface{}) (r int32) {
	var (
		_ret int32
		_ap  uintptr // Tva_list = T__builtin_va_list = ...truct{Fsize int32;Fdata int8;};}
	)
	_ap = X__builtin_va_start(tls, ap)
	_ret = Xvfprintf(tls, *(*uintptr)(unsafe.Pointer(Xstdout)), _fmt, _ap)
	X__builtin_free(tls, _ap)
	return _ret
}

type t883__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t883__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// linking putc.o

func set875(p *uint8, v uint8) uint8 { *p = v; return v }

func postinc876(p *uintptr) uintptr { r := *p; *p += 1; return r }

// Xputc is defined at putc.c:3:5
func Xputc(tls TLS, _c int32, _f uintptr /* *TFILE = S_IO_FILE */) (r int32) {
	if *(*int32)(unsafe.Pointer(_f + 140)) >= int32(0) && X__lockfile(tls, _f) != 0 {
		goto _1
	}

	return func() int32 {
		if (int32(uint8(_c)) != int32(*(*int8)(unsafe.Pointer(_f + 139)))) && (*(*uintptr)(unsafe.Pointer(_f + 40)) < *(*uintptr)(unsafe.Pointer(_f + 32))) {
			return int32(set875((*uint8)(unsafe.Pointer(postinc876((*uintptr)(unsafe.Pointer(_f+40))))), uint8(_c)))
		}
		return X__overflow(tls, _f, _c)
	}()

_1:
	_c = func() int32 {
		if (int32(uint8(_c)) != int32(*(*int8)(unsafe.Pointer(_f + 139)))) && (*(*uintptr)(unsafe.Pointer(_f + 40)) < *(*uintptr)(unsafe.Pointer(_f + 32))) {
			return int32(set875((*uint8)(unsafe.Pointer(postinc876((*uintptr)(unsafe.Pointer(_f+40))))), uint8(_c)))
		}
		return X__overflow(tls, _f, _c)
	}()
	X__unlockfile(tls, _f)
	return _c
}

type t884__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t884__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type s87_IO_FILE = struct {
	Fflags        uint32
	Frpos         uintptr // *uint8
	Frend         uintptr // *uint8
	Fclose        uintptr // *func(TLS, uintptr) int32
	Fwend         uintptr // *uint8
	Fwpos         uintptr // *uint8
	Fmustbezero_1 uintptr // *uint8
	Fwbase        uintptr // *uint8
	Fread         uintptr // *func(TLS, uintptr, uintptr, uint64) uint64
	Fwrite        uintptr // *func(TLS, uintptr, uintptr, uint64) uint64
	Fseek         uintptr // *func(TLS, uintptr, int64, int32) int64
	Fbuf          uintptr // *uint8
	Fbuf_size     uint64
	Fprev         uintptr // *TFILE = S_IO_FILE
	Fnext         uintptr // *TFILE = S_IO_FILE
	Ffd           int32
	Fpipe_pid     int32
	Flockcount    int64
	Fdummy3       int16
	Fmode         int8
	Flbf          int8
	Flock         int32
	Fwaiters      int32
	Fcookie       uintptr // *void
	Foff          int64
	Fgetln_buf    uintptr // *int8
	Fmustbezero_2 uintptr // *void
	Fshend        uintptr // *uint8
	Fshlim        int64
	Fshcnt        int64
	Fprev_locked  uintptr // *TFILE = S_IO_FILE
	Fnext_locked  uintptr // *TFILE = S_IO_FILE
	Flocale       uintptr // *S__locale_struct
}

type t256size_t = uint64

type t97off_t = int64

type s124__locale_struct = struct{ Fcat [6]uintptr }

// linking putc_unlocked.o

func set877(p *uint8, v uint8) uint8 { *p = v; return v }

func postinc878(p *uintptr) uintptr { r := *p; *p += 1; return r }

// Xputc_unlocked is defined at putc_unlocked.c:3:5
func Xputc_unlocked(tls TLS, _c int32, _f uintptr /* *TFILE = S_IO_FILE */) (r int32) {
	return func() int32 {
		if (int32(uint8(_c)) != int32(*(*int8)(unsafe.Pointer(_f + 139)))) && (*(*uintptr)(unsafe.Pointer(_f + 40)) < *(*uintptr)(unsafe.Pointer(_f + 32))) {
			return int32(set877((*uint8)(unsafe.Pointer(postinc878((*uintptr)(unsafe.Pointer(_f+40))))), uint8(_c)))
		}
		return X__overflow(tls, _f, _c)
	}()
}

type t885__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t885__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type s88_IO_FILE = struct {
	Fflags        uint32
	Frpos         uintptr // *uint8
	Frend         uintptr // *uint8
	Fclose        uintptr // *func(TLS, uintptr) int32
	Fwend         uintptr // *uint8
	Fwpos         uintptr // *uint8
	Fmustbezero_1 uintptr // *uint8
	Fwbase        uintptr // *uint8
	Fread         uintptr // *func(TLS, uintptr, uintptr, uint64) uint64
	Fwrite        uintptr // *func(TLS, uintptr, uintptr, uint64) uint64
	Fseek         uintptr // *func(TLS, uintptr, int64, int32) int64
	Fbuf          uintptr // *uint8
	Fbuf_size     uint64
	Fprev         uintptr // *TFILE = S_IO_FILE
	Fnext         uintptr // *TFILE = S_IO_FILE
	Ffd           int32
	Fpipe_pid     int32
	Flockcount    int64
	Fdummy3       int16
	Fmode         int8
	Flbf          int8
	Flock         int32
	Fwaiters      int32
	Fcookie       uintptr // *void
	Foff          int64
	Fgetln_buf    uintptr // *int8
	Fmustbezero_2 uintptr // *void
	Fshend        uintptr // *uint8
	Fshlim        int64
	Fshcnt        int64
	Fprev_locked  uintptr // *TFILE = S_IO_FILE
	Fnext_locked  uintptr // *TFILE = S_IO_FILE
	Flocale       uintptr // *S__locale_struct
}

type t257size_t = uint64

type t98off_t = int64

type s125__locale_struct = struct{ Fcat [6]uintptr }

// linking putchar.o

// Xputchar is defined at putchar.c:3:5
func Xputchar(tls TLS, _c int32) (r int32) {
	return Xfputc(tls, _c, *(*uintptr)(unsafe.Pointer(Xstdout)))
}

type t886__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t886__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// linking putchar_unlocked.o

func set879(p *uint8, v uint8) uint8 { *p = v; return v }

func postinc880(p *uintptr) uintptr { r := *p; *p += 1; return r }

// Xputchar_unlocked is defined at putchar_unlocked.c:3:5
func Xputchar_unlocked(tls TLS, _c int32) (r int32) {
	return func() int32 {
		if (int32(uint8(_c)) != int32(*(*int8)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(Xstdout)) + 139)))) && (*(*uintptr)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(Xstdout)) + 40)) < *(*uintptr)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(Xstdout)) + 32))) {
			return int32(set879((*uint8)(unsafe.Pointer(postinc880((*uintptr)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(Xstdout))+40))))), uint8(_c)))
		}
		return X__overflow(tls, *(*uintptr)(unsafe.Pointer(Xstdout)), _c)
	}()
}

type t887__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t887__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// linking puts.o

func set881(p *uint8, v uint8) uint8 { *p = v; return v }

func postinc882(p *uintptr) uintptr { r := *p; *p += 1; return r }

// Xputs is defined at puts.c:3:5
func Xputs(tls TLS, _s uintptr /* *int8 */) (r int32) {
	var (
		_r             int32
		___need_unlock int32
	)
	___need_unlock = func() int32 {
		if *(*int32)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(Xstdout)) + 140)) >= int32(0) {
			return X__lockfile(tls, *(*uintptr)(unsafe.Pointer(Xstdout)))
		}
		return int32(0)
	}()
	_r = -bool2int((Xfputs(tls, _s, *(*uintptr)(unsafe.Pointer(Xstdout))) < int32(0)) || (func() int32 {
		if (int32(10) != int32(*(*int8)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(Xstdout)) + 139)))) && (*(*uintptr)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(Xstdout)) + 40)) < *(*uintptr)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(Xstdout)) + 32))) {
			return int32(set881((*uint8)(unsafe.Pointer(postinc882((*uintptr)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(Xstdout))+40))))), uint8('\n')))
		}
		return X__overflow(tls, *(*uintptr)(unsafe.Pointer(Xstdout)), int32('\n'))
	}() < int32(0)))
	if ___need_unlock == 0 {
		goto _2
	}

	X__unlockfile(tls, *(*uintptr)(unsafe.Pointer(Xstdout)))
_2:
	return _r
}

type t888__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t888__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// linking putw.o

// Xputw is defined at putw.c:4:5
func Xputw(tls TLS, ax int32, _f uintptr /* *TFILE = S_IO_FILE */) (r int32) {
	esc := MustMalloc(4)
	var _x = esc // *int32
	defer Free(esc)
	*(*int32)(unsafe.Pointer(_x)) = ax
	return int32(Xfwrite(tls, _x, uint64(4), uint64(1), _f)) - int32(1)
}

type t889__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t889__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t258size_t = uint64

type s89_IO_FILE struct{ uintptr }

// linking putwc.o

// Xputwc is defined at putwc.c:4:8
func Xputwc(tls TLS, _c int32, _f uintptr /* *TFILE = S_IO_FILE */) (r uint32) {
	return Xfputwc(tls, _c, _f)
}

type t890__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t890__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t27wchar_t = int32

type t25wint_t = uint32

type s90_IO_FILE = struct {
	Fflags        uint32
	Frpos         uintptr // *uint8
	Frend         uintptr // *uint8
	Fclose        uintptr // *func(TLS, uintptr) int32
	Fwend         uintptr // *uint8
	Fwpos         uintptr // *uint8
	Fmustbezero_1 uintptr // *uint8
	Fwbase        uintptr // *uint8
	Fread         uintptr // *func(TLS, uintptr, uintptr, uint64) uint64
	Fwrite        uintptr // *func(TLS, uintptr, uintptr, uint64) uint64
	Fseek         uintptr // *func(TLS, uintptr, int64, int32) int64
	Fbuf          uintptr // *uint8
	Fbuf_size     uint64
	Fprev         uintptr // *TFILE = S_IO_FILE
	Fnext         uintptr // *TFILE = S_IO_FILE
	Ffd           int32
	Fpipe_pid     int32
	Flockcount    int64
	Fdummy3       int16
	Fmode         int8
	Flbf          int8
	Flock         int32
	Fwaiters      int32
	Fcookie       uintptr // *void
	Foff          int64
	Fgetln_buf    uintptr // *int8
	Fmustbezero_2 uintptr // *void
	Fshend        uintptr // *uint8
	Fshlim        int64
	Fshcnt        int64
	Fprev_locked  uintptr // *TFILE = S_IO_FILE
	Fnext_locked  uintptr // *TFILE = S_IO_FILE
	Flocale       uintptr // *S__locale_struct
}

type t259size_t = uint64

type t99off_t = int64

type s126__locale_struct = struct{ Fcat [6]uintptr }

// linking putwchar.o

// Xputwchar is defined at putwchar.c:4:8
func Xputwchar(tls TLS, _c int32) (r uint32) {
	return Xfputwc(tls, _c, *(*uintptr)(unsafe.Pointer(Xstdout)))
}

type t891__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t891__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t28wchar_t = int32

type t26wint_t = uint32

// linking remove.o

// Xremove is defined at remove.c:6:5
func Xremove(tls TLS, _path uintptr /* *int8 */) (r int32) {
	var _r int32

	_r = int32(x35__syscall1(tls, int64(87), int64(_path)))
	if _r != int32(-21) {
		goto _1
	}

	_r = int32(x35__syscall1(tls, int64(84), int64(_path)))
_1:
	return int32(X__syscall_ret(tls, uint64(_r)))
}

type t892__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t892__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// x__syscall1 is defined at syscall_arch.h:16:22
func x35__syscall1(tls TLS, _n int64, _a1 int64) (r int64) {
	return X__syscall(tls, _n, _a1, int64(0), int64(0), int64(0), int64(0), int64(0))
}

// linking rename.o

// Xrename is defined at rename.c:5:5
func Xrename(tls TLS, _old uintptr /* *int8 */, _new uintptr /* *int8 */) (r int32) {
	return int32(X__syscall_ret(tls, uint64(x46__syscall2(tls, int64(82), int64(_old), int64(_new)))))
}

type t893__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t893__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// x__syscall2 is defined at syscall_arch.h:24:22
func x46__syscall2(tls TLS, _n int64, _a1 int64, _a2 int64) (r int64) {
	return X__syscall(tls, _n, _a1, _a2, int64(0), int64(0), int64(0), int64(0))
}

// linking rewind.o

// Xrewind is defined at rewind.c:3:6
func Xrewind(tls TLS, _f uintptr /* *TFILE = S_IO_FILE */) {
	var ___need_unlock int32

	___need_unlock = func() int32 {
		if *(*int32)(unsafe.Pointer(_f + 140)) >= int32(0) {
			return X__lockfile(tls, _f)
		}
		return int32(0)
	}()
	X__fseeko_unlocked(tls, _f, int64(0), int32(0))
	{
		p := (*uint32)(unsafe.Pointer(_f))
		*p = *p & uint32(4294967263)
	}
	if ___need_unlock == 0 {
		goto _2
	}

	X__unlockfile(tls, _f)
_2:
}

type t894__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t894__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type s91_IO_FILE = struct {
	Fflags        uint32
	Frpos         uintptr // *uint8
	Frend         uintptr // *uint8
	Fclose        uintptr // *func(TLS, uintptr) int32
	Fwend         uintptr // *uint8
	Fwpos         uintptr // *uint8
	Fmustbezero_1 uintptr // *uint8
	Fwbase        uintptr // *uint8
	Fread         uintptr // *func(TLS, uintptr, uintptr, uint64) uint64
	Fwrite        uintptr // *func(TLS, uintptr, uintptr, uint64) uint64
	Fseek         uintptr // *func(TLS, uintptr, int64, int32) int64
	Fbuf          uintptr // *uint8
	Fbuf_size     uint64
	Fprev         uintptr // *TFILE = S_IO_FILE
	Fnext         uintptr // *TFILE = S_IO_FILE
	Ffd           int32
	Fpipe_pid     int32
	Flockcount    int64
	Fdummy3       int16
	Fmode         int8
	Flbf          int8
	Flock         int32
	Fwaiters      int32
	Fcookie       uintptr // *void
	Foff          int64
	Fgetln_buf    uintptr // *int8
	Fmustbezero_2 uintptr // *void
	Fshend        uintptr // *uint8
	Fshlim        int64
	Fshcnt        int64
	Fprev_locked  uintptr // *TFILE = S_IO_FILE
	Fnext_locked  uintptr // *TFILE = S_IO_FILE
	Flocale       uintptr // *S__locale_struct
}

type t260size_t = uint64

type t100off_t = int64

type s127__locale_struct = struct{ Fcat [6]uintptr }

// linking scanf.o

// Xscanf is defined at scanf.c:5:5
func Xscanf(tls TLS, _fmt uintptr /* *int8 */, ap ...interface{}) (r int32) {
	var (
		_ret int32
		_ap  uintptr // Tva_list = T__builtin_va_list = ...truct{Fsize int32;Fdata int8;};}
	)
	_ap = X__builtin_va_start(tls, ap)
	_ret = Xvscanf(tls, _fmt, _ap)
	X__builtin_free(tls, _ap)
	return _ret
}

type t895__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t895__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// linking setbuf.o

// Xsetbuf is defined at setbuf.c:3:6
func Xsetbuf(tls TLS, _f uintptr /* *TFILE = S_IO_FILE */, _buf uintptr /* *int8 */) {
	Xsetvbuf(tls, _f, _buf, func() int32 {
		if _buf != 0 {
			return int32(0)
		}
		return int32(2)
	}(), uint64(1024))
}

type t896__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t896__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t261size_t = uint64

type s92_IO_FILE struct{ uintptr }

// linking setbuffer.o

// Xsetbuffer is defined at setbuffer.c:4:6
func Xsetbuffer(tls TLS, _f uintptr /* *TFILE = S_IO_FILE */, _buf uintptr /* *int8 */, _size uint64) {
	Xsetvbuf(tls, _f, _buf, func() int32 {
		if _buf != 0 {
			return int32(0)
		}
		return int32(2)
	}(), _size)
}

type t897__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t897__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t262size_t = uint64

type s93_IO_FILE struct{ uintptr }

// linking setlinebuf.o

// Xsetlinebuf is defined at setlinebuf.c:4:6
func Xsetlinebuf(tls TLS, _f uintptr /* *TFILE = S_IO_FILE */) {
	Xsetvbuf(tls, _f, null, int32(1), uint64(0))
}

type t898__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t898__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t263size_t = uint64

type s94_IO_FILE struct{ uintptr }

// linking setvbuf.o

// Xsetvbuf is defined at setvbuf.c:9:5
func Xsetvbuf(tls TLS, _f uintptr /* *TFILE = S_IO_FILE */, _buf uintptr /* *int8 */, _type int32, _size uint64) (r int32) {
	*(*int8)(unsafe.Pointer(_f + 139)) = int8(-1)
	if _type != int32(2) {
		goto _1
	}

	*(*uint64)(unsafe.Pointer(_f + 96)) = uint64(0)
	goto _2

_1:
	if _buf == 0 || _size < uint64(8) {
		goto _3
	}

	*(*uintptr)(unsafe.Pointer(_f + 88)) = _buf + uintptr(8)
	*(*uint64)(unsafe.Pointer(_f + 96)) = _size - uint64(8)
_3:
	if _type != int32(1) || *(*uint64)(unsafe.Pointer(_f + 96)) == 0 {
		goto _4
	}

	*(*int8)(unsafe.Pointer(_f + 139)) = int8('\n')
_4:
_2:
	{
		p := (*uint32)(unsafe.Pointer(_f))
		*p = *p | uint32(64)
	}
	return int32(0)
}

type t899__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t899__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t264size_t = uint64

type s95_IO_FILE = struct {
	Fflags        uint32
	Frpos         uintptr // *uint8
	Frend         uintptr // *uint8
	Fclose        uintptr // *func(TLS, uintptr) int32
	Fwend         uintptr // *uint8
	Fwpos         uintptr // *uint8
	Fmustbezero_1 uintptr // *uint8
	Fwbase        uintptr // *uint8
	Fread         uintptr // *func(TLS, uintptr, uintptr, uint64) uint64
	Fwrite        uintptr // *func(TLS, uintptr, uintptr, uint64) uint64
	Fseek         uintptr // *func(TLS, uintptr, int64, int32) int64
	Fbuf          uintptr // *uint8
	Fbuf_size     uint64
	Fprev         uintptr // *TFILE = S_IO_FILE
	Fnext         uintptr // *TFILE = S_IO_FILE
	Ffd           int32
	Fpipe_pid     int32
	Flockcount    int64
	Fdummy3       int16
	Fmode         int8
	Flbf          int8
	Flock         int32
	Fwaiters      int32
	Fcookie       uintptr // *void
	Foff          int64
	Fgetln_buf    uintptr // *int8
	Fmustbezero_2 uintptr // *void
	Fshend        uintptr // *uint8
	Fshlim        int64
	Fshcnt        int64
	Fprev_locked  uintptr // *TFILE = S_IO_FILE
	Fnext_locked  uintptr // *TFILE = S_IO_FILE
	Flocale       uintptr // *S__locale_struct
}

type t101off_t = int64

type s128__locale_struct = struct{ Fcat [6]uintptr }

// linking snprintf.o

// Xsnprintf is defined at snprintf.c:4:5
func Xsnprintf(tls TLS, _s uintptr /* *int8 */, _n uint64, _fmt uintptr /* *int8 */, ap ...interface{}) (r int32) {
	var (
		_ret int32
		_ap  uintptr // Tva_list = T__builtin_va_list = ...truct{Fsize int32;Fdata int8;};}
	)
	_ap = X__builtin_va_start(tls, ap)
	_ret = Xvsnprintf(tls, _s, _n, _fmt, _ap)
	X__builtin_free(tls, _ap)
	return _ret
}

type t900__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t900__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t265size_t = uint64

// linking sprintf.o

// Xsprintf is defined at sprintf.c:5:5
func Xsprintf(tls TLS, _s uintptr /* *int8 */, _fmt uintptr /* *int8 */, ap ...interface{}) (r int32) {
	var (
		_ret int32
		_ap  uintptr // Tva_list = T__builtin_va_list = ...truct{Fsize int32;Fdata int8;};}
	)
	_ap = X__builtin_va_start(tls, ap)
	_ret = Xvsprintf(tls, _s, _fmt, _ap)
	X__builtin_free(tls, _ap)
	return _ret
}

type t901__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t901__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// linking sscanf.o

// Xsscanf is defined at sscanf.c:5:5
func Xsscanf(tls TLS, _s uintptr /* *int8 */, _fmt uintptr /* *int8 */, ap ...interface{}) (r int32) {
	var (
		_ret int32
		_ap  uintptr // Tva_list = T__builtin_va_list = ...truct{Fsize int32;Fdata int8;};}
	)
	_ap = X__builtin_va_start(tls, ap)
	_ret = Xvsscanf(tls, _s, _fmt, _ap)
	X__builtin_free(tls, _ap)
	return _ret
}

type t902__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t902__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// linking stderr.o

// Xstderr *TFILE = S_IO_FILE, escapes: true, stderr.c:15:6
var Xstderr = bss + 3920 // pointer to FILE

func init() { *(*uintptr)(unsafe.Pointer(Xstderr)) = x3f }

// X__stderr_used *TFILE = S_IO_FILE, escapes: true, stderr.c:16:6
var X__stderr_used = bss + 3928 // pointer to FILE

func init() { *(*uintptr)(unsafe.Pointer(X__stderr_used)) = x3f }

type t903__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t903__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type s96_IO_FILE = struct {
	Fflags        uint32
	Frpos         uintptr // *uint8
	Frend         uintptr // *uint8
	Fclose        uintptr // *func(TLS, uintptr) int32
	Fwend         uintptr // *uint8
	Fwpos         uintptr // *uint8
	Fmustbezero_1 uintptr // *uint8
	Fwbase        uintptr // *uint8
	Fread         uintptr // *func(TLS, uintptr, uintptr, uint64) uint64
	Fwrite        uintptr // *func(TLS, uintptr, uintptr, uint64) uint64
	Fseek         uintptr // *func(TLS, uintptr, int64, int32) int64
	Fbuf          uintptr // *uint8
	Fbuf_size     uint64
	Fprev         uintptr // *TFILE = S_IO_FILE
	Fnext         uintptr // *TFILE = S_IO_FILE
	Ffd           int32
	Fpipe_pid     int32
	Flockcount    int64
	Fdummy3       int16
	Fmode         int8
	Flbf          int8
	Flock         int32
	Fwaiters      int32
	Fcookie       uintptr // *void
	Foff          int64
	Fgetln_buf    uintptr // *int8
	Fmustbezero_2 uintptr // *void
	Fshend        uintptr // *uint8
	Fshlim        int64
	Fshcnt        int64
	Fprev_locked  uintptr // *TFILE = S_IO_FILE
	Fnext_locked  uintptr // *TFILE = S_IO_FILE
	Flocale       uintptr // *S__locale_struct
}

func fp883(f func(TLS, uintptr, uintptr, uint64) uint64) uintptr {
	return *(*uintptr)(unsafe.Pointer(&f))
}

func fp884(f func(TLS, uintptr, int64, int32) int64) uintptr { return *(*uintptr)(unsafe.Pointer(&f)) }

func fp885(f func(TLS, uintptr) int32) uintptr { return *(*uintptr)(unsafe.Pointer(&f)) }

// xf TFILE = S_IO_FILE, escapes: true, stderr.c:4:13
var x3f = bss + 3936 // FILE

func init() {
	*(*s96_IO_FILE)(unsafe.Pointer(x3f)) = s96_IO_FILE{
		Fbuf:   x1buf + uintptr(8),
		Ffd:    int32(2),
		Fflags: uint32(5),
		Flbf:   int8(-1),
		Fwrite: fp883(X__stdio_write),
		Fseek:  fp884(X__stdio_seek),
		Fclose: fp885(X__stdio_close),
		Flock:  int32(-1),
	}
}

type t266size_t = uint64

type t102off_t = int64

type s129__locale_struct = struct{ Fcat [6]uintptr }

type t4FILE = s96_IO_FILE

// xbuf [8]uint8, escapes: true, stderr.c:3:22
var x1buf = bss + 4168

// linking stdin.o

// Xstdin *TFILE = S_IO_FILE, escapes: true, stdin.c:14:6
var Xstdin = bss + 4176 // pointer to FILE

func init() { *(*uintptr)(unsafe.Pointer(Xstdin)) = x4f }

// X__stdin_used *TFILE = S_IO_FILE, escapes: true, stdin.c:15:6
var X__stdin_used = bss + 4184 // pointer to FILE

func init() { *(*uintptr)(unsafe.Pointer(X__stdin_used)) = x4f }

type t904__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t904__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type s97_IO_FILE = struct {
	Fflags        uint32
	Frpos         uintptr // *uint8
	Frend         uintptr // *uint8
	Fclose        uintptr // *func(TLS, uintptr) int32
	Fwend         uintptr // *uint8
	Fwpos         uintptr // *uint8
	Fmustbezero_1 uintptr // *uint8
	Fwbase        uintptr // *uint8
	Fread         uintptr // *func(TLS, uintptr, uintptr, uint64) uint64
	Fwrite        uintptr // *func(TLS, uintptr, uintptr, uint64) uint64
	Fseek         uintptr // *func(TLS, uintptr, int64, int32) int64
	Fbuf          uintptr // *uint8
	Fbuf_size     uint64
	Fprev         uintptr // *TFILE = S_IO_FILE
	Fnext         uintptr // *TFILE = S_IO_FILE
	Ffd           int32
	Fpipe_pid     int32
	Flockcount    int64
	Fdummy3       int16
	Fmode         int8
	Flbf          int8
	Flock         int32
	Fwaiters      int32
	Fcookie       uintptr // *void
	Foff          int64
	Fgetln_buf    uintptr // *int8
	Fmustbezero_2 uintptr // *void
	Fshend        uintptr // *uint8
	Fshlim        int64
	Fshcnt        int64
	Fprev_locked  uintptr // *TFILE = S_IO_FILE
	Fnext_locked  uintptr // *TFILE = S_IO_FILE
	Flocale       uintptr // *S__locale_struct
}

func fp886(f func(TLS, uintptr, uintptr, uint64) uint64) uintptr {
	return *(*uintptr)(unsafe.Pointer(&f))
}

func fp887(f func(TLS, uintptr, int64, int32) int64) uintptr { return *(*uintptr)(unsafe.Pointer(&f)) }

func fp888(f func(TLS, uintptr) int32) uintptr { return *(*uintptr)(unsafe.Pointer(&f)) }

// xf TFILE = S_IO_FILE, escapes: true, stdin.c:4:13
var x4f = bss + 4192 // FILE

func init() {
	*(*s97_IO_FILE)(unsafe.Pointer(x4f)) = s97_IO_FILE{
		Fbuf:      x2buf + uintptr(8),
		Fbuf_size: uint64(1024),
		Fflags:    uint32(9),
		Fread:     fp886(X__stdio_read),
		Fseek:     fp887(X__stdio_seek),
		Fclose:    fp888(X__stdio_close),
		Flock:     int32(-1),
	}
}

type t267size_t = uint64

type t103off_t = int64

type s130__locale_struct = struct{ Fcat [6]uintptr }

type t5FILE = s97_IO_FILE

// xbuf [1032]uint8, escapes: true, stdin.c:3:22
var x2buf = bss + 4424

// linking stdout.o

// Xstdout *TFILE = S_IO_FILE, escapes: true, stdout.c:15:6
var Xstdout = bss + 5456 // pointer to FILE

func init() { *(*uintptr)(unsafe.Pointer(Xstdout)) = x5f }

// X__stdout_used *TFILE = S_IO_FILE, escapes: true, stdout.c:16:6
var X__stdout_used = bss + 5464 // pointer to FILE

func init() { *(*uintptr)(unsafe.Pointer(X__stdout_used)) = x5f }

type t905__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t905__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type s98_IO_FILE = struct {
	Fflags        uint32
	Frpos         uintptr // *uint8
	Frend         uintptr // *uint8
	Fclose        uintptr // *func(TLS, uintptr) int32
	Fwend         uintptr // *uint8
	Fwpos         uintptr // *uint8
	Fmustbezero_1 uintptr // *uint8
	Fwbase        uintptr // *uint8
	Fread         uintptr // *func(TLS, uintptr, uintptr, uint64) uint64
	Fwrite        uintptr // *func(TLS, uintptr, uintptr, uint64) uint64
	Fseek         uintptr // *func(TLS, uintptr, int64, int32) int64
	Fbuf          uintptr // *uint8
	Fbuf_size     uint64
	Fprev         uintptr // *TFILE = S_IO_FILE
	Fnext         uintptr // *TFILE = S_IO_FILE
	Ffd           int32
	Fpipe_pid     int32
	Flockcount    int64
	Fdummy3       int16
	Fmode         int8
	Flbf          int8
	Flock         int32
	Fwaiters      int32
	Fcookie       uintptr // *void
	Foff          int64
	Fgetln_buf    uintptr // *int8
	Fmustbezero_2 uintptr // *void
	Fshend        uintptr // *uint8
	Fshlim        int64
	Fshcnt        int64
	Fprev_locked  uintptr // *TFILE = S_IO_FILE
	Fnext_locked  uintptr // *TFILE = S_IO_FILE
	Flocale       uintptr // *S__locale_struct
}

func fp889(f func(TLS, uintptr, uintptr, uint64) uint64) uintptr {
	return *(*uintptr)(unsafe.Pointer(&f))
}

func fp890(f func(TLS, uintptr, int64, int32) int64) uintptr { return *(*uintptr)(unsafe.Pointer(&f)) }

func fp891(f func(TLS, uintptr) int32) uintptr { return *(*uintptr)(unsafe.Pointer(&f)) }

// xf TFILE = S_IO_FILE, escapes: true, stdout.c:4:13
var x5f = bss + 5472 // FILE

func init() {
	*(*s98_IO_FILE)(unsafe.Pointer(x5f)) = s98_IO_FILE{
		Fbuf:      x3buf + uintptr(8),
		Fbuf_size: uint64(1024),
		Ffd:       int32(1),
		Fflags:    uint32(5),
		Flbf:      int8('\n'),
		Fwrite:    fp889(X__stdout_write),
		Fseek:     fp890(X__stdio_seek),
		Fclose:    fp891(X__stdio_close),
		Flock:     int32(-1),
	}
}

type t268size_t = uint64

type t104off_t = int64

type s131__locale_struct = struct{ Fcat [6]uintptr }

type t6FILE = s98_IO_FILE

// xbuf [1032]uint8, escapes: true, stdout.c:3:22
var x3buf = bss + 5704

// linking swprintf.o

// Xswprintf is defined at swprintf.c:4:5
func Xswprintf(tls TLS, _s uintptr /* *Twchar_t = int32 */, _n uint64, _fmt uintptr /* *Twchar_t = int32 */, ap ...interface{}) (r int32) {
	var (
		_ret int32
		_ap  uintptr // Tva_list = T__builtin_va_list = ...truct{Fsize int32;Fdata int8;};}
	)
	_ap = X__builtin_va_start(tls, ap)
	_ret = Xvswprintf(tls, _s, _n, _fmt, _ap)
	X__builtin_free(tls, _ap)
	return _ret
}

type t906__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t906__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t269size_t = uint64

// linking swscanf.o

// Xswscanf is defined at swscanf.c:5:5
func Xswscanf(tls TLS, _s uintptr /* *Twchar_t = int32 */, _fmt uintptr /* *Twchar_t = int32 */, ap ...interface{}) (r int32) {
	var (
		_ret int32
		_ap  uintptr // Tva_list = T__builtin_va_list = ...truct{Fsize int32;Fdata int8;};}
	)
	_ap = X__builtin_va_start(tls, ap)
	_ret = Xvswscanf(tls, _s, _fmt, _ap)
	X__builtin_free(tls, _ap)
	return _ret
}

type t907__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t907__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// linking tempnam.o

// Xtempnam is defined at tempnam.c:13:6
func Xtempnam(tls TLS, _dir uintptr /* *int8 */, _pfx uintptr /* *int8 */) (r uintptr /* *int8 */) {
	esc := MustMalloc(4240)
	var (
		_s        = esc // *[4096]int8
		_l        uint64
		_dl       uint64
		_pl       uint64
		_try      int32
		_r        int32
		_unnamed1 = esc + 4096 // *Sstat
	)
	defer Free(esc)
	if _dir != 0 {
		goto _1
	}

	_dir = ts + 4528 /* "/tmp" */
_1:
	if _pfx != 0 {
		goto _2
	}

	_pfx = ts + 4536 /* "temp" */
_2:
	_dl = Xstrlen(tls, _dir)
	_pl = Xstrlen(tls, _pfx)
	_l = _dl + uint64(1) + _pl + uint64(1) + uint64(6)
	if _l < uint64(4096) {
		goto _3
	}

	*(*int32)(unsafe.Pointer(X__errno_location(tls))) = int32(36)
	return null

_3:
	Xmemcpy(tls, _s, _dir, _dl)
	*(*int8)(unsafe.Pointer(_s + uintptr(_dl))) = int8('/')
	Xmemcpy(tls, (_s+uintptr(_dl))+uintptr(1), _pfx, _pl)
	*(*int8)(unsafe.Pointer(_s + uintptr(_dl+uint64(1)+_pl))) = int8('_')
	*(*int8)(unsafe.Pointer(_s + uintptr(_l))) = int8(0)
	_try = int32(0)
_4:
	if _try >= int32(100) {
		goto _6
	}

	X__randname(tls, (_s+uintptr(_l))-uintptr(6))
	_r = int32(x47__syscall2(tls, int64(6), int64(_s), int64(func() uintptr { *(*s12stat)(unsafe.Pointer(_unnamed1)) = s12stat{}; return _unnamed1 }())))
	if _r != int32(-2) {
		goto _7
	}

	return Xstrdup(tls, _s)

_7:
	_try++
	goto _4

_6:
	return null
}

type t908__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t908__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t270size_t = uint64

type s12stat = struct {
	Fst_dev     uint64
	Fst_ino     uint64
	Fst_nlink   uint64
	Fst_mode    uint32
	Fst_uid     uint32
	Fst_gid     uint32
	F__pad0     uint32
	Fst_rdev    uint64
	Fst_size    int64
	Fst_blksize int64
	Fst_blocks  int64
	Fst_atim    s32timespec
	Fst_mtim    s32timespec
	Fst_ctim    s32timespec
	F__unused   [3]int64
}

// x__syscall2 is defined at syscall_arch.h:24:22
func x47__syscall2(tls TLS, _n int64, _a1 int64, _a2 int64) (r int64) {
	return X__syscall(tls, _n, _a1, _a2, int64(0), int64(0), int64(0), int64(0))
}

type t16dev_t = uint64

type t18ino_t = uint64

type t12nlink_t = uint64

type t35mode_t = uint32

type t30uid_t = uint32

type t31gid_t = uint32

type t105off_t = int64

type t12blksize_t = int64

type t12blkcnt_t = int64

type s32timespec = struct {
	Ftv_sec  int64
	Ftv_nsec int64
}

type t48time_t = int64

// linking tmpfile.o

// Xtmpfile is defined at tmpfile.c:10:6
func Xtmpfile(tls TLS) (r uintptr /* *TFILE = S_IO_FILE */) {
	esc := MustMalloc(20)
	var (
		_s   = esc // *[20]int8
		_fd  int32
		_f   uintptr // *TFILE = S_IO_FILE
		_try int32
	)
	defer Free(esc)
	*(*[20]int8)(unsafe.Pointer(_s)) = *(*[20]int8)(unsafe.Pointer(ts + 4544 /* "/tmp/tmpfile_XXX..." */))
	_try = int32(0)
_1:
	if _try >= int32(100) {
		goto _3
	}

	X__randname(tls, _s+uintptr(13))
	_fd = int32(X__syscall_ret(tls, uint64(x53__syscall3(tls, int64(2), int64(_s), int64(194), int64(384)))))
	if _fd < int32(0) {
		goto _4
	}

	x36__syscall1(tls, int64(87), int64(_s))
	_f = X__fdopen(tls, _fd, ts+4564 /* "w+" */)
	if _f != 0 {
		goto _5
	}

	x36__syscall1(tls, int64(3), int64(_fd))
_5:
	return _f

_4:
	_try++
	goto _1

_3:
	return null
}

type t909__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t909__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type s99_IO_FILE = struct {
	Fflags        uint32
	Frpos         uintptr // *uint8
	Frend         uintptr // *uint8
	Fclose        uintptr // *func(TLS, uintptr) int32
	Fwend         uintptr // *uint8
	Fwpos         uintptr // *uint8
	Fmustbezero_1 uintptr // *uint8
	Fwbase        uintptr // *uint8
	Fread         uintptr // *func(TLS, uintptr, uintptr, uint64) uint64
	Fwrite        uintptr // *func(TLS, uintptr, uintptr, uint64) uint64
	Fseek         uintptr // *func(TLS, uintptr, int64, int32) int64
	Fbuf          uintptr // *uint8
	Fbuf_size     uint64
	Fprev         uintptr // *TFILE = S_IO_FILE
	Fnext         uintptr // *TFILE = S_IO_FILE
	Ffd           int32
	Fpipe_pid     int32
	Flockcount    int64
	Fdummy3       int16
	Fmode         int8
	Flbf          int8
	Flock         int32
	Fwaiters      int32
	Fcookie       uintptr // *void
	Foff          int64
	Fgetln_buf    uintptr // *int8
	Fmustbezero_2 uintptr // *void
	Fshend        uintptr // *uint8
	Fshlim        int64
	Fshcnt        int64
	Fprev_locked  uintptr // *TFILE = S_IO_FILE
	Fnext_locked  uintptr // *TFILE = S_IO_FILE
	Flocale       uintptr // *S__locale_struct
}

// x__syscall3 is defined at syscall_arch.h:33:22
func x53__syscall3(tls TLS, _n int64, _a1 int64, _a2 int64, _a3 int64) (r int64) {
	return X__syscall(tls, _n, _a1, _a2, _a3, int64(0), int64(0), int64(0))
}

// x__syscall1 is defined at syscall_arch.h:16:22
func x36__syscall1(tls TLS, _n int64, _a1 int64) (r int64) {
	return X__syscall(tls, _n, _a1, int64(0), int64(0), int64(0), int64(0), int64(0))
}

type t271size_t = uint64

type t106off_t = int64

type s132__locale_struct = struct{ Fcat [6]uintptr }

// linking tmpnam.o

// Xtmpnam is defined at tmpnam.c:12:6
func Xtmpnam(tls TLS, _buf uintptr /* *int8 */) (r uintptr /* *int8 */) {
	esc := MustMalloc(176)
	var (
		_s        = esc // *[19]int8
		_try      int32
		_r        int32
		_unnamed1 = esc + 32 // *Sstat
	)
	defer Free(esc)
	*(*[19]int8)(unsafe.Pointer(_s)) = *(*[19]int8)(unsafe.Pointer(ts + 4568 /* "/tmp/tmpnam_XXXX..." */))
	_try = int32(0)
_1:
	if _try >= int32(100) {
		goto _3
	}

	X__randname(tls, _s+uintptr(12))
	_r = int32(x48__syscall2(tls, int64(6), int64(_s), int64(func() uintptr { *(*s13stat)(unsafe.Pointer(_unnamed1)) = s13stat{}; return _unnamed1 }())))
	if _r != int32(-2) {
		goto _4
	}

	return Xstrcpy(tls, func() uintptr {
		if _buf != 0 {
			return _buf
		}
		return x892internal
	}(), _s)

_4:
	_try++
	goto _1

_3:
	return null
}

type t910__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t910__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// x1internal [20]int8, escapes: true, tmpnam.c:14:14
var x892internal = bss + 6736

type s13stat = struct {
	Fst_dev     uint64
	Fst_ino     uint64
	Fst_nlink   uint64
	Fst_mode    uint32
	Fst_uid     uint32
	Fst_gid     uint32
	F__pad0     uint32
	Fst_rdev    uint64
	Fst_size    int64
	Fst_blksize int64
	Fst_blocks  int64
	Fst_atim    s33timespec
	Fst_mtim    s33timespec
	Fst_ctim    s33timespec
	F__unused   [3]int64
}

// x__syscall2 is defined at syscall_arch.h:24:22
func x48__syscall2(tls TLS, _n int64, _a1 int64, _a2 int64) (r int64) {
	return X__syscall(tls, _n, _a1, _a2, int64(0), int64(0), int64(0), int64(0))
}

type t17dev_t = uint64

type t19ino_t = uint64

type t13nlink_t = uint64

type t36mode_t = uint32

type t31uid_t = uint32

type t32gid_t = uint32

type t107off_t = int64

type t13blksize_t = int64

type t13blkcnt_t = int64

type s33timespec = struct {
	Ftv_sec  int64
	Ftv_nsec int64
}

type t49time_t = int64

// linking ungetc.o

func preinc893(p *uintptr) uintptr { *p += 18446744073709551615; return *p }

// Xungetc is defined at ungetc.c:3:5
func Xungetc(tls TLS, _c int32, _f uintptr /* *TFILE = S_IO_FILE */) (r int32) {
	var ___need_unlock int32

	if _c != int32(-1) {
		goto _1
	}

	return _c

_1:
	___need_unlock = func() int32 {
		if *(*int32)(unsafe.Pointer(_f + 140)) >= int32(0) {
			return X__lockfile(tls, _f)
		}
		return int32(0)
	}()
	if *(*uintptr)(unsafe.Pointer(_f + 8)) != 0 {
		goto _2
	}

	X__toread(tls, _f)
_2:
	if *(*uintptr)(unsafe.Pointer(_f + 8)) != 0 && *(*uintptr)(unsafe.Pointer(_f + 8)) > (*(*uintptr)(unsafe.Pointer(_f + 88))-uintptr(8)) {
		goto _3
	}

	if ___need_unlock == 0 {
		goto _5
	}

	X__unlockfile(tls, _f)
_5:
	return int32(-1)

_3:
	*(*uint8)(unsafe.Pointer(preinc893((*uintptr)(unsafe.Pointer(_f + 8))))) = uint8(_c)
	{
		p := (*uint32)(unsafe.Pointer(_f))
		*p = *p & uint32(4294967279)
	}
	if ___need_unlock == 0 {
		goto _7
	}

	X__unlockfile(tls, _f)
_7:
	return _c
}

type t911__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t911__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type s100_IO_FILE = struct {
	Fflags        uint32
	Frpos         uintptr // *uint8
	Frend         uintptr // *uint8
	Fclose        uintptr // *func(TLS, uintptr) int32
	Fwend         uintptr // *uint8
	Fwpos         uintptr // *uint8
	Fmustbezero_1 uintptr // *uint8
	Fwbase        uintptr // *uint8
	Fread         uintptr // *func(TLS, uintptr, uintptr, uint64) uint64
	Fwrite        uintptr // *func(TLS, uintptr, uintptr, uint64) uint64
	Fseek         uintptr // *func(TLS, uintptr, int64, int32) int64
	Fbuf          uintptr // *uint8
	Fbuf_size     uint64
	Fprev         uintptr // *TFILE = S_IO_FILE
	Fnext         uintptr // *TFILE = S_IO_FILE
	Ffd           int32
	Fpipe_pid     int32
	Flockcount    int64
	Fdummy3       int16
	Fmode         int8
	Flbf          int8
	Flock         int32
	Fwaiters      int32
	Fcookie       uintptr // *void
	Foff          int64
	Fgetln_buf    uintptr // *int8
	Fmustbezero_2 uintptr // *void
	Fshend        uintptr // *uint8
	Fshlim        int64
	Fshcnt        int64
	Fprev_locked  uintptr // *TFILE = S_IO_FILE
	Fnext_locked  uintptr // *TFILE = S_IO_FILE
	Flocale       uintptr // *S__locale_struct
}

type t272size_t = uint64

type t108off_t = int64

type s133__locale_struct = struct{ Fcat [6]uintptr }

// linking ungetwc.o

func set894(p *int32, v int32) int32 { *p = v; return v }

// Xungetwc is defined at ungetwc.c:9:8
func Xungetwc(tls TLS, _c uint32, _f uintptr /* *TFILE = S_IO_FILE */) (r uint32) {
	esc := MustMalloc(4)
	var (
		_mbc           = esc // *[4]uint8
		_l             int32
		_ploc          uintptr // **S__locale_struct
		_loc           uintptr // Tlocale_t = *S__locale_struct
		___need_unlock int32
	)
	defer Free(esc)
	_ploc = x31__pthread_self(tls) + 192
	_loc = *(*uintptr)(unsafe.Pointer(_ploc))
	___need_unlock = func() int32 {
		if *(*int32)(unsafe.Pointer(_f + 140)) >= int32(0) {
			return X__lockfile(tls, _f)
		}
		return int32(0)
	}()
	if int32(*(*int8)(unsafe.Pointer(_f + 138))) > int32(0) {
		goto _1
	}

	Xfwide(tls, _f, int32(1))
_1:
	*(*uintptr)(unsafe.Pointer(_ploc)) = *(*uintptr)(unsafe.Pointer(_f + 224))
	if *(*uintptr)(unsafe.Pointer(_f + 8)) != 0 {
		goto _2
	}

	X__toread(tls, _f)
_2:
	if *(*uintptr)(unsafe.Pointer(_f + 8)) != 0 && _c != uint32(0xffffffff) && set894(&_l, int32(Xwcrtomb(tls, _mbc, int32(_c), null))) >= int32(0) && *(*uintptr)(unsafe.Pointer(_f + 8)) >= ((*(*uintptr)(unsafe.Pointer(_f + 88))-uintptr(8))+uintptr(_l)) {
		goto _3
	}

	if ___need_unlock == 0 {
		goto _5
	}

	X__unlockfile(tls, _f)
_5:
	*(*uintptr)(unsafe.Pointer(_ploc)) = _loc
	return uint32(0xffffffff)

_3:
	X__assert_fail(tls, ts+0 /* "TODO(ccgo)" */, ts+4588 /* "src/stdio/ungetw..." */, int32(28), x895__func__)
	X__assert_fail(tls, ts+0 /* "TODO(ccgo)" */, ts+4588 /* "src/stdio/ungetw..." */, int32(30), x895__func__)
	{
		p := (*uint32)(unsafe.Pointer(_f))
		*p = *p & uint32(4294967279)
	}
	if ___need_unlock == 0 {
		goto _7
	}

	X__unlockfile(tls, _f)
_7:
	*(*uintptr)(unsafe.Pointer(_ploc)) = _loc
	return _c
}

type t912__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t912__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t27wint_t = uint32

type s101_IO_FILE = struct {
	Fflags        uint32
	Frpos         uintptr // *uint8
	Frend         uintptr // *uint8
	Fclose        uintptr // *func(TLS, uintptr) int32
	Fwend         uintptr // *uint8
	Fwpos         uintptr // *uint8
	Fmustbezero_1 uintptr // *uint8
	Fwbase        uintptr // *uint8
	Fread         uintptr // *func(TLS, uintptr, uintptr, uint64) uint64
	Fwrite        uintptr // *func(TLS, uintptr, uintptr, uint64) uint64
	Fseek         uintptr // *func(TLS, uintptr, int64, int32) int64
	Fbuf          uintptr // *uint8
	Fbuf_size     uint64
	Fprev         uintptr // *TFILE = S_IO_FILE
	Fnext         uintptr // *TFILE = S_IO_FILE
	Ffd           int32
	Fpipe_pid     int32
	Flockcount    int64
	Fdummy3       int16
	Fmode         int8
	Flbf          int8
	Flock         int32
	Fwaiters      int32
	Fcookie       uintptr // *void
	Foff          int64
	Fgetln_buf    uintptr // *int8
	Fmustbezero_2 uintptr // *void
	Fshend        uintptr // *uint8
	Fshlim        int64
	Fshcnt        int64
	Fprev_locked  uintptr // *TFILE = S_IO_FILE
	Fnext_locked  uintptr // *TFILE = S_IO_FILE
	Flocale       uintptr // *S__locale_struct
}

// x1__func__ [8]int8, escapes: true, ungetwc.c:10:1
var x895__func__ = ds + 44680

type s134__locale_struct = struct{ Fcat [6]uintptr }

// x__pthread_self is defined at pthread_arch.h:1:30
func x31__pthread_self(tls TLS) (r uintptr /* *S__pthread */) {
	return uintptr(tls)
	return r
}

type t273size_t = uint64

type t109off_t = int64

type s37__pthread = struct {
	Fself          uintptr // *S__pthread
	Fdtv           uintptr // **void
	Funused1       uintptr // *void
	Funused2       uintptr // *void
	Fsysinfo       uint64
	Fcanary        uint64
	Fcanary2       uint64
	Ftid           int32
	Ferrno_val     int32
	Fdetach_state  int32
	Fcancel        int32
	Fcanceldisable uint8
	Fcancelasync   uint8
	F74            uint8
	Fmap_base      uintptr // *uint8
	Fmap_size      uint64
	Fstack         uintptr // *void
	Fstack_size    uint64
	Fguard_size    uint64
	Fstart_arg     uintptr // *void
	Fstart         uintptr // *func(TLS, uintptr) uintptr
	Fresult        uintptr // *void
	Fcancelbuf     uintptr // *S__ptcb
	Ftsd           uintptr // **void
	Frobust_list   struct {
		Fhead    uintptr
		Foff     int64
		Fpending uintptr
	}
	Ftimer_id      int32
	Flocale        uintptr // Tlocale_t = *S__locale_struct
	Fkilllock      [1]int32
	Fdlerror_buf   uintptr // *int8
	Fstdio_locks   uintptr // *void
	Fcanary_at_end uint64
	Fdtv_copy      uintptr // **void
}

type t29wchar_t = int32

type t43uintptr_t = uint64

type s35__ptcb = struct {
	F__f    uintptr // *func(TLS, uintptr)
	F__x    uintptr // *void
	F__next uintptr // *S__ptcb
}

// linking vasprintf.o

func set896(p *uintptr, v uintptr) uintptr { *p = v; return v }

// Xvasprintf is defined at vasprintf.c:6:5
func Xvasprintf(tls TLS, _s uintptr /* **int8 */, _fmt uintptr /* *int8 */, _ap uintptr) (r int32) {
	var (
		_ap2 uintptr // Tva_list = T__builtin_va_list = ...truct{Fsize int32;Fdata int8;};}
		_l   int32
	)
	_ap2 = X__builtin_va_copy(tls, _ap)
	_l = Xvsnprintf(tls, null, uint64(0), _fmt, _ap2)
	X__builtin_free(tls, _ap2)
	if _l >= int32(0) && set896((*uintptr)(unsafe.Pointer(_s)), Xmalloc(tls, uint64(uint32(_l)+uint32(1)))) != 0 {
		goto _1
	}

	return int32(-1)

_1:
	return Xvsnprintf(tls, *(*uintptr)(unsafe.Pointer(_s)), uint64(uint32(_l)+uint32(1)), _fmt, _ap)
}

type t913__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t913__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t274size_t = uint64

// linking vdprintf.o

func fp897(f func(TLS, uintptr, uintptr, uint64) uint64) uintptr {
	return *(*uintptr)(unsafe.Pointer(&f))
}

// Xvdprintf is defined at vdprintf.c:8:5
func Xvdprintf(tls TLS, _fd int32, _fmt uintptr /* *int8 */, _ap uintptr) (r int32) {
	esc := MustMalloc(232)
	var _f = esc // *TFILE = S_IO_FILE
	defer Free(esc)
	*(*s102_IO_FILE)(unsafe.Pointer(_f)) = s102_IO_FILE{
		Ffd:    _fd,
		Flbf:   int8(-1),
		Fwrite: fp897(xwrap_write),
		Fbuf:   _fmt,
		Flock:  int32(-1),
	}
	return Xvfprintf(tls, _f, _fmt, _ap)
}

type t914__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t914__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type s102_IO_FILE = struct {
	Fflags        uint32
	Frpos         uintptr // *uint8
	Frend         uintptr // *uint8
	Fclose        uintptr // *func(TLS, uintptr) int32
	Fwend         uintptr // *uint8
	Fwpos         uintptr // *uint8
	Fmustbezero_1 uintptr // *uint8
	Fwbase        uintptr // *uint8
	Fread         uintptr // *func(TLS, uintptr, uintptr, uint64) uint64
	Fwrite        uintptr // *func(TLS, uintptr, uintptr, uint64) uint64
	Fseek         uintptr // *func(TLS, uintptr, int64, int32) int64
	Fbuf          uintptr // *uint8
	Fbuf_size     uint64
	Fprev         uintptr // *TFILE = S_IO_FILE
	Fnext         uintptr // *TFILE = S_IO_FILE
	Ffd           int32
	Fpipe_pid     int32
	Flockcount    int64
	Fdummy3       int16
	Fmode         int8
	Flbf          int8
	Flock         int32
	Fwaiters      int32
	Fcookie       uintptr // *void
	Foff          int64
	Fgetln_buf    uintptr // *int8
	Fmustbezero_2 uintptr // *void
	Fshend        uintptr // *uint8
	Fshlim        int64
	Fshcnt        int64
	Fprev_locked  uintptr // *TFILE = S_IO_FILE
	Fnext_locked  uintptr // *TFILE = S_IO_FILE
	Flocale       uintptr // *S__locale_struct
}

type t7FILE = s102_IO_FILE

// xwrap_write is defined at vdprintf.c:3:15
func xwrap_write(tls TLS, _f uintptr /* *TFILE = S_IO_FILE */, _buf uintptr /* *uint8 */, _len uint64) (r uint64) {
	return X__stdio_write(tls, _f, _buf, _len)
}

type t275size_t = uint64

type t110off_t = int64

type s135__locale_struct = struct{ Fcat [6]uintptr }

// linking vfprintf.o

func set898(p *uintptr, v uintptr) uintptr { *p = v; return v }

func fn899(p uintptr) func(TLS, uintptr, uintptr, uint64) uint64 {
	return *(*func(TLS, uintptr, uintptr, uint64) uint64)(unsafe.Pointer(&p))
}

// Xvfprintf is defined at vfprintf.c:655:5
func Xvfprintf(tls TLS, _f uintptr /* *TFILE = S_IO_FILE */, _fmt uintptr /* *int8 */, _ap uintptr) (r int32) {
	esc := MustMalloc(208)
	var (
		_ap2           uintptr     // Tva_list = T__builtin_va_list = ...truct{Fsize int32;Fdata int8;};}
		_nl_type       = esc       // *[10]int32
		_nl_arg        = esc + 48  // *[10]Uarg
		_internal_buf  = esc + 128 // *[80]uint8
		_saved_buf     uintptr     // *uint8
		_olderr        int32
		_ret           int32
		___need_unlock int32
	)
	defer Free(esc)
	Copy(_nl_type, ts+4608 /* "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00..." */, 40)
	_saved_buf = 0
	_ap2 = X__builtin_va_copy(tls, _ap)
	if xprintf_core(tls, null, _fmt, uintptr(unsafe.Pointer(&_ap2)), _nl_arg, _nl_type) >= int32(0) {
		goto _1
	}

	X__builtin_free(tls, _ap2)
	return int32(-1)

_1:
	___need_unlock = func() int32 {
		if *(*int32)(unsafe.Pointer(_f + 140)) >= int32(0) {
			return X__lockfile(tls, _f)
		}
		return int32(0)
	}()
	_olderr = int32(*(*uint32)(unsafe.Pointer(_f)) & uint32(32))
	if int32(*(*int8)(unsafe.Pointer(_f + 138))) >= int32(1) {
		goto _2
	}

	{
		p := (*uint32)(unsafe.Pointer(_f))
		*p = *p & uint32(4294967263)
	}
_2:
	if *(*uint64)(unsafe.Pointer(_f + 96)) != 0 {
		goto _3
	}

	_saved_buf = *(*uintptr)(unsafe.Pointer(_f + 88))
	*(*uintptr)(unsafe.Pointer(_f + 40)) = set898((*uintptr)(unsafe.Pointer(_f+56)), set898((*uintptr)(unsafe.Pointer(_f+88)), _internal_buf))
	*(*uint64)(unsafe.Pointer(_f + 96)) = uint64(80)
	*(*uintptr)(unsafe.Pointer(_f + 32)) = _internal_buf + uintptr(80)
_3:
	_ret = xprintf_core(tls, _f, _fmt, uintptr(unsafe.Pointer(&_ap2)), _nl_arg, _nl_type)
	if _saved_buf == 0 {
		goto _4
	}

	fn899(*(*uintptr)(unsafe.Pointer(_f + 72)))(tls, _f, null, uint64(0))
	if *(*uintptr)(unsafe.Pointer(_f + 40)) != 0 {
		goto _5
	}

	_ret = int32(-1)
_5:
	*(*uintptr)(unsafe.Pointer(_f + 88)) = _saved_buf
	*(*uint64)(unsafe.Pointer(_f + 96)) = uint64(0)
	*(*uintptr)(unsafe.Pointer(_f + 40)) = set898((*uintptr)(unsafe.Pointer(_f+56)), set898((*uintptr)(unsafe.Pointer(_f+32)), null))
_4:
	if (*(*uint32)(unsafe.Pointer(_f)) & uint32(32)) == 0 {
		goto _6
	}

	_ret = int32(-1)
_6:
	{
		p := (*uint32)(unsafe.Pointer(_f))
		*p = *p | uint32(_olderr)
	}
	if ___need_unlock == 0 {
		goto _8
	}

	X__unlockfile(tls, _f)
_8:
	X__builtin_free(tls, _ap2)
	return _ret
}

type t915__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t915__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type s103_IO_FILE = struct {
	Fflags        uint32
	Frpos         uintptr // *uint8
	Frend         uintptr // *uint8
	Fclose        uintptr // *func(TLS, uintptr) int32
	Fwend         uintptr // *uint8
	Fwpos         uintptr // *uint8
	Fmustbezero_1 uintptr // *uint8
	Fwbase        uintptr // *uint8
	Fread         uintptr // *func(TLS, uintptr, uintptr, uint64) uint64
	Fwrite        uintptr // *func(TLS, uintptr, uintptr, uint64) uint64
	Fseek         uintptr // *func(TLS, uintptr, int64, int32) int64
	Fbuf          uintptr // *uint8
	Fbuf_size     uint64
	Fprev         uintptr // *TFILE = S_IO_FILE
	Fnext         uintptr // *TFILE = S_IO_FILE
	Ffd           int32
	Fpipe_pid     int32
	Flockcount    int64
	Fdummy3       int16
	Fmode         int8
	Flbf          int8
	Flock         int32
	Fwaiters      int32
	Fcookie       uintptr // *void
	Foff          int64
	Fgetln_buf    uintptr // *int8
	Fmustbezero_2 uintptr // *void
	Fshend        uintptr // *uint8
	Fshlim        int64
	Fshcnt        int64
	Fprev_locked  uintptr // *TFILE = S_IO_FILE
	Fnext_locked  uintptr // *TFILE = S_IO_FILE
	Flocale       uintptr // *S__locale_struct
}

type Uarg = struct {
	Fi [0]uint64
	Ff [0]float64
	Fp [0]uintptr // *void
	F  int64
}

func set900(p *int32, v int32) int32 { *p = v; return v }

func postinc901(p *uintptr) uintptr { r := *p; *p += 1; return r }

func postinc902(p *uintptr) uintptr { r := *p; *p += 4; return r }

// xprintf_core is defined at vfprintf.c:428:12
func xprintf_core(tls TLS, _f uintptr /* *TFILE = S_IO_FILE */, _fmt uintptr /* *int8 */, _ap uintptr /* **T__builtin_va_list_header = st...truct{Fsize int32;Fdata int8;};} */, _nl_arg uintptr /* *Uarg */, _nl_type uintptr /* *int32 */) (r int32) {
	esc := MustMalloc(100)
	var (
		_a      uintptr // *int8
		_z      uintptr // *int8
		_s      = esc   // **int8
		_l10n   uint32
		_fl     uint32
		_w      int32
		_p      int32
		_xp     int32
		_arg    = esc + 16 // *Uarg
		_argpos int32
		_st     uint32
		_ps     uint32
		_cnt    int32
		_l      int32
		_i      uint64
		_buf    = esc + 32 // *[40]int8
		_prefix uintptr    // *int8
		_t      int32
		_pl     int32
		_wc     = esc + 80 // *[2]int32
		_ws     uintptr    // *Twchar_t = int32
		_mb     = esc + 96 // *[4]int8
	)
	defer Free(esc)
	*(*uintptr)(unsafe.Pointer(_s)) = _fmt
	_l10n = uint32(0)
	_cnt = int32(0)
	_l = int32(0)

_1:
	if _l <= int32(0x7fffffff)-_cnt {
		goto _4
	}

	goto loverflow

_4:
	_cnt = _cnt + _l
	if *(*int8)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_s)))) != 0 {
		goto _5
	}

	goto _3

_5:
	_a = *(*uintptr)(unsafe.Pointer(_s))
_6:
	if *(*int8)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_s)))) == 0 || int32(*(*int8)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_s))))) == int32('%') {
		goto _8
	}

	*(*uintptr)(unsafe.Pointer(_s))++
	goto _6

_8:
	_z = *(*uintptr)(unsafe.Pointer(_s))
_9:
	if int32(*(*int8)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_s))))) != int32('%') || int32(*(*int8)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_s)) + 1))) != int32('%') {
		goto _11
	}

	_z++
	*(*uintptr)(unsafe.Pointer(_s)) += uintptr(2)
	goto _9

_11:
	if int64(_z-_a) <= int64(int32(0x7fffffff)-_cnt) {
		goto _12
	}

	goto loverflow

_12:
	_l = int32(int64(_z - _a))
	if _f == 0 {
		goto _13
	}

	xout(tls, _f, _a, uint64(_l))
_13:
	if _l == 0 {
		goto _14
	}

	goto _2

_14:
	if uint32(*(*int8)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_s)) + 1)))-uint32('0') >= uint32(10) || int32(*(*int8)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_s)) + 2))) != int32('$') {
		goto _15
	}

	_l10n = uint32(1)
	_argpos = int32(*(*int8)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_s)) + 1))) - int32('0')
	*(*uintptr)(unsafe.Pointer(_s)) += uintptr(3)
	goto _16

_15:
	_argpos = int32(-1)
	*(*uintptr)(unsafe.Pointer(_s))++
_16:
	_fl = uint32(0)
_17:
	if uint32(*(*int8)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_s)))))-uint32(' ') >= uint32(32) || uint32(75913)&(uint32(1)<<(uint(int32(*(*int8)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_s)))))-int32(' '))%32)) == 0 {
		goto _19
	}

	_fl = _fl | uint32(1)<<(uint(int32(*(*int8)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_s)))))-int32(' '))%32)
	*(*uintptr)(unsafe.Pointer(_s))++
	goto _17

_19:
	if int32(*(*int8)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_s))))) != int32('*') {
		goto _20
	}

	if uint32(*(*int8)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_s)) + 1)))-uint32('0') >= uint32(10) || int32(*(*int8)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_s)) + 2))) != int32('$') {
		goto _22
	}

	_l10n = uint32(1)
	*(*int32)(unsafe.Pointer(_nl_type + 4*uintptr(int32(*(*int8)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_s)) + 1)))-int32('0')))) = int32(10)
	_w = int32(*(*uint64)(unsafe.Pointer(_nl_arg + 8*uintptr(int32(*(*int8)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_s)) + 1)))-int32('0')))))
	*(*uintptr)(unsafe.Pointer(_s)) += uintptr(3)
	goto _23

_22:
	if _l10n != 0 {
		goto _24
	}

	_w = func() int32 {
		if _f != 0 {
			return VAint32(*(*uintptr)(unsafe.Pointer(_ap)))
		}
		return int32(0)
	}()
	*(*uintptr)(unsafe.Pointer(_s))++
	goto _25

_24:
	goto linval

_25:
_23:
	if _w >= int32(0) {
		goto _26
	}

	_fl = _fl | uint32(8192)
	_w = -_w
_26:
	goto _21

_20:
	if set900(&_w, xgetint(tls, _s)) >= int32(0) {
		goto _27
	}

	goto loverflow

_27:
_21:
	if int32(*(*int8)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_s))))) != int32('.') || int32(*(*int8)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_s)) + 1))) != int32('*') {
		goto _28
	}

	if uint32(*(*int8)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_s)) + 2)))-uint32('0') >= uint32(10) || int32(*(*int8)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_s)) + 3))) != int32('$') {
		goto _30
	}

	*(*int32)(unsafe.Pointer(_nl_type + 4*uintptr(int32(*(*int8)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_s)) + 2)))-int32('0')))) = int32(10)
	_p = int32(*(*uint64)(unsafe.Pointer(_nl_arg + 8*uintptr(int32(*(*int8)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_s)) + 2)))-int32('0')))))
	*(*uintptr)(unsafe.Pointer(_s)) += uintptr(4)
	goto _31

_30:
	if _l10n != 0 {
		goto _32
	}

	_p = func() int32 {
		if _f != 0 {
			return VAint32(*(*uintptr)(unsafe.Pointer(_ap)))
		}
		return int32(0)
	}()
	*(*uintptr)(unsafe.Pointer(_s)) += uintptr(2)
	goto _33

_32:
	goto linval

_33:
_31:
	_xp = bool2int(_p >= int32(0))
	goto _29

_28:
	if int32(*(*int8)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_s))))) != int32('.') {
		goto _34
	}

	*(*uintptr)(unsafe.Pointer(_s))++
	_p = xgetint(tls, _s)
	_xp = int32(1)
	goto _35

_34:
	_p = int32(-1)
	_xp = int32(0)
_35:
_29:
	_st = uint32(0)
_36:
	if uint32(*(*int8)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_s)))))-uint32('A') <= uint32(57) {
		goto _39
	}

	goto linval

_39:
	_ps = _st
	_st = uint32(*(*uint8)(unsafe.Pointer((xstates + 58*uintptr(_st)) + uintptr(int32(*(*int8)(unsafe.Pointer(postinc901((*uintptr)(unsafe.Pointer(_s))))))-int32('A')))))
	if _st-uint32(1) < uint32(8) {
		goto _36
	}

	if _st != 0 {
		goto _40
	}

	goto linval

_40:
	if _st != uint32(27) {
		goto _41
	}

	if _argpos < int32(0) {
		goto _43
	}

	goto linval

_43:
	goto _42

_41:
	if _argpos < int32(0) {
		goto _44
	}

	*(*int32)(unsafe.Pointer(_nl_type + 4*uintptr(_argpos))) = int32(_st)
	*(*Uarg)(unsafe.Pointer(_arg)) = *(*Uarg)(unsafe.Pointer(_nl_arg + 8*uintptr(_argpos)))
	goto _45

_44:
	if _f == 0 {
		goto _46
	}

	xpop_arg(tls, _arg, int32(_st), _ap)
	goto _47

_46:
	return int32(0)

_47:
_45:
_42:
	if _f != 0 {
		goto _48
	}

	goto _2

_48:
	_z = _buf + uintptr(40)
	_prefix = ts + 4652 /* "-+   0X0x" */
	_pl = int32(0)
	_t = int32(*(*int8)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_s)) - 1)))
	if _ps == 0 || _t&int32(15) != int32(3) {
		goto _49
	}

	_t = _t & int32(-33)
_49:
	if (_fl & uint32(8192)) == 0 {
		goto _50
	}

	_fl = _fl & uint32(4294901759)
_50:
	switch _t {
	case int32('n'):
		goto _52
	case int32('p'):
		goto _53
	case int32('x'):
		goto _54
	case int32('X'):
		goto _55
	case int32('o'):
		goto _56
	case int32('d'):
		goto _57
	case int32('i'):
		goto _58
	case int32('u'):
		goto _59
	case int32('c'):
		goto _60
	case int32('m'):
		goto _61
	case int32('s'):
		goto _62
	case int32('C'):
		goto _63
	case int32('S'):
		goto _64
	case int32('e'):
		goto _65
	case int32('f'):
		goto _66
	case int32('g'):
		goto _67
	case int32('a'):
		goto _68
	case int32('E'):
		goto _69
	case int32('F'):
		goto _70
	case int32('G'):
		goto _71
	case int32('A'):
		goto _72
	}
	goto _51

_52:
	switch _ps {
	case uint32(0):
		goto _74
	case uint32(1):
		goto _75
	case uint32(2):
		goto _76
	case uint32(3):
		goto _77
	case uint32(4):
		goto _78
	case uint32(6):
		goto _79
	case uint32(7):
		goto _80
	}
	goto _73

_74:
	*(*int32)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_arg)))) = _cnt
	goto _73

_75:
	*(*int64)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_arg)))) = int64(_cnt)
	goto _73

_76:
	*(*int64)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_arg)))) = int64(_cnt)
	goto _73

_77:
	*(*uint16)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_arg)))) = uint16(_cnt)
	goto _73

_78:
	*(*uint8)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_arg)))) = uint8(_cnt)
	goto _73

_79:
	*(*uint64)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_arg)))) = uint64(_cnt)
	goto _73

_80:
	*(*uint64)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_arg)))) = uint64(_cnt)
	goto _73

_73:
	goto _2

_53:
	_p = int32(func() uint64 {
		if uint64(_p) > uint64(16) {
			return uint64(_p)
		}
		return uint64(16)
	}())
	_t = int32('x')
	_fl = _fl | uint32(8)
_54:
_55:
	_a = xfmt_x(tls, *(*uint64)(unsafe.Pointer(_arg)), _z, _t&int32(32))
	if *(*uint64)(unsafe.Pointer(_arg)) == 0 || _fl&uint32(8) == 0 {
		goto _81
	}

	_prefix += uintptr(_t >> (uint(4) % 32))
	_pl = int32(2)
_81:
	goto _82

_56:
	_a = xfmt_o(tls, *(*uint64)(unsafe.Pointer(_arg)), _z)
	if _fl&uint32(8) == 0 || int64(_p) >= int64(_z-_a)+int64(1) {
		goto _83
	}

	_p = int32(int64(_z-_a) + int64(1))
_83:
_82:
	goto _84

_57:
_58:
	_pl = int32(1)
	if *(*uint64)(unsafe.Pointer(_arg)) <= uint64(0x7fffffffffffffff) {
		goto _85
	}

	*(*uint64)(unsafe.Pointer(_arg)) = -*(*uint64)(unsafe.Pointer(_arg))
	goto _86

_85:
	if (_fl & uint32(2048)) == 0 {
		goto _87
	}

	_prefix++
	goto _88

_87:
	if (_fl & uint32(1)) == 0 {
		goto _89
	}

	_prefix += uintptr(2)
	goto _90

_89:
	_pl = int32(0)
_90:
_88:
_86:
_59:
	_a = xfmt_u(tls, *(*uint64)(unsafe.Pointer(_arg)), _z)
_84:
	if _xp == 0 || _p >= int32(0) {
		goto _91
	}

	goto loverflow

_91:
	if _xp == 0 {
		goto _92
	}

	_fl = _fl & uint32(4294901759)
_92:
	if *(*uint64)(unsafe.Pointer(_arg)) != 0 || _p != 0 {
		goto _93
	}

	_a = _z
	goto _51

_93:
	_p = int32(func() int64 {
		if int64(_p) > int64(_z-_a)+int64(bool2int(*(*uint64)(unsafe.Pointer(_arg)) == 0)) {
			return int64(_p)
		}
		return int64(_z-_a) + int64(bool2int(*(*uint64)(unsafe.Pointer(_arg)) == 0))
	}())
	goto _51

_60:
	*(*int8)(unsafe.Pointer(set898(&_a, _z-uintptr(set900(&_p, int32(1)))))) = int8(*(*uint64)(unsafe.Pointer(_arg)))
	_fl = _fl & uint32(4294901759)
	goto _51

_61:
	_a = Xstrerror(tls, *(*int32)(unsafe.Pointer(X__errno_location(tls))))
	goto _94

_62:
	_a = func() uintptr {
		if *(*uintptr)(unsafe.Pointer(_arg)) != 0 {
			return *(*uintptr)(unsafe.Pointer(_arg))
		}
		return ts + 4664 /* "(null)" */
	}()
_94:
	_z = _a + uintptr(Xstrnlen(tls, _a, uint64(func() int32 {
		if _p < int32(0) {
			return int32(0x7fffffff)
		}
		return _p
	}())))
	if _p >= int32(0) || *(*int8)(unsafe.Pointer(_z)) == 0 {
		goto _95
	}

	goto loverflow

_95:
	_p = int32(int64(_z - _a))
	_fl = _fl & uint32(4294901759)
	goto _51

_63:
	*(*int32)(unsafe.Pointer(_wc)) = int32(*(*uint64)(unsafe.Pointer(_arg)))
	*(*int32)(unsafe.Pointer(_wc + 4)) = int32(0)
	*(*uintptr)(unsafe.Pointer(_arg)) = _wc
	_p = int32(-1)
_64:
	_ws = *(*uintptr)(unsafe.Pointer(_arg))
	_i = uint64(set900(&_l, int32(0)))
_96:
	if _i >= uint64(_p) || *(*int32)(unsafe.Pointer(_ws)) == 0 || set900(&_l, Xwctomb(tls, _mb, *(*int32)(unsafe.Pointer(postinc902(&_ws))))) < int32(0) || uint64(_l) > uint64(_p)-_i {
		goto _98
	}

	_i = _i + uint64(_l)
	goto _96

_98:
	if _l >= int32(0) {
		goto _99
	}

	return int32(-1)

_99:
	if _i <= uint64(0x7fffffff) {
		goto _100
	}

	goto loverflow

_100:
	_p = int32(_i)
	x3pad(tls, _f, int8(' '), _w, _p, int32(_fl))
	_ws = *(*uintptr)(unsafe.Pointer(_arg))
	_i = uint64(0)
_101:
	if _i >= uint64(uint32(0)+uint32(_p)) || *(*int32)(unsafe.Pointer(_ws)) == 0 || _i+uint64(set900(&_l, Xwctomb(tls, _mb, *(*int32)(unsafe.Pointer(postinc902(&_ws)))))) > uint64(_p) {
		goto _103
	}

	xout(tls, _f, _mb, uint64(_l))
	_i = _i + uint64(_l)
	goto _101

_103:
	x3pad(tls, _f, int8(' '), _w, _p, int32(_fl^uint32(8192)))
	_l = func() int32 {
		if _w > _p {
			return _w
		}
		return _p
	}()
	goto _2

_65:
_66:
_67:
_68:
_69:
_70:
_71:
_72:
	if _xp == 0 || _p >= int32(0) {
		goto _104
	}

	goto loverflow

_104:
	_l = xfmt_fp(tls, _f, *(*float64)(unsafe.Pointer(_arg)), _w, _p, int32(_fl), _t)
	if _l >= int32(0) {
		goto _105
	}

	goto loverflow

_105:
	goto _2

_51:
	if int64(_p) >= int64(_z-_a) {
		goto _106
	}

	_p = int32(int64(_z - _a))
_106:
	if _p <= int32(0x7fffffff)-_pl {
		goto _107
	}

	goto loverflow

_107:
	if _w >= _pl+_p {
		goto _108
	}

	_w = _pl + _p
_108:
	if _w <= int32(0x7fffffff)-_cnt {
		goto _109
	}

	goto loverflow

_109:
	x3pad(tls, _f, int8(' '), _w, _pl+_p, int32(_fl))
	xout(tls, _f, _prefix, uint64(_pl))
	x3pad(tls, _f, int8('0'), _w, _pl+_p, int32(_fl^uint32(65536)))
	x3pad(tls, _f, int8('0'), _p, int32(int64(_z-_a)), int32(0))
	xout(tls, _f, _a, uint64(int64(_z-_a)))
	x3pad(tls, _f, int8(' '), _w, _pl+_p, int32(_fl^uint32(8192)))
	_l = _w
_2:
	goto _1

_3:
	if _f == 0 {
		goto _110
	}

	return _cnt

_110:
	if _l10n != 0 {
		goto _111
	}

	return int32(0)

_111:
	_i = uint64(1)
_112:
	if _i > uint64(9) || *(*int32)(unsafe.Pointer(_nl_type + 4*uintptr(_i))) == 0 {
		goto _114
	}

	xpop_arg(tls, _nl_arg+8*uintptr(_i), *(*int32)(unsafe.Pointer(_nl_type + 4*uintptr(_i))), _ap)
	_i++
	goto _112

_114:
_115:
	if _i > uint64(9) || *(*int32)(unsafe.Pointer(_nl_type + 4*uintptr(_i))) != 0 {
		goto _117
	}

	_i++
	goto _115

_117:
	if _i > uint64(9) {
		goto _118
	}

	goto linval

_118:
	return int32(1)

	goto linval
linval:
	*(*int32)(unsafe.Pointer(X__errno_location(tls))) = int32(22)
	return int32(-1)

	goto loverflow
loverflow:
	*(*int32)(unsafe.Pointer(X__errno_location(tls))) = int32(75)
	return int32(-1)
}

type t276size_t = uint64

type t111off_t = int64

type s136__locale_struct = struct{ Fcat [6]uintptr }

type Tuintmax_t = uint64

type t30wchar_t = int32

// xout is defined at vfprintf.c:132:13
func xout(tls TLS, _f uintptr /* *TFILE = S_IO_FILE */, _s uintptr /* *int8 */, _l uint64) {
	if *(*uint32)(unsafe.Pointer(_f))&uint32(32) != 0 {
		goto _1
	}

	X__fwritex(tls, _s, _l, _f)
_1:
}

// xgetint is defined at vfprintf.c:419:12
func xgetint(tls TLS, _s uintptr /* **int8 */) (r int32) {
	var _i int32

	_i = int32(0)
_1:
	if uint32(**(**int8)(unsafe.Pointer(_s)))-uint32('0') >= uint32(10) {
		goto _3
	}

	if uint32(_i) <= uint32(214748364) && int32(**(**int8)(unsafe.Pointer(_s)))-int32('0') <= int32(0x7fffffff)-int32(10)*_i {
		goto _4
	}

	_i = int32(-1)
	goto _5

_4:
	_i = int32(10)*_i + (int32(**(**int8)(unsafe.Pointer(_s))) - int32('0'))
_5:
	*(*uintptr)(unsafe.Pointer(_s))++
	goto _1

_3:
	return _i
}

// xstates [8][58]uint8, escapes: true, vfprintf.c:48:28
var xstates = ds + 44688

// xpop_arg is defined at vfprintf.c:108:13
func xpop_arg(tls TLS, _arg uintptr /* *Uarg */, _type int32, _ap uintptr /* **T__builtin_va_list_header = st...truct{Fsize int32;Fdata int8;};} */) {
	switch _type {
	case int32(9):
		goto _2
	case int32(10):
		goto _3
	case int32(11):
		goto _4
	case int32(13):
		goto _5
	case int32(14):
		goto _6
	case int32(12):
		goto _7
	case int32(15):
		goto _8
	case int32(16):
		goto _9
	case int32(17):
		goto _10
	case int32(18):
		goto _11
	case int32(19):
		goto _12
	case int32(20):
		goto _13
	case int32(21):
		goto _14
	case int32(22):
		goto _15
	case int32(23):
		goto _16
	case int32(24):
		goto _17
	case int32(25):
		goto _18
	case int32(26):
		goto _19
	}
	goto _1

_2:
	*(*uintptr)(unsafe.Pointer(_arg)) = VAuintptr(*(*uintptr)(unsafe.Pointer(_ap)))
	goto _1

_3:
	*(*uint64)(unsafe.Pointer(_arg)) = uint64(VAint32(*(*uintptr)(unsafe.Pointer(_ap))))
	goto _1

_4:
	*(*uint64)(unsafe.Pointer(_arg)) = uint64(VAuint32(*(*uintptr)(unsafe.Pointer(_ap))))
	goto _1

_5:
	*(*uint64)(unsafe.Pointer(_arg)) = uint64(VAint64(*(*uintptr)(unsafe.Pointer(_ap))))
	goto _1

_6:
	*(*uint64)(unsafe.Pointer(_arg)) = VAuint64(*(*uintptr)(unsafe.Pointer(_ap)))
	goto _1

_7:
	*(*uint64)(unsafe.Pointer(_arg)) = VAuint64(*(*uintptr)(unsafe.Pointer(_ap)))
	goto _1

_8:
	*(*uint64)(unsafe.Pointer(_arg)) = uint64(int16(VAint32(*(*uintptr)(unsafe.Pointer(_ap)))))
	goto _1

_9:
	*(*uint64)(unsafe.Pointer(_arg)) = uint64(uint16(VAint32(*(*uintptr)(unsafe.Pointer(_ap)))))
	goto _1

_10:
	*(*uint64)(unsafe.Pointer(_arg)) = uint64(int8(VAint32(*(*uintptr)(unsafe.Pointer(_ap)))))
	goto _1

_11:
	*(*uint64)(unsafe.Pointer(_arg)) = uint64(uint8(VAint32(*(*uintptr)(unsafe.Pointer(_ap)))))
	goto _1

_12:
	*(*uint64)(unsafe.Pointer(_arg)) = uint64(VAint64(*(*uintptr)(unsafe.Pointer(_ap))))
	goto _1

_13:
	*(*uint64)(unsafe.Pointer(_arg)) = VAuint64(*(*uintptr)(unsafe.Pointer(_ap)))
	goto _1

_14:
	*(*uint64)(unsafe.Pointer(_arg)) = uint64(VAint64(*(*uintptr)(unsafe.Pointer(_ap))))
	goto _1

_15:
	*(*uint64)(unsafe.Pointer(_arg)) = VAuint64(*(*uintptr)(unsafe.Pointer(_ap)))
	goto _1

_16:
	*(*uint64)(unsafe.Pointer(_arg)) = uint64(VAint64(*(*uintptr)(unsafe.Pointer(_ap))))
	goto _1

_17:
	*(*uint64)(unsafe.Pointer(_arg)) = uint64(VAuintptr(*(*uintptr)(unsafe.Pointer(_ap))))
	goto _1

_18:
	*(*float64)(unsafe.Pointer(_arg)) = VAfloat64(*(*uintptr)(unsafe.Pointer(_ap)))
	goto _1

_19:
	*(*float64)(unsafe.Pointer(_arg)) = VAfloat64(*(*uintptr)(unsafe.Pointer(_ap)))
_1:
}

func preinc903(p *uintptr) uintptr { *p += 18446744073709551615; return *p }

// xfmt_x is defined at vfprintf.c:152:13
func xfmt_x(tls TLS, _x uint64, _s uintptr /* *int8 */, _lower int32) (r uintptr /* *int8 */) {
_1:
	if _x == 0 {
		goto _3
	}

	*(*int8)(unsafe.Pointer(preinc903(&_s))) = int8(int32(*(*int8)(unsafe.Pointer(xxdigits + uintptr(_x&uint64(15))))) | _lower)
	_x = _x >> uint32(4)
	goto _1

_3:
	return _s
}

// xfmt_o is defined at vfprintf.c:158:13
func xfmt_o(tls TLS, _x uint64, _s uintptr /* *int8 */) (r uintptr /* *int8 */) {
_1:
	if _x == 0 {
		goto _3
	}

	*(*int8)(unsafe.Pointer(preinc903(&_s))) = int8(uint64('0') + _x&uint64(7))
	_x = _x >> uint32(3)
	goto _1

_3:
	return _s
}

// xfmt_u is defined at vfprintf.c:164:13
func xfmt_u(tls TLS, _x uint64, _s uintptr /* *int8 */) (r uintptr /* *int8 */) {
	var _y uint64

_1:
	if _x <= uint64(18446744073709551615) {
		goto _3
	}

	*(*int8)(unsafe.Pointer(preinc903(&_s))) = int8(uint64('0') + _x%uint64(10))
	_x = _x / uint64(10)
	goto _1

_3:
	_y = _x
_4:
	if _y == 0 {
		goto _6
	}

	*(*int8)(unsafe.Pointer(preinc903(&_s))) = int8(uint64('0') + _y%uint64(10))
	_y = _y / uint64(10)
	goto _4

_6:
	return _s
}

// xpad is defined at vfprintf.c:137:13
func x3pad(tls TLS, _f uintptr /* *TFILE = S_IO_FILE */, _c int8, _w int32, _l int32, _fl int32) {
	esc := MustMalloc(256)
	var _pad = esc // *[256]int8
	defer Free(esc)
	if (uint32(_fl)&uint32(73728)) == 0 && _l < _w {
		goto _1
	}

	return

_1:
	_l = _w - _l
	Xmemset(tls, _pad, int32(_c), func() uint64 {
		if uint64(_l) > uint64(256) {
			return uint64(256)
		}
		return uint64(_l)
	}())

_2:
	if uint64(_l) < uint64(256) {
		goto _4
	}

	xout(tls, _f, _pad, uint64(256))
	_l = int32(uint64(_l) - uint64(256))
	goto _2

_4:
	xout(tls, _f, _pad, uint64(_l))
}

func postinc904(p *int32) int32 { r := *p; *p += -1; return r }

func preinc905(p *uintptr) uintptr { *p += 18446744073709551612; return *p }

func postinc906(p *uintptr) uintptr { r := *p; *p += 18446744073709551612; return r }

// xfmt_fp is defined at vfprintf.c:179:12
func xfmt_fp(tls TLS, _f uintptr /* *TFILE = S_IO_FILE */, _y float64, _w int32, _p int32, _fl int32, _t int32) (r int32) {
	esc := MustMalloc(572)
	var (
		_big    = esc       // *[126]uint32
		_a      uintptr     // *Tuint32_t = uint32
		_d      uintptr     // *Tuint32_t = uint32
		_r      uintptr     // *Tuint32_t = uint32
		_z      uintptr     // *Tuint32_t = uint32
		_e2     = esc + 512 // *int32
		_e      int32
		_i      int32
		_j      int32
		_l      int32
		_buf    = esc + 528 // *[22]int8
		_s      uintptr     // *int8
		_prefix uintptr     // *int8
		_pl     int32
		_ebuf0  = esc + 560 // *[12]int8
		_ebuf   uintptr     // *int8
		_estr   uintptr     // *int8
		_1s     uintptr     // *int8
		_round  float64
		_re     int32
		_x      int32
		_carry  uint32
		_sh     int32
		_2x     uint64
		_3carry uint32
		_b      uintptr // *Tuint32_t = uint32
		_4sh    int32
		_need   int32
		_rm     uint32
		_5x     uint32
		_6round float64
		_small  float64
		_7s     uintptr // *int8
		_8s     uintptr // *int8
		_9s     uintptr // *int8
	)
	defer Free(esc)
	*(*int32)(unsafe.Pointer(_e2)) = int32(0)
	_prefix = ts + 4672 /* "-0X+0X 0X-0x+0x ..." */
	_ebuf = _ebuf0 + 12
	_pl = int32(1)
	if int32(x18__DOUBLE_BITS(tls, _y)>>(uint(63)%64)) == 0 {
		goto _1
	}

	_y = -_y
	goto _2

_1:
	if (uint32(_fl) & uint32(2048)) == 0 {
		goto _3
	}

	_prefix += uintptr(3)
	goto _4

_3:
	if (uint32(_fl) & uint32(1)) == 0 {
		goto _5
	}

	_prefix += uintptr(6)
	goto _6

_5:
	_prefix++
	_pl = int32(0)
_6:
_4:
_2:
	if x18__DOUBLE_BITS(tls, _y)&uint64(9223372036854775807) < uint64(9218868437227405312) {
		goto _7
	}

	_1s = func() uintptr {
		if _t&int32(32) != 0 {
			return ts + 4692 /* "inf" */
		}
		return ts + 4696 /* "INF" */
	}()
	if _y == _y {
		goto _8
	}

	_1s = func() uintptr {
		if _t&int32(32) != 0 {
			return ts + 1052 /* "nan" */
		}
		return ts + 4700 /* "NAN" */
	}()
_8:
	x3pad(tls, _f, int8(' '), _w, int32(3)+_pl, int32(uint32(_fl)&uint32(4294901759)))
	xout(tls, _f, _prefix, uint64(_pl))
	xout(tls, _f, _1s, uint64(3))
	x3pad(tls, _f, int8(' '), _w, int32(3)+_pl, int32(uint32(_fl)^uint32(8192)))
	return func() int32 {
		if _w > int32(3)+_pl {
			return _w
		}
		return int32(3) + _pl
	}()

_7:
	_y = Xfrexpl(tls, _y, _e2) * float64(2)
	if _y == 0 {
		goto _9
	}

	*(*int32)(unsafe.Pointer(_e2))--
_9:
	if _t|int32(32) != int32('a') {
		goto _10
	}

	_round = float64(8)
	if (_t & int32(32)) == 0 {
		goto _11
	}

	_prefix += uintptr(9)
_11:
	_pl = _pl + int32(2)
	if _p >= int32(0) && _p < int32(12) {
		goto _12
	}

	_re = int32(0)
	goto _13

_12:
	_re = int32(12) - _p
_13:
	if _re == 0 {
		goto _14
	}

_15:
	if postinc904(&_re) == 0 {
		goto _16
	}

	_round = _round * float64(16)
	goto _15

_16:
	if int32(*(*int8)(unsafe.Pointer(_prefix))) != int32('-') {
		goto _17
	}

	_y = -_y
	_y = _y - _round
	_y = _y + _round
	_y = -_y
	goto _18

_17:
	_y = _y + _round
	_y = _y - _round
_18:
_14:
	_estr = xfmt_u(tls, uint64(func() int32 {
		if *(*int32)(unsafe.Pointer(_e2)) < int32(0) {
			return -*(*int32)(unsafe.Pointer(_e2))
		}
		return *(*int32)(unsafe.Pointer(_e2))
	}()), _ebuf)
	if _estr != _ebuf {
		goto _19
	}

	*(*int8)(unsafe.Pointer(preinc903(&_estr))) = int8('0')
_19:
	*(*int8)(unsafe.Pointer(preinc903(&_estr))) = int8(func() int32 {
		if *(*int32)(unsafe.Pointer(_e2)) < int32(0) {
			return int32('-')
		}
		return int32('+')
	}())
	*(*int8)(unsafe.Pointer(preinc903(&_estr))) = int8(_t + int32(15))
	_s = _buf
_20:
	_x = int32(_y)
	*(*int8)(unsafe.Pointer(postinc901(&_s))) = int8(int32(*(*int8)(unsafe.Pointer(xxdigits + uintptr(_x)))) | _t&int32(32))
	_y = float64(16) * float64(_y-float64(_x))
	if int64(_s-_buf) != int64(1) || _y == 0 && _p <= int32(0) && uint32(_fl)&uint32(8) == 0 {
		goto _23
	}

	*(*int8)(unsafe.Pointer(postinc901(&_s))) = int8('.')
_23:
	if _y != 0 {
		goto _20
	}

	if int64(_p) <= int64(2147483645)-int64(_ebuf-_estr)-int64(_pl) {
		goto _24
	}

	return int32(-1)

_24:
	if _p == 0 || int64(_s-_buf)-int64(2) >= int64(_p) {
		goto _25
	}

	_l = int32(int64(_p+int32(2)) + int64(_ebuf-_estr))
	goto _26

_25:
	_l = int32(int64(_s-_buf) + int64(_ebuf-_estr))
_26:
	x3pad(tls, _f, int8(' '), _w, _pl+_l, _fl)
	xout(tls, _f, _prefix, uint64(_pl))
	x3pad(tls, _f, int8('0'), _w, _pl+_l, int32(uint32(_fl)^uint32(65536)))
	xout(tls, _f, _buf, uint64(int64(_s-_buf)))
	x3pad(tls, _f, int8('0'), int32(int64(_l)-int64(_ebuf-_estr)-int64(_s-_buf)), int32(0), int32(0))
	xout(tls, _f, _estr, uint64(int64(_ebuf-_estr)))
	x3pad(tls, _f, int8(' '), _w, _pl+_l, int32(uint32(_fl)^uint32(8192)))
	return func() int32 {
		if _w > _pl+_l {
			return _w
		}
		return _pl + _l
	}()

_10:
	if _p >= int32(0) {
		goto _27
	}

	_p = int32(6)
_27:
	if _y == 0 {
		goto _28
	}

	_y = _y * float64(2.68435456e+08)
	*(*int32)(unsafe.Pointer(_e2)) = *(*int32)(unsafe.Pointer(_e2)) - int32(28)
_28:
	if *(*int32)(unsafe.Pointer(_e2)) >= int32(0) {
		goto _29
	}

	_a = set898(&_r, set898(&_z, _big))
	goto _30

_29:
	_a = set898(&_r, set898(&_z, ((_big+4*uintptr(126))-4*uintptr(53))-4*uintptr(1)))
_30:
_31:
	*(*uint32)(unsafe.Pointer(_z)) = uint32(_y)
	_y = float64(1000000000) * float64(_y-float64(*(*uint32)(unsafe.Pointer(postinc902(&_z)))))
	if _y != 0 {
		goto _31
	}

_34:
	if *(*int32)(unsafe.Pointer(_e2)) <= int32(0) {
		goto _35
	}

	_carry = uint32(0)
	_sh = func() int32 {
		if int32(29) < *(*int32)(unsafe.Pointer(_e2)) {
			return int32(29)
		}
		return *(*int32)(unsafe.Pointer(_e2))
	}()
	_d = _z - 4*uintptr(1)
_36:
	if _d < _a {
		goto _38
	}

	_2x = uint64(*(*uint32)(unsafe.Pointer(_d)))<<(uint(_sh)%64) + uint64(_carry)
	*(*uint32)(unsafe.Pointer(_d)) = uint32(_2x % uint64(1000000000))
	_carry = uint32(_2x / uint64(1000000000))
	_d -= 4
	goto _36

_38:
	if _carry == 0 {
		goto _39
	}

	*(*uint32)(unsafe.Pointer(preinc905(&_a))) = _carry
_39:
_40:
	if _z <= _a || *(*uint32)(unsafe.Pointer(_z - 4)) != 0 {
		goto _41
	}

	_z -= 4
	goto _40

_41:
	*(*int32)(unsafe.Pointer(_e2)) = *(*int32)(unsafe.Pointer(_e2)) - _sh
	goto _34

_35:
_42:
	if *(*int32)(unsafe.Pointer(_e2)) >= int32(0) {
		goto _43
	}

	_3carry = uint32(0)
	_4sh = func() int32 {
		if int32(9) < -*(*int32)(unsafe.Pointer(_e2)) {
			return int32(9)
		}
		return -*(*int32)(unsafe.Pointer(_e2))
	}()
	_need = int32(uint32(1) + (uint32(_p)+uint32(17)+uint32(8))/uint32(9))
	_d = _a
_44:
	if _d >= _z {
		goto _46
	}

	_rm = *(*uint32)(unsafe.Pointer(_d)) & uint32(int32(1)<<(uint(_4sh)%32)-int32(1))
	*(*uint32)(unsafe.Pointer(_d)) = *(*uint32)(unsafe.Pointer(_d))>>(uint(_4sh)%32) + _3carry
	_3carry = uint32(int32(1000000000)>>(uint(_4sh)%32)) * _rm
	_d += 4
	goto _44

_46:
	if *(*uint32)(unsafe.Pointer(_a)) != 0 {
		goto _47
	}

	_a += 4
_47:
	if _3carry == 0 {
		goto _48
	}

	*(*uint32)(unsafe.Pointer(postinc902(&_z))) = _3carry
_48:
	_b = func() uintptr {
		if _t|int32(32) == int32('f') {
			return _r
		}
		return _a
	}()
	if int64((_z-_b)/4) <= int64(_need) {
		goto _49
	}

	_z = _b + 4*uintptr(_need)
_49:
	*(*int32)(unsafe.Pointer(_e2)) = *(*int32)(unsafe.Pointer(_e2)) + _4sh
	goto _42

_43:
	if _a >= _z {
		goto _50
	}

	_i = int32(10)
	_e = int32(int64(9) * int64((_r-_a)/4))
_52:
	if *(*uint32)(unsafe.Pointer(_a)) < uint32(_i) {
		goto _54
	}

	_i = _i * int32(10)
	_e++
	goto _52

_54:
	goto _51

_50:
	_e = int32(0)
_51:
	_j = _p - bool2int(_t|int32(32) != int32('f'))*_e - bool2int((_t|int32(32) == int32('g')) && (_p != 0))
	if int64(_j) >= int64(9)*(int64((_z-_r)/4)-int64(1)) {
		goto _55
	}

	_d = (_r + 4*uintptr(1)) + 4*uintptr((_j+int32(9216))/int32(9)-int32(1024))
	_j = _j + int32(9216)
	_j = _j % int32(9)
	_i = int32(10)
	_j++
_56:
	if _j >= int32(9) {
		goto _58
	}

	_i = _i * int32(10)
	_j++
	goto _56

_58:
	_5x = *(*uint32)(unsafe.Pointer(_d)) % uint32(_i)
	if _5x == 0 && (_d+4*uintptr(1)) == _z {
		goto _59
	}

	_6round = float64(9.007199254740992e+15)
	if *(*uint32)(unsafe.Pointer(_d))/uint32(_i)&uint32(1) == 0 && (_i != int32(1000000000) || _d <= _a || *(*uint32)(unsafe.Pointer(_d - 4))&uint32(1) == 0) {
		goto _60
	}

	_6round = _6round + float64(2)
_60:
	if _5x >= uint32(_i/int32(2)) {
		goto _61
	}

	_small = float64(0.5)
	goto _62

_61:
	if _5x != uint32(_i/int32(2)) || (_d+4*uintptr(1)) != _z {
		goto _63
	}

	_small = float64(1)
	goto _64

_63:
	_small = float64(1.5)
_64:
_62:
	if _pl == 0 || int32(*(*int8)(unsafe.Pointer(_prefix))) != int32('-') {
		goto _65
	}

	_6round = _6round * float64(-1)
	_small = _small * float64(-1)
_65:
	{
		p := (*uint32)(unsafe.Pointer(_d))
		*p = *p - _5x
	}
	if float64(_6round+_small) == _6round {
		goto _66
	}

	*(*uint32)(unsafe.Pointer(_d)) = *(*uint32)(unsafe.Pointer(_d)) + uint32(_i)
_67:
	if *(*uint32)(unsafe.Pointer(_d)) <= uint32(999999999) {
		goto _68
	}

	*(*uint32)(unsafe.Pointer(postinc906(&_d))) = uint32(0)
	if _d >= _a {
		goto _69
	}

	*(*uint32)(unsafe.Pointer(preinc905(&_a))) = uint32(0)
_69:
	*(*uint32)(unsafe.Pointer(_d))++
	goto _67

_68:
	_i = int32(10)
	_e = int32(int64(9) * int64((_r-_a)/4))
_70:
	if *(*uint32)(unsafe.Pointer(_a)) < uint32(_i) {
		goto _72
	}

	_i = _i * int32(10)
	_e++
	goto _70

_72:
_66:
_59:
	if _z <= (_d + 4*uintptr(1)) {
		goto _73
	}

	_z = _d + 4*uintptr(1)
_73:
_55:
_74:
	if _z <= _a || *(*uint32)(unsafe.Pointer(_z - 4)) != 0 {
		goto _76
	}

	_z -= 4
	goto _74

_76:
	if _t|int32(32) != int32('g') {
		goto _77
	}

	if _p != 0 {
		goto _78
	}

	_p++
_78:
	if _p <= _e || _e < int32(-4) {
		goto _79
	}

	_t--
	_p = _p - (_e + int32(1))
	goto _80

_79:
	_t = _t - int32(2)
	_p--
_80:
	if uint32(_fl)&uint32(8) != 0 {
		goto _81
	}

	if _z <= _a || *(*uint32)(unsafe.Pointer(_z - 4)) == 0 {
		goto _82
	}

	_i = int32(10)
	_j = int32(0)
_84:
	if *(*uint32)(unsafe.Pointer(_z - 4))%uint32(_i) != uint32(0) {
		goto _86
	}

	_i = _i * int32(10)
	_j++
	goto _84

_86:
	goto _83

_82:
	_j = int32(9)
_83:
	if _t|int32(32) != int32('f') {
		goto _87
	}

	_p = int32(func() int64 {
		if int64(_p) < func() int64 {
			if int64(0) > int64(9)*(int64((_z-_r)/4)-int64(1))-int64(_j) {
				return int64(0)
			}
			return int64(9)*(int64((_z-_r)/4)-int64(1)) - int64(_j)
		}() {
			return int64(_p)
		}
		return func() int64 {
			if int64(0) > int64(9)*(int64((_z-_r)/4)-int64(1))-int64(_j) {
				return int64(0)
			}
			return int64(9)*(int64((_z-_r)/4)-int64(1)) - int64(_j)
		}()
	}())
	goto _88

_87:
	_p = int32(func() int64 {
		if int64(_p) < func() int64 {
			if int64(0) > int64(9)*(int64((_z-_r)/4)-int64(1))+int64(_e)-int64(_j) {
				return int64(0)
			}
			return int64(9)*(int64((_z-_r)/4)-int64(1)) + int64(_e) - int64(_j)
		}() {
			return int64(_p)
		}
		return func() int64 {
			if int64(0) > int64(9)*(int64((_z-_r)/4)-int64(1))+int64(_e)-int64(_j) {
				return int64(0)
			}
			return int64(9)*(int64((_z-_r)/4)-int64(1)) + int64(_e) - int64(_j)
		}()
	}())
_88:
_81:
_77:
	if _p <= int32(2147483646)-bool2int((_p != 0) || (uint32(_fl)&uint32(8) != 0)) {
		goto _89
	}

	return int32(-1)

_89:
	_l = int32(1) + _p + bool2int((_p != 0) || (uint32(_fl)&uint32(8) != 0))
	if _t|int32(32) != int32('f') {
		goto _90
	}

	if _e <= int32(0x7fffffff)-_l {
		goto _92
	}

	return int32(-1)

_92:
	if _e <= int32(0) {
		goto _93
	}

	_l = _l + _e
_93:
	goto _91

_90:
	_estr = xfmt_u(tls, uint64(func() int32 {
		if _e < int32(0) {
			return -_e
		}
		return _e
	}()), _ebuf)
_94:
	if int64(_ebuf-_estr) >= int64(2) {
		goto _95
	}

	*(*int8)(unsafe.Pointer(preinc903(&_estr))) = int8('0')
	goto _94

_95:
	*(*int8)(unsafe.Pointer(preinc903(&_estr))) = int8(func() int32 {
		if _e < int32(0) {
			return int32('-')
		}
		return int32('+')
	}())
	*(*int8)(unsafe.Pointer(preinc903(&_estr))) = int8(_t)
	if int64(_ebuf-_estr) <= int64(int32(0x7fffffff)-_l) {
		goto _96
	}

	return int32(-1)

_96:
	_l = int32(int64(_l) + int64(_ebuf-_estr))
_91:
	if _l <= int32(0x7fffffff)-_pl {
		goto _97
	}

	return int32(-1)

_97:
	x3pad(tls, _f, int8(' '), _w, _pl+_l, _fl)
	xout(tls, _f, _prefix, uint64(_pl))
	x3pad(tls, _f, int8('0'), _w, _pl+_l, int32(uint32(_fl)^uint32(65536)))
	if _t|int32(32) != int32('f') {
		goto _98
	}

	if _a <= _r {
		goto _100
	}

	_a = _r
_100:
	_d = _a
_101:
	if _d > _r {
		goto _103
	}

	_7s = xfmt_u(tls, uint64(*(*uint32)(unsafe.Pointer(_d))), _buf+uintptr(9))
	if _d == _a {
		goto _104
	}

_106:
	if _7s <= _buf {
		goto _107
	}

	*(*int8)(unsafe.Pointer(preinc903(&_7s))) = int8('0')
	goto _106

_107:
	goto _105

_104:
	if _7s != (_buf + uintptr(9)) {
		goto _108
	}

	*(*int8)(unsafe.Pointer(preinc903(&_7s))) = int8('0')
_108:
_105:
	xout(tls, _f, _7s, uint64(int64((_buf+uintptr(9))-_7s)))
	_d += 4
	goto _101

_103:
	if _p == 0 && uint32(_fl)&uint32(8) == 0 {
		goto _109
	}

	xout(tls, _f, ts+1868 /* "." */, uint64(1))
_109:
_110:
	if _d >= _z || _p <= int32(0) {
		goto _112
	}

	_8s = xfmt_u(tls, uint64(*(*uint32)(unsafe.Pointer(_d))), _buf+uintptr(9))
_113:
	if _8s <= _buf {
		goto _114
	}

	*(*int8)(unsafe.Pointer(preinc903(&_8s))) = int8('0')
	goto _113

_114:
	xout(tls, _f, _8s, uint64(func() int32 {
		if int32(9) < _p {
			return int32(9)
		}
		return _p
	}()))
	_d += 4
	_p = _p - int32(9)
	goto _110

_112:
	x3pad(tls, _f, int8('0'), _p+int32(9), int32(9), int32(0))
	goto _99

_98:
	if _z > _a {
		goto _115
	}

	_z = _a + 4*uintptr(1)
_115:
	_d = _a
_116:
	if _d >= _z || _p < int32(0) {
		goto _118
	}

	_9s = xfmt_u(tls, uint64(*(*uint32)(unsafe.Pointer(_d))), _buf+uintptr(9))
	if _9s != (_buf + uintptr(9)) {
		goto _119
	}

	*(*int8)(unsafe.Pointer(preinc903(&_9s))) = int8('0')
_119:
	if _d == _a {
		goto _120
	}

_122:
	if _9s <= _buf {
		goto _123
	}

	*(*int8)(unsafe.Pointer(preinc903(&_9s))) = int8('0')
	goto _122

_123:
	goto _121

_120:
	xout(tls, _f, postinc901(&_9s), uint64(1))
	if _p <= int32(0) && uint32(_fl)&uint32(8) == 0 {
		goto _124
	}

	xout(tls, _f, ts+1868 /* "." */, uint64(1))
_124:
_121:
	xout(tls, _f, _9s, uint64(func() int64 {
		if int64((_buf+uintptr(9))-_9s) < int64(_p) {
			return int64((_buf + uintptr(9)) - _9s)
		}
		return int64(_p)
	}()))
	_p = int32(int64(_p) - int64((_buf+uintptr(9))-_9s))
	_d += 4
	goto _116

_118:
	x3pad(tls, _f, int8('0'), _p+int32(18), int32(18), int32(0))
	xout(tls, _f, _estr, uint64(int64(_ebuf-_estr)))
_99:
	x3pad(tls, _f, int8(' '), _w, _pl+_l, int32(uint32(_fl)^uint32(8192)))
	return func() int32 {
		if _w > _pl+_l {
			return _w
		}
		return _pl + _l
	}()
}

type t44uintptr_t = uint64

// xxdigits [16]int8, escapes: true, vfprintf.c:148:19
var xxdigits = ds + 45152

type t129uint32_t = uint32

type t75uint64_t = uint64

// x__DOUBLE_BITS is defined at math.h:49:36
func x18__DOUBLE_BITS(tls TLS, ___f float64) (r uint64) {
	esc := MustMalloc(8)
	var ___u = esc // *struct{F__f [0]float64;F__i [0]uint64;F int64}
	defer Free(esc)
	*(*float64)(unsafe.Pointer(___u)) = ___f
	return *(*uint64)(unsafe.Pointer(___u))
}

// linking vfscanf.o

func postinc907(p *uintptr) uintptr { r := *p; *p += 1; return r }

func set908(p *int32, v int32) int32 { *p = v; return v }

func preinc909(p *uintptr) uintptr { *p += 1; return *p }

func postinc910(p *uint64) uint64 { r := *p; *p += 1; return r }

func set911(p *uintptr, v uintptr) uintptr { *p = v; return v }

// Xvfscanf is defined at vfscanf.c:57:5
func Xvfscanf(tls TLS, _f uintptr /* *TFILE = S_IO_FILE */, _fmt uintptr /* *int8 */, _ap uintptr) (r int32) {
	esc := MustMalloc(273)
	var (
		_width         int32
		_size          int32
		_alloc         int32
		_base          int32
		_p             uintptr // *uint8
		_c             int32
		_t             int32
		_s             uintptr // *int8
		_wcs           uintptr // *Twchar_t = int32
		_st            = esc   // *Tmbstate_t = struct{F__opaque1 uint32;F__opaque2 uint32;}
		_dest          uintptr // *void
		_invert        int32
		_matches       int32
		_x             uint64
		_y             float64
		_pos           int64
		_scanset       = esc + 16 // *[257]uint8
		_i             uint64
		_k             uint64
		___need_unlock int32
		_unnamed1      struct {
			F__opaque1 uint32
			F__opaque2 uint32
		}
		_    = _unnamed1
		_tmp uintptr // *int8
	)
	defer Free(esc)
	_dest = 0
	_matches = int32(0)
	_pos = int64(0)
	___need_unlock = func() int32 {
		if *(*int32)(unsafe.Pointer(_f + 140)) >= int32(0) {
			return X__lockfile(tls, _f)
		}
		return int32(0)
	}()
	_p = _fmt
_1:
	if *(*uint8)(unsafe.Pointer(_p)) == 0 {
		goto _3
	}

	_alloc = int32(0)
	if x5__isspace(tls, int32(*(*uint8)(unsafe.Pointer(_p)))) == 0 {
		goto _4
	}

_5:
	if x5__isspace(tls, int32(*(*uint8)(unsafe.Pointer(_p + 1)))) == 0 {
		goto _6
	}

	_p++
	goto _5

_6:
	X__shlim(tls, _f, int64(0))
_7:
	if x5__isspace(tls, func() int32 {
		if *(*uintptr)(unsafe.Pointer(_f + 8)) < *(*uintptr)(unsafe.Pointer(_f + 184)) {
			return int32(*(*uint8)(unsafe.Pointer(postinc907((*uintptr)(unsafe.Pointer(_f + 8))))))
		}
		return X__shgetc(tls, _f)
	}()) == 0 {
		goto _8
	}

	goto _7

_8:
	if *(*uintptr)(unsafe.Pointer(_f + 184)) != 0 {
		*(*uintptr)(unsafe.Pointer(_f + 8))--
	} else {
	}
	_pos = _pos + (*(*int64)(unsafe.Pointer(_f + 200)) + int64(*(*uintptr)(unsafe.Pointer(_f + 8))-*(*uintptr)(unsafe.Pointer(_f + 16))))
	goto _2

_4:
	if int32(*(*uint8)(unsafe.Pointer(_p))) == int32('%') && int32(*(*uint8)(unsafe.Pointer(_p + 1))) != int32('%') {
		goto _9
	}

	X__shlim(tls, _f, int64(0))
	if int32(*(*uint8)(unsafe.Pointer(_p))) != int32('%') {
		goto _10
	}

	_p++
_12:
	if x5__isspace(tls, set908(&_c, func() int32 {
		if *(*uintptr)(unsafe.Pointer(_f + 8)) < *(*uintptr)(unsafe.Pointer(_f + 184)) {
			return int32(*(*uint8)(unsafe.Pointer(postinc907((*uintptr)(unsafe.Pointer(_f + 8))))))
		}
		return X__shgetc(tls, _f)
	}())) == 0 {
		goto _13
	}

	goto _12

_13:
	goto _11

_10:
	_c = func() int32 {
		if *(*uintptr)(unsafe.Pointer(_f + 8)) < *(*uintptr)(unsafe.Pointer(_f + 184)) {
			return int32(*(*uint8)(unsafe.Pointer(postinc907((*uintptr)(unsafe.Pointer(_f + 8))))))
		}
		return X__shgetc(tls, _f)
	}()
_11:
	if _c == int32(*(*uint8)(unsafe.Pointer(_p))) {
		goto _14
	}

	if *(*uintptr)(unsafe.Pointer(_f + 184)) != 0 {
		*(*uintptr)(unsafe.Pointer(_f + 8))--
	} else {
	}
	if _c >= int32(0) {
		goto _15
	}

	goto linput_fail

_15:
	goto lmatch_fail

_14:
	_pos = _pos + (*(*int64)(unsafe.Pointer(_f + 200)) + int64(*(*uintptr)(unsafe.Pointer(_f + 8))-*(*uintptr)(unsafe.Pointer(_f + 16))))
	goto _2

_9:
	_p++
	if int32(*(*uint8)(unsafe.Pointer(_p))) != int32('*') {
		goto _16
	}

	_dest = null
	_p++
	goto _17

_16:
	if uint32(*(*uint8)(unsafe.Pointer(_p)))-uint32('0') >= uint32(10) || int32(*(*uint8)(unsafe.Pointer(_p + 1))) != int32('$') {
		goto _18
	}

	_dest = xarg_n(tls, _ap, uint32(int32(*(*uint8)(unsafe.Pointer(_p)))-int32('0')))
	_p += uintptr(2)
	goto _19

_18:
	_dest = VAuintptr(_ap)
_19:
_17:
	_width = int32(0)
_20:
	if uint32(*(*uint8)(unsafe.Pointer(_p)))-uint32('0') >= uint32(10) {
		goto _22
	}

	_width = int32(10)*_width + int32(*(*uint8)(unsafe.Pointer(_p))) - int32('0')
	_p++
	goto _20

_22:
	if int32(*(*uint8)(unsafe.Pointer(_p))) != int32('m') {
		goto _23
	}

	_wcs = null
	_s = null
	_alloc = bool2int(_dest != 0)
	_p++
	goto _24

_23:
	_alloc = int32(0)
_24:
	_size = int32(0)
	switch int32(*(*uint8)(unsafe.Pointer(postinc907(&_p)))) {
	case int32('h'):
		goto _26
	case int32('l'):
		goto _27
	case int32('j'):
		goto _28
	case int32('z'):
		goto _29
	case int32('t'):
		goto _30
	case int32('L'):
		goto _31
	case int32('d'):
		goto _32
	case int32('i'):
		goto _33
	case int32('o'):
		goto _34
	case int32('u'):
		goto _35
	case int32('x'):
		goto _36
	case int32('a'):
		goto _37
	case int32('e'):
		goto _38
	case int32('f'):
		goto _39
	case int32('g'):
		goto _40
	case int32('A'):
		goto _41
	case int32('E'):
		goto _42
	case int32('F'):
		goto _43
	case int32('G'):
		goto _44
	case int32('X'):
		goto _45
	case int32('s'):
		goto _46
	case int32('c'):
		goto _47
	case int32('['):
		goto _48
	case int32('S'):
		goto _49
	case int32('C'):
		goto _50
	case int32('p'):
		goto _51
	case int32('n'):
		goto _52
	default:
		goto _53
	}
_26:
	if int32(*(*uint8)(unsafe.Pointer(_p))) != int32('h') {
		goto _54
	}

	_p++
	_size = int32(-2)
	goto _55

_54:
	_size = int32(-1)
_55:
	goto _25

_27:
	if int32(*(*uint8)(unsafe.Pointer(_p))) != int32('l') {
		goto _56
	}

	_p++
	_size = int32(3)
	goto _57

_56:
	_size = int32(1)
_57:
	goto _25

_28:
	_size = int32(3)
	goto _25

_29:
_30:
	_size = int32(1)
	goto _25

_31:
	_size = int32(2)
	goto _25

_32:
_33:
_34:
_35:
_36:
_37:
_38:
_39:
_40:
_41:
_42:
_43:
_44:
_45:
_46:
_47:
_48:
_49:
_50:
_51:
_52:
	_p--
	goto _25

_53:
	goto lfmt_fail

_25:
	_t = int32(*(*uint8)(unsafe.Pointer(_p)))
	if _t&int32(0x2f) != int32(3) {
		goto _58
	}

	_t = _t | int32(32)
	_size = int32(1)
_58:
	switch _t {
	case int32('c'):
		goto _60
	case int32('['):
		goto _61
	case int32('n'):
		goto _62
	default:
		goto _63
	}
_60:
	if _width >= int32(1) {
		goto _64
	}

	_width = int32(1)
_64:
_61:
	goto _59

_62:
	xstore_int(tls, _dest, _size, uint64(_pos))
	goto _2

_63:
	X__shlim(tls, _f, int64(0))
_65:
	if x5__isspace(tls, func() int32 {
		if *(*uintptr)(unsafe.Pointer(_f + 8)) < *(*uintptr)(unsafe.Pointer(_f + 184)) {
			return int32(*(*uint8)(unsafe.Pointer(postinc907((*uintptr)(unsafe.Pointer(_f + 8))))))
		}
		return X__shgetc(tls, _f)
	}()) == 0 {
		goto _66
	}

	goto _65

_66:
	if *(*uintptr)(unsafe.Pointer(_f + 184)) != 0 {
		*(*uintptr)(unsafe.Pointer(_f + 8))--
	} else {
	}
	_pos = _pos + (*(*int64)(unsafe.Pointer(_f + 200)) + int64(*(*uintptr)(unsafe.Pointer(_f + 8))-*(*uintptr)(unsafe.Pointer(_f + 16))))
_59:
	X__shlim(tls, _f, int64(_width))
	if func() int32 {
		if *(*uintptr)(unsafe.Pointer(_f + 8)) < *(*uintptr)(unsafe.Pointer(_f + 184)) {
			return int32(*(*uint8)(unsafe.Pointer(postinc907((*uintptr)(unsafe.Pointer(_f + 8))))))
		}
		return X__shgetc(tls, _f)
	}() >= int32(0) {
		goto _67
	}

	goto linput_fail

_67:
	if *(*uintptr)(unsafe.Pointer(_f + 184)) != 0 {
		*(*uintptr)(unsafe.Pointer(_f + 8))--
	} else {
	}
	switch _t {
	case int32('s'):
		goto _69
	case int32('c'):
		goto _70
	case int32('['):
		goto _71
	case int32('p'):
		goto _72
	case int32('X'):
		goto _73
	case int32('x'):
		goto _74
	case int32('o'):
		goto _75
	case int32('d'):
		goto _76
	case int32('u'):
		goto _77
	case int32('i'):
		goto _78
	case int32('a'):
		goto _79
	case int32('A'):
		goto _80
	case int32('e'):
		goto _81
	case int32('E'):
		goto _82
	case int32('f'):
		goto _83
	case int32('F'):
		goto _84
	case int32('g'):
		goto _85
	case int32('G'):
		goto _86
	}
	goto _68

_69:
_70:
_71:
	if _t != int32('c') && _t != int32('s') {
		goto _87
	}

	Xmemset(tls, _scanset, int32(-1), uint64(257))
	*(*uint8)(unsafe.Pointer(_scanset)) = uint8(0)
	if _t != int32('s') {
		goto _89
	}

	*(*uint8)(unsafe.Pointer(_scanset + 10)) = uint8(0)
	*(*uint8)(unsafe.Pointer(_scanset + 11)) = uint8(0)
	*(*uint8)(unsafe.Pointer(_scanset + 12)) = uint8(0)
	*(*uint8)(unsafe.Pointer(_scanset + 13)) = uint8(0)
	*(*uint8)(unsafe.Pointer(_scanset + 14)) = uint8(0)
	*(*uint8)(unsafe.Pointer(_scanset + 33)) = uint8(0)
_89:
	goto _88

_87:
	if int32(*(*uint8)(unsafe.Pointer(preinc909(&_p)))) != int32('^') {
		goto _90
	}

	_p++
	_invert = int32(1)
	goto _91

_90:
	_invert = int32(0)
_91:
	Xmemset(tls, _scanset, _invert, uint64(257))
	*(*uint8)(unsafe.Pointer(_scanset)) = uint8(0)
	if int32(*(*uint8)(unsafe.Pointer(_p))) != int32('-') {
		goto _92
	}

	_p++
	*(*uint8)(unsafe.Pointer(_scanset + 46)) = uint8(int32(1) - _invert)
	goto _93

_92:
	if int32(*(*uint8)(unsafe.Pointer(_p))) != int32(']') {
		goto _94
	}

	_p++
	*(*uint8)(unsafe.Pointer(_scanset + 94)) = uint8(int32(1) - _invert)
_94:
_93:
_95:
	if int32(*(*uint8)(unsafe.Pointer(_p))) == int32(']') {
		goto _97
	}

	if *(*uint8)(unsafe.Pointer(_p)) != 0 {
		goto _98
	}

	goto lfmt_fail

_98:
	if int32(*(*uint8)(unsafe.Pointer(_p))) != int32('-') || *(*uint8)(unsafe.Pointer(_p + 1)) == 0 || int32(*(*uint8)(unsafe.Pointer(_p + 1))) == int32(']') {
		goto _99
	}

	_c = int32(*(*uint8)(unsafe.Pointer(postinc907(&_p) - 1)))
_100:
	if _c >= int32(*(*uint8)(unsafe.Pointer(_p))) {
		goto _102
	}

	*(*uint8)(unsafe.Pointer(_scanset + uintptr(int32(1)+_c))) = uint8(int32(1) - _invert)
	_c++
	goto _100

_102:
_99:
	*(*uint8)(unsafe.Pointer(_scanset + uintptr(int32(1)+int32(*(*uint8)(unsafe.Pointer(_p)))))) = uint8(int32(1) - _invert)
	_p++
	goto _95

_97:
_88:
	_wcs = null
	_s = null
	_i = uint64(0)
	_k = uint64(func() uint32 {
		if _t == int32('c') {
			return uint32(_width) + uint32(1)
		}
		return uint32(31)
	}())
	if _size != int32(1) {
		goto _103
	}

	if _alloc == 0 {
		goto _105
	}

	_wcs = Xmalloc(tls, _k*uint64(4))
	if _wcs != 0 {
		goto _107
	}

	goto lalloc_fail

_107:
	goto _106

_105:
	_wcs = _dest
_106:
	*(*struct {
		F__opaque1 uint32
		F__opaque2 uint32
	})(unsafe.Pointer(_st)) = struct {
		F__opaque1 uint32
		F__opaque2 uint32
	}{}
	X__assert_fail(tls, ts+0 /* "TODO(ccgo)" */, ts+4704 /* "src/stdio/vfscan..." */, int32(233), x912__func__)
	X__assert_fail(tls, ts+0 /* "TODO(ccgo)" */, ts+4704 /* "src/stdio/vfscan..." */, int32(235), x912__func__)
	X__assert_fail(tls, ts+0 /* "TODO(ccgo)" */, ts+4704 /* "src/stdio/vfscan..." */, int32(237), x912__func__)
	X__assert_fail(tls, ts+0 /* "TODO(ccgo)" */, ts+4704 /* "src/stdio/vfscan..." */, int32(239), x912__func__)
	X__assert_fail(tls, ts+0 /* "TODO(ccgo)" */, ts+4704 /* "src/stdio/vfscan..." */, int32(241), x912__func__)
	X__assert_fail(tls, ts+0 /* "TODO(ccgo)" */, ts+4704 /* "src/stdio/vfscan..." */, int32(243), x912__func__)
	X__assert_fail(tls, ts+0 /* "TODO(ccgo)" */, ts+4704 /* "src/stdio/vfscan..." */, int32(245), x912__func__)
	X__assert_fail(tls, ts+0 /* "TODO(ccgo)" */, ts+4704 /* "src/stdio/vfscan..." */, int32(247), x912__func__)
	X__assert_fail(tls, ts+0 /* "TODO(ccgo)" */, ts+4704 /* "src/stdio/vfscan..." */, int32(249), x912__func__)
	X__assert_fail(tls, ts+0 /* "TODO(ccgo)" */, ts+4704 /* "src/stdio/vfscan..." */, int32(251), x912__func__)
	X__assert_fail(tls, ts+0 /* "TODO(ccgo)" */, ts+4704 /* "src/stdio/vfscan..." */, int32(253), x912__func__)
	X__assert_fail(tls, ts+0 /* "TODO(ccgo)" */, ts+4704 /* "src/stdio/vfscan..." */, int32(255), x912__func__)
	X__assert_fail(tls, ts+0 /* "TODO(ccgo)" */, ts+4704 /* "src/stdio/vfscan..." */, int32(257), x912__func__)
	X__assert_fail(tls, ts+0 /* "TODO(ccgo)" */, ts+4704 /* "src/stdio/vfscan..." */, int32(259), x912__func__)
	X__assert_fail(tls, ts+0 /* "TODO(ccgo)" */, ts+4704 /* "src/stdio/vfscan..." */, int32(261), x912__func__)
	if Xmbsinit(tls, _st) != 0 {
		goto _108
	}

	goto linput_fail

_108:
	goto _104

_103:
	if _alloc == 0 {
		goto _109
	}

	_s = Xmalloc(tls, _k)
	if _s != 0 {
		goto _111
	}

	goto lalloc_fail

_111:
_112:
	if *(*uint8)(unsafe.Pointer(_scanset + uintptr(set908(&_c, func() int32 {
		if *(*uintptr)(unsafe.Pointer(_f + 8)) < *(*uintptr)(unsafe.Pointer(_f + 184)) {
			return int32(*(*uint8)(unsafe.Pointer(postinc907((*uintptr)(unsafe.Pointer(_f + 8))))))
		}
		return X__shgetc(tls, _f)
	}())+int32(1)))) == 0 {
		goto _113
	}

	*(*int8)(unsafe.Pointer(_s + uintptr(postinc910(&_i)))) = int8(_c)
	if _i != _k {
		goto _114
	}

	_k = _k + (_k + uint64(1))
	_tmp = Xrealloc(tls, _s, _k)
	if _tmp != 0 {
		goto _115
	}

	goto lalloc_fail

_115:
	_s = _tmp
_114:
	goto _112

_113:
	goto _110

_109:
	if set911(&_s, _dest) == 0 {
		goto _116
	}

_118:
	if *(*uint8)(unsafe.Pointer(_scanset + uintptr(set908(&_c, func() int32 {
		if *(*uintptr)(unsafe.Pointer(_f + 8)) < *(*uintptr)(unsafe.Pointer(_f + 184)) {
			return int32(*(*uint8)(unsafe.Pointer(postinc907((*uintptr)(unsafe.Pointer(_f + 8))))))
		}
		return X__shgetc(tls, _f)
	}())+int32(1)))) == 0 {
		goto _119
	}

	*(*int8)(unsafe.Pointer(_s + uintptr(postinc910(&_i)))) = int8(_c)
	goto _118

_119:
	goto _117

_116:
_120:
	if *(*uint8)(unsafe.Pointer(_scanset + uintptr(set908(&_c, func() int32 {
		if *(*uintptr)(unsafe.Pointer(_f + 8)) < *(*uintptr)(unsafe.Pointer(_f + 184)) {
			return int32(*(*uint8)(unsafe.Pointer(postinc907((*uintptr)(unsafe.Pointer(_f + 8))))))
		}
		return X__shgetc(tls, _f)
	}())+int32(1)))) == 0 {
		goto _121
	}

	goto _120

_121:
_117:
_110:
_104:
	if *(*uintptr)(unsafe.Pointer(_f + 184)) != 0 {
		*(*uintptr)(unsafe.Pointer(_f + 8))--
	} else {
	}
	if *(*int64)(unsafe.Pointer(_f + 200))+int64(*(*uintptr)(unsafe.Pointer(_f + 8))-*(*uintptr)(unsafe.Pointer(_f + 16))) != 0 {
		goto _122
	}

	goto lmatch_fail

_122:
	if _t != int32('c') || *(*int64)(unsafe.Pointer(_f + 200))+int64(*(*uintptr)(unsafe.Pointer(_f + 8))-*(*uintptr)(unsafe.Pointer(_f + 16))) == int64(_width) {
		goto _123
	}

	goto lmatch_fail

_123:
	if _alloc == 0 {
		goto _124
	}

	if _size != int32(1) {
		goto _125
	}

	*(*uintptr)(unsafe.Pointer(_dest)) = _wcs
	goto _126

_125:
	*(*uintptr)(unsafe.Pointer(_dest)) = _s
_126:
_124:
	if _t == int32('c') {
		goto _127
	}

	if _wcs == 0 {
		goto _128
	}

	*(*int32)(unsafe.Pointer(_wcs + 4*uintptr(_i))) = int32(0)
_128:
	if _s == 0 {
		goto _129
	}

	*(*int8)(unsafe.Pointer(_s + uintptr(_i))) = int8(0)
_129:
_127:
	goto _68

_72:
_73:
_74:
	_base = int32(16)
	goto lint_common

_75:
	_base = int32(8)
	goto lint_common

_76:
_77:
	_base = int32(10)
	goto lint_common

_78:
	_base = int32(0)
	goto lint_common
lint_common:
	_x = X__intscan(tls, _f, uint32(_base), int32(0), uint64(18446744073709551615))
	if *(*int64)(unsafe.Pointer(_f + 200))+int64(*(*uintptr)(unsafe.Pointer(_f + 8))-*(*uintptr)(unsafe.Pointer(_f + 16))) != 0 {
		goto _130
	}

	goto lmatch_fail

_130:
	if _t != int32('p') || _dest == 0 {
		goto _131
	}

	*(*uintptr)(unsafe.Pointer(_dest)) = uintptr(_x)
	goto _132

_131:
	xstore_int(tls, _dest, _size, _x)
_132:
	goto _68

_79:
_80:
_81:
_82:
_83:
_84:
_85:
_86:
	_y = X__floatscan(tls, _f, _size, int32(0))
	if *(*int64)(unsafe.Pointer(_f + 200))+int64(*(*uintptr)(unsafe.Pointer(_f + 8))-*(*uintptr)(unsafe.Pointer(_f + 16))) != 0 {
		goto _133
	}

	goto lmatch_fail

_133:
	if _dest == 0 {
		goto _134
	}

	switch _size {
	case int32(0):
		goto _136
	case int32(1):
		goto _137
	case int32(2):
		goto _138
	}
	goto _135

_136:
	*(*float32)(unsafe.Pointer(_dest)) = float32(_y)
	goto _135

_137:
	*(*float64)(unsafe.Pointer(_dest)) = _y
	goto _135

_138:
	*(*float64)(unsafe.Pointer(_dest)) = _y
	goto _135

_135:
_134:
	goto _68

_68:
	_pos = _pos + (*(*int64)(unsafe.Pointer(_f + 200)) + int64(*(*uintptr)(unsafe.Pointer(_f + 8))-*(*uintptr)(unsafe.Pointer(_f + 16))))
	if _dest == 0 {
		goto _139
	}

	_matches++
_139:
_2:
	_p++
	goto _1

_3:
	goto _140

	goto lfmt_fail
lfmt_fail:
	goto lalloc_fail
lalloc_fail:
	goto linput_fail
linput_fail:
	if _matches != 0 {
		goto _141
	}

	_matches--
_141:
	goto lmatch_fail
lmatch_fail:
	if _alloc == 0 {
		goto _142
	}

	Xfree(tls, _s)
	Xfree(tls, _wcs)
_142:
_140:
	if ___need_unlock == 0 {
		goto _144
	}

	X__unlockfile(tls, _f)
_144:
	return _matches
}

type t916__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t916__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type s104_IO_FILE = struct {
	Fflags        uint32
	Frpos         uintptr // *uint8
	Frend         uintptr // *uint8
	Fclose        uintptr // *func(TLS, uintptr) int32
	Fwend         uintptr // *uint8
	Fwpos         uintptr // *uint8
	Fmustbezero_1 uintptr // *uint8
	Fwbase        uintptr // *uint8
	Fread         uintptr // *func(TLS, uintptr, uintptr, uint64) uint64
	Fwrite        uintptr // *func(TLS, uintptr, uintptr, uint64) uint64
	Fseek         uintptr // *func(TLS, uintptr, int64, int32) int64
	Fbuf          uintptr // *uint8
	Fbuf_size     uint64
	Fprev         uintptr // *TFILE = S_IO_FILE
	Fnext         uintptr // *TFILE = S_IO_FILE
	Ffd           int32
	Fpipe_pid     int32
	Flockcount    int64
	Fdummy3       int16
	Fmode         int8
	Flbf          int8
	Flock         int32
	Fwaiters      int32
	Fcookie       uintptr // *void
	Foff          int64
	Fgetln_buf    uintptr // *int8
	Fmustbezero_2 uintptr // *void
	Fshend        uintptr // *uint8
	Fshlim        int64
	Fshcnt        int64
	Fprev_locked  uintptr // *TFILE = S_IO_FILE
	Fnext_locked  uintptr // *TFILE = S_IO_FILE
	Flocale       uintptr // *S__locale_struct
}

// x1__func__ [8]int8, escapes: true, vfscanf.c:58:1
var x912__func__ = ds + 45168

type t112off_t = int64

type t277size_t = uint64

type t1mbstate_t = struct {
	F__opaque1 uint32
	F__opaque2 uint32
}

// x__isspace is defined at ctype.h:26:21
func x5__isspace(tls TLS, __c int32) (r int32) {
	return bool2int((__c == int32(' ')) || (uint32(__c)-uint32('\t') < uint32(5)))
}

// xarg_n is defined at vfscanf.c:45:13
func xarg_n(tls TLS, _ap uintptr, _n uint32) (r uintptr /* *void */) {
	var (
		_p   uintptr // *void
		_i   uint32
		_ap2 uintptr // Tva_list = T__builtin_va_list = ...truct{Fsize int32;Fdata int8;};}
	)
	_ap2 = X__builtin_va_copy(tls, _ap)
	_i = _n
_1:
	if _i <= uint32(1) {
		goto _3
	}

	VAuintptr(_ap2)
	_i--
	goto _1

_3:
	_p = VAuintptr(_ap2)
	X__builtin_free(tls, _ap2)
	return _p
}

// xstore_int is defined at vfscanf.c:23:13
func xstore_int(tls TLS, _dest uintptr /* *void */, _size int32, _i uint64) {
	if _dest != 0 {
		goto _1
	}

	return

_1:
	switch _size {
	case int32(-2):
		goto _3
	case int32(-1):
		goto _4
	case int32(0):
		goto _5
	case int32(1):
		goto _6
	case int32(3):
		goto _7
	}
	goto _2

_3:
	*(*int8)(unsafe.Pointer(_dest)) = int8(_i)
	goto _2

_4:
	*(*int16)(unsafe.Pointer(_dest)) = int16(_i)
	goto _2

_5:
	*(*int32)(unsafe.Pointer(_dest)) = int32(_i)
	goto _2

_6:
	*(*int64)(unsafe.Pointer(_dest)) = int64(_i)
	goto _2

_7:
	*(*int64)(unsafe.Pointer(_dest)) = int64(_i)
	goto _2

_2:
}

type t31wchar_t = int32

type t45uintptr_t = uint64

type s137__locale_struct = struct{ Fcat [6]uintptr }

// linking vfwprintf.o

// Xvfwprintf is defined at vfwprintf.c:334:5
func Xvfwprintf(tls TLS, _f uintptr /* *TFILE = S_IO_FILE */, _fmt uintptr /* *Twchar_t = int32 */, _ap uintptr) (r int32) {
	esc := MustMalloc(120)
	var (
		_ap2           uintptr    // Tva_list = T__builtin_va_list = ...truct{Fsize int32;Fdata int8;};}
		_nl_type       = esc      // *[9]int32
		_nl_arg        = esc + 48 // *[9]Uarg
		_olderr        int32
		_ret           int32
		___need_unlock int32
	)
	defer Free(esc)
	Copy(_nl_type, ts+3392 /* "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00..." */, 36)
	_ap2 = X__builtin_va_copy(tls, _ap)
	if xwprintf_core(tls, null, _fmt, uintptr(unsafe.Pointer(&_ap2)), _nl_arg, _nl_type) >= int32(0) {
		goto _1
	}

	X__builtin_free(tls, _ap2)
	return int32(-1)

_1:
	___need_unlock = func() int32 {
		if *(*int32)(unsafe.Pointer(_f + 140)) >= int32(0) {
			return X__lockfile(tls, _f)
		}
		return int32(0)
	}()
	Xfwide(tls, _f, int32(1))
	_olderr = int32(*(*uint32)(unsafe.Pointer(_f)) & uint32(32))
	{
		p := (*uint32)(unsafe.Pointer(_f))
		*p = *p & uint32(4294967263)
	}
	_ret = xwprintf_core(tls, _f, _fmt, uintptr(unsafe.Pointer(&_ap2)), _nl_arg, _nl_type)
	if (*(*uint32)(unsafe.Pointer(_f)) & uint32(32)) == 0 {
		goto _2
	}

	_ret = int32(-1)
_2:
	{
		p := (*uint32)(unsafe.Pointer(_f))
		*p = *p | uint32(_olderr)
	}
	if ___need_unlock == 0 {
		goto _4
	}

	X__unlockfile(tls, _f)
_4:
	X__builtin_free(tls, _ap2)
	return _ret
}

type t917__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t917__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type s105_IO_FILE = struct {
	Fflags        uint32
	Frpos         uintptr // *uint8
	Frend         uintptr // *uint8
	Fclose        uintptr // *func(TLS, uintptr) int32
	Fwend         uintptr // *uint8
	Fwpos         uintptr // *uint8
	Fmustbezero_1 uintptr // *uint8
	Fwbase        uintptr // *uint8
	Fread         uintptr // *func(TLS, uintptr, uintptr, uint64) uint64
	Fwrite        uintptr // *func(TLS, uintptr, uintptr, uint64) uint64
	Fseek         uintptr // *func(TLS, uintptr, int64, int32) int64
	Fbuf          uintptr // *uint8
	Fbuf_size     uint64
	Fprev         uintptr // *TFILE = S_IO_FILE
	Fnext         uintptr // *TFILE = S_IO_FILE
	Ffd           int32
	Fpipe_pid     int32
	Flockcount    int64
	Fdummy3       int16
	Fmode         int8
	Flbf          int8
	Flock         int32
	Fwaiters      int32
	Fcookie       uintptr // *void
	Foff          int64
	Fgetln_buf    uintptr // *int8
	Fmustbezero_2 uintptr // *void
	Fshend        uintptr // *uint8
	Fshlim        int64
	Fshcnt        int64
	Fprev_locked  uintptr // *TFILE = S_IO_FILE
	Fnext_locked  uintptr // *TFILE = S_IO_FILE
	Flocale       uintptr // *S__locale_struct
}

type u1arg = struct {
	Fi [0]uint64
	Ff [0]float64
	Fp [0]uintptr // *void
	F  int64
}

func set913(p *int32, v int32) int32 { *p = v; return v }

func postinc914(p *uintptr) uintptr { r := *p; *p += 4; return r }

func postinc915(p *int32) int32 { r := *p; *p += -1; return r }

// xwprintf_core is defined at vfwprintf.c:143:12
func xwprintf_core(tls TLS, _f uintptr /* *TFILE = S_IO_FILE */, _fmt uintptr /* *Twchar_t = int32 */, _ap uintptr /* **T__builtin_va_list_header = st...truct{Fsize int32;Fdata int8;};} */, _nl_arg uintptr /* *Uarg */, _nl_type uintptr /* *int32 */) (r int32) {
	esc := MustMalloc(52)
	var (
		_a       uintptr // *Twchar_t = int32
		_z       uintptr // *Twchar_t = int32
		_s       = esc   // **Twchar_t = int32
		_l10n    uint32
		_fl      uint32
		_w       int32
		_p       int32
		_xp      int32
		_arg     = esc + 16 // *Uarg
		_argpos  int32
		_st      uint32
		_ps      uint32
		_cnt     int32
		_l       int32
		_i       int32
		_t       int32
		_bs      uintptr    // *int8
		_charfmt = esc + 32 // *[16]int8
		_wc      = esc + 48 // *Twchar_t = int32
	)
	defer Free(esc)
	*(*uintptr)(unsafe.Pointer(_s)) = _fmt
	_l10n = uint32(0)
	_cnt = int32(0)
	_l = int32(0)

_1:
	if _l <= int32(0x7fffffff)-_cnt {
		goto _4
	}

	goto loverflow

_4:
	_cnt = _cnt + _l
	if *(*int32)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_s)))) != 0 {
		goto _5
	}

	goto _3

_5:
	_a = *(*uintptr)(unsafe.Pointer(_s))
_6:
	if *(*int32)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_s)))) == 0 || *(*int32)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_s)))) == int32('%') {
		goto _8
	}

	*(*uintptr)(unsafe.Pointer(_s)) += 4
	goto _6

_8:
	_z = *(*uintptr)(unsafe.Pointer(_s))
_9:
	if *(*int32)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_s)))) != int32('%') || *(*int32)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_s)) + 4)) != int32('%') {
		goto _11
	}

	_z += 4
	*(*uintptr)(unsafe.Pointer(_s)) += 4 * uintptr(2)
	goto _9

_11:
	if int64((_z-_a)/4) <= int64(int32(0x7fffffff)-_cnt) {
		goto _12
	}

	goto loverflow

_12:
	_l = int32(int64((_z - _a) / 4))
	if _f == 0 {
		goto _13
	}

	x1out(tls, _f, _a, uint64(_l))
_13:
	if _l == 0 {
		goto _14
	}

	goto _2

_14:
	if uint32(*(*int32)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_s)) + 4)))-uint32('0') >= uint32(10) || *(*int32)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_s)) + 8)) != int32('$') {
		goto _15
	}

	_l10n = uint32(1)
	_argpos = *(*int32)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_s)) + 4)) - int32('0')
	*(*uintptr)(unsafe.Pointer(_s)) += 4 * uintptr(3)
	goto _16

_15:
	_argpos = int32(-1)
	*(*uintptr)(unsafe.Pointer(_s)) += 4
_16:
	_fl = uint32(0)
_17:
	if uint32(*(*int32)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_s)))))-uint32(' ') >= uint32(32) || uint32(75913)&(uint32(1)<<(uint(*(*int32)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_s))))-int32(' '))%32)) == 0 {
		goto _19
	}

	_fl = _fl | uint32(1)<<(uint(*(*int32)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_s))))-int32(' '))%32)
	*(*uintptr)(unsafe.Pointer(_s)) += 4
	goto _17

_19:
	if *(*int32)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_s)))) != int32('*') {
		goto _20
	}

	if uint32(*(*int32)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_s)) + 4)))-uint32('0') >= uint32(10) || *(*int32)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_s)) + 8)) != int32('$') {
		goto _22
	}

	_l10n = uint32(1)
	*(*int32)(unsafe.Pointer(_nl_type + 4*uintptr(*(*int32)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_s)) + 4))-int32('0')))) = int32(10)
	_w = int32(*(*uint64)(unsafe.Pointer(_nl_arg + 8*uintptr(*(*int32)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_s)) + 4))-int32('0')))))
	*(*uintptr)(unsafe.Pointer(_s)) += 4 * uintptr(3)
	goto _23

_22:
	if _l10n != 0 {
		goto _24
	}

	_w = func() int32 {
		if _f != 0 {
			return VAint32(*(*uintptr)(unsafe.Pointer(_ap)))
		}
		return int32(0)
	}()
	*(*uintptr)(unsafe.Pointer(_s)) += 4
	goto _25

_24:
	goto linval

_25:
_23:
	if _w >= int32(0) {
		goto _26
	}

	_fl = _fl | uint32(8192)
	_w = -_w
_26:
	goto _21

_20:
	if set913(&_w, x1getint(tls, _s)) >= int32(0) {
		goto _27
	}

	goto loverflow

_27:
_21:
	if *(*int32)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_s)))) != int32('.') || *(*int32)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_s)) + 4)) != int32('*') {
		goto _28
	}

	if uint32(*(*int32)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_s)) + 8)))-uint32('0') >= uint32(10) || *(*int32)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_s)) + 12)) != int32('$') {
		goto _30
	}

	*(*int32)(unsafe.Pointer(_nl_type + 4*uintptr(*(*int32)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_s)) + 8))-int32('0')))) = int32(10)
	_p = int32(*(*uint64)(unsafe.Pointer(_nl_arg + 8*uintptr(*(*int32)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_s)) + 8))-int32('0')))))
	*(*uintptr)(unsafe.Pointer(_s)) += 4 * uintptr(4)
	goto _31

_30:
	if _l10n != 0 {
		goto _32
	}

	_p = func() int32 {
		if _f != 0 {
			return VAint32(*(*uintptr)(unsafe.Pointer(_ap)))
		}
		return int32(0)
	}()
	*(*uintptr)(unsafe.Pointer(_s)) += 4 * uintptr(2)
	goto _33

_32:
	goto linval

_33:
_31:
	_xp = bool2int(_p >= int32(0))
	goto _29

_28:
	if *(*int32)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_s)))) != int32('.') {
		goto _34
	}

	*(*uintptr)(unsafe.Pointer(_s)) += 4
	_p = x1getint(tls, _s)
	_xp = int32(1)
	goto _35

_34:
	_p = int32(-1)
	_xp = int32(0)
_35:
_29:
	_st = uint32(0)
_36:
	if uint32(*(*int32)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_s)))))-uint32('A') <= uint32(57) {
		goto _39
	}

	goto linval

_39:
	_ps = _st
	_st = uint32(*(*uint8)(unsafe.Pointer((x1states + 58*uintptr(_st)) + uintptr(*(*int32)(unsafe.Pointer(postinc914((*uintptr)(unsafe.Pointer(_s)))))-int32('A')))))
	if _st-uint32(1) < uint32(8) {
		goto _36
	}

	if _st != 0 {
		goto _40
	}

	goto linval

_40:
	if _st != uint32(27) {
		goto _41
	}

	if _argpos < int32(0) {
		goto _43
	}

	goto linval

_43:
	goto _42

_41:
	if _argpos < int32(0) {
		goto _44
	}

	*(*int32)(unsafe.Pointer(_nl_type + 4*uintptr(_argpos))) = int32(_st)
	*(*u1arg)(unsafe.Pointer(_arg)) = *(*u1arg)(unsafe.Pointer(_nl_arg + 8*uintptr(_argpos)))
	goto _45

_44:
	if _f == 0 {
		goto _46
	}

	x1pop_arg(tls, _arg, int32(_st), _ap)
	goto _47

_46:
	return int32(0)

_47:
_45:
_42:
	if _f != 0 {
		goto _48
	}

	goto _2

_48:
	_t = *(*int32)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_s)) - 4))
	if _ps == 0 || _t&int32(15) != int32(3) {
		goto _49
	}

	_t = _t & int32(-33)
_49:
	switch _t {
	case int32('n'):
		goto _51
	case int32('c'):
		goto _52
	case int32('C'):
		goto _53
	case int32('S'):
		goto _54
	case int32('m'):
		goto _55
	case int32('s'):
		goto _56
	}
	goto _50

_51:
	switch _ps {
	case uint32(0):
		goto _58
	case uint32(1):
		goto _59
	case uint32(2):
		goto _60
	case uint32(3):
		goto _61
	case uint32(4):
		goto _62
	case uint32(6):
		goto _63
	case uint32(7):
		goto _64
	}
	goto _57

_58:
	*(*int32)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_arg)))) = _cnt
	goto _57

_59:
	*(*int64)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_arg)))) = int64(_cnt)
	goto _57

_60:
	*(*int64)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_arg)))) = int64(_cnt)
	goto _57

_61:
	*(*uint16)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_arg)))) = uint16(_cnt)
	goto _57

_62:
	*(*uint8)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_arg)))) = uint8(_cnt)
	goto _57

_63:
	*(*uint64)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_arg)))) = uint64(_cnt)
	goto _57

_64:
	*(*uint64)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_arg)))) = uint64(_cnt)
	goto _57

_57:
	goto _2

_52:
	Xfputwc(tls, int32(Xbtowc(tls, int32(*(*uint64)(unsafe.Pointer(_arg))))), _f)
	_l = int32(1)
	goto _2

_53:
	Xfputwc(tls, int32(*(*uint64)(unsafe.Pointer(_arg))), _f)
	_l = int32(1)
	goto _2

_54:
	_a = *(*uintptr)(unsafe.Pointer(_arg))
	_z = _a + 4*uintptr(Xwcsnlen(tls, _a, uint64(func() int32 {
		if _p < int32(0) {
			return int32(0x7fffffff)
		}
		return _p
	}())))
	if _p >= int32(0) || *(*int32)(unsafe.Pointer(_z)) == 0 {
		goto _65
	}

	goto loverflow

_65:
	_p = int32(int64((_z - _a) / 4))
	if _w >= _p {
		goto _66
	}

	_w = _p
_66:
	if _fl&uint32(8192) != 0 {
		goto _67
	}

	Xfprintf(tls, _f, ts+4724 /* "%*s" */, _w-_p, ts+112 /* "" */)
_67:
	x1out(tls, _f, _a, uint64(_p))
	if _fl&uint32(8192) == 0 {
		goto _68
	}

	Xfprintf(tls, _f, ts+4724 /* "%*s" */, _w-_p, ts+112 /* "" */)
_68:
	_l = _w
	goto _2

_55:
	*(*uintptr)(unsafe.Pointer(_arg)) = Xstrerror(tls, *(*int32)(unsafe.Pointer(X__errno_location(tls))))
_56:
	if *(*uintptr)(unsafe.Pointer(_arg)) != 0 {
		goto _69
	}

	*(*uintptr)(unsafe.Pointer(_arg)) = ts + 4664 /* "(null)" */
_69:
	_bs = *(*uintptr)(unsafe.Pointer(_arg))
	_i = set913(&_l, int32(0))
_70:
	if _l >= func() int32 {
		if _p < int32(0) {
			return int32(0x7fffffff)
		}
		return _p
	}() || set913(&_i, Xmbtowc(tls, _wc, _bs, uint64(4))) <= int32(0) {
		goto _72
	}

	_bs += uintptr(_i)
	_l++
	goto _70

_72:
	if _i >= int32(0) {
		goto _73
	}

	return int32(-1)

_73:
	if _p >= int32(0) || *(*int8)(unsafe.Pointer(_bs)) == 0 {
		goto _74
	}

	goto loverflow

_74:
	_p = _l
	if _w >= _p {
		goto _75
	}

	_w = _p
_75:
	if _fl&uint32(8192) != 0 {
		goto _76
	}

	Xfprintf(tls, _f, ts+4724 /* "%*s" */, _w-_p, ts+112 /* "" */)
_76:
	_bs = *(*uintptr)(unsafe.Pointer(_arg))
_77:
	if postinc915(&_l) == 0 {
		goto _78
	}

	_i = Xmbtowc(tls, _wc, _bs, uint64(4))
	_bs += uintptr(_i)
	Xfputwc(tls, *(*int32)(unsafe.Pointer(_wc)), _f)
	goto _77

_78:
	if _fl&uint32(8192) == 0 {
		goto _79
	}

	Xfprintf(tls, _f, ts+4724 /* "%*s" */, _w-_p, ts+112 /* "" */)
_79:
	_l = _w
	goto _2

_50:
	if _xp == 0 || _p >= int32(0) {
		goto _80
	}

	goto loverflow

_80:
	Xsnprintf(tls, _charfmt, uint64(16), ts+4728 /* "%%%s%s%s%s%s*.*%..." */, ts+4748 /* "#" */ +uintptr(bool2int(_fl&uint32(8) == 0)), ts+4752 /* "+" */ +uintptr(bool2int(_fl&uint32(2048) == 0)), ts+4756 /* "-" */ +uintptr(bool2int(_fl&uint32(8192) == 0)), ts+2036 /* " " */ +uintptr(bool2int(_fl&uint32(1) == 0)), ts+4760 /* "0" */ +uintptr(bool2int(_fl&uint32(65536) == 0)), int32(*(*int8)(unsafe.Pointer(xsizeprefix + uintptr(_t|int32(32)-int32('a'))))), _t)
	switch _t | int32(32) {
	case int32('a'):
		goto _82
	case int32('e'):
		goto _83
	case int32('f'):
		goto _84
	case int32('g'):
		goto _85
	case int32('d'):
		goto _86
	case int32('i'):
		goto _87
	case int32('o'):
		goto _88
	case int32('u'):
		goto _89
	case int32('x'):
		goto _90
	case int32('p'):
		goto _91
	}
	goto _81

_82:
_83:
_84:
_85:
	_l = Xfprintf(tls, _f, _charfmt, _w, _p, *(*float64)(unsafe.Pointer(_arg)))
	goto _81

_86:
_87:
_88:
_89:
_90:
_91:
	_l = Xfprintf(tls, _f, _charfmt, _w, _p, *(*uint64)(unsafe.Pointer(_arg)))
	goto _81

_81:
_2:
	goto _1

_3:
	if _f == 0 {
		goto _92
	}

	return _cnt

_92:
	if _l10n != 0 {
		goto _93
	}

	return int32(0)

_93:
	_i = int32(1)
_94:
	if _i > int32(9) || *(*int32)(unsafe.Pointer(_nl_type + 4*uintptr(_i))) == 0 {
		goto _96
	}

	x1pop_arg(tls, _nl_arg+8*uintptr(_i), *(*int32)(unsafe.Pointer(_nl_type + 4*uintptr(_i))), _ap)
	_i++
	goto _94

_96:
_97:
	if _i > int32(9) || *(*int32)(unsafe.Pointer(_nl_type + 4*uintptr(_i))) != 0 {
		goto _99
	}

	_i++
	goto _97

_99:
	if _i > int32(9) {
		goto _100
	}

	return int32(-1)

_100:
	return int32(1)

	goto linval
linval:
	*(*int32)(unsafe.Pointer(X__errno_location(tls))) = int32(22)
	return int32(-1)

	goto loverflow
loverflow:
	*(*int32)(unsafe.Pointer(X__errno_location(tls))) = int32(75)
	return int32(-1)
}

type t278size_t = uint64

type t113off_t = int64

type s138__locale_struct = struct{ Fcat [6]uintptr }

type t1uintmax_t = uint64

type t32wchar_t = int32

func postinc916(p *uint64) uint64 { r := *p; *p += 18446744073709551615; return r }

// xout is defined at vfwprintf.c:123:13
func x1out(tls TLS, _f uintptr /* *TFILE = S_IO_FILE */, _s uintptr /* *Twchar_t = int32 */, _l uint64) {
_1:
	if postinc916(&_l) == 0 || *(*uint32)(unsafe.Pointer(_f))&uint32(32) != 0 {
		goto _2
	}

	Xfputwc(tls, *(*int32)(unsafe.Pointer(postinc914(&_s))), _f)
	goto _1

_2:
}

// xgetint is defined at vfwprintf.c:128:12
func x1getint(tls TLS, _s uintptr /* **Twchar_t = int32 */) (r int32) {
	var _i int32

	_i = int32(0)
_1:
	if uint32(**(**int32)(unsafe.Pointer(_s)))-uint32('0') >= uint32(10) {
		goto _3
	}

	if uint32(_i) <= uint32(214748364) && **(**int32)(unsafe.Pointer(_s))-int32('0') <= int32(0x7fffffff)-int32(10)*_i {
		goto _4
	}

	_i = int32(-1)
	goto _5

_4:
	_i = int32(10)*_i + (**(**int32)(unsafe.Pointer(_s)) - int32('0'))
_5:
	*(*uintptr)(unsafe.Pointer(_s)) += 4
	goto _1

_3:
	return _i
}

// xstates [8][58]uint8, escapes: true, vfwprintf.c:41:28
var x1states = ds + 45176

// xpop_arg is defined at vfwprintf.c:99:13
func x1pop_arg(tls TLS, _arg uintptr /* *Uarg */, _type int32, _ap uintptr /* **T__builtin_va_list_header = st...truct{Fsize int32;Fdata int8;};} */) {
	switch _type {
	case int32(9):
		goto _2
	case int32(10):
		goto _3
	case int32(11):
		goto _4
	case int32(13):
		goto _5
	case int32(14):
		goto _6
	case int32(12):
		goto _7
	case int32(15):
		goto _8
	case int32(16):
		goto _9
	case int32(17):
		goto _10
	case int32(18):
		goto _11
	case int32(19):
		goto _12
	case int32(20):
		goto _13
	case int32(21):
		goto _14
	case int32(22):
		goto _15
	case int32(23):
		goto _16
	case int32(24):
		goto _17
	case int32(25):
		goto _18
	case int32(26):
		goto _19
	}
	goto _1

_2:
	*(*uintptr)(unsafe.Pointer(_arg)) = VAuintptr(*(*uintptr)(unsafe.Pointer(_ap)))
	goto _1

_3:
	*(*uint64)(unsafe.Pointer(_arg)) = uint64(VAint32(*(*uintptr)(unsafe.Pointer(_ap))))
	goto _1

_4:
	*(*uint64)(unsafe.Pointer(_arg)) = uint64(VAuint32(*(*uintptr)(unsafe.Pointer(_ap))))
	goto _1

_5:
	*(*uint64)(unsafe.Pointer(_arg)) = uint64(VAint64(*(*uintptr)(unsafe.Pointer(_ap))))
	goto _1

_6:
	*(*uint64)(unsafe.Pointer(_arg)) = VAuint64(*(*uintptr)(unsafe.Pointer(_ap)))
	goto _1

_7:
	*(*uint64)(unsafe.Pointer(_arg)) = VAuint64(*(*uintptr)(unsafe.Pointer(_ap)))
	goto _1

_8:
	*(*uint64)(unsafe.Pointer(_arg)) = uint64(int16(VAint32(*(*uintptr)(unsafe.Pointer(_ap)))))
	goto _1

_9:
	*(*uint64)(unsafe.Pointer(_arg)) = uint64(uint16(VAint32(*(*uintptr)(unsafe.Pointer(_ap)))))
	goto _1

_10:
	*(*uint64)(unsafe.Pointer(_arg)) = uint64(int8(VAint32(*(*uintptr)(unsafe.Pointer(_ap)))))
	goto _1

_11:
	*(*uint64)(unsafe.Pointer(_arg)) = uint64(uint8(VAint32(*(*uintptr)(unsafe.Pointer(_ap)))))
	goto _1

_12:
	*(*uint64)(unsafe.Pointer(_arg)) = uint64(VAint64(*(*uintptr)(unsafe.Pointer(_ap))))
	goto _1

_13:
	*(*uint64)(unsafe.Pointer(_arg)) = VAuint64(*(*uintptr)(unsafe.Pointer(_ap)))
	goto _1

_14:
	*(*uint64)(unsafe.Pointer(_arg)) = uint64(VAint64(*(*uintptr)(unsafe.Pointer(_ap))))
	goto _1

_15:
	*(*uint64)(unsafe.Pointer(_arg)) = VAuint64(*(*uintptr)(unsafe.Pointer(_ap)))
	goto _1

_16:
	*(*uint64)(unsafe.Pointer(_arg)) = uint64(VAint64(*(*uintptr)(unsafe.Pointer(_ap))))
	goto _1

_17:
	*(*uint64)(unsafe.Pointer(_arg)) = uint64(VAuintptr(*(*uintptr)(unsafe.Pointer(_ap))))
	goto _1

_18:
	*(*float64)(unsafe.Pointer(_arg)) = VAfloat64(*(*uintptr)(unsafe.Pointer(_ap)))
	goto _1

_19:
	*(*float64)(unsafe.Pointer(_arg)) = VAfloat64(*(*uintptr)(unsafe.Pointer(_ap)))
_1:
}

// xsizeprefix [24]int8, escapes: true, vfwprintf.c:137:19
var xsizeprefix = ds + 45640

type t46uintptr_t = uint64

type t28wint_t = uint32

// linking vfwscanf.o

// Xvfwscanf is defined at vfwscanf.c:88:5
func Xvfwscanf(tls TLS, _f uintptr /* *TFILE = S_IO_FILE */, _fmt uintptr /* *Twchar_t = int32 */, _ap uintptr) (r int32) {
	var (
		_dest    uintptr // *void
		_        = _dest
		_matches int32
		_        = _matches
		_pos     int64
		_        = _pos
	)
	_dest = 0
	_matches = int32(0)
	_pos = int64(0)
	X__assert_fail(tls, ts+0 /* "TODO(ccgo)" */, ts+4764 /* "src/stdio/vfwsca..." */, int32(101), x917__func__)
	return r
}

type t918__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t918__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type s106_IO_FILE = struct {
	Fflags        uint32
	Frpos         uintptr // *uint8
	Frend         uintptr // *uint8
	Fclose        uintptr // *func(TLS, uintptr) int32
	Fwend         uintptr // *uint8
	Fwpos         uintptr // *uint8
	Fmustbezero_1 uintptr // *uint8
	Fwbase        uintptr // *uint8
	Fread         uintptr // *func(TLS, uintptr, uintptr, uint64) uint64
	Fwrite        uintptr // *func(TLS, uintptr, uintptr, uint64) uint64
	Fseek         uintptr // *func(TLS, uintptr, int64, int32) int64
	Fbuf          uintptr // *uint8
	Fbuf_size     uint64
	Fprev         uintptr // *TFILE = S_IO_FILE
	Fnext         uintptr // *TFILE = S_IO_FILE
	Ffd           int32
	Fpipe_pid     int32
	Flockcount    int64
	Fdummy3       int16
	Fmode         int8
	Flbf          int8
	Flock         int32
	Fwaiters      int32
	Fcookie       uintptr // *void
	Foff          int64
	Fgetln_buf    uintptr // *int8
	Fmustbezero_2 uintptr // *void
	Fshend        uintptr // *uint8
	Fshlim        int64
	Fshcnt        int64
	Fprev_locked  uintptr // *TFILE = S_IO_FILE
	Fnext_locked  uintptr // *TFILE = S_IO_FILE
	Flocale       uintptr // *S__locale_struct
}

// x1__func__ [9]int8, escapes: true, vfwscanf.c:89:1
var x917__func__ = ds + 45664

type t114off_t = int64

type t279size_t = uint64

type s139__locale_struct = struct{ Fcat [6]uintptr }

// linking vprintf.o

// Xvprintf is defined at vprintf.c:3:5
func Xvprintf(tls TLS, _fmt uintptr /* *int8 */, _ap uintptr) (r int32) {
	return Xvfprintf(tls, *(*uintptr)(unsafe.Pointer(Xstdout)), _fmt, _ap)
}

type t919__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t919__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// linking vscanf.o

// Xvscanf is defined at vscanf.c:5:5
func Xvscanf(tls TLS, _fmt uintptr /* *int8 */, _ap uintptr) (r int32) {
	return Xvfscanf(tls, *(*uintptr)(unsafe.Pointer(Xstdin)), _fmt, _ap)
}

type t920__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t920__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// linking vsnprintf.o

func fp918(f func(TLS, uintptr, uintptr, uint64) uint64) uintptr {
	return *(*uintptr)(unsafe.Pointer(&f))
}

// Xvsnprintf is defined at vsnprintf.c:35:5
func Xvsnprintf(tls TLS, _s uintptr /* *int8 */, _n uint64, _fmt uintptr /* *int8 */, _ap uintptr) (r int32) {
	esc := MustMalloc(280)
	var (
		_buf   = esc      // *[1]uint8
		_dummy = esc + 16 // *[1]int8
		_c     = esc + 32 // *Scookie
		_f     = esc + 48 // *TFILE = S_IO_FILE
	)
	defer Free(esc)
	*(*s3cookie)(unsafe.Pointer(_c)) = s3cookie{
		Fs: func() uintptr {
			if _n != 0 {
				return _s
			}
			return _dummy
		}(),
		Fn: func() uint64 {
			if _n != 0 {
				return _n - uint64(1)
			}
			return uint64(0)
		}(),
	}
	*(*s107_IO_FILE)(unsafe.Pointer(_f)) = s107_IO_FILE{
		Flbf:    int8(-1),
		Fwrite:  fp918(xsn_write),
		Flock:   int32(-1),
		Fbuf:    _buf,
		Fcookie: _c,
	}
	if _n <= uint64(0x7fffffff) {
		goto _1
	}

	*(*int32)(unsafe.Pointer(X__errno_location(tls))) = int32(75)
	return int32(-1)

_1:
	*(*int8)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_c)))) = int8(0)
	return Xvfprintf(tls, _f, _fmt, _ap)
}

type t921__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t921__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t280size_t = uint64

type s3cookie = struct {
	Fs uintptr // *int8
	Fn uint64
}

type s107_IO_FILE = struct {
	Fflags        uint32
	Frpos         uintptr // *uint8
	Frend         uintptr // *uint8
	Fclose        uintptr // *func(TLS, uintptr) int32
	Fwend         uintptr // *uint8
	Fwpos         uintptr // *uint8
	Fmustbezero_1 uintptr // *uint8
	Fwbase        uintptr // *uint8
	Fread         uintptr // *func(TLS, uintptr, uintptr, uint64) uint64
	Fwrite        uintptr // *func(TLS, uintptr, uintptr, uint64) uint64
	Fseek         uintptr // *func(TLS, uintptr, int64, int32) int64
	Fbuf          uintptr // *uint8
	Fbuf_size     uint64
	Fprev         uintptr // *TFILE = S_IO_FILE
	Fnext         uintptr // *TFILE = S_IO_FILE
	Ffd           int32
	Fpipe_pid     int32
	Flockcount    int64
	Fdummy3       int16
	Fmode         int8
	Flbf          int8
	Flock         int32
	Fwaiters      int32
	Fcookie       uintptr // *void
	Foff          int64
	Fgetln_buf    uintptr // *int8
	Fmustbezero_2 uintptr // *void
	Fshend        uintptr // *uint8
	Fshlim        int64
	Fshcnt        int64
	Fprev_locked  uintptr // *TFILE = S_IO_FILE
	Fnext_locked  uintptr // *TFILE = S_IO_FILE
	Flocale       uintptr // *S__locale_struct
}

type t8FILE = s107_IO_FILE

func set919(p *uintptr, v uintptr) uintptr { *p = v; return v }

// xsn_write is defined at vsnprintf.c:14:15
func xsn_write(tls TLS, _f uintptr /* *TFILE = S_IO_FILE */, _s uintptr /* *uint8 */, _l uint64) (r uint64) {
	var (
		_c uintptr // *Scookie
		_k uint64
	)
	_c = *(*uintptr)(unsafe.Pointer(_f + 152))
	_k = func() uint64 {
		if *(*uint64)(unsafe.Pointer(_c + 8)) < uint64(int64(*(*uintptr)(unsafe.Pointer(_f + 40))-*(*uintptr)(unsafe.Pointer(_f + 56)))) {
			return *(*uint64)(unsafe.Pointer(_c + 8))
		}
		return uint64(int64(*(*uintptr)(unsafe.Pointer(_f + 40)) - *(*uintptr)(unsafe.Pointer(_f + 56))))
	}()
	if _k == 0 {
		goto _1
	}

	Xmemcpy(tls, *(*uintptr)(unsafe.Pointer(_c)), *(*uintptr)(unsafe.Pointer(_f + 56)), _k)
	*(*uintptr)(unsafe.Pointer(_c)) += uintptr(_k)
	{
		p := (*uint64)(unsafe.Pointer(_c + 8))
		*p = *p - _k
	}
_1:
	_k = func() uint64 {
		if *(*uint64)(unsafe.Pointer(_c + 8)) < _l {
			return *(*uint64)(unsafe.Pointer(_c + 8))
		}
		return _l
	}()
	if _k == 0 {
		goto _2
	}

	Xmemcpy(tls, *(*uintptr)(unsafe.Pointer(_c)), _s, _k)
	*(*uintptr)(unsafe.Pointer(_c)) += uintptr(_k)
	{
		p := (*uint64)(unsafe.Pointer(_c + 8))
		*p = *p - _k
	}
_2:
	*(*int8)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_c)))) = int8(0)
	*(*uintptr)(unsafe.Pointer(_f + 40)) = set919((*uintptr)(unsafe.Pointer(_f+56)), *(*uintptr)(unsafe.Pointer(_f + 88)))
	return _l
}

type t115off_t = int64

type s140__locale_struct = struct{ Fcat [6]uintptr }

// linking vsprintf.o

// Xvsprintf is defined at vsprintf.c:4:5
func Xvsprintf(tls TLS, _s uintptr /* *int8 */, _fmt uintptr /* *int8 */, _ap uintptr) (r int32) {
	return Xvsnprintf(tls, _s, uint64(0x7fffffff), _fmt, _ap)
}

type t922__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t922__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t281size_t = uint64

// linking vsscanf.o

func fp920(f func(TLS, uintptr, uintptr, uint64) uint64) uintptr {
	return *(*uintptr)(unsafe.Pointer(&f))
}

// Xvsscanf is defined at vsscanf.c:9:5
func Xvsscanf(tls TLS, _s uintptr /* *int8 */, _fmt uintptr /* *int8 */, _ap uintptr) (r int32) {
	esc := MustMalloc(232)
	var _f = esc // *TFILE = S_IO_FILE
	defer Free(esc)
	*(*s108_IO_FILE)(unsafe.Pointer(_f)) = s108_IO_FILE{
		Fbuf:    _s,
		Fcookie: _s,
		Fread:   fp920(xdo_read),
		Flock:   int32(-1),
	}
	return Xvfscanf(tls, _f, _fmt, _ap)
}

type t923__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t923__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type s108_IO_FILE = struct {
	Fflags        uint32
	Frpos         uintptr // *uint8
	Frend         uintptr // *uint8
	Fclose        uintptr // *func(TLS, uintptr) int32
	Fwend         uintptr // *uint8
	Fwpos         uintptr // *uint8
	Fmustbezero_1 uintptr // *uint8
	Fwbase        uintptr // *uint8
	Fread         uintptr // *func(TLS, uintptr, uintptr, uint64) uint64
	Fwrite        uintptr // *func(TLS, uintptr, uintptr, uint64) uint64
	Fseek         uintptr // *func(TLS, uintptr, int64, int32) int64
	Fbuf          uintptr // *uint8
	Fbuf_size     uint64
	Fprev         uintptr // *TFILE = S_IO_FILE
	Fnext         uintptr // *TFILE = S_IO_FILE
	Ffd           int32
	Fpipe_pid     int32
	Flockcount    int64
	Fdummy3       int16
	Fmode         int8
	Flbf          int8
	Flock         int32
	Fwaiters      int32
	Fcookie       uintptr // *void
	Foff          int64
	Fgetln_buf    uintptr // *int8
	Fmustbezero_2 uintptr // *void
	Fshend        uintptr // *uint8
	Fshlim        int64
	Fshcnt        int64
	Fprev_locked  uintptr // *TFILE = S_IO_FILE
	Fnext_locked  uintptr // *TFILE = S_IO_FILE
	Flocale       uintptr // *S__locale_struct
}

type t9FILE = s108_IO_FILE

// xdo_read is defined at vsscanf.c:4:15
func xdo_read(tls TLS, _f uintptr /* *TFILE = S_IO_FILE */, _buf uintptr /* *uint8 */, _len uint64) (r uint64) {
	return X__string_read(tls, _f, _buf, _len)
}

type t282size_t = uint64

type t116off_t = int64

type s141__locale_struct = struct{ Fcat [6]uintptr }

// linking vswprintf.o

func fp921(f func(TLS, uintptr, uintptr, uint64) uint64) uintptr {
	return *(*uintptr)(unsafe.Pointer(&f))
}

// Xvswprintf is defined at vswprintf.c:36:5
func Xvswprintf(tls TLS, _s uintptr /* *Twchar_t = int32 */, _n uint64, _fmt uintptr /* *Twchar_t = int32 */, _ap uintptr) (r int32) {
	esc := MustMalloc(504)
	var (
		_r   int32
		_buf = esc       // *[256]uint8
		_c   = esc + 256 // *Scookie
		_f   = esc + 272 // *TFILE = S_IO_FILE
	)
	defer Free(esc)
	*(*s4cookie)(unsafe.Pointer(_c)) = s4cookie{
		Fws: _s,
		Fl:  _n - uint64(1),
	}
	*(*s109_IO_FILE)(unsafe.Pointer(_f)) = s109_IO_FILE{
		Flbf:      int8(-1),
		Fwrite:    fp921(xsw_write),
		Flock:     int32(-1),
		Fbuf:      _buf,
		Fbuf_size: uint64(256),
		Fcookie:   _c,
	}
	if _n != 0 {
		goto _1
	}

	return int32(-1)

	goto _2

_1:
	if _n <= uint64(0x7fffffff) {
		goto _3
	}

	*(*int32)(unsafe.Pointer(X__errno_location(tls))) = int32(75)
	return int32(-1)

_3:
_2:
	_r = Xvfwprintf(tls, _f, _fmt, _ap)
	xsw_write(tls, _f, null, uint64(0))
	if uint64(_r) >= _n {
		return int32(-1)
	}

	return _r
}

type t924__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t924__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t283size_t = uint64

type s4cookie = struct {
	Fws uintptr // *Twchar_t = int32
	Fl  uint64
}

type s109_IO_FILE = struct {
	Fflags        uint32
	Frpos         uintptr // *uint8
	Frend         uintptr // *uint8
	Fclose        uintptr // *func(TLS, uintptr) int32
	Fwend         uintptr // *uint8
	Fwpos         uintptr // *uint8
	Fmustbezero_1 uintptr // *uint8
	Fwbase        uintptr // *uint8
	Fread         uintptr // *func(TLS, uintptr, uintptr, uint64) uint64
	Fwrite        uintptr // *func(TLS, uintptr, uintptr, uint64) uint64
	Fseek         uintptr // *func(TLS, uintptr, int64, int32) int64
	Fbuf          uintptr // *uint8
	Fbuf_size     uint64
	Fprev         uintptr // *TFILE = S_IO_FILE
	Fnext         uintptr // *TFILE = S_IO_FILE
	Ffd           int32
	Fpipe_pid     int32
	Flockcount    int64
	Fdummy3       int16
	Fmode         int8
	Flbf          int8
	Flock         int32
	Fwaiters      int32
	Fcookie       uintptr // *void
	Foff          int64
	Fgetln_buf    uintptr // *int8
	Fmustbezero_2 uintptr // *void
	Fshend        uintptr // *uint8
	Fshlim        int64
	Fshcnt        int64
	Fprev_locked  uintptr // *TFILE = S_IO_FILE
	Fnext_locked  uintptr // *TFILE = S_IO_FILE
	Flocale       uintptr // *S__locale_struct
}

type t10FILE = s109_IO_FILE

func set922(p *int32, v int32) int32 { *p = v; return v }

func set923(p *uintptr, v uintptr) uintptr { *p = v; return v }

// xsw_write is defined at vswprintf.c:12:15
func xsw_write(tls TLS, _f uintptr /* *TFILE = S_IO_FILE */, _s uintptr /* *uint8 */, _l uint64) (r uint64) {
	var (
		_l0 uint64
		_i  int32
		_c  uintptr // *Scookie
	)
	_l0 = _l
	_i = int32(0)
	_c = *(*uintptr)(unsafe.Pointer(_f + 152))
	if _s == *(*uintptr)(unsafe.Pointer(_f + 56)) || xsw_write(tls, _f, *(*uintptr)(unsafe.Pointer(_f + 56)), uint64(int64(*(*uintptr)(unsafe.Pointer(_f + 40))-*(*uintptr)(unsafe.Pointer(_f + 56))))) != uint64(18446744073709551615) {
		goto _1
	}

	return uint64(18446744073709551615)

_1:
_2:
	if *(*uint64)(unsafe.Pointer(_c + 8)) == 0 || _l == 0 || set922(&_i, Xmbtowc(tls, *(*uintptr)(unsafe.Pointer(_c)), _s, _l)) < int32(0) {
		goto _3
	}

	_s += uintptr(_i)
	_l = _l - uint64(_i)
	*(*uint64)(unsafe.Pointer(_c + 8))--
	*(*uintptr)(unsafe.Pointer(_c)) += 4
	goto _2

_3:
	*(*int32)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_c)))) = int32(0)
	if _i >= int32(0) {
		goto _4
	}

	*(*uintptr)(unsafe.Pointer(_f + 40)) = set923((*uintptr)(unsafe.Pointer(_f+56)), set923((*uintptr)(unsafe.Pointer(_f+32)), null))
	{
		p := (*uint32)(unsafe.Pointer(_f))
		*p = *p | uint32(32)
	}
	return uint64(_i)

_4:
	*(*uintptr)(unsafe.Pointer(_f + 32)) = *(*uintptr)(unsafe.Pointer(_f + 88)) + uintptr(*(*uint64)(unsafe.Pointer(_f + 96)))
	*(*uintptr)(unsafe.Pointer(_f + 40)) = set923((*uintptr)(unsafe.Pointer(_f+56)), *(*uintptr)(unsafe.Pointer(_f + 88)))
	return _l0
}

type t117off_t = int64

type s142__locale_struct = struct{ Fcat [6]uintptr }

type t33wchar_t = int32

// linking vswscanf.o

func fp924(f func(TLS, uintptr, uintptr, uint64) uint64) uintptr {
	return *(*uintptr)(unsafe.Pointer(&f))
}

// Xvswscanf is defined at vswscanf.c:28:5
func Xvswscanf(tls TLS, _s uintptr /* *Twchar_t = int32 */, _fmt uintptr /* *Twchar_t = int32 */, _ap uintptr) (r int32) {
	esc := MustMalloc(488)
	var (
		_buf = esc       // *[256]uint8
		_f   = esc + 256 // *TFILE = S_IO_FILE
	)
	defer Free(esc)
	*(*s110_IO_FILE)(unsafe.Pointer(_f)) = s110_IO_FILE{
		Fbuf:      _buf,
		Fbuf_size: uint64(256),
		Fcookie:   _s,
		Fread:     fp924(xwstring_read),
		Flock:     int32(-1),
	}
	return Xvfwscanf(tls, _f, _fmt, _ap)
}

type t925__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t925__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type s110_IO_FILE = struct {
	Fflags        uint32
	Frpos         uintptr // *uint8
	Frend         uintptr // *uint8
	Fclose        uintptr // *func(TLS, uintptr) int32
	Fwend         uintptr // *uint8
	Fwpos         uintptr // *uint8
	Fmustbezero_1 uintptr // *uint8
	Fwbase        uintptr // *uint8
	Fread         uintptr // *func(TLS, uintptr, uintptr, uint64) uint64
	Fwrite        uintptr // *func(TLS, uintptr, uintptr, uint64) uint64
	Fseek         uintptr // *func(TLS, uintptr, int64, int32) int64
	Fbuf          uintptr // *uint8
	Fbuf_size     uint64
	Fprev         uintptr // *TFILE = S_IO_FILE
	Fnext         uintptr // *TFILE = S_IO_FILE
	Ffd           int32
	Fpipe_pid     int32
	Flockcount    int64
	Fdummy3       int16
	Fmode         int8
	Flbf          int8
	Flock         int32
	Fwaiters      int32
	Fcookie       uintptr // *void
	Foff          int64
	Fgetln_buf    uintptr // *int8
	Fmustbezero_2 uintptr // *void
	Fshend        uintptr // *uint8
	Fshlim        int64
	Fshcnt        int64
	Fprev_locked  uintptr // *TFILE = S_IO_FILE
	Fnext_locked  uintptr // *TFILE = S_IO_FILE
	Flocale       uintptr // *S__locale_struct
}

type t11FILE = s110_IO_FILE

type t284size_t = uint64

func set925(p *uintptr, v uintptr) uintptr { *p = v; return v }

func postinc926(p *uintptr) uintptr { r := *p; *p += 1; return r }

// xwstring_read is defined at vswscanf.c:5:15
func xwstring_read(tls TLS, _f uintptr /* *TFILE = S_IO_FILE */, _buf uintptr /* *uint8 */, _len uint64) (r uint64) {
	esc := MustMalloc(8)
	var (
		_src = esc // **Twchar_t = int32
		_k   uint64
	)
	defer Free(esc)
	*(*uintptr)(unsafe.Pointer(_src)) = *(*uintptr)(unsafe.Pointer(_f + 152))
	if *(*uintptr)(unsafe.Pointer(_src)) != 0 {
		goto _1
	}

	return uint64(0)

_1:
	_k = Xwcsrtombs(tls, *(*uintptr)(unsafe.Pointer(_f + 88)), _src, *(*uint64)(unsafe.Pointer(_f + 96)), null)
	if _k != uint64(18446744073709551615) {
		goto _2
	}

	*(*uintptr)(unsafe.Pointer(_f + 8)) = set925((*uintptr)(unsafe.Pointer(_f+16)), null)
	return uint64(0)

_2:
	*(*uintptr)(unsafe.Pointer(_f + 8)) = *(*uintptr)(unsafe.Pointer(_f + 88))
	*(*uintptr)(unsafe.Pointer(_f + 16)) = *(*uintptr)(unsafe.Pointer(_f + 88)) + uintptr(_k)
	*(*uintptr)(unsafe.Pointer(_f + 152)) = *(*uintptr)(unsafe.Pointer(_src))
	if _len != 0 && _k != 0 {
		goto _3
	}

	return uint64(0)

_3:
	*(*uint8)(unsafe.Pointer(_buf)) = *(*uint8)(unsafe.Pointer(postinc926((*uintptr)(unsafe.Pointer(_f + 8)))))
	return uint64(1)
}

type t118off_t = int64

type s143__locale_struct = struct{ Fcat [6]uintptr }

// linking vwprintf.o

// Xvwprintf is defined at vwprintf.c:4:5
func Xvwprintf(tls TLS, _fmt uintptr /* *Twchar_t = int32 */, _ap uintptr) (r int32) {
	return Xvfwprintf(tls, *(*uintptr)(unsafe.Pointer(Xstdout)), _fmt, _ap)
}

type t926__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t926__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// linking vwscanf.o

// Xvwscanf is defined at vwscanf.c:6:5
func Xvwscanf(tls TLS, _fmt uintptr /* *Twchar_t = int32 */, _ap uintptr) (r int32) {
	return Xvfwscanf(tls, *(*uintptr)(unsafe.Pointer(Xstdin)), _fmt, _ap)
}

type t927__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t927__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// linking wprintf.o

// Xwprintf is defined at wprintf.c:5:5
func Xwprintf(tls TLS, _fmt uintptr /* *Twchar_t = int32 */, ap ...interface{}) (r int32) {
	var (
		_ret int32
		_ap  uintptr // Tva_list = T__builtin_va_list = ...truct{Fsize int32;Fdata int8;};}
	)
	_ap = X__builtin_va_start(tls, ap)
	_ret = Xvwprintf(tls, _fmt, _ap)
	X__builtin_free(tls, _ap)
	return _ret
}

type t928__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t928__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// linking wscanf.o

// Xwscanf is defined at wscanf.c:6:5
func Xwscanf(tls TLS, _fmt uintptr /* *Twchar_t = int32 */, ap ...interface{}) (r int32) {
	var (
		_ret int32
		_ap  uintptr // Tva_list = T__builtin_va_list = ...truct{Fsize int32;Fdata int8;};}
	)
	_ap = X__builtin_va_start(tls, ap)
	_ret = Xvwscanf(tls, _fmt, _ap)
	X__builtin_free(tls, _ap)
	return _ret
}

type t929__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t929__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// linking abs.o

// Xabs is defined at abs.c:4:5
func Xabs(tls TLS, _a int32) (r int32) {
	if _a > int32(0) {
		return _a
	}

	return -_a
}

type t930__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t930__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// linking atof.o

// Xatof is defined at atof.c:3:8
func Xatof(tls TLS, _s uintptr /* *int8 */) (r float64) {
	return Xstrtod(tls, _s, null)
}

type t931__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t931__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// linking atoi.o

func postinc927(p *uintptr) uintptr { r := *p; *p += 1; return r }

// Xatoi is defined at atoi.c:4:5
func Xatoi(tls TLS, _s uintptr /* *int8 */) (r int32) {
	var (
		_n   int32
		_neg int32
	)
	_n = int32(0)
	_neg = int32(0)
_1:
	if x6__isspace(tls, int32(*(*int8)(unsafe.Pointer(_s)))) == 0 {
		goto _2
	}

	_s++
	goto _1

_2:
	switch int32(*(*int8)(unsafe.Pointer(_s))) {
	case int32('-'):
		goto _4
	case int32('+'):
		goto _5
	}
	goto _3

_4:
	_neg = int32(1)
_5:
	_s++
_3:
_6:
	if uint32(*(*int8)(unsafe.Pointer(_s)))-uint32('0') >= uint32(10) {
		goto _7
	}

	_n = int32(10)*_n - (int32(*(*int8)(unsafe.Pointer(postinc927(&_s)))) - int32('0'))
	goto _6

_7:
	if _neg != 0 {
		return _n
	}

	return -_n
}

type t932__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t932__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// x__isspace is defined at ctype.h:26:21
func x6__isspace(tls TLS, __c int32) (r int32) {
	return bool2int((__c == int32(' ')) || (uint32(__c)-uint32('\t') < uint32(5)))
}

// linking atol.o

func postinc928(p *uintptr) uintptr { r := *p; *p += 1; return r }

// Xatol is defined at atol.c:4:6
func Xatol(tls TLS, _s uintptr /* *int8 */) (r int64) {
	var (
		_n   int64
		_neg int32
	)
	_n = int64(0)
	_neg = int32(0)
_1:
	if x7__isspace(tls, int32(*(*int8)(unsafe.Pointer(_s)))) == 0 {
		goto _2
	}

	_s++
	goto _1

_2:
	switch int32(*(*int8)(unsafe.Pointer(_s))) {
	case int32('-'):
		goto _4
	case int32('+'):
		goto _5
	}
	goto _3

_4:
	_neg = int32(1)
_5:
	_s++
_3:
_6:
	if uint32(*(*int8)(unsafe.Pointer(_s)))-uint32('0') >= uint32(10) {
		goto _7
	}

	_n = int64(10)*_n - int64(int32(*(*int8)(unsafe.Pointer(postinc928(&_s))))-int32('0'))
	goto _6

_7:
	if _neg != 0 {
		return _n
	}

	return -_n
}

type t933__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t933__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// x__isspace is defined at ctype.h:26:21
func x7__isspace(tls TLS, __c int32) (r int32) {
	return bool2int((__c == int32(' ')) || (uint32(__c)-uint32('\t') < uint32(5)))
}

// linking atoll.o

func postinc929(p *uintptr) uintptr { r := *p; *p += 1; return r }

// Xatoll is defined at atoll.c:4:11
func Xatoll(tls TLS, _s uintptr /* *int8 */) (r int64) {
	var (
		_n   int64
		_neg int32
	)
	_n = int64(0)
	_neg = int32(0)
_1:
	if x8__isspace(tls, int32(*(*int8)(unsafe.Pointer(_s)))) == 0 {
		goto _2
	}

	_s++
	goto _1

_2:
	switch int32(*(*int8)(unsafe.Pointer(_s))) {
	case int32('-'):
		goto _4
	case int32('+'):
		goto _5
	}
	goto _3

_4:
	_neg = int32(1)
_5:
	_s++
_3:
_6:
	if uint32(*(*int8)(unsafe.Pointer(_s)))-uint32('0') >= uint32(10) {
		goto _7
	}

	_n = int64(10)*_n - int64(int32(*(*int8)(unsafe.Pointer(postinc929(&_s))))-int32('0'))
	goto _6

_7:
	if _neg != 0 {
		return _n
	}

	return -_n
}

type t934__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t934__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// x__isspace is defined at ctype.h:26:21
func x8__isspace(tls TLS, __c int32) (r int32) {
	return bool2int((__c == int32(' ')) || (uint32(__c)-uint32('\t') < uint32(5)))
}

// linking bsearch.o

func fn930(p uintptr) func(TLS, uintptr, uintptr) int32 {
	return *(*func(TLS, uintptr, uintptr) int32)(unsafe.Pointer(&p))
}

// Xbsearch is defined at bsearch.c:3:6
func Xbsearch(tls TLS, _key uintptr /* *void */, _base uintptr /* *void */, _nel uint64, _width uint64, _cmp uintptr /* *func(TLS, uintptr, uintptr) int32 */) (r uintptr /* *void */) {
	var (
		_try  uintptr // *void
		_sign int32
	)
_1:
	if _nel <= uint64(0) {
		goto _2
	}

	_try = _base + uintptr(_width*(_nel/uint64(2)))
	_sign = fn930(_cmp)(tls, _key, _try)
	if _sign != 0 {
		goto _3
	}

	return _try

	goto _4

_3:
	if _nel != uint64(1) {
		goto _5
	}

	goto _2

	goto _6

_5:
	if _sign >= int32(0) {
		goto _7
	}

	_nel = _nel / uint64(2)
	goto _8

_7:
	_base = _try
	_nel = _nel - _nel/uint64(2)
_8:
_6:
_4:
	goto _1

_2:
	return null
}

type t935__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t935__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t285size_t = uint64

// linking div.o

// Xdiv is defined at div.c:3:7
func Xdiv(tls TLS, _num int32, _den int32) (r struct {
	Fquot int32
	Frem  int32
}) {
	var _unnamed1 struct {
		Fquot int32
		Frem  int32
	}
	_ = _unnamed1
	return struct {
		Fquot int32
		Frem  int32
	}{
		Fquot: _num / _den,
		Frem:  _num % _den,
	}
}

type t936__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t936__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type Tdiv_t = struct {
	Fquot int32
	Frem  int32
}

// linking ecvt.o

func set931(p *int32, v int32) int32 { *p = v; return v }

func postinc932(p *int32) int32 { r := *p; *p += 1; return r }

// Xecvt is defined at ecvt.c:5:6
func Xecvt(tls TLS, _x float64, _n int32, _dp uintptr /* *int32 */, _sign uintptr /* *int32 */) (r uintptr /* *int8 */) {
	esc := MustMalloc(32)
	var (
		_tmp = esc // *[32]int8
		_i   int32
		_j   int32
	)
	defer Free(esc)
	if uint32(_n)-uint32(1) <= uint32(15) {
		goto _1
	}

	_n = int32(15)
_1:
	Xsprintf(tls, _tmp, ts+4788 /* "%.*e" */, _n-int32(1), _x)
	_i = set931((*int32)(unsafe.Pointer(_sign)), bool2int(int32(*(*int8)(unsafe.Pointer(_tmp))) == int32('-')))
	_j = int32(0)
_2:
	if int32(*(*int8)(unsafe.Pointer(_tmp + uintptr(_i)))) == int32('e') {
		goto _4
	}

	*(*int8)(unsafe.Pointer(x933buf + uintptr(_j))) = *(*int8)(unsafe.Pointer(_tmp + uintptr(_i)))
	_j = _j + bool2int(int32(*(*int8)(unsafe.Pointer(_tmp + uintptr(postinc932(&_i))))) != int32('.'))
	goto _2

_4:
	*(*int8)(unsafe.Pointer(x933buf + uintptr(_j))) = int8(0)
	*(*int32)(unsafe.Pointer(_dp)) = Xatoi(tls, (_tmp+uintptr(_i))+uintptr(1)) + int32(1)
	return x933buf
}

type t937__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t937__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// x1buf [16]int8, escapes: true, ecvt.c:7:14
var x933buf = bss + 6760

// linking fcvt.o

// Xfcvt is defined at fcvt.c:6:6
func Xfcvt(tls TLS, _x float64, _n int32, _dp uintptr /* *int32 */, _sign uintptr /* *int32 */) (r uintptr /* *int8 */) {
	esc := MustMalloc(1500)
	var (
		_tmp = esc // *[1500]int8
		_i   int32
		_lz  int32
	)
	defer Free(esc)
	if uint32(_n) <= uint32(1400) {
		goto _1
	}

	_n = int32(1400)
_1:
	Xsprintf(tls, _tmp, ts+4796 /* "%.*f" */, _n, _x)
	_i = bool2int(int32(*(*int8)(unsafe.Pointer(_tmp))) == int32('-'))
	if int32(*(*int8)(unsafe.Pointer(_tmp + uintptr(_i)))) != int32('0') {
		goto _2
	}

	_lz = int32(Xstrspn(tls, (_tmp+uintptr(_i))+uintptr(2), ts+4760 /* "0" */))
	goto _3

_2:
	_lz = -int32(Xstrcspn(tls, _tmp+uintptr(_i), ts+1868 /* "." */))
_3:
	if _n > _lz {
		goto _4
	}

	*(*int32)(unsafe.Pointer(_sign)) = _i
	*(*int32)(unsafe.Pointer(_dp)) = int32(1)
	if uint32(_n) <= uint32(14) {
		goto _5
	}

	_n = int32(14)
_5:
	return (ts + 4804 /* "000000000000000" */ + uintptr(14)) - uintptr(_n)

_4:
	return Xecvt(tls, _x, _n-_lz, _dp, _sign)
}

type t938__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t938__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t286size_t = uint64

// linking gcvt.o

// Xgcvt is defined at gcvt.c:5:6
func Xgcvt(tls TLS, _x float64, _n int32, _b uintptr /* *int8 */) (r uintptr /* *int8 */) {
	Xsprintf(tls, _b, ts+4820 /* "%.*g" */, _n, _x)
	return _b
}

type t939__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t939__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// linking imaxabs.o

// Ximaxabs is defined at imaxabs.c:3:10
func Ximaxabs(tls TLS, _a int64) (r int64) {
	if _a > int64(0) {
		return _a
	}

	return -_a
}

type t940__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t940__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type Tintmax_t = int64

// linking imaxdiv.o

// Ximaxdiv is defined at imaxdiv.c:3:11
func Ximaxdiv(tls TLS, _num int64, _den int64) (r struct {
	Fquot int64
	Frem  int64
}) {
	var _unnamed1 struct {
		Fquot int64
		Frem  int64
	}
	_ = _unnamed1
	return struct {
		Fquot int64
		Frem  int64
	}{
		Fquot: _num / _den,
		Frem:  _num % _den,
	}
}

type t941__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t941__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t1intmax_t = int64

type Timaxdiv_t = struct {
	Fquot int64
	Frem  int64
}

// linking labs.o

// Xlabs is defined at labs.c:3:6
func Xlabs(tls TLS, _a int64) (r int64) {
	if _a > int64(0) {
		return _a
	}

	return -_a
}

type t942__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t942__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// linking ldiv.o

// Xldiv is defined at ldiv.c:3:8
func Xldiv(tls TLS, _num int64, _den int64) (r struct {
	Fquot int64
	Frem  int64
}) {
	var _unnamed1 struct {
		Fquot int64
		Frem  int64
	}
	_ = _unnamed1
	return struct {
		Fquot int64
		Frem  int64
	}{
		Fquot: _num / _den,
		Frem:  _num % _den,
	}
}

type t943__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t943__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type Tldiv_t = struct {
	Fquot int64
	Frem  int64
}

// linking llabs.o

// Xllabs is defined at llabs.c:3:11
func Xllabs(tls TLS, _a int64) (r int64) {
	if _a > int64(0) {
		return _a
	}

	return -_a
}

type t944__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t944__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// linking lldiv.o

// Xlldiv is defined at lldiv.c:3:9
func Xlldiv(tls TLS, _num int64, _den int64) (r struct {
	Fquot int64
	Frem  int64
}) {
	var _unnamed1 struct {
		Fquot int64
		Frem  int64
	}
	_ = _unnamed1
	return struct {
		Fquot int64
		Frem  int64
	}{
		Fquot: _num / _den,
		Frem:  _num % _den,
	}
}

type t945__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t945__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type Tlldiv_t = struct {
	Fquot int64
	Frem  int64
}

// linking qsort.o

func set934(p *uint64, v uint64) uint64 { *p = v; return v }

// Xqsort is defined at qsort.c:157:6
func Xqsort(tls TLS, _base uintptr /* *void */, _nel uint64, _width uint64, _cmp uintptr /* Tcmpfun = *func(TLS, uintptr, uintptr) int32 */) {
	esc := MustMalloc(784)
	var (
		_lp     = esc // *[96]uint64
		_i      uint64
		_size   uint64
		_head   uintptr     // *uint8
		_high   uintptr     // *uint8
		_p      = esc + 768 // *[2]uint64
		_pshift int32
		_trail  int32
	)
	defer Free(esc)
	_size = _width * _nel
	Copy(_p, ts+4828 /* "\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00" */, 16)
	_pshift = int32(1)
	if _size != 0 {
		goto _1
	}

	return

_1:
	_head = _base
	_high = (_head + uintptr(_size)) - uintptr(_width)
	*(*uint64)(unsafe.Pointer(_lp)) = set934((*uint64)(unsafe.Pointer(_lp+8)), _width)
	_i = uint64(2)
_2:
	if set934((*uint64)(unsafe.Pointer(_lp+8*uintptr(_i))), *(*uint64)(unsafe.Pointer(_lp + 8*uintptr(_i-uint64(2))))+*(*uint64)(unsafe.Pointer(_lp + 8*uintptr(_i-uint64(1))))+_width) >= _size {
		goto _4
	}

	_i++
	goto _2

_4:
_5:
	if _head >= _high {
		goto _6
	}

	if *(*uint64)(unsafe.Pointer(_p))&uint64(3) != uint64(3) {
		goto _7
	}

	xsift(tls, _head, _width, _cmp, _pshift, _lp)
	xshr(tls, _p, int32(2))
	_pshift = _pshift + int32(2)
	goto _8

_7:
	if *(*uint64)(unsafe.Pointer(_lp + 8*uintptr(_pshift-int32(1)))) < uint64(int64(_high-_head)) {
		goto _9
	}

	xtrinkle(tls, _head, _width, _cmp, _p, _pshift, int32(0), _lp)
	goto _10

_9:
	xsift(tls, _head, _width, _cmp, _pshift, _lp)
_10:
	if _pshift != int32(1) {
		goto _11
	}

	xshl(tls, _p, int32(1))
	_pshift = int32(0)
	goto _12

_11:
	xshl(tls, _p, _pshift-int32(1))
	_pshift = int32(1)
_12:
_8:
	{
		p := (*uint64)(unsafe.Pointer(_p))
		*p = *p | uint64(1)
	}
	_head += uintptr(_width)
	goto _5

_6:
	xtrinkle(tls, _head, _width, _cmp, _p, _pshift, int32(0), _lp)
_13:
	if _pshift == int32(1) && *(*uint64)(unsafe.Pointer(_p)) == uint64(1) && *(*uint64)(unsafe.Pointer(_p + 8)) == uint64(0) {
		goto _14
	}

	if _pshift > int32(1) {
		goto _15
	}

	_trail = xpntz(tls, _p)
	xshr(tls, _p, _trail)
	_pshift = _pshift + _trail
	goto _16

_15:
	xshl(tls, _p, int32(2))
	_pshift = _pshift - int32(2)
	{
		p := (*uint64)(unsafe.Pointer(_p))
		*p = *p ^ uint64(7)
	}
	xshr(tls, _p, int32(1))
	xtrinkle(tls, (_head-uintptr(*(*uint64)(unsafe.Pointer(_lp + 8*uintptr(_pshift)))))-uintptr(_width), _width, _cmp, _p, _pshift+int32(1), int32(1), _lp)
	xshl(tls, _p, int32(1))
	{
		p := (*uint64)(unsafe.Pointer(_p))
		*p = *p | uint64(1)
	}
	xtrinkle(tls, _head-uintptr(_width), _width, _cmp, _p, _pshift, int32(1), _lp)
_16:
	_head -= uintptr(_width)
	goto _13

_14:
}

type t946__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t946__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t287size_t = uint64

func fn935(p uintptr) func(TLS, uintptr, uintptr) int32 {
	return *(*func(TLS, uintptr, uintptr) int32)(unsafe.Pointer(&p))
}

func postinc936(p *int32) int32 { r := *p; *p += 1; return r }

// xsift is defined at qsort.c:91:13
func xsift(tls TLS, _head uintptr /* *uint8 */, _width uint64, _cmp uintptr /* Tcmpfun = *func(TLS, uintptr, uintptr) int32 */, _pshift int32, _lp uintptr /* uintptr */) {
	esc := MustMalloc(904)
	var (
		_rt uintptr // *uint8
		_lf uintptr // *uint8
		_ar = esc   // *[113]*uint8
		_i  int32
	)
	defer Free(esc)
	_i = int32(1)
	*(*uintptr)(unsafe.Pointer(_ar)) = _head
_1:
	if _pshift <= int32(1) {
		goto _2
	}

	_rt = _head - uintptr(_width)
	_lf = (_head - uintptr(_width)) - uintptr(*(*uint64)(unsafe.Pointer(_lp + 8*uintptr(_pshift-int32(2)))))
	if fn935(_cmp)(tls, *(*uintptr)(unsafe.Pointer(_ar)), _lf) < int32(0) || fn935(_cmp)(tls, *(*uintptr)(unsafe.Pointer(_ar)), _rt) < int32(0) {
		goto _3
	}

	goto _2

_3:
	if fn935(_cmp)(tls, _lf, _rt) < int32(0) {
		goto _4
	}

	*(*uintptr)(unsafe.Pointer(_ar + 8*uintptr(postinc936(&_i)))) = _lf
	_head = _lf
	_pshift = _pshift - int32(1)
	goto _5

_4:
	*(*uintptr)(unsafe.Pointer(_ar + 8*uintptr(postinc936(&_i)))) = _rt
	_head = _rt
	_pshift = _pshift - int32(2)
_5:
	goto _1

_2:
	xcycle(tls, _width, _ar, _i)
}

// xshr is defined at qsort.c:79:20
func xshr(tls TLS, _p uintptr /* [2]uint64 */, _n int32) {
	if uint64(_n) < uint64(64) {
		goto _1
	}

	_n = int32(uint64(_n) - uint64(64))
	*(*uint64)(unsafe.Pointer(_p)) = *(*uint64)(unsafe.Pointer(_p + 8))
	*(*uint64)(unsafe.Pointer(_p + 8)) = uint64(0)
_1:
	{
		p := (*uint64)(unsafe.Pointer(_p))
		*p = *p >> uint32(_n)
	}
	{
		p := (*uint64)(unsafe.Pointer(_p))
		*p = *p | *(*uint64)(unsafe.Pointer(_p + 8))<<(uint(uint64(64)-uint64(_n))%64)
	}
	{
		p := (*uint64)(unsafe.Pointer(_p + 8))
		*p = *p >> uint32(_n)
	}
}

// xtrinkle is defined at qsort.c:118:13
func xtrinkle(tls TLS, _head uintptr /* *uint8 */, _width uint64, _cmp uintptr /* Tcmpfun = *func(TLS, uintptr, uintptr) int32 */, _pp uintptr /* [2]uint64 */, _pshift int32, _trusty int32, _lp uintptr /* uintptr */) {
	esc := MustMalloc(920)
	var (
		_stepson uintptr    // *uint8
		_rt      uintptr    // *uint8
		_lf      uintptr    // *uint8
		_p       = esc      // *[2]uint64
		_ar      = esc + 16 // *[113]*uint8
		_i       int32
		_trail   int32
	)
	defer Free(esc)
	_i = int32(1)
	*(*uint64)(unsafe.Pointer(_p)) = *(*uint64)(unsafe.Pointer(_pp))
	*(*uint64)(unsafe.Pointer(_p + 8)) = *(*uint64)(unsafe.Pointer(_pp + 8))
	*(*uintptr)(unsafe.Pointer(_ar)) = _head
_1:
	if *(*uint64)(unsafe.Pointer(_p)) == uint64(1) && *(*uint64)(unsafe.Pointer(_p + 8)) == uint64(0) {
		goto _2
	}

	_stepson = _head - uintptr(*(*uint64)(unsafe.Pointer(_lp + 8*uintptr(_pshift))))
	if fn935(_cmp)(tls, _stepson, *(*uintptr)(unsafe.Pointer(_ar))) > int32(0) {
		goto _3
	}

	goto _2

_3:
	if _trusty != 0 || _pshift <= int32(1) {
		goto _4
	}

	_rt = _head - uintptr(_width)
	_lf = (_head - uintptr(_width)) - uintptr(*(*uint64)(unsafe.Pointer(_lp + 8*uintptr(_pshift-int32(2)))))
	if fn935(_cmp)(tls, _rt, _stepson) < int32(0) && fn935(_cmp)(tls, _lf, _stepson) < int32(0) {
		goto _5
	}

	goto _2

_5:
_4:
	*(*uintptr)(unsafe.Pointer(_ar + 8*uintptr(postinc936(&_i)))) = _stepson
	_head = _stepson
	_trail = xpntz(tls, _p)
	xshr(tls, _p, _trail)
	_pshift = _pshift + _trail
	_trusty = int32(0)
	goto _1

_2:
	if _trusty != 0 {
		goto _6
	}

	xcycle(tls, _width, _ar, _i)
	xsift(tls, _head, _width, _cmp, _pshift, _lp)
_6:
}

// xshl is defined at qsort.c:67:20
func xshl(tls TLS, _p uintptr /* [2]uint64 */, _n int32) {
	if uint64(_n) < uint64(64) {
		goto _1
	}

	_n = int32(uint64(_n) - uint64(64))
	*(*uint64)(unsafe.Pointer(_p + 8)) = *(*uint64)(unsafe.Pointer(_p))
	*(*uint64)(unsafe.Pointer(_p)) = uint64(0)
_1:
	{
		p := (*uint64)(unsafe.Pointer(_p + 8))
		*p = *p << uint32(_n)
	}
	{
		p := (*uint64)(unsafe.Pointer(_p + 8))
		*p = *p | *(*uint64)(unsafe.Pointer(_p))>>(uint(uint64(64)-uint64(_n))%64)
	}
	{
		p := (*uint64)(unsafe.Pointer(_p))
		*p = *p << uint32(_n)
	}
}

func set937(p *int32, v int32) int32 { *p = v; return v }

// xpntz is defined at qsort.c:36:19
func xpntz(tls TLS, _p uintptr /* [2]uint64 */) (r int32) {
	var _r int32

	_r = x2a_ctz_l(tls, *(*uint64)(unsafe.Pointer(_p))-uint64(1))
	if _r == int32(0) && uint64(set937(&_r, int32(uint64(64)+uint64(x2a_ctz_l(tls, *(*uint64)(unsafe.Pointer(_p + 8))))))) == uint64(64) {
		goto _1
	}

	return _r

_1:
	return int32(0)
}

// xcycle is defined at qsort.c:44:13
func xcycle(tls TLS, _width uint64, _ar uintptr /* uintptr */, _n int32) {
	esc := MustMalloc(256)
	var (
		_tmp = esc // *[256]uint8
		_l   uint64
		_i   int32
	)
	defer Free(esc)
	if _n >= int32(2) {
		goto _1
	}

	return

_1:
	*(*uintptr)(unsafe.Pointer(_ar + 8*uintptr(_n))) = _tmp
_2:
	if _width == 0 {
		goto _3
	}

	_l = func() uint64 {
		if uint64(256) < _width {
			return uint64(256)
		}
		return _width
	}()
	Xmemcpy(tls, *(*uintptr)(unsafe.Pointer(_ar + 8*uintptr(_n))), *(*uintptr)(unsafe.Pointer(_ar)), _l)
	_i = int32(0)
_4:
	if _i >= _n {
		goto _6
	}

	Xmemcpy(tls, *(*uintptr)(unsafe.Pointer(_ar + 8*uintptr(_i))), *(*uintptr)(unsafe.Pointer(_ar + 8*uintptr(_i+int32(1)))), _l)
	*(*uintptr)(unsafe.Pointer(_ar + 8*uintptr(_i))) += uintptr(_l)
	_i++
	goto _4

_6:
	_width = _width - _l
	goto _2

_3:
}

// xa_ctz_l is defined at atomic.h:292:19
func x2a_ctz_l(tls TLS, _x uint64) (r int32) {
	return x3a_ctz_64(tls, _x)
}

// xa_ctz_64 is defined at atomic_arch.h:128:19
func x3a_ctz_64(tls TLS, _x uint64) (r int32) {
	for ; r < 64 && _x&(1<<uint(r)) == 0; r++ {
	}
	return r
	return r
}

// linking strtod.o

// Xstrtof is defined at strtod.c:20:7
func Xstrtof(tls TLS, _s uintptr /* *int8 */, _p uintptr /* **int8 */) (r float32) {
	return float32(xstrtox(tls, _s, _p, int32(0)))
}

// Xstrtod is defined at strtod.c:25:8
func Xstrtod(tls TLS, _s uintptr /* *int8 */, _p uintptr /* **int8 */) (r float64) {
	return xstrtox(tls, _s, _p, int32(1))
}

// Xstrtold is defined at strtod.c:30:13
func Xstrtold(tls TLS, _s uintptr /* *int8 */, _p uintptr /* **int8 */) (r float64) {
	return xstrtox(tls, _s, _p, int32(2))
}

type t947__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t947__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// xstrtox is defined at strtod.c:7:20
func xstrtox(tls TLS, _s uintptr /* *int8 */, _p uintptr /* **int8 */, _prec int32) (r float64) {
	esc := MustMalloc(232)
	var (
		_f   = esc // *TFILE = S_IO_FILE
		_y   float64
		_cnt int64
	)
	defer Free(esc)
	*(*s111_IO_FILE)(unsafe.Pointer(_f)) = s111_IO_FILE{
		Fbuf:  _s,
		Frpos: _s,
		Frend: uintptr(18446744073709551615),
		Flock: int32(-1),
	}
	X__shlim(tls, _f, int64(0))
	_y = X__floatscan(tls, _f, _prec, int32(1))
	_cnt = *(*int64)(unsafe.Pointer(_f + 200)) + int64(*(*uintptr)(unsafe.Pointer(_f + 8))-*(*uintptr)(unsafe.Pointer(_f + 16)))
	if _p == 0 {
		goto _1
	}

	*(*uintptr)(unsafe.Pointer(_p)) = func() uintptr {
		if _cnt != 0 {
			return _s + uintptr(_cnt)
		}
		return _s
	}()
_1:
	return _y
}

type s111_IO_FILE = struct {
	Fflags        uint32
	Frpos         uintptr // *uint8
	Frend         uintptr // *uint8
	Fclose        uintptr // *func(TLS, uintptr) int32
	Fwend         uintptr // *uint8
	Fwpos         uintptr // *uint8
	Fmustbezero_1 uintptr // *uint8
	Fwbase        uintptr // *uint8
	Fread         uintptr // *func(TLS, uintptr, uintptr, uint64) uint64
	Fwrite        uintptr // *func(TLS, uintptr, uintptr, uint64) uint64
	Fseek         uintptr // *func(TLS, uintptr, int64, int32) int64
	Fbuf          uintptr // *uint8
	Fbuf_size     uint64
	Fprev         uintptr // *TFILE = S_IO_FILE
	Fnext         uintptr // *TFILE = S_IO_FILE
	Ffd           int32
	Fpipe_pid     int32
	Flockcount    int64
	Fdummy3       int16
	Fmode         int8
	Flbf          int8
	Flock         int32
	Fwaiters      int32
	Fcookie       uintptr // *void
	Foff          int64
	Fgetln_buf    uintptr // *int8
	Fmustbezero_2 uintptr // *void
	Fshend        uintptr // *uint8
	Fshlim        int64
	Fshcnt        int64
	Fprev_locked  uintptr // *TFILE = S_IO_FILE
	Fnext_locked  uintptr // *TFILE = S_IO_FILE
	Flocale       uintptr // *S__locale_struct
}

type t119off_t = int64

type t12FILE = s111_IO_FILE

type t288size_t = uint64

type s144__locale_struct = struct{ Fcat [6]uintptr }

// linking strtol.o

// Xstrtoull is defined at strtol.c:29:20
func Xstrtoull(tls TLS, _s uintptr /* *int8 */, _p uintptr /* **int8 */, _base int32) (r uint64) {
	return x1strtox(tls, _s, _p, _base, uint64(18446744073709551615))
}

// Xstrtoll is defined at strtol.c:34:11
func Xstrtoll(tls TLS, _s uintptr /* *int8 */, _p uintptr /* **int8 */, _base int32) (r int64) {
	return int64(x1strtox(tls, _s, _p, _base, uint64(9223372036854775808)))
}

// Xstrtoul is defined at strtol.c:39:15
func Xstrtoul(tls TLS, _s uintptr /* *int8 */, _p uintptr /* **int8 */, _base int32) (r uint64) {
	return x1strtox(tls, _s, _p, _base, uint64(18446744073709551615))
}

// Xstrtol is defined at strtol.c:44:6
func Xstrtol(tls TLS, _s uintptr /* *int8 */, _p uintptr /* **int8 */, _base int32) (r int64) {
	return int64(x1strtox(tls, _s, _p, _base, uint64(9223372036854775808)))
}

// Xstrtoimax is defined at strtol.c:49:10
func Xstrtoimax(tls TLS, _s uintptr /* *int8 */, _p uintptr /* **int8 */, _base int32) (r int64) {
	return Xstrtoll(tls, _s, _p, _base)
}

// Xstrtoumax is defined at strtol.c:54:11
func Xstrtoumax(tls TLS, _s uintptr /* *int8 */, _p uintptr /* **int8 */, _base int32) (r uint64) {
	return Xstrtoull(tls, _s, _p, _base)
}

type t948__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t948__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

func set938(p *uintptr, v uintptr) uintptr { *p = v; return v }

// xstrtox is defined at strtol.c:9:27
func x1strtox(tls TLS, _s uintptr /* *int8 */, _p uintptr /* **int8 */, _base int32, _lim uint64) (r uint64) {
	esc := MustMalloc(232)
	var (
		_f   = esc // *TFILE = S_IO_FILE
		_y   uint64
		_cnt uint64
	)
	defer Free(esc)
	*(*uint32)(unsafe.Pointer(_f)) = uint32(0)
	*(*uintptr)(unsafe.Pointer(_f + 88)) = set938((*uintptr)(unsafe.Pointer(_f+8)), _s)
	if uint64(_s) <= uint64(9223372036854775807) {
		goto _1
	}

	*(*uintptr)(unsafe.Pointer(_f + 16)) = uintptr(18446744073709551615)
	goto _2

_1:
	*(*uintptr)(unsafe.Pointer(_f + 16)) = _s + uintptr(9223372036854775807)
_2:
	*(*int32)(unsafe.Pointer(_f + 140)) = int32(-1)
	X__shlim(tls, _f, int64(0))
	_y = X__intscan(tls, _f, uint32(_base), int32(1), _lim)
	if _p == 0 {
		goto _3
	}

	_cnt = uint64(*(*int64)(unsafe.Pointer(_f + 200)) + int64(*(*uintptr)(unsafe.Pointer(_f + 8))-*(*uintptr)(unsafe.Pointer(_f + 16))))
	*(*uintptr)(unsafe.Pointer(_p)) = _s + uintptr(_cnt)
_3:
	return _y
}

type t2intmax_t = int64

type t2uintmax_t = uint64

type s112_IO_FILE = struct {
	Fflags        uint32
	Frpos         uintptr // *uint8
	Frend         uintptr // *uint8
	Fclose        uintptr // *func(TLS, uintptr) int32
	Fwend         uintptr // *uint8
	Fwpos         uintptr // *uint8
	Fmustbezero_1 uintptr // *uint8
	Fwbase        uintptr // *uint8
	Fread         uintptr // *func(TLS, uintptr, uintptr, uint64) uint64
	Fwrite        uintptr // *func(TLS, uintptr, uintptr, uint64) uint64
	Fseek         uintptr // *func(TLS, uintptr, int64, int32) int64
	Fbuf          uintptr // *uint8
	Fbuf_size     uint64
	Fprev         uintptr // *TFILE = S_IO_FILE
	Fnext         uintptr // *TFILE = S_IO_FILE
	Ffd           int32
	Fpipe_pid     int32
	Flockcount    int64
	Fdummy3       int16
	Fmode         int8
	Flbf          int8
	Flock         int32
	Fwaiters      int32
	Fcookie       uintptr // *void
	Foff          int64
	Fgetln_buf    uintptr // *int8
	Fmustbezero_2 uintptr // *void
	Fshend        uintptr // *uint8
	Fshlim        int64
	Fshcnt        int64
	Fprev_locked  uintptr // *TFILE = S_IO_FILE
	Fnext_locked  uintptr // *TFILE = S_IO_FILE
	Flocale       uintptr // *S__locale_struct
}

type t289size_t = uint64

type t120off_t = int64

type s145__locale_struct = struct{ Fcat [6]uintptr }

// linking wcstod.o

// Xwcstof is defined at wcstod.c:52:7
func Xwcstof(tls TLS, _s uintptr /* *Twchar_t = int32 */, _p uintptr /* **Twchar_t = int32 */) (r float32) {
	return float32(xwcstox(tls, _s, _p, int32(0)))
}

// Xwcstod is defined at wcstod.c:57:8
func Xwcstod(tls TLS, _s uintptr /* *Twchar_t = int32 */, _p uintptr /* **Twchar_t = int32 */) (r float64) {
	return xwcstox(tls, _s, _p, int32(1))
}

// Xwcstold is defined at wcstod.c:62:13
func Xwcstold(tls TLS, _s uintptr /* *Twchar_t = int32 */, _p uintptr /* **Twchar_t = int32 */) (r float64) {
	return xwcstox(tls, _s, _p, int32(2))
}

type t949__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t949__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

func set939(p *uintptr, v uintptr) uintptr { *p = v; return v }

func fp940(f func(TLS, uintptr, uintptr, uint64) uint64) uintptr {
	return *(*uintptr)(unsafe.Pointer(&f))
}

// xwcstox is defined at wcstod.c:30:20
func xwcstox(tls TLS, _s uintptr /* *Twchar_t = int32 */, _p uintptr /* **Twchar_t = int32 */, _prec int32) (r float64) {
	esc := MustMalloc(296)
	var (
		_t   uintptr    // *Twchar_t = int32
		_buf = esc      // *[64]uint8
		_f   = esc + 64 // *TFILE = S_IO_FILE
		_y   float64
		_cnt uint64
	)
	defer Free(esc)
	_t = _s
	Copy(_f, ts+4848 /* "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00..." */, 232)
	*(*uint32)(unsafe.Pointer(_f)) = uint32(0)
	*(*uintptr)(unsafe.Pointer(_f + 8)) = set939((*uintptr)(unsafe.Pointer(_f+16)), null)
	*(*uintptr)(unsafe.Pointer(_f + 88)) = _buf + uintptr(4)
	*(*uint64)(unsafe.Pointer(_f + 96)) = uint64(60)
	*(*int32)(unsafe.Pointer(_f + 140)) = int32(-1)
	*(*uintptr)(unsafe.Pointer(_f + 64)) = fp940(x1do_read)
_1:
	if Xiswspace(tls, uint32(*(*int32)(unsafe.Pointer(_t)))) == 0 {
		goto _2
	}

	_t += 4
	goto _1

_2:
	*(*uintptr)(unsafe.Pointer(_f + 152)) = _t
	X__shlim(tls, _f, int64(0))
	_y = X__floatscan(tls, _f, _prec, int32(1))
	if _p == 0 {
		goto _3
	}

	_cnt = uint64(*(*int64)(unsafe.Pointer(_f + 200)) + int64(*(*uintptr)(unsafe.Pointer(_f + 8))-*(*uintptr)(unsafe.Pointer(_f + 16))))
	*(*uintptr)(unsafe.Pointer(_p)) = func() uintptr {
		if _cnt != 0 {
			return _t + 4*uintptr(_cnt)
		}
		return _s
	}()
_3:
	return _y
}

type s113_IO_FILE = struct {
	Fflags        uint32
	Frpos         uintptr // *uint8
	Frend         uintptr // *uint8
	Fclose        uintptr // *func(TLS, uintptr) int32
	Fwend         uintptr // *uint8
	Fwpos         uintptr // *uint8
	Fmustbezero_1 uintptr // *uint8
	Fwbase        uintptr // *uint8
	Fread         uintptr // *func(TLS, uintptr, uintptr, uint64) uint64
	Fwrite        uintptr // *func(TLS, uintptr, uintptr, uint64) uint64
	Fseek         uintptr // *func(TLS, uintptr, int64, int32) int64
	Fbuf          uintptr // *uint8
	Fbuf_size     uint64
	Fprev         uintptr // *TFILE = S_IO_FILE
	Fnext         uintptr // *TFILE = S_IO_FILE
	Ffd           int32
	Fpipe_pid     int32
	Flockcount    int64
	Fdummy3       int16
	Fmode         int8
	Flbf          int8
	Flock         int32
	Fwaiters      int32
	Fcookie       uintptr // *void
	Foff          int64
	Fgetln_buf    uintptr // *int8
	Fmustbezero_2 uintptr // *void
	Fshend        uintptr // *uint8
	Fshlim        int64
	Fshcnt        int64
	Fprev_locked  uintptr // *TFILE = S_IO_FILE
	Fnext_locked  uintptr // *TFILE = S_IO_FILE
	Flocale       uintptr // *S__locale_struct
}

type t290size_t = uint64

func postinc941(p *uintptr) uintptr { r := *p; *p += 1; return r }

// xdo_read is defined at wcstod.c:11:15
func x1do_read(tls TLS, _f uintptr /* *TFILE = S_IO_FILE */, _buf uintptr /* *uint8 */, _len uint64) (r uint64) {
	var (
		_i   uint64
		_wcs uintptr // *Twchar_t = int32
	)
	_wcs = *(*uintptr)(unsafe.Pointer(_f + 152))
	if *(*int32)(unsafe.Pointer(_wcs)) != 0 {
		goto _1
	}

	_wcs = ts + 5084
_1:
	_i = uint64(0)
_2:
	if _i >= *(*uint64)(unsafe.Pointer(_f + 96)) || *(*int32)(unsafe.Pointer(_wcs + 4*uintptr(_i))) == 0 {
		goto _4
	}

	*(*uint8)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_f + 88)) + uintptr(_i))) = uint8(func() int32 {
		if *(*int32)(unsafe.Pointer(_wcs + 4*uintptr(_i))) < int32(128) {
			return *(*int32)(unsafe.Pointer(_wcs + 4*uintptr(_i)))
		}
		return int32('@')
	}())
	_i++
	goto _2

_4:
	*(*uintptr)(unsafe.Pointer(_f + 8)) = *(*uintptr)(unsafe.Pointer(_f + 88))
	*(*uintptr)(unsafe.Pointer(_f + 16)) = *(*uintptr)(unsafe.Pointer(_f + 88)) + uintptr(_i)
	*(*uintptr)(unsafe.Pointer(_f + 152)) = _wcs + 4*uintptr(_i)
	if _i == 0 || _len == 0 {
		goto _5
	}

	*(*uint8)(unsafe.Pointer(_buf)) = *(*uint8)(unsafe.Pointer(postinc941((*uintptr)(unsafe.Pointer(_f + 8)))))
	return uint64(1)

_5:
	return uint64(0)
}

type t34wchar_t = int32

type t121off_t = int64

type s146__locale_struct = struct{ Fcat [6]uintptr }

type t29wint_t = uint32

// linking wcstol.o

// Xwcstoull is defined at wcstol.c:54:20
func Xwcstoull(tls TLS, _s uintptr /* *Twchar_t = int32 */, _p uintptr /* **Twchar_t = int32 */, _base int32) (r uint64) {
	return x1wcstox(tls, _s, _p, _base, uint64(18446744073709551615))
}

// Xwcstoll is defined at wcstol.c:59:11
func Xwcstoll(tls TLS, _s uintptr /* *Twchar_t = int32 */, _p uintptr /* **Twchar_t = int32 */, _base int32) (r int64) {
	return int64(x1wcstox(tls, _s, _p, _base, uint64(9223372036854775808)))
}

// Xwcstoul is defined at wcstol.c:64:15
func Xwcstoul(tls TLS, _s uintptr /* *Twchar_t = int32 */, _p uintptr /* **Twchar_t = int32 */, _base int32) (r uint64) {
	return x1wcstox(tls, _s, _p, _base, uint64(18446744073709551615))
}

// Xwcstol is defined at wcstol.c:69:6
func Xwcstol(tls TLS, _s uintptr /* *Twchar_t = int32 */, _p uintptr /* **Twchar_t = int32 */, _base int32) (r int64) {
	return int64(x1wcstox(tls, _s, _p, _base, uint64(9223372036854775808)))
}

// Xwcstoimax is defined at wcstol.c:74:10
func Xwcstoimax(tls TLS, _s uintptr /* *Twchar_t = int32 */, _p uintptr /* **Twchar_t = int32 */, _base int32) (r int64) {
	return Xwcstoll(tls, _s, _p, _base)
}

// Xwcstoumax is defined at wcstol.c:79:11
func Xwcstoumax(tls TLS, _s uintptr /* *Twchar_t = int32 */, _p uintptr /* **Twchar_t = int32 */, _base int32) (r uint64) {
	return Xwcstoull(tls, _s, _p, _base)
}

type t950__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t950__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

func set942(p *uintptr, v uintptr) uintptr { *p = v; return v }

func fp943(f func(TLS, uintptr, uintptr, uint64) uint64) uintptr {
	return *(*uintptr)(unsafe.Pointer(&f))
}

// xwcstox is defined at wcstol.c:32:27
func x1wcstox(tls TLS, _s uintptr /* *Twchar_t = int32 */, _p uintptr /* **Twchar_t = int32 */, _base int32, _lim uint64) (r uint64) {
	esc := MustMalloc(296)
	var (
		_t   uintptr    // *Twchar_t = int32
		_buf = esc      // *[64]uint8
		_f   = esc + 64 // *TFILE = S_IO_FILE
		_y   uint64
		_cnt uint64
	)
	defer Free(esc)
	_t = _s
	Copy(_f, ts+4848 /* "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00..." */, 232)
	*(*uint32)(unsafe.Pointer(_f)) = uint32(0)
	*(*uintptr)(unsafe.Pointer(_f + 8)) = set942((*uintptr)(unsafe.Pointer(_f+16)), null)
	*(*uintptr)(unsafe.Pointer(_f + 88)) = _buf + uintptr(4)
	*(*uint64)(unsafe.Pointer(_f + 96)) = uint64(60)
	*(*int32)(unsafe.Pointer(_f + 140)) = int32(-1)
	*(*uintptr)(unsafe.Pointer(_f + 64)) = fp943(x2do_read)
_1:
	if Xiswspace(tls, uint32(*(*int32)(unsafe.Pointer(_t)))) == 0 {
		goto _2
	}

	_t += 4
	goto _1

_2:
	*(*uintptr)(unsafe.Pointer(_f + 152)) = _t
	X__shlim(tls, _f, int64(0))
	_y = X__intscan(tls, _f, uint32(_base), int32(1), _lim)
	if _p == 0 {
		goto _3
	}

	_cnt = uint64(*(*int64)(unsafe.Pointer(_f + 200)) + int64(*(*uintptr)(unsafe.Pointer(_f + 8))-*(*uintptr)(unsafe.Pointer(_f + 16))))
	*(*uintptr)(unsafe.Pointer(_p)) = func() uintptr {
		if _cnt != 0 {
			return _t + 4*uintptr(_cnt)
		}
		return _s
	}()
_3:
	return _y
}

type t3intmax_t = int64

type t3uintmax_t = uint64

type s114_IO_FILE = struct {
	Fflags        uint32
	Frpos         uintptr // *uint8
	Frend         uintptr // *uint8
	Fclose        uintptr // *func(TLS, uintptr) int32
	Fwend         uintptr // *uint8
	Fwpos         uintptr // *uint8
	Fmustbezero_1 uintptr // *uint8
	Fwbase        uintptr // *uint8
	Fread         uintptr // *func(TLS, uintptr, uintptr, uint64) uint64
	Fwrite        uintptr // *func(TLS, uintptr, uintptr, uint64) uint64
	Fseek         uintptr // *func(TLS, uintptr, int64, int32) int64
	Fbuf          uintptr // *uint8
	Fbuf_size     uint64
	Fprev         uintptr // *TFILE = S_IO_FILE
	Fnext         uintptr // *TFILE = S_IO_FILE
	Ffd           int32
	Fpipe_pid     int32
	Flockcount    int64
	Fdummy3       int16
	Fmode         int8
	Flbf          int8
	Flock         int32
	Fwaiters      int32
	Fcookie       uintptr // *void
	Foff          int64
	Fgetln_buf    uintptr // *int8
	Fmustbezero_2 uintptr // *void
	Fshend        uintptr // *uint8
	Fshlim        int64
	Fshcnt        int64
	Fprev_locked  uintptr // *TFILE = S_IO_FILE
	Fnext_locked  uintptr // *TFILE = S_IO_FILE
	Flocale       uintptr // *S__locale_struct
}

type t291size_t = uint64

func postinc944(p *uintptr) uintptr { r := *p; *p += 1; return r }

// xdo_read is defined at wcstol.c:13:15
func x2do_read(tls TLS, _f uintptr /* *TFILE = S_IO_FILE */, _buf uintptr /* *uint8 */, _len uint64) (r uint64) {
	var (
		_i   uint64
		_wcs uintptr // *Twchar_t = int32
	)
	_wcs = *(*uintptr)(unsafe.Pointer(_f + 152))
	if *(*int32)(unsafe.Pointer(_wcs)) != 0 {
		goto _1
	}

	_wcs = ts + 5084
_1:
	_i = uint64(0)
_2:
	if _i >= *(*uint64)(unsafe.Pointer(_f + 96)) || *(*int32)(unsafe.Pointer(_wcs + 4*uintptr(_i))) == 0 {
		goto _4
	}

	*(*uint8)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_f + 88)) + uintptr(_i))) = uint8(func() int32 {
		if *(*int32)(unsafe.Pointer(_wcs + 4*uintptr(_i))) < int32(128) {
			return *(*int32)(unsafe.Pointer(_wcs + 4*uintptr(_i)))
		}
		return int32('@')
	}())
	_i++
	goto _2

_4:
	*(*uintptr)(unsafe.Pointer(_f + 8)) = *(*uintptr)(unsafe.Pointer(_f + 88))
	*(*uintptr)(unsafe.Pointer(_f + 16)) = *(*uintptr)(unsafe.Pointer(_f + 88)) + uintptr(_i)
	*(*uintptr)(unsafe.Pointer(_f + 152)) = _wcs + 4*uintptr(_i)
	if _i == 0 || _len == 0 {
		goto _5
	}

	*(*uint8)(unsafe.Pointer(_buf)) = *(*uint8)(unsafe.Pointer(postinc944((*uintptr)(unsafe.Pointer(_f + 8)))))
	return uint64(1)

_5:
	return uint64(0)
}

type t35wchar_t = int32

type t122off_t = int64

type s147__locale_struct = struct{ Fcat [6]uintptr }

type t30wint_t = uint32

// linking bcmp.o

// Xbcmp is defined at bcmp.c:5:5
func Xbcmp(tls TLS, _s1 uintptr /* *void */, _s2 uintptr /* *void */, _n uint64) (r int32) {
	return Xmemcmp(tls, _s1, _s2, _n)
}

type t951__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t951__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t292size_t = uint64

// linking bcopy.o

// Xbcopy is defined at bcopy.c:5:6
func Xbcopy(tls TLS, _s1 uintptr /* *void */, _s2 uintptr /* *void */, _n uint64) {
	Xmemmove(tls, _s2, _s1, _n)
}

type t952__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t952__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t293size_t = uint64

// linking bzero.o

// Xbzero is defined at bzero.c:5:6
func Xbzero(tls TLS, _s uintptr /* *void */, _n uint64) {
	Xmemset(tls, _s, int32(0), _n)
}

type t953__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t953__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t294size_t = uint64

// linking explicit_bzero.o

// Xexplicit_bzero is defined at explicit_bzero.c:5:6
func Xexplicit_bzero(tls TLS, _d uintptr /* *void */, _n uint64) {
	_d = Xmemset(tls, _d, int32(0), _n)
	X__assert_fail(tls, ts+0 /* "TODO(ccgo)" */, ts+5092 /* "src/string/expli..." */, int32(8), x945__func__)
}

type t954__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t954__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t295size_t = uint64

// x1__func__ [15]int8, escapes: true, explicit_bzero.c:6:1
var x945__func__ = ds + 45680

// linking index.o

// Xindex is defined at index.c:5:6
func Xindex(tls TLS, _s uintptr /* *int8 */, _c int32) (r uintptr /* *int8 */) {
	return Xstrchr(tls, _s, _c)
}

type t955__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t955__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// linking memccpy.o

func set946(p *uint8, v uint8) uint8 { *p = v; return v }

// Xmemccpy is defined at memccpy.c:10:6
func Xmemccpy(tls TLS, _dest uintptr /* *void */, _src uintptr /* *void */, _c int32, _n uint64) (r uintptr /* *void */) {
	var (
		_d  uintptr // *uint8
		_s  uintptr // *uint8
		_wd uintptr // *Tsize_t = uint64
		_k  uint64
		_ws uintptr // *Tsize_t = uint64
	)
	_d = _dest
	_s = _src
	_c = int32(uint8(_c))
	if uint64(_s)&uint64(7) != uint64(_d)&uint64(7) {
		goto _1
	}

_2:
	if uint64(_s)&uint64(7) == 0 || _n == 0 || int32(set946((*uint8)(unsafe.Pointer(_d)), *(*uint8)(unsafe.Pointer(_s)))) == _c {
		goto _4
	}

	_n--
	_s++
	_d++
	goto _2

_4:
	if (uint64(_s) & uint64(7)) == 0 {
		goto _5
	}

	goto ltail

_5:
	_k = uint64(72340172838076673) * uint64(_c)
	_wd = _d
	_ws = _s

_6:
	if _n < uint64(8) || (*(*uint64)(unsafe.Pointer(_ws))^_k-uint64(72340172838076673)) & ^(*(*uint64)(unsafe.Pointer(_ws))^_k) & uint64(9259542123273814144) != 0 {
		goto _8
	}

	*(*uint64)(unsafe.Pointer(_wd)) = *(*uint64)(unsafe.Pointer(_ws))
	_n = _n - uint64(8)
	_ws += 8
	_wd += 8
	goto _6

_8:
	_d = _wd
	_s = _ws
_1:
_9:
	if _n == 0 || int32(set946((*uint8)(unsafe.Pointer(_d)), *(*uint8)(unsafe.Pointer(_s)))) == _c {
		goto _11
	}

	_n--
	_s++
	_d++
	goto _9

_11:
	goto ltail
ltail:
	if int32(*(*uint8)(unsafe.Pointer(_s))) != _c {
		goto _12
	}

	return _d + uintptr(1)

_12:
	return null
}

type t956__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t956__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t296size_t = uint64

type t47uintptr_t = uint64

// linking memchr.o

// Xmemchr is defined at memchr.c:11:6
func Xmemchr(tls TLS, _src uintptr /* *void */, _c int32, _n uint64) (r uintptr /* *void */) {
	var (
		_s uintptr // *uint8
		_w uintptr // *Tsize_t = uint64
		_k uint64
	)
	_s = _src
	_c = int32(uint8(_c))

_1:
	if uint64(_s)&uint64(7) == 0 || _n == 0 || int32(*(*uint8)(unsafe.Pointer(_s))) == _c {
		goto _3
	}

	_s++
	_n--
	goto _1

_3:
	if _n == 0 || int32(*(*uint8)(unsafe.Pointer(_s))) == _c {
		goto _4
	}

	_k = uint64(72340172838076673) * uint64(_c)
	_w = _s
_5:
	if _n < uint64(8) || (*(*uint64)(unsafe.Pointer(_w))^_k-uint64(72340172838076673)) & ^(*(*uint64)(unsafe.Pointer(_w))^_k) & uint64(9259542123273814144) != 0 {
		goto _7
	}

	_w += 8
	_n = _n - uint64(8)
	goto _5

_7:
	_s = _w
_8:
	if _n == 0 || int32(*(*uint8)(unsafe.Pointer(_s))) == _c {
		goto _10
	}

	_s++
	_n--
	goto _8

_10:
_4:
	if _n != 0 {
		return _s
	}

	return null
}

type t957__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t957__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t297size_t = uint64

type t48uintptr_t = uint64

// linking memcmp.o

// Xmemcmp is defined at memcmp.c:4:5
func Xmemcmp(tls TLS, _vl uintptr /* *void */, _vr uintptr /* *void */, _n uint64) (r int32) {
	var (
		_l uintptr // *uint8
		_r uintptr // *uint8
	)
	_l = _vl
	_r = _vr

_1:
	if _n == 0 || int32(*(*uint8)(unsafe.Pointer(_l))) != int32(*(*uint8)(unsafe.Pointer(_r))) {
		goto _3
	}

	_n--
	_l++
	_r++
	goto _1

_3:
	if _n != 0 {
		return int32(*(*uint8)(unsafe.Pointer(_l))) - int32(*(*uint8)(unsafe.Pointer(_r)))
	}

	return int32(0)
}

type t958__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t958__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t298size_t = uint64

// linking memcpy.o

func postinc947(p *uintptr) uintptr { r := *p; *p += 1; return r }

// Xmemcpy is defined at memcpy.c:6:6
func Xmemcpy(tls TLS, _dest uintptr /* *void */, _src uintptr /* *void */, _n uint64) (r uintptr /* *void */) {
	var (
		_d uintptr // *uint8
		_s uintptr // *uint8
	)
	_d = _dest
	_s = _src

_1:
	if _n == 0 {
		goto _3
	}

	*(*uint8)(unsafe.Pointer(postinc947(&_d))) = *(*uint8)(unsafe.Pointer(postinc947(&_s)))
	_n--
	goto _1

_3:
	return _dest
}

type t959__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t959__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t299size_t = uint64

// linking memmem.o

// Xmemmem is defined at memmem.c:129:6
func Xmemmem(tls TLS, _h0 uintptr /* *void */, _k uint64, _n0 uintptr /* *void */, _l uint64) (r uintptr /* *void */) {
	var (
		_h uintptr // *uint8
		_n uintptr // *uint8
	)
	_h = _h0
	_n = _n0
	if _l != 0 {
		goto _1
	}

	return _h

_1:
	if _k >= _l {
		goto _2
	}

	return null

_2:
	_h = Xmemchr(tls, _h0, int32(*(*uint8)(unsafe.Pointer(_n))), _k)
	if _h != 0 && _l != uint64(1) {
		goto _3
	}

	return _h

_3:
	_k = _k - uint64(int64(_h-_h0))
	if _k >= _l {
		goto _4
	}

	return null

_4:
	if _l != uint64(2) {
		goto _5
	}

	return xtwobyte_memmem(tls, _h, _k, _n)

_5:
	if _l != uint64(3) {
		goto _6
	}

	return xthreebyte_memmem(tls, _h, _k, _n)

_6:
	if _l != uint64(4) {
		goto _7
	}

	return xfourbyte_memmem(tls, _h, _k, _n)

_7:
	return xtwoway_memmem(tls, _h, _h+uintptr(_k), _n, _l)
}

type t960__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t960__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t300size_t = uint64

func postinc948(p *uintptr) uintptr { r := *p; *p += 1; return r }

// xtwobyte_memmem is defined at memmem.c:5:13
func xtwobyte_memmem(tls TLS, _h uintptr /* *uint8 */, _k uint64, _n uintptr /* *uint8 */) (r uintptr /* *int8 */) {
	var (
		_nw uint16
		_hw uint16
	)
	_nw = uint16(int32(*(*uint8)(unsafe.Pointer(_n)))<<(uint(8)%32) | int32(*(*uint8)(unsafe.Pointer(_n + 1))))
	_hw = uint16(int32(*(*uint8)(unsafe.Pointer(_h)))<<(uint(8)%32) | int32(*(*uint8)(unsafe.Pointer(_h + 1))))
	_h += uintptr(2)
	_k = _k - uint64(2)
_1:
	if _k == 0 {
		goto _3
	}

	if int32(_hw) != int32(_nw) {
		goto _4
	}

	return _h - uintptr(2)

_4:
	_k--
	_hw = uint16(int32(_hw)<<(uint(8)%32) | int32(*(*uint8)(unsafe.Pointer(postinc948(&_h)))))
	goto _1

_3:
	if int32(_hw) == int32(_nw) {
		return _h - uintptr(2)
	}

	return null
}

// xthreebyte_memmem is defined at memmem.c:13:13
func xthreebyte_memmem(tls TLS, _h uintptr /* *uint8 */, _k uint64, _n uintptr /* *uint8 */) (r uintptr /* *int8 */) {
	var (
		_nw uint32
		_hw uint32
	)
	_nw = uint32(int32(*(*uint8)(unsafe.Pointer(_n)))<<(uint(24)%32) | int32(*(*uint8)(unsafe.Pointer(_n + 1)))<<(uint(16)%32) | int32(*(*uint8)(unsafe.Pointer(_n + 2)))<<(uint(8)%32))
	_hw = uint32(int32(*(*uint8)(unsafe.Pointer(_h)))<<(uint(24)%32) | int32(*(*uint8)(unsafe.Pointer(_h + 1)))<<(uint(16)%32) | int32(*(*uint8)(unsafe.Pointer(_h + 2)))<<(uint(8)%32))
	_h += uintptr(3)
	_k = _k - uint64(3)
_1:
	if _k == 0 {
		goto _3
	}

	if _hw != _nw {
		goto _4
	}

	return _h - uintptr(3)

_4:
	_k--
	_hw = (_hw | uint32(*(*uint8)(unsafe.Pointer(postinc948(&_h))))) << (uint(8) % 32)
	goto _1

_3:
	if _hw == _nw {
		return _h - uintptr(3)
	}

	return null
}

// xfourbyte_memmem is defined at memmem.c:22:13
func xfourbyte_memmem(tls TLS, _h uintptr /* *uint8 */, _k uint64, _n uintptr /* *uint8 */) (r uintptr /* *int8 */) {
	var (
		_nw uint32
		_hw uint32
	)
	_nw = uint32(int32(*(*uint8)(unsafe.Pointer(_n)))<<(uint(24)%32) | int32(*(*uint8)(unsafe.Pointer(_n + 1)))<<(uint(16)%32) | int32(*(*uint8)(unsafe.Pointer(_n + 2)))<<(uint(8)%32) | int32(*(*uint8)(unsafe.Pointer(_n + 3))))
	_hw = uint32(int32(*(*uint8)(unsafe.Pointer(_h)))<<(uint(24)%32) | int32(*(*uint8)(unsafe.Pointer(_h + 1)))<<(uint(16)%32) | int32(*(*uint8)(unsafe.Pointer(_h + 2)))<<(uint(8)%32) | int32(*(*uint8)(unsafe.Pointer(_h + 3))))
	_h += uintptr(4)
	_k = _k - uint64(4)
_1:
	if _k == 0 {
		goto _3
	}

	if _hw != _nw {
		goto _4
	}

	return _h - uintptr(4)

_4:
	_k--
	_hw = _hw<<(uint(8)%32) | uint32(*(*uint8)(unsafe.Pointer(postinc948(&_h))))
	goto _1

_3:
	if _hw == _nw {
		return _h - uintptr(4)
	}

	return null
}

func set949(p *uint64, v uint64) uint64 { *p = v; return v }

func postinc950(p *uint64) uint64 { r := *p; *p += 1; return r }

// xtwoway_memmem is defined at memmem.c:37:13
func xtwoway_memmem(tls TLS, _h uintptr /* *uint8 */, _z uintptr /* *uint8 */, _n uintptr /* *uint8 */, _l uint64) (r uintptr /* *int8 */) {
	esc := MustMalloc(2080)
	var (
		_i       uint64
		_ip      uint64
		_jp      uint64
		_k       uint64
		_p       uint64
		_ms      uint64
		_p0      uint64
		_mem     uint64
		_mem0    uint64
		_byteset = esc      // *[4]uint64
		_shift   = esc + 32 // *[256]uint64
	)
	defer Free(esc)
	Copy(_byteset, ts+2940 /* "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00..." */, 32)
	_i = uint64(0)
_1:
	if _i >= _l {
		goto _3
	}

	{
		p := (*uint64)(unsafe.Pointer(_byteset + 8*uintptr(uint64(*(*uint8)(unsafe.Pointer(_n + uintptr(_i))))/uint64(64))))
		*p = *p | uint64(1)<<(uint(uint64(*(*uint8)(unsafe.Pointer(_n + uintptr(_i))))%uint64(64))%64)
	}
	*(*uint64)(unsafe.Pointer(_shift + 8*uintptr(*(*uint8)(unsafe.Pointer(_n + uintptr(_i)))))) = _i + uint64(1)
	_i++
	goto _1

_3:
	_ip = uint64(18446744073709551615)
	_jp = uint64(0)
	_k = set949(&_p, uint64(1))
_4:
	if _jp+_k >= _l {
		goto _5
	}

	if int32(*(*uint8)(unsafe.Pointer(_n + uintptr(_ip+_k)))) != int32(*(*uint8)(unsafe.Pointer(_n + uintptr(_jp+_k)))) {
		goto _6
	}

	if _k != _p {
		goto _8
	}

	_jp = _jp + _p
	_k = uint64(1)
	goto _9

_8:
	_k++
_9:
	goto _7

_6:
	if int32(*(*uint8)(unsafe.Pointer(_n + uintptr(_ip+_k)))) <= int32(*(*uint8)(unsafe.Pointer(_n + uintptr(_jp+_k)))) {
		goto _10
	}

	_jp = _jp + _k
	_k = uint64(1)
	_p = _jp - _ip
	goto _11

_10:
	_ip = postinc950(&_jp)
	_k = set949(&_p, uint64(1))
_11:
_7:
	goto _4

_5:
	_ms = _ip
	_p0 = _p
	_ip = uint64(18446744073709551615)
	_jp = uint64(0)
	_k = set949(&_p, uint64(1))
_12:
	if _jp+_k >= _l {
		goto _13
	}

	if int32(*(*uint8)(unsafe.Pointer(_n + uintptr(_ip+_k)))) != int32(*(*uint8)(unsafe.Pointer(_n + uintptr(_jp+_k)))) {
		goto _14
	}

	if _k != _p {
		goto _16
	}

	_jp = _jp + _p
	_k = uint64(1)
	goto _17

_16:
	_k++
_17:
	goto _15

_14:
	if int32(*(*uint8)(unsafe.Pointer(_n + uintptr(_ip+_k)))) >= int32(*(*uint8)(unsafe.Pointer(_n + uintptr(_jp+_k)))) {
		goto _18
	}

	_jp = _jp + _k
	_k = uint64(1)
	_p = _jp - _ip
	goto _19

_18:
	_ip = postinc950(&_jp)
	_k = set949(&_p, uint64(1))
_19:
_15:
	goto _12

_13:
	if _ip+uint64(1) <= _ms+uint64(1) {
		goto _20
	}

	_ms = _ip
	goto _21

_20:
	_p = _p0
_21:
	if Xmemcmp(tls, _n, _n+uintptr(_p), _ms+uint64(1)) == 0 {
		goto _22
	}

	_mem0 = uint64(0)
	_p = func() uint64 {
		if _ms > _l-_ms-uint64(1) {
			return _ms
		}
		return _l - _ms - uint64(1)
	}() + uint64(1)
	goto _23

_22:
	_mem0 = _l - _p
_23:
	_mem = uint64(0)

_24:
	if uint64(int64(_z-_h)) >= _l {
		goto _27
	}

	return null

_27:
	if *(*uint64)(unsafe.Pointer(_byteset + 8*uintptr(uint64(*(*uint8)(unsafe.Pointer(_h + uintptr(_l-uint64(1)))))/uint64(64))))&(uint64(1)<<(uint(uint64(*(*uint8)(unsafe.Pointer(_h + uintptr(_l-uint64(1)))))%uint64(64))%64)) == 0 {
		goto _28
	}

	_k = _l - *(*uint64)(unsafe.Pointer(_shift + 8*uintptr(*(*uint8)(unsafe.Pointer(_h + uintptr(_l-uint64(1)))))))
	if _k == 0 {
		goto _30
	}

	if _mem0 == 0 || _mem == 0 || _k >= _p {
		goto _31
	}

	_k = _l - _p
_31:
	_h += uintptr(_k)
	_mem = uint64(0)
	goto _25

_30:
	goto _29

_28:
	_h += uintptr(_l)
	_mem = uint64(0)
	goto _25

_29:
	_k = func() uint64 {
		if _ms+uint64(1) > _mem {
			return _ms + uint64(1)
		}
		return _mem
	}()
_32:
	if _k >= _l || int32(*(*uint8)(unsafe.Pointer(_n + uintptr(_k)))) != int32(*(*uint8)(unsafe.Pointer(_h + uintptr(_k)))) {
		goto _34
	}

	_k++
	goto _32

_34:
	if _k >= _l {
		goto _35
	}

	_h += uintptr(_k - _ms)
	_mem = uint64(0)
	goto _25

_35:
	_k = _ms + uint64(1)
_36:
	if _k <= _mem || int32(*(*uint8)(unsafe.Pointer(_n + uintptr(_k-uint64(1))))) != int32(*(*uint8)(unsafe.Pointer(_h + uintptr(_k-uint64(1))))) {
		goto _38
	}

	_k--
	goto _36

_38:
	if _k > _mem {
		goto _39
	}

	return _h

_39:
	_h += uintptr(_p)
	_mem = _mem0
_25:
	goto _24
	return r
}

type t13uint16_t = uint16

type t130uint32_t = uint32

// linking memmove.o

func postinc951(p *uint64) uint64 { r := *p; *p += 18446744073709551615; return r }

func postinc952(p *uintptr) uintptr { r := *p; *p += 1; return r }

// Xmemmove is defined at memmove.c:7:6
func Xmemmove(tls TLS, _dest uintptr /* *void */, _src uintptr /* *void */, _n uint64) (r uintptr /* *void */) {
	var (
		_d uintptr // *int8
		_s uintptr // *int8
	)
	_d = _dest
	_s = _src
	if _d != _s {
		goto _1
	}

	return _d

_1:
	if (_s+uintptr(_n)) > _d && (_d+uintptr(_n)) > _s {
		goto _2
	}

	return Xmemcpy(tls, _d, _s, _n)

_2:
	if _d >= _s {
		goto _3
	}

	if uint64(_s)%uint64(8) != uint64(_d)%uint64(8) {
		goto _5
	}

_6:
	if (uint64(_d) % uint64(8)) == 0 {
		goto _7
	}

	if postinc951(&_n) != 0 {
		goto _8
	}

	return _dest

_8:
	*(*int8)(unsafe.Pointer(postinc952(&_d))) = *(*int8)(unsafe.Pointer(postinc952(&_s)))
	goto _6

_7:
_9:
	if _n < uint64(8) {
		goto _11
	}

	*(*uint64)(unsafe.Pointer(_d)) = *(*uint64)(unsafe.Pointer(_s))
	_n = _n - uint64(8)
	_d += uintptr(8)
	_s += uintptr(8)
	goto _9

_11:
_5:
_12:
	if _n == 0 {
		goto _14
	}

	*(*int8)(unsafe.Pointer(postinc952(&_d))) = *(*int8)(unsafe.Pointer(postinc952(&_s)))
	_n--
	goto _12

_14:
	goto _4

_3:
	if uint64(_s)%uint64(8) != uint64(_d)%uint64(8) {
		goto _15
	}

_16:
	if (uint64(_d+uintptr(_n)) % uint64(8)) == 0 {
		goto _17
	}

	if postinc951(&_n) != 0 {
		goto _18
	}

	return _dest

_18:
	*(*int8)(unsafe.Pointer(_d + uintptr(_n))) = *(*int8)(unsafe.Pointer(_s + uintptr(_n)))
	goto _16

_17:
_19:
	if _n < uint64(8) {
		goto _20
	}

	_n = _n - uint64(8)
	*(*uint64)(unsafe.Pointer(_d + uintptr(_n))) = *(*uint64)(unsafe.Pointer(_s + uintptr(_n)))
	goto _19

_20:
_15:
_21:
	if _n == 0 {
		goto _22
	}

	_n--
	*(*int8)(unsafe.Pointer(_d + uintptr(_n))) = *(*int8)(unsafe.Pointer(_s + uintptr(_n)))
	goto _21

_22:
_4:
	return _dest
}

type t961__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t961__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t301size_t = uint64

type t49uintptr_t = uint64

// linking mempcpy.o

// Xmempcpy is defined at mempcpy.c:4:6
func Xmempcpy(tls TLS, _dest uintptr /* *void */, _src uintptr /* *void */, _n uint64) (r uintptr /* *void */) {
	return Xmemcpy(tls, _dest, _src, _n) + uintptr(_n)
}

type t962__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t962__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t302size_t = uint64

// linking memrchr.o

func postinc953(p *uint64) uint64 { r := *p; *p += 18446744073709551615; return r }

// X__memrchr is defined at memrchr.c:4:6
func X__memrchr(tls TLS, _m uintptr /* *void */, _c int32, _n uint64) (r uintptr /* *void */) {
	var _s uintptr // *uint8

	_s = _m
	_c = int32(uint8(_c))
_1:
	if postinc953(&_n) == 0 {
		goto _2
	}

	if int32(*(*uint8)(unsafe.Pointer(_s + uintptr(_n)))) != _c {
		goto _3
	}

	return _s + uintptr(_n)

_3:
	goto _1

_2:
	return null
}

type t963__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t963__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t303size_t = uint64

// linking memset.o

// Xmemset is defined at memset.c:5:6
func Xmemset(tls TLS, _dest uintptr /* *void */, _c int32, _n uint64) (r uintptr /* *void */) {
	var (
		_s uintptr // *uint8
		_k uint64
	)
	_s = _dest
	if _n != 0 {
		goto _1
	}

	return _dest

_1:
	*(*uint8)(unsafe.Pointer(_s)) = uint8(_c)
	*(*uint8)(unsafe.Pointer(_s + uintptr(_n-uint64(1)))) = uint8(_c)
	if _n > uint64(2) {
		goto _2
	}

	return _dest

_2:
	*(*uint8)(unsafe.Pointer(_s + 1)) = uint8(_c)
	*(*uint8)(unsafe.Pointer(_s + 2)) = uint8(_c)
	*(*uint8)(unsafe.Pointer(_s + uintptr(_n-uint64(2)))) = uint8(_c)
	*(*uint8)(unsafe.Pointer(_s + uintptr(_n-uint64(3)))) = uint8(_c)
	if _n > uint64(6) {
		goto _3
	}

	return _dest

_3:
	*(*uint8)(unsafe.Pointer(_s + 3)) = uint8(_c)
	*(*uint8)(unsafe.Pointer(_s + uintptr(_n-uint64(4)))) = uint8(_c)
	if _n > uint64(8) {
		goto _4
	}

	return _dest

_4:
	_k = -uint64(_s) & uint64(3)
	_s += uintptr(_k)
	_n = _n - _k
	_n = _n & uint64(18446744073709551612)

_5:
	if _n == 0 {
		goto _7
	}

	*(*uint8)(unsafe.Pointer(_s)) = uint8(_c)
	_n--
	_s++
	goto _5

_7:
	return _dest
}

type t964__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t964__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t304size_t = uint64

type t50uintptr_t = uint64

// linking rindex.o

// Xrindex is defined at rindex.c:5:6
func Xrindex(tls TLS, _s uintptr /* *int8 */, _c int32) (r uintptr /* *int8 */) {
	return Xstrrchr(tls, _s, _c)
}

type t965__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t965__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// linking stpcpy.o

func set954(p *int8, v int8) int8 { *p = v; return v }

func postinc955(p *uintptr) uintptr { r := *p; *p += 8; return r }

// X__stpcpy is defined at stpcpy.c:11:6
func X__stpcpy(tls TLS, _d uintptr /* *int8 */, _s uintptr /* *int8 */) (r uintptr /* *int8 */) {
	var (
		_wd uintptr // *Tsize_t = uint64
		_ws uintptr // *Tsize_t = uint64
	)
	if uint64(_s)%uint64(8) != uint64(_d)%uint64(8) {
		goto _1
	}

_2:
	if (uint64(_s) % uint64(8)) == 0 {
		goto _4
	}

	if set954((*int8)(unsafe.Pointer(_d)), *(*int8)(unsafe.Pointer(_s))) != 0 {
		goto _5
	}

	return _d

_5:
	_s++
	_d++
	goto _2

_4:
	_wd = _d
	_ws = _s

_6:
	if (*(*uint64)(unsafe.Pointer(_ws))-uint64(72340172838076673)) & ^*(*uint64)(unsafe.Pointer(_ws)) & uint64(9259542123273814144) != 0 {
		goto _8
	}

	*(*uint64)(unsafe.Pointer(postinc955(&_wd))) = *(*uint64)(unsafe.Pointer(postinc955(&_ws)))
	goto _6

_8:
	_d = _wd
	_s = _ws
_1:
_9:
	if set954((*int8)(unsafe.Pointer(_d)), *(*int8)(unsafe.Pointer(_s))) == 0 {
		goto _11
	}

	_s++
	_d++
	goto _9

_11:
	return _d
}

type t966__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t966__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t51uintptr_t = uint64

type t305size_t = uint64

// linking stpncpy.o

func set956(p *int8, v int8) int8 { *p = v; return v }

// X__stpncpy is defined at stpncpy.c:11:6
func X__stpncpy(tls TLS, _d uintptr /* *int8 */, _s uintptr /* *int8 */, _n uint64) (r uintptr /* *int8 */) {
	var (
		_wd uintptr // *Tsize_t = uint64
		_ws uintptr // *Tsize_t = uint64
	)
	if uint64(_s)&uint64(7) != uint64(_d)&uint64(7) {
		goto _1
	}

_2:
	if uint64(_s)&uint64(7) == 0 || _n == 0 || set956((*int8)(unsafe.Pointer(_d)), *(*int8)(unsafe.Pointer(_s))) == 0 {
		goto _4
	}

	_n--
	_s++
	_d++
	goto _2

_4:
	if _n != 0 && *(*int8)(unsafe.Pointer(_s)) != 0 {
		goto _5
	}

	goto ltail

_5:
	_wd = _d
	_ws = _s

_6:
	if _n < uint64(8) || (*(*uint64)(unsafe.Pointer(_ws))-uint64(72340172838076673)) & ^*(*uint64)(unsafe.Pointer(_ws)) & uint64(9259542123273814144) != 0 {
		goto _8
	}

	*(*uint64)(unsafe.Pointer(_wd)) = *(*uint64)(unsafe.Pointer(_ws))
	_n = _n - uint64(8)
	_ws += 8
	_wd += 8
	goto _6

_8:
	_d = _wd
	_s = _ws
_1:
_9:
	if _n == 0 || set956((*int8)(unsafe.Pointer(_d)), *(*int8)(unsafe.Pointer(_s))) == 0 {
		goto _11
	}

	_n--
	_s++
	_d++
	goto _9

_11:
	goto ltail
ltail:
	Xmemset(tls, _d, int32(0), _n)
	return _d
}

type t967__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t967__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t306size_t = uint64

type t52uintptr_t = uint64

// linking strcasecmp.o

// Xstrcasecmp is defined at strcasecmp.c:5:5
func Xstrcasecmp(tls TLS, __l uintptr /* *int8 */, __r uintptr /* *int8 */) (r int32) {
	var (
		_l uintptr // *uint8
		_r uintptr // *uint8
	)
	_l = __l
	_r = __r

_1:
	if *(*uint8)(unsafe.Pointer(_l)) == 0 || *(*uint8)(unsafe.Pointer(_r)) == 0 || int32(*(*uint8)(unsafe.Pointer(_l))) != int32(*(*uint8)(unsafe.Pointer(_r))) && Xtolower(tls, int32(*(*uint8)(unsafe.Pointer(_l)))) != Xtolower(tls, int32(*(*uint8)(unsafe.Pointer(_r)))) {
		goto _3
	}

	_l++
	_r++
	goto _1

_3:
	return Xtolower(tls, int32(*(*uint8)(unsafe.Pointer(_l)))) - Xtolower(tls, int32(*(*uint8)(unsafe.Pointer(_r))))
}

// X__strcasecmp_l is defined at strcasecmp.c:12:5
func X__strcasecmp_l(tls TLS, _l uintptr /* *int8 */, _r uintptr /* *int8 */, _loc uintptr /* Tlocale_t = *S__locale_struct */) (r int32) {
	return Xstrcasecmp(tls, _l, _r)
}

type t968__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t968__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type s148__locale_struct = struct{ Fcat [6]uintptr }

// linking strcasestr.o

// Xstrcasestr is defined at strcasestr.c:4:6
func Xstrcasestr(tls TLS, _h uintptr /* *int8 */, _n uintptr /* *int8 */) (r uintptr /* *int8 */) {
	var _l uint64

	_l = Xstrlen(tls, _n)

_1:
	if *(*int8)(unsafe.Pointer(_h)) == 0 {
		goto _3
	}

	if Xstrncasecmp(tls, _h, _n, _l) != 0 {
		goto _4
	}

	return _h

_4:
	_h++
	goto _1

_3:
	return null
}

type t969__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t969__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t307size_t = uint64

// linking strcat.o

// Xstrcat is defined at strcat.c:3:6
func Xstrcat(tls TLS, _dest uintptr /* *int8 */, _src uintptr /* *int8 */) (r uintptr /* *int8 */) {
	Xstrcpy(tls, _dest+uintptr(Xstrlen(tls, _dest)), _src)
	return _dest
}

type t970__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t970__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t308size_t = uint64

// linking strchr.o

// Xstrchr is defined at strchr.c:5:6
func Xstrchr(tls TLS, _s uintptr /* *int8 */, _c int32) (r uintptr /* *int8 */) {
	var _r uintptr // *int8

	_r = X__strchrnul(tls, _s, _c)
	if int32(*(*uint8)(unsafe.Pointer(_r))) == int32(uint8(_c)) {
		return _r
	}

	return null
}

type t971__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t971__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// linking strchrnul.o

// X__strchrnul is defined at strchrnul.c:11:6
func X__strchrnul(tls TLS, _s uintptr /* *int8 */, _c int32) (r uintptr /* *int8 */) {
	var (
		_w uintptr // *Tsize_t = uint64
		_k uint64
	)
	_c = int32(uint8(_c))
	if _c != 0 {
		goto _1
	}

	return _s + uintptr(Xstrlen(tls, _s))

_1:
_2:
	if (uint64(_s) % uint64(8)) == 0 {
		goto _4
	}

	if *(*int8)(unsafe.Pointer(_s)) != 0 && int32(*(*uint8)(unsafe.Pointer(_s))) != _c {
		goto _5
	}

	return _s

_5:
	_s++
	goto _2

_4:
	_k = uint64(72340172838076673) * uint64(_c)
	_w = _s
_6:
	if (*(*uint64)(unsafe.Pointer(_w))-uint64(72340172838076673)) & ^*(*uint64)(unsafe.Pointer(_w)) & uint64(9259542123273814144) != 0 || (*(*uint64)(unsafe.Pointer(_w))^_k-uint64(72340172838076673)) & ^(*(*uint64)(unsafe.Pointer(_w))^_k) & uint64(9259542123273814144) != 0 {
		goto _8
	}

	_w += 8
	goto _6

_8:
	_s = _w
_9:
	if *(*int8)(unsafe.Pointer(_s)) == 0 || int32(*(*uint8)(unsafe.Pointer(_s))) == _c {
		goto _11
	}

	_s++
	goto _9

_11:
	return _s
}

type t972__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t972__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t309size_t = uint64

type t53uintptr_t = uint64

// linking strcmp.o

// Xstrcmp is defined at strcmp.c:4:5
func Xstrcmp(tls TLS, _l uintptr /* *int8 */, _r uintptr /* *int8 */) (r int32) {
_1:
	if int32(*(*int8)(unsafe.Pointer(_l))) != int32(*(*int8)(unsafe.Pointer(_r))) || *(*int8)(unsafe.Pointer(_l)) == 0 {
		goto _3
	}

	_l++
	_r++
	goto _1

_3:
	return int32(*(*uint8)(unsafe.Pointer(_l))) - int32(*(*uint8)(unsafe.Pointer(_r)))
}

type t973__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t973__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// linking strcpy.o

// Xstrcpy is defined at strcpy.c:6:6
func Xstrcpy(tls TLS, _dest uintptr /* *int8 */, _src uintptr /* *int8 */) (r uintptr /* *int8 */) {
	X__stpcpy(tls, _dest, _src)
	return _dest
}

type t974__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t974__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// linking strcspn.o

func or957(p *uint64, v uint64) (r uint64) { r = *p | v; *p = r; return r }

// Xstrcspn is defined at strcspn.c:8:8
func Xstrcspn(tls TLS, _s uintptr /* *int8 */, _c uintptr /* *int8 */) (r uint64) {
	esc := MustMalloc(32)
	var (
		_a       uintptr // *int8
		_byteset = esc   // *[4]uint64
	)
	defer Free(esc)
	_a = _s
	if *(*int8)(unsafe.Pointer(_c)) != 0 && *(*int8)(unsafe.Pointer(_c + 1)) != 0 {
		goto _1
	}

	return uint64(int64(X__strchrnul(tls, _s, int32(*(*int8)(unsafe.Pointer(_c)))) - _a))

_1:
	Xmemset(tls, _byteset, int32(0), uint64(32))

_2:
	if *(*int8)(unsafe.Pointer(_c)) == 0 || or957((*uint64)(unsafe.Pointer(_byteset+8*uintptr(uint64(*(*uint8)(unsafe.Pointer(_c)))/uint64(64)))), uint64(1)<<(uint(uint64(*(*uint8)(unsafe.Pointer(_c)))%uint64(64))%64)) == 0 {
		goto _4
	}

	_c++
	goto _2

_4:
_5:
	if *(*int8)(unsafe.Pointer(_s)) == 0 || *(*uint64)(unsafe.Pointer(_byteset + 8*uintptr(uint64(*(*uint8)(unsafe.Pointer(_s)))/uint64(64))))&(uint64(1)<<(uint(uint64(*(*uint8)(unsafe.Pointer(_s)))%uint64(64))%64)) != 0 {
		goto _7
	}

	_s++
	goto _5

_7:
	return uint64(int64(_s - _a))
}

type t975__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t975__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t310size_t = uint64

// linking strdup.o

// X__strdup is defined at strdup.c:5:6
func X__strdup(tls TLS, _s uintptr /* *int8 */) (r uintptr /* *int8 */) {
	var (
		_l uint64
		_d uintptr // *int8
	)
	_l = Xstrlen(tls, _s)
	_d = Xmalloc(tls, _l+uint64(1))
	if _d != 0 {
		goto _1
	}

	return null

_1:
	return Xmemcpy(tls, _d, _s, _l+uint64(1))
}

type t976__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t976__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t311size_t = uint64

// linking strerror_r.o

// Xstrerror_r is defined at strerror_r.c:5:5
func Xstrerror_r(tls TLS, _err int32, _buf uintptr /* *int8 */, _buflen uint64) (r int32) {
	var (
		_msg uintptr // *int8
		_l   uint64
	)
	_msg = Xstrerror(tls, _err)
	_l = Xstrlen(tls, _msg)
	if _l < _buflen {
		goto _1
	}

	if _buflen == 0 {
		goto _2
	}

	Xmemcpy(tls, _buf, _msg, _buflen-uint64(1))
	*(*int8)(unsafe.Pointer(_buf + uintptr(_buflen-uint64(1)))) = int8(0)
_2:
	return int32(34)

_1:
	Xmemcpy(tls, _buf, _msg, _l+uint64(1))
	return int32(0)
}

type t977__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t977__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t312size_t = uint64

// linking strlcat.o

// Xstrlcat is defined at strlcat.c:4:8
func Xstrlcat(tls TLS, _d uintptr /* *int8 */, _s uintptr /* *int8 */, _n uint64) (r uint64) {
	var _l uint64

	_l = Xstrnlen(tls, _d, _n)
	if _l != _n {
		goto _1
	}

	return _l + Xstrlen(tls, _s)

_1:
	return _l + Xstrlcpy(tls, _d+uintptr(_l), _s, _n-_l)
}

type t978__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t978__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t313size_t = uint64

// linking strlcpy.o

func postinc958(p *uint64) uint64 { r := *p; *p += 18446744073709551615; return r }

func set959(p *int8, v int8) int8 { *p = v; return v }

// Xstrlcpy is defined at strlcpy.c:12:8
func Xstrlcpy(tls TLS, _d uintptr /* *int8 */, _s uintptr /* *int8 */, _n uint64) (r uint64) {
	var (
		_d0 uintptr // *int8
		_wd uintptr // *Tsize_t = uint64
		_ws uintptr // *Tsize_t = uint64
	)
	_d0 = _d
	if postinc958(&_n) != 0 {
		goto _1
	}

	goto lfinish

_1:
	if uint64(_s)&uint64(7) != uint64(_d)&uint64(7) {
		goto _2
	}

_3:
	if uint64(_s)&uint64(7) == 0 || _n == 0 || set959((*int8)(unsafe.Pointer(_d)), *(*int8)(unsafe.Pointer(_s))) == 0 {
		goto _5
	}

	_n--
	_s++
	_d++
	goto _3

_5:
	if _n == 0 || *(*int8)(unsafe.Pointer(_s)) == 0 {
		goto _6
	}

	_wd = _d
	_ws = _s

_7:
	if _n < uint64(8) || (*(*uint64)(unsafe.Pointer(_ws))-uint64(72340172838076673)) & ^*(*uint64)(unsafe.Pointer(_ws)) & uint64(9259542123273814144) != 0 {
		goto _9
	}

	*(*uint64)(unsafe.Pointer(_wd)) = *(*uint64)(unsafe.Pointer(_ws))
	_n = _n - uint64(8)
	_ws += 8
	_wd += 8
	goto _7

_9:
	_d = _wd
	_s = _ws
_6:
_2:
_10:
	if _n == 0 || set959((*int8)(unsafe.Pointer(_d)), *(*int8)(unsafe.Pointer(_s))) == 0 {
		goto _12
	}

	_n--
	_s++
	_d++
	goto _10

_12:
	*(*int8)(unsafe.Pointer(_d)) = int8(0)
	goto lfinish
lfinish:
	return uint64(int64(_d-_d0)) + Xstrlen(tls, _s)
}

type t979__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t979__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t314size_t = uint64

type t54uintptr_t = uint64

// linking strlen.o

// Xstrlen is defined at strlen.c:11:8
func Xstrlen(tls TLS, _s uintptr /* *int8 */) (r uint64) {
	var (
		_a uintptr // *int8
		_w uintptr // *Tsize_t = uint64
	)
	_a = _s

_1:
	if (uint64(_s) % uint64(8)) == 0 {
		goto _3
	}

	if *(*int8)(unsafe.Pointer(_s)) != 0 {
		goto _4
	}

	return uint64(int64(_s - _a))

_4:
	_s++
	goto _1

_3:
	_w = _s
_5:
	if (*(*uint64)(unsafe.Pointer(_w))-uint64(72340172838076673)) & ^*(*uint64)(unsafe.Pointer(_w)) & uint64(9259542123273814144) != 0 {
		goto _7
	}

	_w += 8
	goto _5

_7:
	_s = _w
_8:
	if *(*int8)(unsafe.Pointer(_s)) == 0 {
		goto _10
	}

	_s++
	goto _8

_10:
	return uint64(int64(_s - _a))
}

type t980__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t980__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t315size_t = uint64

type t55uintptr_t = uint64

// linking strncasecmp.o

func postinc960(p *uint64) uint64 { r := *p; *p += 18446744073709551615; return r }

// Xstrncasecmp is defined at strncasecmp.c:5:5
func Xstrncasecmp(tls TLS, __l uintptr /* *int8 */, __r uintptr /* *int8 */, _n uint64) (r int32) {
	var (
		_l uintptr // *uint8
		_r uintptr // *uint8
	)
	_l = __l
	_r = __r
	if postinc960(&_n) != 0 {
		goto _1
	}

	return int32(0)

_1:
_2:
	if *(*uint8)(unsafe.Pointer(_l)) == 0 || *(*uint8)(unsafe.Pointer(_r)) == 0 || _n == 0 || int32(*(*uint8)(unsafe.Pointer(_l))) != int32(*(*uint8)(unsafe.Pointer(_r))) && Xtolower(tls, int32(*(*uint8)(unsafe.Pointer(_l)))) != Xtolower(tls, int32(*(*uint8)(unsafe.Pointer(_r)))) {
		goto _4
	}

	_l++
	_r++
	_n--
	goto _2

_4:
	return Xtolower(tls, int32(*(*uint8)(unsafe.Pointer(_l)))) - Xtolower(tls, int32(*(*uint8)(unsafe.Pointer(_r))))
}

// X__strncasecmp_l is defined at strncasecmp.c:13:5
func X__strncasecmp_l(tls TLS, _l uintptr /* *int8 */, _r uintptr /* *int8 */, _n uint64, _loc uintptr /* Tlocale_t = *S__locale_struct */) (r int32) {
	return Xstrncasecmp(tls, _l, _r, _n)
}

type t981__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t981__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t316size_t = uint64

type s149__locale_struct = struct{ Fcat [6]uintptr }

// linking strncat.o

func postinc961(p *uintptr) uintptr { r := *p; *p += 1; return r }

// Xstrncat is defined at strncat.c:3:6
func Xstrncat(tls TLS, _d uintptr /* *int8 */, _s uintptr /* *int8 */, _n uint64) (r uintptr /* *int8 */) {
	var _a uintptr // *int8

	_a = _d
	_d += uintptr(Xstrlen(tls, _d))
_1:
	if _n == 0 || *(*int8)(unsafe.Pointer(_s)) == 0 {
		goto _2
	}

	_n--
	*(*int8)(unsafe.Pointer(postinc961(&_d))) = *(*int8)(unsafe.Pointer(postinc961(&_s)))
	goto _1

_2:
	*(*int8)(unsafe.Pointer(postinc961(&_d))) = int8(0)
	return _a
}

type t982__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t982__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t317size_t = uint64

// linking strncmp.o

func postinc962(p *uint64) uint64 { r := *p; *p += 18446744073709551615; return r }

// Xstrncmp is defined at strncmp.c:3:5
func Xstrncmp(tls TLS, __l uintptr /* *int8 */, __r uintptr /* *int8 */, _n uint64) (r int32) {
	var (
		_l uintptr // *uint8
		_r uintptr // *uint8
	)
	_l = __l
	_r = __r
	if postinc962(&_n) != 0 {
		goto _1
	}

	return int32(0)

_1:
_2:
	if *(*uint8)(unsafe.Pointer(_l)) == 0 || *(*uint8)(unsafe.Pointer(_r)) == 0 || _n == 0 || int32(*(*uint8)(unsafe.Pointer(_l))) != int32(*(*uint8)(unsafe.Pointer(_r))) {
		goto _4
	}

	_l++
	_r++
	_n--
	goto _2

_4:
	return int32(*(*uint8)(unsafe.Pointer(_l))) - int32(*(*uint8)(unsafe.Pointer(_r)))
}

type t983__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t983__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t318size_t = uint64

// linking strncpy.o

// Xstrncpy is defined at strncpy.c:5:6
func Xstrncpy(tls TLS, _d uintptr /* *int8 */, _s uintptr /* *int8 */, _n uint64) (r uintptr /* *int8 */) {
	X__stpncpy(tls, _d, _s, _n)
	return _d
}

type t984__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t984__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t319size_t = uint64

// linking strndup.o

// Xstrndup is defined at strndup.c:4:6
func Xstrndup(tls TLS, _s uintptr /* *int8 */, _n uint64) (r uintptr /* *int8 */) {
	var (
		_l uint64
		_d uintptr // *int8
	)
	_l = Xstrnlen(tls, _s, _n)
	_d = Xmalloc(tls, _l+uint64(1))
	if _d != 0 {
		goto _1
	}

	return null

_1:
	Xmemcpy(tls, _d, _s, _l)
	*(*int8)(unsafe.Pointer(_d + uintptr(_l))) = int8(0)
	return _d
}

type t985__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t985__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t320size_t = uint64

// linking strnlen.o

// Xstrnlen is defined at strnlen.c:3:8
func Xstrnlen(tls TLS, _s uintptr /* *int8 */, _n uint64) (r uint64) {
	var _p uintptr // *int8

	_p = Xmemchr(tls, _s, int32(0), _n)
	if _p != 0 {
		return uint64(int64(_p - _s))
	}

	return _n
}

type t986__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t986__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t321size_t = uint64

// linking strpbrk.o

// Xstrpbrk is defined at strpbrk.c:3:6
func Xstrpbrk(tls TLS, _s uintptr /* *int8 */, _b uintptr /* *int8 */) (r uintptr /* *int8 */) {
	_s += uintptr(Xstrcspn(tls, _s, _b))
	if *(*int8)(unsafe.Pointer(_s)) != 0 {
		return _s
	}

	return null
}

type t987__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t987__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t322size_t = uint64

// linking strrchr.o

// Xstrrchr is defined at strrchr.c:5:6
func Xstrrchr(tls TLS, _s uintptr /* *int8 */, _c int32) (r uintptr /* *int8 */) {
	return X__memrchr(tls, _s, _c, Xstrlen(tls, _s)+uint64(1))
}

type t988__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t988__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t323size_t = uint64

// linking strsep.o

func postinc963(p *uintptr) uintptr { r := *p; *p += 1; return r }

// Xstrsep is defined at strsep.c:4:6
func Xstrsep(tls TLS, _str uintptr /* **int8 */, _sep uintptr /* *int8 */) (r uintptr /* *int8 */) {
	var (
		_s   uintptr // *int8
		_end uintptr // *int8
	)
	_s = *(*uintptr)(unsafe.Pointer(_str))
	if _s != 0 {
		goto _1
	}

	return null

_1:
	_end = _s + uintptr(Xstrcspn(tls, _s, _sep))
	if *(*int8)(unsafe.Pointer(_end)) == 0 {
		goto _2
	}

	*(*int8)(unsafe.Pointer(postinc963(&_end))) = int8(0)
	goto _3

_2:
	_end = null
_3:
	*(*uintptr)(unsafe.Pointer(_str)) = _end
	return _s
}

type t989__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t989__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t324size_t = uint64

// linking strsignal.o

func postinc964(p *int32) int32 { r := *p; *p += -1; return r }

// Xstrsignal is defined at strsignal.c:106:6
func Xstrsignal(tls TLS, _signum int32) (r uintptr /* *int8 */) {
	var _s uintptr // *int8

	_s = xstrings
	_signum = _signum
	if uint32(_signum)-uint32(1) < uint32(64) {
		goto _1
	}

	_signum = int32(0)
_1:
_2:
	if postinc964(&_signum) == 0 {
		goto _4
	}

_5:
	if *(*int8)(unsafe.Pointer(_s)) == 0 {
		goto _7
	}

	_s++
	goto _5

_7:
	_s++
	goto _2

_4:
	return X__lctrans_cur(tls, _s)
}

type t990__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t990__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// xstrings [671]int8, escapes: true, strsignal.c:56:19
var xstrings = ds + 45696

// linking strspn.o

func or965(p *uint64, v uint64) (r uint64) { r = *p | v; *p = r; return r }

// Xstrspn is defined at strspn.c:6:8
func Xstrspn(tls TLS, _s uintptr /* *int8 */, _c uintptr /* *int8 */) (r uint64) {
	esc := MustMalloc(32)
	var (
		_a       uintptr // *int8
		_byteset = esc   // *[4]uint64
	)
	defer Free(esc)
	_a = _s
	Copy(_byteset, ts+2940 /* "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00..." */, 32)
	if *(*int8)(unsafe.Pointer(_c)) != 0 {
		goto _1
	}

	return uint64(0)

_1:
	if *(*int8)(unsafe.Pointer(_c + 1)) != 0 {
		goto _2
	}

_3:
	if int32(*(*int8)(unsafe.Pointer(_s))) != int32(*(*int8)(unsafe.Pointer(_c))) {
		goto _5
	}

	_s++
	goto _3

_5:
	return uint64(int64(_s - _a))

_2:
_6:
	if *(*int8)(unsafe.Pointer(_c)) == 0 || or965((*uint64)(unsafe.Pointer(_byteset+8*uintptr(uint64(*(*uint8)(unsafe.Pointer(_c)))/uint64(64)))), uint64(1)<<(uint(uint64(*(*uint8)(unsafe.Pointer(_c)))%uint64(64))%64)) == 0 {
		goto _8
	}

	_c++
	goto _6

_8:
_9:
	if *(*int8)(unsafe.Pointer(_s)) == 0 || *(*uint64)(unsafe.Pointer(_byteset + 8*uintptr(uint64(*(*uint8)(unsafe.Pointer(_s)))/uint64(64))))&(uint64(1)<<(uint(uint64(*(*uint8)(unsafe.Pointer(_s)))%uint64(64))%64)) == 0 {
		goto _11
	}

	_s++
	goto _9

_11:
	return uint64(int64(_s - _a))
}

type t991__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t991__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t325size_t = uint64

// linking strstr.o

// Xstrstr is defined at strstr.c:139:6
func Xstrstr(tls TLS, _h uintptr /* *int8 */, _n uintptr /* *int8 */) (r uintptr /* *int8 */) {
	if *(*int8)(unsafe.Pointer(_n)) != 0 {
		goto _1
	}

	return _h

_1:
	_h = Xstrchr(tls, _h, int32(*(*int8)(unsafe.Pointer(_n))))
	if _h != 0 && *(*int8)(unsafe.Pointer(_n + 1)) != 0 {
		goto _2
	}

	return _h

_2:
	if *(*int8)(unsafe.Pointer(_h + 1)) != 0 {
		goto _3
	}

	return null

_3:
	if *(*int8)(unsafe.Pointer(_n + 2)) != 0 {
		goto _4
	}

	return xtwobyte_strstr(tls, _h, _n)

_4:
	if *(*int8)(unsafe.Pointer(_h + 2)) != 0 {
		goto _5
	}

	return null

_5:
	if *(*int8)(unsafe.Pointer(_n + 3)) != 0 {
		goto _6
	}

	return xthreebyte_strstr(tls, _h, _n)

_6:
	if *(*int8)(unsafe.Pointer(_h + 3)) != 0 {
		goto _7
	}

	return null

_7:
	if *(*int8)(unsafe.Pointer(_n + 4)) != 0 {
		goto _8
	}

	return xfourbyte_strstr(tls, _h, _n)

_8:
	return xtwoway_strstr(tls, _h, _n)
}

type t992__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t992__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

func preinc966(p *uintptr) uintptr { *p += 1; return *p }

// xtwobyte_strstr is defined at strstr.c:4:13
func xtwobyte_strstr(tls TLS, _h uintptr /* *uint8 */, _n uintptr /* *uint8 */) (r uintptr /* *int8 */) {
	var (
		_nw uint16
		_hw uint16
	)
	_nw = uint16(int32(*(*uint8)(unsafe.Pointer(_n)))<<(uint(8)%32) | int32(*(*uint8)(unsafe.Pointer(_n + 1))))
	_hw = uint16(int32(*(*uint8)(unsafe.Pointer(_h)))<<(uint(8)%32) | int32(*(*uint8)(unsafe.Pointer(_h + 1))))
	_h++
_1:
	if *(*uint8)(unsafe.Pointer(_h)) == 0 || int32(_hw) == int32(_nw) {
		goto _3
	}

	_hw = uint16(int32(_hw)<<(uint(8)%32) | int32(*(*uint8)(unsafe.Pointer(preinc966(&_h)))))
	goto _1

_3:
	if *(*uint8)(unsafe.Pointer(_h)) != 0 {
		return _h - uintptr(1)
	}

	return null
}

// xthreebyte_strstr is defined at strstr.c:11:13
func xthreebyte_strstr(tls TLS, _h uintptr /* *uint8 */, _n uintptr /* *uint8 */) (r uintptr /* *int8 */) {
	var (
		_nw uint32
		_hw uint32
	)
	_nw = uint32(int32(*(*uint8)(unsafe.Pointer(_n)))<<(uint(24)%32) | int32(*(*uint8)(unsafe.Pointer(_n + 1)))<<(uint(16)%32) | int32(*(*uint8)(unsafe.Pointer(_n + 2)))<<(uint(8)%32))
	_hw = uint32(int32(*(*uint8)(unsafe.Pointer(_h)))<<(uint(24)%32) | int32(*(*uint8)(unsafe.Pointer(_h + 1)))<<(uint(16)%32) | int32(*(*uint8)(unsafe.Pointer(_h + 2)))<<(uint(8)%32))
	_h += uintptr(2)
_1:
	if *(*uint8)(unsafe.Pointer(_h)) == 0 || _hw == _nw {
		goto _3
	}

	_hw = (_hw | uint32(*(*uint8)(unsafe.Pointer(preinc966(&_h))))) << (uint(8) % 32)
	goto _1

_3:
	if *(*uint8)(unsafe.Pointer(_h)) != 0 {
		return _h - uintptr(2)
	}

	return null
}

// xfourbyte_strstr is defined at strstr.c:19:13
func xfourbyte_strstr(tls TLS, _h uintptr /* *uint8 */, _n uintptr /* *uint8 */) (r uintptr /* *int8 */) {
	var (
		_nw uint32
		_hw uint32
	)
	_nw = uint32(int32(*(*uint8)(unsafe.Pointer(_n)))<<(uint(24)%32) | int32(*(*uint8)(unsafe.Pointer(_n + 1)))<<(uint(16)%32) | int32(*(*uint8)(unsafe.Pointer(_n + 2)))<<(uint(8)%32) | int32(*(*uint8)(unsafe.Pointer(_n + 3))))
	_hw = uint32(int32(*(*uint8)(unsafe.Pointer(_h)))<<(uint(24)%32) | int32(*(*uint8)(unsafe.Pointer(_h + 1)))<<(uint(16)%32) | int32(*(*uint8)(unsafe.Pointer(_h + 2)))<<(uint(8)%32) | int32(*(*uint8)(unsafe.Pointer(_h + 3))))
	_h += uintptr(3)
_1:
	if *(*uint8)(unsafe.Pointer(_h)) == 0 || _hw == _nw {
		goto _3
	}

	_hw = _hw<<(uint(8)%32) | uint32(*(*uint8)(unsafe.Pointer(preinc966(&_h))))
	goto _1

_3:
	if *(*uint8)(unsafe.Pointer(_h)) != 0 {
		return _h - uintptr(3)
	}

	return null
}

func set967(p *uint64, v uint64) uint64 { *p = v; return v }

func postinc968(p *uint64) uint64 { r := *p; *p += 1; return r }

// xtwoway_strstr is defined at strstr.c:33:13
func xtwoway_strstr(tls TLS, _h uintptr /* *uint8 */, _n uintptr /* *uint8 */) (r uintptr /* *int8 */) {
	esc := MustMalloc(2080)
	var (
		_z       uintptr // *uint8
		_l       uint64
		_ip      uint64
		_jp      uint64
		_k       uint64
		_p       uint64
		_ms      uint64
		_p0      uint64
		_mem     uint64
		_mem0    uint64
		_byteset = esc      // *[4]uint64
		_shift   = esc + 32 // *[256]uint64
		_grow    uint64
		_z2      uintptr // *uint8
	)
	defer Free(esc)
	Copy(_byteset, ts+2940 /* "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00..." */, 32)
	_l = uint64(0)
_1:
	if *(*uint8)(unsafe.Pointer(_n + uintptr(_l))) == 0 || *(*uint8)(unsafe.Pointer(_h + uintptr(_l))) == 0 {
		goto _3
	}

	{
		p := (*uint64)(unsafe.Pointer(_byteset + 8*uintptr(uint64(*(*uint8)(unsafe.Pointer(_n + uintptr(_l))))/uint64(64))))
		*p = *p | uint64(1)<<(uint(uint64(*(*uint8)(unsafe.Pointer(_n + uintptr(_l))))%uint64(64))%64)
	}
	*(*uint64)(unsafe.Pointer(_shift + 8*uintptr(*(*uint8)(unsafe.Pointer(_n + uintptr(_l)))))) = _l + uint64(1)
	_l++
	goto _1

_3:
	if *(*uint8)(unsafe.Pointer(_n + uintptr(_l))) == 0 {
		goto _4
	}

	return null

_4:
	_ip = uint64(18446744073709551615)
	_jp = uint64(0)
	_k = set967(&_p, uint64(1))
_5:
	if _jp+_k >= _l {
		goto _6
	}

	if int32(*(*uint8)(unsafe.Pointer(_n + uintptr(_ip+_k)))) != int32(*(*uint8)(unsafe.Pointer(_n + uintptr(_jp+_k)))) {
		goto _7
	}

	if _k != _p {
		goto _9
	}

	_jp = _jp + _p
	_k = uint64(1)
	goto _10

_9:
	_k++
_10:
	goto _8

_7:
	if int32(*(*uint8)(unsafe.Pointer(_n + uintptr(_ip+_k)))) <= int32(*(*uint8)(unsafe.Pointer(_n + uintptr(_jp+_k)))) {
		goto _11
	}

	_jp = _jp + _k
	_k = uint64(1)
	_p = _jp - _ip
	goto _12

_11:
	_ip = postinc968(&_jp)
	_k = set967(&_p, uint64(1))
_12:
_8:
	goto _5

_6:
	_ms = _ip
	_p0 = _p
	_ip = uint64(18446744073709551615)
	_jp = uint64(0)
	_k = set967(&_p, uint64(1))
_13:
	if _jp+_k >= _l {
		goto _14
	}

	if int32(*(*uint8)(unsafe.Pointer(_n + uintptr(_ip+_k)))) != int32(*(*uint8)(unsafe.Pointer(_n + uintptr(_jp+_k)))) {
		goto _15
	}

	if _k != _p {
		goto _17
	}

	_jp = _jp + _p
	_k = uint64(1)
	goto _18

_17:
	_k++
_18:
	goto _16

_15:
	if int32(*(*uint8)(unsafe.Pointer(_n + uintptr(_ip+_k)))) >= int32(*(*uint8)(unsafe.Pointer(_n + uintptr(_jp+_k)))) {
		goto _19
	}

	_jp = _jp + _k
	_k = uint64(1)
	_p = _jp - _ip
	goto _20

_19:
	_ip = postinc968(&_jp)
	_k = set967(&_p, uint64(1))
_20:
_16:
	goto _13

_14:
	if _ip+uint64(1) <= _ms+uint64(1) {
		goto _21
	}

	_ms = _ip
	goto _22

_21:
	_p = _p0
_22:
	if Xmemcmp(tls, _n, _n+uintptr(_p), _ms+uint64(1)) == 0 {
		goto _23
	}

	_mem0 = uint64(0)
	_p = func() uint64 {
		if _ms > _l-_ms-uint64(1) {
			return _ms
		}
		return _l - _ms - uint64(1)
	}() + uint64(1)
	goto _24

_23:
	_mem0 = _l - _p
_24:
	_mem = uint64(0)
	_z = _h

_25:
	if uint64(int64(_z-_h)) >= _l {
		goto _28
	}

	_grow = _l | uint64(63)
	_z2 = Xmemchr(tls, _z, int32(0), _grow)
	if _z2 == 0 {
		goto _29
	}

	_z = _z2
	if uint64(int64(_z-_h)) >= _l {
		goto _31
	}

	return null

_31:
	goto _30

_29:
	_z += uintptr(_grow)
_30:
_28:
	if *(*uint64)(unsafe.Pointer(_byteset + 8*uintptr(uint64(*(*uint8)(unsafe.Pointer(_h + uintptr(_l-uint64(1)))))/uint64(64))))&(uint64(1)<<(uint(uint64(*(*uint8)(unsafe.Pointer(_h + uintptr(_l-uint64(1)))))%uint64(64))%64)) == 0 {
		goto _32
	}

	_k = _l - *(*uint64)(unsafe.Pointer(_shift + 8*uintptr(*(*uint8)(unsafe.Pointer(_h + uintptr(_l-uint64(1)))))))
	if _k == 0 {
		goto _34
	}

	if _mem0 == 0 || _mem == 0 || _k >= _p {
		goto _35
	}

	_k = _l - _p
_35:
	_h += uintptr(_k)
	_mem = uint64(0)
	goto _26

_34:
	goto _33

_32:
	_h += uintptr(_l)
	_mem = uint64(0)
	goto _26

_33:
	_k = func() uint64 {
		if _ms+uint64(1) > _mem {
			return _ms + uint64(1)
		}
		return _mem
	}()
_36:
	if *(*uint8)(unsafe.Pointer(_n + uintptr(_k))) == 0 || int32(*(*uint8)(unsafe.Pointer(_n + uintptr(_k)))) != int32(*(*uint8)(unsafe.Pointer(_h + uintptr(_k)))) {
		goto _38
	}

	_k++
	goto _36

_38:
	if *(*uint8)(unsafe.Pointer(_n + uintptr(_k))) == 0 {
		goto _39
	}

	_h += uintptr(_k - _ms)
	_mem = uint64(0)
	goto _26

_39:
	_k = _ms + uint64(1)
_40:
	if _k <= _mem || int32(*(*uint8)(unsafe.Pointer(_n + uintptr(_k-uint64(1))))) != int32(*(*uint8)(unsafe.Pointer(_h + uintptr(_k-uint64(1))))) {
		goto _42
	}

	_k--
	goto _40

_42:
	if _k > _mem {
		goto _43
	}

	return _h

_43:
	_h += uintptr(_p)
	_mem = _mem0
_26:
	goto _25
	return r
}

type t14uint16_t = uint16

type t131uint32_t = uint32

type t326size_t = uint64

// linking strtok.o

func set969(p *uintptr, v uintptr) uintptr { *p = v; return v }

func postinc970(p *uintptr) uintptr { r := *p; *p += 1; return r }

// Xstrtok is defined at strtok.c:3:6
func Xstrtok(tls TLS, _s uintptr /* *int8 */, _sep uintptr /* *int8 */) (r uintptr /* *int8 */) {
	if _s != 0 || set969(&_s, x971p) != 0 {
		goto _1
	}

	return null

_1:
	_s += uintptr(Xstrspn(tls, _s, _sep))
	if *(*int8)(unsafe.Pointer(_s)) != 0 {
		goto _2
	}

	return set969(&x971p, null)

_2:
	x971p = _s + uintptr(Xstrcspn(tls, _s, _sep))
	if *(*int8)(unsafe.Pointer(x971p)) == 0 {
		goto _3
	}

	*(*int8)(unsafe.Pointer(postinc970(&x971p))) = int8(0)
	goto _4

_3:
	x971p = null
_4:
	return _s
}

type t993__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t993__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// x1p *int8, escapes: false, strtok.c:5:14
var x971p uintptr

type t327size_t = uint64

// linking strtok_r.o

func set972(p *uintptr, v uintptr) uintptr { *p = v; return v }

func postinc973(p *uintptr) uintptr { r := *p; *p += 1; return r }

// Xstrtok_r is defined at strtok_r.c:3:6
func Xstrtok_r(tls TLS, _s uintptr /* *int8 */, _sep uintptr /* *int8 */, _p uintptr /* **int8 */) (r uintptr /* *int8 */) {
	if _s != 0 || set972(&_s, *(*uintptr)(unsafe.Pointer(_p))) != 0 {
		goto _1
	}

	return null

_1:
	_s += uintptr(Xstrspn(tls, _s, _sep))
	if *(*int8)(unsafe.Pointer(_s)) != 0 {
		goto _2
	}

	return set972((*uintptr)(unsafe.Pointer(_p)), null)

_2:
	*(*uintptr)(unsafe.Pointer(_p)) = _s + uintptr(Xstrcspn(tls, _s, _sep))
	if **(**int8)(unsafe.Pointer(_p)) == 0 {
		goto _3
	}

	*(*int8)(unsafe.Pointer(postinc973((*uintptr)(unsafe.Pointer(_p))))) = int8(0)
	goto _4

_3:
	*(*uintptr)(unsafe.Pointer(_p)) = null
_4:
	return _s
}

type t994__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t994__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t328size_t = uint64

// linking strverscmp.o

func set974(p *uint64, v uint64) uint64 { *p = v; return v }

// Xstrverscmp is defined at strverscmp.c:5:5
func Xstrverscmp(tls TLS, _l0 uintptr /* *int8 */, _r0 uintptr /* *int8 */) (r int32) {
	var (
		_l  uintptr // *uint8
		_r  uintptr // *uint8
		_i  uint64
		_dp uint64
		_j  uint64
		_z  int32
		_c  int32
	)
	_l = _l0
	_r = _r0
	_z = int32(1)
	_dp = set974(&_i, uint64(0))
_1:
	if int32(*(*uint8)(unsafe.Pointer(_l + uintptr(_i)))) != int32(*(*uint8)(unsafe.Pointer(_r + uintptr(_i)))) {
		goto _3
	}

	_c = int32(*(*uint8)(unsafe.Pointer(_l + uintptr(_i))))
	if _c != 0 {
		goto _4
	}

	return int32(0)

_4:
	if uint32(_c)-uint32('0') < uint32(10) {
		goto _5
	}

	_dp = _i + uint64(1)
	_z = int32(1)
	goto _6

_5:
	if _c == int32('0') {
		goto _7
	}

	_z = int32(0)
_7:
_6:
	_i++
	goto _1

_3:
	if int32(*(*uint8)(unsafe.Pointer(_l + uintptr(_dp)))) == int32('0') || int32(*(*uint8)(unsafe.Pointer(_r + uintptr(_dp)))) == int32('0') {
		goto _8
	}

	_j = _i
_10:
	if uint32(*(*uint8)(unsafe.Pointer(_l + uintptr(_j))))-uint32('0') >= uint32(10) {
		goto _12
	}

	if uint32(*(*uint8)(unsafe.Pointer(_r + uintptr(_j))))-uint32('0') < uint32(10) {
		goto _13
	}

	return int32(1)

_13:
	_j++
	goto _10

_12:
	if uint32(*(*uint8)(unsafe.Pointer(_r + uintptr(_j))))-uint32('0') >= uint32(10) {
		goto _14
	}

	return int32(-1)

_14:
	goto _9

_8:
	if _z == 0 || _dp >= _i || uint32(*(*uint8)(unsafe.Pointer(_l + uintptr(_i))))-uint32('0') >= uint32(10) && uint32(*(*uint8)(unsafe.Pointer(_r + uintptr(_i))))-uint32('0') >= uint32(10) {
		goto _15
	}

	return int32(uint8(int32(*(*uint8)(unsafe.Pointer(_l + uintptr(_i))))-int32('0'))) - int32(uint8(int32(*(*uint8)(unsafe.Pointer(_r + uintptr(_i))))-int32('0')))

_15:
_9:
	return int32(*(*uint8)(unsafe.Pointer(_l + uintptr(_i)))) - int32(*(*uint8)(unsafe.Pointer(_r + uintptr(_i))))
}

type t995__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t995__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t329size_t = uint64

// linking swab.o

// Xswab is defined at swab.c:3:6
func Xswab(tls TLS, __src uintptr /* *void */, __dest uintptr /* *void */, _n int64) {
	var (
		_src  uintptr // *int8
		_dest uintptr // *int8
	)
	_src = __src
	_dest = __dest

_1:
	if _n <= int64(1) {
		goto _3
	}

	*(*int8)(unsafe.Pointer(_dest)) = *(*int8)(unsafe.Pointer(_src + 1))
	*(*int8)(unsafe.Pointer(_dest + 1)) = *(*int8)(unsafe.Pointer(_src))
	_dest += uintptr(2)
	_src += uintptr(2)
	_n = _n - int64(2)
	goto _1

_3:
}

type t996__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t996__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t43ssize_t = int64

// linking wcpcpy.o

// Xwcpcpy is defined at wcpcpy.c:3:9
func Xwcpcpy(tls TLS, _d uintptr /* *Twchar_t = int32 */, _s uintptr /* *Twchar_t = int32 */) (r uintptr /* *Twchar_t = int32 */) {
	return Xwcscpy(tls, _d, _s) + 4*uintptr(Xwcslen(tls, _s))
}

type t997__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t997__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t330size_t = uint64

// linking wcpncpy.o

// Xwcpncpy is defined at wcpncpy.c:3:9
func Xwcpncpy(tls TLS, _d uintptr /* *Twchar_t = int32 */, _s uintptr /* *Twchar_t = int32 */, _n uint64) (r uintptr /* *Twchar_t = int32 */) {
	return Xwcsncpy(tls, _d, _s, _n) + 4*uintptr(Xwcsnlen(tls, _s, _n))
}

type t998__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t998__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t331size_t = uint64

// linking wcscasecmp.o

// Xwcscasecmp is defined at wcscasecmp.c:4:5
func Xwcscasecmp(tls TLS, _l uintptr /* *Twchar_t = int32 */, _r uintptr /* *Twchar_t = int32 */) (r int32) {
	return Xwcsncasecmp(tls, _l, _r, uint64(18446744073709551615))
}

type t999__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t999__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t332size_t = uint64

// linking wcscasecmp_l.o

// Xwcscasecmp_l is defined at wcscasecmp_l.c:3:5
func Xwcscasecmp_l(tls TLS, _l uintptr /* *Twchar_t = int32 */, _r uintptr /* *Twchar_t = int32 */, _locale uintptr /* Tlocale_t = *S__locale_struct */) (r int32) {
	return Xwcscasecmp(tls, _l, _r)
}

type t1000__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t1000__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type s150__locale_struct struct{ uintptr }

// linking wcscat.o

// Xwcscat is defined at wcscat.c:3:9
func Xwcscat(tls TLS, _dest uintptr /* *Twchar_t = int32 */, _src uintptr /* *Twchar_t = int32 */) (r uintptr /* *Twchar_t = int32 */) {
	Xwcscpy(tls, _dest+4*uintptr(Xwcslen(tls, _dest)), _src)
	return _dest
}

type t1001__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t1001__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t333size_t = uint64

// linking wcschr.o

// Xwcschr is defined at wcschr.c:3:9
func Xwcschr(tls TLS, _s uintptr /* *Twchar_t = int32 */, _c int32) (r uintptr /* *Twchar_t = int32 */) {
	if _c != 0 {
		goto _1
	}

	return _s + 4*uintptr(Xwcslen(tls, _s))

_1:
_2:
	if *(*int32)(unsafe.Pointer(_s)) == 0 || *(*int32)(unsafe.Pointer(_s)) == _c {
		goto _4
	}

	_s += 4
	goto _2

_4:
	if *(*int32)(unsafe.Pointer(_s)) != 0 {
		return _s
	}

	return null
}

type t1002__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t1002__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t36wchar_t = int32

type t334size_t = uint64

// linking wcscmp.o

// Xwcscmp is defined at wcscmp.c:3:5
func Xwcscmp(tls TLS, _l uintptr /* *Twchar_t = int32 */, _r uintptr /* *Twchar_t = int32 */) (r int32) {
_1:
	if *(*int32)(unsafe.Pointer(_l)) != *(*int32)(unsafe.Pointer(_r)) || *(*int32)(unsafe.Pointer(_l)) == 0 || *(*int32)(unsafe.Pointer(_r)) == 0 {
		goto _3
	}

	_l += 4
	_r += 4
	goto _1

_3:
	return *(*int32)(unsafe.Pointer(_l)) - *(*int32)(unsafe.Pointer(_r))
}

type t1003__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t1003__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t37wchar_t = int32

// linking wcscpy.o

func set975(p *int32, v int32) int32 { *p = v; return v }

func postinc976(p *uintptr) uintptr { r := *p; *p += 4; return r }

// Xwcscpy is defined at wcscpy.c:3:9
func Xwcscpy(tls TLS, _d uintptr /* *Twchar_t = int32 */, _s uintptr /* *Twchar_t = int32 */) (r uintptr /* *Twchar_t = int32 */) {
	var _a uintptr // *Twchar_t = int32

	_a = _d
_1:
	if set975((*int32)(unsafe.Pointer(postinc976(&_d))), *(*int32)(unsafe.Pointer(postinc976(&_s)))) == 0 {
		goto _2
	}

	goto _1

_2:
	return _a
}

type t1004__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t1004__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t38wchar_t = int32

// linking wcscspn.o

func set977(p *uintptr, v uintptr) uintptr { *p = v; return v }

// Xwcscspn is defined at wcscspn.c:3:8
func Xwcscspn(tls TLS, _s uintptr /* *Twchar_t = int32 */, _c uintptr /* *Twchar_t = int32 */) (r uint64) {
	var _a uintptr // *Twchar_t = int32

	if *(*int32)(unsafe.Pointer(_c)) != 0 {
		goto _1
	}

	return Xwcslen(tls, _s)

_1:
	if *(*int32)(unsafe.Pointer(_c + 4)) != 0 {
		goto _2
	}

	if set977(&_s, Xwcschr(tls, set977(&_a, _s), *(*int32)(unsafe.Pointer(_c)))) != 0 {
		return uint64(int64((_s - _a) / 4))
	}

	return Xwcslen(tls, _a)

_2:
	_a = _s
_3:
	if *(*int32)(unsafe.Pointer(_s)) == 0 || Xwcschr(tls, _c, *(*int32)(unsafe.Pointer(_s))) != 0 {
		goto _5
	}

	_s += 4
	goto _3

_5:
	return uint64(int64((_s - _a) / 4))
}

type t1005__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t1005__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t335size_t = uint64

type t39wchar_t = int32

// linking wcsdup.o

// Xwcsdup is defined at wcsdup.c:5:9
func Xwcsdup(tls TLS, _s uintptr /* *Twchar_t = int32 */) (r uintptr /* *Twchar_t = int32 */) {
	var (
		_l uint64
		_d uintptr // *Twchar_t = int32
	)
	_l = Xwcslen(tls, _s)
	_d = Xmalloc(tls, (_l+uint64(1))*uint64(4))
	if _d != 0 {
		goto _1
	}

	return null

_1:
	return Xwmemcpy(tls, _d, _s, _l+uint64(1))
}

type t1006__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t1006__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t336size_t = uint64

// linking wcslen.o

// Xwcslen is defined at wcslen.c:3:8
func Xwcslen(tls TLS, _s uintptr /* *Twchar_t = int32 */) (r uint64) {
	var _a uintptr // *Twchar_t = int32

	_a = _s
_1:
	if *(*int32)(unsafe.Pointer(_s)) == 0 {
		goto _3
	}

	_s += 4
	goto _1

_3:
	return uint64(int64((_s - _a) / 4))
}

type t1007__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t1007__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t337size_t = uint64

type t40wchar_t = int32

// linking wcsncasecmp.o

func postinc978(p *uint64) uint64 { r := *p; *p += 18446744073709551615; return r }

// Xwcsncasecmp is defined at wcsncasecmp.c:4:5
func Xwcsncasecmp(tls TLS, _l uintptr /* *Twchar_t = int32 */, _r uintptr /* *Twchar_t = int32 */, _n uint64) (r int32) {
	if postinc978(&_n) != 0 {
		goto _1
	}

	return int32(0)

_1:
_2:
	if *(*int32)(unsafe.Pointer(_l)) == 0 || *(*int32)(unsafe.Pointer(_r)) == 0 || _n == 0 || *(*int32)(unsafe.Pointer(_l)) != *(*int32)(unsafe.Pointer(_r)) && Xtowlower(tls, uint32(*(*int32)(unsafe.Pointer(_l)))) != Xtowlower(tls, uint32(*(*int32)(unsafe.Pointer(_r)))) {
		goto _4
	}

	_l += 4
	_r += 4
	_n--
	goto _2

_4:
	return int32(Xtowlower(tls, uint32(*(*int32)(unsafe.Pointer(_l)))) - Xtowlower(tls, uint32(*(*int32)(unsafe.Pointer(_r)))))
}

type t1008__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t1008__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t338size_t = uint64

type t41wchar_t = int32

type t31wint_t = uint32

// linking wcsncasecmp_l.o

// Xwcsncasecmp_l is defined at wcsncasecmp_l.c:3:5
func Xwcsncasecmp_l(tls TLS, _l uintptr /* *Twchar_t = int32 */, _r uintptr /* *Twchar_t = int32 */, _n uint64, _locale uintptr /* Tlocale_t = *S__locale_struct */) (r int32) {
	return Xwcsncasecmp(tls, _l, _r, _n)
}

type t1009__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t1009__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t339size_t = uint64

type s151__locale_struct struct{ uintptr }

// linking wcsncat.o

func postinc979(p *uintptr) uintptr { r := *p; *p += 4; return r }

// Xwcsncat is defined at wcsncat.c:3:9
func Xwcsncat(tls TLS, _d uintptr /* *Twchar_t = int32 */, _s uintptr /* *Twchar_t = int32 */, _n uint64) (r uintptr /* *Twchar_t = int32 */) {
	var _a uintptr // *Twchar_t = int32

	_a = _d
	_d += 4 * uintptr(Xwcslen(tls, _d))
_1:
	if _n == 0 || *(*int32)(unsafe.Pointer(_s)) == 0 {
		goto _2
	}

	_n--
	*(*int32)(unsafe.Pointer(postinc979(&_d))) = *(*int32)(unsafe.Pointer(postinc979(&_s)))
	goto _1

_2:
	*(*int32)(unsafe.Pointer(postinc979(&_d))) = int32(0)
	return _a
}

type t1010__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t1010__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t340size_t = uint64

type t42wchar_t = int32

// linking wcsncmp.o

// Xwcsncmp is defined at wcsncmp.c:3:5
func Xwcsncmp(tls TLS, _l uintptr /* *Twchar_t = int32 */, _r uintptr /* *Twchar_t = int32 */, _n uint64) (r int32) {
_1:
	if _n == 0 || *(*int32)(unsafe.Pointer(_l)) != *(*int32)(unsafe.Pointer(_r)) || *(*int32)(unsafe.Pointer(_l)) == 0 || *(*int32)(unsafe.Pointer(_r)) == 0 {
		goto _3
	}

	_n--
	_l += 4
	_r += 4
	goto _1

_3:
	if _n != 0 {
		return *(*int32)(unsafe.Pointer(_l)) - *(*int32)(unsafe.Pointer(_r))
	}

	return int32(0)
}

type t1011__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t1011__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t341size_t = uint64

type t43wchar_t = int32

// linking wcsncpy.o

func postinc980(p *uintptr) uintptr { r := *p; *p += 4; return r }

// Xwcsncpy is defined at wcsncpy.c:3:9
func Xwcsncpy(tls TLS, _d uintptr /* *Twchar_t = int32 */, _s uintptr /* *Twchar_t = int32 */, _n uint64) (r uintptr /* *Twchar_t = int32 */) {
	var _a uintptr // *Twchar_t = int32

	_a = _d
_1:
	if _n == 0 || *(*int32)(unsafe.Pointer(_s)) == 0 {
		goto _2
	}

	_n--
	*(*int32)(unsafe.Pointer(postinc980(&_d))) = *(*int32)(unsafe.Pointer(postinc980(&_s)))
	goto _1

_2:
	Xwmemset(tls, _d, int32(0), _n)
	return _a
}

type t1012__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t1012__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t342size_t = uint64

type t44wchar_t = int32

// linking wcsnlen.o

// Xwcsnlen is defined at wcsnlen.c:3:8
func Xwcsnlen(tls TLS, _s uintptr /* *Twchar_t = int32 */, _n uint64) (r uint64) {
	var _z uintptr // *Twchar_t = int32

	_z = Xwmemchr(tls, _s, int32(0), _n)
	if _z == 0 {
		goto _1
	}

	_n = uint64(int64((_z - _s) / 4))
_1:
	return _n
}

type t1013__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t1013__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t343size_t = uint64

type t45wchar_t = int32

// linking wcspbrk.o

// Xwcspbrk is defined at wcspbrk.c:3:9
func Xwcspbrk(tls TLS, _s uintptr /* *Twchar_t = int32 */, _b uintptr /* *Twchar_t = int32 */) (r uintptr /* *Twchar_t = int32 */) {
	_s += 4 * uintptr(Xwcscspn(tls, _s, _b))
	if *(*int32)(unsafe.Pointer(_s)) != 0 {
		return _s
	}

	return null
}

type t1014__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t1014__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t46wchar_t = int32

type t344size_t = uint64

// linking wcsrchr.o

// Xwcsrchr is defined at wcsrchr.c:3:9
func Xwcsrchr(tls TLS, _s uintptr /* *Twchar_t = int32 */, _c int32) (r uintptr /* *Twchar_t = int32 */) {
	var _p uintptr // *Twchar_t = int32

	_p = _s + 4*uintptr(Xwcslen(tls, _s))
_1:
	if _p < _s || *(*int32)(unsafe.Pointer(_p)) == _c {
		goto _3
	}

	_p -= 4
	goto _1

_3:
	if _p >= _s {
		return _p
	}

	return null
}

type t1015__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t1015__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t47wchar_t = int32

type t345size_t = uint64

// linking wcsspn.o

// Xwcsspn is defined at wcsspn.c:3:8
func Xwcsspn(tls TLS, _s uintptr /* *Twchar_t = int32 */, _c uintptr /* *Twchar_t = int32 */) (r uint64) {
	var _a uintptr // *Twchar_t = int32

	_a = _s
_1:
	if *(*int32)(unsafe.Pointer(_s)) == 0 || Xwcschr(tls, _c, *(*int32)(unsafe.Pointer(_s))) == 0 {
		goto _3
	}

	_s += 4
	goto _1

_3:
	return uint64(int64((_s - _a) / 4))
}

type t1016__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t1016__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t346size_t = uint64

type t48wchar_t = int32

// linking wcsstr.o

// Xwcsstr is defined at wcsstr.c:93:9
func Xwcsstr(tls TLS, _h uintptr /* *Twchar_t = int32 */, _n uintptr /* *Twchar_t = int32 */) (r uintptr /* *Twchar_t = int32 */) {
	if *(*int32)(unsafe.Pointer(_n)) != 0 {
		goto _1
	}

	return _h

_1:
	if *(*int32)(unsafe.Pointer(_h)) != 0 {
		goto _2
	}

	return null

_2:
	_h = Xwcschr(tls, _h, *(*int32)(unsafe.Pointer(_n)))
	if _h != 0 && *(*int32)(unsafe.Pointer(_n + 4)) != 0 {
		goto _3
	}

	return _h

_3:
	if *(*int32)(unsafe.Pointer(_h + 4)) != 0 {
		goto _4
	}

	return null

_4:
	return xtwoway_wcsstr(tls, _h, _n)
}

type t1017__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t1017__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t49wchar_t = int32

func set981(p *uint64, v uint64) uint64 { *p = v; return v }

func postinc982(p *uint64) uint64 { r := *p; *p += 1; return r }

// xtwoway_wcsstr is defined at wcsstr.c:6:16
func xtwoway_wcsstr(tls TLS, _h uintptr /* *Twchar_t = int32 */, _n uintptr /* *Twchar_t = int32 */) (r uintptr /* *Twchar_t = int32 */) {
	var (
		_z    uintptr // *Twchar_t = int32
		_l    uint64
		_ip   uint64
		_jp   uint64
		_k    uint64
		_p    uint64
		_ms   uint64
		_p0   uint64
		_mem  uint64
		_mem0 uint64
		_grow uint64
		_z2   uintptr // *Twchar_t = int32
	)
	_l = uint64(0)
_1:
	if *(*int32)(unsafe.Pointer(_n + 4*uintptr(_l))) == 0 || *(*int32)(unsafe.Pointer(_h + 4*uintptr(_l))) == 0 {
		goto _3
	}

	_l++
	goto _1

_3:
	if *(*int32)(unsafe.Pointer(_n + 4*uintptr(_l))) == 0 {
		goto _4
	}

	return null

_4:
	_ip = uint64(18446744073709551615)
	_jp = uint64(0)
	_k = set981(&_p, uint64(1))
_5:
	if _jp+_k >= _l {
		goto _6
	}

	if *(*int32)(unsafe.Pointer(_n + 4*uintptr(_ip+_k))) != *(*int32)(unsafe.Pointer(_n + 4*uintptr(_jp+_k))) {
		goto _7
	}

	if _k != _p {
		goto _9
	}

	_jp = _jp + _p
	_k = uint64(1)
	goto _10

_9:
	_k++
_10:
	goto _8

_7:
	if *(*int32)(unsafe.Pointer(_n + 4*uintptr(_ip+_k))) <= *(*int32)(unsafe.Pointer(_n + 4*uintptr(_jp+_k))) {
		goto _11
	}

	_jp = _jp + _k
	_k = uint64(1)
	_p = _jp - _ip
	goto _12

_11:
	_ip = postinc982(&_jp)
	_k = set981(&_p, uint64(1))
_12:
_8:
	goto _5

_6:
	_ms = _ip
	_p0 = _p
	_ip = uint64(18446744073709551615)
	_jp = uint64(0)
	_k = set981(&_p, uint64(1))
_13:
	if _jp+_k >= _l {
		goto _14
	}

	if *(*int32)(unsafe.Pointer(_n + 4*uintptr(_ip+_k))) != *(*int32)(unsafe.Pointer(_n + 4*uintptr(_jp+_k))) {
		goto _15
	}

	if _k != _p {
		goto _17
	}

	_jp = _jp + _p
	_k = uint64(1)
	goto _18

_17:
	_k++
_18:
	goto _16

_15:
	if *(*int32)(unsafe.Pointer(_n + 4*uintptr(_ip+_k))) >= *(*int32)(unsafe.Pointer(_n + 4*uintptr(_jp+_k))) {
		goto _19
	}

	_jp = _jp + _k
	_k = uint64(1)
	_p = _jp - _ip
	goto _20

_19:
	_ip = postinc982(&_jp)
	_k = set981(&_p, uint64(1))
_20:
_16:
	goto _13

_14:
	if _ip+uint64(1) <= _ms+uint64(1) {
		goto _21
	}

	_ms = _ip
	goto _22

_21:
	_p = _p0
_22:
	if Xwmemcmp(tls, _n, _n+4*uintptr(_p), _ms+uint64(1)) == 0 {
		goto _23
	}

	_mem0 = uint64(0)
	_p = func() uint64 {
		if _ms > _l-_ms-uint64(1) {
			return _ms
		}
		return _l - _ms - uint64(1)
	}() + uint64(1)
	goto _24

_23:
	_mem0 = _l - _p
_24:
	_mem = uint64(0)
	_z = _h

_25:
	if uint64(int64((_z-_h)/4)) >= _l {
		goto _28
	}

	_grow = _l | uint64(63)
	_z2 = Xwmemchr(tls, _z, int32(0), _grow)
	if _z2 == 0 {
		goto _29
	}

	_z = _z2
	if uint64(int64((_z-_h)/4)) >= _l {
		goto _31
	}

	return null

_31:
	goto _30

_29:
	_z += 4 * uintptr(_grow)
_30:
_28:
	_k = func() uint64 {
		if _ms+uint64(1) > _mem {
			return _ms + uint64(1)
		}
		return _mem
	}()
_32:
	if *(*int32)(unsafe.Pointer(_n + 4*uintptr(_k))) == 0 || *(*int32)(unsafe.Pointer(_n + 4*uintptr(_k))) != *(*int32)(unsafe.Pointer(_h + 4*uintptr(_k))) {
		goto _34
	}

	_k++
	goto _32

_34:
	if *(*int32)(unsafe.Pointer(_n + 4*uintptr(_k))) == 0 {
		goto _35
	}

	_h += 4 * uintptr(_k-_ms)
	_mem = uint64(0)
	goto _26

_35:
	_k = _ms + uint64(1)
_36:
	if _k <= _mem || *(*int32)(unsafe.Pointer(_n + 4*uintptr(_k-uint64(1)))) != *(*int32)(unsafe.Pointer(_h + 4*uintptr(_k-uint64(1)))) {
		goto _38
	}

	_k--
	goto _36

_38:
	if _k > _mem {
		goto _39
	}

	return _h

_39:
	_h += 4 * uintptr(_p)
	_mem = _mem0
_26:
	goto _25
	return r
}

type t347size_t = uint64

// linking wcstok.o

func set983(p *uintptr, v uintptr) uintptr { *p = v; return v }

func postinc984(p *uintptr) uintptr { r := *p; *p += 4; return r }

// Xwcstok is defined at wcstok.c:3:9
func Xwcstok(tls TLS, _s uintptr /* *Twchar_t = int32 */, _sep uintptr /* *Twchar_t = int32 */, _p uintptr /* **Twchar_t = int32 */) (r uintptr /* *Twchar_t = int32 */) {
	if _s != 0 || set983(&_s, *(*uintptr)(unsafe.Pointer(_p))) != 0 {
		goto _1
	}

	return null

_1:
	_s += 4 * uintptr(Xwcsspn(tls, _s, _sep))
	if *(*int32)(unsafe.Pointer(_s)) != 0 {
		goto _2
	}

	return set983((*uintptr)(unsafe.Pointer(_p)), null)

_2:
	*(*uintptr)(unsafe.Pointer(_p)) = _s + 4*uintptr(Xwcscspn(tls, _s, _sep))
	if **(**int32)(unsafe.Pointer(_p)) == 0 {
		goto _3
	}

	*(*int32)(unsafe.Pointer(postinc984((*uintptr)(unsafe.Pointer(_p))))) = int32(0)
	goto _4

_3:
	*(*uintptr)(unsafe.Pointer(_p)) = null
_4:
	return _s
}

type t1018__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t1018__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t50wchar_t = int32

type t348size_t = uint64

// linking wcswcs.o

// Xwcswcs is defined at wcswcs.c:3:9
func Xwcswcs(tls TLS, _haystack uintptr /* *Twchar_t = int32 */, _needle uintptr /* *Twchar_t = int32 */) (r uintptr /* *Twchar_t = int32 */) {
	return Xwcsstr(tls, _haystack, _needle)
}

type t1019__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t1019__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// linking wmemchr.o

// Xwmemchr is defined at wmemchr.c:3:9
func Xwmemchr(tls TLS, _s uintptr /* *Twchar_t = int32 */, _c int32, _n uint64) (r uintptr /* *Twchar_t = int32 */) {
_1:
	if _n == 0 || *(*int32)(unsafe.Pointer(_s)) == _c {
		goto _3
	}

	_n--
	_s += 4
	goto _1

_3:
	if _n != 0 {
		return _s
	}

	return null
}

type t1020__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t1020__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t51wchar_t = int32

type t349size_t = uint64

// linking wmemcmp.o

// Xwmemcmp is defined at wmemcmp.c:3:5
func Xwmemcmp(tls TLS, _l uintptr /* *Twchar_t = int32 */, _r uintptr /* *Twchar_t = int32 */, _n uint64) (r int32) {
_1:
	if _n == 0 || *(*int32)(unsafe.Pointer(_l)) != *(*int32)(unsafe.Pointer(_r)) {
		goto _3
	}

	_n--
	_l += 4
	_r += 4
	goto _1

_3:
	if _n != 0 {
		return *(*int32)(unsafe.Pointer(_l)) - *(*int32)(unsafe.Pointer(_r))
	}

	return int32(0)
}

type t1021__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t1021__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t350size_t = uint64

type t52wchar_t = int32

// linking wmemcpy.o

func postinc985(p *uint64) uint64 { r := *p; *p += 18446744073709551615; return r }

func postinc986(p *uintptr) uintptr { r := *p; *p += 4; return r }

// Xwmemcpy is defined at wmemcpy.c:3:9
func Xwmemcpy(tls TLS, _d uintptr /* *Twchar_t = int32 */, _s uintptr /* *Twchar_t = int32 */, _n uint64) (r uintptr /* *Twchar_t = int32 */) {
	var _a uintptr // *Twchar_t = int32

	_a = _d
_1:
	if postinc985(&_n) == 0 {
		goto _2
	}

	*(*int32)(unsafe.Pointer(postinc986(&_d))) = *(*int32)(unsafe.Pointer(postinc986(&_s)))
	goto _1

_2:
	return _a
}

type t1022__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t1022__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t351size_t = uint64

type t53wchar_t = int32

// linking wmemmove.o

func postinc987(p *uint64) uint64 { r := *p; *p += 18446744073709551615; return r }

func postinc988(p *uintptr) uintptr { r := *p; *p += 4; return r }

// Xwmemmove is defined at wmemmove.c:3:9
func Xwmemmove(tls TLS, _d uintptr /* *Twchar_t = int32 */, _s uintptr /* *Twchar_t = int32 */, _n uint64) (r uintptr /* *Twchar_t = int32 */) {
	var _d0 uintptr // *Twchar_t = int32

	_d0 = _d
	if uint64(int64((_d-_s)/4)) >= _n {
		goto _1
	}

_3:
	if postinc987(&_n) == 0 {
		goto _4
	}

	*(*int32)(unsafe.Pointer(_d + 4*uintptr(_n))) = *(*int32)(unsafe.Pointer(_s + 4*uintptr(_n)))
	goto _3

_4:
	goto _2

_1:
_5:
	if postinc987(&_n) == 0 {
		goto _6
	}

	*(*int32)(unsafe.Pointer(postinc988(&_d))) = *(*int32)(unsafe.Pointer(postinc988(&_s)))
	goto _5

_6:
_2:
	return _d0
}

type t1023__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t1023__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t352size_t = uint64

type t54wchar_t = int32

// linking wmemset.o

func postinc989(p *uint64) uint64 { r := *p; *p += 18446744073709551615; return r }

func postinc990(p *uintptr) uintptr { r := *p; *p += 4; return r }

// Xwmemset is defined at wmemset.c:3:9
func Xwmemset(tls TLS, _d uintptr /* *Twchar_t = int32 */, _c int32, _n uint64) (r uintptr /* *Twchar_t = int32 */) {
	var _ret uintptr // *Twchar_t = int32

	_ret = _d
_1:
	if postinc989(&_n) == 0 {
		goto _2
	}

	*(*int32)(unsafe.Pointer(postinc990(&_d))) = _c
	goto _1

_2:
	return _ret
}

type t1024__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t1024__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t55wchar_t = int32

type t353size_t = uint64

// linking __randname.o

// X__randname is defined at __randname.c:8:6
func X__randname(tls TLS, _template uintptr /* *int8 */) (r uintptr /* *int8 */) {
	esc := MustMalloc(16)
	var (
		_i  int32
		_ts = esc // *Stimespec
		_r  uint64
	)
	defer Free(esc)
	X__clock_gettime(tls, int32(0), _ts)
	_r = uint64(*(*int64)(unsafe.Pointer(_ts + 8))*int64(65537)) ^ (uint64(_ts)/uint64(16) + uint64(_template))
	_i = int32(0)
_1:
	if _i >= int32(6) {
		goto _3
	}

	*(*int8)(unsafe.Pointer(_template + uintptr(_i))) = int8(uint64('A') + _r&uint64(15) + _r&uint64(16)*uint64(2))
	_i++
	_r = _r >> uint32(5)
	goto _1

_3:
	return _template
}

type t1025__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t1025__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type s34timespec = struct {
	Ftv_sec  int64
	Ftv_nsec int64
}

type t56uintptr_t = uint64

type t50time_t = int64

type t3clockid_t = int32

// linking mkdtemp.o

func preinc991(p *int32) int32 { *p += -1; return *p }

// Xmkdtemp is defined at mkdtemp.c:8:6
func Xmkdtemp(tls TLS, _template uintptr /* *int8 */) (r uintptr /* *int8 */) {
	var (
		_l       uint64
		_retries int32
	)
	_l = Xstrlen(tls, _template)
	_retries = int32(100)
	if _l >= uint64(6) && Xmemcmp(tls, (_template+uintptr(_l))-uintptr(6), ts+5120 /* "XXXXXX" */, uint64(6)) == 0 {
		goto _1
	}

	*(*int32)(unsafe.Pointer(X__errno_location(tls))) = int32(22)
	return null

_1:
_2:
	X__randname(tls, (_template+uintptr(_l))-uintptr(6))
	if Xmkdir(tls, _template, uint32(0700)) != 0 {
		goto _5
	}

	return _template

_5:
	if (preinc991(&_retries) != 0) && (*(*int32)(unsafe.Pointer(X__errno_location(tls))) == int32(17)) {
		goto _2
	}

	Xmemcpy(tls, (_template+uintptr(_l))-uintptr(6), ts+5120 /* "XXXXXX" */, uint64(6))
	return null
}

type t1026__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t1026__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t354size_t = uint64

type t37mode_t = uint32

// linking mkostemp.o

// Xmkostemp is defined at mkostemp.c:7:5
func Xmkostemp(tls TLS, _template uintptr /* *int8 */, _flags int32) (r int32) {
	return X__mkostemps(tls, _template, int32(0), _flags)
}

type t1027__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t1027__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// linking mkostemps.o

func set992(p *int32, v int32) int32 { *p = v; return v }

func preinc993(p *int32) int32 { *p += -1; return *p }

// X__mkostemps is defined at mkostemps.c:10:5
func X__mkostemps(tls TLS, _template uintptr /* *int8 */, _len int32, _flags int32) (r int32) {
	var (
		_l       uint64
		_fd      int32
		_retries int32
	)
	_l = Xstrlen(tls, _template)
	if _l >= uint64(6) && uint64(_len) <= _l-uint64(6) && Xmemcmp(tls, ((_template+uintptr(_l))-uintptr(_len))-uintptr(6), ts+5120 /* "XXXXXX" */, uint64(6)) == 0 {
		goto _1
	}

	*(*int32)(unsafe.Pointer(X__errno_location(tls))) = int32(22)
	return int32(-1)

_1:
	_flags = _flags - _flags&int32(2097155)
	_retries = int32(100)
_2:
	X__randname(tls, ((_template+uintptr(_l))-uintptr(_len))-uintptr(6))
	if set992(&_fd, Xopen(tls, _template, _flags|int32(02)|int32(0100)|int32(0200), int32(0600))) < int32(0) {
		goto _5
	}

	return _fd

_5:
	if (preinc993(&_retries) != 0) && (*(*int32)(unsafe.Pointer(X__errno_location(tls))) == int32(17)) {
		goto _2
	}

	Xmemcpy(tls, ((_template+uintptr(_l))-uintptr(_len))-uintptr(6), ts+5120 /* "XXXXXX" */, uint64(6))
	return int32(-1)
}

type t1028__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t1028__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t355size_t = uint64

// linking mkstemp.o

// Xmkstemp is defined at mkstemp.c:6:5
func Xmkstemp(tls TLS, _template uintptr /* *int8 */) (r int32) {
	return X__mkostemps(tls, _template, int32(0), int32(0))
}

type t1029__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t1029__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// linking mkstemps.o

// Xmkstemps is defined at mkstemps.c:7:5
func Xmkstemps(tls TLS, _template uintptr /* *int8 */, _len int32) (r int32) {
	return X__mkostemps(tls, _template, _len, int32(0))
}

type t1030__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t1030__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// linking mktemp.o

func preinc994(p *int32) int32 { *p += -1; return *p }

// Xmktemp is defined at mktemp.c:9:6
func Xmktemp(tls TLS, _template uintptr /* *int8 */) (r uintptr /* *int8 */) {
	esc := MustMalloc(144)
	var (
		_l       uint64
		_retries int32
		_st      = esc // *Sstat
	)
	defer Free(esc)
	_l = Xstrlen(tls, _template)
	_retries = int32(100)
	if _l >= uint64(6) && Xmemcmp(tls, (_template+uintptr(_l))-uintptr(6), ts+5120 /* "XXXXXX" */, uint64(6)) == 0 {
		goto _1
	}

	*(*int32)(unsafe.Pointer(X__errno_location(tls))) = int32(22)
	*(*int8)(unsafe.Pointer(_template)) = int8(0)
	return _template

_1:
_2:
	X__randname(tls, (_template+uintptr(_l))-uintptr(6))
	if Xstat(tls, _template, _st) == 0 {
		goto _5
	}

	if *(*int32)(unsafe.Pointer(X__errno_location(tls))) == int32(2) {
		goto _6
	}

	*(*int8)(unsafe.Pointer(_template)) = int8(0)
_6:
	return _template

_5:
	if preinc994(&_retries) != 0 {
		goto _2
	}

	*(*int8)(unsafe.Pointer(_template)) = int8(0)
	*(*int32)(unsafe.Pointer(X__errno_location(tls))) = int32(17)
	return _template
}

type t1031__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t1031__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t356size_t = uint64

type s14stat = struct {
	Fst_dev     uint64
	Fst_ino     uint64
	Fst_nlink   uint64
	Fst_mode    uint32
	Fst_uid     uint32
	Fst_gid     uint32
	F__pad0     uint32
	Fst_rdev    uint64
	Fst_size    int64
	Fst_blksize int64
	Fst_blocks  int64
	Fst_atim    s35timespec
	Fst_mtim    s35timespec
	Fst_ctim    s35timespec
	F__unused   [3]int64
}

type t18dev_t = uint64

type t20ino_t = uint64

type t14nlink_t = uint64

type t38mode_t = uint32

type t32uid_t = uint32

type t33gid_t = uint32

type t123off_t = int64

type t14blksize_t = int64

type t14blkcnt_t = int64

type s35timespec = struct {
	Ftv_sec  int64
	Ftv_nsec int64
}

type t51time_t = int64

// linking cfgetospeed.o

// Xcfgetospeed is defined at cfgetospeed.c:5:9
func Xcfgetospeed(tls TLS, _tio uintptr /* *Stermios */) (r uint32) {
	return *(*uint32)(unsafe.Pointer(_tio + 8)) & uint32(010017)
}

// Xcfgetispeed is defined at cfgetospeed.c:10:9
func Xcfgetispeed(tls TLS, _tio uintptr /* *Stermios */) (r uint32) {
	return Xcfgetospeed(tls, _tio)
}

type t1032__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t1032__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t3speed_t = uint32

type s3termios = struct {
	Fc_iflag    uint32
	Fc_oflag    uint32
	Fc_cflag    uint32
	Fc_lflag    uint32
	Fc_line     uint8
	Fc_cc       [32]uint8
	F__c_ispeed uint32
	F__c_ospeed uint32
}

type t3tcflag_t = uint32

type t3cc_t = uint8

// linking cfmakeraw.o

// Xcfmakeraw is defined at cfmakeraw.c:4:6
func Xcfmakeraw(tls TLS, _t uintptr /* *Stermios */) {
	{
		p := (*uint32)(unsafe.Pointer(_t))
		*p = *p & uint32(4294965780)
	}
	{
		p := (*uint32)(unsafe.Pointer(_t + 4))
		*p = *p & uint32(4294967294)
	}
	{
		p := (*uint32)(unsafe.Pointer(_t + 12))
		*p = *p & uint32(4294934452)
	}
	{
		p := (*uint32)(unsafe.Pointer(_t + 8))
		*p = *p & uint32(4294966991)
	}
	{
		p := (*uint32)(unsafe.Pointer(_t + 8))
		*p = *p | uint32(060)
	}
	*(*uint8)(unsafe.Pointer((_t + 17) + 6)) = uint8(1)
	*(*uint8)(unsafe.Pointer((_t + 17) + 5)) = uint8(0)
}

type t1033__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t1033__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type s4termios = struct {
	Fc_iflag    uint32
	Fc_oflag    uint32
	Fc_cflag    uint32
	Fc_lflag    uint32
	Fc_line     uint8
	Fc_cc       [32]uint8
	F__c_ispeed uint32
	F__c_ospeed uint32
}

type t4tcflag_t = uint32

type t4cc_t = uint8

type t4speed_t = uint32

// linking cfsetospeed.o

// Xcfsetospeed is defined at cfsetospeed.c:7:5
func Xcfsetospeed(tls TLS, _tio uintptr /* *Stermios */, _speed uint32) (r int32) {
	if (_speed & uint32(4294963184)) == 0 {
		goto _1
	}

	*(*int32)(unsafe.Pointer(X__errno_location(tls))) = int32(22)
	return int32(-1)

_1:
	{
		p := (*uint32)(unsafe.Pointer(_tio + 8))
		*p = *p & uint32(4294963184)
	}
	{
		p := (*uint32)(unsafe.Pointer(_tio + 8))
		*p = *p | _speed
	}
	return int32(0)
}

// Xcfsetispeed is defined at cfsetospeed.c:18:5
func Xcfsetispeed(tls TLS, _tio uintptr /* *Stermios */, _speed uint32) (r int32) {
	if _speed != 0 {
		return Xcfsetospeed(tls, _tio, _speed)
	}

	return int32(0)
}

type t1034__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t1034__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t5speed_t = uint32

type s5termios = struct {
	Fc_iflag    uint32
	Fc_oflag    uint32
	Fc_cflag    uint32
	Fc_lflag    uint32
	Fc_line     uint8
	Fc_cc       [32]uint8
	F__c_ispeed uint32
	F__c_ospeed uint32
}

type t5tcflag_t = uint32

type t5cc_t = uint8

// linking tcdrain.o

// Xtcdrain is defined at tcdrain.c:7:5
func Xtcdrain(tls TLS, _fd int32) (r int32) {
	X__assert_fail(tls, ts+0 /* "TODO(ccgo)" */, ts+5128 /* "src/termios/tcdr..." */, int32(9), x995__func__)
	return r
}

type t1035__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t1035__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// x1__func__ [8]int8, escapes: true, tcdrain.c:8:1
var x995__func__ = ds + 46368

// linking tcflow.o

// Xtcflow is defined at tcflow.c:4:5
func Xtcflow(tls TLS, _fd int32, _action int32) (r int32) {
	return Xioctl(tls, _fd, int32(0x540a), _action)
}

type t1036__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t1036__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// linking tcflush.o

// Xtcflush is defined at tcflush.c:4:5
func Xtcflush(tls TLS, _fd int32, _queue int32) (r int32) {
	return Xioctl(tls, _fd, int32(0x540b), _queue)
}

type t1037__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t1037__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// linking tcgetattr.o

// Xtcgetattr is defined at tcgetattr.c:4:5
func Xtcgetattr(tls TLS, _fd int32, _tio uintptr /* *Stermios */) (r int32) {
	if Xioctl(tls, _fd, int32(0x5401), _tio) == 0 {
		goto _1
	}

	return int32(-1)

_1:
	return int32(0)
}

type t1038__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t1038__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type s6termios = struct {
	Fc_iflag    uint32
	Fc_oflag    uint32
	Fc_cflag    uint32
	Fc_lflag    uint32
	Fc_line     uint8
	Fc_cc       [32]uint8
	F__c_ispeed uint32
	F__c_ospeed uint32
}

type t6tcflag_t = uint32

type t6cc_t = uint8

type t6speed_t = uint32

// linking tcgetsid.o

// Xtcgetsid is defined at tcgetsid.c:4:7
func Xtcgetsid(tls TLS, _fd int32) (r int32) {
	esc := MustMalloc(4)
	var _sid = esc // *int32
	defer Free(esc)
	if Xioctl(tls, _fd, int32(0x5429), _sid) >= int32(0) {
		goto _1
	}

	return int32(-1)

_1:
	return *(*int32)(unsafe.Pointer(_sid))
}

type t1039__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t1039__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t48pid_t = int32

// linking tcsendbreak.o

// Xtcsendbreak is defined at tcsendbreak.c:4:5
func Xtcsendbreak(tls TLS, _fd int32, _dur int32) (r int32) {
	return Xioctl(tls, _fd, int32(0x5409), int32(0))
}

type t1040__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t1040__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// linking tcsetattr.o

// Xtcsetattr is defined at tcsetattr.c:5:5
func Xtcsetattr(tls TLS, _fd int32, _act int32, _tio uintptr /* *Stermios */) (r int32) {
	if _act >= int32(0) && _act <= int32(2) {
		goto _1
	}

	*(*int32)(unsafe.Pointer(X__errno_location(tls))) = int32(22)
	return int32(-1)

_1:
	return Xioctl(tls, _fd, int32(0x5402)+_act, _tio)
}

type t1041__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t1041__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type s7termios = struct {
	Fc_iflag    uint32
	Fc_oflag    uint32
	Fc_cflag    uint32
	Fc_lflag    uint32
	Fc_line     uint8
	Fc_cc       [32]uint8
	F__c_ispeed uint32
	F__c_ospeed uint32
}

type t7tcflag_t = uint32

type t7cc_t = uint8

type t7speed_t = uint32

// linking __futex.o

// X__futex is defined at __futex.c:4:5
func X__futex(tls TLS, _addr uintptr /* *int32 */, _op int32, _val int32, _ts uintptr /* *void */) (r int32) {
	return int32(X__syscall_ret(tls, uint64(x28__syscall4(tls, int64(202), int64(_addr), int64(_op), int64(_val), int64(_ts)))))
}

type t1042__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t1042__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// x__syscall4 is defined at syscall_arch.h:42:22
func x28__syscall4(tls TLS, _n int64, _a1 int64, _a2 int64, _a3 int64, _a4 int64) (r int64) {
	return X__syscall(tls, _n, _a1, _a2, _a3, _a4, int64(0), int64(0))
}

// linking __lock.o

// X__lock is defined at __lock.c:19:6
func X__lock(tls TLS, _l uintptr /* *int32 */) {
	var (
		_current int32
		_i       uint32
		_val     int32
		_1val    int32
	)
	if *(*int32)(unsafe.Pointer(X__libc + 12)) != 0 {
		goto _1
	}

	return

_1:
	_current = x4a_cas(tls, _l, int32(0), int32(-2147483647))
	if _current != 0 {
		goto _2
	}

	return

_2:
	_i = uint32(0)
_3:
	if _i >= uint32(10) {
		goto _5
	}

	if _current >= int32(0) {
		goto _6
	}

	_current = _current - int32(-2147483647)
_6:
	_val = x4a_cas(tls, _l, _current, int32(-2147483648)+(_current+int32(1)))
	if _val != _current {
		goto _7
	}

	return

_7:
	_current = _val
	_i++
	goto _3

_5:
	_current = xa_fetch_add(tls, _l, int32(1)) + int32(1)

_8:
	if _current >= int32(0) {
		goto _11
	}

	x1__futexwait(tls, _l, _current, int32(1))
	_current = _current - int32(-2147483647)
_11:
	_1val = x4a_cas(tls, _l, _current, int32(-2147483648)+_current)
	if _1val != _current {
		goto _12
	}

	return

_12:
	_current = _1val
	goto _8
}

// X__unlock is defined at __lock.c:52:6
func X__unlock(tls TLS, _l uintptr /* *int32 */) {
	if *(*int32)(unsafe.Pointer(_l)) >= int32(0) {
		goto _1
	}

	if xa_fetch_add(tls, _l, int32(2147483647)) == int32(-2147483647) {
		goto _2
	}

	x2__wake(tls, _l, int32(1), int32(1))
_2:
_1:
}

type t1043__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t1043__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// xa_cas is defined at atomic_arch.h:4:19
func x4a_cas(tls TLS, _p uintptr /* *int32 */, _t int32, _s int32) (r int32) {
	return a_cas(_p, _t, _s)
	return r
}

// xa_fetch_add is defined at atomic_arch.h:34:19
func xa_fetch_add(tls TLS, _p uintptr /* *int32 */, _v int32) (r int32) {
	return a_fetch_add(_p, _v)
	return r
}

// x__futexwait is defined at pthread_impl.h:161:20
func x1__futexwait(tls TLS, _addr uintptr /* *void */, _val int32, _priv int32) {
	if _priv == 0 {
		goto _1
	}

	_priv = int32(128)
_1:
	if x29__syscall4(tls, int64(202), int64(_addr), int64(int32(0)|_priv), int64(_val), int64(0)) == int64(-38) {
		x29__syscall4(tls, int64(202), int64(_addr), int64(0), int64(_val), int64(0))
	}
}

// x__wake is defined at pthread_impl.h:154:20
func x2__wake(tls TLS, _addr uintptr /* *void */, _cnt int32, _priv int32) {
	if _priv == 0 {
		goto _1
	}

	_priv = int32(128)
_1:
	if _cnt >= int32(0) {
		goto _2
	}

	_cnt = int32(0x7fffffff)
_2:
	if x54__syscall3(tls, int64(202), int64(_addr), int64(int32(1)|_priv), int64(_cnt)) == int64(-38) {
		x54__syscall3(tls, int64(202), int64(_addr), int64(1), int64(_cnt))
	}
}

// x__syscall4 is defined at syscall_arch.h:42:22
func x29__syscall4(tls TLS, _n int64, _a1 int64, _a2 int64, _a3 int64, _a4 int64) (r int64) {
	return X__syscall(tls, _n, _a1, _a2, _a3, _a4, int64(0), int64(0))
}

// x__syscall3 is defined at syscall_arch.h:33:22
func x54__syscall3(tls TLS, _n int64, _a1 int64, _a2 int64, _a3 int64) (r int64) {
	return X__syscall(tls, _n, _a1, _a2, _a3, int64(0), int64(0), int64(0))
}

// linking __set_thread_area.o

// X__set_thread_area is defined at __set_thread_area.c:3:5
func X__set_thread_area(tls TLS, _p uintptr /* *void */) (r int32) {
	return int32(x37__syscall1(tls, int64(205), int64(_p)))
}

type t1044__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t1044__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// x__syscall1 is defined at syscall_arch.h:16:22
func x37__syscall1(tls TLS, _n int64, _a1 int64) (r int64) {
	return X__syscall(tls, _n, _a1, int64(0), int64(0), int64(0), int64(0), int64(0))
}

// linking __syscall_cp.o

// X__syscall_cp is defined at __syscall_cp.c:16:6
func X__syscall_cp(tls TLS, _nr int64, _u int64, _v int64, _w int64, _x int64, _y int64, _z int64) (r int64) {
	return X__syscall_cp_c(tls, _nr, _u, _v, _w, _x, _y, _z)
}

type t1045__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t1045__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t7syscall_arg_t = int64

// xsccp is defined at __syscall_cp.c:7:13
func xsccp(tls TLS, _nr int64, _u int64, _v int64, _w int64, _x int64, _y int64, _z int64) (r int64) {
	return X__syscall(tls, _nr, _u, _v, _w, _x, _y, _z)
}

// linking __timedwait.o

func set996(p *int64, v int64) int64 { *p = v; return v }

// X__timedwait_cp is defined at __timedwait.c:12:5
func X__timedwait_cp(tls TLS, _addr uintptr /* *int32 */, _val int32, _clk int32, _at uintptr /* *Stimespec */, _priv int32) (r int32) {
	esc := MustMalloc(16)
	var (
		_r   int32
		_to  = esc   // *Stimespec
		_top uintptr // *Stimespec
		_    = _top
	)
	defer Free(esc)
	_top = 0
	if _priv == 0 {
		goto _1
	}

	_priv = int32(128)
_1:
	if _at == 0 {
		goto _2
	}

	if uint64(*(*int64)(unsafe.Pointer(_at + 8))) < uint64(1000000000) {
		goto _3
	}

	return int32(22)

_3:
	if X__clock_gettime(tls, _clk, _to) == 0 {
		goto _4
	}

	return int32(22)

_4:
	*(*int64)(unsafe.Pointer(_to)) = *(*int64)(unsafe.Pointer(_at)) - *(*int64)(unsafe.Pointer(_to))
	if set996((*int64)(unsafe.Pointer(_to+8)), *(*int64)(unsafe.Pointer(_at + 8))-*(*int64)(unsafe.Pointer(_to + 8))) >= int64(0) {
		goto _5
	}

	*(*int64)(unsafe.Pointer(_to))--
	{
		p := (*int64)(unsafe.Pointer(_to + 8))
		*p = *p + int64(1000000000)
	}
_5:
	if *(*int64)(unsafe.Pointer(_to)) >= int64(0) {
		goto _6
	}

	return int32(110)

_6:
	_top = _to
_2:
	X__assert_fail(tls, ts+0 /* "TODO(ccgo)" */, ts+5152 /* "src/thread/__tim..." */, int32(32), x997__func__)
	X__assert_fail(tls, ts+0 /* "TODO(ccgo)" */, ts+5152 /* "src/thread/__tim..." */, int32(34), x997__func__)
	if _r == int32(4) || _r == int32(110) || _r == int32(125) {
		goto _7
	}

	_r = int32(0)
_7:
	return _r
}

// X__timedwait is defined at __timedwait.c:41:5
func X__timedwait(tls TLS, _addr uintptr /* *int32 */, _val int32, _clk int32, _at uintptr /* *Stimespec */, _priv int32) (r int32) {
	esc := MustMalloc(4)
	var (
		_cs = esc // *int32
		_r  int32
	)
	defer Free(esc)
	X__pthread_setcancelstate(tls, int32(1), _cs)
	_r = X__timedwait_cp(tls, _addr, _val, _clk, _at, _priv)
	X__pthread_setcancelstate(tls, *(*int32)(unsafe.Pointer(_cs)), null)
	return _r
}

type t1046__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t1046__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t4clockid_t = int32

type s36timespec = struct {
	Ftv_sec  int64
	Ftv_nsec int64
}

// x1__func__ [15]int8, escapes: true, __timedwait.c:14:1
var x997__func__ = ds + 46376

type t52time_t = int64

// linking __tls_get_addr.o

// X__tls_get_addr is defined at __tls_get_addr.c:8:6
func X__tls_get_addr(tls TLS, _v uintptr /* *Tsize_t = uint64 */) (r uintptr /* *void */) {
	X__assert_fail(tls, ts+0 /* "TODO(ccgo)" */, ts+5180 /* "src/thread/__tls..." */, int32(10), x998__func__)
	return r
}

type t1047__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t1047__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// x1__func__ [15]int8, escapes: true, __tls_get_addr.c:9:1
var x998__func__ = ds + 46392

// linking __unmapself.o

// X__unmapself is defined at __unmapself.c:19:6
func X__unmapself(tls TLS, _base uintptr /* *void */, _size uint64) {
	var (
		_tid   int32
		_stack uintptr // *int8
	)
	_tid = *(*int32)(unsafe.Pointer(x32__pthread_self(tls) + 56))
	_stack = xshared_stack + uintptr(256)
	_stack -= uintptr(uint64(_stack) % uint64(16))
_1:
	if *(*int32)(unsafe.Pointer(x4lock)) == 0 && x5a_cas(tls, x4lock, int32(0), _tid) == 0 {
		goto _2
	}

	xa_spin(tls)
	goto _1

_2:
	x38__syscall1(tls, int64(218), int64(x4lock))
	xunmap_base = _base
	xunmap_size = _size
	X__assert_fail(tls, ts+0 /* "TODO(ccgo)" */, ts+5208 /* "src/thread/__unm..." */, int32(29), x999__func__)
}

type t1048__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t1048__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t357size_t = uint64

// x1__func__ [12]int8, escapes: true, __unmapself.c:20:1
var x999__func__ = ds + 46408

// x__pthread_self is defined at pthread_arch.h:1:30
func x32__pthread_self(tls TLS) (r uintptr /* *S__pthread */) {
	return uintptr(tls)
	return r
}

// xshared_stack [256]int8, escapes: true, __unmapself.c:11:13
var xshared_stack = bss + 6776

type t57uintptr_t = uint64

// xlock int32, escapes: true, __unmapself.c:8:21
var x4lock = bss + 7032

// xa_cas is defined at atomic_arch.h:4:19
func x5a_cas(tls TLS, _p uintptr /* *int32 */, _t int32, _s int32) (r int32) {
	return a_cas(_p, _t, _s)
	return r
}

// xa_spin is defined at atomic_arch.h:114:20
func xa_spin(tls TLS) {
	X__assert_fail(tls, ts+0 /* "TODO(ccgo)" */, ts+36 /* "arch/x86_64/atom..." */, int32(116), x1000__func__)
}

// x__syscall1 is defined at syscall_arch.h:16:22
func x38__syscall1(tls TLS, _n int64, _a1 int64) (r int64) {
	return X__syscall(tls, _n, _a1, int64(0), int64(0), int64(0), int64(0), int64(0))
}

// xunmap_base *void, escapes: false, __unmapself.c:9:13
var xunmap_base uintptr

// xunmap_size Tsize_t = uint64, escapes: false, __unmapself.c:10:15
var xunmap_size uint64

type s38__pthread = struct {
	Fself          uintptr // *S__pthread
	Fdtv           uintptr // **void
	Funused1       uintptr // *void
	Funused2       uintptr // *void
	Fsysinfo       uint64
	Fcanary        uint64
	Fcanary2       uint64
	Ftid           int32
	Ferrno_val     int32
	Fdetach_state  int32
	Fcancel        int32
	Fcanceldisable uint8
	Fcancelasync   uint8
	F74            uint8
	Fmap_base      uintptr // *uint8
	Fmap_size      uint64
	Fstack         uintptr // *void
	Fstack_size    uint64
	Fguard_size    uint64
	Fstart_arg     uintptr // *void
	Fstart         uintptr // *func(TLS, uintptr) uintptr
	Fresult        uintptr // *void
	Fcancelbuf     uintptr // *S__ptcb
	Ftsd           uintptr // **void
	Frobust_list   struct {
		Fhead    uintptr
		Foff     int64
		Fpending uintptr
	}
	Ftimer_id      int32
	Flocale        uintptr // Tlocale_t = *S__locale_struct
	Fkilllock      [1]int32
	Fdlerror_buf   uintptr // *int8
	Fstdio_locks   uintptr // *void
	Fcanary_at_end uint64
	Fdtv_copy      uintptr // **void
}

// x10__func__ [7]int8, escapes: true, atomic_arch.h:115:1
var x1000__func__ = ds + 46424

type s36__ptcb = struct {
	F__f    uintptr // *func(TLS, uintptr)
	F__x    uintptr // *void
	F__next uintptr // *S__ptcb
}

type s152__locale_struct = struct{ Fcat [6]uintptr }

// linking __wait.o

func postinc1001(p *int32) int32 { r := *p; *p += -1; return r }

// X__wait is defined at __wait.c:3:6
func X__wait(tls TLS, _addr uintptr /* *int32 */, _waiters uintptr /* *int32 */, _val int32, _priv int32) {
	var _spins int32

	_spins = int32(100)
	if _priv == 0 {
		goto _1
	}

	_priv = int32(128)
_1:
_2:
	if postinc1001(&_spins) == 0 || _waiters != 0 && *(*int32)(unsafe.Pointer(_waiters)) != 0 {
		goto _3
	}

	if *(*int32)(unsafe.Pointer(_addr)) != _val {
		goto _4
	}

	x1a_spin(tls)
	goto _5

_4:
	return

_5:
	goto _2

_3:
	if _waiters == 0 {
		goto _6
	}

	x1a_inc(tls, _waiters)
_6:
_7:
	if *(*int32)(unsafe.Pointer(_addr)) != _val {
		goto _8
	}

	if x30__syscall4(tls, int64(202), int64(_addr), int64(int32(0)|_priv), int64(_val), int64(0)) == int64(-38) {
		x30__syscall4(tls, int64(202), int64(_addr), int64(0), int64(_val), int64(0))
	}
	goto _7

_8:
	if _waiters == 0 {
		goto _9
	}

	x1a_dec(tls, _waiters)
_9:
}

type t1049__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t1049__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// xa_spin is defined at atomic_arch.h:114:20
func x1a_spin(tls TLS) {
	X__assert_fail(tls, ts+0 /* "TODO(ccgo)" */, ts+36 /* "arch/x86_64/atom..." */, int32(116), x1002__func__)
}

// xa_inc is defined at atomic_arch.h:80:20
func x1a_inc(tls TLS, _p uintptr /* *int32 */) {
	a_inc(_p)
}

// x__syscall4 is defined at syscall_arch.h:42:22
func x30__syscall4(tls TLS, _n int64, _a1 int64, _a2 int64, _a3 int64, _a4 int64) (r int64) {
	return X__syscall(tls, _n, _a1, _a2, _a3, _a4, int64(0), int64(0))
}

// xa_dec is defined at atomic_arch.h:89:20
func x1a_dec(tls TLS, _p uintptr /* *int32 */) {
	a_dec(_p)
}

// x5__func__ [7]int8, escapes: true, atomic_arch.h:115:1
var x1002__func__ = ds + 46432

// linking call_once.o

// Xcall_once is defined at call_once.c:5:6
func Xcall_once(tls TLS, _flag uintptr /* *Tonce_flag = int32 */, _func uintptr /* *func(TLS) */) {
	X__pthread_once(tls, _flag, _func)
}

type t1050__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t1050__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// linking clone.o

// X__clone is defined at clone.c:4:5
func X__clone(tls TLS, _func uintptr /* *func(TLS, uintptr) int32 */, _stack uintptr /* *void */, _flags int32, _arg uintptr /* *void */, ap ...interface{}) (r int32) {
	return int32(-38)
}

type t1051__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t1051__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// linking cnd_broadcast.o

// Xcnd_broadcast is defined at cnd_broadcast.c:5:5
func Xcnd_broadcast(tls TLS, _c uintptr /* *Tcnd_t = struct{F__u struct{F__...6]uintptr;F int64; _ [40]byte};} */) (r int32) {
	return X__private_cond_signal(tls, _c, int32(-1))
}

type t1052__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t1052__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// linking cnd_destroy.o

// Xcnd_destroy is defined at cnd_destroy.c:3:6
func Xcnd_destroy(tls TLS, _c uintptr /* *Tcnd_t = struct{F__u struct{F__...6]uintptr;F int64; _ [40]byte};} */) {
}

type t1053__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t1053__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// linking cnd_init.o

// Xcnd_init is defined at cnd_init.c:3:5
func Xcnd_init(tls TLS, _c uintptr /* *Tcnd_t = struct{F__u struct{F__...6]uintptr;F int64; _ [40]byte};} */) (r int32) {
	var _unnamed1 struct {
		F__u struct {
			F__i  [0][12]int32
			F__vi [0][12]int32
			F__p  [0][6]uintptr
			F     int64
			_     [40]byte
		}
	}
	_ = _unnamed1
	*(*struct {
		F__u struct {
			F__i  [0][12]int32
			F__vi [0][12]int32
			F__p  [0][6]uintptr
			F     int64
			_     [40]byte
		}
	})(unsafe.Pointer(_c)) = struct {
		F__u struct {
			F__i  [0][12]int32
			F__vi [0][12]int32
			F__p  [0][6]uintptr
			F     int64
			_     [40]byte
		}
	}{}
	return int32(0)
}

type t1054__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t1054__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type Tcnd_t = struct {
	F__u struct {
		F__i  [0][12]int32
		F__vi [0][12]int32
		F__p  [0][6]uintptr
		F     int64
		_     [40]byte
	}
}

// linking cnd_signal.o

// Xcnd_signal is defined at cnd_signal.c:5:5
func Xcnd_signal(tls TLS, _c uintptr /* *Tcnd_t = struct{F__u struct{F__...6]uintptr;F int64; _ [40]byte};} */) (r int32) {
	return X__private_cond_signal(tls, _c, int32(1))
}

type t1055__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t1055__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// linking cnd_timedwait.o

// Xcnd_timedwait is defined at cnd_timedwait.c:6:5
func Xcnd_timedwait(tls TLS, _c uintptr /* *Tcnd_t = struct{F__u struct{F__...6]uintptr;F int64; _ [40]byte};} */, _m uintptr /* *Tmtx_t = struct{F__u struct{F__...5]uintptr;F int64; _ [32]byte};} */, _ts uintptr /* *Stimespec */) (r int32) {
	var _ret int32

	_ret = X__pthread_cond_timedwait(tls, _c, _m, _ts)
	switch _ret {
	default:
		goto _2

	case int32(0):
		goto _3
	case int32(110):
		goto _4
	}
_2:
	return int32(2)

_3:
	return int32(0)

_4:
	return int32(4)
	return r
}

type t1056__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t1056__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type s37timespec = struct {
	Ftv_sec  int64
	Ftv_nsec int64
}

type t53time_t = int64

// linking cnd_wait.o

// Xcnd_wait is defined at cnd_wait.c:3:5
func Xcnd_wait(tls TLS, _c uintptr /* *Tcnd_t = struct{F__u struct{F__...6]uintptr;F int64; _ [40]byte};} */, _m uintptr /* *Tmtx_t = struct{F__u struct{F__...5]uintptr;F int64; _ [32]byte};} */) (r int32) {
	return Xcnd_timedwait(tls, _c, _m, null)
}

type t1057__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t1057__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// linking lock_ptc.o

// X__inhibit_ptc is defined at lock_ptc.c:5:6
func X__inhibit_ptc(tls TLS) {
	Xpthread_rwlock_wrlock(tls, x5lock)
}

// X__acquire_ptc is defined at lock_ptc.c:10:6
func X__acquire_ptc(tls TLS) {
	Xpthread_rwlock_rdlock(tls, x5lock)
}

// X__release_ptc is defined at lock_ptc.c:15:6
func X__release_ptc(tls TLS) {
	Xpthread_rwlock_unlock(tls, x5lock)
}

type t1058__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t1058__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// xlock Tpthread_rwlock_t = struct{F__u ...7]uintptr;F int64; _ [48]byte};}, escapes: true, lock_ptc.c:3:25
var x5lock = bss + 7040

// linking mtx_destroy.o

// Xmtx_destroy is defined at mtx_destroy.c:3:6
func Xmtx_destroy(tls TLS, _mtx uintptr /* *Tmtx_t = struct{F__u struct{F__...5]uintptr;F int64; _ [32]byte};} */) {
}

type t1059__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t1059__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// linking mtx_init.o

// Xmtx_init is defined at mtx_init.c:5:5
func Xmtx_init(tls TLS, _m uintptr /* *Tmtx_t = struct{F__u struct{F__...5]uintptr;F int64; _ [32]byte};} */, _type int32) (r int32) {
	X__assert_fail(tls, ts+0 /* "TODO(ccgo)" */, ts+5236 /* "src/thread/mtx_i..." */, int32(7), x1003__func__)
	X__assert_fail(tls, ts+0 /* "TODO(ccgo)" */, ts+5236 /* "src/thread/mtx_i..." */, int32(9), x1003__func__)
	X__assert_fail(tls, ts+0 /* "TODO(ccgo)" */, ts+5236 /* "src/thread/mtx_i..." */, int32(11), x1003__func__)
	X__assert_fail(tls, ts+0 /* "TODO(ccgo)" */, ts+5236 /* "src/thread/mtx_i..." */, int32(13), x1003__func__)
	return r
}

type t1060__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t1060__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// x1__func__ [9]int8, escapes: true, mtx_init.c:6:1
var x1003__func__ = ds + 46440

// linking mtx_lock.o

// Xmtx_lock is defined at mtx_lock.c:4:5
func Xmtx_lock(tls TLS, _m uintptr /* *Tmtx_t = struct{F__u struct{F__...5]uintptr;F int64; _ [32]byte};} */) (r int32) {
	if *(*int32)(unsafe.Pointer(_m)) != int32(0) || x6a_cas(tls, _m+4, int32(0), int32(16)) != 0 {
		goto _1
	}

	return int32(0)

_1:
	return Xmtx_timedlock(tls, _m, null)
}

type t1061__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t1061__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// xa_cas is defined at atomic_arch.h:4:19
func x6a_cas(tls TLS, _p uintptr /* *int32 */, _t int32, _s int32) (r int32) {
	return a_cas(_p, _t, _s)
	return r
}

// linking mtx_timedlock.o

// Xmtx_timedlock is defined at mtx_timedlock.c:6:5
func Xmtx_timedlock(tls TLS, _m uintptr /* *Tmtx_t = struct{F__u struct{F__...5]uintptr;F int64; _ [32]byte};} */, _ts uintptr /* *Stimespec */) (r int32) {
	var _ret int32

	_ret = X__pthread_mutex_timedlock(tls, _m, _ts)
	switch _ret {
	default:
		goto _2

	case int32(0):
		goto _3
	case int32(110):
		goto _4
	}
_2:
	return int32(2)

_3:
	return int32(0)

_4:
	return int32(4)
	return r
}

type t1062__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t1062__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type s38timespec = struct {
	Ftv_sec  int64
	Ftv_nsec int64
}

type t54time_t = int64

// linking mtx_trylock.o

// Xmtx_trylock is defined at mtx_trylock.c:6:5
func Xmtx_trylock(tls TLS, _m uintptr /* *Tmtx_t = struct{F__u struct{F__...5]uintptr;F int64; _ [32]byte};} */) (r int32) {
	var _ret int32

	if *(*int32)(unsafe.Pointer(_m)) != int32(0) {
		goto _1
	}

	if x7a_cas(tls, _m+4, int32(0), int32(16))&int32(16) != 0 {
		return int32(1)
	}

	return int32(0)

_1:
	_ret = X__pthread_mutex_trylock(tls, _m)
	switch _ret {
	default:
		goto _3

	case int32(0):
		goto _4
	case int32(16):
		goto _5
	}
_3:
	return int32(2)

_4:
	return int32(0)

_5:
	return int32(1)
	return r
}

type t1063__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t1063__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// xa_cas is defined at atomic_arch.h:4:19
func x7a_cas(tls TLS, _p uintptr /* *int32 */, _t int32, _s int32) (r int32) {
	return a_cas(_p, _t, _s)
	return r
}

// linking mtx_unlock.o

// Xmtx_unlock is defined at mtx_unlock.c:5:5
func Xmtx_unlock(tls TLS, _mtx uintptr /* *Tmtx_t = struct{F__u struct{F__...5]uintptr;F int64; _ [32]byte};} */) (r int32) {
	return X__pthread_mutex_unlock(tls, _mtx)
}

type t1064__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t1064__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// linking pthread_atfork.o

func fn1004(p uintptr) func(TLS) { return *(*func(TLS))(unsafe.Pointer(&p)) }

// X__fork_handler is defined at pthread_atfork.c:13:6
func X__fork_handler(tls TLS, _who int32) {
	var _p uintptr // *Satfork_funcs

	if x1funcs != 0 {
		goto _1
	}

	return

_1:
	if _who >= int32(0) {
		goto _2
	}

	X__lock(tls, x6lock)
	_p = x1funcs
_4:
	if _p == 0 {
		goto _6
	}

	if *(*uintptr)(unsafe.Pointer(_p)) == 0 {
		goto _7
	}

	fn1004(*(*uintptr)(unsafe.Pointer(_p)))(tls)
_7:
	x1funcs = _p
	_p = *(*uintptr)(unsafe.Pointer(_p + 32))
	goto _4

_6:
	goto _3

_2:
	_p = x1funcs
_8:
	if _p == 0 {
		goto _10
	}

	if _who != 0 || *(*uintptr)(unsafe.Pointer(_p + 8)) == 0 {
		goto _11
	}

	fn1004(*(*uintptr)(unsafe.Pointer(_p + 8)))(tls)
	goto _12

_11:
	if _who == 0 || *(*uintptr)(unsafe.Pointer(_p + 16)) == 0 {
		goto _13
	}

	fn1004(*(*uintptr)(unsafe.Pointer(_p + 16)))(tls)
_13:
_12:
	x1funcs = _p
	_p = *(*uintptr)(unsafe.Pointer(_p + 24))
	goto _8

_10:
	X__unlock(tls, x6lock)
_3:
}

// Xpthread_atfork is defined at pthread_atfork.c:33:5
func Xpthread_atfork(tls TLS, _prepare uintptr /* *func(TLS) */, _parent uintptr /* *func(TLS) */, _child uintptr /* *func(TLS) */) (r int32) {
	var _new uintptr // *Satfork_funcs

	_new = Xmalloc(tls, uint64(40))
	if _new != 0 {
		goto _1
	}

	return int32(-1)

_1:
	X__lock(tls, x6lock)
	*(*uintptr)(unsafe.Pointer(_new + 32)) = x1funcs
	*(*uintptr)(unsafe.Pointer(_new + 24)) = null
	*(*uintptr)(unsafe.Pointer(_new)) = _prepare
	*(*uintptr)(unsafe.Pointer(_new + 8)) = _parent
	*(*uintptr)(unsafe.Pointer(_new + 16)) = _child
	if x1funcs == 0 {
		goto _2
	}

	*(*uintptr)(unsafe.Pointer(x1funcs + 24)) = _new
_2:
	x1funcs = _new
	X__unlock(tls, x6lock)
	return int32(0)
}

type t1065__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t1065__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type Satfork_funcs = struct {
	Fprepare uintptr // *func(TLS)
	Fparent  uintptr // *func(TLS)
	Fchild   uintptr // *func(TLS)
	Fprev    uintptr // *Satfork_funcs
	Fnext    uintptr // *Satfork_funcs
}

// xfuncs *struct{Fprepare *func(TLS);Fpar...ork_funcs;Fnext *Satfork_funcs;}, escapes: false, pthread_atfork.c:9:3
var x1funcs uintptr

// xlock [1]int32, escapes: true, pthread_atfork.c:11:21
var x6lock = bss + 7096

type t358size_t = uint64

// linking pthread_attr_destroy.o

// Xpthread_attr_destroy is defined at pthread_attr_destroy.c:3:5
func Xpthread_attr_destroy(tls TLS, _a uintptr /* *Tpthread_attr_t = struct{F__u s...[7]uint64;F int64; _ [48]byte};} */) (r int32) {
	return int32(0)
}

type t1066__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t1066__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// linking pthread_attr_get.o

// Xpthread_attr_getdetachstate is defined at pthread_attr_get.c:3:5
func Xpthread_attr_getdetachstate(tls TLS, _a uintptr /* *Tpthread_attr_t = struct{F__u s...[7]uint64;F int64; _ [48]byte};} */, _state uintptr /* *int32 */) (r int32) {
	*(*int32)(unsafe.Pointer(_state)) = *(*int32)(unsafe.Pointer(_a + 24))
	return int32(0)
}

// Xpthread_attr_getguardsize is defined at pthread_attr_get.c:8:5
func Xpthread_attr_getguardsize(tls TLS, _a uintptr /* *Tpthread_attr_t = struct{F__u s...[7]uint64;F int64; _ [48]byte};} */, _size uintptr /* *Tsize_t = uint64 */) (r int32) {
	*(*uint64)(unsafe.Pointer(_size)) = *(*uint64)(unsafe.Pointer(_a + 8))
	return int32(0)
}

// Xpthread_attr_getinheritsched is defined at pthread_attr_get.c:14:5
func Xpthread_attr_getinheritsched(tls TLS, _a uintptr /* *Tpthread_attr_t = struct{F__u s...[7]uint64;F int64; _ [48]byte};} */, _inherit uintptr /* *int32 */) (r int32) {
	*(*int32)(unsafe.Pointer(_inherit)) = *(*int32)(unsafe.Pointer(_a + 28))
	return int32(0)
}

// Xpthread_attr_getschedparam is defined at pthread_attr_get.c:20:5
func Xpthread_attr_getschedparam(tls TLS, _a uintptr /* *Tpthread_attr_t = struct{F__u s...[7]uint64;F int64; _ [48]byte};} */, _param uintptr /* *Ssched_param */) (r int32) {
	*(*int32)(unsafe.Pointer(_param)) = *(*int32)(unsafe.Pointer(_a + 36))
	return int32(0)
}

// Xpthread_attr_getschedpolicy is defined at pthread_attr_get.c:26:5
func Xpthread_attr_getschedpolicy(tls TLS, _a uintptr /* *Tpthread_attr_t = struct{F__u s...[7]uint64;F int64; _ [48]byte};} */, _policy uintptr /* *int32 */) (r int32) {
	*(*int32)(unsafe.Pointer(_policy)) = *(*int32)(unsafe.Pointer(_a + 32))
	return int32(0)
}

// Xpthread_attr_getscope is defined at pthread_attr_get.c:32:5
func Xpthread_attr_getscope(tls TLS, _a uintptr /* *Tpthread_attr_t = struct{F__u s...[7]uint64;F int64; _ [48]byte};} */, _scope uintptr /* *int32 */) (r int32) {
	*(*int32)(unsafe.Pointer(_scope)) = int32(0)
	return int32(0)
}

// Xpthread_attr_getstack is defined at pthread_attr_get.c:38:5
func Xpthread_attr_getstack(tls TLS, _a uintptr /* *Tpthread_attr_t = struct{F__u s...[7]uint64;F int64; _ [48]byte};} */, _addr uintptr /* **void */, _size uintptr /* *Tsize_t = uint64 */) (r int32) {
	if *(*uint64)(unsafe.Pointer(_a + 16)) != 0 {
		goto _1
	}

	return int32(22)

_1:
	*(*uint64)(unsafe.Pointer(_size)) = *(*uint64)(unsafe.Pointer(_a))
	*(*uintptr)(unsafe.Pointer(_addr)) = uintptr(*(*uint64)(unsafe.Pointer(_a + 16)) - *(*uint64)(unsafe.Pointer(_size)))
	return int32(0)
}

// Xpthread_attr_getstacksize is defined at pthread_attr_get.c:47:5
func Xpthread_attr_getstacksize(tls TLS, _a uintptr /* *Tpthread_attr_t = struct{F__u s...[7]uint64;F int64; _ [48]byte};} */, _size uintptr /* *Tsize_t = uint64 */) (r int32) {
	*(*uint64)(unsafe.Pointer(_size)) = *(*uint64)(unsafe.Pointer(_a))
	return int32(0)
}

// Xpthread_barrierattr_getpshared is defined at pthread_attr_get.c:53:5
func Xpthread_barrierattr_getpshared(tls TLS, _a uintptr /* *Tpthread_barrierattr_t = struct{F__attr uint32;} */, _pshared uintptr /* *int32 */) (r int32) {
	*(*int32)(unsafe.Pointer(_pshared)) = bool2int(*(*uint32)(unsafe.Pointer(_a)) != 0)
	return int32(0)
}

// Xpthread_condattr_getclock is defined at pthread_attr_get.c:59:5
func Xpthread_condattr_getclock(tls TLS, _a uintptr /* *Tpthread_condattr_t = struct{F__attr uint32;} */, _clk uintptr /* *Tclockid_t = int32 */) (r int32) {
	*(*int32)(unsafe.Pointer(_clk)) = int32(*(*uint32)(unsafe.Pointer(_a)) & uint32(0x7fffffff))
	return int32(0)
}

// Xpthread_condattr_getpshared is defined at pthread_attr_get.c:65:5
func Xpthread_condattr_getpshared(tls TLS, _a uintptr /* *Tpthread_condattr_t = struct{F__attr uint32;} */, _pshared uintptr /* *int32 */) (r int32) {
	*(*int32)(unsafe.Pointer(_pshared)) = int32(*(*uint32)(unsafe.Pointer(_a)) >> (uint(31) % 32))
	return int32(0)
}

// Xpthread_mutexattr_getprotocol is defined at pthread_attr_get.c:71:5
func Xpthread_mutexattr_getprotocol(tls TLS, _a uintptr /* *Tpthread_mutexattr_t = struct{F__attr uint32;} */, _protocol uintptr /* *int32 */) (r int32) {
	*(*int32)(unsafe.Pointer(_protocol)) = int32(0)
	return int32(0)
}

// Xpthread_mutexattr_getpshared is defined at pthread_attr_get.c:76:5
func Xpthread_mutexattr_getpshared(tls TLS, _a uintptr /* *Tpthread_mutexattr_t = struct{F__attr uint32;} */, _pshared uintptr /* *int32 */) (r int32) {
	*(*int32)(unsafe.Pointer(_pshared)) = int32(*(*uint32)(unsafe.Pointer(_a)) / uint32(128) % uint32(2))
	return int32(0)
}

// Xpthread_mutexattr_getrobust is defined at pthread_attr_get.c:82:5
func Xpthread_mutexattr_getrobust(tls TLS, _a uintptr /* *Tpthread_mutexattr_t = struct{F__attr uint32;} */, _robust uintptr /* *int32 */) (r int32) {
	*(*int32)(unsafe.Pointer(_robust)) = int32(*(*uint32)(unsafe.Pointer(_a)) / uint32(4) % uint32(2))
	return int32(0)
}

// Xpthread_mutexattr_gettype is defined at pthread_attr_get.c:88:5
func Xpthread_mutexattr_gettype(tls TLS, _a uintptr /* *Tpthread_mutexattr_t = struct{F__attr uint32;} */, _type uintptr /* *int32 */) (r int32) {
	*(*int32)(unsafe.Pointer(_type)) = int32(*(*uint32)(unsafe.Pointer(_a)) & uint32(3))
	return int32(0)
}

// Xpthread_rwlockattr_getpshared is defined at pthread_attr_get.c:94:5
func Xpthread_rwlockattr_getpshared(tls TLS, _a uintptr /* *Tpthread_rwlockattr_t = struct{F__attr [2]uint32;} */, _pshared uintptr /* *int32 */) (r int32) {
	*(*int32)(unsafe.Pointer(_pshared)) = int32(*(*uint32)(unsafe.Pointer(_a)))
	return int32(0)
}

type t1067__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t1067__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t359size_t = uint64

type s4sched_param = struct {
	Fsched_priority        int32
	Fsched_ss_low_priority int32
	Fsched_ss_repl_period  s39timespec
	Fsched_ss_init_budget  s39timespec
	Fsched_ss_max_repl     int32
}

type t5clockid_t = int32

type s39timespec = struct {
	Ftv_sec  int64
	Ftv_nsec int64
}

type t55time_t = int64

// linking pthread_attr_init.o

// Xpthread_attr_init is defined at pthread_attr_init.c:3:5
func Xpthread_attr_init(tls TLS, _a uintptr /* *Tpthread_attr_t = struct{F__u s...[7]uint64;F int64; _ [48]byte};} */) (r int32) {
	var _unnamed1 struct {
		F__u struct {
			F__i  [0][14]int32
			F__vi [0][14]int32
			F__s  [0][7]uint64
			F     int64
			_     [48]byte
		}
	}
	_ = _unnamed1
	*(*struct {
		F__u struct {
			F__i  [0][14]int32
			F__vi [0][14]int32
			F__s  [0][7]uint64
			F     int64
			_     [48]byte
		}
	})(unsafe.Pointer(_a)) = struct {
		F__u struct {
			F__i  [0][14]int32
			F__vi [0][14]int32
			F__s  [0][7]uint64
			F     int64
			_     [48]byte
		}
	}{}
	*(*uint64)(unsafe.Pointer(_a)) = uint64(81920)
	*(*uint64)(unsafe.Pointer(_a + 8)) = uint64(4096)
	return int32(0)
}

type t1068__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t1068__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t3pthread_attr_t = struct {
	F__u struct {
		F__i  [0][14]int32
		F__vi [0][14]int32
		F__s  [0][7]uint64
		F     int64
		_     [48]byte
	}
}

// linking pthread_attr_setdetachstate.o

// Xpthread_attr_setdetachstate is defined at pthread_attr_setdetachstate.c:3:5
func Xpthread_attr_setdetachstate(tls TLS, _a uintptr /* *Tpthread_attr_t = struct{F__u s...[7]uint64;F int64; _ [48]byte};} */, _state int32) (r int32) {
	if uint32(_state) <= uint32(1) {
		goto _1
	}

	return int32(22)

_1:
	*(*int32)(unsafe.Pointer(_a + 24)) = _state
	return int32(0)
}

type t1069__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t1069__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// linking pthread_attr_setguardsize.o

// Xpthread_attr_setguardsize is defined at pthread_attr_setguardsize.c:3:5
func Xpthread_attr_setguardsize(tls TLS, _a uintptr /* *Tpthread_attr_t = struct{F__u s...[7]uint64;F int64; _ [48]byte};} */, _size uint64) (r int32) {
	if _size <= uint64(2305843009213693951) {
		goto _1
	}

	return int32(22)

_1:
	*(*uint64)(unsafe.Pointer(_a + 8)) = _size
	return int32(0)
}

type t1070__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t1070__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t360size_t = uint64

// linking pthread_attr_setinheritsched.o

func fn1005(p uintptr) func(TLS, uintptr) uintptr {
	return *(*func(TLS, uintptr) uintptr)(unsafe.Pointer(&p))
}

// X__start_sched is defined at pthread_attr_setinheritsched.c:5:6
func X__start_sched(tls TLS, _p uintptr /* *void */) (r uintptr /* *void */) {
	var (
		_ssa       uintptr // *Sstart_sched_args
		_start_arg uintptr // *void
		_start_fn  uintptr // *func(TLS, uintptr) uintptr
		_self      uintptr // Tpthread_t = *S__pthread
		_ret       int32
	)
	_ssa = _p
	_start_arg = *(*uintptr)(unsafe.Pointer(_ssa))
	_start_fn = *(*uintptr)(unsafe.Pointer(_ssa + 8))
	_self = x33__pthread_self(tls)
	_ret = int32(-x55__syscall3(tls, int64(144), int64(*(*int32)(unsafe.Pointer(_self + 56))), int64(*(*int32)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_ssa + 144)) + 32))), int64(*(*uintptr)(unsafe.Pointer(_ssa + 144))+36)))
	if _ret != 0 {
		goto _1
	}

	X__restore_sigs(tls, _ssa+16)
_1:
	x3a_store(tls, _ssa+152, _ret)
	x3__wake(tls, _ssa+152, int32(1), int32(1))
	if _ret == 0 {
		goto _2
	}

	*(*int32)(unsafe.Pointer(_self + 64)) = int32(4)
	return null

_2:
	return fn1005(_start_fn)(tls, _start_arg)
}

// Xpthread_attr_setinheritsched is defined at pthread_attr_setinheritsched.c:24:5
func Xpthread_attr_setinheritsched(tls TLS, _a uintptr /* *Tpthread_attr_t = struct{F__u s...[7]uint64;F int64; _ [48]byte};} */, _inherit int32) (r int32) {
	if uint32(_inherit) <= uint32(1) {
		goto _1
	}

	return int32(22)

_1:
	*(*int32)(unsafe.Pointer(_a + 28)) = _inherit
	return int32(0)
}

type t1071__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t1071__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type Sstart_sched_args = struct {
	Fstart_arg uintptr // *void
	Fstart_fn  uintptr // *func(TLS, uintptr) uintptr
	Fmask      struct{ F__bits [16]uint64 }
	Fattr      uintptr // *Tpthread_attr_t = struct{F__u s...[7]uint64;F int64; _ [48]byte};}
	Ffutex     int32
}

type s39__pthread = struct {
	Fself          uintptr // *S__pthread
	Fdtv           uintptr // **void
	Funused1       uintptr // *void
	Funused2       uintptr // *void
	Fsysinfo       uint64
	Fcanary        uint64
	Fcanary2       uint64
	Ftid           int32
	Ferrno_val     int32
	Fdetach_state  int32
	Fcancel        int32
	Fcanceldisable uint8
	Fcancelasync   uint8
	F74            uint8
	Fmap_base      uintptr // *uint8
	Fmap_size      uint64
	Fstack         uintptr // *void
	Fstack_size    uint64
	Fguard_size    uint64
	Fstart_arg     uintptr // *void
	Fstart         uintptr // *func(TLS, uintptr) uintptr
	Fresult        uintptr // *void
	Fcancelbuf     uintptr // *S__ptcb
	Ftsd           uintptr // **void
	Frobust_list   struct {
		Fhead    uintptr
		Foff     int64
		Fpending uintptr
	}
	Ftimer_id      int32
	Flocale        uintptr // Tlocale_t = *S__locale_struct
	Fkilllock      [1]int32
	Fdlerror_buf   uintptr // *int8
	Fstdio_locks   uintptr // *void
	Fcanary_at_end uint64
	Fdtv_copy      uintptr // **void
}

// x__pthread_self is defined at pthread_arch.h:1:30
func x33__pthread_self(tls TLS) (r uintptr /* *S__pthread */) {
	return uintptr(tls)
	return r
}

// x__syscall3 is defined at syscall_arch.h:33:22
func x55__syscall3(tls TLS, _n int64, _a1 int64, _a2 int64, _a3 int64) (r int64) {
	return X__syscall(tls, _n, _a1, _a2, _a3, int64(0), int64(0), int64(0))
}

// xa_store is defined at atomic_arch.h:98:20
func x3a_store(tls TLS, _p uintptr /* *int32 */, _x int32) {
	X__assert_fail(tls, ts+0 /* "TODO(ccgo)" */, ts+36 /* "arch/x86_64/atom..." */, int32(100), x1006__func__)
}

// x__wake is defined at pthread_impl.h:154:20
func x3__wake(tls TLS, _addr uintptr /* *void */, _cnt int32, _priv int32) {
	if _priv == 0 {
		goto _1
	}

	_priv = int32(128)
_1:
	if _cnt >= int32(0) {
		goto _2
	}

	_cnt = int32(0x7fffffff)
_2:
	if x55__syscall3(tls, int64(202), int64(_addr), int64(int32(1)|_priv), int64(_cnt)) == int64(-38) {
		x55__syscall3(tls, int64(202), int64(_addr), int64(1), int64(_cnt))
	}
}

type t19sigset_t = struct{ F__bits [16]uint64 }

type t58uintptr_t = uint64

type t361size_t = uint64

type s37__ptcb = struct {
	F__f    uintptr // *func(TLS, uintptr)
	F__x    uintptr // *void
	F__next uintptr // *S__ptcb
}

type s153__locale_struct = struct{ Fcat [6]uintptr }

// x5__func__ [8]int8, escapes: true, atomic_arch.h:99:1
var x1006__func__ = ds + 46456

// linking pthread_attr_setschedparam.o

// Xpthread_attr_setschedparam is defined at pthread_attr_setschedparam.c:3:5
func Xpthread_attr_setschedparam(tls TLS, _a uintptr /* *Tpthread_attr_t = struct{F__u s...[7]uint64;F int64; _ [48]byte};} */, _param uintptr /* *Ssched_param */) (r int32) {
	*(*int32)(unsafe.Pointer(_a + 36)) = *(*int32)(unsafe.Pointer(_param))
	return int32(0)
}

type t1072__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t1072__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type s5sched_param = struct {
	Fsched_priority        int32
	Fsched_ss_low_priority int32
	Fsched_ss_repl_period  s40timespec
	Fsched_ss_init_budget  s40timespec
	Fsched_ss_max_repl     int32
}

type s40timespec = struct {
	Ftv_sec  int64
	Ftv_nsec int64
}

type t56time_t = int64

// linking pthread_attr_setschedpolicy.o

// Xpthread_attr_setschedpolicy is defined at pthread_attr_setschedpolicy.c:3:5
func Xpthread_attr_setschedpolicy(tls TLS, _a uintptr /* *Tpthread_attr_t = struct{F__u s...[7]uint64;F int64; _ [48]byte};} */, _policy int32) (r int32) {
	*(*int32)(unsafe.Pointer(_a + 32)) = _policy
	return int32(0)
}

type t1073__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t1073__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// linking pthread_attr_setscope.o

// Xpthread_attr_setscope is defined at pthread_attr_setscope.c:3:5
func Xpthread_attr_setscope(tls TLS, _a uintptr /* *Tpthread_attr_t = struct{F__u s...[7]uint64;F int64; _ [48]byte};} */, _scope int32) (r int32) {
	switch _scope {
	case int32(0):
		goto _2
	case int32(1):
		goto _3
	default:
		goto _4
	}
_2:
	return int32(0)

_3:
	return int32(95)

_4:
	return int32(22)
	return r
}

type t1074__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t1074__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// linking pthread_attr_setstack.o

// Xpthread_attr_setstack is defined at pthread_attr_setstack.c:3:5
func Xpthread_attr_setstack(tls TLS, _a uintptr /* *Tpthread_attr_t = struct{F__u s...[7]uint64;F int64; _ [48]byte};} */, _addr uintptr /* *void */, _size uint64) (r int32) {
	if _size-uint64(2048) <= uint64(4611686018427387903) {
		goto _1
	}

	return int32(22)

_1:
	*(*uint64)(unsafe.Pointer(_a + 16)) = uint64(_addr) + _size
	*(*uint64)(unsafe.Pointer(_a)) = _size
	return int32(0)
}

type t1075__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t1075__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t362size_t = uint64

// linking pthread_attr_setstacksize.o

// Xpthread_attr_setstacksize is defined at pthread_attr_setstacksize.c:3:5
func Xpthread_attr_setstacksize(tls TLS, _a uintptr /* *Tpthread_attr_t = struct{F__u s...[7]uint64;F int64; _ [48]byte};} */, _size uint64) (r int32) {
	if _size-uint64(2048) <= uint64(4611686018427387903) {
		goto _1
	}

	return int32(22)

_1:
	*(*uint64)(unsafe.Pointer(_a + 16)) = uint64(0)
	*(*uint64)(unsafe.Pointer(_a)) = _size
	return int32(0)
}

type t1076__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t1076__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t363size_t = uint64

// linking pthread_barrier_destroy.o

func set1007(p *int32, v int32) int32 { *p = v; return v }

// Xpthread_barrier_destroy is defined at pthread_barrier_destroy.c:3:5
func Xpthread_barrier_destroy(tls TLS, _b uintptr /* *Tpthread_barrier_t = struct{F__...4]uintptr;F int64; _ [24]byte};} */) (r int32) {
	var _v int32

	if *(*int32)(unsafe.Pointer(_b + 8)) >= int32(0) {
		goto _1
	}

	if *(*int32)(unsafe.Pointer(_b)) == 0 {
		goto _2
	}

	x1a_or(tls, _b, int32(-2147483648))
_3:
	if (set1007(&_v, *(*int32)(unsafe.Pointer(_b))) & int32(0x7fffffff)) == 0 {
		goto _4
	}

	X__wait(tls, _b, null, _v, int32(0))
	goto _3

_4:
_2:
	X__vm_wait(tls)
_1:
	return int32(0)
}

type t1077__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t1077__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// xa_or is defined at atomic_arch.h:53:20
func x1a_or(tls TLS, _p uintptr /* *int32 */, _v int32) {
	X__assert_fail(tls, ts+0 /* "TODO(ccgo)" */, ts+36 /* "arch/x86_64/atom..." */, int32(55), x1008__func__)
}

// x2__func__ [5]int8, escapes: true, atomic_arch.h:54:1
var x1008__func__ = ds + 46464

// linking pthread_barrier_init.o

// Xpthread_barrier_init is defined at pthread_barrier_init.c:4:5
func Xpthread_barrier_init(tls TLS, _b uintptr /* *Tpthread_barrier_t = struct{F__...4]uintptr;F int64; _ [24]byte};} */, _a uintptr /* *Tpthread_barrierattr_t = struct{F__attr uint32;} */, _count uint32) (r int32) {
	if _count-uint32(1) <= uint32(2147483646) {
		goto _1
	}

	return int32(22)

_1:
	X__assert_fail(tls, ts+0 /* "TODO(ccgo)" */, ts+5260 /* "src/thread/pthre..." */, int32(7), x1009__func__)
	return int32(0)
}

type t1078__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t1078__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// x1__func__ [21]int8, escapes: true, pthread_barrier_init.c:5:1
var x1009__func__ = ds + 46472

// linking pthread_barrier_wait.o

func set1010(p *uintptr, v uintptr) uintptr { *p = v; return v }

func postinc1011(p *int32) int32 { r := *p; *p += -1; return r }

func preinc1012(p *int32) int32 { *p += 1; return *p }

// Xpthread_barrier_wait is defined at pthread_barrier_wait.c:60:5
func Xpthread_barrier_wait(tls TLS, _b uintptr /* *Tpthread_barrier_t = struct{F__...4]uintptr;F int64; _ [24]byte};} */) (r int32) {
	esc := MustMalloc(16)
	var (
		_limit    int32
		_inst     uintptr // *Sinstance
		_new_inst = esc   // *Sinstance
		_spins    int32
	)
	defer Free(esc)
	_limit = *(*int32)(unsafe.Pointer(_b + 8))
	if _limit != 0 {
		goto _1
	}

	return int32(-1)

_1:
	if _limit >= int32(0) {
		goto _2
	}

	return xpshared_barrier_wait(tls, _b)

_2:
_3:
	if x2a_swap(tls, _b, int32(1)) == 0 {
		goto _4
	}

	X__wait(tls, _b, _b+4, int32(1), int32(1))
	goto _3

_4:
	_inst = *(*uintptr)(unsafe.Pointer(_b + 24))
	if _inst != 0 {
		goto _5
	}

	Copy(_new_inst, ts+2708 /* "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00" */, 16)
	_spins = int32(200)
	*(*uintptr)(unsafe.Pointer(_b + 24)) = set1010(&_inst, _new_inst)
	x4a_store(tls, _b, int32(0))
	if *(*int32)(unsafe.Pointer(_b + 4)) == 0 {
		goto _6
	}

	x4__wake(tls, _b, int32(1), int32(1))
_6:
_7:
	if postinc1011(&_spins) == 0 || *(*int32)(unsafe.Pointer(_inst + 12)) != 0 {
		goto _8
	}

	x2a_spin(tls)
	goto _7

_8:
	x2a_inc(tls, _inst+12)
_9:
	if *(*int32)(unsafe.Pointer(_inst + 12)) != int32(1) {
		goto _10
	}

	if x31__syscall4(tls, int64(202), int64(_inst+12), int64(128), int64(1), int64(0)) == int64(-38) {
		x31__syscall4(tls, int64(202), int64(_inst+12), int64(0), int64(1), int64(0))
	}
	goto _9

_10:
	return int32(-1)

_5:
	if preinc1012((*int32)(unsafe.Pointer(_inst))) != _limit {
		goto _11
	}

	*(*uintptr)(unsafe.Pointer(_b + 24)) = null
	x4a_store(tls, _b, int32(0))
	if *(*int32)(unsafe.Pointer(_b + 4)) == 0 {
		goto _13
	}

	x4__wake(tls, _b, int32(1), int32(1))
_13:
	x4a_store(tls, _inst+4, int32(1))
	if *(*int32)(unsafe.Pointer(_inst + 8)) == 0 {
		goto _14
	}

	x4__wake(tls, _inst+4, int32(-1), int32(1))
_14:
	goto _12

_11:
	x4a_store(tls, _b, int32(0))
	if *(*int32)(unsafe.Pointer(_b + 4)) == 0 {
		goto _15
	}

	x4__wake(tls, _b, int32(1), int32(1))
_15:
	X__wait(tls, _inst+4, _inst+8, int32(0), int32(1))
_12:
	if x1a_fetch_add(tls, _inst, int32(-1)) != int32(1) || x1a_fetch_add(tls, _inst+12, int32(1)) == 0 {
		goto _16
	}

	x4__wake(tls, _inst+12, int32(1), int32(1))
_16:
	return int32(0)
}

type t1079__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t1079__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type Sinstance = struct {
	Fcount    int32
	Flast     int32
	Fwaiters  int32
	Ffinished int32
}

func set1013(p *int32, v int32) int32 { *p = v; return v }

// xpshared_barrier_wait is defined at pthread_barrier_wait.c:3:12
func xpshared_barrier_wait(tls TLS, _b uintptr /* *Tpthread_barrier_t = struct{F__...4]uintptr;F int64; _ [24]byte};} */) (r int32) {
	var (
		_limit int32
		_ret   int32
		_v     int32
		_w     int32
	)
	_limit = *(*int32)(unsafe.Pointer(_b + 8))&int32(0x7fffffff) + int32(1)
	_ret = int32(0)
	if _limit != int32(1) {
		goto _1
	}

	return int32(-1)

_1:
_2:
	if set1013(&_v, x8a_cas(tls, _b, int32(0), _limit)) == 0 {
		goto _3
	}

	X__wait(tls, _b, _b+4, _v, int32(0))
	goto _2

_3:
	if preinc1012((*int32)(unsafe.Pointer(_b+12))) != _limit {
		goto _4
	}

	x4a_store(tls, _b+12, int32(0))
	_ret = int32(-1)
	if *(*int32)(unsafe.Pointer(_b + 16)) == 0 {
		goto _6
	}

	x4__wake(tls, _b+12, int32(-1), int32(0))
_6:
	goto _5

_4:
	x4a_store(tls, _b, int32(0))
	if *(*int32)(unsafe.Pointer(_b + 4)) == 0 {
		goto _7
	}

	x4__wake(tls, _b, int32(1), int32(0))
_7:
_8:
	if set1013(&_v, *(*int32)(unsafe.Pointer(_b + 12))) <= int32(0) {
		goto _9
	}

	X__wait(tls, _b+12, _b+16, _v, int32(0))
	goto _8

_9:
_5:
	X__vm_lock(tls)
	if x1a_fetch_add(tls, _b+12, int32(-1)) != int32(1)-_limit {
		goto _10
	}

	x4a_store(tls, _b+12, int32(0))
	if *(*int32)(unsafe.Pointer(_b + 16)) == 0 {
		goto _12
	}

	x4__wake(tls, _b+12, int32(-1), int32(0))
_12:
	goto _11

_10:
_13:
	if set1013(&_v, *(*int32)(unsafe.Pointer(_b + 12))) == 0 {
		goto _14
	}

	X__wait(tls, _b+12, _b+16, _v, int32(0))
	goto _13

_14:
_11:
_15:
	_v = *(*int32)(unsafe.Pointer(_b))
	_w = *(*int32)(unsafe.Pointer(_b + 4))
	if x8a_cas(tls, _b, _v, func() int32 {
		if _v == int32(-2147483647) {
			return int32(0)
		}
		return _v - int32(1)
	}()) != _v {
		goto _15
	}

	if _v != int32(-2147483647) && (_v != int32(1) || _w == 0) {
		goto _18
	}

	x4__wake(tls, _b, int32(1), int32(0))
_18:
	X__vm_unlock(tls)
	return _ret
}

// xa_swap is defined at atomic_arch.h:24:19
func x2a_swap(tls TLS, _p uintptr /* *int32 */, _v int32) (r int32) {
	return atomic.SwapInt32((*int32)(unsafe.Pointer(_p)), _v)
	return r
}

// xa_store is defined at atomic_arch.h:98:20
func x4a_store(tls TLS, _p uintptr /* *int32 */, _x int32) {
	X__assert_fail(tls, ts+0 /* "TODO(ccgo)" */, ts+36 /* "arch/x86_64/atom..." */, int32(100), x1014__func__)
}

// x__wake is defined at pthread_impl.h:154:20
func x4__wake(tls TLS, _addr uintptr /* *void */, _cnt int32, _priv int32) {
	if _priv == 0 {
		goto _1
	}

	_priv = int32(128)
_1:
	if _cnt >= int32(0) {
		goto _2
	}

	_cnt = int32(0x7fffffff)
_2:
	if x56__syscall3(tls, int64(202), int64(_addr), int64(int32(1)|_priv), int64(_cnt)) == int64(-38) {
		x56__syscall3(tls, int64(202), int64(_addr), int64(1), int64(_cnt))
	}
}

// xa_spin is defined at atomic_arch.h:114:20
func x2a_spin(tls TLS) {
	X__assert_fail(tls, ts+0 /* "TODO(ccgo)" */, ts+36 /* "arch/x86_64/atom..." */, int32(116), x1015__func__)
}

// xa_inc is defined at atomic_arch.h:80:20
func x2a_inc(tls TLS, _p uintptr /* *int32 */) {
	a_inc(_p)
}

// x__syscall4 is defined at syscall_arch.h:42:22
func x31__syscall4(tls TLS, _n int64, _a1 int64, _a2 int64, _a3 int64, _a4 int64) (r int64) {
	return X__syscall(tls, _n, _a1, _a2, _a3, _a4, int64(0), int64(0))
}

// xa_fetch_add is defined at atomic_arch.h:34:19
func x1a_fetch_add(tls TLS, _p uintptr /* *int32 */, _v int32) (r int32) {
	return a_fetch_add(_p, _v)
	return r
}

// xa_cas is defined at atomic_arch.h:4:19
func x8a_cas(tls TLS, _p uintptr /* *int32 */, _t int32, _s int32) (r int32) {
	return a_cas(_p, _t, _s)
	return r
}

// x10__func__ [8]int8, escapes: true, atomic_arch.h:99:1
var x1014__func__ = ds + 46496

// x__syscall3 is defined at syscall_arch.h:33:22
func x56__syscall3(tls TLS, _n int64, _a1 int64, _a2 int64, _a3 int64) (r int64) {
	return X__syscall(tls, _n, _a1, _a2, _a3, int64(0), int64(0), int64(0))
}

// x12__func__ [7]int8, escapes: true, atomic_arch.h:115:1
var x1015__func__ = ds + 46504

// linking pthread_barrierattr_destroy.o

// Xpthread_barrierattr_destroy is defined at pthread_barrierattr_destroy.c:3:5
func Xpthread_barrierattr_destroy(tls TLS, _a uintptr /* *Tpthread_barrierattr_t = struct{F__attr uint32;} */) (r int32) {
	return int32(0)
}

type t1080__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t1080__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// linking pthread_barrierattr_init.o

// Xpthread_barrierattr_init is defined at pthread_barrierattr_init.c:3:5
func Xpthread_barrierattr_init(tls TLS, _a uintptr /* *Tpthread_barrierattr_t = struct{F__attr uint32;} */) (r int32) {
	var _unnamed1 struct{ F__attr uint32 }
	_ = _unnamed1
	*(*struct{ F__attr uint32 })(unsafe.Pointer(_a)) = struct{ F__attr uint32 }{}
	return int32(0)
}

type t1081__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t1081__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type Tpthread_barrierattr_t = struct{ F__attr uint32 }

// linking pthread_barrierattr_setpshared.o

// Xpthread_barrierattr_setpshared is defined at pthread_barrierattr_setpshared.c:3:5
func Xpthread_barrierattr_setpshared(tls TLS, _a uintptr /* *Tpthread_barrierattr_t = struct{F__attr uint32;} */, _pshared int32) (r int32) {
	*(*uint32)(unsafe.Pointer(_a)) = uint32(func() int32 {
		if _pshared != 0 {
			return int32(-2147483648)
		}
		return int32(0)
	}())
	return int32(0)
}

type t1082__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t1082__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// linking pthread_cancel.o

// X__cancel is defined at pthread_cancel.c:11:6
func X__cancel(tls TLS) (r int64) {
	var _self uintptr // Tpthread_t = *S__pthread

	_self = x34__pthread_self(tls)
	if int32(*(*uint8)(unsafe.Pointer(_self + 72))) != int32(0) && *(*uint8)(unsafe.Pointer(_self + 73)) == 0 {
		goto _1
	}

	Xpthread_exit(tls, uintptr(18446744073709551615))
_1:
	*(*uint8)(unsafe.Pointer(_self + 72)) = uint8(1)
	return int64(-125)
}

func set1016(p *int32, v int32) int32 { *p = v; return v }

func set1017(p *uintptr, v uintptr) uintptr { *p = v; return v }

// X__syscall_cp_c is defined at pthread_cancel.c:24:6
func X__syscall_cp_c(tls TLS, _nr int64, _u int64, _v int64, _w int64, _x int64, _y int64, _z int64) (r int64) {
	var (
		_self uintptr // Tpthread_t = *S__pthread
		_r    int64
		_st   int32
	)
	if set1016(&_st, int32(*(*uint8)(unsafe.Pointer(set1017(&_self, x34__pthread_self(tls)) + 72)))) == 0 || _st != int32(1) && _nr != int64(3) {
		goto _1
	}

	return x16__syscall6(tls, _nr, _u, _v, _w, _x, _y, _z)

_1:
	_r = X__syscall_cp_asm(tls, _self+68, _nr, _u, _v, _w, _x, _y, _z)
	if _r != int64(-4) || _nr == int64(3) || *(*int32)(unsafe.Pointer(_self + 68)) == 0 || int32(*(*uint8)(unsafe.Pointer(_self + 72))) == int32(1) {
		goto _2
	}

	_r = X__cancel(tls)
_2:
	return _r
}

// X__testcancel is defined at pthread_cancel.c:72:6
func X__testcancel(tls TLS) {
	var _self uintptr // Tpthread_t = *S__pthread

	_self = x34__pthread_self(tls)
	if *(*int32)(unsafe.Pointer(_self + 68)) == 0 || *(*uint8)(unsafe.Pointer(_self + 72)) != 0 {
		goto _1
	}

	X__cancel(tls)
_1:
}

// Xpthread_cancel is defined at pthread_cancel.c:90:5
func Xpthread_cancel(tls TLS, _t uintptr /* Tpthread_t = *S__pthread */) (r int32) {
	if x1018init != 0 {
		goto _1
	}

	xinit_cancellation(tls)
	x1018init = int32(1)
_1:
	x5a_store(tls, _t+68, int32(1))
	X__assert_fail(tls, ts+0 /* "TODO(ccgo)" */, ts+5296 /* "src/thread/pthre..." */, int32(98), x1019__func__)
	return Xpthread_kill(tls, _t, int32(33))
}

type t1083__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t1083__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type s40__pthread = struct {
	Fself          uintptr // *S__pthread
	Fdtv           uintptr // **void
	Funused1       uintptr // *void
	Funused2       uintptr // *void
	Fsysinfo       uint64
	Fcanary        uint64
	Fcanary2       uint64
	Ftid           int32
	Ferrno_val     int32
	Fdetach_state  int32
	Fcancel        int32
	Fcanceldisable uint8
	Fcancelasync   uint8
	F74            uint8
	Fmap_base      uintptr // *uint8
	Fmap_size      uint64
	Fstack         uintptr // *void
	Fstack_size    uint64
	Fguard_size    uint64
	Fstart_arg     uintptr // *void
	Fstart         uintptr // *func(TLS, uintptr) uintptr
	Fresult        uintptr // *void
	Fcancelbuf     uintptr // *S__ptcb
	Ftsd           uintptr // **void
	Frobust_list   struct {
		Fhead    uintptr
		Foff     int64
		Fpending uintptr
	}
	Ftimer_id      int32
	Flocale        uintptr // Tlocale_t = *S__locale_struct
	Fkilllock      [1]int32
	Fdlerror_buf   uintptr // *int8
	Fstdio_locks   uintptr // *void
	Fcanary_at_end uint64
	Fdtv_copy      uintptr // **void
}

// x__pthread_self is defined at pthread_arch.h:1:30
func x34__pthread_self(tls TLS) (r uintptr /* *S__pthread */) {
	return uintptr(tls)
	return r
}

type t8syscall_arg_t = int64

// x__syscall6 is defined at syscall_arch.h:63:22
func x16__syscall6(tls TLS, _n int64, _a1 int64, _a2 int64, _a3 int64, _a4 int64, _a5 int64, _a6 int64) (r int64) {
	return X__syscall(tls, _n, _a1, _a2, _a3, _a4, _a5, _a6)
}

// x3__func__ [15]int8, escapes: true, pthread_cancel.c:91:1
var x1019__func__ = ds + 46512

// x4init int32, escapes: false, pthread_cancel.c:92:13
var x1018init int32

// xinit_cancellation is defined at pthread_cancel.c:79:13
func xinit_cancellation(tls TLS) {
	X__assert_fail(tls, ts+0 /* "TODO(ccgo)" */, ts+5296 /* "src/thread/pthre..." */, int32(81), x1020__func__)
}

// xa_store is defined at atomic_arch.h:98:20
func x5a_store(tls TLS, _p uintptr /* *int32 */, _x int32) {
	X__assert_fail(tls, ts+0 /* "TODO(ccgo)" */, ts+36 /* "arch/x86_64/atom..." */, int32(100), x1021__func__)
}

type t59uintptr_t = uint64

type t364size_t = uint64

type s38__ptcb = struct {
	F__f    uintptr // *func(TLS, uintptr)
	F__x    uintptr // *void
	F__next uintptr // *S__ptcb
}

type s154__locale_struct = struct{ Fcat [6]uintptr }

// x7__func__ [18]int8, escapes: true, pthread_cancel.c:80:1
var x1020__func__ = ds + 46528

// x8__func__ [8]int8, escapes: true, atomic_arch.h:99:1
var x1021__func__ = ds + 46552

// linking pthread_cleanup_push.o

// X_pthread_cleanup_push is defined at pthread_cleanup_push.c:9:6
func X_pthread_cleanup_push(tls TLS, _cb uintptr /* *S__ptcb */, _f uintptr /* *func(TLS, uintptr) */, _x uintptr /* *void */) {
	*(*uintptr)(unsafe.Pointer(_cb)) = _f
	*(*uintptr)(unsafe.Pointer(_cb + 8)) = _x
	X__do_cleanup_push(tls, _cb)
}

func fn1022(p uintptr) func(TLS, uintptr) { return *(*func(TLS, uintptr))(unsafe.Pointer(&p)) }

// X_pthread_cleanup_pop is defined at pthread_cleanup_push.c:16:6
func X_pthread_cleanup_pop(tls TLS, _cb uintptr /* *S__ptcb */, _run int32) {
	X__do_cleanup_pop(tls, _cb)
	if _run == 0 {
		goto _1
	}

	fn1022(*(*uintptr)(unsafe.Pointer(_cb)))(tls, *(*uintptr)(unsafe.Pointer(_cb + 8)))
_1:
}

type t1084__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t1084__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// xdummy is defined at pthread_cleanup_push.c:3:13
func x14dummy(tls TLS, _cb uintptr /* *S__ptcb */) {
}

type s39__ptcb = struct {
	F__f    uintptr // *func(TLS, uintptr)
	F__x    uintptr // *void
	F__next uintptr // *S__ptcb
}

// linking pthread_cond_broadcast.o

// Xpthread_cond_broadcast is defined at pthread_cond_broadcast.c:5:5
func Xpthread_cond_broadcast(tls TLS, _c uintptr /* *Tpthread_cond_t = struct{F__u s...6]uintptr;F int64; _ [40]byte};} */) (r int32) {
	if *(*uintptr)(unsafe.Pointer(_c)) != 0 {
		goto _1
	}

	return X__private_cond_signal(tls, _c, int32(-1))

_1:
	if *(*int32)(unsafe.Pointer(_c + 12)) != 0 {
		goto _2
	}

	return int32(0)

_2:
	x3a_inc(tls, _c+8)
	x5__wake(tls, _c+8, int32(-1), int32(0))
	return int32(0)
}

type t1085__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t1085__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// xa_inc is defined at atomic_arch.h:80:20
func x3a_inc(tls TLS, _p uintptr /* *int32 */) {
	a_inc(_p)
}

// x__wake is defined at pthread_impl.h:154:20
func x5__wake(tls TLS, _addr uintptr /* *void */, _cnt int32, _priv int32) {
	if _priv == 0 {
		goto _1
	}

	_priv = int32(128)
_1:
	if _cnt >= int32(0) {
		goto _2
	}

	_cnt = int32(0x7fffffff)
_2:
	if x57__syscall3(tls, int64(202), int64(_addr), int64(int32(1)|_priv), int64(_cnt)) == int64(-38) {
		x57__syscall3(tls, int64(202), int64(_addr), int64(1), int64(_cnt))
	}
}

// x__syscall3 is defined at syscall_arch.h:33:22
func x57__syscall3(tls TLS, _n int64, _a1 int64, _a2 int64, _a3 int64) (r int64) {
	return X__syscall(tls, _n, _a1, _a2, _a3, int64(0), int64(0), int64(0))
}

// linking pthread_cond_destroy.o

func set1023(p *int32, v int32) int32 { *p = v; return v }

// Xpthread_cond_destroy is defined at pthread_cond_destroy.c:3:5
func Xpthread_cond_destroy(tls TLS, _c uintptr /* *Tpthread_cond_t = struct{F__u s...6]uintptr;F int64; _ [40]byte};} */) (r int32) {
	var _cnt int32

	if *(*uintptr)(unsafe.Pointer(_c)) == 0 || *(*int32)(unsafe.Pointer(_c + 12)) == 0 {
		goto _1
	}

	x2a_or(tls, _c+12, int32(-0x80000000))
	x4a_inc(tls, _c+8)
	x6__wake(tls, _c+8, int32(-1), int32(0))
_2:
	if (set1023(&_cnt, *(*int32)(unsafe.Pointer(_c + 12))) & int32(0x7fffffff)) == 0 {
		goto _3
	}

	X__wait(tls, _c+12, null, _cnt, int32(0))
	goto _2

_3:
_1:
	return int32(0)
}

type t1086__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t1086__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// xa_or is defined at atomic_arch.h:53:20
func x2a_or(tls TLS, _p uintptr /* *int32 */, _v int32) {
	X__assert_fail(tls, ts+0 /* "TODO(ccgo)" */, ts+36 /* "arch/x86_64/atom..." */, int32(55), x1024__func__)
}

// xa_inc is defined at atomic_arch.h:80:20
func x4a_inc(tls TLS, _p uintptr /* *int32 */) {
	a_inc(_p)
}

// x__wake is defined at pthread_impl.h:154:20
func x6__wake(tls TLS, _addr uintptr /* *void */, _cnt int32, _priv int32) {
	if _priv == 0 {
		goto _1
	}

	_priv = int32(128)
_1:
	if _cnt >= int32(0) {
		goto _2
	}

	_cnt = int32(0x7fffffff)
_2:
	if x58__syscall3(tls, int64(202), int64(_addr), int64(int32(1)|_priv), int64(_cnt)) == int64(-38) {
		x58__syscall3(tls, int64(202), int64(_addr), int64(1), int64(_cnt))
	}
}

// x4__func__ [5]int8, escapes: true, atomic_arch.h:54:1
var x1024__func__ = ds + 46560

// x__syscall3 is defined at syscall_arch.h:33:22
func x58__syscall3(tls TLS, _n int64, _a1 int64, _a2 int64, _a3 int64) (r int64) {
	return X__syscall(tls, _n, _a1, _a2, _a3, int64(0), int64(0), int64(0))
}

// linking pthread_cond_init.o

// Xpthread_cond_init is defined at pthread_cond_init.c:3:5
func Xpthread_cond_init(tls TLS, _c uintptr /* *Tpthread_cond_t = struct{F__u s...6]uintptr;F int64; _ [40]byte};} */, _a uintptr /* *Tpthread_condattr_t = struct{F__attr uint32;} */) (r int32) {
	var _unnamed1 struct {
		F__u struct {
			F__i  [0][12]int32
			F__vi [0][12]int32
			F__p  [0][6]uintptr
			F     int64
			_     [40]byte
		}
	}
	_ = _unnamed1
	*(*struct {
		F__u struct {
			F__i  [0][12]int32
			F__vi [0][12]int32
			F__p  [0][6]uintptr
			F     int64
			_     [40]byte
		}
	})(unsafe.Pointer(_c)) = struct {
		F__u struct {
			F__i  [0][12]int32
			F__vi [0][12]int32
			F__p  [0][6]uintptr
			F     int64
			_     [40]byte
		}
	}{}
	if _a == 0 {
		goto _1
	}

	*(*int32)(unsafe.Pointer(_c + 16)) = int32(*(*uint32)(unsafe.Pointer(_a)) & uint32(0x7fffffff))
	if (*(*uint32)(unsafe.Pointer(_a)) >> (uint(31) % 32)) == 0 {
		goto _2
	}

	*(*uintptr)(unsafe.Pointer(_c)) = uintptr(18446744073709551615)
_2:
_1:
	return int32(0)
}

type t1087__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t1087__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t1pthread_cond_t = struct {
	F__u struct {
		F__i  [0][12]int32
		F__vi [0][12]int32
		F__p  [0][6]uintptr
		F     int64
		_     [40]byte
	}
}

// linking pthread_cond_signal.o

// Xpthread_cond_signal is defined at pthread_cond_signal.c:5:5
func Xpthread_cond_signal(tls TLS, _c uintptr /* *Tpthread_cond_t = struct{F__u s...6]uintptr;F int64; _ [40]byte};} */) (r int32) {
	if *(*uintptr)(unsafe.Pointer(_c)) != 0 {
		goto _1
	}

	return X__private_cond_signal(tls, _c, int32(1))

_1:
	if *(*int32)(unsafe.Pointer(_c + 12)) != 0 {
		goto _2
	}

	return int32(0)

_2:
	x5a_inc(tls, _c+8)
	x7__wake(tls, _c+8, int32(1), int32(0))
	return int32(0)
}

type t1088__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t1088__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// xa_inc is defined at atomic_arch.h:80:20
func x5a_inc(tls TLS, _p uintptr /* *int32 */) {
	a_inc(_p)
}

// x__wake is defined at pthread_impl.h:154:20
func x7__wake(tls TLS, _addr uintptr /* *void */, _cnt int32, _priv int32) {
	if _priv == 0 {
		goto _1
	}

	_priv = int32(128)
_1:
	if _cnt >= int32(0) {
		goto _2
	}

	_cnt = int32(0x7fffffff)
_2:
	if x59__syscall3(tls, int64(202), int64(_addr), int64(int32(1)|_priv), int64(_cnt)) == int64(-38) {
		x59__syscall3(tls, int64(202), int64(_addr), int64(1), int64(_cnt))
	}
}

// x__syscall3 is defined at syscall_arch.h:33:22
func x59__syscall3(tls TLS, _n int64, _a1 int64, _a2 int64, _a3 int64) (r int64) {
	return X__syscall(tls, _n, _a1, _a2, _a3, int64(0), int64(0), int64(0))
}

// linking pthread_cond_timedwait.o

func set1025(p *int32, v int32) int32 { *p = v; return v }

// X__pthread_cond_timedwait is defined at pthread_cond_timedwait.c:67:5
func X__pthread_cond_timedwait(tls TLS, _c uintptr /* *Tpthread_cond_t = struct{F__u s...6]uintptr;F int64; _ [40]byte};} */, _m uintptr /* *Tpthread_mutex_t = struct{F__u ...5]uintptr;F int64; _ [32]byte};} */, _ts uintptr /* *Stimespec */) (r int32) {
	esc := MustMalloc(36)
	var (
		_node     = esc // *Swaiter
		_e        int32
		_seq      int32
		_clock    int32
		_cs       = esc + 32 // *int32
		_shared   int32
		_oldstate int32
		_tmp      int32
		_fut      uintptr // *int32
	)
	defer Free(esc)
	Copy(_node, ts+2940 /* "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00..." */, 32)
	_clock = *(*int32)(unsafe.Pointer(_c + 16))
	_shared = int32(0)
	if *(*int32)(unsafe.Pointer(_m))&int32(15) == 0 || *(*int32)(unsafe.Pointer(_m + 4))&int32(0x7fffffff) == *(*int32)(unsafe.Pointer(x35__pthread_self(tls) + 56)) {
		goto _1
	}

	return int32(1)

_1:
	if _ts == 0 || uint64(*(*int64)(unsafe.Pointer(_ts + 8))) < uint64(1000000000) {
		goto _2
	}

	return int32(22)

_2:
	X__pthread_testcancel(tls)
	if *(*uintptr)(unsafe.Pointer(_c)) == 0 {
		goto _3
	}

	_shared = int32(1)
	_fut = _c + 8
	_seq = *(*int32)(unsafe.Pointer(_c + 8))
	x6a_inc(tls, _c+12)
	goto _4

_3:
	x7lock(tls, _c+32)
	_seq = set1025((*int32)(unsafe.Pointer(_node+20)), int32(2))
	_fut = _node + 20
	*(*int32)(unsafe.Pointer(_node + 16)) = int32(0)
	*(*uintptr)(unsafe.Pointer(_node + 8)) = *(*uintptr)(unsafe.Pointer(_c + 8))
	*(*uintptr)(unsafe.Pointer(_c + 8)) = _node
	if *(*uintptr)(unsafe.Pointer(_c + 40)) != 0 {
		goto _5
	}

	*(*uintptr)(unsafe.Pointer(_c + 40)) = _node
	goto _6

_5:
	*(*uintptr)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_node + 8)))) = _node
_6:
	xunlock(tls, _c+32)
_4:
	X__pthread_mutex_unlock(tls, _m)
	X__pthread_setcancelstate(tls, int32(2), _cs)
	if *(*int32)(unsafe.Pointer(_cs)) != int32(1) {
		goto _7
	}

	X__pthread_setcancelstate(tls, *(*int32)(unsafe.Pointer(_cs)), null)
_7:
_8:
	_e = X__timedwait_cp(tls, _fut, _seq, _clock, _ts, bool2int(_shared == 0))
	if (*(*int32)(unsafe.Pointer(_fut)) == _seq) && ((_e == 0) || (_e == int32(4))) {
		goto _8
	}

	if _e != int32(4) {
		goto _11
	}

	_e = int32(0)
_11:
	if _shared == 0 {
		goto _12
	}

	if _e != int32(125) || *(*int32)(unsafe.Pointer(_c + 8)) == _seq {
		goto _13
	}

	_e = int32(0)
_13:
	if x2a_fetch_add(tls, _c+12, int32(-1)) != int32(-0x7fffffff) {
		goto _14
	}

	x8__wake(tls, _c+12, int32(1), int32(0))
_14:
	_oldstate = int32(0)
	goto lrelock

_12:
	_oldstate = x9a_cas(tls, _node+16, int32(0), int32(2))
	if _oldstate != int32(0) {
		goto _15
	}

	x7lock(tls, _c+32)
	if *(*uintptr)(unsafe.Pointer(_c + 8)) != _node {
		goto _17
	}

	*(*uintptr)(unsafe.Pointer(_c + 8)) = *(*uintptr)(unsafe.Pointer(_node + 8))
	goto _18

_17:
	if *(*uintptr)(unsafe.Pointer(_node)) == 0 {
		goto _19
	}

	*(*uintptr)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_node)) + 8)) = *(*uintptr)(unsafe.Pointer(_node + 8))
_19:
_18:
	if *(*uintptr)(unsafe.Pointer(_c + 40)) != _node {
		goto _20
	}

	*(*uintptr)(unsafe.Pointer(_c + 40)) = *(*uintptr)(unsafe.Pointer(_node))
	goto _21

_20:
	if *(*uintptr)(unsafe.Pointer(_node + 8)) == 0 {
		goto _22
	}

	*(*uintptr)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_node + 8)))) = *(*uintptr)(unsafe.Pointer(_node))
_22:
_21:
	xunlock(tls, _c+32)
	if *(*uintptr)(unsafe.Pointer(_node + 24)) == 0 {
		goto _23
	}

	if x2a_fetch_add(tls, *(*uintptr)(unsafe.Pointer(_node + 24)), int32(-1)) != int32(1) {
		goto _24
	}

	x8__wake(tls, *(*uintptr)(unsafe.Pointer(_node + 24)), int32(1), int32(1))
_24:
_23:
	goto _16

_15:
	x7lock(tls, _node+20)
_16:
	goto lrelock
lrelock:
	if set1025(&_tmp, Xpthread_mutex_lock(tls, _m)) == 0 {
		goto _25
	}

	_e = _tmp
_25:
	if _oldstate != int32(0) {
		goto _26
	}

	goto ldone

_26:
	if *(*uintptr)(unsafe.Pointer(_node + 8)) != 0 {
		goto _27
	}

	x6a_inc(tls, _m+8)
_27:
	if *(*uintptr)(unsafe.Pointer(_node)) == 0 {
		goto _28
	}

	xunlock_requeue(tls, *(*uintptr)(unsafe.Pointer(_node))+20, _m+4, *(*int32)(unsafe.Pointer(_m))&int32(128))
	goto _29

_28:
	x2a_dec(tls, _m+8)
_29:
	if _e != int32(125) {
		goto _30
	}

	_e = int32(0)
_30:
	goto ldone
ldone:
	X__pthread_setcancelstate(tls, *(*int32)(unsafe.Pointer(_cs)), null)
	if _e != int32(125) {
		goto _31
	}

	X__pthread_testcancel(tls)
	X__pthread_setcancelstate(tls, int32(1), null)
_31:
	return _e
}

// X__private_cond_signal is defined at pthread_cond_timedwait.c:177:5
func X__private_cond_signal(tls TLS, _c uintptr /* *Tpthread_cond_t = struct{F__u s...6]uintptr;F int64; _ [40]byte};} */, _n int32) (r int32) {
	esc := MustMalloc(4)
	var (
		_p     uintptr // *Swaiter
		_first uintptr // *Swaiter
		_ref   = esc   // *int32
		_cur   int32
	)
	defer Free(esc)
	_first = 0
	*(*int32)(unsafe.Pointer(_ref)) = int32(0)
	x7lock(tls, _c+32)
	_p = *(*uintptr)(unsafe.Pointer(_c + 40))
_1:
	if _n == 0 || _p == 0 {
		goto _3
	}

	if x9a_cas(tls, _p+16, int32(0), int32(1)) == int32(0) {
		goto _4
	}

	*(*int32)(unsafe.Pointer(_ref))++
	*(*uintptr)(unsafe.Pointer(_p + 24)) = _ref
	goto _5

_4:
	_n--
	if _first != 0 {
		goto _6
	}

	_first = _p
_6:
_5:
	_p = *(*uintptr)(unsafe.Pointer(_p))
	goto _1

_3:
	if _p == 0 {
		goto _7
	}

	if *(*uintptr)(unsafe.Pointer(_p + 8)) == 0 {
		goto _9
	}

	*(*uintptr)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_p + 8)))) = null
_9:
	*(*uintptr)(unsafe.Pointer(_p + 8)) = null
	goto _8

_7:
	*(*uintptr)(unsafe.Pointer(_c + 8)) = null
_8:
	*(*uintptr)(unsafe.Pointer(_c + 40)) = _p
	xunlock(tls, _c+32)
_10:
	if set1025(&_cur, *(*int32)(unsafe.Pointer(_ref))) == 0 {
		goto _11
	}

	X__wait(tls, _ref, null, _cur, int32(1))
	goto _10

_11:
	if _first == 0 {
		goto _12
	}

	xunlock(tls, _first+20)
_12:
	return int32(0)
}

type t1089__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t1089__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type s41timespec = struct {
	Ftv_sec  int64
	Ftv_nsec int64
}

type Swaiter = struct {
	Fprev    uintptr // *Swaiter
	Fnext    uintptr // *Swaiter
	Fstate   int32
	Fbarrier int32
	Fnotify  uintptr // *int32
}

// x__pthread_self is defined at pthread_arch.h:1:30
func x35__pthread_self(tls TLS) (r uintptr /* *S__pthread */) {
	return uintptr(tls)
	return r
}

// xa_inc is defined at atomic_arch.h:80:20
func x6a_inc(tls TLS, _p uintptr /* *int32 */) {
	a_inc(_p)
}

// xlock is defined at pthread_cond_timedwait.c:38:20
func x7lock(tls TLS, _l uintptr /* *int32 */) {
	if x9a_cas(tls, _l, int32(0), int32(1)) == 0 {
		goto _1
	}

	x9a_cas(tls, _l, int32(1), int32(2))
_2:
	X__wait(tls, _l, null, int32(2), int32(1))
	if x9a_cas(tls, _l, int32(0), int32(2)) != 0 {
		goto _2
	}

_1:
}

// xunlock is defined at pthread_cond_timedwait.c:47:20
func xunlock(tls TLS, _l uintptr /* *int32 */) {
	if x3a_swap(tls, _l, int32(0)) != int32(2) {
		goto _1
	}

	x8__wake(tls, _l, int32(1), int32(1))
_1:
}

// xa_fetch_add is defined at atomic_arch.h:34:19
func x2a_fetch_add(tls TLS, _p uintptr /* *int32 */, _v int32) (r int32) {
	return a_fetch_add(_p, _v)
	return r
}

// x__wake is defined at pthread_impl.h:154:20
func x8__wake(tls TLS, _addr uintptr /* *void */, _cnt int32, _priv int32) {
	if _priv == 0 {
		goto _1
	}

	_priv = int32(128)
_1:
	if _cnt >= int32(0) {
		goto _2
	}

	_cnt = int32(0x7fffffff)
_2:
	if x60__syscall3(tls, int64(202), int64(_addr), int64(int32(1)|_priv), int64(_cnt)) == int64(-38) {
		x60__syscall3(tls, int64(202), int64(_addr), int64(1), int64(_cnt))
	}
}

// xa_cas is defined at atomic_arch.h:4:19
func x9a_cas(tls TLS, _p uintptr /* *int32 */, _t int32, _s int32) (r int32) {
	return a_cas(_p, _t, _s)
	return r
}

// xunlock_requeue is defined at pthread_cond_timedwait.c:53:20
func xunlock_requeue(tls TLS, _l uintptr /* *int32 */, _r uintptr /* *int32 */, _w int32) {
	x6a_store(tls, _l, int32(0))
	if _w == 0 {
		goto _1
	}

	x8__wake(tls, _l, int32(1), int32(1))
	goto _2

_1:
	if x7__syscall5(tls, int64(202), int64(_l), int64(131), int64(0), int64(1), int64(_r)) == int64(-38) {
		x7__syscall5(tls, int64(202), int64(_l), int64(3), int64(0), int64(1), int64(_r))
	}
_2:
}

// xa_dec is defined at atomic_arch.h:89:20
func x2a_dec(tls TLS, _p uintptr /* *int32 */) {
	a_dec(_p)
}

type t57time_t = int64

type s41__pthread = struct {
	Fself          uintptr // *S__pthread
	Fdtv           uintptr // **void
	Funused1       uintptr // *void
	Funused2       uintptr // *void
	Fsysinfo       uint64
	Fcanary        uint64
	Fcanary2       uint64
	Ftid           int32
	Ferrno_val     int32
	Fdetach_state  int32
	Fcancel        int32
	Fcanceldisable uint8
	Fcancelasync   uint8
	F74            uint8
	Fmap_base      uintptr // *uint8
	Fmap_size      uint64
	Fstack         uintptr // *void
	Fstack_size    uint64
	Fguard_size    uint64
	Fstart_arg     uintptr // *void
	Fstart         uintptr // *func(TLS, uintptr) uintptr
	Fresult        uintptr // *void
	Fcancelbuf     uintptr // *S__ptcb
	Ftsd           uintptr // **void
	Frobust_list   struct {
		Fhead    uintptr
		Foff     int64
		Fpending uintptr
	}
	Ftimer_id      int32
	Flocale        uintptr // Tlocale_t = *S__locale_struct
	Fkilllock      [1]int32
	Fdlerror_buf   uintptr // *int8
	Fstdio_locks   uintptr // *void
	Fcanary_at_end uint64
	Fdtv_copy      uintptr // **void
}

// xa_swap is defined at atomic_arch.h:24:19
func x3a_swap(tls TLS, _p uintptr /* *int32 */, _v int32) (r int32) {
	return atomic.SwapInt32((*int32)(unsafe.Pointer(_p)), _v)
	return r
}

type t6clockid_t = int32

// x__syscall3 is defined at syscall_arch.h:33:22
func x60__syscall3(tls TLS, _n int64, _a1 int64, _a2 int64, _a3 int64) (r int64) {
	return X__syscall(tls, _n, _a1, _a2, _a3, int64(0), int64(0), int64(0))
}

// xa_store is defined at atomic_arch.h:98:20
func x6a_store(tls TLS, _p uintptr /* *int32 */, _x int32) {
	X__assert_fail(tls, ts+0 /* "TODO(ccgo)" */, ts+36 /* "arch/x86_64/atom..." */, int32(100), x1026__func__)
}

// x__syscall5 is defined at syscall_arch.h:52:22
func x7__syscall5(tls TLS, _n int64, _a1 int64, _a2 int64, _a3 int64, _a4 int64, _a5 int64) (r int64) {
	return X__syscall(tls, _n, _a1, _a2, _a3, _a4, _a5, int64(0))
}

type t60uintptr_t = uint64

type t365size_t = uint64

type s40__ptcb = struct {
	F__f    uintptr // *func(TLS, uintptr)
	F__x    uintptr // *void
	F__next uintptr // *S__ptcb
}

type s155__locale_struct = struct{ Fcat [6]uintptr }

// x14__func__ [8]int8, escapes: true, atomic_arch.h:99:1
var x1026__func__ = ds + 46568

// linking pthread_cond_wait.o

// Xpthread_cond_wait is defined at pthread_cond_wait.c:3:5
func Xpthread_cond_wait(tls TLS, _c uintptr /* *Tpthread_cond_t = struct{F__u s...6]uintptr;F int64; _ [40]byte};} */, _m uintptr /* *Tpthread_mutex_t = struct{F__u ...5]uintptr;F int64; _ [32]byte};} */) (r int32) {
	return Xpthread_cond_timedwait(tls, _c, _m, null)
}

type t1090__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t1090__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// linking pthread_condattr_destroy.o

// Xpthread_condattr_destroy is defined at pthread_condattr_destroy.c:3:5
func Xpthread_condattr_destroy(tls TLS, _a uintptr /* *Tpthread_condattr_t = struct{F__attr uint32;} */) (r int32) {
	return int32(0)
}

type t1091__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t1091__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// linking pthread_condattr_init.o

// Xpthread_condattr_init is defined at pthread_condattr_init.c:3:5
func Xpthread_condattr_init(tls TLS, _a uintptr /* *Tpthread_condattr_t = struct{F__attr uint32;} */) (r int32) {
	var _unnamed1 struct{ F__attr uint32 }
	_ = _unnamed1
	*(*struct{ F__attr uint32 })(unsafe.Pointer(_a)) = struct{ F__attr uint32 }{}
	return int32(0)
}

type t1092__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t1092__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type Tpthread_condattr_t = struct{ F__attr uint32 }

// linking pthread_condattr_setclock.o

// Xpthread_condattr_setclock is defined at pthread_condattr_setclock.c:3:5
func Xpthread_condattr_setclock(tls TLS, _a uintptr /* *Tpthread_condattr_t = struct{F__attr uint32;} */, _clk int32) (r int32) {
	if _clk >= int32(0) && uint32(_clk)-uint32(2) >= uint32(2) {
		goto _1
	}

	return int32(22)

_1:
	{
		p := (*uint32)(unsafe.Pointer(_a))
		*p = *p & uint32(0x80000000)
	}
	{
		p := (*uint32)(unsafe.Pointer(_a))
		*p = *p | uint32(_clk)
	}
	return int32(0)
}

type t1093__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t1093__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t7clockid_t = int32

// linking pthread_condattr_setpshared.o

// Xpthread_condattr_setpshared is defined at pthread_condattr_setpshared.c:3:5
func Xpthread_condattr_setpshared(tls TLS, _a uintptr /* *Tpthread_condattr_t = struct{F__attr uint32;} */, _pshared int32) (r int32) {
	if uint32(_pshared) <= uint32(1) {
		goto _1
	}

	return int32(22)

_1:
	{
		p := (*uint32)(unsafe.Pointer(_a))
		*p = *p & uint32(0x7fffffff)
	}
	{
		p := (*uint32)(unsafe.Pointer(_a))
		*p = *p | uint32(_pshared)<<(uint(31)%32)
	}
	return int32(0)
}

type t1094__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t1094__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// linking pthread_create.o

func fn1027(p uintptr) func(TLS, uintptr) { return *(*func(TLS, uintptr))(unsafe.Pointer(&p)) }

func set1028(p *uintptr, v uintptr) uintptr { *p = v; return v }

// X__pthread_exit is defined at pthread_create.c:29:16
func X__pthread_exit(tls TLS, _result uintptr /* *void */) {
	esc := MustMalloc(128)
	var (
		_self    uintptr // Tpthread_t = *S__pthread
		_set     = esc   // *Tsigset_t = struct{F__bits [16]uint64;}
		_f       uintptr // *func(TLS, uintptr)
		_x       uintptr // *void
		_rp      uintptr // **void
		_m       uintptr // *Tpthread_mutex_t = struct{F__u ...5]uintptr;F int64; _ [32]byte};}
		_waiters int32
		_priv    int32
		_cont    int32
		_state   int32
	)
	defer Free(esc)
	_self = x36__pthread_self(tls)
	*(*uint8)(unsafe.Pointer(_self + 72)) = uint8(1)
	*(*uint8)(unsafe.Pointer(_self + 73)) = uint8(0)
	*(*uintptr)(unsafe.Pointer(_self + 136)) = _result
_1:
	if *(*uintptr)(unsafe.Pointer(_self + 144)) == 0 {
		goto _2
	}

	_f = *(*uintptr)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_self + 144))))
	_x = *(*uintptr)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_self + 144)) + 8))
	*(*uintptr)(unsafe.Pointer(_self + 144)) = *(*uintptr)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_self + 144)) + 16))
	fn1027(_f)(tls, _x)
	goto _1

_2:
	X__pthread_tsd_run_dtors(tls)
	X__lock(tls, _self+200)
	X__block_all_sigs(tls, _set)
	if x3a_fetch_add(tls, X__libc+12, int32(-1)) != int32(0) {
		goto _3
	}

	*(*int32)(unsafe.Pointer(X__libc + 12)) = int32(0)
	X__unlock(tls, _self+200)
	X__restore_sigs(tls, _set)
	Xexit(tls, int32(0))
_3:
	X__vm_lock(tls)
_4:
	if set1028(&_rp, *(*uintptr)(unsafe.Pointer(_self + 160))) == 0 || _rp == (_self+160) {
		goto _5
	}

	_m = _rp - uintptr(uint64(int64(null+32-null)))
	_waiters = *(*int32)(unsafe.Pointer(_m + 8))
	_priv = *(*int32)(unsafe.Pointer(_m))&int32(128) ^ int32(128)
	*(*uintptr)(unsafe.Pointer((_self + 160) + 16)) = _rp
	*(*uintptr)(unsafe.Pointer(_self + 160)) = *(*uintptr)(unsafe.Pointer(_rp))
	_cont = x4a_swap(tls, _m+4, int32(0x40000000))
	*(*uintptr)(unsafe.Pointer((_self + 160) + 16)) = null
	if _cont >= int32(0) && _waiters == 0 {
		goto _6
	}

	x9__wake(tls, _m+4, int32(1), _priv)
_6:
	goto _4

_5:
	X__vm_unlock(tls)
	X__do_orphaned_stdio_locks(tls)
	X__dl_thread_cleanup(tls)
	_state = x10a_cas(tls, _self+64, int32(2), int32(1))
	if _state < int32(3) || *(*uintptr)(unsafe.Pointer(_self + 80)) == 0 {
		goto _7
	}

	if _state != int32(4) {
		goto _8
	}

	x39__syscall1(tls, int64(218), int64(0))
_8:
	if *(*int64)(unsafe.Pointer((_self + 160) + 8)) == 0 {
		goto _9
	}

	x49__syscall2(tls, int64(273), int64(0), int64(24))
_9:
	X__vm_wait(tls)
	X__unmapself(tls, *(*uintptr)(unsafe.Pointer(_self + 80)), *(*uint64)(unsafe.Pointer(_self + 88)))
_7:
	*(*int32)(unsafe.Pointer(_self + 56)) = int32(0)
	X__unlock(tls, _self+200)

_10:
	x39__syscall1(tls, int64(60), int64(0))
	goto _10
}

// X__do_cleanup_push is defined at pthread_create.c:130:6
func X__do_cleanup_push(tls TLS, _cb uintptr /* *S__ptcb */) {
	var _self uintptr // *S__pthread

	_self = x36__pthread_self(tls)
	*(*uintptr)(unsafe.Pointer(_cb + 16)) = *(*uintptr)(unsafe.Pointer(_self + 144))
	*(*uintptr)(unsafe.Pointer(_self + 144)) = _cb
}

// X__do_cleanup_pop is defined at pthread_create.c:137:6
func X__do_cleanup_pop(tls TLS, _cb uintptr /* *S__ptcb */) {
	*(*uintptr)(unsafe.Pointer(x36__pthread_self(tls) + 144)) = *(*uintptr)(unsafe.Pointer(_cb + 16))
}

// X__block_new_threads int32, escapes: true, pthread_create.c:170:14
var X__block_new_threads = bss + 7104

// X__default_stacksize Tsize_t = uint64, escapes: true, pthread_create.c:171:8
var X__default_stacksize = ds + 46576

// X__default_guardsize Tsize_t = uint64, escapes: true, pthread_create.c:172:8
var X__default_guardsize = ds + 46584

func fp1029(f func(TLS, uintptr) uintptr) uintptr { return *(*uintptr)(unsafe.Pointer(&f)) }

func setb1030(p *uint8, v int32) uint8 {
	w := uint8(v) & (1<<1 - 1)
	*p = (*p &^ ((1<<1 - 1) << 1)) | (w << 1)
	return w << (8 - 1) >> (8 - 1)
}

func fp1031(f func(TLS, uintptr) int32) uintptr { return *(*uintptr)(unsafe.Pointer(&f)) }

// X__pthread_create is defined at pthread_create.c:186:5
func X__pthread_create(tls TLS, _res uintptr /* **S__pthread */, _attrp uintptr /* *Tpthread_attr_t = struct{F__u s...[7]uint64;F int64; _ [48]byte};} */, _entry uintptr /* *func(TLS, uintptr) uintptr */, _arg uintptr /* *void */) (r int32) {
	esc := MustMalloc(232)
	var (
		_ret         int32
		_c11         int32
		_size        uint64
		_guard       uint64
		_self        uintptr // *S__pthread
		_new         uintptr // *S__pthread
		_map         uintptr // *uint8
		_stack       uintptr // *uint8
		_tsd         uintptr // *uint8
		_stack_limit uintptr // *uint8
		_flags       uint32
		_do_sched    int32
		_attr        = esc       // *Tpthread_attr_t = struct{F__u st...[7]uint64;F int64; _ [48]byte};}
		_ssa         = esc + 64  // *Sstart_sched_args
		_f           uintptr     // *TFILE = S_IO_FILE
		_xxx         = esc + 224 // *[1]uint64
		_p           uintptr     // *void
		_need        uint64
	)
	defer Free(esc)
	_c11 = bool2int(_attrp == uintptr(18446744073709551615))
	_map = 0
	_stack = 0
	_tsd = 0
	_flags = uint32(8195840)
	_do_sched = int32(0)
	Copy(_attr, ts+5324 /* "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00..." */, 56)
	if *(*int32)(unsafe.Pointer(X__libc)) != 0 {
		goto _1
	}

	return int32(38)

_1:
	_self = x36__pthread_self(tls)
	if *(*int32)(unsafe.Pointer(X__libc + 4)) != 0 {
		goto _2
	}

	_f = *(*uintptr)(unsafe.Pointer(X__ofl_lock(tls)))
_3:
	if _f == 0 {
		goto _5
	}

	xinit_file_lock(tls, _f)
	_f = *(*uintptr)(unsafe.Pointer(_f + 112))
	goto _3

_5:
	X__ofl_unlock(tls)
	xinit_file_lock(tls, *(*uintptr)(unsafe.Pointer(X__stdin_used)))
	xinit_file_lock(tls, *(*uintptr)(unsafe.Pointer(X__stdout_used)))
	xinit_file_lock(tls, *(*uintptr)(unsafe.Pointer(X__stderr_used)))
	*(*uint64)(unsafe.Pointer(_xxx)) = uint64(12884901888)
	_p = _xxx
	x32__syscall4(tls, int64(14), int64(1), int64(_p), int64(0), int64(8))
	*(*uintptr)(unsafe.Pointer(_self + 152)) = X__pthread_tsd_main
	*(*int32)(unsafe.Pointer(X__libc + 4)) = int32(1)
_2:
	if _attrp == 0 || _c11 != 0 {
		goto _6
	}

	*(*struct {
		F__u struct {
			F__i  [0][14]int32
			F__vi [0][14]int32
			F__s  [0][7]uint64
			F     int64
			_     [48]byte
		}
	})(unsafe.Pointer(_attr)) = *(*struct {
		F__u struct {
			F__i  [0][14]int32
			F__vi [0][14]int32
			F__s  [0][7]uint64
			F     int64
			_     [48]byte
		}
	})(unsafe.Pointer(_attrp))
_6:
	X__acquire_ptc(tls)
	if _attrp != 0 && _c11 == 0 {
		goto _7
	}

	*(*uint64)(unsafe.Pointer(_attr)) = *(*uint64)(unsafe.Pointer(X__default_stacksize))
	*(*uint64)(unsafe.Pointer(_attr + 8)) = *(*uint64)(unsafe.Pointer(X__default_guardsize))
_7:
	if *(*int32)(unsafe.Pointer(X__block_new_threads)) == 0 {
		goto _8
	}

	X__wait(tls, X__block_new_threads, null, int32(1), int32(1))
_8:
	if *(*uint64)(unsafe.Pointer(_attr + 16)) == 0 {
		goto _9
	}

	_need = *(*uint64)(unsafe.Pointer(X__libc + 32)) + *(*uint64)(unsafe.Pointer(X__pthread_tsd_size))
	_size = *(*uint64)(unsafe.Pointer(_attr))
	_stack = uintptr(*(*uint64)(unsafe.Pointer(_attr + 16)) & uint64(18446744073709551600))
	_stack_limit = uintptr(*(*uint64)(unsafe.Pointer(_attr + 16)) - _size)
	if _need >= _size/uint64(8) || _need >= uint64(2048) {
		goto _11
	}

	_tsd = _stack - uintptr(*(*uint64)(unsafe.Pointer(X__pthread_tsd_size)))
	_stack = _tsd - uintptr(*(*uint64)(unsafe.Pointer(X__libc + 32)))
	Xmemset(tls, _stack, int32(0), _need)
	goto _12

_11:
	_size = (_need + uint64(4096) - uint64(1)) & uint64(18446744073709547520)
_12:
	_guard = uint64(0)
	goto _10

_9:
	_guard = (*(*uint64)(unsafe.Pointer(_attr + 8)) + uint64(4096) - uint64(1)) & uint64(18446744073709547520)
	_size = _guard + (*(*uint64)(unsafe.Pointer(_attr))+*(*uint64)(unsafe.Pointer(X__libc + 32))+*(*uint64)(unsafe.Pointer(X__pthread_tsd_size))+uint64(4096)-uint64(1))&uint64(18446744073709547520)
_10:
	if _tsd != 0 {
		goto _13
	}

	if _guard == 0 {
		goto _14
	}

	_map = X__mmap(tls, null, _size, int32(0), int32(34), int32(-1), int64(0))
	if _map != uintptr(18446744073709551615) {
		goto _16
	}

	goto lfail

_16:
	if X__mprotect(tls, _map+uintptr(_guard), _size-_guard, int32(3)) == 0 || *(*int32)(unsafe.Pointer(X__errno_location(tls))) == int32(38) {
		goto _17
	}

	X__munmap(tls, _map, _size)
	goto lfail

_17:
	goto _15

_14:
	_map = X__mmap(tls, null, _size, int32(3), int32(34), int32(-1), int64(0))
	if _map != uintptr(18446744073709551615) {
		goto _18
	}

	goto lfail

_18:
_15:
	_tsd = (_map + uintptr(_size)) - uintptr(*(*uint64)(unsafe.Pointer(X__pthread_tsd_size)))
	if _stack != 0 {
		goto _19
	}

	_stack = _tsd - uintptr(*(*uint64)(unsafe.Pointer(X__libc + 32)))
	_stack_limit = _map + uintptr(_guard)
_19:
_13:
	_new = X__copy_tls(tls, _tsd-uintptr(*(*uint64)(unsafe.Pointer(X__libc + 32))))
	*(*uintptr)(unsafe.Pointer(_new + 80)) = _map
	*(*uint64)(unsafe.Pointer(_new + 88)) = _size
	*(*uintptr)(unsafe.Pointer(_new + 96)) = _stack
	*(*uint64)(unsafe.Pointer(_new + 104)) = uint64(int64(_stack - _stack_limit))
	*(*uint64)(unsafe.Pointer(_new + 112)) = _guard
	*(*uintptr)(unsafe.Pointer(_new + 128)) = _entry
	*(*uintptr)(unsafe.Pointer(_new + 120)) = _arg
	*(*uintptr)(unsafe.Pointer(_new)) = _new
	*(*uintptr)(unsafe.Pointer(_new + 152)) = _tsd
	*(*uintptr)(unsafe.Pointer(_new + 192)) = X__libc + 64
	if *(*int32)(unsafe.Pointer(_attr + 24)) == 0 {
		goto _20
	}

	*(*int32)(unsafe.Pointer(_new + 64)) = int32(3)
	_flags = _flags - uint32(0x200000)
	goto _21

_20:
	*(*int32)(unsafe.Pointer(_new + 64)) = int32(2)
_21:
	if *(*int32)(unsafe.Pointer(_attr + 28)) == 0 {
		goto _22
	}

	_do_sched = int32(1)
	*(*int32)(unsafe.Pointer(_ssa + 152)) = int32(-1)
	*(*uintptr)(unsafe.Pointer(_ssa + 8)) = *(*uintptr)(unsafe.Pointer(_new + 128))
	*(*uintptr)(unsafe.Pointer(_ssa)) = *(*uintptr)(unsafe.Pointer(_new + 120))
	*(*uintptr)(unsafe.Pointer(_ssa + 144)) = _attr
	*(*uintptr)(unsafe.Pointer(_new + 128)) = fp1029(X__start_sched)
	*(*uintptr)(unsafe.Pointer(_new + 120)) = _ssa
	X__block_app_sigs(tls, _ssa+16)
_22:
	*(*uintptr)(unsafe.Pointer(_new + 160)) = _new + 160
	setb1030((*uint8)(unsafe.Pointer(_new+74)), *(*int32)(unsafe.Pointer(_self + 68)))
	*(*uint64)(unsafe.Pointer(_new + 40)) = *(*uint64)(unsafe.Pointer(_self + 40))
	x7a_inc(tls, X__libc+12)
	_ret = X__clone(tls, func() uintptr {
		if _c11 != 0 {
			return fp1031(xstart_c11)
		}
		return fp1031(x1start)
	}(), _stack, int32(_flags), _new, _new+56, _new, _new+64)
	X__release_ptc(tls)
	if _do_sched == 0 {
		goto _23
	}

	X__restore_sigs(tls, _ssa+16)
_23:
	if _ret >= int32(0) {
		goto _24
	}

	x3a_dec(tls, X__libc+12)
	if _map == 0 {
		goto _25
	}

	X__munmap(tls, _map, _size)
_25:
	return int32(11)

_24:
	if _do_sched == 0 {
		goto _26
	}

	x2__futexwait(tls, _ssa+152, int32(-1), int32(1))
	if _ret == 0 {
		goto _27
	}

	return _ret

_27:
_26:
	*(*uintptr)(unsafe.Pointer(_res)) = _new
	return int32(0)

	goto lfail
lfail:
	X__release_ptc(tls)
	return int32(11)
}

type t1095__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t1095__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// xdummy_0 is defined at pthread_create.c:14:13
func xdummy_0(tls TLS) {
}

// xdummy_1 is defined at pthread_create.c:23:13
func xdummy_1(tls TLS, _p uintptr /* *void */) (r uintptr /* *void */) {
	return null
}

type s42__pthread = struct {
	Fself          uintptr // *S__pthread
	Fdtv           uintptr // **void
	Funused1       uintptr // *void
	Funused2       uintptr // *void
	Fsysinfo       uint64
	Fcanary        uint64
	Fcanary2       uint64
	Ftid           int32
	Ferrno_val     int32
	Fdetach_state  int32
	Fcancel        int32
	Fcanceldisable uint8
	Fcancelasync   uint8
	F74            uint8
	Fmap_base      uintptr // *uint8
	Fmap_size      uint64
	Fstack         uintptr // *void
	Fstack_size    uint64
	Fguard_size    uint64
	Fstart_arg     uintptr // *void
	Fstart         uintptr // *func(TLS, uintptr) uintptr
	Fresult        uintptr // *void
	Fcancelbuf     uintptr // *S__ptcb
	Ftsd           uintptr // **void
	Frobust_list   struct {
		Fhead    uintptr
		Foff     int64
		Fpending uintptr
	}
	Ftimer_id      int32
	Flocale        uintptr // Tlocale_t = *S__locale_struct
	Fkilllock      [1]int32
	Fdlerror_buf   uintptr // *int8
	Fstdio_locks   uintptr // *void
	Fcanary_at_end uint64
	Fdtv_copy      uintptr // **void
}

// x__pthread_self is defined at pthread_arch.h:1:30
func x36__pthread_self(tls TLS) (r uintptr /* *S__pthread */) {
	return uintptr(tls)
	return r
}

// xa_fetch_add is defined at atomic_arch.h:34:19
func x3a_fetch_add(tls TLS, _p uintptr /* *int32 */, _v int32) (r int32) {
	return a_fetch_add(_p, _v)
	return r
}

type t366size_t = uint64

// xa_swap is defined at atomic_arch.h:24:19
func x4a_swap(tls TLS, _p uintptr /* *int32 */, _v int32) (r int32) {
	return atomic.SwapInt32((*int32)(unsafe.Pointer(_p)), _v)
	return r
}

// x__wake is defined at pthread_impl.h:154:20
func x9__wake(tls TLS, _addr uintptr /* *void */, _cnt int32, _priv int32) {
	if _priv == 0 {
		goto _1
	}

	_priv = int32(128)
_1:
	if _cnt >= int32(0) {
		goto _2
	}

	_cnt = int32(0x7fffffff)
_2:
	if x61__syscall3(tls, int64(202), int64(_addr), int64(int32(1)|_priv), int64(_cnt)) == int64(-38) {
		x61__syscall3(tls, int64(202), int64(_addr), int64(1), int64(_cnt))
	}
}

// xa_cas is defined at atomic_arch.h:4:19
func x10a_cas(tls TLS, _p uintptr /* *int32 */, _t int32, _s int32) (r int32) {
	return a_cas(_p, _t, _s)
	return r
}

// x__syscall1 is defined at syscall_arch.h:16:22
func x39__syscall1(tls TLS, _n int64, _a1 int64) (r int64) {
	return X__syscall(tls, _n, _a1, int64(0), int64(0), int64(0), int64(0), int64(0))
}

// x__syscall2 is defined at syscall_arch.h:24:22
func x49__syscall2(tls TLS, _n int64, _a1 int64, _a2 int64) (r int64) {
	return X__syscall(tls, _n, _a1, _a2, int64(0), int64(0), int64(0), int64(0))
}

type s41__ptcb = struct {
	F__f    uintptr // *func(TLS, uintptr)
	F__x    uintptr // *void
	F__next uintptr // *S__ptcb
}

type s1start_sched_args = struct {
	Fstart_arg uintptr // *void
	Fstart_fn  uintptr // *func(TLS, uintptr) uintptr
	Fmask      struct{ F__bits [16]uint64 }
	Fattr      uintptr // *Tpthread_attr_t = struct{F__u s...[7]uint64;F int64; _ [48]byte};}
	Ffutex     int32
}

type s115_IO_FILE = struct {
	Fflags        uint32
	Frpos         uintptr // *uint8
	Frend         uintptr // *uint8
	Fclose        uintptr // *func(TLS, uintptr) int32
	Fwend         uintptr // *uint8
	Fwpos         uintptr // *uint8
	Fmustbezero_1 uintptr // *uint8
	Fwbase        uintptr // *uint8
	Fread         uintptr // *func(TLS, uintptr, uintptr, uint64) uint64
	Fwrite        uintptr // *func(TLS, uintptr, uintptr, uint64) uint64
	Fseek         uintptr // *func(TLS, uintptr, int64, int32) int64
	Fbuf          uintptr // *uint8
	Fbuf_size     uint64
	Fprev         uintptr // *TFILE = S_IO_FILE
	Fnext         uintptr // *TFILE = S_IO_FILE
	Ffd           int32
	Fpipe_pid     int32
	Flockcount    int64
	Fdummy3       int16
	Fmode         int8
	Flbf          int8
	Flock         int32
	Fwaiters      int32
	Fcookie       uintptr // *void
	Foff          int64
	Fgetln_buf    uintptr // *int8
	Fmustbezero_2 uintptr // *void
	Fshend        uintptr // *uint8
	Fshlim        int64
	Fshcnt        int64
	Fprev_locked  uintptr // *TFILE = S_IO_FILE
	Fnext_locked  uintptr // *TFILE = S_IO_FILE
	Flocale       uintptr // *S__locale_struct
}

// xinit_file_lock is defined at pthread_create.c:179:13
func xinit_file_lock(tls TLS, _f uintptr /* *TFILE = S_IO_FILE */) {
	if _f == 0 || *(*int32)(unsafe.Pointer(_f + 140)) >= int32(0) {
		goto _1
	}

	*(*int32)(unsafe.Pointer(_f + 140)) = int32(0)
_1:
}

// x__syscall4 is defined at syscall_arch.h:42:22
func x32__syscall4(tls TLS, _n int64, _a1 int64, _a2 int64, _a3 int64, _a4 int64) (r int64) {
	return X__syscall(tls, _n, _a1, _a2, _a3, _a4, int64(0), int64(0))
}

type t4pthread_attr_t = struct {
	F__u struct {
		F__i  [0][14]int32
		F__vi [0][14]int32
		F__s  [0][7]uint64
		F     int64
		_     [48]byte
	}
}

type t61uintptr_t = uint64

// xa_inc is defined at atomic_arch.h:80:20
func x7a_inc(tls TLS, _p uintptr /* *int32 */) {
	a_inc(_p)
}

func fn1032(p uintptr) func(TLS, uintptr) int32 {
	return *(*func(TLS, uintptr) int32)(unsafe.Pointer(&p))
}

// xstart_c11 is defined at pthread_create.c:154:12
func xstart_c11(tls TLS, _p uintptr /* *void */) (r int32) {
	var (
		_self  uintptr // Tpthread_t = *S__pthread
		_start uintptr // *func(TLS, uintptr) int32
	)
	_self = _p
	_start = *(*uintptr)(unsafe.Pointer(_self + 128))
	X__pthread_exit(tls, uintptr(uint64(fn1032(_start)(tls, *(*uintptr)(unsafe.Pointer(_self + 120))))))
	return int32(0)
}

func fn1033(p uintptr) func(TLS, uintptr) uintptr {
	return *(*func(TLS, uintptr) uintptr)(unsafe.Pointer(&p))
}

// xstart is defined at pthread_create.c:142:12
func x1start(tls TLS, _p uintptr /* *void */) (r int32) {
	var _self uintptr // Tpthread_t = *S__pthread

	_self = _p
	if (*(*uint8)(unsafe.Pointer(_self + 74)) >> 1 << 7 >> 7) == 0 {
		goto _1
	}

	X__assert_fail(tls, ts+0 /* "TODO(ccgo)" */, ts+5384 /* "src/thread/pthre..." */, int32(146), x1034__func__)
_1:
	X__assert_fail(tls, ts+0 /* "TODO(ccgo)" */, ts+5384 /* "src/thread/pthre..." */, int32(148), x1034__func__)
	X__pthread_exit(tls, fn1033(*(*uintptr)(unsafe.Pointer(_self + 128)))(tls, *(*uintptr)(unsafe.Pointer(_self + 120))))
	return int32(0)
}

// xa_dec is defined at atomic_arch.h:89:20
func x3a_dec(tls TLS, _p uintptr /* *int32 */) {
	a_dec(_p)
}

// x__futexwait is defined at pthread_impl.h:161:20
func x2__futexwait(tls TLS, _addr uintptr /* *void */, _val int32, _priv int32) {
	if _priv == 0 {
		goto _1
	}

	_priv = int32(128)
_1:
	if x32__syscall4(tls, int64(202), int64(_addr), int64(int32(0)|_priv), int64(_val), int64(0)) == int64(-38) {
		x32__syscall4(tls, int64(202), int64(_addr), int64(0), int64(_val), int64(0))
	}
}

type s156__locale_struct = struct{ Fcat [6]uintptr }

// x__syscall3 is defined at syscall_arch.h:33:22
func x61__syscall3(tls TLS, _n int64, _a1 int64, _a2 int64, _a3 int64) (r int64) {
	return X__syscall(tls, _n, _a1, _a2, _a3, int64(0), int64(0), int64(0))
}

type t20sigset_t = struct{ F__bits [16]uint64 }

type t124off_t = int64

// x21__func__ [6]int8, escapes: true, pthread_create.c:143:1
var x1034__func__ = ds + 46592

// linking pthread_detach.o

type t1096__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t1096__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// x__pthread_detach is defined at pthread_detach.c:6:12
func x__pthread_detach(tls TLS, _t uintptr /* Tpthread_t = *S__pthread */) (r int32) {
	if x11a_cas(tls, _t+64, int32(2), int32(4)) == int32(2) {
		goto _1
	}

	return X__pthread_join(tls, _t, null)

_1:
	return int32(0)
}

type s43__pthread = struct {
	Fself          uintptr // *S__pthread
	Fdtv           uintptr // **void
	Funused1       uintptr // *void
	Funused2       uintptr // *void
	Fsysinfo       uint64
	Fcanary        uint64
	Fcanary2       uint64
	Ftid           int32
	Ferrno_val     int32
	Fdetach_state  int32
	Fcancel        int32
	Fcanceldisable uint8
	Fcancelasync   uint8
	F74            uint8
	Fmap_base      uintptr // *uint8
	Fmap_size      uint64
	Fstack         uintptr // *void
	Fstack_size    uint64
	Fguard_size    uint64
	Fstart_arg     uintptr // *void
	Fstart         uintptr // *func(TLS, uintptr) uintptr
	Fresult        uintptr // *void
	Fcancelbuf     uintptr // *S__ptcb
	Ftsd           uintptr // **void
	Frobust_list   struct {
		Fhead    uintptr
		Foff     int64
		Fpending uintptr
	}
	Ftimer_id      int32
	Flocale        uintptr // Tlocale_t = *S__locale_struct
	Fkilllock      [1]int32
	Fdlerror_buf   uintptr // *int8
	Fstdio_locks   uintptr // *void
	Fcanary_at_end uint64
	Fdtv_copy      uintptr // **void
}

// xa_cas is defined at atomic_arch.h:4:19
func x11a_cas(tls TLS, _p uintptr /* *int32 */, _t int32, _s int32) (r int32) {
	return a_cas(_p, _t, _s)
	return r
}

type t62uintptr_t = uint64

type t367size_t = uint64

type s42__ptcb = struct {
	F__f    uintptr // *func(TLS, uintptr)
	F__x    uintptr // *void
	F__next uintptr // *S__ptcb
}

type s157__locale_struct = struct{ Fcat [6]uintptr }

// linking pthread_equal.o

type t1097__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t1097__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// x__pthread_equal is defined at pthread_equal.c:5:12
func x__pthread_equal(tls TLS, _a uintptr /* Tpthread_t = *S__pthread */, _b uintptr /* Tpthread_t = *S__pthread */) (r int32) {
	return bool2int(_a == _b)
}

type s44__pthread struct{ uintptr }

// linking pthread_getattr_np.o

// Xpthread_getattr_np is defined at pthread_getattr_np.c:6:5
func Xpthread_getattr_np(tls TLS, _t uintptr /* Tpthread_t = *S__pthread */, _a uintptr /* *Tpthread_attr_t = struct{F__u s...[7]uint64;F int64; _ [48]byte};} */) (r int32) {
	var (
		_unnamed1 struct {
			F__u struct {
				F__i  [0][14]int32
				F__vi [0][14]int32
				F__s  [0][7]uint64
				F     int64
				_     [48]byte
			}
		}
		_  = _unnamed1
		_p uintptr // *int8
		_l uint64
	)
	*(*struct {
		F__u struct {
			F__i  [0][14]int32
			F__vi [0][14]int32
			F__s  [0][7]uint64
			F     int64
			_     [48]byte
		}
	})(unsafe.Pointer(_a)) = struct {
		F__u struct {
			F__i  [0][14]int32
			F__vi [0][14]int32
			F__s  [0][7]uint64
			F     int64
			_     [48]byte
		}
	}{}
	*(*int32)(unsafe.Pointer(_a + 24)) = bool2int(*(*int32)(unsafe.Pointer(_t + 64)) >= int32(3))
	*(*uint64)(unsafe.Pointer(_a + 8)) = *(*uint64)(unsafe.Pointer(_t + 112))
	if *(*uintptr)(unsafe.Pointer(_t + 96)) == 0 {
		goto _1
	}

	*(*uint64)(unsafe.Pointer(_a + 16)) = uint64(*(*uintptr)(unsafe.Pointer(_t + 96)))
	*(*uint64)(unsafe.Pointer(_a)) = *(*uint64)(unsafe.Pointer(_t + 104))
	goto _2

_1:
	_p = *(*uintptr)(unsafe.Pointer(X__libc + 16))
	_l = uint64(4096)
	_p += uintptr(-uint64(_p) & uint64(4095))
	*(*uint64)(unsafe.Pointer(_a + 16)) = uint64(_p)
_3:
	if Xmremap(tls, (_p-uintptr(_l))-uintptr(4096), uint64(4096), uint64(8192), int32(0)) != uintptr(18446744073709551615) || *(*int32)(unsafe.Pointer(X__errno_location(tls))) != int32(12) {
		goto _4
	}

	_l = _l + uint64(4096)
	goto _3

_4:
	*(*uint64)(unsafe.Pointer(_a)) = _l
_2:
	return int32(0)
}

type t1098__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t1098__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type s45__pthread = struct {
	Fself          uintptr // *S__pthread
	Fdtv           uintptr // **void
	Funused1       uintptr // *void
	Funused2       uintptr // *void
	Fsysinfo       uint64
	Fcanary        uint64
	Fcanary2       uint64
	Ftid           int32
	Ferrno_val     int32
	Fdetach_state  int32
	Fcancel        int32
	Fcanceldisable uint8
	Fcancelasync   uint8
	F74            uint8
	Fmap_base      uintptr // *uint8
	Fmap_size      uint64
	Fstack         uintptr // *void
	Fstack_size    uint64
	Fguard_size    uint64
	Fstart_arg     uintptr // *void
	Fstart         uintptr // *func(TLS, uintptr) uintptr
	Fresult        uintptr // *void
	Fcancelbuf     uintptr // *S__ptcb
	Ftsd           uintptr // **void
	Frobust_list   struct {
		Fhead    uintptr
		Foff     int64
		Fpending uintptr
	}
	Ftimer_id      int32
	Flocale        uintptr // Tlocale_t = *S__locale_struct
	Fkilllock      [1]int32
	Fdlerror_buf   uintptr // *int8
	Fstdio_locks   uintptr // *void
	Fcanary_at_end uint64
	Fdtv_copy      uintptr // **void
}

type t5pthread_attr_t = struct {
	F__u struct {
		F__i  [0][14]int32
		F__vi [0][14]int32
		F__s  [0][7]uint64
		F     int64
		_     [48]byte
	}
}

type t368size_t = uint64

type t63uintptr_t = uint64

type s43__ptcb = struct {
	F__f    uintptr // *func(TLS, uintptr)
	F__x    uintptr // *void
	F__next uintptr // *S__ptcb
}

type s158__locale_struct = struct{ Fcat [6]uintptr }

// linking pthread_getconcurrency.o

// Xpthread_getconcurrency is defined at pthread_getconcurrency.c:3:5
func Xpthread_getconcurrency(tls TLS) (r int32) {
	return int32(0)
}

type t1099__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t1099__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// linking pthread_getcpuclockid.o

// Xpthread_getcpuclockid is defined at pthread_getcpuclockid.c:3:5
func Xpthread_getcpuclockid(tls TLS, _t uintptr /* Tpthread_t = *S__pthread */, _clockid uintptr /* *Tclockid_t = int32 */) (r int32) {
	*(*int32)(unsafe.Pointer(_clockid)) = int32(uint32(-*(*int32)(unsafe.Pointer(_t + 56))-int32(1))*uint32(8) + uint32(6))
	return int32(0)
}

type t1100__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t1100__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type s46__pthread = struct {
	Fself          uintptr // *S__pthread
	Fdtv           uintptr // **void
	Funused1       uintptr // *void
	Funused2       uintptr // *void
	Fsysinfo       uint64
	Fcanary        uint64
	Fcanary2       uint64
	Ftid           int32
	Ferrno_val     int32
	Fdetach_state  int32
	Fcancel        int32
	Fcanceldisable uint8
	Fcancelasync   uint8
	F74            uint8
	Fmap_base      uintptr // *uint8
	Fmap_size      uint64
	Fstack         uintptr // *void
	Fstack_size    uint64
	Fguard_size    uint64
	Fstart_arg     uintptr // *void
	Fstart         uintptr // *func(TLS, uintptr) uintptr
	Fresult        uintptr // *void
	Fcancelbuf     uintptr // *S__ptcb
	Ftsd           uintptr // **void
	Frobust_list   struct {
		Fhead    uintptr
		Foff     int64
		Fpending uintptr
	}
	Ftimer_id      int32
	Flocale        uintptr // Tlocale_t = *S__locale_struct
	Fkilllock      [1]int32
	Fdlerror_buf   uintptr // *int8
	Fstdio_locks   uintptr // *void
	Fcanary_at_end uint64
	Fdtv_copy      uintptr // **void
}

type t8clockid_t = int32

type t64uintptr_t = uint64

type t369size_t = uint64

type s44__ptcb = struct {
	F__f    uintptr // *func(TLS, uintptr)
	F__x    uintptr // *void
	F__next uintptr // *S__ptcb
}

type s159__locale_struct = struct{ Fcat [6]uintptr }

// linking pthread_getschedparam.o

// Xpthread_getschedparam is defined at pthread_getschedparam.c:3:5
func Xpthread_getschedparam(tls TLS, _t uintptr /* Tpthread_t = *S__pthread */, _policy uintptr /* *int32 */, _param uintptr /* *Ssched_param */) (r int32) {
	var _r int32

	X__lock(tls, _t+200)
	if *(*int32)(unsafe.Pointer(_t + 56)) != 0 {
		goto _1
	}

	_r = int32(3)
	goto _2

_1:
	_r = int32(-x50__syscall2(tls, int64(143), int64(*(*int32)(unsafe.Pointer(_t + 56))), int64(_param)))
	if _r != 0 {
		goto _3
	}

	*(*int32)(unsafe.Pointer(_policy)) = int32(x40__syscall1(tls, int64(145), int64(*(*int32)(unsafe.Pointer(_t + 56)))))
_3:
_2:
	X__unlock(tls, _t+200)
	return _r
}

type t1101__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t1101__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type s47__pthread = struct {
	Fself          uintptr // *S__pthread
	Fdtv           uintptr // **void
	Funused1       uintptr // *void
	Funused2       uintptr // *void
	Fsysinfo       uint64
	Fcanary        uint64
	Fcanary2       uint64
	Ftid           int32
	Ferrno_val     int32
	Fdetach_state  int32
	Fcancel        int32
	Fcanceldisable uint8
	Fcancelasync   uint8
	F74            uint8
	Fmap_base      uintptr // *uint8
	Fmap_size      uint64
	Fstack         uintptr // *void
	Fstack_size    uint64
	Fguard_size    uint64
	Fstart_arg     uintptr // *void
	Fstart         uintptr // *func(TLS, uintptr) uintptr
	Fresult        uintptr // *void
	Fcancelbuf     uintptr // *S__ptcb
	Ftsd           uintptr // **void
	Frobust_list   struct {
		Fhead    uintptr
		Foff     int64
		Fpending uintptr
	}
	Ftimer_id      int32
	Flocale        uintptr // Tlocale_t = *S__locale_struct
	Fkilllock      [1]int32
	Fdlerror_buf   uintptr // *int8
	Fstdio_locks   uintptr // *void
	Fcanary_at_end uint64
	Fdtv_copy      uintptr // **void
}

type s6sched_param = struct {
	Fsched_priority        int32
	Fsched_ss_low_priority int32
	Fsched_ss_repl_period  s42timespec
	Fsched_ss_init_budget  s42timespec
	Fsched_ss_max_repl     int32
}

// x__syscall2 is defined at syscall_arch.h:24:22
func x50__syscall2(tls TLS, _n int64, _a1 int64, _a2 int64) (r int64) {
	return X__syscall(tls, _n, _a1, _a2, int64(0), int64(0), int64(0), int64(0))
}

// x__syscall1 is defined at syscall_arch.h:16:22
func x40__syscall1(tls TLS, _n int64, _a1 int64) (r int64) {
	return X__syscall(tls, _n, _a1, int64(0), int64(0), int64(0), int64(0), int64(0))
}

type t65uintptr_t = uint64

type t370size_t = uint64

type s45__ptcb = struct {
	F__f    uintptr // *func(TLS, uintptr)
	F__x    uintptr // *void
	F__next uintptr // *S__ptcb
}

type s160__locale_struct = struct{ Fcat [6]uintptr }

type s42timespec = struct {
	Ftv_sec  int64
	Ftv_nsec int64
}

type t58time_t = int64

// linking pthread_getspecific.o

type t1102__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t1102__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type Tpthread_key_t = uint32

// x__pthread_getspecific is defined at pthread_getspecific.c:4:13
func x__pthread_getspecific(tls TLS, _k uint32) (r uintptr /* *void */) {
	var _self uintptr // *S__pthread

	_self = x37__pthread_self(tls)
	return *(*uintptr)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_self + 152)) + 8*uintptr(_k)))
}

type s48__pthread = struct {
	Fself          uintptr // *S__pthread
	Fdtv           uintptr // **void
	Funused1       uintptr // *void
	Funused2       uintptr // *void
	Fsysinfo       uint64
	Fcanary        uint64
	Fcanary2       uint64
	Ftid           int32
	Ferrno_val     int32
	Fdetach_state  int32
	Fcancel        int32
	Fcanceldisable uint8
	Fcancelasync   uint8
	F74            uint8
	Fmap_base      uintptr // *uint8
	Fmap_size      uint64
	Fstack         uintptr // *void
	Fstack_size    uint64
	Fguard_size    uint64
	Fstart_arg     uintptr // *void
	Fstart         uintptr // *func(TLS, uintptr) uintptr
	Fresult        uintptr // *void
	Fcancelbuf     uintptr // *S__ptcb
	Ftsd           uintptr // **void
	Frobust_list   struct {
		Fhead    uintptr
		Foff     int64
		Fpending uintptr
	}
	Ftimer_id      int32
	Flocale        uintptr // Tlocale_t = *S__locale_struct
	Fkilllock      [1]int32
	Fdlerror_buf   uintptr // *int8
	Fstdio_locks   uintptr // *void
	Fcanary_at_end uint64
	Fdtv_copy      uintptr // **void
}

// x__pthread_self is defined at pthread_arch.h:1:30
func x37__pthread_self(tls TLS) (r uintptr /* *S__pthread */) {
	return uintptr(tls)
	return r
}

type t66uintptr_t = uint64

type t371size_t = uint64

type s46__ptcb = struct {
	F__f    uintptr // *func(TLS, uintptr)
	F__x    uintptr // *void
	F__next uintptr // *S__ptcb
}

type s161__locale_struct = struct{ Fcat [6]uintptr }

// linking pthread_join.o

func set1035(p *int32, v int32) int32 { *p = v; return v }

// X__pthread_timedjoin_np is defined at pthread_join.c:8:5
func X__pthread_timedjoin_np(tls TLS, _t uintptr /* Tpthread_t = *S__pthread */, _res uintptr /* **void */, _at uintptr /* *Stimespec */) (r int32) {
	esc := MustMalloc(4)
	var (
		_state int32
		_cs    = esc // *int32
		_r     int32
	)
	defer Free(esc)
	_r = int32(0)
	X__pthread_testcancel(tls)
	X__pthread_setcancelstate(tls, int32(1), _cs)
	if *(*int32)(unsafe.Pointer(_cs)) != int32(0) {
		goto _1
	}

	X__pthread_setcancelstate(tls, *(*int32)(unsafe.Pointer(_cs)), null)
_1:
_2:
	if set1035(&_state, *(*int32)(unsafe.Pointer(_t + 64))) == 0 || _r == int32(110) || _r == int32(22) {
		goto _3
	}

	if _state < int32(3) {
		goto _4
	}

	x3a_crash(tls)
_4:
	_r = X__timedwait_cp(tls, _t+64, _state, int32(0), _at, int32(0))
	goto _2

_3:
	X__pthread_setcancelstate(tls, *(*int32)(unsafe.Pointer(_cs)), null)
	if _r != int32(110) && _r != int32(22) {
		goto _5
	}

	return _r

_5:
	x1a_barrier(tls)
	if _res == 0 {
		goto _6
	}

	*(*uintptr)(unsafe.Pointer(_res)) = *(*uintptr)(unsafe.Pointer(_t + 136))
_6:
	if *(*uintptr)(unsafe.Pointer(_t + 80)) == 0 {
		goto _7
	}

	X__munmap(tls, *(*uintptr)(unsafe.Pointer(_t + 80)), *(*uint64)(unsafe.Pointer(_t + 88)))
_7:
	return int32(0)
}

// X__pthread_join is defined at pthread_join.c:26:5
func X__pthread_join(tls TLS, _t uintptr /* Tpthread_t = *S__pthread */, _res uintptr /* **void */) (r int32) {
	return X__pthread_timedjoin_np(tls, _t, _res, null)
}

// X__pthread_tryjoin_np is defined at pthread_join.c:31:5
func X__pthread_tryjoin_np(tls TLS, _t uintptr /* Tpthread_t = *S__pthread */, _res uintptr /* **void */) (r int32) {
	if *(*int32)(unsafe.Pointer(_t + 64)) == int32(2) {
		return int32(16)
	}

	return X__pthread_join(tls, _t, _res)
}

type t1103__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t1103__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type s49__pthread = struct {
	Fself          uintptr // *S__pthread
	Fdtv           uintptr // **void
	Funused1       uintptr // *void
	Funused2       uintptr // *void
	Fsysinfo       uint64
	Fcanary        uint64
	Fcanary2       uint64
	Ftid           int32
	Ferrno_val     int32
	Fdetach_state  int32
	Fcancel        int32
	Fcanceldisable uint8
	Fcancelasync   uint8
	F74            uint8
	Fmap_base      uintptr // *uint8
	Fmap_size      uint64
	Fstack         uintptr // *void
	Fstack_size    uint64
	Fguard_size    uint64
	Fstart_arg     uintptr // *void
	Fstart         uintptr // *func(TLS, uintptr) uintptr
	Fresult        uintptr // *void
	Fcancelbuf     uintptr // *S__ptcb
	Ftsd           uintptr // **void
	Frobust_list   struct {
		Fhead    uintptr
		Foff     int64
		Fpending uintptr
	}
	Ftimer_id      int32
	Flocale        uintptr // Tlocale_t = *S__locale_struct
	Fkilllock      [1]int32
	Fdlerror_buf   uintptr // *int8
	Fstdio_locks   uintptr // *void
	Fcanary_at_end uint64
	Fdtv_copy      uintptr // **void
}

type s43timespec = struct {
	Ftv_sec  int64
	Ftv_nsec int64
}

// xa_crash is defined at atomic_arch.h:121:20
func x3a_crash(tls TLS) {
	panic(`hlt`)
}

// xa_barrier is defined at atomic_arch.h:107:20
func x1a_barrier(tls TLS) {
	aBarier()
}

type t372size_t = uint64

type t67uintptr_t = uint64

type s47__ptcb = struct {
	F__f    uintptr // *func(TLS, uintptr)
	F__x    uintptr // *void
	F__next uintptr // *S__ptcb
}

type s162__locale_struct = struct{ Fcat [6]uintptr }

type t59time_t = int64

type t9clockid_t = int32

// linking pthread_key_create.o

// X__pthread_tsd_size Tsize_t = uint64, escapes: true, pthread_key_create.c:3:17
var X__pthread_tsd_size = ds + 46600

// X__pthread_tsd_main [128]uintptr, escapes: true, pthread_key_create.c:4:6
var X__pthread_tsd_main = bss + 7112

func fp1036(f func(TLS, uintptr)) uintptr { return *(*uintptr)(unsafe.Pointer(&f)) }

func set1037(p *uint32, v uint32) uint32 { *p = v; return v }

// X__pthread_key_create is defined at pthread_key_create.c:12:5
func X__pthread_key_create(tls TLS, ak uintptr, _dtor uintptr /* *func(TLS, uintptr) */) (r int32) {
	esc := MustMalloc(8)
	var (
		_k    = esc // **uint32
		_i    uint32
		_j    uint32
		_self uintptr // Tpthread_t = *S__pthread
	)
	defer Free(esc)
	*(*uintptr)(unsafe.Pointer(_k)) = ak
	_i = uint32(uint64(_k) / uint64(16) % uint64(128))
	_j = _i
	_self = x38__pthread_self(tls)
	if *(*uintptr)(unsafe.Pointer(_self + 152)) != 0 {
		goto _1
	}

	*(*uintptr)(unsafe.Pointer(_self + 152)) = X__pthread_tsd_main
_1:
	if _dtor != 0 {
		goto _2
	}

	_dtor = fp1036(xnodtor)
_2:
_3:
	if x2a_cas_p(tls, xkeys+8*uintptr(_j), null, _dtor) != 0 {
		goto _6
	}

	*(*uint32)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_k)))) = _j
	return int32(0)

_6:
	if set1037(&_j, (_j+uint32(1))%uint32(128)) != _i {
		goto _3
	}

	return int32(11)
}

// X__pthread_key_delete is defined at pthread_key_create.c:32:5
func X__pthread_key_delete(tls TLS, _k uint32) (r int32) {
	*(*uintptr)(unsafe.Pointer(xkeys + 8*uintptr(_k))) = null
	return int32(0)
}

func fn1038(p uintptr) func(TLS, uintptr) { return *(*func(TLS, uintptr))(unsafe.Pointer(&p)) }

// X__pthread_tsd_run_dtors is defined at pthread_key_create.c:38:6
func X__pthread_tsd_run_dtors(tls TLS) {
	var (
		_self         uintptr // Tpthread_t = *S__pthread
		_i            int32
		_j            int32
		_not_finished int32
		_tmp          uintptr // *void
	)
	_self = x38__pthread_self(tls)
	_not_finished = int32(*(*uint8)(unsafe.Pointer(_self + 74)) << 7 >> 7)
	_j = int32(0)
_1:
	if _not_finished == 0 || _j >= int32(4) {
		goto _3
	}

	_not_finished = int32(0)
	_i = int32(0)
_4:
	if _i >= int32(128) {
		goto _6
	}

	if *(*uintptr)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_self + 152)) + 8*uintptr(_i))) == 0 || *(*uintptr)(unsafe.Pointer(xkeys + 8*uintptr(_i))) == 0 {
		goto _7
	}

	_tmp = *(*uintptr)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_self + 152)) + 8*uintptr(_i)))
	*(*uintptr)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_self + 152)) + 8*uintptr(_i))) = null
	fn1038(*(*uintptr)(unsafe.Pointer(xkeys + 8*uintptr(_i))))(tls, _tmp)
	_not_finished = int32(1)
_7:
	_i++
	goto _4

_6:
	_j++
	goto _1

_3:
}

type t1104__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t1104__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t373size_t = uint64

type t1pthread_key_t = uint32

type s50__pthread = struct {
	Fself          uintptr // *S__pthread
	Fdtv           uintptr // **void
	Funused1       uintptr // *void
	Funused2       uintptr // *void
	Fsysinfo       uint64
	Fcanary        uint64
	Fcanary2       uint64
	Ftid           int32
	Ferrno_val     int32
	Fdetach_state  int32
	Fcancel        int32
	Fcanceldisable uint8
	Fcancelasync   uint8
	F74            uint8
	Fmap_base      uintptr // *uint8
	Fmap_size      uint64
	Fstack         uintptr // *void
	Fstack_size    uint64
	Fguard_size    uint64
	Fstart_arg     uintptr // *void
	Fstart         uintptr // *func(TLS, uintptr) uintptr
	Fresult        uintptr // *void
	Fcancelbuf     uintptr // *S__ptcb
	Ftsd           uintptr // **void
	Frobust_list   struct {
		Fhead    uintptr
		Foff     int64
		Fpending uintptr
	}
	Ftimer_id      int32
	Flocale        uintptr // Tlocale_t = *S__locale_struct
	Fkilllock      [1]int32
	Fdlerror_buf   uintptr // *int8
	Fstdio_locks   uintptr // *void
	Fcanary_at_end uint64
	Fdtv_copy      uintptr // **void
}

type t68uintptr_t = uint64

// x__pthread_self is defined at pthread_arch.h:1:30
func x38__pthread_self(tls TLS) (r uintptr /* *S__pthread */) {
	return uintptr(tls)
	return r
}

// xnodtor is defined at pthread_key_create.c:8:13
func xnodtor(tls TLS, _dummy uintptr /* *void */) {
}

// xa_cas_p is defined at atomic_arch.h:14:20
func x2a_cas_p(tls TLS, _p uintptr /* *void */, _t uintptr /* *void */, _s uintptr /* *void */) (r uintptr /* *void */) {
	return a_cas_p(_p, _t, _s)
	return r
}

// xkeys [128]*func(TLS, uintptr), escapes: true, pthread_key_create.c:6:13
var xkeys = bss + 8136

type s48__ptcb = struct {
	F__f    uintptr // *func(TLS, uintptr)
	F__x    uintptr // *void
	F__next uintptr // *S__ptcb
}

type s163__locale_struct = struct{ Fcat [6]uintptr }

// linking pthread_kill.o

// Xpthread_kill is defined at pthread_kill.c:3:5
func Xpthread_kill(tls TLS, _t uintptr /* Tpthread_t = *S__pthread */, _sig int32) (r int32) {
	var _r int32

	X__lock(tls, _t+200)
	_r = int32(func() int64 {
		if *(*int32)(unsafe.Pointer(_t + 56)) != 0 {
			return -x51__syscall2(tls, int64(200), int64(*(*int32)(unsafe.Pointer(_t + 56))), int64(_sig))
		}
		return int64(func() int32 {
			if uint32(_sig)+uint32(0) >= uint32(65) {
				return int32(22)
			}
			return int32(0)
		}())
	}())
	X__unlock(tls, _t+200)
	return _r
}

type t1105__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t1105__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type s51__pthread = struct {
	Fself          uintptr // *S__pthread
	Fdtv           uintptr // **void
	Funused1       uintptr // *void
	Funused2       uintptr // *void
	Fsysinfo       uint64
	Fcanary        uint64
	Fcanary2       uint64
	Ftid           int32
	Ferrno_val     int32
	Fdetach_state  int32
	Fcancel        int32
	Fcanceldisable uint8
	Fcancelasync   uint8
	F74            uint8
	Fmap_base      uintptr // *uint8
	Fmap_size      uint64
	Fstack         uintptr // *void
	Fstack_size    uint64
	Fguard_size    uint64
	Fstart_arg     uintptr // *void
	Fstart         uintptr // *func(TLS, uintptr) uintptr
	Fresult        uintptr // *void
	Fcancelbuf     uintptr // *S__ptcb
	Ftsd           uintptr // **void
	Frobust_list   struct {
		Fhead    uintptr
		Foff     int64
		Fpending uintptr
	}
	Ftimer_id      int32
	Flocale        uintptr // Tlocale_t = *S__locale_struct
	Fkilllock      [1]int32
	Fdlerror_buf   uintptr // *int8
	Fstdio_locks   uintptr // *void
	Fcanary_at_end uint64
	Fdtv_copy      uintptr // **void
}

// x__syscall2 is defined at syscall_arch.h:24:22
func x51__syscall2(tls TLS, _n int64, _a1 int64, _a2 int64) (r int64) {
	return X__syscall(tls, _n, _a1, _a2, int64(0), int64(0), int64(0), int64(0))
}

type t69uintptr_t = uint64

type t374size_t = uint64

type s49__ptcb = struct {
	F__f    uintptr // *func(TLS, uintptr)
	F__x    uintptr // *void
	F__next uintptr // *S__ptcb
}

type s164__locale_struct = struct{ Fcat [6]uintptr }

// linking pthread_mutex_consistent.o

// Xpthread_mutex_consistent is defined at pthread_mutex_consistent.c:3:5
func Xpthread_mutex_consistent(tls TLS, _m uintptr /* *Tpthread_mutex_t = struct{F__u ...5]uintptr;F int64; _ [32]byte};} */) (r int32) {
	if *(*int32)(unsafe.Pointer(_m))&int32(8) != 0 {
		goto _1
	}

	return int32(22)

_1:
	if *(*int32)(unsafe.Pointer(_m + 4))&int32(0x7fffffff) == *(*int32)(unsafe.Pointer(x39__pthread_self(tls) + 56)) {
		goto _2
	}

	return int32(1)

_2:
	{
		p := (*int32)(unsafe.Pointer(_m))
		*p = int32(uint32(*p) & uint32(4294967287))
	}
	return int32(0)
}

type t1106__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t1106__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// x__pthread_self is defined at pthread_arch.h:1:30
func x39__pthread_self(tls TLS) (r uintptr /* *S__pthread */) {
	return uintptr(tls)
	return r
}

type s52__pthread = struct {
	Fself          uintptr // *S__pthread
	Fdtv           uintptr // **void
	Funused1       uintptr // *void
	Funused2       uintptr // *void
	Fsysinfo       uint64
	Fcanary        uint64
	Fcanary2       uint64
	Ftid           int32
	Ferrno_val     int32
	Fdetach_state  int32
	Fcancel        int32
	Fcanceldisable uint8
	Fcancelasync   uint8
	F74            uint8
	Fmap_base      uintptr // *uint8
	Fmap_size      uint64
	Fstack         uintptr // *void
	Fstack_size    uint64
	Fguard_size    uint64
	Fstart_arg     uintptr // *void
	Fstart         uintptr // *func(TLS, uintptr) uintptr
	Fresult        uintptr // *void
	Fcancelbuf     uintptr // *S__ptcb
	Ftsd           uintptr // **void
	Frobust_list   struct {
		Fhead    uintptr
		Foff     int64
		Fpending uintptr
	}
	Ftimer_id      int32
	Flocale        uintptr // Tlocale_t = *S__locale_struct
	Fkilllock      [1]int32
	Fdlerror_buf   uintptr // *int8
	Fstdio_locks   uintptr // *void
	Fcanary_at_end uint64
	Fdtv_copy      uintptr // **void
}

type t70uintptr_t = uint64

type t375size_t = uint64

type s50__ptcb = struct {
	F__f    uintptr // *func(TLS, uintptr)
	F__x    uintptr // *void
	F__next uintptr // *S__ptcb
}

type s165__locale_struct = struct{ Fcat [6]uintptr }

// linking pthread_mutex_destroy.o

// Xpthread_mutex_destroy is defined at pthread_mutex_destroy.c:3:5
func Xpthread_mutex_destroy(tls TLS, _mutex uintptr /* *Tpthread_mutex_t = struct{F__u ...5]uintptr;F int64; _ [32]byte};} */) (r int32) {
	return int32(0)
}

type t1107__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t1107__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// linking pthread_mutex_getprioceiling.o

// Xpthread_mutex_getprioceiling is defined at pthread_mutex_getprioceiling.c:3:5
func Xpthread_mutex_getprioceiling(tls TLS, _m uintptr /* *Tpthread_mutex_t = struct{F__u ...5]uintptr;F int64; _ [32]byte};} */, _ceiling uintptr /* *int32 */) (r int32) {
	return int32(22)
}

type t1108__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t1108__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// linking pthread_mutex_init.o

// Xpthread_mutex_init is defined at pthread_mutex_init.c:3:5
func Xpthread_mutex_init(tls TLS, _m uintptr /* *Tpthread_mutex_t = struct{F__u ...5]uintptr;F int64; _ [32]byte};} */, _a uintptr /* *Tpthread_mutexattr_t = struct{F__attr uint32;} */) (r int32) {
	var _unnamed1 struct {
		F__u struct {
			F__i  [0][10]int32
			F__vi [0][10]int32
			F__p  [0][5]uintptr
			F     int64
			_     [32]byte
		}
	}
	_ = _unnamed1
	*(*struct {
		F__u struct {
			F__i  [0][10]int32
			F__vi [0][10]int32
			F__p  [0][5]uintptr
			F     int64
			_     [32]byte
		}
	})(unsafe.Pointer(_m)) = struct {
		F__u struct {
			F__i  [0][10]int32
			F__vi [0][10]int32
			F__p  [0][5]uintptr
			F     int64
			_     [32]byte
		}
	}{}
	if _a == 0 {
		goto _1
	}

	*(*int32)(unsafe.Pointer(_m)) = int32(*(*uint32)(unsafe.Pointer(_a)))
_1:
	return int32(0)
}

type t1109__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t1109__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t1pthread_mutex_t = struct {
	F__u struct {
		F__i  [0][10]int32
		F__vi [0][10]int32
		F__p  [0][5]uintptr
		F     int64
		_     [32]byte
	}
}

// linking pthread_mutex_lock.o

// X__pthread_mutex_lock is defined at pthread_mutex_lock.c:5:5
func X__pthread_mutex_lock(tls TLS, _m uintptr /* *Tpthread_mutex_t = struct{F__u ...5]uintptr;F int64; _ [32]byte};} */) (r int32) {
	if *(*int32)(unsafe.Pointer(_m))&int32(15) != int32(0) || x12a_cas(tls, _m+4, int32(0), int32(16)) != 0 {
		goto _1
	}

	return int32(0)

_1:
	return X__pthread_mutex_timedlock(tls, _m, null)
}

type t1110__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t1110__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// xa_cas is defined at atomic_arch.h:4:19
func x12a_cas(tls TLS, _p uintptr /* *int32 */, _t int32, _s int32) (r int32) {
	return a_cas(_p, _t, _s)
	return r
}

// linking pthread_mutex_setprioceiling.o

// Xpthread_mutex_setprioceiling is defined at pthread_mutex_setprioceiling.c:3:5
func Xpthread_mutex_setprioceiling(tls TLS, _m uintptr /* *Tpthread_mutex_t = struct{F__u ...5]uintptr;F int64; _ [32]byte};} */, _ceiling int32, _old uintptr /* *int32 */) (r int32) {
	return int32(22)
}

type t1111__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t1111__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// linking pthread_mutex_timedlock.o

func postinc1039(p *int32) int32 { r := *p; *p += -1; return r }

func set1040(p *int32, v int32) int32 { *p = v; return v }

// X__pthread_mutex_timedlock is defined at pthread_mutex_timedlock.c:3:5
func X__pthread_mutex_timedlock(tls TLS, _m uintptr /* *Tpthread_mutex_t = struct{F__u ...5]uintptr;F int64; _ [32]byte};} */, _at uintptr /* *Stimespec */) (r int32) {
	var (
		_r     int32
		_t     int32
		_priv  int32
		_spins int32
	)
	if *(*int32)(unsafe.Pointer(_m))&int32(15) != int32(0) || x13a_cas(tls, _m+4, int32(0), int32(16)) != 0 {
		goto _1
	}

	return int32(0)

_1:
	_priv = *(*int32)(unsafe.Pointer(_m))&int32(128) ^ int32(128)
	_r = Xpthread_mutex_trylock(tls, _m)
	if _r == int32(16) {
		goto _2
	}

	return _r

_2:
	_spins = int32(100)
_3:
	if postinc1039(&_spins) == 0 || *(*int32)(unsafe.Pointer(_m + 4)) == 0 || *(*int32)(unsafe.Pointer(_m + 8)) != 0 {
		goto _4
	}

	x3a_spin(tls)
	goto _3

_4:
_5:
	if set1040(&_r, Xpthread_mutex_trylock(tls, _m)) != int32(16) {
		goto _6
	}

	if set1040(&_r, *(*int32)(unsafe.Pointer(_m + 4))) != 0 && (_r&int32(0x40000000) == 0 || *(*int32)(unsafe.Pointer(_m))&int32(4) == 0) {
		goto _7
	}

	goto _5

_7:
	if *(*int32)(unsafe.Pointer(_m))&int32(3) != int32(2) || _r&int32(0x7fffffff) != *(*int32)(unsafe.Pointer(x40__pthread_self(tls) + 56)) {
		goto _8
	}

	return int32(35)

_8:
	x8a_inc(tls, _m+8)
	_t = int32(uint32(_r) | uint32(0x80000000))
	x13a_cas(tls, _m+4, _r, _t)
	_r = X__timedwait(tls, _m+4, _t, int32(0), _at, _priv)
	x4a_dec(tls, _m+8)
	if _r == 0 || _r == int32(4) {
		goto _9
	}

	goto _6

_9:
	goto _5

_6:
	return _r
}

type t1112__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t1112__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type s44timespec = struct {
	Ftv_sec  int64
	Ftv_nsec int64
}

// xa_cas is defined at atomic_arch.h:4:19
func x13a_cas(tls TLS, _p uintptr /* *int32 */, _t int32, _s int32) (r int32) {
	return a_cas(_p, _t, _s)
	return r
}

// xa_spin is defined at atomic_arch.h:114:20
func x3a_spin(tls TLS) {
	X__assert_fail(tls, ts+0 /* "TODO(ccgo)" */, ts+36 /* "arch/x86_64/atom..." */, int32(116), x1041__func__)
}

// x__pthread_self is defined at pthread_arch.h:1:30
func x40__pthread_self(tls TLS) (r uintptr /* *S__pthread */) {
	return uintptr(tls)
	return r
}

// xa_inc is defined at atomic_arch.h:80:20
func x8a_inc(tls TLS, _p uintptr /* *int32 */) {
	a_inc(_p)
}

// xa_dec is defined at atomic_arch.h:89:20
func x4a_dec(tls TLS, _p uintptr /* *int32 */) {
	a_dec(_p)
}

type t60time_t = int64

// x6__func__ [7]int8, escapes: true, atomic_arch.h:115:1
var x1041__func__ = ds + 46608

type s53__pthread = struct {
	Fself          uintptr // *S__pthread
	Fdtv           uintptr // **void
	Funused1       uintptr // *void
	Funused2       uintptr // *void
	Fsysinfo       uint64
	Fcanary        uint64
	Fcanary2       uint64
	Ftid           int32
	Ferrno_val     int32
	Fdetach_state  int32
	Fcancel        int32
	Fcanceldisable uint8
	Fcancelasync   uint8
	F74            uint8
	Fmap_base      uintptr // *uint8
	Fmap_size      uint64
	Fstack         uintptr // *void
	Fstack_size    uint64
	Fguard_size    uint64
	Fstart_arg     uintptr // *void
	Fstart         uintptr // *func(TLS, uintptr) uintptr
	Fresult        uintptr // *void
	Fcancelbuf     uintptr // *S__ptcb
	Ftsd           uintptr // **void
	Frobust_list   struct {
		Fhead    uintptr
		Foff     int64
		Fpending uintptr
	}
	Ftimer_id      int32
	Flocale        uintptr // Tlocale_t = *S__locale_struct
	Fkilllock      [1]int32
	Fdlerror_buf   uintptr // *int8
	Fstdio_locks   uintptr // *void
	Fcanary_at_end uint64
	Fdtv_copy      uintptr // **void
}

type t10clockid_t = int32

type t71uintptr_t = uint64

type t376size_t = uint64

type s51__ptcb = struct {
	F__f    uintptr // *func(TLS, uintptr)
	F__x    uintptr // *void
	F__next uintptr // *S__ptcb
}

type s166__locale_struct = struct{ Fcat [6]uintptr }

// linking pthread_mutex_trylock.o

// X__pthread_mutex_trylock_owner is defined at pthread_mutex_trylock.c:3:5
func X__pthread_mutex_trylock_owner(tls TLS, _m uintptr /* *Tpthread_mutex_t = struct{F__u ...5]uintptr;F int64; _ [32]byte};} */) (r int32) {
	var (
		_old  int32
		_own  int32
		_type int32
		_self uintptr // Tpthread_t = *S__pthread
		_tid  int32
		_next uintptr // *void
	)
	_type = *(*int32)(unsafe.Pointer(_m)) & int32(15)
	_self = x41__pthread_self(tls)
	_tid = *(*int32)(unsafe.Pointer(_self + 56))
	_old = *(*int32)(unsafe.Pointer(_m + 4))
	_own = _old & int32(0x7fffffff)
	if _own != _tid || _type&int32(3) != int32(1) {
		goto _1
	}

	if uint32(*(*int32)(unsafe.Pointer(_m + 20))) < uint32(0x7fffffff) {
		goto _2
	}

	return int32(11)

_2:
	*(*int32)(unsafe.Pointer(_m + 20))++
	return int32(0)

_1:
	if _own != int32(0x7fffffff) {
		goto _3
	}

	return int32(131)

_3:
	if (*(*int32)(unsafe.Pointer(_m)) & int32(128)) == 0 {
		goto _4
	}

	if *(*int64)(unsafe.Pointer((_self + 160) + 8)) != 0 {
		goto _5
	}

	*(*int64)(unsafe.Pointer((_self + 160) + 8)) = int64((_m + 4) - (_m + 32))
	x52__syscall2(tls, int64(273), int64(_self+160), int64(24))
_5:
	if *(*int32)(unsafe.Pointer(_m + 8)) == 0 {
		goto _6
	}

	_tid = int32(uint32(_tid) | uint32(0x80000000))
_6:
	*(*uintptr)(unsafe.Pointer((_self + 160) + 16)) = _m + 32
_4:
	if (_own == 0 || _own&int32(0x40000000) != 0 && _type&int32(4) != 0) && x14a_cas(tls, _m+4, _old, _tid) == _old {
		goto _7
	}

	*(*uintptr)(unsafe.Pointer((_self + 160) + 16)) = null
	return int32(16)

_7:
	_next = *(*uintptr)(unsafe.Pointer(_self + 160))
	*(*uintptr)(unsafe.Pointer(_m + 32)) = _next
	*(*uintptr)(unsafe.Pointer(_m + 24)) = _self + 160
	if _next == (_self + 160) {
		goto _8
	}

	*(*uintptr)(unsafe.Pointer(_next - uintptr(8))) = _m + 32
_8:
	*(*uintptr)(unsafe.Pointer(_self + 160)) = _m + 32
	*(*uintptr)(unsafe.Pointer((_self + 160) + 16)) = null
	if _own == 0 {
		goto _9
	}

	*(*int32)(unsafe.Pointer(_m + 20)) = int32(0)
	{
		p := (*int32)(unsafe.Pointer(_m))
		*p = *p | int32(8)
	}
	return int32(130)

_9:
	return int32(0)
}

// X__pthread_mutex_trylock is defined at pthread_mutex_trylock.c:51:5
func X__pthread_mutex_trylock(tls TLS, _m uintptr /* *Tpthread_mutex_t = struct{F__u ...5]uintptr;F int64; _ [32]byte};} */) (r int32) {
	if *(*int32)(unsafe.Pointer(_m))&int32(15) != int32(0) {
		goto _1
	}

	return x14a_cas(tls, _m+4, int32(0), int32(16)) & int32(16)

_1:
	return X__pthread_mutex_trylock_owner(tls, _m)
}

type t1113__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t1113__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type s54__pthread = struct {
	Fself          uintptr // *S__pthread
	Fdtv           uintptr // **void
	Funused1       uintptr // *void
	Funused2       uintptr // *void
	Fsysinfo       uint64
	Fcanary        uint64
	Fcanary2       uint64
	Ftid           int32
	Ferrno_val     int32
	Fdetach_state  int32
	Fcancel        int32
	Fcanceldisable uint8
	Fcancelasync   uint8
	F74            uint8
	Fmap_base      uintptr // *uint8
	Fmap_size      uint64
	Fstack         uintptr // *void
	Fstack_size    uint64
	Fguard_size    uint64
	Fstart_arg     uintptr // *void
	Fstart         uintptr // *func(TLS, uintptr) uintptr
	Fresult        uintptr // *void
	Fcancelbuf     uintptr // *S__ptcb
	Ftsd           uintptr // **void
	Frobust_list   struct {
		Fhead    uintptr
		Foff     int64
		Fpending uintptr
	}
	Ftimer_id      int32
	Flocale        uintptr // Tlocale_t = *S__locale_struct
	Fkilllock      [1]int32
	Fdlerror_buf   uintptr // *int8
	Fstdio_locks   uintptr // *void
	Fcanary_at_end uint64
	Fdtv_copy      uintptr // **void
}

// x__pthread_self is defined at pthread_arch.h:1:30
func x41__pthread_self(tls TLS) (r uintptr /* *S__pthread */) {
	return uintptr(tls)
	return r
}

// x__syscall2 is defined at syscall_arch.h:24:22
func x52__syscall2(tls TLS, _n int64, _a1 int64, _a2 int64) (r int64) {
	return X__syscall(tls, _n, _a1, _a2, int64(0), int64(0), int64(0), int64(0))
}

// xa_cas is defined at atomic_arch.h:4:19
func x14a_cas(tls TLS, _p uintptr /* *int32 */, _t int32, _s int32) (r int32) {
	return a_cas(_p, _t, _s)
	return r
}

type t72uintptr_t = uint64

type t377size_t = uint64

type s52__ptcb = struct {
	F__f    uintptr // *func(TLS, uintptr)
	F__x    uintptr // *void
	F__next uintptr // *S__ptcb
}

type s167__locale_struct = struct{ Fcat [6]uintptr }

// linking pthread_mutex_unlock.o

// X__pthread_mutex_unlock is defined at pthread_mutex_unlock.c:3:5
func X__pthread_mutex_unlock(tls TLS, _m uintptr /* *Tpthread_mutex_t = struct{F__u ...5]uintptr;F int64; _ [32]byte};} */) (r int32) {
	var (
		_self    uintptr // Tpthread_t = *S__pthread
		_waiters int32
		_cont    int32
		_type    int32
		_priv    int32
		_prev    uintptr // *void
		_next    uintptr // *void
	)
	_waiters = *(*int32)(unsafe.Pointer(_m + 8))
	_type = *(*int32)(unsafe.Pointer(_m)) & int32(15)
	_priv = *(*int32)(unsafe.Pointer(_m))&int32(128) ^ int32(128)
	if _type == int32(0) {
		goto _1
	}

	_self = x42__pthread_self(tls)
	if *(*int32)(unsafe.Pointer(_m + 4))&int32(0x7fffffff) == *(*int32)(unsafe.Pointer(_self + 56)) {
		goto _2
	}

	return int32(1)

_2:
	if _type&int32(3) != int32(1) || *(*int32)(unsafe.Pointer(_m + 20)) == 0 {
		goto _3
	}

	return func() int32 { *(*int32)(unsafe.Pointer(_m + 20))--; return int32(0) }()

_3:
	if _priv != 0 {
		goto _4
	}

	*(*uintptr)(unsafe.Pointer((_self + 160) + 16)) = _m + 32
	X__vm_lock(tls)
_4:
	_prev = *(*uintptr)(unsafe.Pointer(_m + 24))
	_next = *(*uintptr)(unsafe.Pointer(_m + 32))
	*(*uintptr)(unsafe.Pointer(_prev)) = _next
	if _next == (_self + 160) {
		goto _5
	}

	*(*uintptr)(unsafe.Pointer(_next - uintptr(8))) = _prev
_5:
_1:
	_cont = x5a_swap(tls, _m+4, func() int32 {
		if _type&int32(8) != 0 {
			return int32(0x7fffffff)
		}
		return int32(0)
	}())
	if _type == int32(0) || _priv != 0 {
		goto _6
	}

	*(*uintptr)(unsafe.Pointer((_self + 160) + 16)) = null
	X__vm_unlock(tls)
_6:
	if _waiters == 0 && _cont >= int32(0) {
		goto _7
	}

	x10__wake(tls, _m+4, int32(1), _priv)
_7:
	return int32(0)
}

type t1114__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t1114__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type s55__pthread = struct {
	Fself          uintptr // *S__pthread
	Fdtv           uintptr // **void
	Funused1       uintptr // *void
	Funused2       uintptr // *void
	Fsysinfo       uint64
	Fcanary        uint64
	Fcanary2       uint64
	Ftid           int32
	Ferrno_val     int32
	Fdetach_state  int32
	Fcancel        int32
	Fcanceldisable uint8
	Fcancelasync   uint8
	F74            uint8
	Fmap_base      uintptr // *uint8
	Fmap_size      uint64
	Fstack         uintptr // *void
	Fstack_size    uint64
	Fguard_size    uint64
	Fstart_arg     uintptr // *void
	Fstart         uintptr // *func(TLS, uintptr) uintptr
	Fresult        uintptr // *void
	Fcancelbuf     uintptr // *S__ptcb
	Ftsd           uintptr // **void
	Frobust_list   struct {
		Fhead    uintptr
		Foff     int64
		Fpending uintptr
	}
	Ftimer_id      int32
	Flocale        uintptr // Tlocale_t = *S__locale_struct
	Fkilllock      [1]int32
	Fdlerror_buf   uintptr // *int8
	Fstdio_locks   uintptr // *void
	Fcanary_at_end uint64
	Fdtv_copy      uintptr // **void
}

// x__pthread_self is defined at pthread_arch.h:1:30
func x42__pthread_self(tls TLS) (r uintptr /* *S__pthread */) {
	return uintptr(tls)
	return r
}

// xa_swap is defined at atomic_arch.h:24:19
func x5a_swap(tls TLS, _p uintptr /* *int32 */, _v int32) (r int32) {
	return atomic.SwapInt32((*int32)(unsafe.Pointer(_p)), _v)
	return r
}

// x__wake is defined at pthread_impl.h:154:20
func x10__wake(tls TLS, _addr uintptr /* *void */, _cnt int32, _priv int32) {
	if _priv == 0 {
		goto _1
	}

	_priv = int32(128)
_1:
	if _cnt >= int32(0) {
		goto _2
	}

	_cnt = int32(0x7fffffff)
_2:
	if x62__syscall3(tls, int64(202), int64(_addr), int64(int32(1)|_priv), int64(_cnt)) == int64(-38) {
		x62__syscall3(tls, int64(202), int64(_addr), int64(1), int64(_cnt))
	}
}

type t73uintptr_t = uint64

type t378size_t = uint64

type s53__ptcb = struct {
	F__f    uintptr // *func(TLS, uintptr)
	F__x    uintptr // *void
	F__next uintptr // *S__ptcb
}

type s168__locale_struct = struct{ Fcat [6]uintptr }

// x__syscall3 is defined at syscall_arch.h:33:22
func x62__syscall3(tls TLS, _n int64, _a1 int64, _a2 int64, _a3 int64) (r int64) {
	return X__syscall(tls, _n, _a1, _a2, _a3, int64(0), int64(0), int64(0))
}

// linking pthread_mutexattr_destroy.o

// Xpthread_mutexattr_destroy is defined at pthread_mutexattr_destroy.c:3:5
func Xpthread_mutexattr_destroy(tls TLS, _a uintptr /* *Tpthread_mutexattr_t = struct{F__attr uint32;} */) (r int32) {
	return int32(0)
}

type t1115__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t1115__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// linking pthread_mutexattr_init.o

// Xpthread_mutexattr_init is defined at pthread_mutexattr_init.c:3:5
func Xpthread_mutexattr_init(tls TLS, _a uintptr /* *Tpthread_mutexattr_t = struct{F__attr uint32;} */) (r int32) {
	var _unnamed1 struct{ F__attr uint32 }
	_ = _unnamed1
	*(*struct{ F__attr uint32 })(unsafe.Pointer(_a)) = struct{ F__attr uint32 }{}
	return int32(0)
}

type t1116__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t1116__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type Tpthread_mutexattr_t = struct{ F__attr uint32 }

// linking pthread_mutexattr_setprotocol.o

// Xpthread_mutexattr_setprotocol is defined at pthread_mutexattr_setprotocol.c:3:5
func Xpthread_mutexattr_setprotocol(tls TLS, _a uintptr /* *Tpthread_mutexattr_t = struct{F__attr uint32;} */, _protocol int32) (r int32) {
	if _protocol == 0 {
		goto _1
	}

	return int32(95)

_1:
	return int32(0)
}

type t1117__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t1117__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// linking pthread_mutexattr_setpshared.o

// Xpthread_mutexattr_setpshared is defined at pthread_mutexattr_setpshared.c:3:5
func Xpthread_mutexattr_setpshared(tls TLS, _a uintptr /* *Tpthread_mutexattr_t = struct{F__attr uint32;} */, _pshared int32) (r int32) {
	if uint32(_pshared) <= uint32(1) {
		goto _1
	}

	return int32(22)

_1:
	{
		p := (*uint32)(unsafe.Pointer(_a))
		*p = *p & uint32(4294967167)
	}
	{
		p := (*uint32)(unsafe.Pointer(_a))
		*p = *p | uint32(_pshared<<(uint(7)%32))
	}
	return int32(0)
}

type t1118__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t1118__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// linking pthread_mutexattr_setrobust.o

// Xpthread_mutexattr_setrobust is defined at pthread_mutexattr_setrobust.c:3:5
func Xpthread_mutexattr_setrobust(tls TLS, _a uintptr /* *Tpthread_mutexattr_t = struct{F__attr uint32;} */, _robust int32) (r int32) {
	if uint32(_robust) <= uint32(1) {
		goto _1
	}

	return int32(22)

_1:
	{
		p := (*uint32)(unsafe.Pointer(_a))
		*p = *p & uint32(4294967291)
	}
	{
		p := (*uint32)(unsafe.Pointer(_a))
		*p = *p | uint32(_robust*int32(4))
	}
	return int32(0)
}

type t1119__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t1119__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// linking pthread_mutexattr_settype.o

// Xpthread_mutexattr_settype is defined at pthread_mutexattr_settype.c:3:5
func Xpthread_mutexattr_settype(tls TLS, _a uintptr /* *Tpthread_mutexattr_t = struct{F__attr uint32;} */, _type int32) (r int32) {
	if uint32(_type) <= uint32(2) {
		goto _1
	}

	return int32(22)

_1:
	*(*uint32)(unsafe.Pointer(_a)) = *(*uint32)(unsafe.Pointer(_a))&uint32(4294967292) | uint32(_type)
	return int32(0)
}

type t1120__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t1120__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// linking pthread_once.o

func fp1042(f func(TLS, uintptr)) uintptr { return *(*uintptr)(unsafe.Pointer(&f)) }

func fn1043(p uintptr) func(TLS) { return *(*func(TLS))(unsafe.Pointer(&p)) }

// X__pthread_once_full is defined at pthread_once.c:11:5
func X__pthread_once_full(tls TLS, _control uintptr /* *Tpthread_once_t = int32 */, _init uintptr /* *func(TLS) */) (r int32) {
	esc := MustMalloc(24)
	var ___cb = esc // *S__ptcb
	defer Free(esc)

_1:
	switch x15a_cas(tls, _control, int32(0), int32(1)) {
	case int32(0):
		goto _5
	case int32(1):
		goto _6
	case int32(3):
		goto _7
	case int32(2):
		goto _8
	}
	goto _4

_5:
	X_pthread_cleanup_push(tls, ___cb, fp1042(xundo), _control)
	fn1043(_init)(tls)
	X_pthread_cleanup_pop(tls, ___cb, int32(0))
	if x6a_swap(tls, _control, int32(2)) != int32(3) {
		goto _10
	}

	x11__wake(tls, _control, int32(-1), int32(1))
_10:
	return int32(0)

_6:
	x15a_cas(tls, _control, int32(1), int32(3))
_7:
	X__wait(tls, _control, null, int32(3), int32(1))
	goto _2

_8:
	return int32(0)

_4:
_2:
	goto _1
	return r
}

// X__pthread_once is defined at pthread_once.c:39:5
func X__pthread_once(tls TLS, _control uintptr /* *Tpthread_once_t = int32 */, _init uintptr /* *func(TLS) */) (r int32) {
	if *(*int32)(unsafe.Pointer(_control)) != int32(2) {
		goto _1
	}

	x2a_barrier(tls)
	return int32(0)

_1:
	return X__pthread_once_full(tls, _control, _init)
}

type t1121__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t1121__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type s54__ptcb = struct {
	F__f    uintptr // *func(TLS, uintptr)
	F__x    uintptr // *void
	F__next uintptr // *S__ptcb
}

// xa_cas is defined at atomic_arch.h:4:19
func x15a_cas(tls TLS, _p uintptr /* *int32 */, _t int32, _s int32) (r int32) {
	return a_cas(_p, _t, _s)
	return r
}

// xundo is defined at pthread_once.c:3:13
func xundo(tls TLS, _control uintptr /* *void */) {
	if x6a_swap(tls, _control, int32(0)) != int32(3) {
		goto _1
	}

	x11__wake(tls, _control, int32(-1), int32(1))
_1:
}

// xa_swap is defined at atomic_arch.h:24:19
func x6a_swap(tls TLS, _p uintptr /* *int32 */, _v int32) (r int32) {
	return atomic.SwapInt32((*int32)(unsafe.Pointer(_p)), _v)
	return r
}

// x__wake is defined at pthread_impl.h:154:20
func x11__wake(tls TLS, _addr uintptr /* *void */, _cnt int32, _priv int32) {
	if _priv == 0 {
		goto _1
	}

	_priv = int32(128)
_1:
	if _cnt >= int32(0) {
		goto _2
	}

	_cnt = int32(0x7fffffff)
_2:
	if x63__syscall3(tls, int64(202), int64(_addr), int64(int32(1)|_priv), int64(_cnt)) == int64(-38) {
		x63__syscall3(tls, int64(202), int64(_addr), int64(1), int64(_cnt))
	}
}

type Tpthread_once_t = int32

// xa_barrier is defined at atomic_arch.h:107:20
func x2a_barrier(tls TLS) {
	aBarier()
}

// x__syscall3 is defined at syscall_arch.h:33:22
func x63__syscall3(tls TLS, _n int64, _a1 int64, _a2 int64, _a3 int64) (r int64) {
	return X__syscall(tls, _n, _a1, _a2, _a3, int64(0), int64(0), int64(0))
}

// linking pthread_rwlock_destroy.o

// Xpthread_rwlock_destroy is defined at pthread_rwlock_destroy.c:3:5
func Xpthread_rwlock_destroy(tls TLS, _rw uintptr /* *Tpthread_rwlock_t = struct{F__u...7]uintptr;F int64; _ [48]byte};} */) (r int32) {
	return int32(0)
}

type t1122__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t1122__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// linking pthread_rwlock_init.o

// Xpthread_rwlock_init is defined at pthread_rwlock_init.c:3:5
func Xpthread_rwlock_init(tls TLS, _rw uintptr /* *Tpthread_rwlock_t = struct{F__u...7]uintptr;F int64; _ [48]byte};} */, _a uintptr /* *Tpthread_rwlockattr_t = struct{F__attr [2]uint32;} */) (r int32) {
	var _unnamed1 struct {
		F__u struct {
			F__i  [0][14]int32
			F__vi [0][14]int32
			F__p  [0][7]uintptr
			F     int64
			_     [48]byte
		}
	}
	_ = _unnamed1
	*(*struct {
		F__u struct {
			F__i  [0][14]int32
			F__vi [0][14]int32
			F__p  [0][7]uintptr
			F     int64
			_     [48]byte
		}
	})(unsafe.Pointer(_rw)) = struct {
		F__u struct {
			F__i  [0][14]int32
			F__vi [0][14]int32
			F__p  [0][7]uintptr
			F     int64
			_     [48]byte
		}
	}{}
	if _a == 0 {
		goto _1
	}

	*(*int32)(unsafe.Pointer(_rw + 8)) = int32(*(*uint32)(unsafe.Pointer(_a)) * uint32(128))
_1:
	return int32(0)
}

type t1123__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t1123__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type Tpthread_rwlock_t = struct {
	F__u struct {
		F__i  [0][14]int32
		F__vi [0][14]int32
		F__p  [0][7]uintptr
		F     int64
		_     [48]byte
	}
}

// linking pthread_rwlock_rdlock.o

// Xpthread_rwlock_rdlock is defined at pthread_rwlock_rdlock.c:3:5
func Xpthread_rwlock_rdlock(tls TLS, _rw uintptr /* *Tpthread_rwlock_t = struct{F__u...7]uintptr;F int64; _ [48]byte};} */) (r int32) {
	return Xpthread_rwlock_timedrdlock(tls, _rw, null)
}

type t1124__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t1124__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// linking pthread_rwlock_timedrdlock.o

func postinc1044(p *int32) int32 { r := *p; *p += -1; return r }

func set1045(p *int32, v int32) int32 { *p = v; return v }

// Xpthread_rwlock_timedrdlock is defined at pthread_rwlock_timedrdlock.c:3:5
func Xpthread_rwlock_timedrdlock(tls TLS, _rw uintptr /* *Tpthread_rwlock_t = struct{F__u...7]uintptr;F int64; _ [48]byte};} */, _at uintptr /* *Stimespec */) (r int32) {
	var (
		_r     int32
		_t     int32
		_spins int32
	)
	_r = Xpthread_rwlock_tryrdlock(tls, _rw)
	if _r == int32(16) {
		goto _1
	}

	return _r

_1:
	_spins = int32(100)
_2:
	if postinc1044(&_spins) == 0 || *(*int32)(unsafe.Pointer(_rw)) == 0 || *(*int32)(unsafe.Pointer(_rw + 4)) != 0 {
		goto _3
	}

	x4a_spin(tls)
	goto _2

_3:
_4:
	if set1045(&_r, Xpthread_rwlock_tryrdlock(tls, _rw)) != int32(16) {
		goto _5
	}

	if set1045(&_r, *(*int32)(unsafe.Pointer(_rw))) != 0 && _r&int32(0x7fffffff) == int32(0x7fffffff) {
		goto _6
	}

	goto _4

_6:
	_t = int32(uint32(_r) | uint32(0x80000000))
	x9a_inc(tls, _rw+4)
	x16a_cas(tls, _rw, _r, _t)
	_r = X__timedwait(tls, _rw, _t, int32(0), _at, *(*int32)(unsafe.Pointer(_rw + 8))^int32(128))
	x5a_dec(tls, _rw+4)
	if _r == 0 || _r == int32(4) {
		goto _7
	}

	return _r

_7:
	goto _4

_5:
	return _r
}

type t1125__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t1125__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type s45timespec = struct {
	Ftv_sec  int64
	Ftv_nsec int64
}

// xa_spin is defined at atomic_arch.h:114:20
func x4a_spin(tls TLS) {
	X__assert_fail(tls, ts+0 /* "TODO(ccgo)" */, ts+36 /* "arch/x86_64/atom..." */, int32(116), x1046__func__)
}

// xa_inc is defined at atomic_arch.h:80:20
func x9a_inc(tls TLS, _p uintptr /* *int32 */) {
	a_inc(_p)
}

// xa_cas is defined at atomic_arch.h:4:19
func x16a_cas(tls TLS, _p uintptr /* *int32 */, _t int32, _s int32) (r int32) {
	return a_cas(_p, _t, _s)
	return r
}

// xa_dec is defined at atomic_arch.h:89:20
func x5a_dec(tls TLS, _p uintptr /* *int32 */) {
	a_dec(_p)
}

type t61time_t = int64

// x5__func__ [7]int8, escapes: true, atomic_arch.h:115:1
var x1046__func__ = ds + 46616

type t11clockid_t = int32

// linking pthread_rwlock_timedwrlock.o

func postinc1047(p *int32) int32 { r := *p; *p += -1; return r }

func set1048(p *int32, v int32) int32 { *p = v; return v }

// Xpthread_rwlock_timedwrlock is defined at pthread_rwlock_timedwrlock.c:3:5
func Xpthread_rwlock_timedwrlock(tls TLS, _rw uintptr /* *Tpthread_rwlock_t = struct{F__u...7]uintptr;F int64; _ [48]byte};} */, _at uintptr /* *Stimespec */) (r int32) {
	var (
		_r     int32
		_t     int32
		_spins int32
	)
	_r = Xpthread_rwlock_trywrlock(tls, _rw)
	if _r == int32(16) {
		goto _1
	}

	return _r

_1:
	_spins = int32(100)
_2:
	if postinc1047(&_spins) == 0 || *(*int32)(unsafe.Pointer(_rw)) == 0 || *(*int32)(unsafe.Pointer(_rw + 4)) != 0 {
		goto _3
	}

	x5a_spin(tls)
	goto _2

_3:
_4:
	if set1048(&_r, Xpthread_rwlock_trywrlock(tls, _rw)) != int32(16) {
		goto _5
	}

	if set1048(&_r, *(*int32)(unsafe.Pointer(_rw))) != 0 {
		goto _6
	}

	goto _4

_6:
	_t = int32(uint32(_r) | uint32(0x80000000))
	x10a_inc(tls, _rw+4)
	x17a_cas(tls, _rw, _r, _t)
	_r = X__timedwait(tls, _rw, _t, int32(0), _at, *(*int32)(unsafe.Pointer(_rw + 8))^int32(128))
	x6a_dec(tls, _rw+4)
	if _r == 0 || _r == int32(4) {
		goto _7
	}

	return _r

_7:
	goto _4

_5:
	return _r
}

type t1126__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t1126__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type s46timespec = struct {
	Ftv_sec  int64
	Ftv_nsec int64
}

// xa_spin is defined at atomic_arch.h:114:20
func x5a_spin(tls TLS) {
	X__assert_fail(tls, ts+0 /* "TODO(ccgo)" */, ts+36 /* "arch/x86_64/atom..." */, int32(116), x1049__func__)
}

// xa_inc is defined at atomic_arch.h:80:20
func x10a_inc(tls TLS, _p uintptr /* *int32 */) {
	a_inc(_p)
}

// xa_cas is defined at atomic_arch.h:4:19
func x17a_cas(tls TLS, _p uintptr /* *int32 */, _t int32, _s int32) (r int32) {
	return a_cas(_p, _t, _s)
	return r
}

// xa_dec is defined at atomic_arch.h:89:20
func x6a_dec(tls TLS, _p uintptr /* *int32 */) {
	a_dec(_p)
}

type t62time_t = int64

// x5__func__ [7]int8, escapes: true, atomic_arch.h:115:1
var x1049__func__ = ds + 46624

type t12clockid_t = int32

// linking pthread_rwlock_tryrdlock.o

// Xpthread_rwlock_tryrdlock is defined at pthread_rwlock_tryrdlock.c:3:5
func Xpthread_rwlock_tryrdlock(tls TLS, _rw uintptr /* *Tpthread_rwlock_t = struct{F__u...7]uintptr;F int64; _ [48]byte};} */) (r int32) {
	var (
		_val int32
		_cnt int32
	)
_1:
	_val = *(*int32)(unsafe.Pointer(_rw))
	_cnt = _val & int32(0x7fffffff)
	if _cnt != int32(0x7fffffff) {
		goto _4
	}

	return int32(16)

_4:
	if _cnt != int32(0x7ffffffe) {
		goto _5
	}

	return int32(11)

_5:
	if x18a_cas(tls, _rw, _val, _val+int32(1)) != _val {
		goto _1
	}

	return int32(0)
}

type t1127__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t1127__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// xa_cas is defined at atomic_arch.h:4:19
func x18a_cas(tls TLS, _p uintptr /* *int32 */, _t int32, _s int32) (r int32) {
	return a_cas(_p, _t, _s)
	return r
}

// linking pthread_rwlock_trywrlock.o

// Xpthread_rwlock_trywrlock is defined at pthread_rwlock_trywrlock.c:3:5
func Xpthread_rwlock_trywrlock(tls TLS, _rw uintptr /* *Tpthread_rwlock_t = struct{F__u...7]uintptr;F int64; _ [48]byte};} */) (r int32) {
	if x19a_cas(tls, _rw, int32(0), int32(0x7fffffff)) == 0 {
		goto _1
	}

	return int32(16)

_1:
	return int32(0)
}

type t1128__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t1128__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// xa_cas is defined at atomic_arch.h:4:19
func x19a_cas(tls TLS, _p uintptr /* *int32 */, _t int32, _s int32) (r int32) {
	return a_cas(_p, _t, _s)
	return r
}

// linking pthread_rwlock_unlock.o

// Xpthread_rwlock_unlock is defined at pthread_rwlock_unlock.c:3:5
func Xpthread_rwlock_unlock(tls TLS, _rw uintptr /* *Tpthread_rwlock_t = struct{F__u...7]uintptr;F int64; _ [48]byte};} */) (r int32) {
	var (
		_val     int32
		_cnt     int32
		_waiters int32
		_new     int32
		_priv    int32
	)
	_priv = *(*int32)(unsafe.Pointer(_rw + 8)) ^ int32(128)
_1:
	_val = *(*int32)(unsafe.Pointer(_rw))
	_cnt = _val & int32(0x7fffffff)
	_waiters = *(*int32)(unsafe.Pointer(_rw + 4))
	_new = func() int32 {
		if (_cnt == int32(0x7fffffff)) || (_cnt == int32(1)) {
			return int32(0)
		}
		return _val - int32(1)
	}()
	if x20a_cas(tls, _rw, _val, _new) != _val {
		goto _1
	}

	if _new != 0 || _waiters == 0 && _val >= int32(0) {
		goto _4
	}

	x12__wake(tls, _rw, _cnt, _priv)
_4:
	return int32(0)
}

type t1129__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t1129__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// xa_cas is defined at atomic_arch.h:4:19
func x20a_cas(tls TLS, _p uintptr /* *int32 */, _t int32, _s int32) (r int32) {
	return a_cas(_p, _t, _s)
	return r
}

// x__wake is defined at pthread_impl.h:154:20
func x12__wake(tls TLS, _addr uintptr /* *void */, _cnt int32, _priv int32) {
	if _priv == 0 {
		goto _1
	}

	_priv = int32(128)
_1:
	if _cnt >= int32(0) {
		goto _2
	}

	_cnt = int32(0x7fffffff)
_2:
	if x64__syscall3(tls, int64(202), int64(_addr), int64(int32(1)|_priv), int64(_cnt)) == int64(-38) {
		x64__syscall3(tls, int64(202), int64(_addr), int64(1), int64(_cnt))
	}
}

// x__syscall3 is defined at syscall_arch.h:33:22
func x64__syscall3(tls TLS, _n int64, _a1 int64, _a2 int64, _a3 int64) (r int64) {
	return X__syscall(tls, _n, _a1, _a2, _a3, int64(0), int64(0), int64(0))
}

// linking pthread_rwlock_wrlock.o

// Xpthread_rwlock_wrlock is defined at pthread_rwlock_wrlock.c:3:5
func Xpthread_rwlock_wrlock(tls TLS, _rw uintptr /* *Tpthread_rwlock_t = struct{F__u...7]uintptr;F int64; _ [48]byte};} */) (r int32) {
	return Xpthread_rwlock_timedwrlock(tls, _rw, null)
}

type t1130__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t1130__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// linking pthread_rwlockattr_destroy.o

// Xpthread_rwlockattr_destroy is defined at pthread_rwlockattr_destroy.c:3:5
func Xpthread_rwlockattr_destroy(tls TLS, _a uintptr /* *Tpthread_rwlockattr_t = struct{F__attr [2]uint32;} */) (r int32) {
	return int32(0)
}

type t1131__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t1131__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// linking pthread_rwlockattr_init.o

// Xpthread_rwlockattr_init is defined at pthread_rwlockattr_init.c:4:5
func Xpthread_rwlockattr_init(tls TLS, _a uintptr /* *Tpthread_rwlockattr_t = struct{F__attr [2]uint32;} */) (r int32) {
	X__assert_fail(tls, ts+0 /* "TODO(ccgo)" */, ts+5412 /* "src/thread/pthre..." */, int32(6), x1050__func__)
	return int32(0)
}

type t1132__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t1132__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// x1__func__ [24]int8, escapes: true, pthread_rwlockattr_init.c:5:1
var x1050__func__ = ds + 46632

// linking pthread_rwlockattr_setpshared.o

// Xpthread_rwlockattr_setpshared is defined at pthread_rwlockattr_setpshared.c:3:5
func Xpthread_rwlockattr_setpshared(tls TLS, _a uintptr /* *Tpthread_rwlockattr_t = struct{F__attr [2]uint32;} */, _pshared int32) (r int32) {
	if uint32(_pshared) <= uint32(1) {
		goto _1
	}

	return int32(22)

_1:
	*(*uint32)(unsafe.Pointer(_a)) = uint32(_pshared)
	return int32(0)
}

type t1133__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t1133__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// linking pthread_self.o

type t1134__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t1134__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// x__pthread_self_internal is defined at pthread_self.c:5:18
func x__pthread_self_internal(tls TLS) (r uintptr /* Tpthread_t = *S__pthread */) {
	return x43__pthread_self(tls)
}

type s56__pthread = struct {
	Fself          uintptr // *S__pthread
	Fdtv           uintptr // **void
	Funused1       uintptr // *void
	Funused2       uintptr // *void
	Fsysinfo       uint64
	Fcanary        uint64
	Fcanary2       uint64
	Ftid           int32
	Ferrno_val     int32
	Fdetach_state  int32
	Fcancel        int32
	Fcanceldisable uint8
	Fcancelasync   uint8
	F74            uint8
	Fmap_base      uintptr // *uint8
	Fmap_size      uint64
	Fstack         uintptr // *void
	Fstack_size    uint64
	Fguard_size    uint64
	Fstart_arg     uintptr // *void
	Fstart         uintptr // *func(TLS, uintptr) uintptr
	Fresult        uintptr // *void
	Fcancelbuf     uintptr // *S__ptcb
	Ftsd           uintptr // **void
	Frobust_list   struct {
		Fhead    uintptr
		Foff     int64
		Fpending uintptr
	}
	Ftimer_id      int32
	Flocale        uintptr // Tlocale_t = *S__locale_struct
	Fkilllock      [1]int32
	Fdlerror_buf   uintptr // *int8
	Fstdio_locks   uintptr // *void
	Fcanary_at_end uint64
	Fdtv_copy      uintptr // **void
}

// x__pthread_self is defined at pthread_arch.h:1:30
func x43__pthread_self(tls TLS) (r uintptr /* *S__pthread */) {
	return uintptr(tls)
	return r
}

type t74uintptr_t = uint64

type t379size_t = uint64

type s55__ptcb = struct {
	F__f    uintptr // *func(TLS, uintptr)
	F__x    uintptr // *void
	F__next uintptr // *S__ptcb
}

type s169__locale_struct = struct{ Fcat [6]uintptr }

// linking pthread_setattr_default_np.o

// Xpthread_setattr_default_np is defined at pthread_setattr_default_np.c:7:5
func Xpthread_setattr_default_np(tls TLS, _attrp uintptr /* *Tpthread_attr_t = struct{F__u s...[7]uint64;F int64; _ [48]byte};} */) (r int32) {
	X__assert_fail(tls, ts+0 /* "TODO(ccgo)" */, ts+5452 /* "src/thread/pthre..." */, int32(10), x1051__func__)
	return r
}

// Xpthread_getattr_default_np is defined at pthread_setattr_default_np.c:27:5
func Xpthread_getattr_default_np(tls TLS, _attrp uintptr /* *Tpthread_attr_t = struct{F__u s...[7]uint64;F int64; _ [48]byte};} */) (r int32) {
	X__assert_fail(tls, ts+0 /* "TODO(ccgo)" */, ts+5452 /* "src/thread/pthre..." */, int32(29), x1052__func__)
	return r
}

type t1135__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t1135__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// x1__func__ [27]int8, escapes: true, pthread_setattr_default_np.c:8:1
var x1051__func__ = ds + 46656

// x2__func__ [27]int8, escapes: true, pthread_setattr_default_np.c:28:1
var x1052__func__ = ds + 46688

// linking pthread_setcancelstate.o

// X__pthread_setcancelstate is defined at pthread_setcancelstate.c:3:5
func X__pthread_setcancelstate(tls TLS, _new int32, _old uintptr /* *int32 */) (r int32) {
	var _self uintptr // *S__pthread

	if uint32(_new) <= uint32(2) {
		goto _1
	}

	return int32(22)

_1:
	_self = x44__pthread_self(tls)
	if _old == 0 {
		goto _2
	}

	*(*int32)(unsafe.Pointer(_old)) = int32(*(*uint8)(unsafe.Pointer(_self + 72)))
_2:
	*(*uint8)(unsafe.Pointer(_self + 72)) = uint8(_new)
	return int32(0)
}

type t1136__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t1136__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type s57__pthread = struct {
	Fself          uintptr // *S__pthread
	Fdtv           uintptr // **void
	Funused1       uintptr // *void
	Funused2       uintptr // *void
	Fsysinfo       uint64
	Fcanary        uint64
	Fcanary2       uint64
	Ftid           int32
	Ferrno_val     int32
	Fdetach_state  int32
	Fcancel        int32
	Fcanceldisable uint8
	Fcancelasync   uint8
	F74            uint8
	Fmap_base      uintptr // *uint8
	Fmap_size      uint64
	Fstack         uintptr // *void
	Fstack_size    uint64
	Fguard_size    uint64
	Fstart_arg     uintptr // *void
	Fstart         uintptr // *func(TLS, uintptr) uintptr
	Fresult        uintptr // *void
	Fcancelbuf     uintptr // *S__ptcb
	Ftsd           uintptr // **void
	Frobust_list   struct {
		Fhead    uintptr
		Foff     int64
		Fpending uintptr
	}
	Ftimer_id      int32
	Flocale        uintptr // Tlocale_t = *S__locale_struct
	Fkilllock      [1]int32
	Fdlerror_buf   uintptr // *int8
	Fstdio_locks   uintptr // *void
	Fcanary_at_end uint64
	Fdtv_copy      uintptr // **void
}

// x__pthread_self is defined at pthread_arch.h:1:30
func x44__pthread_self(tls TLS) (r uintptr /* *S__pthread */) {
	return uintptr(tls)
	return r
}

type t75uintptr_t = uint64

type t380size_t = uint64

type s56__ptcb = struct {
	F__f    uintptr // *func(TLS, uintptr)
	F__x    uintptr // *void
	F__next uintptr // *S__ptcb
}

type s170__locale_struct = struct{ Fcat [6]uintptr }

// linking pthread_setcanceltype.o

// Xpthread_setcanceltype is defined at pthread_setcanceltype.c:3:5
func Xpthread_setcanceltype(tls TLS, _new int32, _old uintptr /* *int32 */) (r int32) {
	var _self uintptr // *S__pthread

	_self = x45__pthread_self(tls)
	if uint32(_new) <= uint32(1) {
		goto _1
	}

	return int32(22)

_1:
	if _old == 0 {
		goto _2
	}

	*(*int32)(unsafe.Pointer(_old)) = int32(*(*uint8)(unsafe.Pointer(_self + 73)))
_2:
	*(*uint8)(unsafe.Pointer(_self + 73)) = uint8(_new)
	if _new == 0 {
		goto _3
	}

	Xpthread_testcancel(tls)
_3:
	return int32(0)
}

type t1137__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t1137__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type s58__pthread = struct {
	Fself          uintptr // *S__pthread
	Fdtv           uintptr // **void
	Funused1       uintptr // *void
	Funused2       uintptr // *void
	Fsysinfo       uint64
	Fcanary        uint64
	Fcanary2       uint64
	Ftid           int32
	Ferrno_val     int32
	Fdetach_state  int32
	Fcancel        int32
	Fcanceldisable uint8
	Fcancelasync   uint8
	F74            uint8
	Fmap_base      uintptr // *uint8
	Fmap_size      uint64
	Fstack         uintptr // *void
	Fstack_size    uint64
	Fguard_size    uint64
	Fstart_arg     uintptr // *void
	Fstart         uintptr // *func(TLS, uintptr) uintptr
	Fresult        uintptr // *void
	Fcancelbuf     uintptr // *S__ptcb
	Ftsd           uintptr // **void
	Frobust_list   struct {
		Fhead    uintptr
		Foff     int64
		Fpending uintptr
	}
	Ftimer_id      int32
	Flocale        uintptr // Tlocale_t = *S__locale_struct
	Fkilllock      [1]int32
	Fdlerror_buf   uintptr // *int8
	Fstdio_locks   uintptr // *void
	Fcanary_at_end uint64
	Fdtv_copy      uintptr // **void
}

// x__pthread_self is defined at pthread_arch.h:1:30
func x45__pthread_self(tls TLS) (r uintptr /* *S__pthread */) {
	return uintptr(tls)
	return r
}

type t76uintptr_t = uint64

type t381size_t = uint64

type s57__ptcb = struct {
	F__f    uintptr // *func(TLS, uintptr)
	F__x    uintptr // *void
	F__next uintptr // *S__ptcb
}

type s171__locale_struct = struct{ Fcat [6]uintptr }

// linking pthread_setconcurrency.o

// Xpthread_setconcurrency is defined at pthread_setconcurrency.c:4:5
func Xpthread_setconcurrency(tls TLS, _val int32) (r int32) {
	if _val >= int32(0) {
		goto _1
	}

	return int32(22)

_1:
	if _val <= int32(0) {
		goto _2
	}

	return int32(11)

_2:
	return int32(0)
}

type t1138__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t1138__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// linking pthread_setname_np.o

func set1053(p *uint64, v uint64) uint64 { *p = v; return v }

func set1054(p *int32, v int32) int32 { *p = v; return v }

// Xpthread_setname_np is defined at pthread_setname_np.c:10:5
func Xpthread_setname_np(tls TLS, _thread uintptr /* Tpthread_t = *S__pthread */, _name uintptr /* *int8 */) (r int32) {
	esc := MustMalloc(50)
	var (
		_fd     int32
		_cs     = esc // *int32
		_status int32
		_f      = esc + 16 // *[34]int8
		_len    uint64
	)
	defer Free(esc)
	_status = int32(0)
	if set1053(&_len, Xstrnlen(tls, _name, uint64(16))) <= uint64(15) {
		goto _1
	}

	return int32(34)

_1:
	X__assert_fail(tls, ts+0 /* "TODO(ccgo)" */, ts+5492 /* "src/thread/pthre..." */, int32(18), x1055__func__)
	X__assert_fail(tls, ts+0 /* "TODO(ccgo)" */, ts+5492 /* "src/thread/pthre..." */, int32(20), x1055__func__)
	Xsnprintf(tls, _f, uint64(34), ts+5524 /* "/proc/self/task/..." */, *(*int32)(unsafe.Pointer(_thread + 56)))
	Xpthread_setcancelstate(tls, int32(1), _cs)
	if set1054(&_fd, Xopen(tls, _f, int32(01))) >= int32(0) && Xwrite(tls, _fd, _name, _len) >= int64(0) {
		goto _2
	}

	_status = *(*int32)(unsafe.Pointer(X__errno_location(tls)))
_2:
	if _fd < int32(0) {
		goto _3
	}

	Xclose(tls, _fd)
_3:
	Xpthread_setcancelstate(tls, *(*int32)(unsafe.Pointer(_cs)), null)
	return _status
}

type t1139__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t1139__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type s59__pthread = struct {
	Fself          uintptr // *S__pthread
	Fdtv           uintptr // **void
	Funused1       uintptr // *void
	Funused2       uintptr // *void
	Fsysinfo       uint64
	Fcanary        uint64
	Fcanary2       uint64
	Ftid           int32
	Ferrno_val     int32
	Fdetach_state  int32
	Fcancel        int32
	Fcanceldisable uint8
	Fcancelasync   uint8
	F74            uint8
	Fmap_base      uintptr // *uint8
	Fmap_size      uint64
	Fstack         uintptr // *void
	Fstack_size    uint64
	Fguard_size    uint64
	Fstart_arg     uintptr // *void
	Fstart         uintptr // *func(TLS, uintptr) uintptr
	Fresult        uintptr // *void
	Fcancelbuf     uintptr // *S__ptcb
	Ftsd           uintptr // **void
	Frobust_list   struct {
		Fhead    uintptr
		Foff     int64
		Fpending uintptr
	}
	Ftimer_id      int32
	Flocale        uintptr // Tlocale_t = *S__locale_struct
	Fkilllock      [1]int32
	Fdlerror_buf   uintptr // *int8
	Fstdio_locks   uintptr // *void
	Fcanary_at_end uint64
	Fdtv_copy      uintptr // **void
}

// x1__func__ [19]int8, escapes: true, pthread_setname_np.c:11:1
var x1055__func__ = ds + 46720

type t382size_t = uint64

type t44ssize_t = int64

type t77uintptr_t = uint64

type s58__ptcb = struct {
	F__f    uintptr // *func(TLS, uintptr)
	F__x    uintptr // *void
	F__next uintptr // *S__ptcb
}

type s172__locale_struct = struct{ Fcat [6]uintptr }

// linking pthread_setschedparam.o

// Xpthread_setschedparam is defined at pthread_setschedparam.c:3:5
func Xpthread_setschedparam(tls TLS, _t uintptr /* Tpthread_t = *S__pthread */, _policy int32, _param uintptr /* *Ssched_param */) (r int32) {
	var _r int32

	X__lock(tls, _t+200)
	_r = int32(func() int64 {
		if *(*int32)(unsafe.Pointer(_t + 56)) == 0 {
			return int64(3)
		}
		return -x65__syscall3(tls, int64(144), int64(*(*int32)(unsafe.Pointer(_t + 56))), int64(_policy), int64(_param))
	}())
	X__unlock(tls, _t+200)
	return _r
}

type t1140__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t1140__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type s60__pthread = struct {
	Fself          uintptr // *S__pthread
	Fdtv           uintptr // **void
	Funused1       uintptr // *void
	Funused2       uintptr // *void
	Fsysinfo       uint64
	Fcanary        uint64
	Fcanary2       uint64
	Ftid           int32
	Ferrno_val     int32
	Fdetach_state  int32
	Fcancel        int32
	Fcanceldisable uint8
	Fcancelasync   uint8
	F74            uint8
	Fmap_base      uintptr // *uint8
	Fmap_size      uint64
	Fstack         uintptr // *void
	Fstack_size    uint64
	Fguard_size    uint64
	Fstart_arg     uintptr // *void
	Fstart         uintptr // *func(TLS, uintptr) uintptr
	Fresult        uintptr // *void
	Fcancelbuf     uintptr // *S__ptcb
	Ftsd           uintptr // **void
	Frobust_list   struct {
		Fhead    uintptr
		Foff     int64
		Fpending uintptr
	}
	Ftimer_id      int32
	Flocale        uintptr // Tlocale_t = *S__locale_struct
	Fkilllock      [1]int32
	Fdlerror_buf   uintptr // *int8
	Fstdio_locks   uintptr // *void
	Fcanary_at_end uint64
	Fdtv_copy      uintptr // **void
}

type s7sched_param = struct {
	Fsched_priority        int32
	Fsched_ss_low_priority int32
	Fsched_ss_repl_period  s47timespec
	Fsched_ss_init_budget  s47timespec
	Fsched_ss_max_repl     int32
}

// x__syscall3 is defined at syscall_arch.h:33:22
func x65__syscall3(tls TLS, _n int64, _a1 int64, _a2 int64, _a3 int64) (r int64) {
	return X__syscall(tls, _n, _a1, _a2, _a3, int64(0), int64(0), int64(0))
}

type t78uintptr_t = uint64

type t383size_t = uint64

type s59__ptcb = struct {
	F__f    uintptr // *func(TLS, uintptr)
	F__x    uintptr // *void
	F__next uintptr // *S__ptcb
}

type s173__locale_struct = struct{ Fcat [6]uintptr }

type s47timespec = struct {
	Ftv_sec  int64
	Ftv_nsec int64
}

type t63time_t = int64

// linking pthread_setschedprio.o

// Xpthread_setschedprio is defined at pthread_setschedprio.c:3:5
func Xpthread_setschedprio(tls TLS, _t uintptr /* Tpthread_t = *S__pthread */, aprio int32) (r int32) {
	esc := MustMalloc(4)
	var (
		_prio = esc // *int32
		_r    int32
	)
	defer Free(esc)
	*(*int32)(unsafe.Pointer(_prio)) = aprio
	X__lock(tls, _t+200)
	_r = int32(func() int64 {
		if *(*int32)(unsafe.Pointer(_t + 56)) == 0 {
			return int64(3)
		}
		return -x53__syscall2(tls, int64(142), int64(*(*int32)(unsafe.Pointer(_t + 56))), int64(_prio))
	}())
	X__unlock(tls, _t+200)
	return _r
}

type t1141__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t1141__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type s61__pthread = struct {
	Fself          uintptr // *S__pthread
	Fdtv           uintptr // **void
	Funused1       uintptr // *void
	Funused2       uintptr // *void
	Fsysinfo       uint64
	Fcanary        uint64
	Fcanary2       uint64
	Ftid           int32
	Ferrno_val     int32
	Fdetach_state  int32
	Fcancel        int32
	Fcanceldisable uint8
	Fcancelasync   uint8
	F74            uint8
	Fmap_base      uintptr // *uint8
	Fmap_size      uint64
	Fstack         uintptr // *void
	Fstack_size    uint64
	Fguard_size    uint64
	Fstart_arg     uintptr // *void
	Fstart         uintptr // *func(TLS, uintptr) uintptr
	Fresult        uintptr // *void
	Fcancelbuf     uintptr // *S__ptcb
	Ftsd           uintptr // **void
	Frobust_list   struct {
		Fhead    uintptr
		Foff     int64
		Fpending uintptr
	}
	Ftimer_id      int32
	Flocale        uintptr // Tlocale_t = *S__locale_struct
	Fkilllock      [1]int32
	Fdlerror_buf   uintptr // *int8
	Fstdio_locks   uintptr // *void
	Fcanary_at_end uint64
	Fdtv_copy      uintptr // **void
}

// x__syscall2 is defined at syscall_arch.h:24:22
func x53__syscall2(tls TLS, _n int64, _a1 int64, _a2 int64) (r int64) {
	return X__syscall(tls, _n, _a1, _a2, int64(0), int64(0), int64(0), int64(0))
}

type t79uintptr_t = uint64

type t384size_t = uint64

type s60__ptcb = struct {
	F__f    uintptr // *func(TLS, uintptr)
	F__x    uintptr // *void
	F__next uintptr // *S__ptcb
}

type s174__locale_struct = struct{ Fcat [6]uintptr }

// linking pthread_setspecific.o

func setb1056(p *uint8, v int32) uint8 {
	w := uint8(v) & (1<<1 - 1)
	*p = (*p &^ ((1<<1 - 1) << 0)) | (w << 0)
	return w << (8 - 1) >> (8 - 1)
}

// Xpthread_setspecific is defined at pthread_setspecific.c:3:5
func Xpthread_setspecific(tls TLS, _k uint32, _x uintptr /* *void */) (r int32) {
	var _self uintptr // *S__pthread

	_self = x46__pthread_self(tls)
	if *(*uintptr)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_self + 152)) + 8*uintptr(_k))) == _x {
		goto _1
	}

	*(*uintptr)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_self + 152)) + 8*uintptr(_k))) = _x
	setb1056((*uint8)(unsafe.Pointer(_self+74)), 1)
_1:
	return int32(0)
}

type t1142__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t1142__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t2pthread_key_t = uint32

type s62__pthread = struct {
	Fself          uintptr // *S__pthread
	Fdtv           uintptr // **void
	Funused1       uintptr // *void
	Funused2       uintptr // *void
	Fsysinfo       uint64
	Fcanary        uint64
	Fcanary2       uint64
	Ftid           int32
	Ferrno_val     int32
	Fdetach_state  int32
	Fcancel        int32
	Fcanceldisable uint8
	Fcancelasync   uint8
	F74            uint8
	Fmap_base      uintptr // *uint8
	Fmap_size      uint64
	Fstack         uintptr // *void
	Fstack_size    uint64
	Fguard_size    uint64
	Fstart_arg     uintptr // *void
	Fstart         uintptr // *func(TLS, uintptr) uintptr
	Fresult        uintptr // *void
	Fcancelbuf     uintptr // *S__ptcb
	Ftsd           uintptr // **void
	Frobust_list   struct {
		Fhead    uintptr
		Foff     int64
		Fpending uintptr
	}
	Ftimer_id      int32
	Flocale        uintptr // Tlocale_t = *S__locale_struct
	Fkilllock      [1]int32
	Fdlerror_buf   uintptr // *int8
	Fstdio_locks   uintptr // *void
	Fcanary_at_end uint64
	Fdtv_copy      uintptr // **void
}

// x__pthread_self is defined at pthread_arch.h:1:30
func x46__pthread_self(tls TLS) (r uintptr /* *S__pthread */) {
	return uintptr(tls)
	return r
}

type t80uintptr_t = uint64

type t385size_t = uint64

type s61__ptcb = struct {
	F__f    uintptr // *func(TLS, uintptr)
	F__x    uintptr // *void
	F__next uintptr // *S__ptcb
}

type s175__locale_struct = struct{ Fcat [6]uintptr }

// linking pthread_sigmask.o

// Xpthread_sigmask is defined at pthread_sigmask.c:5:5
func Xpthread_sigmask(tls TLS, _how int32, _set uintptr /* *Tsigset_t = struct{F__bits [16]uint64;} */, _old uintptr /* *Tsigset_t = struct{F__bits [16]uint64;} */) (r int32) {
	var _ret int32

	if uint32(_how)-uint32(0) <= uint32(2) {
		goto _1
	}

	return int32(22)

_1:
	_ret = int32(-x33__syscall4(tls, int64(14), int64(_how), int64(_set), int64(_old), int64(8)))
	if _ret != 0 || _old == 0 {
		goto _2
	}

	{
		p := (*uint64)(unsafe.Pointer(_old))
		*p = *p & uint64(18446744058677166079)
	}
	goto _3

	{
		p := (*uint64)(unsafe.Pointer(_old))
		*p = *p & uint64(18446744071562067967)
	}
	{
		p := (*uint64)(unsafe.Pointer(_old + 8))
		*p = *p & uint64(18446744073709551612)
	}
_3:
_2:
	return _ret
}

type t1143__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t1143__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// x__syscall4 is defined at syscall_arch.h:42:22
func x33__syscall4(tls TLS, _n int64, _a1 int64, _a2 int64, _a3 int64, _a4 int64) (r int64) {
	return X__syscall(tls, _n, _a1, _a2, _a3, _a4, int64(0), int64(0))
}

// linking pthread_spin_destroy.o

// Xpthread_spin_destroy is defined at pthread_spin_destroy.c:3:5
func Xpthread_spin_destroy(tls TLS, _s uintptr /* *Tpthread_spinlock_t = int32 */) (r int32) {
	return int32(0)
}

type t1144__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t1144__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// linking pthread_spin_init.o

func set1057(p *int32, v int32) int32 { *p = v; return v }

// Xpthread_spin_init is defined at pthread_spin_init.c:3:5
func Xpthread_spin_init(tls TLS, _s uintptr /* *Tpthread_spinlock_t = int32 */, _shared int32) (r int32) {
	return set1057((*int32)(unsafe.Pointer(_s)), int32(0))
}

type t1145__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t1145__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type Tpthread_spinlock_t = int32

// linking pthread_spin_lock.o

// Xpthread_spin_lock is defined at pthread_spin_lock.c:4:5
func Xpthread_spin_lock(tls TLS, _s uintptr /* *Tpthread_spinlock_t = int32 */) (r int32) {
_1:
	if *(*int32)(unsafe.Pointer(_s)) == 0 && x21a_cas(tls, _s, int32(0), int32(16)) == 0 {
		goto _2
	}

	x6a_spin(tls)
	goto _1

_2:
	return int32(0)
}

type t1146__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t1146__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t1pthread_spinlock_t = int32

// xa_cas is defined at atomic_arch.h:4:19
func x21a_cas(tls TLS, _p uintptr /* *int32 */, _t int32, _s int32) (r int32) {
	return a_cas(_p, _t, _s)
	return r
}

// xa_spin is defined at atomic_arch.h:114:20
func x6a_spin(tls TLS) {
	X__assert_fail(tls, ts+0 /* "TODO(ccgo)" */, ts+36 /* "arch/x86_64/atom..." */, int32(116), x1058__func__)
}

// x3__func__ [7]int8, escapes: true, atomic_arch.h:115:1
var x1058__func__ = ds + 46744

// linking pthread_spin_trylock.o

// Xpthread_spin_trylock is defined at pthread_spin_trylock.c:4:5
func Xpthread_spin_trylock(tls TLS, _s uintptr /* *Tpthread_spinlock_t = int32 */) (r int32) {
	return x22a_cas(tls, _s, int32(0), int32(16))
}

type t1147__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t1147__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// xa_cas is defined at atomic_arch.h:4:19
func x22a_cas(tls TLS, _p uintptr /* *int32 */, _t int32, _s int32) (r int32) {
	return a_cas(_p, _t, _s)
	return r
}

// linking pthread_spin_unlock.o

// Xpthread_spin_unlock is defined at pthread_spin_unlock.c:3:5
func Xpthread_spin_unlock(tls TLS, _s uintptr /* *Tpthread_spinlock_t = int32 */) (r int32) {
	x7a_store(tls, _s, int32(0))
	return int32(0)
}

type t1148__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t1148__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// xa_store is defined at atomic_arch.h:98:20
func x7a_store(tls TLS, _p uintptr /* *int32 */, _x int32) {
	X__assert_fail(tls, ts+0 /* "TODO(ccgo)" */, ts+36 /* "arch/x86_64/atom..." */, int32(100), x1059__func__)
}

// x2__func__ [8]int8, escapes: true, atomic_arch.h:99:1
var x1059__func__ = ds + 46752

// linking pthread_testcancel.o

// X__pthread_testcancel is defined at pthread_testcancel.c:10:6
func X__pthread_testcancel(tls TLS) {
	X__testcancel(tls)
}

type t1149__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t1149__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// xdummy is defined at pthread_testcancel.c:4:13
func x16dummy(tls TLS) {
}

// linking sem_destroy.o

// Xsem_destroy is defined at sem_destroy.c:3:5
func Xsem_destroy(tls TLS, _sem uintptr /* *Tsem_t = struct{F__val [8]int32;} */) (r int32) {
	return int32(0)
}

type t1150__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t1150__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// linking sem_getvalue.o

// Xsem_getvalue is defined at sem_getvalue.c:3:5
func Xsem_getvalue(tls TLS, _sem uintptr /* *Tsem_t = struct{F__val [8]int32;} */, _valp uintptr /* *int32 */) (r int32) {
	var _val int32

	_val = *(*int32)(unsafe.Pointer(_sem))
	*(*int32)(unsafe.Pointer(_valp)) = func() int32 {
		if _val < int32(0) {
			return int32(0)
		}
		return _val
	}()
	return int32(0)
}

type t1151__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t1151__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// linking sem_init.o

// Xsem_init is defined at sem_init.c:5:5
func Xsem_init(tls TLS, _sem uintptr /* *Tsem_t = struct{F__val [8]int32;} */, _pshared int32, _value uint32) (r int32) {
	if _value <= uint32(0x7fffffff) {
		goto _1
	}

	*(*int32)(unsafe.Pointer(X__errno_location(tls))) = int32(22)
	return int32(-1)

_1:
	*(*int32)(unsafe.Pointer(_sem)) = int32(_value)
	*(*int32)(unsafe.Pointer(_sem + 4)) = int32(0)
	*(*int32)(unsafe.Pointer(_sem + 8)) = func() int32 {
		if _pshared != 0 {
			return int32(0)
		}
		return int32(128)
	}()
	return int32(0)
}

type t1152__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t1152__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// linking sem_open.o

func set1060(p *uintptr, v uintptr) uintptr { *p = v; return v }

func set1061(p *int32, v int32) int32 { *p = v; return v }

// Xsem_open is defined at sem_open.c:27:7
func Xsem_open(tls TLS, _name uintptr /* *int8 */, _flags int32, ap ...interface{}) (r uintptr /* *Tsem_t = struct{F__val [8]int32;} */) {
	esc := MustMalloc(537)
	var (
		_ap     uintptr // Tva_list = T__builtin_va_list = ...truct{Fsize int32;Fdata int8;};}
		_mode   uint32
		_value  uint32
		_fd     int32
		_i      int32
		_e      int32
		_slot   int32
		_first  int32
		_cnt    int32
		_cs     = esc       // *int32
		_newsem = esc + 16  // *Tsem_t = struct{F__val [8]int32;}
		_map    uintptr     // *void
		_tmp    = esc + 48  // *[64]int8
		_ts     = esc + 112 // *Stimespec
		_st     = esc + 128 // *Sstat
		_buf    = esc + 272 // *[265]int8
	)
	defer Free(esc)
	_first = int32(1)
	if set1060(&_name, X__shm_mapname(tls, _name, _buf)) != 0 {
		goto _1
	}

	return null

_1:
	X__lock(tls, x8lock)
	if xsemtab != 0 || set1060(&xsemtab, Xcalloc(tls, uint64(24), uint64(256))) != 0 {
		goto _2
	}

	X__unlock(tls, x8lock)
	return null

_2:
	_slot = int32(-1)
	_cnt = set1061(&_i, int32(0))
_3:
	if _i >= int32(256) {
		goto _5
	}

	_cnt = _cnt + *(*int32)(unsafe.Pointer((xsemtab + 24*uintptr(_i)) + 16))
	if *(*uintptr)(unsafe.Pointer((xsemtab + 24*uintptr(_i)) + 8)) != 0 || _slot >= int32(0) {
		goto _6
	}

	_slot = _i
_6:
	_i++
	goto _3

_5:
	if _cnt != int32(0x7fffffff) && _slot >= int32(0) {
		goto _7
	}

	*(*int32)(unsafe.Pointer(X__errno_location(tls))) = int32(24)
	X__unlock(tls, x8lock)
	return null

_7:
	*(*uintptr)(unsafe.Pointer((xsemtab + 24*uintptr(_slot)) + 8)) = uintptr(18446744073709551615)
	X__unlock(tls, x8lock)
	_flags = _flags & int32(192)
	Xpthread_setcancelstate(tls, int32(1), _cs)
	if _flags != int32(192) || Xaccess(tls, _name, int32(0)) != int32(0) {
		goto _8
	}

	*(*int32)(unsafe.Pointer(X__errno_location(tls))) = int32(17)
	goto lfail

_8:
_9:
	if _flags == int32(192) {
		goto _12
	}

	_fd = Xopen(tls, _name, int32(657410))
	if _fd < int32(0) {
		goto _13
	}

	if Xfstat(tls, _fd, _st) >= int32(0) && set1060(&_map, Xmmap(tls, null, uint64(32), int32(3), int32(0x1), _fd, int64(0))) != uintptr(18446744073709551615) {
		goto _14
	}

	Xclose(tls, _fd)
	goto lfail

_14:
	Xclose(tls, _fd)
	goto _11

_13:
	if *(*int32)(unsafe.Pointer(X__errno_location(tls))) == int32(2) {
		goto _15
	}

	goto lfail

_15:
_12:
	if _flags&int32(0100) != 0 {
		goto _16
	}

	goto lfail

_16:
	if _first == 0 {
		goto _17
	}

	_first = int32(0)
	_ap = X__builtin_va_start(tls, ap)
	_mode = VAuint32(_ap) & uint32(0666)
	_value = VAuint32(_ap)
	X__builtin_free(tls, _ap)
	if _value <= uint32(0x7fffffff) {
		goto _18
	}

	*(*int32)(unsafe.Pointer(X__errno_location(tls))) = int32(22)
	goto lfail

_18:
	Xsem_init(tls, _newsem, int32(1), _value)
_17:
	Xclock_gettime(tls, int32(0), _ts)
	Xsnprintf(tls, _tmp, uint64(64), ts+5548 /* "/dev/shm/tmp-%d" */, int32(*(*int64)(unsafe.Pointer(_ts + 8))))
	_fd = Xopen(tls, _tmp, int32(657602), _mode)
	if _fd >= int32(0) {
		goto _19
	}

	if *(*int32)(unsafe.Pointer(X__errno_location(tls))) != int32(17) {
		goto _20
	}

	goto _10

_20:
	goto lfail

_19:
	if uint64(Xwrite(tls, _fd, _newsem, uint64(32))) == uint64(32) && Xfstat(tls, _fd, _st) >= int32(0) && set1060(&_map, Xmmap(tls, null, uint64(32), int32(3), int32(0x1), _fd, int64(0))) != uintptr(18446744073709551615) {
		goto _21
	}

	Xclose(tls, _fd)
	Xunlink(tls, _tmp)
	goto lfail

_21:
	Xclose(tls, _fd)
	_e = func() int32 {
		if Xlink(tls, _tmp, _name) != 0 {
			return *(*int32)(unsafe.Pointer(X__errno_location(tls)))
		}
		return int32(0)
	}()
	Xunlink(tls, _tmp)
	if _e != 0 {
		goto _22
	}

	goto _11

_22:
	Xmunmap(tls, _map, uint64(32))
	if _e == int32(17) && _flags != int32(192) {
		goto _23
	}

	goto lfail

_23:
_10:
	goto _9

_11:
	X__lock(tls, x8lock)
	_i = int32(0)
_24:
	if _i >= int32(256) || *(*uint64)(unsafe.Pointer(xsemtab + 24*uintptr(_i))) == *(*uint64)(unsafe.Pointer(_st + 8)) {
		goto _26
	}

	_i++
	goto _24

_26:
	if _i >= int32(256) {
		goto _27
	}

	Xmunmap(tls, _map, uint64(32))
	*(*uintptr)(unsafe.Pointer((xsemtab + 24*uintptr(_slot)) + 8)) = null
	_slot = _i
	_map = *(*uintptr)(unsafe.Pointer((xsemtab + 24*uintptr(_i)) + 8))
_27:
	*(*int32)(unsafe.Pointer((xsemtab + 24*uintptr(_slot)) + 16))++
	*(*uintptr)(unsafe.Pointer((xsemtab + 24*uintptr(_slot)) + 8)) = _map
	*(*uint64)(unsafe.Pointer(xsemtab + 24*uintptr(_slot))) = *(*uint64)(unsafe.Pointer(_st + 8))
	X__unlock(tls, x8lock)
	Xpthread_setcancelstate(tls, *(*int32)(unsafe.Pointer(_cs)), null)
	return _map

	goto lfail
lfail:
	Xpthread_setcancelstate(tls, *(*int32)(unsafe.Pointer(_cs)), null)
	X__lock(tls, x8lock)
	*(*uintptr)(unsafe.Pointer((xsemtab + 24*uintptr(_slot)) + 8)) = null
	X__unlock(tls, x8lock)
	return null
}

func preinc1062(p *int32) int32 { *p += -1; return *p }

// Xsem_close is defined at sem_open.c:163:5
func Xsem_close(tls TLS, _sem uintptr /* *Tsem_t = struct{F__val [8]int32;} */) (r int32) {
	var _i int32

	X__lock(tls, x8lock)
	_i = int32(0)
_1:
	if _i >= int32(256) || *(*uintptr)(unsafe.Pointer((xsemtab + 24*uintptr(_i)) + 8)) == _sem {
		goto _3
	}

	_i++
	goto _1

_3:
	if preinc1062((*int32)(unsafe.Pointer((xsemtab+24*uintptr(_i))+16))) != 0 {
		goto _4
	}

	*(*uintptr)(unsafe.Pointer((xsemtab + 24*uintptr(_i)) + 8)) = null
	*(*uint64)(unsafe.Pointer(xsemtab + 24*uintptr(_i))) = uint64(0)
_4:
	X__unlock(tls, x8lock)
	Xmunmap(tls, _sem, uint64(32))
	return int32(0)
}

type t1153__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t1153__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t39mode_t = uint32

type s48timespec = struct {
	Ftv_sec  int64
	Ftv_nsec int64
}

type s15stat = struct {
	Fst_dev     uint64
	Fst_ino     uint64
	Fst_nlink   uint64
	Fst_mode    uint32
	Fst_uid     uint32
	Fst_gid     uint32
	F__pad0     uint32
	Fst_rdev    uint64
	Fst_size    int64
	Fst_blksize int64
	Fst_blocks  int64
	Fst_atim    s48timespec
	Fst_mtim    s48timespec
	Fst_ctim    s48timespec
	F__unused   [3]int64
}

// xlock [1]int32, escapes: true, sem_open.c:23:21
var x8lock = bss + 9160

// xsemtab *struct{Fino uint64;Fsem *struct{F__val [8]int32;};Frefcnt int32;}, escapes: false, sem_open.c:22:3
var xsemtab uintptr

type t21ino_t = uint64

type t64time_t = int64

type t19dev_t = uint64

type t15nlink_t = uint64

type t33uid_t = uint32

type t34gid_t = uint32

type t125off_t = int64

type t15blksize_t = int64

type t15blkcnt_t = int64

type t1sem_t = struct{ F__val [8]int32 }

type t386size_t = uint64

type t13clockid_t = int32

type t45ssize_t = int64

// linking sem_post.o

// Xsem_post is defined at sem_post.c:4:5
func Xsem_post(tls TLS, _sem uintptr /* *Tsem_t = struct{F__val [8]int32;} */) (r int32) {
	var (
		_val     int32
		_waiters int32
		_priv    int32
	)
	_priv = *(*int32)(unsafe.Pointer(_sem + 8))
_1:
	_val = *(*int32)(unsafe.Pointer(_sem))
	_waiters = *(*int32)(unsafe.Pointer(_sem + 4))
	if _val != int32(0x7fffffff) {
		goto _4
	}

	*(*int32)(unsafe.Pointer(X__errno_location(tls))) = int32(75)
	return int32(-1)

_4:
	if x23a_cas(tls, _sem, _val, _val+int32(1)+bool2int(_val < int32(0))) != _val {
		goto _1
	}

	if _val >= int32(0) && _waiters == 0 {
		goto _5
	}

	x13__wake(tls, _sem, int32(1), _priv)
_5:
	return int32(0)
}

type t1154__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t1154__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// xa_cas is defined at atomic_arch.h:4:19
func x23a_cas(tls TLS, _p uintptr /* *int32 */, _t int32, _s int32) (r int32) {
	return a_cas(_p, _t, _s)
	return r
}

// x__wake is defined at pthread_impl.h:154:20
func x13__wake(tls TLS, _addr uintptr /* *void */, _cnt int32, _priv int32) {
	if _priv == 0 {
		goto _1
	}

	_priv = int32(128)
_1:
	if _cnt >= int32(0) {
		goto _2
	}

	_cnt = int32(0x7fffffff)
_2:
	if x66__syscall3(tls, int64(202), int64(_addr), int64(int32(1)|_priv), int64(_cnt)) == int64(-38) {
		x66__syscall3(tls, int64(202), int64(_addr), int64(1), int64(_cnt))
	}
}

// x__syscall3 is defined at syscall_arch.h:33:22
func x66__syscall3(tls TLS, _n int64, _a1 int64, _a2 int64, _a3 int64) (r int64) {
	return X__syscall(tls, _n, _a1, _a2, _a3, int64(0), int64(0), int64(0))
}

// linking sem_timedwait.o

func postinc1063(p *int32) int32 { r := *p; *p += -1; return r }

func fp1064(f func(TLS, uintptr)) uintptr { return *(*uintptr)(unsafe.Pointer(&f)) }

// Xsem_timedwait is defined at sem_timedwait.c:9:5
func Xsem_timedwait(tls TLS, _sem uintptr /* *Tsem_t = struct{F__val [8]int32;} */, _at uintptr /* *Stimespec */) (r int32) {
	esc := MustMalloc(24)
	var (
		_spins int32
		_r     int32
		___cb  = esc // *S__ptcb
	)
	defer Free(esc)
	Xpthread_testcancel(tls)
	if Xsem_trywait(tls, _sem) != 0 {
		goto _1
	}

	return int32(0)

_1:
	_spins = int32(100)
_2:
	if postinc1063(&_spins) == 0 || *(*int32)(unsafe.Pointer(_sem)) > int32(0) || *(*int32)(unsafe.Pointer(_sem + 4)) != 0 {
		goto _3
	}

	x7a_spin(tls)
	goto _2

_3:
_4:
	if Xsem_trywait(tls, _sem) == 0 {
		goto _5
	}

	x11a_inc(tls, _sem+4*uintptr(1))
	x24a_cas(tls, _sem, int32(0), int32(-1))
	X_pthread_cleanup_push(tls, ___cb, fp1064(x2cleanup), _sem+4*uintptr(1))
	_r = X__timedwait_cp(tls, _sem, int32(-1), int32(0), _at, *(*int32)(unsafe.Pointer(_sem + 8)))
	X_pthread_cleanup_pop(tls, ___cb, int32(1))
	if _r == 0 || _r == int32(4) {
		goto _7
	}

	*(*int32)(unsafe.Pointer(X__errno_location(tls))) = _r
	return int32(-1)

_7:
	goto _4

_5:
	return int32(0)
}

type t1155__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t1155__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type s49timespec = struct {
	Ftv_sec  int64
	Ftv_nsec int64
}

type s62__ptcb = struct {
	F__f    uintptr // *func(TLS, uintptr)
	F__x    uintptr // *void
	F__next uintptr // *S__ptcb
}

// xa_spin is defined at atomic_arch.h:114:20
func x7a_spin(tls TLS) {
	X__assert_fail(tls, ts+0 /* "TODO(ccgo)" */, ts+36 /* "arch/x86_64/atom..." */, int32(116), x1065__func__)
}

// xa_inc is defined at atomic_arch.h:80:20
func x11a_inc(tls TLS, _p uintptr /* *int32 */) {
	a_inc(_p)
}

// xa_cas is defined at atomic_arch.h:4:19
func x24a_cas(tls TLS, _p uintptr /* *int32 */, _t int32, _s int32) (r int32) {
	return a_cas(_p, _t, _s)
	return r
}

// xcleanup is defined at sem_timedwait.c:4:13
func x2cleanup(tls TLS, _p uintptr /* *void */) {
	x7a_dec(tls, _p)
}

type t65time_t = int64

// x5__func__ [7]int8, escapes: true, atomic_arch.h:115:1
var x1065__func__ = ds + 46760

// xa_dec is defined at atomic_arch.h:89:20
func x7a_dec(tls TLS, _p uintptr /* *int32 */) {
	a_dec(_p)
}

type t14clockid_t = int32

// linking sem_trywait.o

func set1066(p *int32, v int32) int32 { *p = v; return v }

// Xsem_trywait is defined at sem_trywait.c:4:5
func Xsem_trywait(tls TLS, _sem uintptr /* *Tsem_t = struct{F__val [8]int32;} */) (r int32) {
	var (
		_val int32
		_new int32
	)
_1:
	if set1066(&_val, *(*int32)(unsafe.Pointer(_sem))) <= int32(0) {
		goto _2
	}

	_new = _val - int32(1) - bool2int((_val == int32(1)) && (*(*int32)(unsafe.Pointer(_sem + 4)) != 0))
	if x25a_cas(tls, _sem, _val, _new) != _val {
		goto _3
	}

	return int32(0)

_3:
	goto _1

_2:
	*(*int32)(unsafe.Pointer(X__errno_location(tls))) = int32(11)
	return int32(-1)
}

type t1156__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t1156__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// xa_cas is defined at atomic_arch.h:4:19
func x25a_cas(tls TLS, _p uintptr /* *int32 */, _t int32, _s int32) (r int32) {
	return a_cas(_p, _t, _s)
	return r
}

// linking sem_unlink.o

// Xsem_unlink is defined at sem_unlink.c:4:5
func Xsem_unlink(tls TLS, _name uintptr /* *int8 */) (r int32) {
	return Xshm_unlink(tls, _name)
}

type t1157__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t1157__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// linking sem_wait.o

// Xsem_wait is defined at sem_wait.c:3:5
func Xsem_wait(tls TLS, _sem uintptr /* *Tsem_t = struct{F__val [8]int32;} */) (r int32) {
	return Xsem_timedwait(tls, _sem, null)
}

type t1158__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t1158__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// linking synccall.o

// X__synccall is defined at synccall.c:48:6
func X__synccall(tls TLS, _func uintptr /* *func(TLS, uintptr) */, _ctx uintptr /* *void */) {
	var _dir s11__dirstream
	_ = _dir
	_dir = *(*s11__dirstream)(unsafe.Pointer(ts + 5564 /* "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00..." */))
	X__assert_fail(tls, ts+0 /* "TODO(ccgo)" */, ts+7640 /* "src/thread/syncc..." */, int32(54), x1067__func__)
}

type t1159__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t1159__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// x2__func__ [11]int8, escapes: true, synccall.c:49:1
var x1067__func__ = ds + 46768

type TDIR = s11__dirstream

type s11__dirstream = struct {
	Ftell    int64
	Ffd      int32
	Fbuf_pos int32
	Fbuf_end int32
	Flock    [1]int32
	Fbuf     [2048]int8
}

type t126off_t = int64

// linking syscall_cp.o

type t1160__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t1160__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// linking thrd_create.o

// Xthrd_create is defined at thrd_create.c:6:5
func Xthrd_create(tls TLS, _thr uintptr /* **S__pthread */, _func uintptr /* Tthrd_start_t = *func(TLS, uintptr) int32 */, _arg uintptr /* *void */) (r int32) {
	var _ret int32

	_ret = X__pthread_create(tls, _thr, uintptr(18446744073709551615), _func, _arg)
	switch _ret {
	case int32(0):
		goto _2
	case int32(11):
		goto _3
	default:
		goto _4
	}
_2:
	return int32(0)

_3:
	return int32(3)

_4:
	return int32(2)
	return r
}

type t1161__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t1161__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type s63__pthread = struct {
	Fself          uintptr // *S__pthread
	Fdtv           uintptr // **void
	Funused1       uintptr // *void
	Funused2       uintptr // *void
	Fsysinfo       uint64
	Fcanary        uint64
	Fcanary2       uint64
	Ftid           int32
	Ferrno_val     int32
	Fdetach_state  int32
	Fcancel        int32
	Fcanceldisable uint8
	Fcancelasync   uint8
	F74            uint8
	Fmap_base      uintptr // *uint8
	Fmap_size      uint64
	Fstack         uintptr // *void
	Fstack_size    uint64
	Fguard_size    uint64
	Fstart_arg     uintptr // *void
	Fstart         uintptr // *func(TLS, uintptr) uintptr
	Fresult        uintptr // *void
	Fcancelbuf     uintptr // *S__ptcb
	Ftsd           uintptr // **void
	Frobust_list   struct {
		Fhead    uintptr
		Foff     int64
		Fpending uintptr
	}
	Ftimer_id      int32
	Flocale        uintptr // Tlocale_t = *S__locale_struct
	Fkilllock      [1]int32
	Fdlerror_buf   uintptr // *int8
	Fstdio_locks   uintptr // *void
	Fcanary_at_end uint64
	Fdtv_copy      uintptr // **void
}

type t81uintptr_t = uint64

type t387size_t = uint64

type s63__ptcb = struct {
	F__f    uintptr // *func(TLS, uintptr)
	F__x    uintptr // *void
	F__next uintptr // *S__ptcb
}

type s176__locale_struct = struct{ Fcat [6]uintptr }

// linking thrd_exit.o

// Xthrd_exit is defined at thrd_exit.c:6:16
func Xthrd_exit(tls TLS, _result int32) {
	X__pthread_exit(tls, uintptr(int64(_result)))
}

type t1162__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t1162__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t1intptr_t = int64

// linking thrd_join.o

// Xthrd_join is defined at thrd_join.c:6:5
func Xthrd_join(tls TLS, _t uintptr /* Tthrd_t = *S__pthread */, _res uintptr /* *int32 */) (r int32) {
	esc := MustMalloc(8)
	var _pthread_res = esc // **void
	defer Free(esc)
	X__pthread_join(tls, _t, _pthread_res)
	if _res == 0 {
		goto _1
	}

	*(*int32)(unsafe.Pointer(_res)) = int32(int64(*(*uintptr)(unsafe.Pointer(_pthread_res))))
_1:
	return int32(0)
}

type t1163__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t1163__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t2intptr_t = int64

type s64__pthread struct{ uintptr }

// linking thrd_sleep.o

// Xthrd_sleep is defined at thrd_sleep.c:5:5
func Xthrd_sleep(tls TLS, _req uintptr /* *Stimespec */, _rem uintptr /* *Stimespec */) (r int32) {
	var _ret int32

	_ret = int32(x54__syscall2(tls, int64(35), int64(_req), int64(_rem)))
	switch _ret {
	case int32(0):
		goto _2
	case int32(-4):
		goto _3
	default:
		goto _4
	}
_2:
	return int32(0)

_3:
	return int32(-1)

_4:
	return int32(-2)
	return r
}

type t1164__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t1164__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type s50timespec = struct {
	Ftv_sec  int64
	Ftv_nsec int64
}

// x__syscall2 is defined at syscall_arch.h:24:22
func x54__syscall2(tls TLS, _n int64, _a1 int64, _a2 int64) (r int64) {
	return X__syscall(tls, _n, _a1, _a2, int64(0), int64(0), int64(0), int64(0))
}

type t66time_t = int64

// linking thrd_yield.o

// Xthrd_yield is defined at thrd_yield.c:4:6
func Xthrd_yield(tls TLS) {
	x7__syscall0(tls, int64(24))
}

type t1165__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t1165__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// x__syscall0 is defined at syscall_arch.h:8:22
func x7__syscall0(tls TLS, _n int64) (r int64) {
	return X__syscall(tls, _n, int64(0), int64(0), int64(0), int64(0), int64(0), int64(0))
}

// linking tls.o

type t1166__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t1166__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// linking tss_create.o

// Xtss_create is defined at tss_create.c:5:5
func Xtss_create(tls TLS, _tss uintptr /* *Ttss_t = uint32 */, _dtor uintptr /* Ttss_dtor_t = *func(TLS, uintptr) */) (r int32) {
	if X__pthread_key_create(tls, _tss, _dtor) != 0 {
		return int32(2)
	}

	return int32(0)
}

type t1167__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t1167__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// linking tss_delete.o

// Xtss_delete is defined at tss_delete.c:5:6
func Xtss_delete(tls TLS, _key uint32) {
	X__pthread_key_delete(tls, _key)
}

type t1168__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t1168__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type Ttss_t = uint32

// linking tss_set.o

func setb1068(p *uint8, v int32) uint8 {
	w := uint8(v) & (1<<1 - 1)
	*p = (*p &^ ((1<<1 - 1) << 0)) | (w << 0)
	return w << (8 - 1) >> (8 - 1)
}

// Xtss_set is defined at tss_set.c:4:5
func Xtss_set(tls TLS, _k uint32, _x uintptr /* *void */) (r int32) {
	var _self uintptr // *S__pthread

	_self = x47__pthread_self(tls)
	if *(*uintptr)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_self + 152)) + 8*uintptr(_k))) == _x {
		goto _1
	}

	*(*uintptr)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_self + 152)) + 8*uintptr(_k))) = _x
	setb1068((*uint8)(unsafe.Pointer(_self+74)), 1)
_1:
	return int32(0)
}

type t1169__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t1169__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t1tss_t = uint32

type s65__pthread = struct {
	Fself          uintptr // *S__pthread
	Fdtv           uintptr // **void
	Funused1       uintptr // *void
	Funused2       uintptr // *void
	Fsysinfo       uint64
	Fcanary        uint64
	Fcanary2       uint64
	Ftid           int32
	Ferrno_val     int32
	Fdetach_state  int32
	Fcancel        int32
	Fcanceldisable uint8
	Fcancelasync   uint8
	F74            uint8
	Fmap_base      uintptr // *uint8
	Fmap_size      uint64
	Fstack         uintptr // *void
	Fstack_size    uint64
	Fguard_size    uint64
	Fstart_arg     uintptr // *void
	Fstart         uintptr // *func(TLS, uintptr) uintptr
	Fresult        uintptr // *void
	Fcancelbuf     uintptr // *S__ptcb
	Ftsd           uintptr // **void
	Frobust_list   struct {
		Fhead    uintptr
		Foff     int64
		Fpending uintptr
	}
	Ftimer_id      int32
	Flocale        uintptr // Tlocale_t = *S__locale_struct
	Fkilllock      [1]int32
	Fdlerror_buf   uintptr // *int8
	Fstdio_locks   uintptr // *void
	Fcanary_at_end uint64
	Fdtv_copy      uintptr // **void
}

// x__pthread_self is defined at pthread_arch.h:1:30
func x47__pthread_self(tls TLS) (r uintptr /* *S__pthread */) {
	return uintptr(tls)
	return r
}

type t82uintptr_t = uint64

type t388size_t = uint64

type s64__ptcb = struct {
	F__f    uintptr // *func(TLS, uintptr)
	F__x    uintptr // *void
	F__next uintptr // *S__ptcb
}

type s177__locale_struct = struct{ Fcat [6]uintptr }

// linking vmlock.o

func set1069(p *int32, v int32) int32 { *p = v; return v }

// X__vm_wait is defined at vmlock.c:5:6
func X__vm_wait(tls TLS) {
	var _tmp int32

_1:
	if set1069(&_tmp, *(*int32)(unsafe.Pointer(xvmlock))) == 0 {
		goto _2
	}

	X__wait(tls, xvmlock, xvmlock+4*uintptr(1), _tmp, int32(1))
	goto _1

_2:
}

// X__vm_lock is defined at vmlock.c:12:6
func X__vm_lock(tls TLS) {
	x12a_inc(tls, xvmlock)
}

// X__vm_unlock is defined at vmlock.c:17:6
func X__vm_unlock(tls TLS) {
	if x4a_fetch_add(tls, xvmlock, int32(-1)) != int32(1) || *(*int32)(unsafe.Pointer(xvmlock + 4)) == 0 {
		goto _1
	}

	x14__wake(tls, xvmlock, int32(-1), int32(1))
_1:
}

type t1170__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t1170__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// xvmlock [2]int32, escapes: true, vmlock.c:3:21
var xvmlock = bss + 9168

// xa_inc is defined at atomic_arch.h:80:20
func x12a_inc(tls TLS, _p uintptr /* *int32 */) {
	a_inc(_p)
}

// xa_fetch_add is defined at atomic_arch.h:34:19
func x4a_fetch_add(tls TLS, _p uintptr /* *int32 */, _v int32) (r int32) {
	return a_fetch_add(_p, _v)
	return r
}

// x__wake is defined at pthread_impl.h:154:20
func x14__wake(tls TLS, _addr uintptr /* *void */, _cnt int32, _priv int32) {
	if _priv == 0 {
		goto _1
	}

	_priv = int32(128)
_1:
	if _cnt >= int32(0) {
		goto _2
	}

	_cnt = int32(0x7fffffff)
_2:
	if x67__syscall3(tls, int64(202), int64(_addr), int64(int32(1)|_priv), int64(_cnt)) == int64(-38) {
		x67__syscall3(tls, int64(202), int64(_addr), int64(1), int64(_cnt))
	}
}

// x__syscall3 is defined at syscall_arch.h:33:22
func x67__syscall3(tls TLS, _n int64, _a1 int64, _a2 int64, _a3 int64) (r int64) {
	return X__syscall(tls, _n, _a1, _a2, _a3, int64(0), int64(0), int64(0))
}

// linking __asctime.o

// X__asctime is defined at __asctime.c:9:6
func X__asctime(tls TLS, _tm uintptr /* *Stm */, _buf uintptr /* *int8 */) (r uintptr /* *int8 */) {
	if Xsnprintf(tls, _buf, uint64(26), ts+7664 /* "%.3s %.3s%3d %.2..." */, X__nl_langinfo_l(tls, int32(0x20000)+*(*int32)(unsafe.Pointer(_tm + 24)), X__c_locale), X__nl_langinfo_l(tls, int32(0x2000e)+*(*int32)(unsafe.Pointer(_tm + 16)), X__c_locale), *(*int32)(unsafe.Pointer(_tm + 12)), *(*int32)(unsafe.Pointer(_tm + 8)), *(*int32)(unsafe.Pointer(_tm + 4)), *(*int32)(unsafe.Pointer(_tm)), int32(1900)+*(*int32)(unsafe.Pointer(_tm + 20))) < int32(26) {
		goto _1
	}

	x4a_crash(tls)
_1:
	return _buf
}

type t1171__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t1171__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type s1tm = struct {
	Ftm_sec    int32
	Ftm_min    int32
	Ftm_hour   int32
	Ftm_mday   int32
	Ftm_mon    int32
	Ftm_year   int32
	Ftm_wday   int32
	Ftm_yday   int32
	Ftm_isdst  int32
	Ftm_gmtoff int64
	Ftm_zone   uintptr // *int8
}

// xa_crash is defined at atomic_arch.h:121:20
func x4a_crash(tls TLS) {
	panic(`hlt`)
}

type t389size_t = uint64

type t1nl_item = int32

// linking __map_file.o

// X__map_file is defined at __map_file.c:9:21
func X__map_file(tls TLS, _pathname uintptr /* *int8 */, _size uintptr /* *Tsize_t = uint64 */) (r uintptr /* *uint8 */) {
	esc := MustMalloc(144)
	var (
		_st  = esc   // *Sstat
		_map uintptr // *uint8
		_fd  int32
	)
	defer Free(esc)
	_map = uintptr(18446744073709551615)
	_fd = int32(x55__syscall2(tls, int64(2), int64(_pathname), int64(526336)))
	if _fd >= int32(0) {
		goto _1
	}

	return null

_1:
	if x55__syscall2(tls, int64(5), int64(_fd), int64(_st)) != 0 {
		goto _2
	}

	_map = X__mmap(tls, null, uint64(*(*int64)(unsafe.Pointer(_st + 48))), int32(1), int32(0x1), _fd, int64(0))
	*(*uint64)(unsafe.Pointer(_size)) = uint64(*(*int64)(unsafe.Pointer(_st + 48)))
_2:
	x41__syscall1(tls, int64(3), int64(_fd))
	if _map == uintptr(18446744073709551615) {
		return null
	}

	return _map
}

type t1172__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t1172__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type s16stat = struct {
	Fst_dev     uint64
	Fst_ino     uint64
	Fst_nlink   uint64
	Fst_mode    uint32
	Fst_uid     uint32
	Fst_gid     uint32
	F__pad0     uint32
	Fst_rdev    uint64
	Fst_size    int64
	Fst_blksize int64
	Fst_blocks  int64
	Fst_atim    s51timespec
	Fst_mtim    s51timespec
	Fst_ctim    s51timespec
	F__unused   [3]int64
}

// x__syscall2 is defined at syscall_arch.h:24:22
func x55__syscall2(tls TLS, _n int64, _a1 int64, _a2 int64) (r int64) {
	return X__syscall(tls, _n, _a1, _a2, int64(0), int64(0), int64(0), int64(0))
}

type t127off_t = int64

type t390size_t = uint64

// x__syscall1 is defined at syscall_arch.h:16:22
func x41__syscall1(tls TLS, _n int64, _a1 int64) (r int64) {
	return X__syscall(tls, _n, _a1, int64(0), int64(0), int64(0), int64(0), int64(0))
}

type t20dev_t = uint64

type t22ino_t = uint64

type t16nlink_t = uint64

type t40mode_t = uint32

type t34uid_t = uint32

type t35gid_t = uint32

type t16blksize_t = int64

type t16blkcnt_t = int64

type s51timespec = struct {
	Ftv_sec  int64
	Ftv_nsec int64
}

type t67time_t = int64

// linking __month_to_secs.o

// X__month_to_secs is defined at __month_to_secs.c:1:5
func X__month_to_secs(tls TLS, _month int32, _is_leap int32) (r int32) {
	var _t int32

	_t = *(*int32)(unsafe.Pointer(x1070secs_through_month + 4*uintptr(_month)))
	if _is_leap == 0 || _month < int32(2) {
		goto _1
	}

	_t = _t + int32(86400)
_1:
	return _t
}

type t1173__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t1173__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// x1secs_through_month [12]int32, escapes: true, __month_to_secs.c:3:19
var x1070secs_through_month = ds + 46784

// linking __secs_to_tm.o

// X__secs_to_tm is defined at __secs_to_tm.c:11:5
func X__secs_to_tm(tls TLS, _t int64, _tm uintptr /* *Stm */) (r int32) {
	var (
		_days      int64
		_secs      int64
		_years     int64
		_remdays   int32
		_remsecs   int32
		_remyears  int32
		_qc_cycles int32
		_c_cycles  int32
		_q_cycles  int32
		_months    int32
		_wday      int32
		_yday      int32
		_leap      int32
	)
	if _t >= int64(-67908586910515200) && _t <= int64(67908586878892800) {
		goto _1
	}

	return int32(-1)

_1:
	_secs = _t - int64(951868800)
	_days = _secs / int64(86400)
	_remsecs = int32(_secs % int64(86400))
	if _remsecs >= int32(0) {
		goto _2
	}

	_remsecs = _remsecs + int32(86400)
	_days--
_2:
	_wday = int32((int64(3) + _days) % int64(7))
	if _wday >= int32(0) {
		goto _3
	}

	_wday = _wday + int32(7)
_3:
	_qc_cycles = int32(_days / int64(146097))
	_remdays = int32(_days % int64(146097))
	if _remdays >= int32(0) {
		goto _4
	}

	_remdays = _remdays + int32(146097)
	_qc_cycles--
_4:
	_c_cycles = _remdays / int32(36524)
	if _c_cycles != int32(4) {
		goto _5
	}

	_c_cycles--
_5:
	_remdays = _remdays - _c_cycles*int32(36524)
	_q_cycles = _remdays / int32(1461)
	if _q_cycles != int32(25) {
		goto _6
	}

	_q_cycles--
_6:
	_remdays = _remdays - _q_cycles*int32(1461)
	_remyears = _remdays / int32(365)
	if _remyears != int32(4) {
		goto _7
	}

	_remyears--
_7:
	_remdays = _remdays - _remyears*int32(365)
	_leap = bool2int((_remyears == 0) && ((_q_cycles != 0) || (_c_cycles == 0)))
	_yday = _remdays + int32(31) + int32(28) + _leap
	if _yday < int32(365)+_leap {
		goto _8
	}

	_yday = _yday - (int32(365) + _leap)
_8:
	_years = int64(_remyears+int32(4)*_q_cycles+int32(100)*_c_cycles) + int64(400)*int64(_qc_cycles)
	_months = int32(0)
_9:
	if int32(*(*int8)(unsafe.Pointer(x1071days_in_month + uintptr(_months)))) > _remdays {
		goto _11
	}

	_remdays = _remdays - int32(*(*int8)(unsafe.Pointer(x1071days_in_month + uintptr(_months))))
	_months++
	goto _9

_11:
	if _months < int32(10) {
		goto _12
	}

	_months = _months - int32(12)
	_years++
_12:
	if _years+int64(100) <= int64(0x7fffffff) && _years+int64(100) >= int64(-2147483648) {
		goto _13
	}

	return int32(-1)

_13:
	*(*int32)(unsafe.Pointer(_tm + 20)) = int32(_years + int64(100))
	*(*int32)(unsafe.Pointer(_tm + 16)) = _months + int32(2)
	*(*int32)(unsafe.Pointer(_tm + 12)) = _remdays + int32(1)
	*(*int32)(unsafe.Pointer(_tm + 24)) = _wday
	*(*int32)(unsafe.Pointer(_tm + 28)) = _yday
	*(*int32)(unsafe.Pointer(_tm + 8)) = _remsecs / int32(3600)
	*(*int32)(unsafe.Pointer(_tm + 4)) = _remsecs / int32(60) % int32(60)
	*(*int32)(unsafe.Pointer(_tm)) = _remsecs % int32(60)
	return int32(0)
}

type t1174__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t1174__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type s2tm = struct {
	Ftm_sec    int32
	Ftm_min    int32
	Ftm_hour   int32
	Ftm_mday   int32
	Ftm_mon    int32
	Ftm_year   int32
	Ftm_wday   int32
	Ftm_yday   int32
	Ftm_isdst  int32
	Ftm_gmtoff int64
	Ftm_zone   uintptr // *int8
}

// x1days_in_month [12]int8, escapes: true, __secs_to_tm.c:18:20
var x1071days_in_month = ds + 46832

// linking __tm_to_secs.o

// X__tm_to_secs is defined at __tm_to_secs.c:3:11
func X__tm_to_secs(tls TLS, _tm uintptr /* *Stm */) (r int64) {
	esc := MustMalloc(4)
	var (
		_is_leap = esc // *int32
		_year    int64
		_month   int32
		_adj     int32
		_t       int64
	)
	defer Free(esc)
	_year = int64(*(*int32)(unsafe.Pointer(_tm + 20)))
	_month = *(*int32)(unsafe.Pointer(_tm + 16))
	if _month < int32(12) && _month >= int32(0) {
		goto _1
	}

	_adj = _month / int32(12)
	_month = _month % int32(12)
	if _month >= int32(0) {
		goto _2
	}

	_adj--
	_month = _month + int32(12)
_2:
	_year = _year + int64(_adj)
_1:
	_t = X__year_to_secs(tls, _year, _is_leap)
	_t = _t + int64(X__month_to_secs(tls, _month, *(*int32)(unsafe.Pointer(_is_leap))))
	_t = _t + int64(86400)*int64(*(*int32)(unsafe.Pointer(_tm + 12))-int32(1))
	_t = _t + int64(3600)*int64(*(*int32)(unsafe.Pointer(_tm + 8)))
	_t = _t + int64(60)*int64(*(*int32)(unsafe.Pointer(_tm + 4)))
	_t = _t + int64(*(*int32)(unsafe.Pointer(_tm)))
	return _t
}

type t1175__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t1175__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type s3tm = struct {
	Ftm_sec    int32
	Ftm_min    int32
	Ftm_hour   int32
	Ftm_mday   int32
	Ftm_mon    int32
	Ftm_year   int32
	Ftm_wday   int32
	Ftm_yday   int32
	Ftm_isdst  int32
	Ftm_gmtoff int64
	Ftm_zone   uintptr // *int8
}

// linking __tz.o

// X__timezone int64, escapes: true, __tz.c:9:7
var X__timezone = bss + 9176

// X__daylight int32, escapes: true, __tz.c:10:7
var X__daylight = bss + 9184

// X__tzname [2]*int8, escapes: true, __tz.c:11:6
var X__tzname = bss + 9192

// X__utc [4]int8, escapes: true, __tz.c:19:12
var X__utc = ds + 46848

// X__secs_to_zone is defined at __tz.c:351:6
func X__secs_to_zone(tls TLS, _t int64, _local int32, _isdst uintptr /* *int32 */, _offset uintptr /* *int64 */, _oppoff uintptr /* *int64 */, _zonename uintptr /* **int8 */) {
	esc := MustMalloc(8)
	var (
		_alt = esc // *Tsize_t = uint64
		_i   uint64
		_y   int64
		_t0  int64
		_t1  int64
	)
	defer Free(esc)
	X__lock(tls, x9lock)
	xdo_tzset(tls)
	if xzi == 0 {
		goto _1
	}

	_i = xscan_trans(tls, _t, _local, _alt)
	if _i == uint64(18446744073709551615) {
		goto _2
	}

	*(*int32)(unsafe.Pointer(_isdst)) = int32(*(*uint8)(unsafe.Pointer(xtypes + uintptr(uint64(6)*_i+uint64(4)))))
	*(*int64)(unsafe.Pointer(_offset)) = int64(int32(xzi_read32(tls, xtypes+uintptr(uint64(6)*_i))))
	*(*uintptr)(unsafe.Pointer(_zonename)) = xabbrevs + uintptr(*(*uint8)(unsafe.Pointer(xtypes + uintptr(uint64(6)*_i+uint64(5)))))
	if _oppoff == 0 {
		goto _3
	}

	*(*int64)(unsafe.Pointer(_oppoff)) = int64(int32(xzi_read32(tls, xtypes+uintptr(uint64(6)**(*uint64)(unsafe.Pointer(_alt))))))
_3:
	X__unlock(tls, x9lock)
	return

_2:
_1:
	if *(*int32)(unsafe.Pointer(X__daylight)) != 0 {
		goto _4
	}

	goto lstd

_4:
	_y = _t/int64(31556952) + int64(70)
_5:
	if X__year_to_secs(tls, _y, null) <= _t {
		goto _6
	}

	_y--
	goto _5

_6:
_7:
	if X__year_to_secs(tls, _y+int64(1), null) >= _t {
		goto _8
	}

	_y++
	goto _7

_8:
	_t0 = xrule_to_secs(tls, xr0, int32(_y))
	_t1 = xrule_to_secs(tls, x2r1, int32(_y))
	if _local != 0 {
		goto _9
	}

	_t0 = _t0 + *(*int64)(unsafe.Pointer(X__timezone))
	_t1 = _t1 + int64(xdst_off)
_9:
	if _t0 >= _t1 {
		goto _10
	}

	if _t < _t0 || _t >= _t1 {
		goto _12
	}

	goto ldst

_12:
	goto lstd

	goto _11

_10:
	if _t < _t1 || _t >= _t0 {
		goto _13
	}

	goto lstd

_13:
	goto ldst

_11:
	goto lstd
lstd:
	*(*int32)(unsafe.Pointer(_isdst)) = int32(0)
	*(*int64)(unsafe.Pointer(_offset)) = -*(*int64)(unsafe.Pointer(X__timezone))
	if _oppoff == 0 {
		goto _14
	}

	*(*int64)(unsafe.Pointer(_oppoff)) = int64(-xdst_off)
_14:
	*(*uintptr)(unsafe.Pointer(_zonename)) = *(*uintptr)(unsafe.Pointer(X__tzname))
	X__unlock(tls, x9lock)
	return

	goto ldst
ldst:
	*(*int32)(unsafe.Pointer(_isdst)) = int32(1)
	*(*int64)(unsafe.Pointer(_offset)) = int64(-xdst_off)
	if _oppoff == 0 {
		goto _15
	}

	*(*int64)(unsafe.Pointer(_oppoff)) = -*(*int64)(unsafe.Pointer(X__timezone))
_15:
	*(*uintptr)(unsafe.Pointer(_zonename)) = *(*uintptr)(unsafe.Pointer(X__tzname + 8))
	X__unlock(tls, x9lock)
}

// X__tzset is defined at __tz.c:406:6
func X__tzset(tls TLS) {
	X__lock(tls, x9lock)
	xdo_tzset(tls)
	X__unlock(tls, x9lock)
}

// X__tm_to_tzname is defined at __tz.c:415:12
func X__tm_to_tzname(tls TLS, _tm uintptr /* *Stm */) (r uintptr /* *int8 */) {
	var _p uintptr // *void

	_p = *(*uintptr)(unsafe.Pointer(_tm + 48))
	X__lock(tls, x9lock)
	xdo_tzset(tls)
	if _p == X__utc || _p == *(*uintptr)(unsafe.Pointer(X__tzname)) || _p == *(*uintptr)(unsafe.Pointer(X__tzname + 8)) || xzi != 0 && uint64(_p)-uint64(xabbrevs) < uint64(int64(xabbrevs_end-xabbrevs)) {
		goto _1
	}

	_p = ts + 112 /* "" */
_1:
	X__unlock(tls, x9lock)
	return _p
}

type t1176__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t1176__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t391size_t = uint64

// xlock [1]int32, escapes: true, __tz.c:31:21
var x9lock = bss + 9208

func set1072(p *uintptr, v uintptr) uintptr { *p = v; return v }

func set1073(p *int64, v int64) int64 { *p = v; return v }

func set1074(p *int32, v int32) int32 { *p = v; return v }

// xdo_tzset is defined at __tz.c:119:13
func xdo_tzset(tls TLS) {
	esc := MustMalloc(310)
	var (
		_buf      = esc       // *[280]int8
		_pathname uintptr     // *int8
		_try      uintptr     // *int8
		_s        = esc + 288 // **int8
		_p        uintptr     // *int8
		_map      uintptr     // *uint8
		_i        uint64
		_l        uint64
		_scale    int32
		_literal  = esc + 304 // *[6]uint8
		_skip     uint64
		_1p       uintptr // *uint8
	)
	defer Free(esc)
	_pathname = _buf + uintptr(24)
	_map = 0
	*(*uintptr)(unsafe.Pointer(_s)) = Xgetenv(tls, ts+7696 /* "TZ" */)
	if *(*uintptr)(unsafe.Pointer(_s)) != 0 {
		goto _1
	}

	*(*uintptr)(unsafe.Pointer(_s)) = ts + 7700 /* "/etc/localtime" */
_1:
	if *(*int8)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_s)))) != 0 {
		goto _2
	}

	*(*uintptr)(unsafe.Pointer(_s)) = X__utc
_2:
	if xold_tz == 0 || Xstrcmp(tls, *(*uintptr)(unsafe.Pointer(_s)), xold_tz) != 0 {
		goto _3
	}

	return

_3:
	if xzi == 0 {
		goto _4
	}

	X__munmap(tls, xzi, *(*uint64)(unsafe.Pointer(xmap_size)))
_4:
	_i = Xstrlen(tls, *(*uintptr)(unsafe.Pointer(_s)))
	if _i <= uint64(4097) {
		goto _5
	}

	*(*uintptr)(unsafe.Pointer(_s)) = X__utc
	_i = uint64(3)
_5:
	if _i < xold_tz_size {
		goto _6
	}

	xold_tz_size = xold_tz_size * uint64(2)
	if _i < xold_tz_size {
		goto _7
	}

	xold_tz_size = _i + uint64(1)
_7:
	if xold_tz_size <= uint64(4098) {
		goto _8
	}

	xold_tz_size = uint64(4098)
_8:
	xold_tz = Xmalloc(tls, xold_tz_size)
_6:
	if xold_tz == 0 {
		goto _9
	}

	Xmemcpy(tls, xold_tz, *(*uintptr)(unsafe.Pointer(_s)), _i+uint64(1))
_9:
	if int32(*(*int8)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_s))))) != int32(':') && (set1072(&_p, Xstrchr(tls, *(*uintptr)(unsafe.Pointer(_s)), int32('/'))) == 0 || Xmemchr(tls, *(*uintptr)(unsafe.Pointer(_s)), int32(','), uint64(int64(_p-*(*uintptr)(unsafe.Pointer(_s))))) != 0) {
		goto _10
	}

	if int32(*(*int8)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_s))))) != int32(':') {
		goto _11
	}

	*(*uintptr)(unsafe.Pointer(_s))++
_11:
	if int32(*(*int8)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_s))))) != int32('/') && int32(*(*int8)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_s))))) != int32('.') {
		goto _12
	}

	if *(*int32)(unsafe.Pointer(X__libc + 8)) != 0 && Xstrcmp(tls, *(*uintptr)(unsafe.Pointer(_s)), ts+7700 /* "/etc/localtime" */) != 0 {
		goto _14
	}

	_map = X__map_file(tls, *(*uintptr)(unsafe.Pointer(_s)), xmap_size)
_14:
	goto _13

_12:
	_l = Xstrlen(tls, *(*uintptr)(unsafe.Pointer(_s)))
	if _l > uint64(255) || Xstrchr(tls, *(*uintptr)(unsafe.Pointer(_s)), int32('.')) != 0 {
		goto _15
	}

	Xmemcpy(tls, _pathname, *(*uintptr)(unsafe.Pointer(_s)), _l+uint64(1))
	*(*int8)(unsafe.Pointer(_pathname + uintptr(_l))) = int8(0)
	_try = x1075search
_16:
	if _map != 0 || *(*int8)(unsafe.Pointer(_try)) == 0 {
		goto _18
	}

	_l = Xstrlen(tls, _try)
	Xmemcpy(tls, _pathname-uintptr(_l), _try, _l)
	_map = X__map_file(tls, _pathname-uintptr(_l), xmap_size)
	_try += uintptr(_l + uint64(1))
	goto _16

_18:
_15:
_13:
	if _map != 0 {
		goto _19
	}

	*(*uintptr)(unsafe.Pointer(_s)) = X__utc
_19:
_10:
	if _map == 0 || *(*uint64)(unsafe.Pointer(xmap_size)) >= uint64(44) && Xmemcmp(tls, _map, ts+7716 /* "TZif" */, uint64(4)) == 0 {
		goto _20
	}

	X__munmap(tls, _map, *(*uint64)(unsafe.Pointer(xmap_size)))
	_map = null
	*(*uintptr)(unsafe.Pointer(_s)) = X__utc
_20:
	xzi = _map
	if _map == 0 {
		goto _21
	}

	_scale = int32(2)
	if int32(*(*uint8)(unsafe.Pointer(_map + 4))) != int32('2') {
		goto _22
	}

	Copy(_literal, ts+7724 /* "\x01\x01\b\x05\x06\x01" */, 6)
	_skip = xzi_dotprod(tls, xzi+uintptr(20), _literal, uint64(6))
	xtrans = ((xzi + uintptr(_skip)) + uintptr(44)) + uintptr(44)
	_scale++
	goto _23

_22:
	xtrans = xzi + uintptr(44)
_23:
	xsindex = xtrans + uintptr(xzi_read32(tls, xtrans-uintptr(12))<<(uint(_scale)%32))
	xtypes = xsindex + uintptr(xzi_read32(tls, xtrans-uintptr(12)))
	xabbrevs = xtypes + uintptr(uint32(6)*xzi_read32(tls, xtrans-uintptr(8)))
	xabbrevs_end = xabbrevs + uintptr(xzi_read32(tls, xtrans-uintptr(4)))
	if int32(*(*uint8)(unsafe.Pointer(xzi + uintptr(*(*uint64)(unsafe.Pointer(xmap_size))-uint64(1))))) != int32('\n') {
		goto _24
	}

	*(*uintptr)(unsafe.Pointer(_s)) = (xzi + uintptr(*(*uint64)(unsafe.Pointer(xmap_size)))) - uintptr(2)
_26:
	if int32(*(*int8)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_s))))) == int32('\n') {
		goto _28
	}

	*(*uintptr)(unsafe.Pointer(_s))--
	goto _26

_28:
	*(*uintptr)(unsafe.Pointer(_s))++
	goto _25

_24:
	*(*uintptr)(unsafe.Pointer(X__tzname)) = set1072((*uintptr)(unsafe.Pointer(X__tzname+8)), null)
	*(*int32)(unsafe.Pointer(X__daylight)) = int32(set1073((*int64)(unsafe.Pointer(X__timezone)), int64(set1074(&xdst_off, int32(0)))))
	_i = uint64(0)
_29:
	if _i >= uint64(5) {
		goto _31
	}

	*(*int32)(unsafe.Pointer(xr0 + 4*uintptr(_i))) = set1074((*int32)(unsafe.Pointer(x2r1+4*uintptr(_i))), int32(0))
	_i++
	goto _29

_31:
	_1p = xtypes
_32:
	if _1p >= xabbrevs {
		goto _34
	}

	if *(*uint8)(unsafe.Pointer(_1p + 4)) != 0 || *(*uintptr)(unsafe.Pointer(X__tzname)) != 0 {
		goto _35
	}

	*(*uintptr)(unsafe.Pointer(X__tzname)) = xabbrevs + uintptr(*(*uint8)(unsafe.Pointer(_1p + 5)))
	*(*int64)(unsafe.Pointer(X__timezone)) = int64(-xzi_read32(tls, _1p))
_35:
	if *(*uint8)(unsafe.Pointer(_1p + 4)) == 0 || *(*uintptr)(unsafe.Pointer(X__tzname + 8)) != 0 {
		goto _36
	}

	*(*uintptr)(unsafe.Pointer(X__tzname + 8)) = xabbrevs + uintptr(*(*uint8)(unsafe.Pointer(_1p + 5)))
	xdst_off = int32(-xzi_read32(tls, _1p))
	*(*int32)(unsafe.Pointer(X__daylight)) = int32(1)
_36:
	_1p += uintptr(6)
	goto _32

_34:
	if *(*uintptr)(unsafe.Pointer(X__tzname)) != 0 {
		goto _37
	}

	*(*uintptr)(unsafe.Pointer(X__tzname)) = *(*uintptr)(unsafe.Pointer(X__tzname + 8))
_37:
	if *(*uintptr)(unsafe.Pointer(X__tzname)) != 0 {
		goto _38
	}

	*(*uintptr)(unsafe.Pointer(X__tzname)) = X__utc
_38:
	if *(*int32)(unsafe.Pointer(X__daylight)) != 0 {
		goto _39
	}

	*(*uintptr)(unsafe.Pointer(X__tzname + 8)) = *(*uintptr)(unsafe.Pointer(X__tzname))
	xdst_off = int32(*(*int64)(unsafe.Pointer(X__timezone)))
_39:
	return

_25:
_21:
	if *(*uintptr)(unsafe.Pointer(_s)) != 0 {
		goto _40
	}

	*(*uintptr)(unsafe.Pointer(_s)) = X__utc
_40:
	xgetname(tls, xstd_name, _s)
	*(*uintptr)(unsafe.Pointer(X__tzname)) = xstd_name
	*(*int64)(unsafe.Pointer(X__timezone)) = int64(xgetoff(tls, _s))
	xgetname(tls, xdst_name, _s)
	*(*uintptr)(unsafe.Pointer(X__tzname + 8)) = xdst_name
	if *(*int8)(unsafe.Pointer(xdst_name)) == 0 {
		goto _41
	}

	*(*int32)(unsafe.Pointer(X__daylight)) = int32(1)
	if int32(*(*int8)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_s))))) != int32('+') && int32(*(*int8)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_s))))) != int32('-') && uint32(int32(*(*int8)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_s)))))-int32('0')) >= uint32(10) {
		goto _43
	}

	xdst_off = xgetoff(tls, _s)
	goto _44

_43:
	xdst_off = int32(*(*int64)(unsafe.Pointer(X__timezone)) - int64(3600))
_44:
	goto _42

_41:
	*(*int32)(unsafe.Pointer(X__daylight)) = int32(0)
	xdst_off = int32(0)
_42:
	if int32(*(*int8)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_s))))) != int32(',') {
		goto _45
	}

	*(*uintptr)(unsafe.Pointer(_s))++
	xgetrule(tls, _s, xr0)
_45:
	if int32(*(*int8)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_s))))) != int32(',') {
		goto _46
	}

	*(*uintptr)(unsafe.Pointer(_s))++
	xgetrule(tls, _s, x2r1)
_46:
}

// xzi *uint8, escapes: false, __tz.c:24:28
var xzi uintptr

// xscan_trans is defined at __tz.c:247:15
func xscan_trans(tls TLS, _t int64, _local int32, _alt uintptr /* *Tsize_t = uint64 */) (r uint64) {
	var (
		_scale int32
		_x     uint64
		_off   int32
		_a     uint64
		_n     uint64
		_m     uint64
	)
	_scale = int32(3) - bool2int(xtrans == (xzi+uintptr(44)))
	_off = int32(0)
	_a = uint64(0)
	_n = uint64(int64(xsindex-xtrans) >> (uint(_scale) % 64))
	if _n != 0 {
		goto _1
	}

	if _alt == 0 {
		goto _2
	}

	*(*uint64)(unsafe.Pointer(_alt)) = uint64(0)
_2:
	return uint64(0)

_1:
_3:
	if _n <= uint64(1) {
		goto _4
	}

	_m = _a + _n/uint64(2)
	_x = uint64(xzi_read32(tls, xtrans+uintptr(_m<<(uint(_scale)%64))))
	if _scale != int32(3) {
		goto _5
	}

	_x = _x<<(uint(32)%64) | uint64(xzi_read32(tls, (xtrans+uintptr(_m<<(uint(_scale)%64)))+uintptr(4)))
	goto _6

_5:
	_x = uint64(int32(_x))
_6:
	if _local == 0 {
		goto _7
	}

	_off = int32(xzi_read32(tls, xtypes+uintptr(int32(6)*int32(*(*uint8)(unsafe.Pointer(xsindex + uintptr(_m-uint64(1))))))))
_7:
	if _t-int64(_off) >= int64(_x) {
		goto _8
	}

	_n = _n / uint64(2)
	goto _9

_8:
	_a = _m
	_n = _n - _n/uint64(2)
_9:
	goto _3

_4:
	_n = uint64(int64(xsindex-xtrans) >> (uint(_scale) % 64))
	if _a != _n-uint64(1) {
		goto _10
	}

	return uint64(18446744073709551615)

_10:
	if _a != uint64(0) {
		goto _11
	}

	_x = uint64(xzi_read32(tls, xtrans+uintptr(_a<<(uint(_scale)%64))))
	if _scale != int32(3) {
		goto _12
	}

	_x = _x<<(uint(32)%64) | uint64(xzi_read32(tls, (xtrans+uintptr(_a<<(uint(_scale)%64)))+uintptr(4)))
	goto _13

_12:
	_x = uint64(int32(_x))
_13:
	if _local == 0 {
		goto _14
	}

	_off = int32(xzi_read32(tls, xtypes+uintptr(int32(6)*int32(*(*uint8)(unsafe.Pointer(xsindex + uintptr(_a-uint64(1))))))))
_14:
	if _t-int64(_off) >= int64(_x) {
		goto _15
	}

	_a = uint64(0)
_16:
	if _a >= uint64(int64(xabbrevs-xtypes)/int64(6)) {
		goto _18
	}

	if int32(*(*uint8)(unsafe.Pointer(xtypes + uintptr(uint64(6)*_a+uint64(4))))) == int32(*(*uint8)(unsafe.Pointer(xtypes + 4))) {
		goto _19
	}

	goto _18

_19:
	_a++
	goto _16

_18:
	if _a != uint64(int64(xabbrevs-xtypes)/int64(6)) {
		goto _20
	}

	_a = uint64(0)
_20:
	if *(*uint8)(unsafe.Pointer(xtypes + uintptr(uint64(6)*_a+uint64(4)))) == 0 {
		goto _21
	}

	*(*uint64)(unsafe.Pointer(_alt)) = _a
	return uint64(0)

	goto _22

_21:
	*(*uint64)(unsafe.Pointer(_alt)) = uint64(0)
	return _a

_22:
_15:
_11:
	if _alt == 0 {
		goto _23
	}

	if _a == 0 || int32(*(*uint8)(unsafe.Pointer(xtypes + uintptr(int32(6)*int32(*(*uint8)(unsafe.Pointer(xsindex + uintptr(_a-uint64(1)))))+int32(4))))) == int32(*(*uint8)(unsafe.Pointer(xtypes + uintptr(int32(6)*int32(*(*uint8)(unsafe.Pointer(xsindex + uintptr(_a))))+int32(4))))) {
		goto _24
	}

	*(*uint64)(unsafe.Pointer(_alt)) = uint64(*(*uint8)(unsafe.Pointer(xsindex + uintptr(_a-uint64(1)))))
	goto _25

_24:
	if _a+uint64(1) >= _n || int32(*(*uint8)(unsafe.Pointer(xtypes + uintptr(int32(6)*int32(*(*uint8)(unsafe.Pointer(xsindex + uintptr(_a+uint64(1)))))+int32(4))))) == int32(*(*uint8)(unsafe.Pointer(xtypes + uintptr(int32(6)*int32(*(*uint8)(unsafe.Pointer(xsindex + uintptr(_a))))+int32(4))))) {
		goto _26
	}

	*(*uint64)(unsafe.Pointer(_alt)) = uint64(*(*uint8)(unsafe.Pointer(xsindex + uintptr(_a+uint64(1)))))
	goto _27

_26:
	*(*uint64)(unsafe.Pointer(_alt)) = uint64(*(*uint8)(unsafe.Pointer(xsindex + uintptr(_a))))
_27:
_25:
_23:
	return uint64(*(*uint8)(unsafe.Pointer(xsindex + uintptr(_a))))
}

// xtypes *uint8, escapes: false, __tz.c:24:50
var xtypes uintptr

type t23int32_t = int32

// xzi_read32 is defined at __tz.c:101:17
func xzi_read32(tls TLS, _z uintptr /* *uint8 */) (r uint32) {
	return uint32(*(*uint8)(unsafe.Pointer(_z)))<<(uint(24)%32) | uint32(int32(*(*uint8)(unsafe.Pointer(_z + 1)))<<(uint(16)%32)) | uint32(int32(*(*uint8)(unsafe.Pointer(_z + 2)))<<(uint(8)%32)) | uint32(*(*uint8)(unsafe.Pointer(_z + 3)))
}

// xabbrevs *uint8, escapes: false, __tz.c:24:58
var xabbrevs uintptr

// xrule_to_secs is defined at __tz.c:320:18
func xrule_to_secs(tls TLS, _rule uintptr /* *int32 */, _year int32) (r int64) {
	esc := MustMalloc(4)
	var (
		_is_leap = esc // *int32
		_t       int64
		_x       int32
		_m       int32
		_n       int32
		_d       int32
		_wday    int32
		_days    int32
	)
	defer Free(esc)
	_t = X__year_to_secs(tls, int64(_year), _is_leap)
	if *(*int32)(unsafe.Pointer(_rule)) == int32('M') {
		goto _1
	}

	_x = *(*int32)(unsafe.Pointer(_rule + 4))
	if *(*int32)(unsafe.Pointer(_rule)) != int32('J') || _x >= int32(60) && *(*int32)(unsafe.Pointer(_is_leap)) != 0 {
		goto _3
	}

	_x--
_3:
	_t = _t + int64(int32(86400)*_x)
	goto _2

_1:
	_m = *(*int32)(unsafe.Pointer(_rule + 4))
	_n = *(*int32)(unsafe.Pointer(_rule + 8))
	_d = *(*int32)(unsafe.Pointer(_rule + 12))
	_t = _t + int64(X__month_to_secs(tls, _m-int32(1), *(*int32)(unsafe.Pointer(_is_leap))))
	_wday = int32((_t+int64(345600))%int64(604800)) / int32(86400)
	_days = _d - _wday
	if _days >= int32(0) {
		goto _4
	}

	_days = _days + int32(7)
_4:
	if _n != int32(5) || _days+int32(28) < xdays_in_month(tls, _m, *(*int32)(unsafe.Pointer(_is_leap))) {
		goto _5
	}

	_n = int32(4)
_5:
	_t = _t + int64(int32(86400)*(_days+int32(7)*(_n-int32(1))))
_2:
	_t = _t + int64(*(*int32)(unsafe.Pointer(_rule + 16)))
	return _t
}

// xr0 [5]int32, escapes: true, __tz.c:22:12
var xr0 = bss + 9216

// xr1 [5]int32, escapes: true, __tz.c:22:19
var x2r1 = bss + 9240

// xdst_off int32, escapes: false, __tz.c:21:12
var xdst_off int32

type s4tm = struct {
	Ftm_sec    int32
	Ftm_min    int32
	Ftm_hour   int32
	Ftm_mday   int32
	Ftm_mon    int32
	Ftm_year   int32
	Ftm_wday   int32
	Ftm_yday   int32
	Ftm_isdst  int32
	Ftm_gmtoff int64
	Ftm_zone   uintptr // *int8
}

type t83uintptr_t = uint64

// xabbrevs_end *uint8, escapes: false, __tz.c:24:68
var xabbrevs_end uintptr

// x13search [54]int8, escapes: true, __tz.c:125:20
var x1075search = ds + 46856

// xold_tz *int8, escapes: false, __tz.c:28:13
var xold_tz uintptr

func init() { xold_tz = xold_tz_buf }

// xmap_size Tsize_t = uint64, escapes: true, __tz.c:25:15
var xmap_size = bss + 9264

// xold_tz_size Tsize_t = uint64, escapes: false, __tz.c:29:15
var xold_tz_size = uint64(32)

// xzi_dotprod is defined at __tz.c:106:15
func xzi_dotprod(tls TLS, _z uintptr /* *uint8 */, _v uintptr /* *uint8 */, _n uint64) (r uint64) {
	var (
		_y uint64
		_x uint32
	)
	_y = uint64(0)
_1:
	if _n == 0 {
		goto _3
	}

	_x = xzi_read32(tls, _z)
	_y = _y + uint64(_x*uint32(*(*uint8)(unsafe.Pointer(_v))))
	_n--
	_z += uintptr(4)
	_v++
	goto _1

_3:
	return _y
}

// xtrans *uint8, escapes: false, __tz.c:24:33
var xtrans uintptr

// xsindex *uint8, escapes: false, __tz.c:24:41
var xsindex uintptr

type t132uint32_t = uint32

// xgetname is defined at __tz.c:83:13
func xgetname(tls TLS, _d uintptr /* *int8 */, _p uintptr /* **int8 */) {
	var _i int32

	if int32(**(**int8)(unsafe.Pointer(_p))) != int32('<') {
		goto _1
	}

	*(*uintptr)(unsafe.Pointer(_p))++
	_i = int32(0)
_3:
	if int32(*(*int8)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_p)) + uintptr(_i)))) == int32('>') || _i >= int32(6) {
		goto _5
	}

	*(*int8)(unsafe.Pointer(_d + uintptr(_i))) = *(*int8)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_p)) + uintptr(_i)))
	_i++
	goto _3

_5:
	*(*uintptr)(unsafe.Pointer(_p))++
	goto _2

_1:
	_i = int32(0)
_6:
	if uint32(int32(*(*int8)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_p)) + uintptr(_i))))|int32(32)-int32('a')) >= uint32(26) || _i >= int32(6) {
		goto _8
	}

	*(*int8)(unsafe.Pointer(_d + uintptr(_i))) = *(*int8)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_p)) + uintptr(_i)))
	_i++
	goto _6

_8:
_2:
	*(*uintptr)(unsafe.Pointer(_p)) += uintptr(_i)
	*(*int8)(unsafe.Pointer(_d + uintptr(_i))) = int8(0)
}

// xstd_name [7]int8, escapes: true, __tz.c:17:13
var xstd_name = bss + 9272

// xgetoff is defined at __tz.c:40:12
func xgetoff(tls TLS, _p uintptr /* **int8 */) (r int32) {
	var (
		_neg int32
		_off int32
	)
	_neg = int32(0)
	if int32(**(**int8)(unsafe.Pointer(_p))) != int32('-') {
		goto _1
	}

	*(*uintptr)(unsafe.Pointer(_p))++
	_neg = int32(1)
	goto _2

_1:
	if int32(**(**int8)(unsafe.Pointer(_p))) != int32('+') {
		goto _3
	}

	*(*uintptr)(unsafe.Pointer(_p))++
_3:
_2:
	_off = int32(3600) * x2getint(tls, _p)
	if int32(**(**int8)(unsafe.Pointer(_p))) != int32(':') {
		goto _4
	}

	*(*uintptr)(unsafe.Pointer(_p))++
	_off = _off + int32(60)*x2getint(tls, _p)
	if int32(**(**int8)(unsafe.Pointer(_p))) != int32(':') {
		goto _5
	}

	*(*uintptr)(unsafe.Pointer(_p))++
	_off = _off + x2getint(tls, _p)
_5:
_4:
	if _neg != 0 {
		return -_off
	}

	return _off
}

// xdst_name [7]int8, escapes: true, __tz.c:18:13
var xdst_name = bss + 9280

// xgetrule is defined at __tz.c:61:13
func xgetrule(tls TLS, _p uintptr /* **int8 */, _rule uintptr /* [5]int32 */) {
	var _r int32

	_r = set1074((*int32)(unsafe.Pointer(_rule)), int32(**(**int8)(unsafe.Pointer(_p))))
	if _r == int32('M') {
		goto _1
	}

	if _r != int32('J') {
		goto _3
	}

	*(*uintptr)(unsafe.Pointer(_p))++
	goto _4

_3:
	*(*int32)(unsafe.Pointer(_rule)) = int32(0)
_4:
	*(*int32)(unsafe.Pointer(_rule + 4)) = x2getint(tls, _p)
	goto _2

_1:
	*(*uintptr)(unsafe.Pointer(_p))++
	*(*int32)(unsafe.Pointer(_rule + 4)) = x2getint(tls, _p)
	*(*uintptr)(unsafe.Pointer(_p))++
	*(*int32)(unsafe.Pointer(_rule + 8)) = x2getint(tls, _p)
	*(*uintptr)(unsafe.Pointer(_p))++
	*(*int32)(unsafe.Pointer(_rule + 12)) = x2getint(tls, _p)
_2:
	if int32(**(**int8)(unsafe.Pointer(_p))) != int32('/') {
		goto _5
	}

	*(*uintptr)(unsafe.Pointer(_p))++
	*(*int32)(unsafe.Pointer(_rule + 16)) = xgetoff(tls, _p)
	goto _6

_5:
	*(*int32)(unsafe.Pointer(_rule + 16)) = int32(7200)
_6:
}

type t76uint64_t = uint64

type t1int64_t = int64

// xdays_in_month is defined at __tz.c:312:12
func xdays_in_month(tls TLS, _m int32, _is_leap int32) (r int32) {
	if _m != int32(2) {
		goto _1
	}

	return int32(28) + _is_leap

	goto _2

_1:
	return int32(30) + int32(0xad5)>>(uint(_m-int32(1))%32)&int32(1)

_2:
	return r
}

// xold_tz_buf [32]int8, escapes: true, __tz.c:27:13
var xold_tz_buf = bss + 9288

// xgetint is defined at __tz.c:33:12
func x2getint(tls TLS, _p uintptr /* **int8 */) (r int32) {
	var _x uint32

	_x = uint32(0)
_1:
	if uint32(int32(**(**int8)(unsafe.Pointer(_p)))-int32('0')) >= uint32(10) {
		goto _3
	}

	_x = uint32(int32(**(**int8)(unsafe.Pointer(_p)))-int32('0')) + uint32(10)*_x
	*(*uintptr)(unsafe.Pointer(_p))++
	goto _1

_3:
	return int32(_x)
}

// linking __year_to_secs.o

// X__year_to_secs is defined at __year_to_secs.c:3:11
func X__year_to_secs(tls TLS, _year int64, _is_leap uintptr /* *int32 */) (r int64) {
	var (
		_y         int32
		_leaps     int32
		_cycles    int32
		_centuries int32
		_1leaps    int32
		_rem       int32
	)
	if uint64(_year)-uint64(2) > uint64(136) {
		goto _1
	}

	_y = int32(_year)
	_leaps = (_y - int32(68)) >> (uint(2) % 32)
	if (_y-int32(68))&int32(3) != 0 {
		goto _2
	}

	_leaps--
	if _is_leap == 0 {
		goto _4
	}

	*(*int32)(unsafe.Pointer(_is_leap)) = int32(1)
_4:
	goto _3

_2:
	if _is_leap == 0 {
		goto _5
	}

	*(*int32)(unsafe.Pointer(_is_leap)) = int32(0)
_5:
_3:
	return int64(int32(31536000)*(_y-int32(70)) + int32(86400)*_leaps)

_1:
	X__assert_fail(tls, ts+0 /* "TODO(ccgo)" */, ts+7732 /* "src/time/__year_..." */, int32(17), x1076__func__)
	_cycles = int32((_year - int64(100)) / int64(400))
	_rem = int32((_year - int64(100)) % int64(400))
	if _rem >= int32(0) {
		goto _6
	}

	_cycles--
	_rem = _rem + int32(400)
_6:
	if _rem != 0 {
		goto _7
	}

	*(*int32)(unsafe.Pointer(_is_leap)) = int32(1)
	_centuries = int32(0)
	_1leaps = int32(0)
	goto _8

_7:
	if _rem < int32(200) {
		goto _9
	}

	if _rem < int32(300) {
		goto _11
	}

	_centuries = int32(3)
	_rem = _rem - int32(300)
	goto _12

_11:
	_centuries = int32(2)
	_rem = _rem - int32(200)
_12:
	goto _10

_9:
	if _rem < int32(100) {
		goto _13
	}

	_centuries = int32(1)
	_rem = _rem - int32(100)
	goto _14

_13:
	_centuries = int32(0)
_14:
_10:
	if _rem != 0 {
		goto _15
	}

	*(*int32)(unsafe.Pointer(_is_leap)) = int32(0)
	_1leaps = int32(0)
	goto _16

_15:
	_1leaps = int32(uint32(_rem) / uint32(4))
	_rem = int32(uint32(_rem) % uint32(4))
	*(*int32)(unsafe.Pointer(_is_leap)) = bool2int(_rem == 0)
_16:
_8:
	_1leaps = _1leaps + (int32(97)*_cycles + int32(24)*_centuries - *(*int32)(unsafe.Pointer(_is_leap)))
	return (_year-int64(100))*int64(31536000) + int64(_1leaps)*int64(86400) + int64(946684800) + int64(86400)
}

type t1177__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t1177__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// x1__func__ [15]int8, escapes: true, __year_to_secs.c:4:1
var x1076__func__ = ds + 46912

// linking asctime.o

// Xasctime is defined at asctime.c:5:6
func Xasctime(tls TLS, _tm uintptr /* *Stm */) (r uintptr /* *int8 */) {
	return X__asctime(tls, _tm, x1077buf)
}

type t1178__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t1178__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type s5tm = struct {
	Ftm_sec    int32
	Ftm_min    int32
	Ftm_hour   int32
	Ftm_mday   int32
	Ftm_mon    int32
	Ftm_year   int32
	Ftm_wday   int32
	Ftm_yday   int32
	Ftm_isdst  int32
	Ftm_gmtoff int64
	Ftm_zone   uintptr // *int8
}

// x1buf [26]int8, escapes: true, asctime.c:7:14
var x1077buf = bss + 9320

// linking asctime_r.o

// Xasctime_r is defined at asctime_r.c:5:6
func Xasctime_r(tls TLS, _tm uintptr /* *Stm */, _buf uintptr /* *int8 */) (r uintptr /* *int8 */) {
	return X__asctime(tls, _tm, _buf)
}

type t1179__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t1179__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type s6tm = struct {
	Ftm_sec    int32
	Ftm_min    int32
	Ftm_hour   int32
	Ftm_mday   int32
	Ftm_mon    int32
	Ftm_year   int32
	Ftm_wday   int32
	Ftm_yday   int32
	Ftm_isdst  int32
	Ftm_gmtoff int64
	Ftm_zone   uintptr // *int8
}

// linking clock.o

// Xclock is defined at clock.c:6:9
func Xclock(tls TLS) (r int64) {
	esc := MustMalloc(16)
	var _ts = esc // *Stimespec
	defer Free(esc)
	if X__clock_gettime(tls, int32(2), _ts) == 0 {
		goto _1
	}

	return int64(-1)

_1:
	if *(*int64)(unsafe.Pointer(_ts)) <= int64(9223372036854) && *(*int64)(unsafe.Pointer(_ts + 8))/int64(1000) <= int64(0x7fffffffffffffff)-int64(1000000)**(*int64)(unsafe.Pointer(_ts)) {
		goto _2
	}

	return int64(-1)

_2:
	return *(*int64)(unsafe.Pointer(_ts))*int64(1000000) + *(*int64)(unsafe.Pointer(_ts + 8))/int64(1000)
}

type t1180__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t1180__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t7clock_t = int64

type s52timespec = struct {
	Ftv_sec  int64
	Ftv_nsec int64
}

type t68time_t = int64

type t15clockid_t = int32

// linking clock_getcpuclockid.o

// Xclock_getcpuclockid is defined at clock_getcpuclockid.c:6:5
func Xclock_getcpuclockid(tls TLS, _pid int32, _clk uintptr /* *Tclockid_t = int32 */) (r int32) {
	esc := MustMalloc(16)
	var (
		_ts  = esc // *Stimespec
		_id  int32
		_ret int32
	)
	defer Free(esc)
	_id = int32(uint32(-_pid-int32(1))*uint32(8) + uint32(2))
	_ret = int32(x56__syscall2(tls, int64(229), int64(_id), int64(_ts)))
	if _ret == 0 {
		goto _1
	}

	return -_ret

_1:
	*(*int32)(unsafe.Pointer(_clk)) = _id
	return int32(0)
}

type t1181__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t1181__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t49pid_t = int32

type s53timespec = struct {
	Ftv_sec  int64
	Ftv_nsec int64
}

type t16clockid_t = int32

// x__syscall2 is defined at syscall_arch.h:24:22
func x56__syscall2(tls TLS, _n int64, _a1 int64, _a2 int64) (r int64) {
	return X__syscall(tls, _n, _a1, _a2, int64(0), int64(0), int64(0), int64(0))
}

type t69time_t = int64

// linking clock_getres.o

// Xclock_getres is defined at clock_getres.c:4:5
func Xclock_getres(tls TLS, _clk int32, _ts uintptr /* *Stimespec */) (r int32) {
	return int32(X__syscall_ret(tls, uint64(x57__syscall2(tls, int64(229), int64(_clk), int64(_ts)))))
}

type t1182__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t1182__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t17clockid_t = int32

type s54timespec = struct {
	Ftv_sec  int64
	Ftv_nsec int64
}

// x__syscall2 is defined at syscall_arch.h:24:22
func x57__syscall2(tls TLS, _n int64, _a1 int64, _a2 int64) (r int64) {
	return X__syscall(tls, _n, _a1, _a2, int64(0), int64(0), int64(0), int64(0))
}

type t70time_t = int64

// linking clock_gettime.o

func fn1078(p uintptr) func(TLS, int32, uintptr) int32 {
	return *(*func(TLS, int32, uintptr) int32)(unsafe.Pointer(&p))
}

// X__clock_gettime is defined at clock_gettime.c:27:5
func X__clock_gettime(tls TLS, _clk int32, _ts uintptr /* *Stimespec */) (r int32) {
	var (
		_r int32
		_f uintptr // *func(TLS, int32, uintptr) int32
	)
	_f = x1vdso_func
	if _f == 0 {
		goto _1
	}

	_r = fn1078(_f)(tls, _clk, _ts)
	if _r != 0 {
		goto _2
	}

	return _r

_2:
	if _r != int32(-22) {
		goto _3
	}

	return int32(X__syscall_ret(tls, uint64(_r)))

_3:
_1:
	_r = int32(x58__syscall2(tls, int64(228), int64(_clk), int64(_ts)))
	if _r != int32(-38) {
		goto _4
	}

	if _clk != int32(0) {
		goto _5
	}

	x58__syscall2(tls, int64(96), int64(_ts), int64(0))
	*(*int64)(unsafe.Pointer(_ts + 8)) = int64(int32(*(*int64)(unsafe.Pointer(_ts + 8))) * int32(1000))
	return int32(0)

_5:
	_r = int32(-22)
_4:
	return int32(X__syscall_ret(tls, uint64(_r)))
}

type t1183__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t1183__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t18clockid_t = int32

type s55timespec = struct {
	Ftv_sec  int64
	Ftv_nsec int64
}

func fp1079(f func(TLS, int32, uintptr) int32) uintptr { return *(*uintptr)(unsafe.Pointer(&f)) }

// xvdso_func *void, escapes: false, clock_gettime.c:23:13
var x1vdso_func uintptr

func init() { x1vdso_func = fp1079(xcgt_init) }

// x__syscall2 is defined at syscall_arch.h:24:22
func x58__syscall2(tls TLS, _n int64, _a1 int64, _a2 int64) (r int64) {
	return X__syscall(tls, _n, _a1, _a2, int64(0), int64(0), int64(0), int64(0))
}

type t71time_t = int64

// xcgt_init is defined at clock_gettime.c:14:12
func xcgt_init(tls TLS, _clk int32, _ts uintptr /* *Stimespec */) (r int32) {
	var (
		_p uintptr // *void
		_f uintptr // *func(TLS, int32, uintptr) int32
	)
	_p = X__vdsosym(tls, ts+4200 /* "LINUX_2.6" */, ts+7760 /* "__vdso_clock_get..." */)
	_f = _p
	x3a_cas_p(tls, x1vdso_func, fp1079(xcgt_init), _p)
	if _f != 0 {
		return fn1078(_f)(tls, _clk, _ts)
	}

	return int32(-38)
}

// xa_cas_p is defined at atomic_arch.h:14:20
func x3a_cas_p(tls TLS, _p uintptr /* *void */, _t uintptr /* *void */, _s uintptr /* *void */) (r uintptr /* *void */) {
	return a_cas_p(_p, _t, _s)
	return r
}

// linking clock_nanosleep.o

// Xclock_nanosleep is defined at clock_nanosleep.c:7:5
func Xclock_nanosleep(tls TLS, _clk int32, _flags int32, _req uintptr /* *Stimespec */, _rem uintptr /* *Stimespec */) (r int32) {
	X__assert_fail(tls, ts+0 /* "TODO(ccgo)" */, ts+7784 /* "src/time/clock_n..." */, int32(9), x1080__func__)
	X__assert_fail(tls, ts+0 /* "TODO(ccgo)" */, ts+7784 /* "src/time/clock_n..." */, int32(11), x1080__func__)
	return r
}

type t1184__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t1184__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t19clockid_t = int32

type s56timespec = struct {
	Ftv_sec  int64
	Ftv_nsec int64
}

// x1__func__ [16]int8, escapes: true, clock_nanosleep.c:8:1
var x1080__func__ = ds + 46928

type t72time_t = int64

// linking clock_settime.o

// Xclock_settime is defined at clock_settime.c:4:5
func Xclock_settime(tls TLS, _clk int32, _ts uintptr /* *Stimespec */) (r int32) {
	return int32(X__syscall_ret(tls, uint64(x59__syscall2(tls, int64(227), int64(_clk), int64(_ts)))))
}

type t1185__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t1185__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t20clockid_t = int32

type s57timespec = struct {
	Ftv_sec  int64
	Ftv_nsec int64
}

// x__syscall2 is defined at syscall_arch.h:24:22
func x59__syscall2(tls TLS, _n int64, _a1 int64, _a2 int64) (r int64) {
	return X__syscall(tls, _n, _a1, _a2, int64(0), int64(0), int64(0), int64(0))
}

type t73time_t = int64

// linking ctime.o

// Xctime is defined at ctime.c:3:6
func Xctime(tls TLS, _t uintptr /* *Ttime_t = int64 */) (r uintptr /* *int8 */) {
	var _tm uintptr // *Stm

	_tm = Xlocaltime(tls, _t)
	if _tm != 0 {
		goto _1
	}

	return null

_1:
	return Xasctime(tls, _tm)
}

type t1186__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t1186__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type s7tm = struct {
	Ftm_sec    int32
	Ftm_min    int32
	Ftm_hour   int32
	Ftm_mday   int32
	Ftm_mon    int32
	Ftm_year   int32
	Ftm_wday   int32
	Ftm_yday   int32
	Ftm_isdst  int32
	Ftm_gmtoff int64
	Ftm_zone   uintptr // *int8
}

// linking ctime_r.o

// Xctime_r is defined at ctime_r.c:3:6
func Xctime_r(tls TLS, _t uintptr /* *Ttime_t = int64 */, _buf uintptr /* *int8 */) (r uintptr /* *int8 */) {
	esc := MustMalloc(56)
	var (
		_tm   = esc   // *Stm
		_tm_p uintptr // *Stm
	)
	defer Free(esc)
	_tm_p = Xlocaltime_r(tls, _t, _tm)
	if _tm_p != 0 {
		return Xasctime_r(tls, _tm_p, _buf)
	}

	return null
}

type t1187__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t1187__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type s8tm = struct {
	Ftm_sec    int32
	Ftm_min    int32
	Ftm_hour   int32
	Ftm_mday   int32
	Ftm_mon    int32
	Ftm_year   int32
	Ftm_wday   int32
	Ftm_yday   int32
	Ftm_isdst  int32
	Ftm_gmtoff int64
	Ftm_zone   uintptr // *int8
}

// linking difftime.o

// Xdifftime is defined at difftime.c:3:8
func Xdifftime(tls TLS, _t1 int64, _t0 int64) (r float64) {
	return float64(_t1 - _t0)
}

type t1188__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t1188__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t74time_t = int64

// linking ftime.o

func set1081(p *int16, v int16) int16 { *p = v; return v }

// Xftime is defined at ftime.c:4:5
func Xftime(tls TLS, _tp uintptr /* *Stimeb */) (r int32) {
	esc := MustMalloc(16)
	var _ts = esc // *Stimespec
	defer Free(esc)
	Xclock_gettime(tls, int32(0), _ts)
	*(*int64)(unsafe.Pointer(_tp)) = *(*int64)(unsafe.Pointer(_ts))
	*(*uint16)(unsafe.Pointer(_tp + 8)) = uint16(*(*int64)(unsafe.Pointer(_ts + 8)) / int64(1000000))
	*(*int16)(unsafe.Pointer(_tp + 10)) = set1081((*int16)(unsafe.Pointer(_tp+12)), int16(0))
	return int32(0)
}

type t1189__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t1189__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type Stimeb = struct {
	Ftime     int64
	Fmillitm  uint16
	Ftimezone int16
	Fdstflag  int16
}

type s58timespec = struct {
	Ftv_sec  int64
	Ftv_nsec int64
}

type t75time_t = int64

type t21clockid_t = int32

// linking getdate.o

// Xgetdate_err int32, escapes: true, getdate.c:7:5
var Xgetdate_err = bss + 9352

// Xgetdate is defined at getdate.c:9:11
func Xgetdate(tls TLS, _s uintptr /* *int8 */) (r uintptr /* *Stm */) {
	esc := MustMalloc(116)
	var (
		_ret     uintptr     // *Stm
		_datemsk uintptr     // *int8
		_f       uintptr     // *TFILE = S_IO_FILE
		_fmt     = esc       // *[100]int8
		_p       uintptr     // *int8
		_cs      = esc + 112 // *int32
	)
	defer Free(esc)
	_ret = 0
	_datemsk = Xgetenv(tls, ts+7812 /* "DATEMSK" */)
	_f = 0
	Xpthread_setcancelstate(tls, int32(0), _cs)
	if _datemsk != 0 {
		goto _1
	}

	*(*int32)(unsafe.Pointer(Xgetdate_err)) = int32(1)
	goto lout

_1:
	_f = Xfopen(tls, _datemsk, ts+1456 /* "rbe" */)
	if _f != 0 {
		goto _2
	}

	if *(*int32)(unsafe.Pointer(X__errno_location(tls))) != int32(12) {
		goto _3
	}

	*(*int32)(unsafe.Pointer(Xgetdate_err)) = int32(6)
	goto _4

_3:
	*(*int32)(unsafe.Pointer(Xgetdate_err)) = int32(2)
_4:
	goto lout

_2:
_5:
	if Xfgets(tls, _fmt, int32(100), _f) == 0 {
		goto _6
	}

	_p = Xstrptime(tls, _s, _fmt, x1082tmbuf)
	if _p == 0 || *(*int8)(unsafe.Pointer(_p)) != 0 {
		goto _7
	}

	_ret = x1082tmbuf
	goto lout

_7:
	goto _5

_6:
	if Xferror(tls, _f) == 0 {
		goto _8
	}

	*(*int32)(unsafe.Pointer(Xgetdate_err)) = int32(5)
	goto _9

_8:
	*(*int32)(unsafe.Pointer(Xgetdate_err)) = int32(7)
_9:
	goto lout
lout:
	if _f == 0 {
		goto _10
	}

	Xfclose(tls, _f)
_10:
	Xpthread_setcancelstate(tls, *(*int32)(unsafe.Pointer(_cs)), null)
	return _ret
}

type t1190__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t1190__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type s9tm = struct {
	Ftm_sec    int32
	Ftm_min    int32
	Ftm_hour   int32
	Ftm_mday   int32
	Ftm_mon    int32
	Ftm_year   int32
	Ftm_wday   int32
	Ftm_yday   int32
	Ftm_isdst  int32
	Ftm_gmtoff int64
	Ftm_zone   uintptr // *int8
}

// x1tmbuf Stm, escapes: true, getdate.c:11:19
var x1082tmbuf = bss + 9360

type s116_IO_FILE struct{ uintptr }

// linking gettimeofday.o

// Xgettimeofday is defined at gettimeofday.c:5:5
func Xgettimeofday(tls TLS, _tv uintptr /* *Stimeval */, _tz uintptr /* *void */) (r int32) {
	esc := MustMalloc(16)
	var _ts = esc // *Stimespec
	defer Free(esc)
	if _tv != 0 {
		goto _1
	}

	return int32(0)

_1:
	Xclock_gettime(tls, int32(0), _ts)
	*(*int64)(unsafe.Pointer(_tv)) = *(*int64)(unsafe.Pointer(_ts))
	*(*int64)(unsafe.Pointer(_tv + 8)) = int64(int32(*(*int64)(unsafe.Pointer(_ts + 8))) / int32(1000))
	return int32(0)
}

type t1191__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t1191__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type s17timeval = struct {
	Ftv_sec  int64
	Ftv_usec int64
}

type s59timespec = struct {
	Ftv_sec  int64
	Ftv_nsec int64
}

type t76time_t = int64

type t17suseconds_t = int64

type t22clockid_t = int32

// linking gmtime.o

// Xgmtime is defined at gmtime.c:6:11
func Xgmtime(tls TLS, _t uintptr /* *Ttime_t = int64 */) (r uintptr /* *Stm */) {
	return X__gmtime_r(tls, _t, x1083tm)
}

type t1192__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t1192__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type s10tm = struct {
	Ftm_sec    int32
	Ftm_min    int32
	Ftm_hour   int32
	Ftm_mday   int32
	Ftm_mon    int32
	Ftm_year   int32
	Ftm_wday   int32
	Ftm_yday   int32
	Ftm_isdst  int32
	Ftm_gmtoff int64
	Ftm_zone   uintptr // *int8
}

// x1tm Stm, escapes: true, gmtime.c:8:19
var x1083tm = bss + 9416

// linking gmtime_r.o

// X__gmtime_r is defined at gmtime_r.c:7:11
func X__gmtime_r(tls TLS, _t uintptr /* *Ttime_t = int64 */, _tm uintptr /* *Stm */) (r uintptr /* *Stm */) {
	if X__secs_to_tm(tls, *(*int64)(unsafe.Pointer(_t)), _tm) >= int32(0) {
		goto _1
	}

	*(*int32)(unsafe.Pointer(X__errno_location(tls))) = int32(75)
	return null

_1:
	*(*int32)(unsafe.Pointer(_tm + 32)) = int32(0)
	*(*int64)(unsafe.Pointer(_tm + 40)) = int64(0)
	*(*uintptr)(unsafe.Pointer(_tm + 48)) = X__utc
	return _tm
}

type t1193__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t1193__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type s11tm = struct {
	Ftm_sec    int32
	Ftm_min    int32
	Ftm_hour   int32
	Ftm_mday   int32
	Ftm_mon    int32
	Ftm_year   int32
	Ftm_wday   int32
	Ftm_yday   int32
	Ftm_isdst  int32
	Ftm_gmtoff int64
	Ftm_zone   uintptr // *int8
}

type t77time_t = int64

// linking localtime.o

// Xlocaltime is defined at localtime.c:5:11
func Xlocaltime(tls TLS, _t uintptr /* *Ttime_t = int64 */) (r uintptr /* *Stm */) {
	return X__localtime_r(tls, _t, x1084tm)
}

type t1194__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t1194__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type s12tm = struct {
	Ftm_sec    int32
	Ftm_min    int32
	Ftm_hour   int32
	Ftm_mday   int32
	Ftm_mon    int32
	Ftm_year   int32
	Ftm_wday   int32
	Ftm_yday   int32
	Ftm_isdst  int32
	Ftm_gmtoff int64
	Ftm_zone   uintptr // *int8
}

// x1tm Stm, escapes: true, localtime.c:7:19
var x1084tm = bss + 9472

// linking localtime_r.o

// X__localtime_r is defined at localtime_r.c:5:11
func X__localtime_r(tls TLS, _t uintptr /* *Ttime_t = int64 */, _tm uintptr /* *Stm */) (r uintptr /* *Stm */) {
	if *(*int64)(unsafe.Pointer(_t)) >= int64(-67908586910515200) && *(*int64)(unsafe.Pointer(_t)) <= int64(67908586878892800) {
		goto _1
	}

	*(*int32)(unsafe.Pointer(X__errno_location(tls))) = int32(75)
	return null

_1:
	X__secs_to_zone(tls, *(*int64)(unsafe.Pointer(_t)), int32(0), _tm+32, _tm+40, null, _tm+48)
	if X__secs_to_tm(tls, *(*int64)(unsafe.Pointer(_t))+*(*int64)(unsafe.Pointer(_tm + 40)), _tm) >= int32(0) {
		goto _2
	}

	*(*int32)(unsafe.Pointer(X__errno_location(tls))) = int32(75)
	return null

_2:
	return _tm
}

type t1195__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t1195__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type s13tm = struct {
	Ftm_sec    int32
	Ftm_min    int32
	Ftm_hour   int32
	Ftm_mday   int32
	Ftm_mon    int32
	Ftm_year   int32
	Ftm_wday   int32
	Ftm_yday   int32
	Ftm_isdst  int32
	Ftm_gmtoff int64
	Ftm_zone   uintptr // *int8
}

type t78time_t = int64

// linking mktime.o

// Xmktime is defined at mktime.c:4:8
func Xmktime(tls TLS, _tm uintptr /* *Stm */) (r int64) {
	esc := MustMalloc(72)
	var (
		_new = esc      // *Stm
		_opp = esc + 64 // *int64
		_t   int64
	)
	defer Free(esc)
	_t = X__tm_to_secs(tls, _tm)
	X__secs_to_zone(tls, _t, int32(1), _new+32, _new+40, _opp, _new+48)
	if *(*int32)(unsafe.Pointer(_tm + 32)) < int32(0) || *(*int32)(unsafe.Pointer(_new + 32)) == *(*int32)(unsafe.Pointer(_tm + 32)) {
		goto _1
	}

	_t = _t - (*(*int64)(unsafe.Pointer(_opp)) - *(*int64)(unsafe.Pointer(_new + 40)))
_1:
	_t = _t - *(*int64)(unsafe.Pointer(_new + 40))
	if _t == _t {
		goto _2
	}

	goto lerror

_2:
	X__secs_to_zone(tls, _t, int32(0), _new+32, _new+40, _opp, _new+48)
	if X__secs_to_tm(tls, _t+*(*int64)(unsafe.Pointer(_new + 40)), _new) >= int32(0) {
		goto _3
	}

	goto lerror

_3:
	*(*s14tm)(unsafe.Pointer(_tm)) = *(*s14tm)(unsafe.Pointer(_new))
	return _t

	goto lerror
lerror:
	*(*int32)(unsafe.Pointer(X__errno_location(tls))) = int32(75)
	return int64(-1)
}

type t1196__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t1196__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t79time_t = int64

type s14tm = struct {
	Ftm_sec    int32
	Ftm_min    int32
	Ftm_hour   int32
	Ftm_mday   int32
	Ftm_mon    int32
	Ftm_year   int32
	Ftm_wday   int32
	Ftm_yday   int32
	Ftm_isdst  int32
	Ftm_gmtoff int64
	Ftm_zone   uintptr // *int8
}

// linking nanosleep.o

// Xnanosleep is defined at nanosleep.c:6:5
func Xnanosleep(tls TLS, _req uintptr /* *Stimespec */, _rem uintptr /* *Stimespec */) (r int32) {
	return int32(X__syscall_ret(tls, uint64(X__syscall_cp(tls, int64(35), int64(_req), int64(_rem), int64(0), int64(0), int64(0), int64(0)))))
}

type t1197__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t1197__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type s60timespec = struct {
	Ftv_sec  int64
	Ftv_nsec int64
}

type t80time_t = int64

type t9syscall_arg_t = int64

// linking strftime.o

// X__strftime_fmt_1 is defined at strftime.c:51:12
func X__strftime_fmt_1(tls TLS, _s uintptr /* *[100]int8 */, _l uintptr /* *Tsize_t = uint64 */, _f int32, _tm uintptr /* *Stm */, _loc uintptr /* Tlocale_t = *S__locale_struct */, _pad int32) (r uintptr /* *int8 */) {
	var (
		_item    int32
		_val     int64
		_fmt     uintptr // *int8
		_width   int32
		_def_pad int32
	)
	_fmt = ts + 4756 /* "-" */
	_width = int32(2)
	_def_pad = int32('0')
	switch _f {
	case int32('a'):
		goto _2
	case int32('A'):
		goto _3
	case int32('h'):
		goto _4
	case int32('b'):
		goto _5
	case int32('B'):
		goto _6
	case int32('c'):
		goto _7
	case int32('C'):
		goto _8
	case int32('e'):
		goto _9
	case int32('d'):
		goto _10
	case int32('D'):
		goto _11
	case int32('F'):
		goto _12
	case int32('g'):
		goto _13
	case int32('G'):
		goto _14
	case int32('H'):
		goto _15
	case int32('I'):
		goto _16
	case int32('j'):
		goto _17
	case int32('m'):
		goto _18
	case int32('M'):
		goto _19
	case int32('n'):
		goto _20
	case int32('p'):
		goto _21
	case int32('r'):
		goto _22
	case int32('R'):
		goto _23
	case int32('s'):
		goto _24
	case int32('S'):
		goto _25
	case int32('t'):
		goto _26
	case int32('T'):
		goto _27
	case int32('u'):
		goto _28
	case int32('U'):
		goto _29
	case int32('W'):
		goto _30
	case int32('V'):
		goto _31
	case int32('w'):
		goto _32
	case int32('x'):
		goto _33
	case int32('X'):
		goto _34
	case int32('y'):
		goto _35
	case int32('Y'):
		goto _36
	case int32('z'):
		goto _37
	case int32('Z'):
		goto _38
	case int32('%'):
		goto _39
	default:
		goto _40
	}
_2:
	if uint32(*(*int32)(unsafe.Pointer(_tm + 24))) <= uint32(6) {
		goto _41
	}

	goto lstring

_41:
	_item = int32(0x20000) + *(*int32)(unsafe.Pointer(_tm + 24))
	goto lnl_strcat

_3:
	if uint32(*(*int32)(unsafe.Pointer(_tm + 24))) <= uint32(6) {
		goto _42
	}

	goto lstring

_42:
	_item = int32(0x20007) + *(*int32)(unsafe.Pointer(_tm + 24))
	goto lnl_strcat

_4:
_5:
	if uint32(*(*int32)(unsafe.Pointer(_tm + 16))) <= uint32(11) {
		goto _43
	}

	goto lstring

_43:
	_item = int32(0x2000e) + *(*int32)(unsafe.Pointer(_tm + 16))
	goto lnl_strcat

_6:
	if uint32(*(*int32)(unsafe.Pointer(_tm + 16))) <= uint32(11) {
		goto _44
	}

	goto lstring

_44:
	_item = int32(0x2001a) + *(*int32)(unsafe.Pointer(_tm + 16))
	goto lnl_strcat

_7:
	_item = int32(0x20028)
	goto lnl_strftime

_8:
	_val = (int64(1900) + int64(*(*int32)(unsafe.Pointer(_tm + 20)))) / int64(100)
	goto lnumber

_9:
	_def_pad = int32('_')
_10:
	_val = int64(*(*int32)(unsafe.Pointer(_tm + 12)))
	goto lnumber

_11:
	_fmt = ts + 7820 /* "%m/%d/%y" */
	goto lrecu_strftime

_12:
	_fmt = ts + 7832 /* "%Y-%m-%d" */
	goto lrecu_strftime

_13:
_14:
	_val = int64(*(*int32)(unsafe.Pointer(_tm + 20))) + int64(1900)
	if *(*int32)(unsafe.Pointer(_tm + 28)) >= int32(3) || xweek_num(tls, _tm) == int32(1) {
		goto _45
	}

	_val--
	goto _46

_45:
	if *(*int32)(unsafe.Pointer(_tm + 28)) <= int32(360) || xweek_num(tls, _tm) != int32(1) {
		goto _47
	}

	_val++
_47:
_46:
	if _f != int32('g') {
		goto _48
	}

	_val = _val % int64(100)
	goto _49

_48:
	_width = int32(4)
_49:
	goto lnumber

_15:
	_val = int64(*(*int32)(unsafe.Pointer(_tm + 8)))
	goto lnumber

_16:
	_val = int64(*(*int32)(unsafe.Pointer(_tm + 8)))
	if _val != 0 {
		goto _50
	}

	_val = int64(12)
	goto _51

_50:
	if _val <= int64(12) {
		goto _52
	}

	_val = _val - int64(12)
_52:
_51:
	goto lnumber

_17:
	_val = int64(*(*int32)(unsafe.Pointer(_tm + 28)) + int32(1))
	_width = int32(3)
	goto lnumber

_18:
	_val = int64(*(*int32)(unsafe.Pointer(_tm + 16)) + int32(1))
	goto lnumber

_19:
	_val = int64(*(*int32)(unsafe.Pointer(_tm + 4)))
	goto lnumber

_20:
	*(*uint64)(unsafe.Pointer(_l)) = uint64(1)
	return ts + 1440 /* "\n" */

_21:
	_item = func() int32 {
		if *(*int32)(unsafe.Pointer(_tm + 8)) >= int32(12) {
			return int32(0x20027)
		}
		return int32(0x20026)
	}()
	goto lnl_strcat

_22:
	_item = int32(0x2002b)
	goto lnl_strftime

_23:
	_fmt = ts + 7844 /* "%H:%M" */
	goto lrecu_strftime

_24:
	_val = X__tm_to_secs(tls, _tm) - *(*int64)(unsafe.Pointer(_tm + 40))
	_width = int32(1)
	goto lnumber

_25:
	_val = int64(*(*int32)(unsafe.Pointer(_tm)))
	goto lnumber

_26:
	*(*uint64)(unsafe.Pointer(_l)) = uint64(1)
	return ts + 4092 /* "\t" */

_27:
	_fmt = ts + 7852 /* "%H:%M:%S" */
	goto lrecu_strftime

_28:
	_val = int64(func() int32 {
		if *(*int32)(unsafe.Pointer(_tm + 24)) != 0 {
			return *(*int32)(unsafe.Pointer(_tm + 24))
		}
		return int32(7)
	}())
	_width = int32(1)
	goto lnumber

_29:
	_val = int64((uint32(*(*int32)(unsafe.Pointer(_tm + 28))) + uint32(7) - uint32(*(*int32)(unsafe.Pointer(_tm + 24)))) / uint32(7))
	goto lnumber

_30:
	_val = int64((uint32(*(*int32)(unsafe.Pointer(_tm + 28))) + uint32(7) - (uint32(*(*int32)(unsafe.Pointer(_tm + 24)))+uint32(6))%uint32(7)) / uint32(7))
	goto lnumber

_31:
	_val = int64(xweek_num(tls, _tm))
	goto lnumber

_32:
	_val = int64(*(*int32)(unsafe.Pointer(_tm + 24)))
	_width = int32(1)
	goto lnumber

_33:
	_item = int32(0x20029)
	goto lnl_strftime

_34:
	_item = int32(0x2002a)
	goto lnl_strftime

_35:
	_val = (int64(*(*int32)(unsafe.Pointer(_tm + 20))) + int64(1900)) % int64(100)
	if _val >= int64(0) {
		goto _53
	}

	_val = -_val
_53:
	goto lnumber

_36:
	_val = int64(*(*int32)(unsafe.Pointer(_tm + 20))) + int64(1900)
	if _val < int64(10000) {
		goto _54
	}

	*(*uint64)(unsafe.Pointer(_l)) = uint64(Xsnprintf(tls, _s, uint64(100), ts+7864 /* "+%lld" */, _val))
	return _s

_54:
	_width = int32(4)
	goto lnumber

_37:
	if *(*int32)(unsafe.Pointer(_tm + 32)) >= int32(0) {
		goto _55
	}

	*(*uint64)(unsafe.Pointer(_l)) = uint64(0)
	return ts + 112 /* "" */

_55:
	*(*uint64)(unsafe.Pointer(_l)) = uint64(Xsnprintf(tls, _s, uint64(100), ts+7872 /* "%+.2ld%.2d" */, *(*int64)(unsafe.Pointer(_tm + 40))/int64(3600), Xabs(tls, int32(*(*int64)(unsafe.Pointer(_tm + 40))%int64(3600)))/int32(60)))
	return _s

_38:
	if *(*int32)(unsafe.Pointer(_tm + 32)) >= int32(0) {
		goto _56
	}

	*(*uint64)(unsafe.Pointer(_l)) = uint64(0)
	return ts + 112 /* "" */

_56:
	_fmt = X__tm_to_tzname(tls, _tm)
	goto lstring

_39:
	*(*uint64)(unsafe.Pointer(_l)) = uint64(1)
	return ts + 7884 /* "%" */

_40:
	return null

	goto lnumber
lnumber:
	switch func() int32 {
		if _pad != 0 {
			return _pad
		}
		return _def_pad
	}() {
	case int32('-'):
		goto _58
	case int32('_'):
		goto _59
	case int32('0'):
		goto _60
	default:
		goto _61
	}
_58:
	*(*uint64)(unsafe.Pointer(_l)) = uint64(Xsnprintf(tls, _s, uint64(100), ts+7888 /* "%lld" */, _val))
	goto _57

_59:
	*(*uint64)(unsafe.Pointer(_l)) = uint64(Xsnprintf(tls, _s, uint64(100), ts+7896 /* "%*lld" */, _width, _val))
	goto _57

_60:
_61:
	*(*uint64)(unsafe.Pointer(_l)) = uint64(Xsnprintf(tls, _s, uint64(100), ts+7904 /* "%0*lld" */, _width, _val))
	goto _57

_57:
	return _s

	goto lnl_strcat
lnl_strcat:
	_fmt = X__nl_langinfo_l(tls, _item, _loc)
	goto lstring
lstring:
	*(*uint64)(unsafe.Pointer(_l)) = Xstrlen(tls, _fmt)
	return _fmt

	goto lnl_strftime
lnl_strftime:
	_fmt = X__nl_langinfo_l(tls, _item, _loc)
	goto lrecu_strftime
lrecu_strftime:
	*(*uint64)(unsafe.Pointer(_l)) = X__strftime_l(tls, _s, uint64(100), _fmt, _tm, _loc)
	if *(*uint64)(unsafe.Pointer(_l)) != 0 {
		goto _62
	}

	return null

_62:
	return _s
}

func postinc1085(p *uint64) uint64 { r := *p; *p += 1; return r }

func postinc1086(p *uintptr) uintptr { r := *p; *p += 1; return r }

func set1087(p *int32, v int32) int32 { *p = v; return v }

// X__strftime_l is defined at strftime.c:222:8
func X__strftime_l(tls TLS, _s uintptr /* *int8 */, _n uint64, _f uintptr /* *int8 */, _tm uintptr /* *Stm */, _loc uintptr /* Tlocale_t = *S__locale_struct */) (r uint64) {
	esc := MustMalloc(136)
	var (
		_l     uint64
		_k     = esc       // *Tsize_t = uint64
		_buf   = esc + 16  // *[100]int8
		_p     = esc + 128 // **int8
		_t     uintptr     // *int8
		_pad   int32
		_plus  int32
		_width uint64
		_d     uint64
	)
	defer Free(esc)
	_l = uint64(0)
_1:
	if _l >= _n {
		goto _3
	}

	if *(*int8)(unsafe.Pointer(_f)) != 0 {
		goto _4
	}

	*(*int8)(unsafe.Pointer(_s + uintptr(_l))) = int8(0)
	return _l

_4:
	if int32(*(*int8)(unsafe.Pointer(_f))) == int32('%') {
		goto _5
	}

	*(*int8)(unsafe.Pointer(_s + uintptr(postinc1085(&_l)))) = *(*int8)(unsafe.Pointer(_f))
	goto _2

_5:
	_f++
	_pad = int32(0)
	if int32(*(*int8)(unsafe.Pointer(_f))) != int32('-') && int32(*(*int8)(unsafe.Pointer(_f))) != int32('_') && int32(*(*int8)(unsafe.Pointer(_f))) != int32('0') {
		goto _6
	}

	_pad = int32(*(*int8)(unsafe.Pointer(postinc1086(&_f))))
_6:
	if set1087(&_plus, bool2int(int32(*(*int8)(unsafe.Pointer(_f))) == int32('+'))) == 0 {
		goto _7
	}

	_f++
_7:
	_width = Xstrtoul(tls, _f, _p, int32(10))
	if int32(*(*int8)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_p))))) != int32('C') && int32(*(*int8)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_p))))) != int32('F') && int32(*(*int8)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_p))))) != int32('G') && int32(*(*int8)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_p))))) != int32('Y') {
		goto _8
	}

	if _width != 0 || *(*uintptr)(unsafe.Pointer(_p)) == _f {
		goto _10
	}

	_width = uint64(1)
_10:
	goto _9

_8:
	_width = uint64(0)
_9:
	_f = *(*uintptr)(unsafe.Pointer(_p))
	if int32(*(*int8)(unsafe.Pointer(_f))) != int32('E') && int32(*(*int8)(unsafe.Pointer(_f))) != int32('O') {
		goto _11
	}

	_f++
_11:
	_t = X__strftime_fmt_1(tls, _buf, _k, int32(*(*int8)(unsafe.Pointer(_f))), _tm, _loc, _pad)
	if _t != 0 {
		goto _12
	}

	goto _3

_12:
	if _width == 0 {
		goto _13
	}

	if int32(*(*int8)(unsafe.Pointer(_t))) != int32('+') && int32(*(*int8)(unsafe.Pointer(_t))) != int32('-') {
		goto _14
	}

	_t++
	*(*uint64)(unsafe.Pointer(_k))--
_14:
_15:
	if int32(*(*int8)(unsafe.Pointer(_t))) != int32('0') || uint32(int32(*(*int8)(unsafe.Pointer(_t + 1)))-int32('0')) >= uint32(10) {
		goto _17
	}

	_t++
	*(*uint64)(unsafe.Pointer(_k))--
	goto _15

_17:
	if _width >= *(*uint64)(unsafe.Pointer(_k)) {
		goto _18
	}

	_width = *(*uint64)(unsafe.Pointer(_k))
_18:
	_d = uint64(0)
_19:
	if uint32(int32(*(*int8)(unsafe.Pointer(_t + uintptr(_d))))-int32('0')) >= uint32(10) {
		goto _21
	}

	_d++
	goto _19

_21:
	if *(*int32)(unsafe.Pointer(_tm + 20)) >= int32(-1900) {
		goto _22
	}

	*(*int8)(unsafe.Pointer(_s + uintptr(postinc1085(&_l)))) = int8('-')
	_width--
	goto _23

_22:
	if _plus == 0 || _d+(_width-*(*uint64)(unsafe.Pointer(_k))) < uint64(func() int32 {
		if int32(*(*int8)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_p))))) == int32('C') {
			return int32(3)
		}
		return int32(5)
	}()) {
		goto _24
	}

	*(*int8)(unsafe.Pointer(_s + uintptr(postinc1085(&_l)))) = int8('+')
	_width--
_24:
_23:
_25:
	if _width <= *(*uint64)(unsafe.Pointer(_k)) || _l >= _n {
		goto _27
	}

	*(*int8)(unsafe.Pointer(_s + uintptr(postinc1085(&_l)))) = int8('0')
	_width--
	goto _25

_27:
_13:
	if *(*uint64)(unsafe.Pointer(_k)) <= _n-_l {
		goto _28
	}

	*(*uint64)(unsafe.Pointer(_k)) = _n - _l
_28:
	Xmemcpy(tls, _s+uintptr(_l), _t, *(*uint64)(unsafe.Pointer(_k)))
	_l = _l + *(*uint64)(unsafe.Pointer(_k))

_2:
	_f++
	goto _1

_3:
	if _n == 0 {
		goto _29
	}

	if _l != _n {
		goto _30
	}

	_l = _n - uint64(1)
_30:
	*(*int8)(unsafe.Pointer(_s + uintptr(_l))) = int8(0)
_29:
	return uint64(0)
}

// Xstrftime is defined at strftime.c:283:8
func Xstrftime(tls TLS, _s uintptr /* *int8 */, _n uint64, _f uintptr /* *int8 */, _tm uintptr /* *Stm */) (r uint64) {
	return X__strftime_l(tls, _s, _n, _f, _tm, *(*uintptr)(unsafe.Pointer(x48__pthread_self(tls) + 192)))
}

type t1198__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t1198__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type s15tm = struct {
	Ftm_sec    int32
	Ftm_min    int32
	Ftm_hour   int32
	Ftm_mday   int32
	Ftm_mon    int32
	Ftm_year   int32
	Ftm_wday   int32
	Ftm_yday   int32
	Ftm_isdst  int32
	Ftm_gmtoff int64
	Ftm_zone   uintptr // *int8
}

type s178__locale_struct = struct{ Fcat [6]uintptr }

type t2nl_item = int32

// xweek_num is defined at strftime.c:22:12
func xweek_num(tls TLS, _tm uintptr /* *Stm */) (r int32) {
	var (
		_val   int32
		_dec31 int32
		_jan1  int32
	)
	_val = int32((uint32(*(*int32)(unsafe.Pointer(_tm + 28))) + uint32(7) - (uint32(*(*int32)(unsafe.Pointer(_tm + 24)))+uint32(6))%uint32(7)) / uint32(7))
	if (uint32(*(*int32)(unsafe.Pointer(_tm + 24)))+uint32(371)-uint32(*(*int32)(unsafe.Pointer(_tm + 28)))-uint32(2))%uint32(7) > uint32(2) {
		goto _1
	}

	_val++
_1:
	if _val != 0 {
		goto _2
	}

	_val = int32(52)
	_dec31 = int32((uint32(*(*int32)(unsafe.Pointer(_tm + 24))) + uint32(7) - uint32(*(*int32)(unsafe.Pointer(_tm + 28))) - uint32(1)) % uint32(7))
	if _dec31 != int32(4) && (_dec31 != int32(5) || xis_leap(tls, *(*int32)(unsafe.Pointer(_tm + 20))%int32(400)-int32(1)) == 0) {
		goto _4
	}

	_val++
_4:
	goto _3

_2:
	if _val != int32(53) {
		goto _5
	}

	_jan1 = int32((uint32(*(*int32)(unsafe.Pointer(_tm + 24))) + uint32(371) - uint32(*(*int32)(unsafe.Pointer(_tm + 28)))) % uint32(7))
	if _jan1 == int32(4) || _jan1 == int32(3) && xis_leap(tls, *(*int32)(unsafe.Pointer(_tm + 20))) != 0 {
		goto _6
	}

	_val = int32(1)
_6:
_5:
_3:
	return _val
}

type t392size_t = uint64

// x__pthread_self is defined at pthread_arch.h:1:30
func x48__pthread_self(tls TLS) (r uintptr /* *S__pthread */) {
	return uintptr(tls)
	return r
}

// xis_leap is defined at strftime.c:14:12
func xis_leap(tls TLS, _y int32) (r int32) {
	if _y <= int32(2147481747) {
		goto _1
	}

	_y = _y - int32(2000)
_1:
	_y = _y + int32(1900)
	return bool2int((_y%int32(4) == 0) && ((_y%int32(100) != 0) || (_y%int32(400) == 0)))
}

type s66__pthread = struct {
	Fself          uintptr // *S__pthread
	Fdtv           uintptr // **void
	Funused1       uintptr // *void
	Funused2       uintptr // *void
	Fsysinfo       uint64
	Fcanary        uint64
	Fcanary2       uint64
	Ftid           int32
	Ferrno_val     int32
	Fdetach_state  int32
	Fcancel        int32
	Fcanceldisable uint8
	Fcancelasync   uint8
	F74            uint8
	Fmap_base      uintptr // *uint8
	Fmap_size      uint64
	Fstack         uintptr // *void
	Fstack_size    uint64
	Fguard_size    uint64
	Fstart_arg     uintptr // *void
	Fstart         uintptr // *func(TLS, uintptr) uintptr
	Fresult        uintptr // *void
	Fcancelbuf     uintptr // *S__ptcb
	Ftsd           uintptr // **void
	Frobust_list   struct {
		Fhead    uintptr
		Foff     int64
		Fpending uintptr
	}
	Ftimer_id      int32
	Flocale        uintptr // Tlocale_t = *S__locale_struct
	Fkilllock      [1]int32
	Fdlerror_buf   uintptr // *int8
	Fstdio_locks   uintptr // *void
	Fcanary_at_end uint64
	Fdtv_copy      uintptr // **void
}

type t84uintptr_t = uint64

type s65__ptcb = struct {
	F__f    uintptr // *func(TLS, uintptr)
	F__x    uintptr // *void
	F__next uintptr // *S__ptcb
}

// linking strptime.o

func postinc1088(p *uintptr) uintptr { r := *p; *p += 1; return r }

func set1089(p *int32, v int32) int32 { *p = v; return v }

// Xstrptime is defined at strptime.c:10:6
func Xstrptime(tls TLS, _s uintptr /* *int8 */, _f uintptr /* *int8 */, _tm uintptr /* *Stm */) (r uintptr /* *int8 */) {
	esc := MustMalloc(56)
	var (
		_i            int32
		_w            int32
		_neg          int32
		_adj          int32
		_min          int32
		_range        int32
		_dest         uintptr // *int32
		_dummy        = esc   // *int32
		_ex           uintptr // *int8
		_len          uint64
		_want_century int32
		_century      = esc + 16 // *int32
		_relyear      = esc + 32 // *int32
		_new_f        = esc + 48 // **int8
	)
	defer Free(esc)
	_want_century = int32(0)
	*(*int32)(unsafe.Pointer(_century)) = int32(0)
	*(*int32)(unsafe.Pointer(_relyear)) = int32(0)
_1:
	if *(*int8)(unsafe.Pointer(_f)) == 0 {
		goto _2
	}

	if int32(*(*int8)(unsafe.Pointer(_f))) == int32('%') {
		goto _3
	}

	if x9__isspace(tls, int32(*(*int8)(unsafe.Pointer(_f)))) == 0 {
		goto _4
	}

_6:
	if *(*int8)(unsafe.Pointer(_s)) == 0 || x9__isspace(tls, int32(*(*int8)(unsafe.Pointer(_s)))) == 0 {
		goto _8
	}

	_s++
	goto _6

_8:
	goto _5

_4:
	if int32(*(*int8)(unsafe.Pointer(_s))) == int32(*(*int8)(unsafe.Pointer(_f))) {
		goto _9
	}

	return null

	goto _10

_9:
	_s++
_10:
_5:
	_f++
	goto _1

_3:
	_f++
	if int32(*(*int8)(unsafe.Pointer(_f))) != int32('+') {
		goto _11
	}

	_f++
_11:
	if uint32(*(*int8)(unsafe.Pointer(_f)))-uint32('0') >= uint32(10) {
		goto _12
	}

	_w = int32(Xstrtoul(tls, _f, _new_f, int32(10)))
	_f = *(*uintptr)(unsafe.Pointer(_new_f))
	goto _13

_12:
	_w = int32(-1)
_13:
	_adj = int32(0)
	switch int32(*(*int8)(unsafe.Pointer(postinc1088(&_f)))) {
	case int32('a'):
		goto _15
	case int32('A'):
		goto _16
	case int32('b'):
		goto _17
	case int32('B'):
		goto _18
	case int32('h'):
		goto _19
	case int32('c'):
		goto _20
	case int32('C'):
		goto _21
	case int32('d'):
		goto _22
	case int32('e'):
		goto _23
	case int32('D'):
		goto _24
	case int32('H'):
		goto _25
	case int32('I'):
		goto _26
	case int32('j'):
		goto _27
	case int32('m'):
		goto _28
	case int32('M'):
		goto _29
	case int32('n'):
		goto _30
	case int32('t'):
		goto _31
	case int32('p'):
		goto _32
	case int32('r'):
		goto _33
	case int32('R'):
		goto _34
	case int32('S'):
		goto _35
	case int32('T'):
		goto _36
	case int32('U'):
		goto _37
	case int32('W'):
		goto _38
	case int32('w'):
		goto _39
	case int32('x'):
		goto _40
	case int32('X'):
		goto _41
	case int32('y'):
		goto _42
	case int32('Y'):
		goto _43
	case int32('%'):
		goto _44
	default:
		goto _45
	}
_15:
_16:
	_dest = _tm + 24
	_min = int32(0x20000)
	_range = int32(7)
	goto lsymbolic_range

_17:
_18:
_19:
	_dest = _tm + 16
	_min = int32(0x2000e)
	_range = int32(12)
	goto lsymbolic_range

_20:
	_s = Xstrptime(tls, _s, Xnl_langinfo(tls, int32(0x20028)), _tm)
	if _s != 0 {
		goto _46
	}

	return null

_46:
	goto _14

_21:
	_dest = _century
	if _w >= int32(0) {
		goto _47
	}

	_w = int32(2)
_47:
	_want_century = _want_century | int32(2)
	goto lnumeric_digits

_22:
_23:
	_dest = _tm + 12
	_min = int32(1)
	_range = int32(31)
	goto lnumeric_range

_24:
	_s = Xstrptime(tls, _s, ts+7820 /* "%m/%d/%y" */, _tm)
	if _s != 0 {
		goto _48
	}

	return null

_48:
	goto _14

_25:
	_dest = _tm + 8
	_min = int32(0)
	_range = int32(24)
	goto lnumeric_range

_26:
	_dest = _tm + 8
	_min = int32(1)
	_range = int32(12)
	goto lnumeric_range

_27:
	_dest = _tm + 28
	_min = int32(1)
	_range = int32(366)
	_adj = int32(1)
	goto lnumeric_range

_28:
	_dest = _tm + 16
	_min = int32(1)
	_range = int32(12)
	_adj = int32(1)
	goto lnumeric_range

_29:
	_dest = _tm + 4
	_min = int32(0)
	_range = int32(60)
	goto lnumeric_range

_30:
_31:
_49:
	if *(*int8)(unsafe.Pointer(_s)) == 0 || x9__isspace(tls, int32(*(*int8)(unsafe.Pointer(_s)))) == 0 {
		goto _51
	}

	_s++
	goto _49

_51:
	goto _14

_32:
	_ex = Xnl_langinfo(tls, int32(0x20026))
	_len = Xstrlen(tls, _ex)
	if Xstrncasecmp(tls, _s, _ex, _len) != 0 {
		goto _52
	}

	{
		p := (*int32)(unsafe.Pointer(_tm + 8))
		*p = *p % int32(12)
	}
	_s += uintptr(_len)
	goto _14

_52:
	_ex = Xnl_langinfo(tls, int32(0x20027))
	_len = Xstrlen(tls, _ex)
	if Xstrncasecmp(tls, _s, _ex, _len) != 0 {
		goto _53
	}

	{
		p := (*int32)(unsafe.Pointer(_tm + 8))
		*p = *p % int32(12)
	}
	{
		p := (*int32)(unsafe.Pointer(_tm + 8))
		*p = *p + int32(12)
	}
	_s += uintptr(_len)
	goto _14

_53:
	return null

_33:
	_s = Xstrptime(tls, _s, Xnl_langinfo(tls, int32(0x2002b)), _tm)
	if _s != 0 {
		goto _54
	}

	return null

_54:
	goto _14

_34:
	_s = Xstrptime(tls, _s, ts+7844 /* "%H:%M" */, _tm)
	if _s != 0 {
		goto _55
	}

	return null

_55:
	goto _14

_35:
	_dest = _tm
	_min = int32(0)
	_range = int32(61)
	goto lnumeric_range

_36:
	_s = Xstrptime(tls, _s, ts+7852 /* "%H:%M:%S" */, _tm)
	if _s != 0 {
		goto _56
	}

	return null

_56:
	goto _14

_37:
_38:
	_dest = _dummy
	_min = int32(0)
	_range = int32(54)
	goto lnumeric_range

_39:
	_dest = _tm + 24
	_min = int32(0)
	_range = int32(7)
	goto lnumeric_range

_40:
	_s = Xstrptime(tls, _s, Xnl_langinfo(tls, int32(0x20029)), _tm)
	if _s != 0 {
		goto _57
	}

	return null

_57:
	goto _14

_41:
	_s = Xstrptime(tls, _s, Xnl_langinfo(tls, int32(0x2002a)), _tm)
	if _s != 0 {
		goto _58
	}

	return null

_58:
	goto _14

_42:
	_dest = _relyear
	_w = int32(2)
	_want_century = _want_century | int32(1)
	goto lnumeric_digits

_43:
	_dest = _tm + 20
	if _w >= int32(0) {
		goto _59
	}

	_w = int32(4)
_59:
	_adj = int32(1900)
	_want_century = int32(0)
	goto lnumeric_digits

_44:
	if int32(*(*int8)(unsafe.Pointer(postinc1088(&_s)))) == int32('%') {
		goto _60
	}

	return null

_60:
	goto _14

_45:
	return null

	goto lnumeric_range
lnumeric_range:
	if uint32(*(*int8)(unsafe.Pointer(_s)))-uint32('0') < uint32(10) {
		goto _61
	}

	return null

_61:
	*(*int32)(unsafe.Pointer(_dest)) = int32(0)
	_i = int32(1)
_62:
	if _i > _min+_range || uint32(*(*int8)(unsafe.Pointer(_s)))-uint32('0') >= uint32(10) {
		goto _64
	}

	*(*int32)(unsafe.Pointer(_dest)) = *(*int32)(unsafe.Pointer(_dest))*int32(10) + int32(*(*int8)(unsafe.Pointer(postinc1088(&_s)))) - int32('0')
	_i = _i * int32(10)
	goto _62

_64:
	if uint32(*(*int32)(unsafe.Pointer(_dest))-_min) < uint32(_range) {
		goto _65
	}

	return null

_65:
	{
		p := (*int32)(unsafe.Pointer(_dest))
		*p = *p - _adj
	}
	X__assert_fail(tls, ts+0 /* "TODO(ccgo)" */, ts+7912 /* "src/time/strptim..." */, int32(170), x1090__func__)
	X__assert_fail(tls, ts+0 /* "TODO(ccgo)" */, ts+7912 /* "src/time/strptim..." */, int32(172), x1090__func__)
	X__assert_fail(tls, ts+0 /* "TODO(ccgo)" */, ts+7912 /* "src/time/strptim..." */, int32(174), x1090__func__)
	X__assert_fail(tls, ts+0 /* "TODO(ccgo)" */, ts+7912 /* "src/time/strptim..." */, int32(176), x1090__func__)
	goto lupdate

	goto lnumeric_digits
lnumeric_digits:
	_neg = int32(0)
	if int32(*(*int8)(unsafe.Pointer(_s))) != int32('+') {
		goto _66
	}

	_s++
	goto _67

_66:
	if int32(*(*int8)(unsafe.Pointer(_s))) != int32('-') {
		goto _68
	}

	_neg = int32(1)
	_s++
_68:
_67:
	if uint32(*(*int8)(unsafe.Pointer(_s)))-uint32('0') < uint32(10) {
		goto _69
	}

	return null

_69:
	*(*int32)(unsafe.Pointer(_dest)) = set1089(&_i, int32(0))
_70:
	if _i >= _w || uint32(*(*int8)(unsafe.Pointer(_s)))-uint32('0') >= uint32(10) {
		goto _72
	}

	*(*int32)(unsafe.Pointer(_dest)) = *(*int32)(unsafe.Pointer(_dest))*int32(10) + int32(*(*int8)(unsafe.Pointer(postinc1088(&_s)))) - int32('0')
	_i++
	goto _70

_72:
	if _neg == 0 {
		goto _73
	}

	*(*int32)(unsafe.Pointer(_dest)) = -*(*int32)(unsafe.Pointer(_dest))
_73:
	{
		p := (*int32)(unsafe.Pointer(_dest))
		*p = *p - _adj
	}
	goto lupdate

	goto lsymbolic_range
lsymbolic_range:
	_i = int32(2)*_range - int32(1)
_74:
	if _i < int32(0) {
		goto _76
	}

	_ex = Xnl_langinfo(tls, _min+_i)
	_len = Xstrlen(tls, _ex)
	if Xstrncasecmp(tls, _s, _ex, _len) == 0 {
		goto _77
	}

	goto _75

_77:
	_s += uintptr(_len)
	*(*int32)(unsafe.Pointer(_dest)) = _i % _range
	goto _76

_75:
	_i--
	goto _74

_76:
	if _i >= int32(0) {
		goto _78
	}

	return null

_78:
	goto lupdate

	goto lupdate
lupdate:
_14:
	goto _1

_2:
	if _want_century == 0 {
		goto _79
	}

	*(*int32)(unsafe.Pointer(_tm + 20)) = *(*int32)(unsafe.Pointer(_relyear))
	if (_want_century & int32(2)) == 0 {
		goto _80
	}

	{
		p := (*int32)(unsafe.Pointer(_tm + 20))
		*p = *p + (*(*int32)(unsafe.Pointer(_century))*int32(100) - int32(1900))
	}
	goto _81

_80:
	if *(*int32)(unsafe.Pointer(_tm + 20)) > int32(68) {
		goto _82
	}

	{
		p := (*int32)(unsafe.Pointer(_tm + 20))
		*p = *p + int32(100)
	}
_82:
_81:
_79:
	return _s
}

type t1199__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t1199__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type s16tm = struct {
	Ftm_sec    int32
	Ftm_min    int32
	Ftm_hour   int32
	Ftm_mday   int32
	Ftm_mon    int32
	Ftm_year   int32
	Ftm_wday   int32
	Ftm_yday   int32
	Ftm_isdst  int32
	Ftm_gmtoff int64
	Ftm_zone   uintptr // *int8
}

// x1__func__ [9]int8, escapes: true, strptime.c:11:1
var x1090__func__ = ds + 46944

type t393size_t = uint64

// x__isspace is defined at ctype.h:26:21
func x9__isspace(tls TLS, __c int32) (r int32) {
	return bool2int((__c == int32(' ')) || (uint32(__c)-uint32('\t') < uint32(5)))
}

type t3nl_item = int32

// linking time.o

// Xtime is defined at time.c:6:8
func Xtime(tls TLS, _t uintptr /* *Ttime_t = int64 */) (r int64) {
	esc := MustMalloc(16)
	var _ts = esc // *Stimespec
	defer Free(esc)
	X__clock_gettime(tls, int32(0), _ts)
	if _t == 0 {
		goto _1
	}

	*(*int64)(unsafe.Pointer(_t)) = *(*int64)(unsafe.Pointer(_ts))
_1:
	return *(*int64)(unsafe.Pointer(_ts))
}

type t1200__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t1200__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t81time_t = int64

type s61timespec = struct {
	Ftv_sec  int64
	Ftv_nsec int64
}

type t23clockid_t = int32

// linking timegm.o

// Xtimegm is defined at timegm.c:7:8
func Xtimegm(tls TLS, _tm uintptr /* *Stm */) (r int64) {
	esc := MustMalloc(56)
	var (
		_new = esc // *Stm
		_t   int64
	)
	defer Free(esc)
	_t = X__tm_to_secs(tls, _tm)
	if X__secs_to_tm(tls, _t, _new) >= int32(0) {
		goto _1
	}

	*(*int32)(unsafe.Pointer(X__errno_location(tls))) = int32(75)
	return int64(-1)

_1:
	*(*s17tm)(unsafe.Pointer(_tm)) = *(*s17tm)(unsafe.Pointer(_new))
	*(*int32)(unsafe.Pointer(_tm + 32)) = int32(0)
	*(*int64)(unsafe.Pointer(_tm + 40)) = int64(0)
	*(*uintptr)(unsafe.Pointer(_tm + 48)) = X__utc
	return _t
}

type t1201__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t1201__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t82time_t = int64

type s17tm = struct {
	Ftm_sec    int32
	Ftm_min    int32
	Ftm_hour   int32
	Ftm_mday   int32
	Ftm_mon    int32
	Ftm_year   int32
	Ftm_wday   int32
	Ftm_yday   int32
	Ftm_isdst  int32
	Ftm_gmtoff int64
	Ftm_zone   uintptr // *int8
}

// linking timer_create.o

func fp1091(f func(TLS)) uintptr { return *(*uintptr)(unsafe.Pointer(&f)) }

func fp1092(f func(TLS, uintptr) uintptr) uintptr { return *(*uintptr)(unsafe.Pointer(&f)) }

// Xtimer_create is defined at timer_create.c:94:5
func Xtimer_create(tls TLS, _clk int32, _evp uintptr /* *Ssigevent */, _res uintptr /* **void */) (r int32) {
	esc := MustMalloc(304)
	var (
		_td      = esc      // *Tpthread_t = *S__pthread
		_attr    = esc + 16 // *Tpthread_attr_t = struct{F__u st...[7]uint64;F int64; _ [48]byte};}
		_r       int32
		_args    = esc + 80  // *Sstart_args
		_ksev    = esc + 128 // *Sksigevent
		_ksevp   uintptr     // *Sksigevent
		_timerid = esc + 160 // *int32
		_set     = esc + 176 // *Tsigset_t = struct{F__bits [16]uint64;}
	)
	defer Free(esc)
	_ksevp = 0
	switch func() int32 {
		if _evp != 0 {
			return *(*int32)(unsafe.Pointer(_evp + 12))
		}
		return int32(0)
	}() {
	case int32(1):
		goto _2
	case int32(0):
		goto _3
	case int32(2):
		goto _4
	default:
		goto _5
	}
_2:
_3:
	if _evp == 0 {
		goto _6
	}

	*(*u10sigval)(unsafe.Pointer(_ksev)) = *(*u10sigval)(unsafe.Pointer(_evp))
	*(*int32)(unsafe.Pointer(_ksev + 8)) = *(*int32)(unsafe.Pointer(_evp + 8))
	*(*int32)(unsafe.Pointer(_ksev + 12)) = *(*int32)(unsafe.Pointer(_evp + 12))
	*(*int32)(unsafe.Pointer(_ksev + 16)) = int32(0)
	_ksevp = _ksev
_6:
	if X__syscall_ret(tls, uint64(x68__syscall3(tls, int64(222), int64(_clk), int64(_ksevp), int64(_timerid)))) >= int64(0) {
		goto _7
	}

	return int32(-1)

_7:
	*(*uintptr)(unsafe.Pointer(_res)) = uintptr(int64(*(*int32)(unsafe.Pointer(_timerid))))
	goto _1

_4:
	Xpthread_once(tls, x1093once, fp1091(xinstall_handler))
	if *(*uintptr)(unsafe.Pointer(_evp + 24)) == 0 {
		goto _8
	}

	*(*struct {
		F__u struct {
			F__i  [0][14]int32
			F__vi [0][14]int32
			F__s  [0][7]uint64
			F     int64
			_     [48]byte
		}
	})(unsafe.Pointer(_attr)) = *(*struct {
		F__u struct {
			F__i  [0][14]int32
			F__vi [0][14]int32
			F__s  [0][7]uint64
			F     int64
			_     [48]byte
		}
	})(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_evp + 24))))
	goto _9

_8:
	Xpthread_attr_init(tls, _attr)
_9:
	Xpthread_attr_setdetachstate(tls, _attr, int32(1))
	Xpthread_barrier_init(tls, _args, null, uint32(2))
	*(*uintptr)(unsafe.Pointer(_args + 32)) = _evp
	X__block_app_sigs(tls, _set)
	_r = Xpthread_create(tls, _td, _attr, fp1092(x2start), _args)
	X__restore_sigs(tls, _set)
	if _r == 0 {
		goto _10
	}

	*(*int32)(unsafe.Pointer(X__errno_location(tls))) = _r
	return int32(-1)

_10:
	*(*uintptr)(unsafe.Pointer(_ksev)) = null
	*(*int32)(unsafe.Pointer(_ksev + 8)) = int32(32)
	*(*int32)(unsafe.Pointer(_ksev + 12)) = int32(4)
	*(*int32)(unsafe.Pointer(_ksev + 16)) = *(*int32)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_td)) + 56))
	if X__syscall_ret(tls, uint64(x68__syscall3(tls, int64(222), int64(_clk), int64(_ksev), int64(_timerid)))) >= int64(0) {
		goto _11
	}

	*(*int32)(unsafe.Pointer(_timerid)) = int32(-1)
_11:
	*(*int32)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_td)) + 184)) = *(*int32)(unsafe.Pointer(_timerid))
	Xpthread_barrier_wait(tls, _args)
	if *(*int32)(unsafe.Pointer(_timerid)) >= int32(0) {
		goto _12
	}

	return int32(-1)

_12:
	*(*uintptr)(unsafe.Pointer(_res)) = uintptr(uint64(9223372036854775808) | uint64(*(*uintptr)(unsafe.Pointer(_td)))>>(uint(1)%64))
	goto _1

_5:
	*(*int32)(unsafe.Pointer(X__errno_location(tls))) = int32(22)
	return int32(-1)

_1:
	return int32(0)
}

type t1202__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t1202__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// xdummy_0 is defined at timer_create.c:18:13
func x1dummy_0(tls TLS) {
}

type t24clockid_t = int32

type s4sigevent = struct {
	Fsigev_value             u10sigval
	Fsigev_signo             int32
	Fsigev_notify            int32
	Fsigev_notify_function   uintptr // *func(TLS, Usigval)
	Fsigev_notify_attributes uintptr // *Tpthread_attr_t = struct{F__u s...[7]uint64;F int64; _ [48]byte};}
	F__pad                   [32]int8
}

// x2once Tpthread_once_t = int32, escapes: true, timer_create.c:96:24
var x1093once = bss + 9528

type s67__pthread = struct {
	Fself          uintptr // *S__pthread
	Fdtv           uintptr // **void
	Funused1       uintptr // *void
	Funused2       uintptr // *void
	Fsysinfo       uint64
	Fcanary        uint64
	Fcanary2       uint64
	Ftid           int32
	Ferrno_val     int32
	Fdetach_state  int32
	Fcancel        int32
	Fcanceldisable uint8
	Fcancelasync   uint8
	F74            uint8
	Fmap_base      uintptr // *uint8
	Fmap_size      uint64
	Fstack         uintptr // *void
	Fstack_size    uint64
	Fguard_size    uint64
	Fstart_arg     uintptr // *void
	Fstart         uintptr // *func(TLS, uintptr) uintptr
	Fresult        uintptr // *void
	Fcancelbuf     uintptr // *S__ptcb
	Ftsd           uintptr // **void
	Frobust_list   struct {
		Fhead    uintptr
		Foff     int64
		Fpending uintptr
	}
	Ftimer_id      int32
	Flocale        uintptr // Tlocale_t = *S__locale_struct
	Fkilllock      [1]int32
	Fdlerror_buf   uintptr // *int8
	Fstdio_locks   uintptr // *void
	Fcanary_at_end uint64
	Fdtv_copy      uintptr // **void
}

type Sstart_args = struct {
	Fb struct {
		F__u struct {
			F__i  [0][8]int32
			F__vi [0][8]int32
			F__p  [0][4]uintptr
			F     int64
			_     [24]byte
		}
	}
	Fsev uintptr // *Ssigevent
}

type Sksigevent = struct {
	Fsigev_value  u10sigval
	Fsigev_signo  int32
	Fsigev_notify int32
	Fsigev_tid    int32
}

type u10sigval = struct {
	Fsival_int [0]int32
	Fsival_ptr [0]uintptr // *void
	F          int64
}

// x__syscall3 is defined at syscall_arch.h:33:22
func x68__syscall3(tls TLS, _n int64, _a1 int64, _a2 int64, _a3 int64) (r int64) {
	return X__syscall(tls, _n, _a1, _a2, _a3, int64(0), int64(0), int64(0))
}

type t3intptr_t = int64

// xinstall_handler is defined at timer_create.c:53:13
func xinstall_handler(tls TLS) {
	X__assert_fail(tls, ts+0 /* "TODO(ccgo)" */, ts+7932 /* "src/time/timer_c..." */, int32(55), x1094__func__)
	X__assert_fail(tls, ts+0 /* "TODO(ccgo)" */, ts+7932 /* "src/time/timer_c..." */, int32(57), x1094__func__)
	X__assert_fail(tls, ts+0 /* "TODO(ccgo)" */, ts+7932 /* "src/time/timer_c..." */, int32(59), x1094__func__)
	X__assert_fail(tls, ts+0 /* "TODO(ccgo)" */, ts+7932 /* "src/time/timer_c..." */, int32(61), x1094__func__)
	X__assert_fail(tls, ts+0 /* "TODO(ccgo)" */, ts+7932 /* "src/time/timer_c..." */, int32(63), x1094__func__)
}

type t6pthread_attr_t = struct {
	F__u struct {
		F__i  [0][14]int32
		F__vi [0][14]int32
		F__s  [0][7]uint64
		F     int64
		_     [48]byte
	}
}

// xstart is defined at timer_create.c:67:13
func x2start(tls TLS, _arg uintptr /* *void */) (r uintptr /* *void */) {
	var (
		_self uintptr // Tpthread_t = *S__pthread
		_args uintptr // *Sstart_args
	)
	_self = x49__pthread_self(tls)
	_args = _arg
	*(*uintptr)(unsafe.Pointer(_self + 128)) = *(*uintptr)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_args + 32)) + 16))
	*(*uintptr)(unsafe.Pointer(_self + 120)) = *(*uintptr)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_args + 32))))
	Xpthread_barrier_wait(tls, _args)
	X__assert_fail(tls, ts+0 /* "TODO(ccgo)" */, ts+7932 /* "src/time/timer_c..." */, int32(79), x1095__func__)
	X__assert_fail(tls, ts+0 /* "TODO(ccgo)" */, ts+7932 /* "src/time/timer_c..." */, int32(81), x1095__func__)
	X__assert_fail(tls, ts+0 /* "TODO(ccgo)" */, ts+7932 /* "src/time/timer_c..." */, int32(83), x1095__func__)
	X__assert_fail(tls, ts+0 /* "TODO(ccgo)" */, ts+7932 /* "src/time/timer_c..." */, int32(85), x1095__func__)
	X__assert_fail(tls, ts+0 /* "TODO(ccgo)" */, ts+7932 /* "src/time/timer_c..." */, int32(87), x1095__func__)
	X__assert_fail(tls, ts+0 /* "TODO(ccgo)" */, ts+7932 /* "src/time/timer_c..." */, int32(89), x1095__func__)
	return null
}

type t85uintptr_t = uint64

type t394size_t = uint64

type s66__ptcb = struct {
	F__f    uintptr // *func(TLS, uintptr)
	F__x    uintptr // *void
	F__next uintptr // *S__ptcb
}

type s179__locale_struct = struct{ Fcat [6]uintptr }

type t1pthread_barrier_t = struct {
	F__u struct {
		F__i  [0][8]int32
		F__vi [0][8]int32
		F__p  [0][4]uintptr
		F     int64
		_     [24]byte
	}
}

// x6__func__ [16]int8, escapes: true, timer_create.c:54:1
var x1094__func__ = ds + 46960

// x7__func__ [6]int8, escapes: true, timer_create.c:68:1
var x1095__func__ = ds + 46976

// x__pthread_self is defined at pthread_arch.h:1:30
func x49__pthread_self(tls TLS) (r uintptr /* *S__pthread */) {
	return uintptr(tls)
	return r
}

// linking timer_delete.o

// Xtimer_delete is defined at timer_delete.c:5:5
func Xtimer_delete(tls TLS, _t uintptr /* Ttimer_t = *void */) (r int32) {
	var _td uintptr // Tpthread_t = *S__pthread

	if int64(_t) >= int64(0) {
		goto _1
	}

	_td = uintptr(uint64(_t) << (uint(1) % 64))
	x8a_store(tls, _td+184, *(*int32)(unsafe.Pointer(_td + 184))|int32(-2147483648))
	x15__wake(tls, _td+184, int32(1), int32(1))
	return int32(0)

_1:
	return int32(x42__syscall1(tls, int64(226), int64(_t)))
}

type t1203__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t1203__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type s68__pthread = struct {
	Fself          uintptr // *S__pthread
	Fdtv           uintptr // **void
	Funused1       uintptr // *void
	Funused2       uintptr // *void
	Fsysinfo       uint64
	Fcanary        uint64
	Fcanary2       uint64
	Ftid           int32
	Ferrno_val     int32
	Fdetach_state  int32
	Fcancel        int32
	Fcanceldisable uint8
	Fcancelasync   uint8
	F74            uint8
	Fmap_base      uintptr // *uint8
	Fmap_size      uint64
	Fstack         uintptr // *void
	Fstack_size    uint64
	Fguard_size    uint64
	Fstart_arg     uintptr // *void
	Fstart         uintptr // *func(TLS, uintptr) uintptr
	Fresult        uintptr // *void
	Fcancelbuf     uintptr // *S__ptcb
	Ftsd           uintptr // **void
	Frobust_list   struct {
		Fhead    uintptr
		Foff     int64
		Fpending uintptr
	}
	Ftimer_id      int32
	Flocale        uintptr // Tlocale_t = *S__locale_struct
	Fkilllock      [1]int32
	Fdlerror_buf   uintptr // *int8
	Fstdio_locks   uintptr // *void
	Fcanary_at_end uint64
	Fdtv_copy      uintptr // **void
}

type t4intptr_t = int64

type t86uintptr_t = uint64

// xa_store is defined at atomic_arch.h:98:20
func x8a_store(tls TLS, _p uintptr /* *int32 */, _x int32) {
	X__assert_fail(tls, ts+0 /* "TODO(ccgo)" */, ts+36 /* "arch/x86_64/atom..." */, int32(100), x1096__func__)
}

// x__wake is defined at pthread_impl.h:154:20
func x15__wake(tls TLS, _addr uintptr /* *void */, _cnt int32, _priv int32) {
	if _priv == 0 {
		goto _1
	}

	_priv = int32(128)
_1:
	if _cnt >= int32(0) {
		goto _2
	}

	_cnt = int32(0x7fffffff)
_2:
	if x69__syscall3(tls, int64(202), int64(_addr), int64(int32(1)|_priv), int64(_cnt)) == int64(-38) {
		x69__syscall3(tls, int64(202), int64(_addr), int64(1), int64(_cnt))
	}
}

// x__syscall1 is defined at syscall_arch.h:16:22
func x42__syscall1(tls TLS, _n int64, _a1 int64) (r int64) {
	return X__syscall(tls, _n, _a1, int64(0), int64(0), int64(0), int64(0), int64(0))
}

type t395size_t = uint64

type s67__ptcb = struct {
	F__f    uintptr // *func(TLS, uintptr)
	F__x    uintptr // *void
	F__next uintptr // *S__ptcb
}

type s180__locale_struct = struct{ Fcat [6]uintptr }

// x4__func__ [8]int8, escapes: true, atomic_arch.h:99:1
var x1096__func__ = ds + 46984

// x__syscall3 is defined at syscall_arch.h:33:22
func x69__syscall3(tls TLS, _n int64, _a1 int64, _a2 int64, _a3 int64) (r int64) {
	return X__syscall(tls, _n, _a1, _a2, _a3, int64(0), int64(0), int64(0))
}

// linking timer_getoverrun.o

// Xtimer_getoverrun is defined at timer_getoverrun.c:5:5
func Xtimer_getoverrun(tls TLS, _t uintptr /* Ttimer_t = *void */) (r int32) {
	var _td uintptr // Tpthread_t = *S__pthread

	if int64(_t) >= int64(0) {
		goto _1
	}

	_td = uintptr(uint64(_t) << (uint(1) % 64))
	_t = uintptr(uint64(*(*int32)(unsafe.Pointer(_td + 184)) & int32(0x7fffffff)))
_1:
	return int32(X__syscall_ret(tls, uint64(x43__syscall1(tls, int64(225), int64(_t)))))
}

type t1204__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t1204__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type s69__pthread = struct {
	Fself          uintptr // *S__pthread
	Fdtv           uintptr // **void
	Funused1       uintptr // *void
	Funused2       uintptr // *void
	Fsysinfo       uint64
	Fcanary        uint64
	Fcanary2       uint64
	Ftid           int32
	Ferrno_val     int32
	Fdetach_state  int32
	Fcancel        int32
	Fcanceldisable uint8
	Fcancelasync   uint8
	F74            uint8
	Fmap_base      uintptr // *uint8
	Fmap_size      uint64
	Fstack         uintptr // *void
	Fstack_size    uint64
	Fguard_size    uint64
	Fstart_arg     uintptr // *void
	Fstart         uintptr // *func(TLS, uintptr) uintptr
	Fresult        uintptr // *void
	Fcancelbuf     uintptr // *S__ptcb
	Ftsd           uintptr // **void
	Frobust_list   struct {
		Fhead    uintptr
		Foff     int64
		Fpending uintptr
	}
	Ftimer_id      int32
	Flocale        uintptr // Tlocale_t = *S__locale_struct
	Fkilllock      [1]int32
	Fdlerror_buf   uintptr // *int8
	Fstdio_locks   uintptr // *void
	Fcanary_at_end uint64
	Fdtv_copy      uintptr // **void
}

type t5intptr_t = int64

type t87uintptr_t = uint64

// x__syscall1 is defined at syscall_arch.h:16:22
func x43__syscall1(tls TLS, _n int64, _a1 int64) (r int64) {
	return X__syscall(tls, _n, _a1, int64(0), int64(0), int64(0), int64(0), int64(0))
}

type t396size_t = uint64

type s68__ptcb = struct {
	F__f    uintptr // *func(TLS, uintptr)
	F__x    uintptr // *void
	F__next uintptr // *S__ptcb
}

type s181__locale_struct = struct{ Fcat [6]uintptr }

// linking timer_gettime.o

// Xtimer_gettime is defined at timer_gettime.c:5:5
func Xtimer_gettime(tls TLS, _t uintptr /* Ttimer_t = *void */, _val uintptr /* *Sitimerspec */) (r int32) {
	var _td uintptr // Tpthread_t = *S__pthread

	if int64(_t) >= int64(0) {
		goto _1
	}

	_td = uintptr(uint64(_t) << (uint(1) % 64))
	_t = uintptr(uint64(*(*int32)(unsafe.Pointer(_td + 184)) & int32(0x7fffffff)))
_1:
	return int32(X__syscall_ret(tls, uint64(x60__syscall2(tls, int64(224), int64(_t), int64(_val)))))
}

type t1205__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t1205__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type s1itimerspec = struct {
	Fit_interval s62timespec
	Fit_value    s62timespec
}

type s70__pthread = struct {
	Fself          uintptr // *S__pthread
	Fdtv           uintptr // **void
	Funused1       uintptr // *void
	Funused2       uintptr // *void
	Fsysinfo       uint64
	Fcanary        uint64
	Fcanary2       uint64
	Ftid           int32
	Ferrno_val     int32
	Fdetach_state  int32
	Fcancel        int32
	Fcanceldisable uint8
	Fcancelasync   uint8
	F74            uint8
	Fmap_base      uintptr // *uint8
	Fmap_size      uint64
	Fstack         uintptr // *void
	Fstack_size    uint64
	Fguard_size    uint64
	Fstart_arg     uintptr // *void
	Fstart         uintptr // *func(TLS, uintptr) uintptr
	Fresult        uintptr // *void
	Fcancelbuf     uintptr // *S__ptcb
	Ftsd           uintptr // **void
	Frobust_list   struct {
		Fhead    uintptr
		Foff     int64
		Fpending uintptr
	}
	Ftimer_id      int32
	Flocale        uintptr // Tlocale_t = *S__locale_struct
	Fkilllock      [1]int32
	Fdlerror_buf   uintptr // *int8
	Fstdio_locks   uintptr // *void
	Fcanary_at_end uint64
	Fdtv_copy      uintptr // **void
}

type t6intptr_t = int64

type t88uintptr_t = uint64

// x__syscall2 is defined at syscall_arch.h:24:22
func x60__syscall2(tls TLS, _n int64, _a1 int64, _a2 int64) (r int64) {
	return X__syscall(tls, _n, _a1, _a2, int64(0), int64(0), int64(0), int64(0))
}

type s62timespec = struct {
	Ftv_sec  int64
	Ftv_nsec int64
}

type t397size_t = uint64

type s69__ptcb = struct {
	F__f    uintptr // *func(TLS, uintptr)
	F__x    uintptr // *void
	F__next uintptr // *S__ptcb
}

type s182__locale_struct = struct{ Fcat [6]uintptr }

type t83time_t = int64

// linking timer_settime.o

// Xtimer_settime is defined at timer_settime.c:5:5
func Xtimer_settime(tls TLS, _t uintptr /* Ttimer_t = *void */, _flags int32, _val uintptr /* *Sitimerspec */, _old uintptr /* *Sitimerspec */) (r int32) {
	var _td uintptr // Tpthread_t = *S__pthread

	if int64(_t) >= int64(0) {
		goto _1
	}

	_td = uintptr(uint64(_t) << (uint(1) % 64))
	_t = uintptr(uint64(*(*int32)(unsafe.Pointer(_td + 184)) & int32(0x7fffffff)))
_1:
	return int32(X__syscall_ret(tls, uint64(x34__syscall4(tls, int64(223), int64(_t), int64(_flags), int64(_val), int64(_old)))))
}

type t1206__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t1206__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type s2itimerspec = struct {
	Fit_interval s63timespec
	Fit_value    s63timespec
}

type s71__pthread = struct {
	Fself          uintptr // *S__pthread
	Fdtv           uintptr // **void
	Funused1       uintptr // *void
	Funused2       uintptr // *void
	Fsysinfo       uint64
	Fcanary        uint64
	Fcanary2       uint64
	Ftid           int32
	Ferrno_val     int32
	Fdetach_state  int32
	Fcancel        int32
	Fcanceldisable uint8
	Fcancelasync   uint8
	F74            uint8
	Fmap_base      uintptr // *uint8
	Fmap_size      uint64
	Fstack         uintptr // *void
	Fstack_size    uint64
	Fguard_size    uint64
	Fstart_arg     uintptr // *void
	Fstart         uintptr // *func(TLS, uintptr) uintptr
	Fresult        uintptr // *void
	Fcancelbuf     uintptr // *S__ptcb
	Ftsd           uintptr // **void
	Frobust_list   struct {
		Fhead    uintptr
		Foff     int64
		Fpending uintptr
	}
	Ftimer_id      int32
	Flocale        uintptr // Tlocale_t = *S__locale_struct
	Fkilllock      [1]int32
	Fdlerror_buf   uintptr // *int8
	Fstdio_locks   uintptr // *void
	Fcanary_at_end uint64
	Fdtv_copy      uintptr // **void
}

type t7intptr_t = int64

type t89uintptr_t = uint64

// x__syscall4 is defined at syscall_arch.h:42:22
func x34__syscall4(tls TLS, _n int64, _a1 int64, _a2 int64, _a3 int64, _a4 int64) (r int64) {
	return X__syscall(tls, _n, _a1, _a2, _a3, _a4, int64(0), int64(0))
}

type s63timespec = struct {
	Ftv_sec  int64
	Ftv_nsec int64
}

type t398size_t = uint64

type s70__ptcb = struct {
	F__f    uintptr // *func(TLS, uintptr)
	F__x    uintptr // *void
	F__next uintptr // *S__ptcb
}

type s183__locale_struct = struct{ Fcat [6]uintptr }

type t84time_t = int64

// linking times.o

// Xtimes is defined at times.c:4:9
func Xtimes(tls TLS, _tms uintptr /* *Stms */) (r int64) {
	return x44__syscall1(tls, int64(100), int64(_tms))
}

type t1207__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t1207__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t8clock_t = int64

type Stms = struct {
	Ftms_utime  int64
	Ftms_stime  int64
	Ftms_cutime int64
	Ftms_cstime int64
}

// x__syscall1 is defined at syscall_arch.h:16:22
func x44__syscall1(tls TLS, _n int64, _a1 int64) (r int64) {
	return X__syscall(tls, _n, _a1, int64(0), int64(0), int64(0), int64(0), int64(0))
}

// linking timespec_get.o

// Xtimespec_get is defined at timespec_get.c:7:5
func Xtimespec_get(tls TLS, _ts uintptr /* *Stimespec */, _base int32) (r int32) {
	var _ret int32

	if _base == int32(1) {
		goto _1
	}

	return int32(0)

_1:
	_ret = X__clock_gettime(tls, int32(0), _ts)
	if _ret < int32(0) {
		return int32(0)
	}

	return _base
}

type t1208__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t1208__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type s64timespec = struct {
	Ftv_sec  int64
	Ftv_nsec int64
}

type t85time_t = int64

type t25clockid_t = int32

// linking utime.o

// Xutime is defined at utime.c:7:5
func Xutime(tls TLS, _path uintptr /* *int8 */, _times uintptr /* *Sutimbuf */) (r int32) {
	esc := MustMalloc(32)
	var _ts = esc // *[2]Stimespec
	defer Free(esc)
	Copy(_ts, ts+2940 /* "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00..." */, 32)
	if _times == 0 {
		goto _1
	}

	*(*int64)(unsafe.Pointer(_ts)) = *(*int64)(unsafe.Pointer(_times))
	*(*int64)(unsafe.Pointer(_ts + 16)) = *(*int64)(unsafe.Pointer(_times + 8))
_1:
	return Xutimensat(tls, int32(-100), _path, _ts, int32(0))
}

type t1209__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t1209__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type Sutimbuf = struct {
	Factime  int64
	Fmodtime int64
}

type s65timespec = struct {
	Ftv_sec  int64
	Ftv_nsec int64
}

type t86time_t = int64

// linking wcsftime.o

func postinc1097(p *uint64) uint64 { r := *p; *p += 1; return r }

func postinc1098(p *uintptr) uintptr { r := *p; *p += 4; return r }

func set1099(p *int32, v int32) int32 { *p = v; return v }

// X__wcsftime_l is defined at wcsftime.c:9:8
func X__wcsftime_l(tls TLS, _s uintptr /* *Twchar_t = int32 */, _n uint64, _f uintptr /* *Twchar_t = int32 */, _tm uintptr /* *Stm */, _loc uintptr /* Tlocale_t = *S__locale_struct */) (r uint64) {
	esc := MustMalloc(536)
	var (
		_l     uint64
		_k     = esc       // *Tsize_t = uint64
		_buf   = esc + 16  // *[100]int8
		_wbuf  = esc + 128 // *[100]int32
		_p     = esc + 528 // **Twchar_t = int32
		_t_mb  uintptr     // *int8
		_t     uintptr     // *Twchar_t = int32
		_pad   int32
		_plus  int32
		_width uint64
	)
	defer Free(esc)
	_l = uint64(0)
_1:
	if _l >= _n {
		goto _3
	}

	if *(*int32)(unsafe.Pointer(_f)) != 0 {
		goto _4
	}

	*(*int32)(unsafe.Pointer(_s + 4*uintptr(_l))) = int32(0)
	return _l

_4:
	if *(*int32)(unsafe.Pointer(_f)) == int32('%') {
		goto _5
	}

	*(*int32)(unsafe.Pointer(_s + 4*uintptr(postinc1097(&_l)))) = *(*int32)(unsafe.Pointer(_f))
	goto _2

_5:
	_f += 4
	_pad = int32(0)
	if *(*int32)(unsafe.Pointer(_f)) != int32('-') && *(*int32)(unsafe.Pointer(_f)) != int32('_') && *(*int32)(unsafe.Pointer(_f)) != int32('0') {
		goto _6
	}

	_pad = *(*int32)(unsafe.Pointer(postinc1098(&_f)))
_6:
	if set1099(&_plus, bool2int(*(*int32)(unsafe.Pointer(_f)) == int32('+'))) == 0 {
		goto _7
	}

	_f += 4
_7:
	_width = Xwcstoul(tls, _f, _p, int32(10))
	if *(*int32)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_p)))) != int32('C') && *(*int32)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_p)))) != int32('F') && *(*int32)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_p)))) != int32('G') && *(*int32)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(_p)))) != int32('Y') {
		goto _8
	}

	if _width != 0 || *(*uintptr)(unsafe.Pointer(_p)) == _f {
		goto _10
	}

	_width = uint64(1)
_10:
	goto _9

_8:
	_width = uint64(0)
_9:
	_f = *(*uintptr)(unsafe.Pointer(_p))
	if *(*int32)(unsafe.Pointer(_f)) != int32('E') && *(*int32)(unsafe.Pointer(_f)) != int32('O') {
		goto _11
	}

	_f += 4
_11:
	_t_mb = X__strftime_fmt_1(tls, _buf, _k, *(*int32)(unsafe.Pointer(_f)), _tm, _loc, _pad)
	if _t_mb != 0 {
		goto _12
	}

	goto _3

_12:
	*(*uint64)(unsafe.Pointer(_k)) = Xmbstowcs(tls, _wbuf, _t_mb, uint64(100))
	if *(*uint64)(unsafe.Pointer(_k)) != uint64(18446744073709551615) {
		goto _13
	}

	return uint64(0)

_13:
	_t = _wbuf
	if _width == 0 {
		goto _14
	}

_15:
	if *(*int32)(unsafe.Pointer(_t)) != int32('+') && *(*int32)(unsafe.Pointer(_t)) != int32('-') && (*(*int32)(unsafe.Pointer(_t)) != int32('0') || *(*int32)(unsafe.Pointer(_t + 4)) == 0) {
		goto _17
	}

	_t += 4
	*(*uint64)(unsafe.Pointer(_k))--
	goto _15

_17:
	_width--
	if _plus == 0 || *(*int32)(unsafe.Pointer(_tm + 20)) < int32(8100) {
		goto _18
	}

	*(*int32)(unsafe.Pointer(_s + 4*uintptr(postinc1097(&_l)))) = int32('+')
	goto _19

_18:
	if *(*int32)(unsafe.Pointer(_tm + 20)) >= int32(-1900) {
		goto _20
	}

	*(*int32)(unsafe.Pointer(_s + 4*uintptr(postinc1097(&_l)))) = int32('-')
	goto _21

_20:
	_width++
_21:
_19:
_22:
	if _width <= *(*uint64)(unsafe.Pointer(_k)) || _l >= _n {
		goto _24
	}

	*(*int32)(unsafe.Pointer(_s + 4*uintptr(postinc1097(&_l)))) = int32('0')
	_width--
	goto _22

_24:
_14:
	if *(*uint64)(unsafe.Pointer(_k)) < _n-_l {
		goto _25
	}

	*(*uint64)(unsafe.Pointer(_k)) = _n - _l
_25:
	Xwmemcpy(tls, _s+4*uintptr(_l), _t, *(*uint64)(unsafe.Pointer(_k)))
	_l = _l + *(*uint64)(unsafe.Pointer(_k))

_2:
	_f += 4
	goto _1

_3:
	if _n == 0 {
		goto _26
	}

	if _l != _n {
		goto _27
	}

	_l = _n - uint64(1)
_27:
	*(*int32)(unsafe.Pointer(_s + 4*uintptr(_l))) = int32(0)
_26:
	return uint64(0)
}

// Xwcsftime is defined at wcsftime.c:68:8
func Xwcsftime(tls TLS, _wcs uintptr /* *Twchar_t = int32 */, _n uint64, _f uintptr /* *Twchar_t = int32 */, _tm uintptr /* *Stm */) (r uint64) {
	return X__wcsftime_l(tls, _wcs, _n, _f, _tm, *(*uintptr)(unsafe.Pointer(x50__pthread_self(tls) + 192)))
}

type t1210__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t1210__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t399size_t = uint64

type s18tm = struct {
	Ftm_sec    int32
	Ftm_min    int32
	Ftm_hour   int32
	Ftm_mday   int32
	Ftm_mon    int32
	Ftm_year   int32
	Ftm_wday   int32
	Ftm_yday   int32
	Ftm_isdst  int32
	Ftm_gmtoff int64
	Ftm_zone   uintptr // *int8
}

type s184__locale_struct = struct{ Fcat [6]uintptr }

type t56wchar_t = int32

// x__pthread_self is defined at pthread_arch.h:1:30
func x50__pthread_self(tls TLS) (r uintptr /* *S__pthread */) {
	return uintptr(tls)
	return r
}

type s72__pthread = struct {
	Fself          uintptr // *S__pthread
	Fdtv           uintptr // **void
	Funused1       uintptr // *void
	Funused2       uintptr // *void
	Fsysinfo       uint64
	Fcanary        uint64
	Fcanary2       uint64
	Ftid           int32
	Ferrno_val     int32
	Fdetach_state  int32
	Fcancel        int32
	Fcanceldisable uint8
	Fcancelasync   uint8
	F74            uint8
	Fmap_base      uintptr // *uint8
	Fmap_size      uint64
	Fstack         uintptr // *void
	Fstack_size    uint64
	Fguard_size    uint64
	Fstart_arg     uintptr // *void
	Fstart         uintptr // *func(TLS, uintptr) uintptr
	Fresult        uintptr // *void
	Fcancelbuf     uintptr // *S__ptcb
	Ftsd           uintptr // **void
	Frobust_list   struct {
		Fhead    uintptr
		Foff     int64
		Fpending uintptr
	}
	Ftimer_id      int32
	Flocale        uintptr // Tlocale_t = *S__locale_struct
	Fkilllock      [1]int32
	Fdlerror_buf   uintptr // *int8
	Fstdio_locks   uintptr // *void
	Fcanary_at_end uint64
	Fdtv_copy      uintptr // **void
}

type t90uintptr_t = uint64

type s71__ptcb = struct {
	F__f    uintptr // *func(TLS, uintptr)
	F__x    uintptr // *void
	F__next uintptr // *S__ptcb
}

// linking _exit.o

// X_exit is defined at _exit.c:4:16
func X_exit(tls TLS, _status int32) {
	X_Exit(tls, _status)
}

type t1211__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t1211__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// linking access.o

// Xaccess is defined at access.c:5:5
func Xaccess(tls TLS, _filename uintptr /* *int8 */, _amode int32) (r int32) {
	return int32(X__syscall_ret(tls, uint64(x61__syscall2(tls, int64(21), int64(_filename), int64(_amode)))))
}

type t1212__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t1212__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// x__syscall2 is defined at syscall_arch.h:24:22
func x61__syscall2(tls TLS, _n int64, _a1 int64, _a2 int64) (r int64) {
	return X__syscall(tls, _n, _a1, _a2, int64(0), int64(0), int64(0), int64(0))
}

// linking acct.o

// Xacct is defined at acct.c:6:5
func Xacct(tls TLS, _filename uintptr /* *int8 */) (r int32) {
	return int32(X__syscall_ret(tls, uint64(x45__syscall1(tls, int64(163), int64(_filename)))))
}

type t1213__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t1213__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// x__syscall1 is defined at syscall_arch.h:16:22
func x45__syscall1(tls TLS, _n int64, _a1 int64) (r int64) {
	return X__syscall(tls, _n, _a1, int64(0), int64(0), int64(0), int64(0), int64(0))
}

// linking alarm.o

// Xalarm is defined at alarm.c:6:10
func Xalarm(tls TLS, _seconds uint32) (r uint32) {
	X__assert_fail(tls, ts+0 /* "TODO(ccgo)" */, ts+7956 /* "src/unistd/alarm..." */, int32(8), x1100__func__)
	X__assert_fail(tls, ts+0 /* "TODO(ccgo)" */, ts+7956 /* "src/unistd/alarm..." */, int32(10), x1100__func__)
	X__assert_fail(tls, ts+0 /* "TODO(ccgo)" */, ts+7956 /* "src/unistd/alarm..." */, int32(12), x1100__func__)
	return r
}

type t1214__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t1214__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// x1__func__ [6]int8, escapes: true, alarm.c:7:1
var x1100__func__ = ds + 46992

// linking chdir.o

// Xchdir is defined at chdir.c:4:5
func Xchdir(tls TLS, _path uintptr /* *int8 */) (r int32) {
	return int32(X__syscall_ret(tls, uint64(x46__syscall1(tls, int64(80), int64(_path)))))
}

type t1215__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t1215__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// x__syscall1 is defined at syscall_arch.h:16:22
func x46__syscall1(tls TLS, _n int64, _a1 int64) (r int64) {
	return X__syscall(tls, _n, _a1, int64(0), int64(0), int64(0), int64(0), int64(0))
}

// linking chown.o

// Xchown is defined at chown.c:5:5
func Xchown(tls TLS, _path uintptr /* *int8 */, _uid uint32, _gid uint32) (r int32) {
	return int32(X__syscall_ret(tls, uint64(x70__syscall3(tls, int64(92), int64(_path), int64(_uid), int64(_gid)))))
}

type t1216__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t1216__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t35uid_t = uint32

type t36gid_t = uint32

// x__syscall3 is defined at syscall_arch.h:33:22
func x70__syscall3(tls TLS, _n int64, _a1 int64, _a2 int64, _a3 int64) (r int64) {
	return X__syscall(tls, _n, _a1, _a2, _a3, int64(0), int64(0), int64(0))
}

// linking close.o

// Xclose is defined at close.c:14:5
func Xclose(tls TLS, _fd int32) (r int32) {
	var _r int32

	_fd = X__aio_close(tls, _fd)
	_r = int32(X__syscall_cp(tls, int64(3), int64(_fd), int64(0), int64(0), int64(0), int64(0), int64(0)))
	if _r != int32(-4) {
		goto _1
	}

	_r = int32(0)
_1:
	return int32(X__syscall_ret(tls, uint64(_r)))
}

type t1217__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t1217__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// xdummy is defined at close.c:7:12
func x18dummy(tls TLS, _fd int32) (r int32) {
	return _fd
}

type t10syscall_arg_t = int64

// linking ctermid.o

// Xctermid is defined at ctermid.c:4:6
func Xctermid(tls TLS, _s uintptr /* *int8 */) (r uintptr /* *int8 */) {
	if _s != 0 {
		return Xstrcpy(tls, _s, ts+1428 /* "/dev/tty" */)
	}

	return ts + 1428 /* "/dev/tty" */
}

type t1218__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t1218__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// linking dup.o

// Xdup is defined at dup.c:4:5
func Xdup(tls TLS, _fd int32) (r int32) {
	return int32(X__syscall_ret(tls, uint64(x47__syscall1(tls, int64(32), int64(_fd)))))
}

type t1219__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t1219__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// x__syscall1 is defined at syscall_arch.h:16:22
func x47__syscall1(tls TLS, _n int64, _a1 int64) (r int64) {
	return X__syscall(tls, _n, _a1, int64(0), int64(0), int64(0), int64(0), int64(0))
}

// linking dup2.o

func set1101(p *int32, v int32) int32 { *p = v; return v }

// Xdup2 is defined at dup2.c:6:5
func Xdup2(tls TLS, _old int32, _new int32) (r int32) {
	var _r int32

_1:
	if set1101(&_r, int32(x62__syscall2(tls, int64(33), int64(_old), int64(_new)))) != int32(-16) {
		goto _2
	}

	goto _1

_2:
	return int32(X__syscall_ret(tls, uint64(_r)))
}

type t1220__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t1220__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// x__syscall2 is defined at syscall_arch.h:24:22
func x62__syscall2(tls TLS, _n int64, _a1 int64, _a2 int64) (r int64) {
	return X__syscall(tls, _n, _a1, _a2, int64(0), int64(0), int64(0), int64(0))
}

// linking dup3.o

func set1102(p *int32, v int32) int32 { *p = v; return v }

// X__dup3 is defined at dup3.c:8:5
func X__dup3(tls TLS, _old int32, _new int32, _flags int32) (r int32) {
	var _r int32

	if _old != _new {
		goto _1
	}

	return int32(X__syscall_ret(tls, uint64(18446744073709551594)))

_1:
	if (_flags & int32(02000000)) == 0 {
		goto _2
	}

_3:
	if set1102(&_r, int32(x71__syscall3(tls, int64(292), int64(_old), int64(_new), int64(_flags)))) != int32(-16) {
		goto _4
	}

	goto _3

_4:
	if _r == int32(-38) {
		goto _5
	}

	return int32(X__syscall_ret(tls, uint64(_r)))

_5:
_2:
_6:
	if set1102(&_r, int32(x63__syscall2(tls, int64(33), int64(_old), int64(_new)))) != int32(-16) {
		goto _7
	}

	goto _6

_7:
	if (_flags & int32(02000000)) == 0 {
		goto _8
	}

	x71__syscall3(tls, int64(72), int64(_new), int64(2), int64(1))
_8:
	return int32(X__syscall_ret(tls, uint64(_r)))
}

type t1221__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t1221__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// x__syscall3 is defined at syscall_arch.h:33:22
func x71__syscall3(tls TLS, _n int64, _a1 int64, _a2 int64, _a3 int64) (r int64) {
	return X__syscall(tls, _n, _a1, _a2, _a3, int64(0), int64(0), int64(0))
}

// x__syscall2 is defined at syscall_arch.h:24:22
func x63__syscall2(tls TLS, _n int64, _a1 int64, _a2 int64) (r int64) {
	return X__syscall(tls, _n, _a1, _a2, int64(0), int64(0), int64(0), int64(0))
}

// linking faccessat.o

func fp1103(f func(TLS, uintptr) int32) uintptr { return *(*uintptr)(unsafe.Pointer(&f)) }

// Xfaccessat is defined at faccessat.c:26:5
func Xfaccessat(tls TLS, _fd int32, _filename uintptr /* *int8 */, _amode int32, _flag int32) (r int32) {
	esc := MustMalloc(1224)
	var (
		_stack  = esc        // *[1024]int8
		_set    = esc + 1024 // *Tsigset_t = struct{F__bits [16]uint64;}
		_pid    int32
		_status = esc + 1152 // *int32
		_ret    = esc + 1168 // *int32
		_p      = esc + 1184 // *[2]int32
		_c      = esc + 1200 // *Sctx
	)
	defer Free(esc)
	if _flag != 0 && (_flag != int32(0x200) || Xgetuid(tls) != Xgeteuid(tls) || Xgetgid(tls) != Xgetegid(tls)) {
		goto _1
	}

	return int32(X__syscall_ret(tls, uint64(x35__syscall4(tls, int64(269), int64(_fd), int64(_filename), int64(_amode), int64(_flag)))))

_1:
	if _flag == int32(0x200) {
		goto _2
	}

	return int32(X__syscall_ret(tls, uint64(18446744073709551594)))

_2:
	if Xpipe2(tls, _p, int32(02000000)) == 0 {
		goto _3
	}

	return int32(X__syscall_ret(tls, uint64(18446744073709551600)))

_3:
	*(*s1ctx)(unsafe.Pointer(_c)) = s1ctx{
		Ffd:       _fd,
		Ffilename: _filename,
		Famode:    _amode,
		Fp:        *(*int32)(unsafe.Pointer(_p + 4)),
	}
	X__block_all_sigs(tls, _set)
	_pid = X__clone(tls, fp1103(xchecker), _stack+uintptr(1024), int32(0), _c)
	x48__syscall1(tls, int64(3), int64(*(*int32)(unsafe.Pointer(_p + 4))))
	if _pid >= int32(0) && uint64(x72__syscall3(tls, int64(0), int64(*(*int32)(unsafe.Pointer(_p))), int64(_ret), int64(4))) == uint64(4) {
		goto _4
	}

	*(*int32)(unsafe.Pointer(_ret)) = int32(-16)
_4:
	x48__syscall1(tls, int64(3), int64(*(*int32)(unsafe.Pointer(_p))))
	x35__syscall4(tls, int64(61), int64(_pid), int64(_status), int64(2147483648), int64(0))
	X__restore_sigs(tls, _set)
	return int32(X__syscall_ret(tls, uint64(*(*int32)(unsafe.Pointer(_ret)))))
}

type t1222__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t1222__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t50pid_t = int32

type s1ctx = struct {
	Ffd       int32
	Ffilename uintptr // *int8
	Famode    int32
	Fp        int32
}

type t36uid_t = uint32

type t37gid_t = uint32

// x__syscall4 is defined at syscall_arch.h:42:22
func x35__syscall4(tls TLS, _n int64, _a1 int64, _a2 int64, _a3 int64, _a4 int64) (r int64) {
	return X__syscall(tls, _n, _a1, _a2, _a3, _a4, int64(0), int64(0))
}

// xchecker is defined at faccessat.c:14:12
func xchecker(tls TLS, _p uintptr /* *void */) (r int32) {
	esc := MustMalloc(4)
	var (
		_c   uintptr // *Sctx
		_ret = esc   // *int32
	)
	defer Free(esc)
	_c = _p
	if x64__syscall2(tls, int64(114), x8__syscall0(tls, int64(108)), int64(-1)) == 0 && x64__syscall2(tls, int64(113), x8__syscall0(tls, int64(107)), int64(-1)) == 0 {
		goto _1
	}

	x48__syscall1(tls, int64(60), int64(1))
_1:
	*(*int32)(unsafe.Pointer(_ret)) = int32(x35__syscall4(tls, int64(269), int64(*(*int32)(unsafe.Pointer(_c))), int64(*(*uintptr)(unsafe.Pointer(_c + 8))), int64(*(*int32)(unsafe.Pointer(_c + 16))), int64(0)))
	x72__syscall3(tls, int64(1), int64(*(*int32)(unsafe.Pointer(_c + 20))), int64(_ret), int64(4))
	return int32(0)
}

// x__syscall1 is defined at syscall_arch.h:16:22
func x48__syscall1(tls TLS, _n int64, _a1 int64) (r int64) {
	return X__syscall(tls, _n, _a1, int64(0), int64(0), int64(0), int64(0), int64(0))
}

// x__syscall3 is defined at syscall_arch.h:33:22
func x72__syscall3(tls TLS, _n int64, _a1 int64, _a2 int64, _a3 int64) (r int64) {
	return X__syscall(tls, _n, _a1, _a2, _a3, int64(0), int64(0), int64(0))
}

// x__syscall2 is defined at syscall_arch.h:24:22
func x64__syscall2(tls TLS, _n int64, _a1 int64, _a2 int64) (r int64) {
	return X__syscall(tls, _n, _a1, _a2, int64(0), int64(0), int64(0), int64(0))
}

// x__syscall0 is defined at syscall_arch.h:8:22
func x8__syscall0(tls TLS, _n int64) (r int64) {
	return X__syscall(tls, _n, int64(0), int64(0), int64(0), int64(0), int64(0), int64(0))
}

// linking fchdir.o

// Xfchdir is defined at fchdir.c:8:5
func Xfchdir(tls TLS, _fd int32) (r int32) {
	esc := MustMalloc(27)
	var (
		_ret int32
		_buf = esc // *[27]int8
	)
	defer Free(esc)
	_ret = int32(x49__syscall1(tls, int64(81), int64(_fd)))
	if _ret == int32(-9) && x65__syscall2(tls, int64(72), int64(_fd), int64(1)) >= int64(0) {
		goto _1
	}

	return int32(X__syscall_ret(tls, uint64(_ret)))

_1:
	X__procfdname(tls, _buf, uint32(_fd))
	return int32(X__syscall_ret(tls, uint64(x49__syscall1(tls, int64(80), int64(_buf)))))
}

type t1223__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t1223__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// x__syscall1 is defined at syscall_arch.h:16:22
func x49__syscall1(tls TLS, _n int64, _a1 int64) (r int64) {
	return X__syscall(tls, _n, _a1, int64(0), int64(0), int64(0), int64(0), int64(0))
}

// x__syscall2 is defined at syscall_arch.h:24:22
func x65__syscall2(tls TLS, _n int64, _a1 int64, _a2 int64) (r int64) {
	return X__syscall(tls, _n, _a1, _a2, int64(0), int64(0), int64(0), int64(0))
}

// linking fchown.o

// Xfchown is defined at fchown.c:8:5
func Xfchown(tls TLS, _fd int32, _uid uint32, _gid uint32) (r int32) {
	esc := MustMalloc(27)
	var (
		_ret int32
		_buf = esc // *[27]int8
	)
	defer Free(esc)
	_ret = int32(x73__syscall3(tls, int64(93), int64(_fd), int64(_uid), int64(_gid)))
	if _ret == int32(-9) && x66__syscall2(tls, int64(72), int64(_fd), int64(1)) >= int64(0) {
		goto _1
	}

	return int32(X__syscall_ret(tls, uint64(_ret)))

_1:
	X__procfdname(tls, _buf, uint32(_fd))
	return int32(X__syscall_ret(tls, uint64(x73__syscall3(tls, int64(92), int64(_buf), int64(_uid), int64(_gid)))))
}

type t1224__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t1224__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t37uid_t = uint32

type t38gid_t = uint32

// x__syscall3 is defined at syscall_arch.h:33:22
func x73__syscall3(tls TLS, _n int64, _a1 int64, _a2 int64, _a3 int64) (r int64) {
	return X__syscall(tls, _n, _a1, _a2, _a3, int64(0), int64(0), int64(0))
}

// x__syscall2 is defined at syscall_arch.h:24:22
func x66__syscall2(tls TLS, _n int64, _a1 int64, _a2 int64) (r int64) {
	return X__syscall(tls, _n, _a1, _a2, int64(0), int64(0), int64(0), int64(0))
}

// linking fchownat.o

// Xfchownat is defined at fchownat.c:4:5
func Xfchownat(tls TLS, _fd int32, _path uintptr /* *int8 */, _uid uint32, _gid uint32, _flag int32) (r int32) {
	return int32(X__syscall_ret(tls, uint64(x8__syscall5(tls, int64(260), int64(_fd), int64(_path), int64(_uid), int64(_gid), int64(_flag)))))
}

type t1225__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t1225__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t38uid_t = uint32

type t39gid_t = uint32

// x__syscall5 is defined at syscall_arch.h:52:22
func x8__syscall5(tls TLS, _n int64, _a1 int64, _a2 int64, _a3 int64, _a4 int64, _a5 int64) (r int64) {
	return X__syscall(tls, _n, _a1, _a2, _a3, _a4, _a5, int64(0))
}

// linking fdatasync.o

// Xfdatasync is defined at fdatasync.c:5:5
func Xfdatasync(tls TLS, _fd int32) (r int32) {
	X__assert_fail(tls, ts+0 /* "TODO(ccgo)" */, ts+7976 /* "src/unistd/fdata..." */, int32(7), x1104__func__)
	return r
}

type t1226__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t1226__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// x1__func__ [10]int8, escapes: true, fdatasync.c:6:1
var x1104__func__ = ds + 47000

// linking fsync.o

// Xfsync is defined at fsync.c:4:5
func Xfsync(tls TLS, _fd int32) (r int32) {
	return int32(X__syscall_ret(tls, uint64(X__syscall_cp(tls, int64(74), int64(_fd), int64(0), int64(0), int64(0), int64(0), int64(0)))))
}

type t1227__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t1227__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t11syscall_arg_t = int64

// linking ftruncate.o

// Xftruncate is defined at ftruncate.c:5:5
func Xftruncate(tls TLS, _fd int32, _length int64) (r int32) {
	return int32(X__syscall_ret(tls, uint64(x67__syscall2(tls, int64(77), int64(_fd), _length))))
}

type t1228__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t1228__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t128off_t = int64

// x__syscall2 is defined at syscall_arch.h:24:22
func x67__syscall2(tls TLS, _n int64, _a1 int64, _a2 int64) (r int64) {
	return X__syscall(tls, _n, _a1, _a2, int64(0), int64(0), int64(0), int64(0))
}

// linking getcwd.o

// Xgetcwd is defined at getcwd.c:8:6
func Xgetcwd(tls TLS, _buf uintptr /* *int8 */, _size uint64) (r uintptr /* *int8 */) {
	esc := MustMalloc(4096)
	var (
		_tmp = esc // *[4096]int8
		_ret int64
	)
	defer Free(esc)
	if _buf != 0 {
		goto _1
	}

	_buf = _tmp
	_size = uint64(4096)
	goto _2

_1:
	if _size != 0 {
		goto _3
	}

	*(*int32)(unsafe.Pointer(X__errno_location(tls))) = int32(22)
	return null

_3:
_2:
	_ret = X__syscall_ret(tls, uint64(x68__syscall2(tls, int64(79), int64(_buf), int64(_size))))
	if _ret >= int64(0) {
		goto _4
	}

	return null

_4:
	if _ret != int64(0) && int32(*(*int8)(unsafe.Pointer(_buf))) == int32('/') {
		goto _5
	}

	*(*int32)(unsafe.Pointer(X__errno_location(tls))) = int32(2)
	return null

_5:
	if _buf == _tmp {
		return Xstrdup(tls, _buf)
	}

	return _buf
}

type t1229__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t1229__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t400size_t = uint64

// x__syscall2 is defined at syscall_arch.h:24:22
func x68__syscall2(tls TLS, _n int64, _a1 int64, _a2 int64) (r int64) {
	return X__syscall(tls, _n, _a1, _a2, int64(0), int64(0), int64(0), int64(0))
}

// linking getegid.o

// Xgetegid is defined at getegid.c:4:7
func Xgetegid(tls TLS) (r uint32) {
	return uint32(x9__syscall0(tls, int64(108)))
}

type t1230__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t1230__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t40gid_t = uint32

// x__syscall0 is defined at syscall_arch.h:8:22
func x9__syscall0(tls TLS, _n int64) (r int64) {
	return X__syscall(tls, _n, int64(0), int64(0), int64(0), int64(0), int64(0), int64(0))
}

// linking geteuid.o

// Xgeteuid is defined at geteuid.c:4:7
func Xgeteuid(tls TLS) (r uint32) {
	return uint32(x10__syscall0(tls, int64(107)))
}

type t1231__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t1231__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t39uid_t = uint32

// x__syscall0 is defined at syscall_arch.h:8:22
func x10__syscall0(tls TLS, _n int64) (r int64) {
	return X__syscall(tls, _n, int64(0), int64(0), int64(0), int64(0), int64(0), int64(0))
}

// linking getgid.o

// Xgetgid is defined at getgid.c:4:7
func Xgetgid(tls TLS) (r uint32) {
	return uint32(x11__syscall0(tls, int64(104)))
}

type t1232__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t1232__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t41gid_t = uint32

// x__syscall0 is defined at syscall_arch.h:8:22
func x11__syscall0(tls TLS, _n int64) (r int64) {
	return X__syscall(tls, _n, int64(0), int64(0), int64(0), int64(0), int64(0), int64(0))
}

// linking getgroups.o

// Xgetgroups is defined at getgroups.c:4:5
func Xgetgroups(tls TLS, _count int32, _list uintptr /* uintptr */) (r int32) {
	return int32(X__syscall_ret(tls, uint64(x69__syscall2(tls, int64(115), int64(_count), int64(_list)))))
}

type t1233__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t1233__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// x__syscall2 is defined at syscall_arch.h:24:22
func x69__syscall2(tls TLS, _n int64, _a1 int64, _a2 int64) (r int64) {
	return X__syscall(tls, _n, _a1, _a2, int64(0), int64(0), int64(0), int64(0))
}

// linking gethostname.o

func set1105(p *int8, v int8) int8 { *p = v; return v }

// Xgethostname is defined at gethostname.c:4:5
func Xgethostname(tls TLS, _name uintptr /* *int8 */, _len uint64) (r int32) {
	esc := MustMalloc(390)
	var (
		_i   uint64
		_uts = esc // *Sutsname
	)
	defer Free(esc)
	if Xuname(tls, _uts) == 0 {
		goto _1
	}

	return int32(-1)

_1:
	if _len <= uint64(65) {
		goto _2
	}

	_len = uint64(65)
_2:
	_i = uint64(0)
_3:
	if _i >= _len || set1105((*int8)(unsafe.Pointer(_name+uintptr(_i))), *(*int8)(unsafe.Pointer((_uts + 65) + uintptr(_i)))) == 0 {
		goto _5
	}

	_i++
	goto _3

_5:
	if _i == 0 || _i != _len {
		goto _6
	}

	*(*int8)(unsafe.Pointer(_name + uintptr(_i-uint64(1)))) = int8(0)
_6:
	return int32(0)
}

type t1234__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t1234__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t401size_t = uint64

type s2utsname = struct {
	Fsysname      [65]int8
	Fnodename     [65]int8
	Frelease      [65]int8
	Fversion      [65]int8
	Fmachine      [65]int8
	F__domainname [65]int8
}

// linking getlogin.o

// Xgetlogin is defined at getlogin.c:4:6
func Xgetlogin(tls TLS) (r uintptr /* *int8 */) {
	return Xgetenv(tls, ts+8000 /* "LOGNAME" */)
}

type t1235__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t1235__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// linking getlogin_r.o

// Xgetlogin_r is defined at getlogin_r.c:5:5
func Xgetlogin_r(tls TLS, _name uintptr /* *int8 */, _size uint64) (r int32) {
	var _logname uintptr // *int8

	_logname = Xgetlogin(tls)
	if _logname != 0 {
		goto _1
	}

	return int32(6)

_1:
	if Xstrlen(tls, _logname) < _size {
		goto _2
	}

	return int32(34)

_2:
	Xstrcpy(tls, _name, _logname)
	return int32(0)
}

type t1236__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t1236__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t402size_t = uint64

// linking getpgid.o

// Xgetpgid is defined at getpgid.c:4:7
func Xgetpgid(tls TLS, _pid int32) (r int32) {
	return int32(X__syscall_ret(tls, uint64(x50__syscall1(tls, int64(121), int64(_pid)))))
}

type t1237__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t1237__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t51pid_t = int32

// x__syscall1 is defined at syscall_arch.h:16:22
func x50__syscall1(tls TLS, _n int64, _a1 int64) (r int64) {
	return X__syscall(tls, _n, _a1, int64(0), int64(0), int64(0), int64(0), int64(0))
}

// linking getpgrp.o

// Xgetpgrp is defined at getpgrp.c:4:7
func Xgetpgrp(tls TLS) (r int32) {
	return int32(x51__syscall1(tls, int64(121), int64(0)))
}

type t1238__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t1238__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t52pid_t = int32

// x__syscall1 is defined at syscall_arch.h:16:22
func x51__syscall1(tls TLS, _n int64, _a1 int64) (r int64) {
	return X__syscall(tls, _n, _a1, int64(0), int64(0), int64(0), int64(0), int64(0))
}

// linking getpid.o

// Xgetpid is defined at getpid.c:4:7
func Xgetpid(tls TLS) (r int32) {
	return int32(x12__syscall0(tls, int64(39)))
}

type t1239__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t1239__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t53pid_t = int32

// x__syscall0 is defined at syscall_arch.h:8:22
func x12__syscall0(tls TLS, _n int64) (r int64) {
	return X__syscall(tls, _n, int64(0), int64(0), int64(0), int64(0), int64(0), int64(0))
}

// linking getppid.o

// Xgetppid is defined at getppid.c:4:7
func Xgetppid(tls TLS) (r int32) {
	return int32(x13__syscall0(tls, int64(110)))
}

type t1240__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t1240__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t54pid_t = int32

// x__syscall0 is defined at syscall_arch.h:8:22
func x13__syscall0(tls TLS, _n int64) (r int64) {
	return X__syscall(tls, _n, int64(0), int64(0), int64(0), int64(0), int64(0), int64(0))
}

// linking getsid.o

// Xgetsid is defined at getsid.c:4:7
func Xgetsid(tls TLS, _pid int32) (r int32) {
	return int32(X__syscall_ret(tls, uint64(x52__syscall1(tls, int64(124), int64(_pid)))))
}

type t1241__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t1241__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t55pid_t = int32

// x__syscall1 is defined at syscall_arch.h:16:22
func x52__syscall1(tls TLS, _n int64, _a1 int64) (r int64) {
	return X__syscall(tls, _n, _a1, int64(0), int64(0), int64(0), int64(0), int64(0))
}

// linking getuid.o

// Xgetuid is defined at getuid.c:4:7
func Xgetuid(tls TLS) (r uint32) {
	return uint32(x14__syscall0(tls, int64(102)))
}

type t1242__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t1242__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t40uid_t = uint32

// x__syscall0 is defined at syscall_arch.h:8:22
func x14__syscall0(tls TLS, _n int64) (r int64) {
	return X__syscall(tls, _n, int64(0), int64(0), int64(0), int64(0), int64(0), int64(0))
}

// linking isatty.o

// Xisatty is defined at isatty.c:5:5
func Xisatty(tls TLS, _fd int32) (r int32) {
	esc := MustMalloc(8)
	var _wsz = esc // *Swinsize
	defer Free(esc)
	return bool2int(x74__syscall3(tls, int64(16), int64(_fd), int64(21523), int64(_wsz)) == 0)
}

type t1243__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t1243__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type s4winsize = struct {
	Fws_row    uint16
	Fws_col    uint16
	Fws_xpixel uint16
	Fws_ypixel uint16
}

// x__syscall3 is defined at syscall_arch.h:33:22
func x74__syscall3(tls TLS, _n int64, _a1 int64, _a2 int64, _a3 int64) (r int64) {
	return X__syscall(tls, _n, _a1, _a2, _a3, int64(0), int64(0), int64(0))
}

// linking lchown.o

// Xlchown is defined at lchown.c:5:5
func Xlchown(tls TLS, _path uintptr /* *int8 */, _uid uint32, _gid uint32) (r int32) {
	return int32(X__syscall_ret(tls, uint64(x75__syscall3(tls, int64(94), int64(_path), int64(_uid), int64(_gid)))))
}

type t1244__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t1244__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t41uid_t = uint32

type t42gid_t = uint32

// x__syscall3 is defined at syscall_arch.h:33:22
func x75__syscall3(tls TLS, _n int64, _a1 int64, _a2 int64, _a3 int64) (r int64) {
	return X__syscall(tls, _n, _a1, _a2, _a3, int64(0), int64(0), int64(0))
}

// linking link.o

// Xlink is defined at link.c:5:5
func Xlink(tls TLS, _existing uintptr /* *int8 */, _new uintptr /* *int8 */) (r int32) {
	return int32(X__syscall_ret(tls, uint64(x70__syscall2(tls, int64(86), int64(_existing), int64(_new)))))
}

type t1245__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t1245__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// x__syscall2 is defined at syscall_arch.h:24:22
func x70__syscall2(tls TLS, _n int64, _a1 int64, _a2 int64) (r int64) {
	return X__syscall(tls, _n, _a1, _a2, int64(0), int64(0), int64(0), int64(0))
}

// linking linkat.o

// Xlinkat is defined at linkat.c:4:5
func Xlinkat(tls TLS, _fd1 int32, _existing uintptr /* *int8 */, _fd2 int32, _new uintptr /* *int8 */, _flag int32) (r int32) {
	return int32(X__syscall_ret(tls, uint64(x9__syscall5(tls, int64(265), int64(_fd1), int64(_existing), int64(_fd2), int64(_new), int64(_flag)))))
}

type t1246__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t1246__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// x__syscall5 is defined at syscall_arch.h:52:22
func x9__syscall5(tls TLS, _n int64, _a1 int64, _a2 int64, _a3 int64, _a4 int64, _a5 int64) (r int64) {
	return X__syscall(tls, _n, _a1, _a2, _a3, _a4, _a5, int64(0))
}

// linking lseek.o

// Xlseek is defined at lseek.c:5:7
func Xlseek(tls TLS, _fd int32, _offset int64, _whence int32) (r int64) {
	return X__syscall_ret(tls, uint64(x76__syscall3(tls, int64(8), int64(_fd), _offset, int64(_whence))))
}

type t1247__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t1247__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t129off_t = int64

// x__syscall3 is defined at syscall_arch.h:33:22
func x76__syscall3(tls TLS, _n int64, _a1 int64, _a2 int64, _a3 int64) (r int64) {
	return X__syscall(tls, _n, _a1, _a2, _a3, int64(0), int64(0), int64(0))
}

// linking nice.o

// Xnice is defined at nice.c:6:5
func Xnice(tls TLS, _inc int32) (r int32) {
	var _prio int32

	_prio = _inc
	if _inc <= int32(-40) || _inc >= int32(40) {
		goto _1
	}

	_prio = _prio + Xgetpriority(tls, int32(0), uint32(0))
_1:
	if _prio <= int32(19) {
		goto _2
	}

	_prio = int32(19)
_2:
	if _prio >= int32(-20) {
		goto _3
	}

	_prio = int32(-20)
_3:
	if Xsetpriority(tls, int32(0), uint32(0), _prio) != 0 {
		return int32(-1)
	}

	return _prio
}

type t1248__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t1248__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t3id_t = uint32

// linking pause.o

// Xpause is defined at pause.c:7:5
func Xpause(tls TLS) (r int32) {
	X__assert_fail(tls, ts+0 /* "TODO(ccgo)" */, ts+8008 /* "src/unistd/pause..." */, int32(10), x1106__func__)
	return r
}

type t1249__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t1249__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// x1__func__ [6]int8, escapes: true, pause.c:8:1
var x1106__func__ = ds + 47016

// linking pipe.o

// Xpipe is defined at pipe.c:4:5
func Xpipe(tls TLS, _fd uintptr /* [2]int32 */) (r int32) {
	return int32(X__syscall_ret(tls, uint64(x53__syscall1(tls, int64(22), int64(_fd)))))
}

type t1250__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t1250__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// x__syscall1 is defined at syscall_arch.h:16:22
func x53__syscall1(tls TLS, _n int64, _a1 int64) (r int64) {
	return X__syscall(tls, _n, _a1, int64(0), int64(0), int64(0), int64(0), int64(0))
}

// linking pipe2.o

// Xpipe2 is defined at pipe2.c:6:5
func Xpipe2(tls TLS, _fd uintptr /* [2]int32 */, _flag int32) (r int32) {
	var _ret int32

	if _flag != 0 {
		goto _1
	}

	return Xpipe(tls, _fd)

_1:
	_ret = int32(x71__syscall2(tls, int64(293), int64(_fd), int64(_flag)))
	if _ret == int32(-38) {
		goto _2
	}

	return int32(X__syscall_ret(tls, uint64(_ret)))

_2:
	_ret = Xpipe(tls, _fd)
	if _ret == 0 {
		goto _3
	}

	return _ret

_3:
	if (_flag & int32(02000000)) == 0 {
		goto _4
	}

	x77__syscall3(tls, int64(72), int64(*(*int32)(unsafe.Pointer(_fd))), int64(2), int64(1))
	x77__syscall3(tls, int64(72), int64(*(*int32)(unsafe.Pointer(_fd + 4))), int64(2), int64(1))
_4:
	if (_flag & int32(04000)) == 0 {
		goto _5
	}

	x77__syscall3(tls, int64(72), int64(*(*int32)(unsafe.Pointer(_fd))), int64(4), int64(2048))
	x77__syscall3(tls, int64(72), int64(*(*int32)(unsafe.Pointer(_fd + 4))), int64(4), int64(2048))
_5:
	return int32(0)
}

type t1251__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t1251__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// x__syscall2 is defined at syscall_arch.h:24:22
func x71__syscall2(tls TLS, _n int64, _a1 int64, _a2 int64) (r int64) {
	return X__syscall(tls, _n, _a1, _a2, int64(0), int64(0), int64(0), int64(0))
}

// x__syscall3 is defined at syscall_arch.h:33:22
func x77__syscall3(tls TLS, _n int64, _a1 int64, _a2 int64, _a3 int64) (r int64) {
	return X__syscall(tls, _n, _a1, _a2, _a3, int64(0), int64(0), int64(0))
}

// linking posix_close.o

// Xposix_close is defined at posix_close.c:3:5
func Xposix_close(tls TLS, _fd int32, _flags int32) (r int32) {
	return Xclose(tls, _fd)
}

type t1252__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t1252__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// linking pread.o

// Xpread is defined at pread.c:6:9
func Xpread(tls TLS, _fd int32, _buf uintptr /* *void */, _size uint64, _ofs int64) (r int64) {
	return X__syscall_ret(tls, uint64(X__syscall_cp(tls, int64(17), int64(_fd), int64(_buf), int64(_size), _ofs, int64(0), int64(0))))
}

type t1253__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t1253__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t403size_t = uint64

type t130off_t = int64

type t46ssize_t = int64

type t12syscall_arg_t = int64

// linking preadv.o

// Xpreadv is defined at preadv.c:8:9
func Xpreadv(tls TLS, _fd int32, _iov uintptr /* *Siovec */, _count int32, _ofs int64) (r int64) {
	X__assert_fail(tls, ts+0 /* "TODO(ccgo)" */, ts+8028 /* "src/unistd/pread..." */, int32(10), x1107__func__)
	X__assert_fail(tls, ts+0 /* "TODO(ccgo)" */, ts+8028 /* "src/unistd/pread..." */, int32(12), x1107__func__)
	return r
}

type t1254__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t1254__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t131off_t = int64

type t47ssize_t = int64

type s8iovec = struct {
	Fiov_base uintptr // *void
	Fiov_len  uint64
}

// x1__func__ [7]int8, escapes: true, preadv.c:9:1
var x1107__func__ = ds + 47024

type t404size_t = uint64

// linking pwrite.o

// Xpwrite is defined at pwrite.c:6:9
func Xpwrite(tls TLS, _fd int32, _buf uintptr /* *void */, _size uint64, _ofs int64) (r int64) {
	return X__syscall_ret(tls, uint64(X__syscall_cp(tls, int64(18), int64(_fd), int64(_buf), int64(_size), _ofs, int64(0), int64(0))))
}

type t1255__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t1255__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t405size_t = uint64

type t132off_t = int64

type t48ssize_t = int64

type t13syscall_arg_t = int64

// linking pwritev.o

// Xpwritev is defined at pwritev.c:8:9
func Xpwritev(tls TLS, _fd int32, _iov uintptr /* *Siovec */, _count int32, _ofs int64) (r int64) {
	X__assert_fail(tls, ts+0 /* "TODO(ccgo)" */, ts+8048 /* "src/unistd/pwrit..." */, int32(10), x1108__func__)
	X__assert_fail(tls, ts+0 /* "TODO(ccgo)" */, ts+8048 /* "src/unistd/pwrit..." */, int32(12), x1108__func__)
	return r
}

type t1256__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t1256__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t133off_t = int64

type t49ssize_t = int64

type s9iovec = struct {
	Fiov_base uintptr // *void
	Fiov_len  uint64
}

// x1__func__ [8]int8, escapes: true, pwritev.c:9:1
var x1108__func__ = ds + 47032

type t406size_t = uint64

// linking read.o

// Xread is defined at read.c:5:9
func Xread(tls TLS, _fd int32, _buf uintptr /* *void */, _count uint64) (r int64) {
	return X__syscall_ret(tls, uint64(X__syscall_cp(tls, int64(0), int64(_fd), int64(_buf), int64(_count), int64(0), int64(0), int64(0))))
}

type t1257__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t1257__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t407size_t = uint64

type t50ssize_t = int64

type t14syscall_arg_t = int64

// linking readlink.o

// Xreadlink is defined at readlink.c:5:9
func Xreadlink(tls TLS, _path uintptr /* *int8 */, _buf uintptr /* *int8 */, _bufsize uint64) (r int64) {
	return X__syscall_ret(tls, uint64(x78__syscall3(tls, int64(89), int64(_path), int64(_buf), int64(_bufsize))))
}

type t1258__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t1258__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t408size_t = uint64

type t51ssize_t = int64

// x__syscall3 is defined at syscall_arch.h:33:22
func x78__syscall3(tls TLS, _n int64, _a1 int64, _a2 int64, _a3 int64) (r int64) {
	return X__syscall(tls, _n, _a1, _a2, _a3, int64(0), int64(0), int64(0))
}

// linking readlinkat.o

// Xreadlinkat is defined at readlinkat.c:4:9
func Xreadlinkat(tls TLS, _fd int32, _path uintptr /* *int8 */, _buf uintptr /* *int8 */, _bufsize uint64) (r int64) {
	return X__syscall_ret(tls, uint64(x36__syscall4(tls, int64(267), int64(_fd), int64(_path), int64(_buf), int64(_bufsize))))
}

type t1259__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t1259__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t409size_t = uint64

type t52ssize_t = int64

// x__syscall4 is defined at syscall_arch.h:42:22
func x36__syscall4(tls TLS, _n int64, _a1 int64, _a2 int64, _a3 int64, _a4 int64) (r int64) {
	return X__syscall(tls, _n, _a1, _a2, _a3, _a4, int64(0), int64(0))
}

// linking readv.o

// Xreadv is defined at readv.c:6:9
func Xreadv(tls TLS, _fd int32, _iov uintptr /* *Siovec */, _count int32) (r int64) {
	X__assert_fail(tls, ts+0 /* "TODO(ccgo)" */, ts+8072 /* "src/unistd/readv..." */, int32(8), x1109__func__)
	return r
}

type t1260__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t1260__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t53ssize_t = int64

type s10iovec = struct {
	Fiov_base uintptr // *void
	Fiov_len  uint64
}

// x1__func__ [6]int8, escapes: true, readv.c:7:1
var x1109__func__ = ds + 47040

type t410size_t = uint64

// linking renameat.o

// Xrenameat is defined at renameat.c:4:5
func Xrenameat(tls TLS, _oldfd int32, _old uintptr /* *int8 */, _newfd int32, _new uintptr /* *int8 */) (r int32) {
	return int32(X__syscall_ret(tls, uint64(x37__syscall4(tls, int64(264), int64(_oldfd), int64(_old), int64(_newfd), int64(_new)))))
}

type t1261__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t1261__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// x__syscall4 is defined at syscall_arch.h:42:22
func x37__syscall4(tls TLS, _n int64, _a1 int64, _a2 int64, _a3 int64, _a4 int64) (r int64) {
	return X__syscall(tls, _n, _a1, _a2, _a3, _a4, int64(0), int64(0))
}

// linking rmdir.o

// Xrmdir is defined at rmdir.c:5:5
func Xrmdir(tls TLS, _path uintptr /* *int8 */) (r int32) {
	return int32(X__syscall_ret(tls, uint64(x54__syscall1(tls, int64(84), int64(_path)))))
}

type t1262__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t1262__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// x__syscall1 is defined at syscall_arch.h:16:22
func x54__syscall1(tls TLS, _n int64, _a1 int64) (r int64) {
	return X__syscall(tls, _n, _a1, int64(0), int64(0), int64(0), int64(0), int64(0))
}

// linking setegid.o

// Xsetegid is defined at setegid.c:5:5
func Xsetegid(tls TLS, _egid uint32) (r int32) {
	return X__setxid(tls, int32(119), int32(-1), int32(_egid), int32(-1))
}

type t1263__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t1263__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t43gid_t = uint32

// linking seteuid.o

// Xseteuid is defined at seteuid.c:5:5
func Xseteuid(tls TLS, _euid uint32) (r int32) {
	return X__setxid(tls, int32(117), int32(-1), int32(_euid), int32(-1))
}

type t1264__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t1264__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t42uid_t = uint32

// linking setgid.o

// Xsetgid is defined at setgid.c:5:5
func Xsetgid(tls TLS, _gid uint32) (r int32) {
	return X__setxid(tls, int32(106), int32(_gid), int32(0), int32(0))
}

type t1265__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t1265__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t44gid_t = uint32

// linking setpgid.o

// Xsetpgid is defined at setpgid.c:4:5
func Xsetpgid(tls TLS, _pid int32, _pgid int32) (r int32) {
	return int32(X__syscall_ret(tls, uint64(x72__syscall2(tls, int64(109), int64(_pid), int64(_pgid)))))
}

type t1266__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t1266__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t56pid_t = int32

// x__syscall2 is defined at syscall_arch.h:24:22
func x72__syscall2(tls TLS, _n int64, _a1 int64, _a2 int64) (r int64) {
	return X__syscall(tls, _n, _a1, _a2, int64(0), int64(0), int64(0), int64(0))
}

// linking setpgrp.o

// Xsetpgrp is defined at setpgrp.c:3:7
func Xsetpgrp(tls TLS) (r int32) {
	return Xsetpgid(tls, int32(0), int32(0))
}

type t1267__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t1267__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t57pid_t = int32

// linking setregid.o

// Xsetregid is defined at setregid.c:5:5
func Xsetregid(tls TLS, _rgid uint32, _egid uint32) (r int32) {
	return X__setxid(tls, int32(114), int32(_rgid), int32(_egid), int32(0))
}

type t1268__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t1268__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t45gid_t = uint32

// linking setresgid.o

// Xsetresgid is defined at setresgid.c:6:5
func Xsetresgid(tls TLS, _rgid uint32, _egid uint32, _sgid uint32) (r int32) {
	return X__setxid(tls, int32(119), int32(_rgid), int32(_egid), int32(_sgid))
}

type t1269__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t1269__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t46gid_t = uint32

// linking setresuid.o

// Xsetresuid is defined at setresuid.c:6:5
func Xsetresuid(tls TLS, _ruid uint32, _euid uint32, _suid uint32) (r int32) {
	return X__setxid(tls, int32(117), int32(_ruid), int32(_euid), int32(_suid))
}

type t1270__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t1270__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t43uid_t = uint32

// linking setreuid.o

// Xsetreuid is defined at setreuid.c:5:5
func Xsetreuid(tls TLS, _ruid uint32, _euid uint32) (r int32) {
	return X__setxid(tls, int32(113), int32(_ruid), int32(_euid), int32(0))
}

type t1271__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t1271__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t44uid_t = uint32

// linking setsid.o

// Xsetsid is defined at setsid.c:4:7
func Xsetsid(tls TLS) (r int32) {
	return int32(X__syscall_ret(tls, uint64(x15__syscall0(tls, int64(112)))))
}

type t1272__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t1272__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t58pid_t = int32

// x__syscall0 is defined at syscall_arch.h:8:22
func x15__syscall0(tls TLS, _n int64) (r int64) {
	return X__syscall(tls, _n, int64(0), int64(0), int64(0), int64(0), int64(0), int64(0))
}

// linking setuid.o

// Xsetuid is defined at setuid.c:5:5
func Xsetuid(tls TLS, _uid uint32) (r int32) {
	return X__setxid(tls, int32(105), int32(_uid), int32(0), int32(0))
}

type t1273__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t1273__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t45uid_t = uint32

// linking setxid.o

func fp1110(f func(TLS, uintptr)) uintptr { return *(*uintptr)(unsafe.Pointer(&f)) }

// X__setxid is defined at setxid.c:28:5
func X__setxid(tls TLS, _nr int32, _id int32, _eid int32, _sid int32) (r int32) {
	esc := MustMalloc(20)
	var _c = esc // *Sctx
	defer Free(esc)
	*(*s2ctx)(unsafe.Pointer(_c)) = s2ctx{
		Fnr:  _nr,
		Fid:  _id,
		Feid: _eid,
		Fsid: _sid,
		Ferr: int32(-1),
	}
	X__synccall(tls, fp1110(xdo_setxid), _c)
	if *(*int32)(unsafe.Pointer(_c + 16)) == 0 {
		goto _1
	}

	if *(*int32)(unsafe.Pointer(_c + 16)) <= int32(0) {
		goto _2
	}

	*(*int32)(unsafe.Pointer(X__errno_location(tls))) = *(*int32)(unsafe.Pointer(_c + 16))
_2:
	return int32(-1)

_1:
	return int32(0)
}

type t1274__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t1274__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type s2ctx = struct {
	Fid  int32
	Feid int32
	Fsid int32
	Fnr  int32
	Ferr int32
}

// xdo_setxid is defined at setxid.c:12:13
func xdo_setxid(tls TLS, _p uintptr /* *void */) {
	var (
		_c   uintptr // *Sctx
		_ret int32
	)
	_c = _p
	if *(*int32)(unsafe.Pointer(_c + 16)) <= int32(0) {
		goto _1
	}

	return

_1:
	_ret = int32(-x79__syscall3(tls, int64(*(*int32)(unsafe.Pointer(_c + 12))), int64(*(*int32)(unsafe.Pointer(_c))), int64(*(*int32)(unsafe.Pointer(_c + 4))), int64(*(*int32)(unsafe.Pointer(_c + 8)))))
	if _ret == 0 || *(*int32)(unsafe.Pointer(_c + 16)) != 0 {
		goto _2
	}

	X__block_all_sigs(tls, null)
	x73__syscall2(tls, int64(62), x16__syscall0(tls, int64(39)), int64(9))
_2:
	*(*int32)(unsafe.Pointer(_c + 16)) = _ret
}

// x__syscall3 is defined at syscall_arch.h:33:22
func x79__syscall3(tls TLS, _n int64, _a1 int64, _a2 int64, _a3 int64) (r int64) {
	return X__syscall(tls, _n, _a1, _a2, _a3, int64(0), int64(0), int64(0))
}

// x__syscall2 is defined at syscall_arch.h:24:22
func x73__syscall2(tls TLS, _n int64, _a1 int64, _a2 int64) (r int64) {
	return X__syscall(tls, _n, _a1, _a2, int64(0), int64(0), int64(0), int64(0))
}

// x__syscall0 is defined at syscall_arch.h:8:22
func x16__syscall0(tls TLS, _n int64) (r int64) {
	return X__syscall(tls, _n, int64(0), int64(0), int64(0), int64(0), int64(0), int64(0))
}

// linking sleep.o

// Xsleep is defined at sleep.c:4:10
func Xsleep(tls TLS, _seconds uint32) (r uint32) {
	esc := MustMalloc(16)
	var _tv = esc // *Stimespec
	defer Free(esc)
	*(*s66timespec)(unsafe.Pointer(_tv)) = s66timespec{
		Ftv_sec: int64(_seconds),
	}
	if Xnanosleep(tls, _tv, _tv) == 0 {
		goto _1
	}

	return uint32(*(*int64)(unsafe.Pointer(_tv)))

_1:
	return uint32(0)
}

type t1275__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t1275__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type s66timespec = struct {
	Ftv_sec  int64
	Ftv_nsec int64
}

type t87time_t = int64

// linking symlink.o

// Xsymlink is defined at symlink.c:5:5
func Xsymlink(tls TLS, _existing uintptr /* *int8 */, _new uintptr /* *int8 */) (r int32) {
	return int32(X__syscall_ret(tls, uint64(x74__syscall2(tls, int64(88), int64(_existing), int64(_new)))))
}

type t1276__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t1276__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// x__syscall2 is defined at syscall_arch.h:24:22
func x74__syscall2(tls TLS, _n int64, _a1 int64, _a2 int64) (r int64) {
	return X__syscall(tls, _n, _a1, _a2, int64(0), int64(0), int64(0), int64(0))
}

// linking symlinkat.o

// Xsymlinkat is defined at symlinkat.c:4:5
func Xsymlinkat(tls TLS, _existing uintptr /* *int8 */, _fd int32, _new uintptr /* *int8 */) (r int32) {
	return int32(X__syscall_ret(tls, uint64(x80__syscall3(tls, int64(266), int64(_existing), int64(_fd), int64(_new)))))
}

type t1277__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t1277__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// x__syscall3 is defined at syscall_arch.h:33:22
func x80__syscall3(tls TLS, _n int64, _a1 int64, _a2 int64, _a3 int64) (r int64) {
	return X__syscall(tls, _n, _a1, _a2, _a3, int64(0), int64(0), int64(0))
}

// linking sync.o

// Xsync is defined at sync.c:4:6
func Xsync(tls TLS) {
	x17__syscall0(tls, int64(162))
}

type t1278__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t1278__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// x__syscall0 is defined at syscall_arch.h:8:22
func x17__syscall0(tls TLS, _n int64) (r int64) {
	return X__syscall(tls, _n, int64(0), int64(0), int64(0), int64(0), int64(0), int64(0))
}

// linking tcgetpgrp.o

// Xtcgetpgrp is defined at tcgetpgrp.c:5:7
func Xtcgetpgrp(tls TLS, _fd int32) (r int32) {
	esc := MustMalloc(4)
	var _pgrp = esc // *int32
	defer Free(esc)
	if Xioctl(tls, _fd, int32(0x540f), _pgrp) >= int32(0) {
		goto _1
	}

	return int32(-1)

_1:
	return *(*int32)(unsafe.Pointer(_pgrp))
}

type t1279__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t1279__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t59pid_t = int32

// linking tcsetpgrp.o

// Xtcsetpgrp is defined at tcsetpgrp.c:5:5
func Xtcsetpgrp(tls TLS, _fd int32, _pgrp int32) (r int32) {
	esc := MustMalloc(4)
	var _pgrp_int = esc // *int32
	defer Free(esc)
	*(*int32)(unsafe.Pointer(_pgrp_int)) = _pgrp
	return Xioctl(tls, _fd, int32(0x5410), _pgrp_int)
}

type t1280__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t1280__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t60pid_t = int32

// linking truncate.o

// Xtruncate is defined at truncate.c:5:5
func Xtruncate(tls TLS, _path uintptr /* *int8 */, _length int64) (r int32) {
	return int32(X__syscall_ret(tls, uint64(x75__syscall2(tls, int64(76), int64(_path), _length))))
}

type t1281__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t1281__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t134off_t = int64

// x__syscall2 is defined at syscall_arch.h:24:22
func x75__syscall2(tls TLS, _n int64, _a1 int64, _a2 int64) (r int64) {
	return X__syscall(tls, _n, _a1, _a2, int64(0), int64(0), int64(0), int64(0))
}

// linking ttyname.o

func set1111(p *int32, v int32) int32 { *p = v; return v }

// Xttyname is defined at ttyname.c:5:6
func Xttyname(tls TLS, _fd int32) (r uintptr /* *int8 */) {
	var _result int32

	if set1111(&_result, Xttyname_r(tls, _fd, x1112buf, uint64(32))) == 0 {
		goto _1
	}

	*(*int32)(unsafe.Pointer(X__errno_location(tls))) = _result
	return null

_1:
	return x1112buf
}

type t1282__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t1282__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// x1buf [32]int8, escapes: true, ttyname.c:7:14
var x1112buf = bss + 9536

type t411size_t = uint64

// linking ttyname_r.o

// Xttyname_r is defined at ttyname_r.c:7:5
func Xttyname_r(tls TLS, _fd int32, _name uintptr /* *int8 */, _size uint64) (r int32) {
	esc := MustMalloc(317)
	var (
		_st1      = esc       // *Sstat
		_st2      = esc + 144 // *Sstat
		_procname = esc + 288 // *[29]int8
		_l        int64
	)
	defer Free(esc)
	if Xisatty(tls, _fd) != 0 {
		goto _1
	}

	return int32(25)

_1:
	X__procfdname(tls, _procname, uint32(_fd))
	_l = Xreadlink(tls, _procname, _name, _size)
	if _l >= int64(0) {
		goto _2
	}

	return *(*int32)(unsafe.Pointer(X__errno_location(tls)))

	goto _3

_2:
	if uint64(_l) != _size {
		goto _4
	}

	return int32(34)

_4:
_3:
	*(*int8)(unsafe.Pointer(_name + uintptr(_l))) = int8(0)
	if Xstat(tls, _name, _st1) == 0 && Xfstat(tls, _fd, _st2) == 0 {
		goto _5
	}

	return *(*int32)(unsafe.Pointer(X__errno_location(tls)))

_5:
	if *(*uint64)(unsafe.Pointer(_st1)) == *(*uint64)(unsafe.Pointer(_st2)) && *(*uint64)(unsafe.Pointer(_st1 + 8)) == *(*uint64)(unsafe.Pointer(_st2 + 8)) {
		goto _6
	}

	return int32(19)

_6:
	return int32(0)
}

type t1283__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t1283__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t412size_t = uint64

type s17stat = struct {
	Fst_dev     uint64
	Fst_ino     uint64
	Fst_nlink   uint64
	Fst_mode    uint32
	Fst_uid     uint32
	Fst_gid     uint32
	F__pad0     uint32
	Fst_rdev    uint64
	Fst_size    int64
	Fst_blksize int64
	Fst_blocks  int64
	Fst_atim    s67timespec
	Fst_mtim    s67timespec
	Fst_ctim    s67timespec
	F__unused   [3]int64
}

type t54ssize_t = int64

type t21dev_t = uint64

type t23ino_t = uint64

type t17nlink_t = uint64

type t41mode_t = uint32

type t46uid_t = uint32

type t47gid_t = uint32

type t135off_t = int64

type t17blksize_t = int64

type t17blkcnt_t = int64

type s67timespec = struct {
	Ftv_sec  int64
	Ftv_nsec int64
}

type t88time_t = int64

// linking ualarm.o

// Xualarm is defined at ualarm.c:6:10
func Xualarm(tls TLS, _value uint32, _interval uint32) (r uint32) {
	X__assert_fail(tls, ts+0 /* "TODO(ccgo)" */, ts+8092 /* "src/unistd/ualar..." */, int32(8), x1113__func__)
	X__assert_fail(tls, ts+0 /* "TODO(ccgo)" */, ts+8092 /* "src/unistd/ualar..." */, int32(10), x1113__func__)
	X__assert_fail(tls, ts+0 /* "TODO(ccgo)" */, ts+8092 /* "src/unistd/ualar..." */, int32(12), x1113__func__)
	X__assert_fail(tls, ts+0 /* "TODO(ccgo)" */, ts+8092 /* "src/unistd/ualar..." */, int32(14), x1113__func__)
	X__assert_fail(tls, ts+0 /* "TODO(ccgo)" */, ts+8092 /* "src/unistd/ualar..." */, int32(16), x1113__func__)
	X__assert_fail(tls, ts+0 /* "TODO(ccgo)" */, ts+8092 /* "src/unistd/ualar..." */, int32(18), x1113__func__)
	return r
}

type t1284__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t1284__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// x1__func__ [7]int8, escapes: true, ualarm.c:7:1
var x1113__func__ = ds + 47048

// linking unlink.o

// Xunlink is defined at unlink.c:5:5
func Xunlink(tls TLS, _path uintptr /* *int8 */) (r int32) {
	return int32(X__syscall_ret(tls, uint64(x55__syscall1(tls, int64(87), int64(_path)))))
}

type t1285__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t1285__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// x__syscall1 is defined at syscall_arch.h:16:22
func x55__syscall1(tls TLS, _n int64, _a1 int64) (r int64) {
	return X__syscall(tls, _n, _a1, int64(0), int64(0), int64(0), int64(0), int64(0))
}

// linking unlinkat.o

// Xunlinkat is defined at unlinkat.c:4:5
func Xunlinkat(tls TLS, _fd int32, _path uintptr /* *int8 */, _flag int32) (r int32) {
	return int32(X__syscall_ret(tls, uint64(x81__syscall3(tls, int64(263), int64(_fd), int64(_path), int64(_flag)))))
}

type t1286__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t1286__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

// x__syscall3 is defined at syscall_arch.h:33:22
func x81__syscall3(tls TLS, _n int64, _a1 int64, _a2 int64, _a3 int64) (r int64) {
	return X__syscall(tls, _n, _a1, _a2, _a3, int64(0), int64(0), int64(0))
}

// linking usleep.o

// Xusleep is defined at usleep.c:5:5
func Xusleep(tls TLS, _useconds uint32) (r int32) {
	esc := MustMalloc(16)
	var _tv = esc // *Stimespec
	defer Free(esc)
	*(*s68timespec)(unsafe.Pointer(_tv)) = s68timespec{
		Ftv_sec:  int64(_useconds / uint32(1000000)),
		Ftv_nsec: int64(_useconds % uint32(1000000) * uint32(1000)),
	}
	return Xnanosleep(tls, _tv, _tv)
}

type t1287__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t1287__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type s68timespec = struct {
	Ftv_sec  int64
	Ftv_nsec int64
}

type t89time_t = int64

// linking write.o

// Xwrite is defined at write.c:6:9
func Xwrite(tls TLS, _fd int32, _buf uintptr /* *void */, _count uint64) (r int64) {
	return X__syscall_ret(tls, uint64(X__syscall_cp(tls, int64(1), int64(_fd), int64(_buf), int64(_count), int64(0), int64(0), int64(0))))
}

type t1288__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t1288__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t413size_t = uint64

type t55ssize_t = int64

type t15syscall_arg_t = int64

// linking writev.o

// Xwritev is defined at writev.c:6:9
func Xwritev(tls TLS, _fd int32, _iov uintptr /* *Siovec */, _count int32) (r int64) {
	X__assert_fail(tls, ts+0 /* "TODO(ccgo)" */, ts+8112 /* "src/unistd/write..." */, int32(8), x1114__func__)
	return r
}

type t1289__builtin_va_list_header = struct {
	Fsize  int32
	Fcount int32
	Fitem  uintptr // *T__builtin_va_list_item = struct{Fsize int32;Fdata int8;}
}

type t1289__builtin_va_list_item = struct {
	Fsize int32
	Fdata int8
}

type t56ssize_t = int64

type s11iovec = struct {
	Fiov_base uintptr // *void
	Fiov_len  uint64
}

// x1__func__ [7]int8, escapes: true, writev.c:7:1
var x1114__func__ = ds + 47056

type t414size_t = uint64

const (
	DABDAY_1                                = 131072
	DABDAY_2                                = 131073
	DABDAY_3                                = 131074
	DABDAY_4                                = 131075
	DABDAY_5                                = 131076
	DABDAY_6                                = 131077
	DABDAY_7                                = 131078
	DABMON_1                                = 131086
	DABMON_10                               = 131095
	DABMON_11                               = 131096
	DABMON_12                               = 131097
	DABMON_2                                = 131087
	DABMON_3                                = 131088
	DABMON_4                                = 131089
	DABMON_5                                = 131090
	DABMON_6                                = 131091
	DABMON_7                                = 131092
	DABMON_8                                = 131093
	DABMON_9                                = 131094
	DACCOUNTING                             = 9
	DADD                                    = 0
	DADDR_COMPAT_LAYOUT                     = 2097152
	DADDR_LIMIT_32BIT                       = 8388608
	DADDR_LIMIT_3GB                         = 134217728
	DADDR_NO_RANDOMIZE                      = 262144
	DADJ_ESTERROR                           = 8
	DADJ_FREQUENCY                          = 2
	DADJ_MAXERROR                           = 4
	DADJ_MICRO                              = 4096
	DADJ_NANO                               = 8192
	DADJ_OFFSET                             = 1
	DADJ_OFFSET_SINGLESHOT                  = 32769
	DADJ_OFFSET_SS_READ                     = 40961
	DADJ_SETOFFSET                          = 256
	DADJ_STATUS                             = 16
	DADJ_TAI                                = 128
	DADJ_TICK                               = 16384
	DADJ_TIMECONST                          = 32
	DAF_ALG                                 = 38
	DAF_APPLETALK                           = 5
	DAF_ASH                                 = 18
	DAF_ATMPVC                              = 8
	DAF_ATMSVC                              = 20
	DAF_AX25                                = 3
	DAF_BLUETOOTH                           = 31
	DAF_BRIDGE                              = 7
	DAF_CAIF                                = 37
	DAF_CAN                                 = 29
	DAF_DECnet                              = 12
	DAF_ECONET                              = 19
	DAF_FILE                                = 1
	DAF_IB                                  = 27
	DAF_IEEE802154                          = 36
	DAF_INET                                = 2
	DAF_INET6                               = 10
	DAF_IPX                                 = 4
	DAF_IRDA                                = 23
	DAF_ISDN                                = 34
	DAF_IUCV                                = 32
	DAF_KCM                                 = 41
	DAF_KEY                                 = 15
	DAF_LLC                                 = 26
	DAF_LOCAL                               = 1
	DAF_MAX                                 = 44
	DAF_MPLS                                = 28
	DAF_NETBEUI                             = 13
	DAF_NETLINK                             = 16
	DAF_NETROM                              = 6
	DAF_NFC                                 = 39
	DAF_PACKET                              = 17
	DAF_PHONET                              = 35
	DAF_PPPOX                               = 24
	DAF_QIPCRTR                             = 42
	DAF_RDS                                 = 21
	DAF_ROSE                                = 11
	DAF_ROUTE                               = 16
	DAF_RXRPC                               = 33
	DAF_SECURITY                            = 14
	DAF_SMC                                 = 43
	DAF_SNA                                 = 22
	DAF_TIPC                                = 30
	DAF_UNIX                                = 1
	DAF_UNSPEC                              = 0
	DAF_VSOCK                               = 40
	DAF_WANPIPE                             = 25
	DAF_X25                                 = 9
	DAIO_ALLDONE                            = 2
	DAIO_CANCELED                           = 0
	DAIO_NOTCANCELED                        = 1
	DAI_ADDRCONFIG                          = 32
	DAI_ALL                                 = 16
	DAI_CANONNAME                           = 2
	DAI_NUMERICHOST                         = 4
	DAI_NUMERICSERV                         = 1024
	DAI_PASSIVE                             = 1
	DAI_V4MAPPED                            = 8
	DALT_DIGITS                             = 131119
	DALT_FORM                               = 8
	DAM_STR                                 = 131110
	DANYMARK                                = 1
	DARG_MAX                                = 131072
	DARPD_FLUSH                             = 3
	DARPD_LOOKUP                            = 2
	DARPD_UPDATE                            = 1
	DARPHRD_6LOWPAN                         = 825
	DARPHRD_ADAPT                           = 264
	DARPHRD_APPLETLK                        = 8
	DARPHRD_ARCNET                          = 7
	DARPHRD_ASH                             = 781
	DARPHRD_ATM                             = 19
	DARPHRD_AX25                            = 3
	DARPHRD_BIF                             = 775
	DARPHRD_CAIF                            = 822
	DARPHRD_CAN                             = 280
	DARPHRD_CHAOS                           = 5
	DARPHRD_CISCO                           = 513
	DARPHRD_CSLIP                           = 257
	DARPHRD_CSLIP6                          = 259
	DARPHRD_DDCMP                           = 517
	DARPHRD_DLCI                            = 15
	DARPHRD_ECONET                          = 782
	DARPHRD_EETHER                          = 2
	DARPHRD_ETHER                           = 1
	DARPHRD_EUI64                           = 27
	DARPHRD_FCAL                            = 785
	DARPHRD_FCFABRIC                        = 787
	DARPHRD_FCPL                            = 786
	DARPHRD_FCPP                            = 784
	DARPHRD_FDDI                            = 774
	DARPHRD_FRAD                            = 770
	DARPHRD_HDLC                            = 513
	DARPHRD_HIPPI                           = 780
	DARPHRD_HWX25                           = 272
	DARPHRD_IEEE1394                        = 24
	DARPHRD_IEEE802                         = 6
	DARPHRD_IEEE80211                       = 801
	DARPHRD_IEEE80211_PRISM                 = 802
	DARPHRD_IEEE80211_RADIOTAP              = 803
	DARPHRD_IEEE802154                      = 804
	DARPHRD_IEEE802154_MONITOR              = 805
	DARPHRD_IEEE802_TR                      = 800
	DARPHRD_INFINIBAND                      = 32
	DARPHRD_IP6GRE                          = 823
	DARPHRD_IPDDP                           = 777
	DARPHRD_IPGRE                           = 778
	DARPHRD_IRDA                            = 783
	DARPHRD_LAPB                            = 516
	DARPHRD_LOCALTLK                        = 773
	DARPHRD_LOOPBACK                        = 772
	DARPHRD_METRICOM                        = 23
	DARPHRD_NETLINK                         = 824
	DARPHRD_NETROM                          = 0
	DARPHRD_NONE                            = 65534
	DARPHRD_PHONET                          = 820
	DARPHRD_PHONET_PIPE                     = 821
	DARPHRD_PIMREG                          = 779
	DARPHRD_PPP                             = 512
	DARPHRD_PRONET                          = 4
	DARPHRD_RAWHDLC                         = 518
	DARPHRD_RAWIP                           = 519
	DARPHRD_ROSE                            = 270
	DARPHRD_RSRVD                           = 260
	DARPHRD_SIT                             = 776
	DARPHRD_SKIP                            = 771
	DARPHRD_SLIP                            = 256
	DARPHRD_SLIP6                           = 258
	DARPHRD_TUNNEL                          = 768
	DARPHRD_TUNNEL6                         = 769
	DARPHRD_VOID                            = 65535
	DARPHRD_VSOCKMON                        = 826
	DARPHRD_X25                             = 271
	DARPOP_InREPLY                          = 9
	DARPOP_InREQUEST                        = 8
	DARPOP_NAK                              = 10
	DARPOP_REPLY                            = 2
	DARPOP_REQUEST                          = 1
	DARPOP_RREPLY                           = 4
	DARPOP_RREQUEST                         = 3
	DASSERTION                              = -2
	DASSERT_AT_BOL                          = 1
	DASSERT_AT_BOW                          = 16
	DASSERT_AT_EOL                          = 2
	DASSERT_AT_EOW                          = 32
	DASSERT_AT_WB                           = 64
	DASSERT_AT_WB_NEG                       = 128
	DASSERT_BACKREF                         = 256
	DASSERT_CHAR_CLASS                      = 4
	DASSERT_CHAR_CLASS_NEG                  = 8
	DASSERT_LAST                            = 256
	DATF_COM                                = 2
	DATF_DONTPUB                            = 64
	DATF_MAGIC                              = 128
	DATF_NETMASK                            = 32
	DATF_PERM                               = 4
	DATF_PUBL                               = 8
	DATF_USETRAILERS                        = 16
	DAT_BASE                                = 7
	DAT_BASE_PLATFORM                       = 24
	DAT_CLKTCK                              = 17
	DAT_DCACHEBSIZE                         = 19
	DAT_EACCESS                             = 512
	DAT_EGID                                = 14
	DAT_EMPTY_PATH                          = 4096
	DAT_ENTRY                               = 9
	DAT_EUID                                = 12
	DAT_EXECFD                              = 2
	DAT_EXECFN                              = 31
	DAT_FDCWD                               = -100
	DAT_FLAGS                               = 8
	DAT_FPUCW                               = 18
	DAT_GID                                 = 13
	DAT_HWCAP                               = 16
	DAT_HWCAP2                              = 26
	DAT_ICACHEBSIZE                         = 20
	DAT_IGNORE                              = 1
	DAT_IGNOREPPC                           = 22
	DAT_L1D_CACHEGEOMETRY                   = 43
	DAT_L1D_CACHESHAPE                      = 35
	DAT_L1D_CACHESIZE                       = 42
	DAT_L1I_CACHEGEOMETRY                   = 41
	DAT_L1I_CACHESHAPE                      = 34
	DAT_L1I_CACHESIZE                       = 40
	DAT_L2_CACHEGEOMETRY                    = 45
	DAT_L2_CACHESHAPE                       = 36
	DAT_L2_CACHESIZE                        = 44
	DAT_L3_CACHEGEOMETRY                    = 47
	DAT_L3_CACHESHAPE                       = 37
	DAT_L3_CACHESIZE                        = 46
	DAT_NOTELF                              = 10
	DAT_NO_AUTOMOUNT                        = 2048
	DAT_NULL                                = 0
	DAT_PAGESZ                              = 6
	DAT_PHDR                                = 3
	DAT_PHENT                               = 4
	DAT_PHNUM                               = 5
	DAT_PLATFORM                            = 15
	DAT_RANDOM                              = 25
	DAT_REMOVEDIR                           = 512
	DAT_SECURE                              = 23
	DAT_SYMLINK_FOLLOW                      = 1024
	DAT_SYMLINK_NOFOLLOW                    = 256
	DAT_SYSINFO                             = 32
	DAT_SYSINFO_EHDR                        = 33
	DAT_UCACHEBSIZE                         = 21
	DAT_UID                                 = 11
	DAUX_CNT                                = 38
	DB0                                     = 0
	DB1000000                               = 4104
	DB110                                   = 3
	DB115200                                = 4098
	DB1152000                               = 4105
	DB1200                                  = 9
	DB134                                   = 4
	DB150                                   = 5
	DB1500000                               = 4106
	DB1800                                  = 10
	DB19200                                 = 14
	DB200                                   = 6
	DB2000000                               = 4107
	DB230400                                = 4099
	DB2400                                  = 11
	DB2500000                               = 4108
	DB300                                   = 7
	DB3000000                               = 4109
	DB3500000                               = 4110
	DB38400                                 = 15
	DB4000000                               = 4111
	DB460800                                = 4100
	DB4800                                  = 12
	DB50                                    = 1
	DB500000                                = 4101
	DB57600                                 = 4097
	DB576000                                = 4102
	DB600                                   = 8
	DB75                                    = 2
	DB921600                                = 4103
	DB9600                                  = 13
	DBACKREF                                = -4
	DBC_BASE_MAX                            = 99
	DBC_DIM_MAX                             = 2048
	DBC_SCALE_MAX                           = 99
	DBC_STRING_MAX                          = 1000
	DBF_N                                   = 16
	DBIG5                                   = 224
	DBIG_ENDIAN                             = 4321
	DBLKFLSBUF                              = 4705
	DBLKFRAGET                              = 4709
	DBLKFRASET                              = 4708
	DBLKGETSIZE                             = 4704
	DBLKRAGET                               = 4707
	DBLKRASET                               = 4706
	DBLKROGET                               = 4702
	DBLKROSET                               = 4701
	DBLKRRPART                              = 4703
	DBLKSECTGET                             = 4711
	DBLKSECTSET                             = 4710
	DBLKSSZGET                              = 4712
	DBOOT_TIME                              = 2
	DBRACKET                                = -3
	DBRKINT                                 = 2
	DBS0                                    = 0
	DBS1                                    = 8192
	DBSDLY                                  = 8192
	DBUFSIZ                                 = 1024
	DBUS_ADRALN                             = 1
	DBUS_ADRERR                             = 2
	DBUS_MCEERR_AO                          = 5
	DBUS_MCEERR_AR                          = 4
	DBUS_OBJERR                             = 3
	DBYTE_ORDER                             = 1234
	DCANARY                                 = 0
	DCBAUD                                  = 4111
	DCBAUDEX                                = 4096
	DCHARCLASS_NAME_MAX                     = 14
	DCHAR_BIT                               = 8
	DCHAR_MAX                               = 127
	DCHAR_MIN                               = -128
	DCIBAUD                                 = 269418496
	DCLD_CONTINUED                          = 6
	DCLD_DUMPED                             = 3
	DCLD_EXITED                             = 1
	DCLD_KILLED                             = 2
	DCLD_STOPPED                            = 5
	DCLD_TRAPPED                            = 4
	DCLOCAL                                 = 2048
	DCLOCKS_PER_SEC                         = 1000000
	DCLOCK_BOOTTIME                         = 7
	DCLOCK_BOOTTIME_ALARM                   = 9
	DCLOCK_MONOTONIC                        = 1
	DCLOCK_MONOTONIC_COARSE                 = 6
	DCLOCK_MONOTONIC_RAW                    = 4
	DCLOCK_PROCESS_CPUTIME_ID               = 2
	DCLOCK_REALTIME                         = 0
	DCLOCK_REALTIME_ALARM                   = 8
	DCLOCK_REALTIME_COARSE                  = 5
	DCLOCK_SGI_CYCLE                        = 10
	DCLOCK_TAI                              = 11
	DCLOCK_THREAD_CPUTIME_ID                = 3
	DCLONE_CHILD_CLEARTID                   = 2097152
	DCLONE_CHILD_SETTID                     = 16777216
	DCLONE_DETACHED                         = 4194304
	DCLONE_FILES                            = 1024
	DCLONE_FS                               = 512
	DCLONE_IO                               = 2147483648
	DCLONE_NEWCGROUP                        = 33554432
	DCLONE_NEWIPC                           = 134217728
	DCLONE_NEWNET                           = 1073741824
	DCLONE_NEWNS                            = 131072
	DCLONE_NEWPID                           = 536870912
	DCLONE_NEWUSER                          = 268435456
	DCLONE_NEWUTS                           = 67108864
	DCLONE_PARENT                           = 32768
	DCLONE_PARENT_SETTID                    = 1048576
	DCLONE_PTRACE                           = 8192
	DCLONE_SETTLS                           = 524288
	DCLONE_SIGHAND                          = 2048
	DCLONE_SYSVSEM                          = 262144
	DCLONE_THREAD                           = 65536
	DCLONE_UNTRACED                         = 8388608
	DCLONE_VFORK                            = 16384
	DCLONE_VM                               = 256
	DCMSPAR                                 = 1073741824
	DCODESET                                = 14
	DCOLL_WEIGHTS_MAX                       = 2
	DCOPY_MAXIMIZE_FIRST_TAG                = 2
	DCOPY_REMOVE_TAGS                       = 1
	DCOUNT                                  = 32
	DCPU_SETSIZE                            = 128
	DCR0                                    = 0
	DCR1                                    = 512
	DCR2                                    = 1024
	DCR3                                    = 1536
	DCRDLY                                  = 1536
	DCREAD                                  = 128
	DCRNCYSTR                               = 262159
	DCRTSCTS                                = 2147483648
	DCS5                                    = 0
	DCS6                                    = 16
	DCS7                                    = 32
	DCS8                                    = 48
	DCSIGNAL                                = 255
	DCSIZE                                  = 48
	DCSTOPB                                 = 64
	DC_ANY                                  = 0
	DC_CHAOS                                = 0
	DC_HS                                   = 0
	DC_IN                                   = 0
	DC_LOCALE                               = 0
	DC_NONE                                 = 0
	DDAS_MATCHINGLABEL                      = 268435456
	DDAS_MATCHINGSCOPE                      = 536870912
	DDAS_ORDER_SHIFT                        = 0
	DDAS_PREC_SHIFT                         = 20
	DDAS_PREFIX_SHIFT                       = 8
	DDAS_SCOPE_SHIFT                        = 16
	DDAS_USABLE                             = 1073741824
	DDAYS_PER_100Y                          = 36524
	DDAYS_PER_400Y                          = 146097
	DDAYS_PER_4Y                            = 1461
	DDAY_1                                  = 131079
	DDAY_2                                  = 131080
	DDAY_3                                  = 131081
	DDAY_4                                  = 131082
	DDAY_5                                  = 131083
	DDAY_6                                  = 131084
	DDAY_7                                  = 131085
	DDBL_DECIMAL_DIG                        = 17
	DDBL_DIG                                = 15
	DDBL_EPSILON                            = 2.220446049250313e-16
	DDBL_HAS_SUBNORM                        = 1
	DDBL_MANT_DIG                           = 53
	DDBL_MAX                                = 1.7976931348623157e+308
	DDBL_MAX_10_EXP                         = 308
	DDBL_MAX_EXP                            = 1024
	DDBL_MIN                                = 2.2250738585072014e-308
	DDBL_MIN_10_EXP                         = -307
	DDBL_MIN_EXP                            = -1021
	DDBL_TRUE_MIN                           = 5e-324
	DDEAD_PROCESS                           = 8
	DDECIMAL_DIG                            = 17
	DDEFAULT_GUARD_SIZE                     = 4096
	DDEFAULT_STACK_SIZE                     = 81920
	DDELAYTIMER_MAX                         = 2147483647
	DDELETE                                 = 0
	DDF_1_CONFALT                           = 8192
	DDF_1_DIRECT                            = 256
	DDF_1_DISPRELDNE                        = 32768
	DDF_1_DISPRELPND                        = 65536
	DDF_1_EDITED                            = 2097152
	DDF_1_ENDFILTEE                         = 16384
	DDF_1_GLOBAL                            = 2
	DDF_1_GLOBAUDIT                         = 16777216
	DDF_1_GROUP                             = 4
	DDF_1_IGNMULDEF                         = 262144
	DDF_1_INITFIRST                         = 32
	DDF_1_INTERPOSE                         = 1024
	DDF_1_LOADFLTR                          = 16
	DDF_1_NODEFLIB                          = 2048
	DDF_1_NODELETE                          = 8
	DDF_1_NODIRECT                          = 131072
	DDF_1_NODUMP                            = 4096
	DDF_1_NOHDR                             = 1048576
	DDF_1_NOKSYMS                           = 524288
	DDF_1_NOOPEN                            = 64
	DDF_1_NORELOC                           = 4194304
	DDF_1_NOW                               = 1
	DDF_1_ORIGIN                            = 128
	DDF_1_PIE                               = 134217728
	DDF_1_SINGLETON                         = 33554432
	DDF_1_STUB                              = 67108864
	DDF_1_SYMINTPOSE                        = 8388608
	DDF_1_TRANS                             = 512
	DDF_BIND_NOW                            = 8
	DDF_ORIGIN                              = 1
	DDF_P1_GROUPPERM                        = 2
	DDF_P1_LAZYLOAD                         = 1
	DDF_STATIC_TLS                          = 16
	DDF_SYMBOLIC                            = 2
	DDF_TEXTREL                             = 4
	DDL_FDPIC                               = 0
	DDL_NOMMU_SUPPORT                       = 0
	DDN_ACCESS                              = 1
	DDN_ATTRIB                              = 32
	DDN_CREATE                              = 4
	DDN_DELETE                              = 8
	DDN_MODIFY                              = 2
	DDN_MULTISHOT                           = 2147483648
	DDN_RENAME                              = 16
	DDTF_1_CONFEXP                          = 2
	DDTF_1_PARINIT                          = 1
	DDTP_OFFSET                             = 0
	DDT_ADDRNUM                             = 11
	DDT_ADDRRNGHI                           = 1879047935
	DDT_ADDRRNGLO                           = 1879047680
	DDT_ALPHA_NUM                           = 1
	DDT_ALPHA_PLTRO                         = 1879048192
	DDT_AUDIT                               = 1879047932
	DDT_AUXILIARY                           = 2147483645
	DDT_BIND_NOW                            = 24
	DDT_BLK                                 = 6
	DDT_CHECKSUM                            = 1879047672
	DDT_CHR                                 = 2
	DDT_CONFIG                              = 1879047930
	DDT_DEBUG                               = 21
	DDT_DEBUG_INDIRECT                      = 0
	DDT_DEPAUDIT                            = 1879047931
	DDT_DIR                                 = 4
	DDT_ENCODING                            = 32
	DDT_EXTRANUM                            = 3
	DDT_FEATURE_1                           = 1879047676
	DDT_FIFO                                = 1
	DDT_FILTER                              = 2147483647
	DDT_FINI                                = 13
	DDT_FINI_ARRAY                          = 26
	DDT_FINI_ARRAYSZ                        = 28
	DDT_FLAGS                               = 30
	DDT_FLAGS_1                             = 1879048187
	DDT_GNU_CONFLICT                        = 1879047928
	DDT_GNU_CONFLICTSZ                      = 1879047670
	DDT_GNU_HASH                            = 1879047925
	DDT_GNU_LIBLIST                         = 1879047929
	DDT_GNU_LIBLISTSZ                       = 1879047671
	DDT_GNU_PRELINKED                       = 1879047669
	DDT_HASH                                = 4
	DDT_HIOS                                = 1879044096
	DDT_HIPROC                              = 2147483647
	DDT_IA_64_NUM                           = 1
	DDT_IA_64_PLT_RESERVE                   = 1879048192
	DDT_INIT                                = 12
	DDT_INIT_ARRAY                          = 25
	DDT_INIT_ARRAYSZ                        = 27
	DDT_JMPREL                              = 23
	DDT_LNK                                 = 10
	DDT_LOOS                                = 1610612749
	DDT_LOPROC                              = 1879048192
	DDT_MIPS_AUX_DYNAMIC                    = 1879048241
	DDT_MIPS_BASE_ADDRESS                   = 1879048198
	DDT_MIPS_COMPACT_SIZE                   = 1879048239
	DDT_MIPS_CONFLICT                       = 1879048200
	DDT_MIPS_CONFLICTNO                     = 1879048203
	DDT_MIPS_CXX_FLAGS                      = 1879048226
	DDT_MIPS_DELTA_CLASS                    = 1879048215
	DDT_MIPS_DELTA_CLASSSYM                 = 1879048224
	DDT_MIPS_DELTA_CLASSSYM_NO              = 1879048225
	DDT_MIPS_DELTA_CLASS_NO                 = 1879048216
	DDT_MIPS_DELTA_INSTANCE                 = 1879048217
	DDT_MIPS_DELTA_INSTANCE_NO              = 1879048218
	DDT_MIPS_DELTA_RELOC                    = 1879048219
	DDT_MIPS_DELTA_RELOC_NO                 = 1879048220
	DDT_MIPS_DELTA_SYM                      = 1879048221
	DDT_MIPS_DELTA_SYM_NO                   = 1879048222
	DDT_MIPS_DYNSTR_ALIGN                   = 1879048235
	DDT_MIPS_FLAGS                          = 1879048197
	DDT_MIPS_GOTSYM                         = 1879048211
	DDT_MIPS_GP_VALUE                       = 1879048240
	DDT_MIPS_HIDDEN_GOTIDX                  = 1879048231
	DDT_MIPS_HIPAGENO                       = 1879048212
	DDT_MIPS_ICHECKSUM                      = 1879048195
	DDT_MIPS_INTERFACE                      = 1879048234
	DDT_MIPS_INTERFACE_SIZE                 = 1879048236
	DDT_MIPS_IVERSION                       = 1879048196
	DDT_MIPS_LIBLIST                        = 1879048201
	DDT_MIPS_LIBLISTNO                      = 1879048208
	DDT_MIPS_LOCALPAGE_GOTIDX               = 1879048229
	DDT_MIPS_LOCAL_GOTIDX                   = 1879048230
	DDT_MIPS_LOCAL_GOTNO                    = 1879048202
	DDT_MIPS_MSYM                           = 1879048199
	DDT_MIPS_NUM                            = 54
	DDT_MIPS_OPTIONS                        = 1879048233
	DDT_MIPS_PERF_SUFFIX                    = 1879048238
	DDT_MIPS_PIXIE_INIT                     = 1879048227
	DDT_MIPS_PLTGOT                         = 1879048242
	DDT_MIPS_PROTECTED_GOTIDX               = 1879048232
	DDT_MIPS_RLD_MAP                        = 1879048214
	DDT_MIPS_RLD_MAP_REL                    = 1879048245
	DDT_MIPS_RLD_TEXT_RESOLVE_ADDR          = 1879048237
	DDT_MIPS_RLD_VERSION                    = 1879048193
	DDT_MIPS_RWPLT                          = 1879048244
	DDT_MIPS_SYMBOL_LIB                     = 1879048228
	DDT_MIPS_SYMTABNO                       = 1879048209
	DDT_MIPS_TIME_STAMP                     = 1879048194
	DDT_MIPS_UNREFEXTNO                     = 1879048210
	DDT_MOVEENT                             = 1879047674
	DDT_MOVESZ                              = 1879047675
	DDT_MOVETAB                             = 1879047934
	DDT_NEEDED                              = 1
	DDT_NIOS2_GP                            = 1879048194
	DDT_NULL                                = 0
	DDT_NUM                                 = 35
	DDT_PLTGOT                              = 3
	DDT_PLTPAD                              = 1879047933
	DDT_PLTPADSZ                            = 1879047673
	DDT_PLTREL                              = 20
	DDT_PLTRELSZ                            = 2
	DDT_POSFLAG_1                           = 1879047677
	DDT_PPC64_GLINK                         = 1879048192
	DDT_PPC64_NUM                           = 4
	DDT_PPC64_OPD                           = 1879048193
	DDT_PPC64_OPDSZ                         = 1879048194
	DDT_PPC64_OPT                           = 1879048195
	DDT_PPC_GOT                             = 1879048192
	DDT_PPC_NUM                             = 2
	DDT_PPC_OPT                             = 1879048193
	DDT_PREINIT_ARRAY                       = 32
	DDT_PREINIT_ARRAYSZ                     = 33
	DDT_PROCNUM                             = 54
	DDT_REG                                 = 8
	DDT_REL                                 = 17
	DDT_RELA                                = 7
	DDT_RELACOUNT                           = 1879048185
	DDT_RELAENT                             = 9
	DDT_RELASZ                              = 8
	DDT_RELCOUNT                            = 1879048186
	DDT_RELENT                              = 19
	DDT_RELSZ                               = 18
	DDT_RPATH                               = 15
	DDT_RUNPATH                             = 29
	DDT_SOCK                                = 12
	DDT_SONAME                              = 14
	DDT_SPARC_NUM                           = 2
	DDT_SPARC_REGISTER                      = 1879048193
	DDT_STRSZ                               = 10
	DDT_STRTAB                              = 5
	DDT_SYMBOLIC                            = 16
	DDT_SYMENT                              = 11
	DDT_SYMINENT                            = 1879047679
	DDT_SYMINFO                             = 1879047935
	DDT_SYMINSZ                             = 1879047678
	DDT_SYMTAB                              = 6
	DDT_SYMTAB_SHNDX                        = 34
	DDT_TEXTREL                             = 22
	DDT_TLSDESC_GOT                         = 1879047927
	DDT_TLSDESC_PLT                         = 1879047926
	DDT_UNKNOWN                             = 0
	DDT_VALNUM                              = 12
	DDT_VALRNGHI                            = 1879047679
	DDT_VALRNGLO                            = 1879047424
	DDT_VERDEF                              = 1879048188
	DDT_VERDEFNUM                           = 1879048189
	DDT_VERNEED                             = 1879048190
	DDT_VERNEEDNUM                          = 1879048191
	DDT_VERSIONTAGNUM                       = 16
	DDT_VERSYM                              = 1879048176
	DDT_WHT                                 = 14
	DDYN_CNT                                = 32
	DD_FMT                                  = 131113
	DD_T_FMT                                = 131112
	DE2BIG                                  = 7
	DEACCES                                 = 13
	DEADDRINUSE                             = 98
	DEADDRNOTAVAIL                          = 99
	DEADV                                   = 68
	DEAFNOSUPPORT                           = 97
	DEAGAIN                                 = 11
	DEAI_ADDRFAMILY                         = -9
	DEAI_AGAIN                              = -3
	DEAI_ALLDONE                            = -103
	DEAI_BADFLAGS                           = -1
	DEAI_CANCELED                           = -101
	DEAI_FAIL                               = -4
	DEAI_FAMILY                             = -6
	DEAI_IDN_ENCODE                         = -105
	DEAI_INPROGRESS                         = -100
	DEAI_INTR                               = -104
	DEAI_MEMORY                             = -10
	DEAI_NODATA                             = -5
	DEAI_NONAME                             = -2
	DEAI_NOTCANCELED                        = -102
	DEAI_OVERFLOW                           = -12
	DEAI_SERVICE                            = -8
	DEAI_SOCKTYPE                           = -7
	DEAI_SYSTEM                             = -11
	DEALREADY                               = 114
	DEBADE                                  = 52
	DEBADF                                  = 9
	DEBADFD                                 = 77
	DEBADMSG                                = 74
	DEBADR                                  = 53
	DEBADRQC                                = 56
	DEBADSLT                                = 57
	DEBFONT                                 = 59
	DEBUSY                                  = 16
	DECANCELED                              = 125
	DECHILD                                 = 10
	DECHO                                   = 8
	DECHOCTL                                = 512
	DECHOE                                  = 16
	DECHOK                                  = 32
	DECHOKE                                 = 2048
	DECHONL                                 = 64
	DECHOPRT                                = 1024
	DECHRNG                                 = 44
	DECOMM                                  = 70
	DECONNABORTED                           = 103
	DECONNREFUSED                           = 111
	DECONNRESET                             = 104
	DEDEADLK                                = 35
	DEDEADLOCK                              = 35
	DEDESTADDRREQ                           = 89
	DEDOM                                   = 33
	DEDOTDOT                                = 73
	DEDQUOT                                 = 122
	DEEXIST                                 = 17
	DEFAULT                                 = 14
	DEFA_PARISC_1_0                         = 523
	DEFA_PARISC_1_1                         = 528
	DEFA_PARISC_2_0                         = 532
	DEFBIG                                  = 27
	DEFD_CLOEXEC                            = 524288
	DEFD_NONBLOCK                           = 2048
	DEFD_SEMAPHORE                          = 1
	DEF_ALPHA_32BIT                         = 1
	DEF_ALPHA_CANRELAX                      = 2
	DEF_ARM_ABI_FLOAT_HARD                  = 1024
	DEF_ARM_ABI_FLOAT_SOFT                  = 512
	DEF_ARM_ALIGN8                          = 64
	DEF_ARM_APCS_26                         = 8
	DEF_ARM_APCS_FLOAT                      = 16
	DEF_ARM_BE8                             = 8388608
	DEF_ARM_DYNSYMSUSESEGIDX                = 8
	DEF_ARM_EABIMASK                        = 4278190080
	DEF_ARM_EABI_UNKNOWN                    = 0
	DEF_ARM_EABI_VER1                       = 16777216
	DEF_ARM_EABI_VER2                       = 33554432
	DEF_ARM_EABI_VER3                       = 50331648
	DEF_ARM_EABI_VER4                       = 67108864
	DEF_ARM_EABI_VER5                       = 83886080
	DEF_ARM_HASENTRY                        = 2
	DEF_ARM_INTERWORK                       = 4
	DEF_ARM_LE8                             = 4194304
	DEF_ARM_MAPSYMSFIRST                    = 16
	DEF_ARM_MAVERICK_FLOAT                  = 2048
	DEF_ARM_NEW_ABI                         = 128
	DEF_ARM_OLD_ABI                         = 256
	DEF_ARM_PIC                             = 32
	DEF_ARM_RELEXEC                         = 1
	DEF_ARM_SOFT_FLOAT                      = 512
	DEF_ARM_SYMSARESORTED                   = 4
	DEF_ARM_VFP_FLOAT                       = 1024
	DEF_CPU32                               = 8454144
	DEF_IA_64_ABI64                         = 16
	DEF_IA_64_ARCH                          = 4278190080
	DEF_IA_64_MASKOS                        = 15
	DEF_MIPS_64BIT_WHIRL                    = 16
	DEF_MIPS_ABI2                           = 32
	DEF_MIPS_ABI_ON32                       = 64
	DEF_MIPS_ARCH                           = 4026531840
	DEF_MIPS_ARCH_1                         = 0
	DEF_MIPS_ARCH_2                         = 268435456
	DEF_MIPS_ARCH_3                         = 536870912
	DEF_MIPS_ARCH_32                        = 1342177280
	DEF_MIPS_ARCH_32R2                      = 1879048192
	DEF_MIPS_ARCH_4                         = 805306368
	DEF_MIPS_ARCH_5                         = 1073741824
	DEF_MIPS_ARCH_64                        = 1610612736
	DEF_MIPS_ARCH_64R2                      = 2147483648
	DEF_MIPS_CPIC                           = 4
	DEF_MIPS_FP64                           = 512
	DEF_MIPS_NAN2008                        = 1024
	DEF_MIPS_NOREORDER                      = 1
	DEF_MIPS_PIC                            = 2
	DEF_MIPS_XGOT                           = 8
	DEF_PARISC_ARCH                         = 65535
	DEF_PARISC_EXT                          = 131072
	DEF_PARISC_LAZYSWAP                     = 4194304
	DEF_PARISC_LSB                          = 262144
	DEF_PARISC_NO_KABP                      = 1048576
	DEF_PARISC_TRAPNIL                      = 65536
	DEF_PARISC_WIDE                         = 524288
	DEF_PPC64_ABI                           = 3
	DEF_PPC_EMB                             = 2147483648
	DEF_PPC_RELOCATABLE                     = 65536
	DEF_PPC_RELOCATABLE_LIB                 = 32768
	DEF_SH1                                 = 1
	DEF_SH2                                 = 2
	DEF_SH2A                                = 13
	DEF_SH2A_NOFPU                          = 19
	DEF_SH2A_SH3E                           = 24
	DEF_SH2A_SH3_NOFPU                      = 22
	DEF_SH2A_SH4                            = 23
	DEF_SH2A_SH4_NOFPU                      = 21
	DEF_SH2E                                = 11
	DEF_SH3                                 = 3
	DEF_SH3E                                = 8
	DEF_SH3_DSP                             = 5
	DEF_SH3_NOMMU                           = 20
	DEF_SH4                                 = 9
	DEF_SH4A                                = 12
	DEF_SH4AL_DSP                           = 6
	DEF_SH4A_NOFPU                          = 17
	DEF_SH4_NOFPU                           = 16
	DEF_SH4_NOMMU_NOFPU                     = 18
	DEF_SH_DSP                              = 4
	DEF_SH_MACH_MASK                        = 31
	DEF_SH_UNKNOWN                          = 0
	DEF_SPARCV9_MM                          = 3
	DEF_SPARCV9_PSO                         = 1
	DEF_SPARCV9_RMO                         = 2
	DEF_SPARCV9_TSO                         = 0
	DEF_SPARC_32PLUS                        = 256
	DEF_SPARC_EXT_MASK                      = 16776960
	DEF_SPARC_HAL_R1                        = 1024
	DEF_SPARC_LEDATA                        = 8388608
	DEF_SPARC_SUN_US1                       = 512
	DEF_SPARC_SUN_US3                       = 2048
	DEHOSTDOWN                              = 112
	DEHOSTUNREACH                           = 113
	DEHWPOISON                              = 133
	DEIDRM                                  = 43
	DEILSEQ                                 = 84
	DEINPROGRESS                            = 115
	DEINTR                                  = 4
	DEINVAL                                 = 22
	DEIO                                    = 5
	DEISCONN                                = 106
	DEISDIR                                 = 21
	DEISNAM                                 = 120
	DEI_ABIVERSION                          = 8
	DEI_CLASS                               = 4
	DEI_DATA                                = 5
	DEI_MAG0                                = 0
	DEI_MAG1                                = 1
	DEI_MAG2                                = 2
	DEI_MAG3                                = 3
	DEI_NIDENT                              = 16
	DEI_OSABI                               = 7
	DEI_PAD                                 = 9
	DEI_VERSION                             = 6
	DEKEYEXPIRED                            = 127
	DEKEYREJECTED                           = 129
	DEKEYREVOKED                            = 128
	DEL2HLT                                 = 51
	DEL2NSYNC                               = 45
	DEL3HLT                                 = 46
	DEL3RST                                 = 47
	DELFCLASS32                             = 1
	DELFCLASS64                             = 2
	DELFCLASSNONE                           = 0
	DELFCLASSNUM                            = 3
	DELFCOMPRESS_HIOS                       = 1879048191
	DELFCOMPRESS_HIPROC                     = 2147483647
	DELFCOMPRESS_LOOS                       = 1610612736
	DELFCOMPRESS_LOPROC                     = 1879048192
	DELFCOMPRESS_ZLIB                       = 1
	DELFDATA2LSB                            = 1
	DELFDATA2MSB                            = 2
	DELFDATANONE                            = 0
	DELFDATANUM                             = 3
	DELFMAG                                 = "\u007fELF"
	DELFMAG0                                = 127
	DELFMAG1                                = 69
	DELFMAG2                                = 76
	DELFMAG3                                = 70
	DELFOSABI_AIX                           = 7
	DELFOSABI_ARM                           = 97
	DELFOSABI_FREEBSD                       = 9
	DELFOSABI_GNU                           = 3
	DELFOSABI_HPUX                          = 1
	DELFOSABI_IRIX                          = 8
	DELFOSABI_LINUX                         = 3
	DELFOSABI_MODESTO                       = 11
	DELFOSABI_NETBSD                        = 2
	DELFOSABI_NONE                          = 0
	DELFOSABI_OPENBSD                       = 12
	DELFOSABI_SOLARIS                       = 6
	DELFOSABI_STANDALONE                    = 255
	DELFOSABI_SYSV                          = 0
	DELFOSABI_TRU64                         = 10
	DELF_NOTE_ABI                           = 1
	DELF_NOTE_GNU                           = "GNU"
	DELF_NOTE_OS_FREEBSD                    = 3
	DELF_NOTE_OS_GNU                        = 1
	DELF_NOTE_OS_LINUX                      = 0
	DELF_NOTE_OS_SOLARIS2                   = 2
	DELF_NOTE_PAGESIZE_HINT                 = 1
	DELF_NOTE_SOLARIS                       = "SUNW Solaris"
	DELIBACC                                = 79
	DELIBBAD                                = 80
	DELIBEXEC                               = 83
	DELIBMAX                                = 82
	DELIBSCN                                = 81
	DELNRNG                                 = 48
	DELOOP                                  = 40
	DEMEDIUMTYPE                            = 124
	DEMFILE                                 = 24
	DEMLINK                                 = 31
	DEMPTY                                  = 0
	DEMSGSIZE                               = 90
	DEMULTIHOP                              = 72
	DEM_386                                 = 3
	DEM_56800EX                             = 200
	DEM_68HC05                              = 72
	DEM_68HC08                              = 71
	DEM_68HC11                              = 70
	DEM_68HC12                              = 53
	DEM_68HC16                              = 69
	DEM_68K                                 = 4
	DEM_78KOR                               = 199
	DEM_8051                                = 165
	DEM_860                                 = 7
	DEM_88K                                 = 5
	DEM_960                                 = 19
	DEM_AARCH64                             = 183
	DEM_ALPHA                               = 36902
	DEM_ALTERA_NIOS2                        = 113
	DEM_AMDGPU                              = 224
	DEM_ARC                                 = 45
	DEM_ARCA                                = 109
	DEM_ARC_A5                              = 93
	DEM_ARC_COMPACT                         = 93
	DEM_ARC_COMPACT2                        = 195
	DEM_ARM                                 = 40
	DEM_AVR                                 = 83
	DEM_AVR32                               = 185
	DEM_BA1                                 = 201
	DEM_BA2                                 = 202
	DEM_BLACKFIN                            = 106
	DEM_BPF                                 = 247
	DEM_C166                                = 116
	DEM_CDP                                 = 215
	DEM_CE                                  = 119
	DEM_CLOUDSHIELD                         = 192
	DEM_COGE                                = 216
	DEM_COLDFIRE                            = 52
	DEM_COOL                                = 217
	DEM_COREA_1ST                           = 193
	DEM_COREA_2ND                           = 194
	DEM_CR                                  = 103
	DEM_CR16                                = 177
	DEM_CRAYNV2                             = 172
	DEM_CRIS                                = 76
	DEM_CRX                                 = 114
	DEM_CSR_KALIMBA                         = 219
	DEM_CUDA                                = 190
	DEM_CYPRESS_M8C                         = 161
	DEM_D10V                                = 85
	DEM_D30V                                = 86
	DEM_DSP24                               = 136
	DEM_DSPIC30F                            = 118
	DEM_DXP                                 = 112
	DEM_ECOG16                              = 176
	DEM_ECOG1X                              = 168
	DEM_ECOG2                               = 134
	DEM_EMX16                               = 212
	DEM_EMX8                                = 213
	DEM_ETPU                                = 178
	DEM_EXCESS                              = 111
	DEM_F2MC16                              = 104
	DEM_FAKE_ALPHA                          = 41
	DEM_FIREPATH                            = 78
	DEM_FR20                                = 37
	DEM_FR30                                = 84
	DEM_FT32                                = 222
	DEM_FX66                                = 66
	DEM_H8S                                 = 48
	DEM_H8_300                              = 46
	DEM_H8_300H                             = 47
	DEM_H8_500                              = 49
	DEM_HUANY                               = 81
	DEM_IA_64                               = 50
	DEM_IP2K                                = 101
	DEM_JAVELIN                             = 77
	DEM_K10M                                = 181
	DEM_KM32                                = 210
	DEM_KMX32                               = 211
	DEM_KVARC                               = 214
	DEM_L10M                                = 180
	DEM_LATTICEMICO32                       = 138
	DEM_M16C                                = 117
	DEM_M32                                 = 1
	DEM_M32C                                = 120
	DEM_M32R                                = 88
	DEM_MANIK                               = 171
	DEM_MAX                                 = 102
	DEM_MAXQ30                              = 169
	DEM_MCHP_PIC                            = 204
	DEM_MCST_ELBRUS                         = 175
	DEM_ME16                                = 59
	DEM_METAG                               = 174
	DEM_MICROBLAZE                          = 189
	DEM_MIPS                                = 8
	DEM_MIPS_RS3_LE                         = 10
	DEM_MIPS_X                              = 51
	DEM_MMA                                 = 54
	DEM_MMDSP_PLUS                          = 160
	DEM_MMIX                                = 80
	DEM_MN10200                             = 90
	DEM_MN10300                             = 89
	DEM_MOXIE                               = 223
	DEM_MSP430                              = 105
	DEM_NCPU                                = 56
	DEM_NDR1                                = 57
	DEM_NDS32                               = 167
	DEM_NONE                                = 0
	DEM_NORC                                = 218
	DEM_NS32K                               = 97
	DEM_NUM                                 = 248
	DEM_OPEN8                               = 196
	DEM_OPENRISC                            = 92
	DEM_OR1K                                = 92
	DEM_PARISC                              = 15
	DEM_PCP                                 = 55
	DEM_PDSP                                = 63
	DEM_PJ                                  = 91
	DEM_PPC                                 = 20
	DEM_PPC64                               = 21
	DEM_PRISM                               = 82
	DEM_QDSP6                               = 164
	DEM_R32C                                = 162
	DEM_RCE                                 = 39
	DEM_RH32                                = 38
	DEM_RISCV                               = 243
	DEM_RL78                                = 197
	DEM_RS08                                = 132
	DEM_RX                                  = 173
	DEM_S370                                = 9
	DEM_S390                                = 22
	DEM_SCORE7                              = 135
	DEM_SEP                                 = 108
	DEM_SE_C17                              = 139
	DEM_SE_C33                              = 107
	DEM_SH                                  = 42
	DEM_SHARC                               = 133
	DEM_SLE9X                               = 179
	DEM_SNP1K                               = 99
	DEM_SPARC                               = 2
	DEM_SPARC32PLUS                         = 18
	DEM_SPARCV9                             = 43
	DEM_ST100                               = 60
	DEM_ST19                                = 74
	DEM_ST200                               = 100
	DEM_ST7                                 = 68
	DEM_ST9PLUS                             = 67
	DEM_STARCORE                            = 58
	DEM_STM8                                = 186
	DEM_STXP7X                              = 166
	DEM_SVX                                 = 73
	DEM_TILE64                              = 187
	DEM_TILEGX                              = 191
	DEM_TILEPRO                             = 188
	DEM_TINYJ                               = 61
	DEM_TI_ARP32                            = 143
	DEM_TI_C2000                            = 141
	DEM_TI_C5500                            = 142
	DEM_TI_C6000                            = 140
	DEM_TI_PRU                              = 144
	DEM_TMM_GPP                             = 96
	DEM_TPC                                 = 98
	DEM_TRICORE                             = 44
	DEM_TRIMEDIA                            = 163
	DEM_TSK3000                             = 131
	DEM_UNICORE                             = 110
	DEM_V800                                = 36
	DEM_V850                                = 87
	DEM_VAX                                 = 75
	DEM_VIDEOCORE                           = 95
	DEM_VIDEOCORE3                          = 137
	DEM_VIDEOCORE5                          = 198
	DEM_VISIUM                              = 221
	DEM_VPP500                              = 17
	DEM_X86_64                              = 62
	DEM_XCORE                               = 203
	DEM_XGATE                               = 115
	DEM_XIMO16                              = 170
	DEM_XTENSA                              = 94
	DEM_Z80                                 = 220
	DEM_ZSP                                 = 79
	DENAMETOOLONG                           = 36
	DENAVAIL                                = 119
	DEND                                    = 0
	DENETDOWN                               = 100
	DENETRESET                              = 102
	DENETUNREACH                            = 101
	DENFILE                                 = 23
	DENOANO                                 = 55
	DENOBUFS                                = 105
	DENOCSI                                 = 50
	DENODATA                                = 61
	DENODEV                                 = 19
	DENOENT                                 = 2
	DENOEXEC                                = 8
	DENOKEY                                 = 126
	DENOLCK                                 = 37
	DENOLINK                                = 67
	DENOMEDIUM                              = 123
	DENOMEM                                 = 12
	DENOMSG                                 = 42
	DENONET                                 = 64
	DENOPKG                                 = 65
	DENOPROTOOPT                            = 92
	DENOSPC                                 = 28
	DENOSR                                  = 63
	DENOSTR                                 = 60
	DENOSYS                                 = 38
	DENOTBLK                                = 15
	DENOTCONN                               = 107
	DENOTDIR                                = 20
	DENOTEMPTY                              = 39
	DENOTNAM                                = 118
	DENOTRECOVERABLE                        = 131
	DENOTSOCK                               = 88
	DENOTSUP                                = 95
	DENOTTY                                 = 25
	DENOTUNIQ                               = 76
	DENXIO                                  = 6
	DEOF                                    = -1
	DEOPNOTSUPP                             = 95
	DEOVERFLOW                              = 75
	DEOWNERDEAD                             = 130
	DEPERM                                  = 1
	DEPFNOSUPPORT                           = 96
	DEPIPE                                  = 32
	DEPOLLERR                               = 8
	DEPOLLET                                = 2147483648
	DEPOLLEXCLUSIVE                         = 268435456
	DEPOLLHUP                               = 16
	DEPOLLIN                                = 1
	DEPOLLMSG                               = 1024
	DEPOLLNVAL                              = 32
	DEPOLLONESHOT                           = 1073741824
	DEPOLLOUT                               = 4
	DEPOLLPRI                               = 2
	DEPOLLRDBAND                            = 128
	DEPOLLRDHUP                             = 8192
	DEPOLLRDNORM                            = 64
	DEPOLLWAKEUP                            = 536870912
	DEPOLLWRBAND                            = 512
	DEPOLLWRNORM                            = 256
	DEPOLL_CLOEXEC                          = 524288
	DEPOLL_CTL_ADD                          = 1
	DEPOLL_CTL_DEL                          = 2
	DEPOLL_CTL_MOD                          = 3
	DEPOLL_NONBLOCK                         = 2048
	DEPROTO                                 = 71
	DEPROTONOSUPPORT                        = 93
	DEPROTOTYPE                             = 91
	DEPS                                    = 2.220446049250313e-16
	DERA                                    = 131116
	DERANGE                                 = 34
	DERA_D_FMT                              = 131118
	DERA_D_T_FMT                            = 131120
	DERA_T_FMT                              = 131121
	DEREMCHG                                = 78
	DEREMOTE                                = 66
	DEREMOTEIO                              = 121
	DERESTART                               = 85
	DERFKILL                                = 132
	DEROFS                                  = 30
	DESHUTDOWN                              = 108
	DESOCKTNOSUPPORT                        = 94
	DESPIPE                                 = 29
	DESRCH                                  = 3
	DESRMNT                                 = 69
	DESTALE                                 = 116
	DESTRPIPE                               = 86
	DETHERMIN                               = 46
	DETHERMTU                               = 1500
	DETHERTYPE_AARP                         = 33011
	DETHERTYPE_ARP                          = 2054
	DETHERTYPE_AT                           = 32923
	DETHERTYPE_IP                           = 2048
	DETHERTYPE_IPV6                         = 34525
	DETHERTYPE_IPX                          = 33079
	DETHERTYPE_LOOPBACK                     = 36864
	DETHERTYPE_NTRAILER                     = 16
	DETHERTYPE_PUP                          = 512
	DETHERTYPE_REVARP                       = 32821
	DETHERTYPE_SPRITE                       = 1280
	DETHERTYPE_TRAIL                        = 4096
	DETHERTYPE_VLAN                         = 33024
	DETHER_ADDR_LEN                         = 6
	DETHER_CRC_LEN                          = 4
	DETHER_HDR_LEN                          = 14
	DETHER_MAX_LEN                          = 1518
	DETHER_MIN_LEN                          = 64
	DETHER_TYPE_LEN                         = 2
	DETH_ALEN                               = 6
	DETH_DATA_LEN                           = 1500
	DETH_FCS_LEN                            = 4
	DETH_FRAME_LEN                          = 1514
	DETH_HLEN                               = 14
	DETH_MAX_MTU                            = 65535
	DETH_MIN_MTU                            = 68
	DETH_P_1588                             = 35063
	DETH_P_8021AD                           = 34984
	DETH_P_8021AH                           = 35047
	DETH_P_8021Q                            = 33024
	DETH_P_80221                            = 35095
	DETH_P_802_2                            = 4
	DETH_P_802_3                            = 1
	DETH_P_802_3_MIN                        = 1536
	DETH_P_802_EX1                          = 34997
	DETH_P_AARP                             = 33011
	DETH_P_AF_IUCV                          = 64507
	DETH_P_ALL                              = 3
	DETH_P_AOE                              = 34978
	DETH_P_ARCNET                           = 26
	DETH_P_ARP                              = 2054
	DETH_P_ATALK                            = 32923
	DETH_P_ATMFATE                          = 34948
	DETH_P_ATMMPOA                          = 34892
	DETH_P_AX25                             = 2
	DETH_P_BATMAN                           = 17157
	DETH_P_BPQ                              = 2303
	DETH_P_CAIF                             = 247
	DETH_P_CAN                              = 12
	DETH_P_CANFD                            = 13
	DETH_P_CONTROL                          = 22
	DETH_P_CUST                             = 24582
	DETH_P_DDCMP                            = 6
	DETH_P_DEC                              = 24576
	DETH_P_DIAG                             = 24581
	DETH_P_DNA_DL                           = 24577
	DETH_P_DNA_RC                           = 24578
	DETH_P_DNA_RT                           = 24579
	DETH_P_DSA                              = 27
	DETH_P_ECONET                           = 24
	DETH_P_EDSA                             = 56026
	DETH_P_ERSPAN                           = 35006
	DETH_P_ERSPAN2                          = 8939
	DETH_P_FCOE                             = 35078
	DETH_P_FIP                              = 35092
	DETH_P_HDLC                             = 25
	DETH_P_HSR                              = 35119
	DETH_P_IBOE                             = 35093
	DETH_P_IEEE802154                       = 246
	DETH_P_IEEEPUP                          = 2560
	DETH_P_IEEEPUPAT                        = 2561
	DETH_P_IFE                              = 60734
	DETH_P_IP                               = 2048
	DETH_P_IPV6                             = 34525
	DETH_P_IPX                              = 33079
	DETH_P_IRDA                             = 23
	DETH_P_LAT                              = 24580
	DETH_P_LINK_CTL                         = 34924
	DETH_P_LOCALTALK                        = 9
	DETH_P_LOOP                             = 96
	DETH_P_LOOPBACK                         = 36864
	DETH_P_MACSEC                           = 35045
	DETH_P_MAP                              = 249
	DETH_P_MOBITEX                          = 21
	DETH_P_MPLS_MC                          = 34888
	DETH_P_MPLS_UC                          = 34887
	DETH_P_MVRP                             = 35061
	DETH_P_NCSI                             = 35064
	DETH_P_NSH                              = 35151
	DETH_P_PAE                              = 34958
	DETH_P_PAUSE                            = 34824
	DETH_P_PHONET                           = 245
	DETH_P_PPPTALK                          = 16
	DETH_P_PPP_DISC                         = 34915
	DETH_P_PPP_MP                           = 8
	DETH_P_PPP_SES                          = 34916
	DETH_P_PREAUTH                          = 35015
	DETH_P_PRP                              = 35067
	DETH_P_PUP                              = 512
	DETH_P_PUPAT                            = 513
	DETH_P_QINQ1                            = 37120
	DETH_P_QINQ2                            = 37376
	DETH_P_QINQ3                            = 37632
	DETH_P_RARP                             = 32821
	DETH_P_SCA                              = 24583
	DETH_P_SLOW                             = 34825
	DETH_P_SNAP                             = 5
	DETH_P_TDLS                             = 35085
	DETH_P_TEB                              = 25944
	DETH_P_TIPC                             = 35018
	DETH_P_TRAILER                          = 28
	DETH_P_TR_802_2                         = 17
	DETH_P_TSN                              = 8944
	DETH_P_WAN_PPP                          = 7
	DETH_P_WCCP                             = 34878
	DETH_P_X25                              = 2053
	DETH_P_XDSA                             = 248
	DETH_TLEN                               = 2
	DETH_ZLEN                               = 60
	DETIME                                  = 62
	DETIMEDOUT                              = 110
	DETOOMANYREFS                           = 109
	DETXTBSY                                = 26
	DET_CORE                                = 4
	DET_DYN                                 = 3
	DET_EXEC                                = 2
	DET_HIOS                                = 65279
	DET_HIPROC                              = 65535
	DET_LOOS                                = 65024
	DET_LOPROC                              = 65280
	DET_NONE                                = 0
	DET_NUM                                 = 5
	DET_REL                                 = 1
	DEUCLEAN                                = 117
	DEUC_JP                                 = 208
	DEUC_KR                                 = 232
	DEUNATCH                                = 49
	DEUSERS                                 = 87
	DEV_CURRENT                             = 1
	DEV_NONE                                = 0
	DEV_NUM                                 = 2
	DEWOULDBLOCK                            = 11
	DEXDEV                                  = 18
	DEXFULL                                 = 54
	DEXIT_FAILURE                           = 1
	DEXIT_SUCCESS                           = 0
	DEXPR_NEST_MAX                          = 32
	DEXTA                                   = 14
	DEXTB                                   = 15
	DEXTPROC                                = 65536
	DE_MIPS_ARCH_1                          = 0
	DE_MIPS_ARCH_2                          = 268435456
	DE_MIPS_ARCH_3                          = 536870912
	DE_MIPS_ARCH_32                         = 1342177280
	DE_MIPS_ARCH_4                          = 805306368
	DE_MIPS_ARCH_5                          = 1073741824
	DE_MIPS_ARCH_64                         = 1610612736
	DFALLOC_FL_KEEP_SIZE                    = 1
	DFALLOC_FL_PUNCH_HOLE                   = 2
	DFANOTIFY_METADATA_VERSION              = 3
	DFAN_ACCESS                             = 1
	DFAN_ACCESS_PERM                        = 131072
	DFAN_ALLOW                              = 1
	DFAN_ALL_CLASS_BITS                     = 12
	DFAN_ALL_EVENTS                         = 59
	DFAN_ALL_INIT_FLAGS                     = 63
	DFAN_ALL_MARK_FLAGS                     = 255
	DFAN_ALL_OUTGOING_EVENTS                = 213051
	DFAN_ALL_PERM_EVENTS                    = 196608
	DFAN_CLASS_CONTENT                      = 4
	DFAN_CLASS_NOTIF                        = 0
	DFAN_CLASS_PRE_CONTENT                  = 8
	DFAN_CLOEXEC                            = 1
	DFAN_CLOSE                              = 24
	DFAN_CLOSE_NOWRITE                      = 16
	DFAN_CLOSE_WRITE                        = 8
	DFAN_DENY                               = 2
	DFAN_EVENT_ON_CHILD                     = 134217728
	DFAN_MARK_ADD                           = 1
	DFAN_MARK_DONT_FOLLOW                   = 4
	DFAN_MARK_FLUSH                         = 128
	DFAN_MARK_IGNORED_MASK                  = 32
	DFAN_MARK_IGNORED_SURV_MODIFY           = 64
	DFAN_MARK_MOUNT                         = 16
	DFAN_MARK_ONLYDIR                       = 8
	DFAN_MARK_REMOVE                        = 2
	DFAN_MODIFY                             = 2
	DFAN_NOFD                               = -1
	DFAN_NONBLOCK                           = 2
	DFAN_ONDIR                              = 1073741824
	DFAN_OPEN                               = 32
	DFAN_OPEN_PERM                          = 65536
	DFAN_Q_OVERFLOW                         = 16384
	DFAN_UNLIMITED_MARKS                    = 32
	DFAN_UNLIMITED_QUEUE                    = 16
	DFAPPEND                                = 1024
	DFASYNC                                 = 8192
	DFDOP_CLOSE                             = 1
	DFDOP_DUP2                              = 2
	DFDOP_OPEN                              = 3
	DFDPIC_CONSTDISP_FLAG                   = 0
	DFD_CLOEXEC                             = 1
	DFD_SETSIZE                             = 1024
	DFE_ALL_EXCEPT                          = 63
	DFE_DIVBYZERO                           = 4
	DFE_DOWNWARD                            = 1024
	DFE_INEXACT                             = 32
	DFE_INVALID                             = 1
	DFE_OVERFLOW                            = 8
	DFE_TONEAREST                           = 0
	DFE_TOWARDZERO                          = 3072
	DFE_UNDERFLOW                           = 16
	DFE_UPWARD                              = 2048
	DFF0                                    = 0
	DFF1                                    = 32768
	DFFDLY                                  = 32768
	DFFSYNC                                 = 1052672
	DFILENAME_MAX                           = 4096
	DFILESIZEBITS                           = 64
	DFIOASYNC                               = 21586
	DFIOCLEX                                = 21585
	DFIOGETOWN                              = 35075
	DFIONBIO                                = 21537
	DFIONCLEX                               = 21584
	DFIONREAD                               = 21531
	DFIOQSIZE                               = 21600
	DFIOSETOWN                              = 35073
	DFLAGMASK                               = 75913
	DFLAGS                                  = 657410
	DFLT_DECIMAL_DIG                        = 9
	DFLT_DIG                                = 6
	DFLT_EPSILON                            = 1.1920929e-07
	DFLT_EVAL_METHOD                        = 0
	DFLT_HAS_SUBNORM                        = 1
	DFLT_MANT_DIG                           = 24
	DFLT_MAX                                = 3.4028235e+38
	DFLT_MAX_10_EXP                         = 38
	DFLT_MAX_EXP                            = 128
	DFLT_MIN                                = 1.1754944e-38
	DFLT_MIN_10_EXP                         = -37
	DFLT_MIN_EXP                            = -125
	DFLT_RADIX                              = 2
	DFLT_TRUE_MIN                           = 1e-45
	DFLUSHBAND                              = 4
	DFLUSHO                                 = 4096
	DFLUSHR                                 = 1
	DFLUSHRW                                = 3
	DFLUSHW                                 = 2
	DFMNAMESZ                               = 8
	DFNDELAY                                = 2048
	DFNM_CASEFOLD                           = 16
	DFNM_FILE_NAME                          = 1
	DFNM_LEADING_DIR                        = 8
	DFNM_NOESCAPE                           = 2
	DFNM_NOMATCH                            = 1
	DFNM_NOSYS                              = -1
	DFNM_PATHNAME                           = 1
	DFNM_PERIOD                             = 4
	DFNONBLOCK                              = 2048
	DFOPEN_MAX                              = 1000
	DFORMERR                                = 0
	DFPE_FLTDIV                             = 3
	DFPE_FLTINV                             = 7
	DFPE_FLTOVF                             = 4
	DFPE_FLTRES                             = 6
	DFPE_FLTSUB                             = 8
	DFPE_FLTUND                             = 5
	DFPE_INTDIV                             = 1
	DFPE_INTOVF                             = 2
	DFP_INFINITE                            = 1
	DFP_NAN                                 = 0
	DFP_NORMAL                              = 4
	DFP_SUBNORMAL                           = 3
	DFP_ZERO                                = 2
	DFSETLOCKING_BYCALLER                   = 2
	DFSETLOCKING_INTERNAL                   = 1
	DFSETLOCKING_QUERY                      = 0
	DFTW_CHDIR                              = 4
	DFTW_D                                  = 2
	DFTW_DEPTH                              = 8
	DFTW_DNR                                = 3
	DFTW_DP                                 = 6
	DFTW_F                                  = 1
	DFTW_MOUNT                              = 2
	DFTW_NS                                 = 4
	DFTW_PHYS                               = 1
	DFTW_SL                                 = 5
	DFTW_SLN                                = 7
	DFUTEX_CLOCK_REALTIME                   = 256
	DFUTEX_CMP_REQUEUE                      = 4
	DFUTEX_FD                               = 2
	DFUTEX_LOCK_PI                          = 6
	DFUTEX_PRIVATE                          = 128
	DFUTEX_REQUEUE                          = 3
	DFUTEX_TRYLOCK_PI                       = 8
	DFUTEX_UNLOCK_PI                        = 7
	DFUTEX_WAIT                             = 0
	DFUTEX_WAIT_BITSET                      = 9
	DFUTEX_WAKE                             = 1
	DFUTEX_WAKE_OP                          = 5
	DF_ADD_SEALS                            = 1033
	DF_APP                                  = 128
	DF_CANCELLK                             = 1029
	DF_DUPFD                                = 0
	DF_DUPFD_CLOEXEC                        = 1030
	DF_EOF                                  = 16
	DF_ERR                                  = 32
	DF_GETFD                                = 1
	DF_GETFL                                = 3
	DF_GETLEASE                             = 1025
	DF_GETLK                                = 5
	DF_GETLK64                              = 5
	DF_GETOWN                               = 9
	DF_GETOWNER_UIDS                        = 17
	DF_GETOWN_EX                            = 16
	DF_GETPIPE_SZ                           = 1032
	DF_GETSIG                               = 11
	DF_GET_FILE_RW_HINT                     = 1037
	DF_GET_RW_HINT                          = 1035
	DF_GET_SEALS                            = 1034
	DF_LOCK                                 = 1
	DF_NORD                                 = 4
	DF_NOTIFY                               = 1026
	DF_NOWR                                 = 8
	DF_OFD_GETLK                            = 36
	DF_OFD_SETLK                            = 37
	DF_OFD_SETLKW                           = 38
	DF_OK                                   = 0
	DF_OWNER_GID                            = 2
	DF_OWNER_PGRP                           = 2
	DF_OWNER_PID                            = 1
	DF_OWNER_TID                            = 0
	DF_PERM                                 = 1
	DF_RDLCK                                = 0
	DF_SEAL_GROW                            = 4
	DF_SEAL_SEAL                            = 1
	DF_SEAL_SHRINK                          = 2
	DF_SEAL_WRITE                           = 8
	DF_SETFD                                = 2
	DF_SETFL                                = 4
	DF_SETLEASE                             = 1024
	DF_SETLK                                = 6
	DF_SETLK64                              = 6
	DF_SETLKW                               = 7
	DF_SETLKW64                             = 7
	DF_SETOWN                               = 8
	DF_SETOWN_EX                            = 15
	DF_SETPIPE_SZ                           = 1031
	DF_SETSIG                               = 10
	DF_SET_FILE_RW_HINT                     = 1038
	DF_SET_RW_HINT                          = 1036
	DF_SVB                                  = 64
	DF_TEST                                 = 3
	DF_TLOCK                                = 2
	DF_ULOCK                                = 0
	DF_UNLCK                                = 2
	DF_WRLCK                                = 1
	DGB18030                                = 216
	DGB2312                                 = 218
	DGBK                                    = 217
	DGETALL                                 = 13
	DGETGRBYGID                             = 3
	DGETGRBYNAME                            = 2
	DGETINITGR                              = 15
	DGETLONG                                = 0
	DGETNCNT                                = 14
	DGETPID                                 = 11
	DGETPWBYNAME                            = 0
	DGETPWBYUID                             = 1
	DGETSHORT                               = 0
	DGETVAL                                 = 12
	DGETZCNT                                = 15
	DGLOB_ABORTED                           = 2
	DGLOB_APPEND                            = 32
	DGLOB_DOOFFS                            = 8
	DGLOB_ERR                               = 1
	DGLOB_MARK                              = 2
	DGLOB_NOCHECK                           = 16
	DGLOB_NOESCAPE                          = 64
	DGLOB_NOMATCH                           = 3
	DGLOB_NOSORT                            = 4
	DGLOB_NOSPACE                           = 1
	DGLOB_NOSYS                             = 4
	DGLOB_PERIOD                            = 128
	DGRFOUND                                = 1
	DGRGID                                  = 4
	DGRMEMCNT                               = 5
	DGRNAMELEN                              = 2
	DGRND_NONBLOCK                          = 1
	DGRND_RANDOM                            = 2
	DGROUPED                                = 128
	DGRPASSWDLEN                            = 3
	DGRPQUOTA                               = 1
	DGRP_COMDAT                             = 1
	DGRVERSION                              = 0
	DGR_LEN                                 = 6
	DHFIXEDSZ                               = 12
	DHIGHS                                  = 0
	DHOST_NAME_MAX                          = 255
	DHOST_NOT_FOUND                         = 1
	DHUGE                                   = 3.4028235e+38
	DHUPCL                                  = 1024
	DICANON                                 = 2
	DICRNL                                  = 256
	DIEXTEN                                 = 32768
	DIFADDRS_HASH_SIZE                      = 64
	DIFA_ADDRESS                            = 1
	DIFA_BROADCAST                          = 4
	DIFA_LABEL                              = 3
	DIFA_LOCAL                              = 2
	DIFF_ALLMULTI                           = 512
	DIFF_AUTOMEDIA                          = 16384
	DIFF_BROADCAST                          = 2
	DIFF_DEBUG                              = 4
	DIFF_DORMANT                            = 131072
	DIFF_DYNAMIC                            = 32768
	DIFF_ECHO                               = 262144
	DIFF_LOOPBACK                           = 8
	DIFF_LOWER_UP                           = 65536
	DIFF_MASTER                             = 1024
	DIFF_MULTICAST                          = 4096
	DIFF_NOARP                              = 128
	DIFF_NOTRAILERS                         = 32
	DIFF_POINTOPOINT                        = 16
	DIFF_PORTSEL                            = 8192
	DIFF_PROMISC                            = 256
	DIFF_RUNNING                            = 64
	DIFF_SLAVE                              = 2048
	DIFF_UP                                 = 1
	DIFF_VOLATILE                           = 461914
	DIFHWADDRLEN                            = 6
	DIFLA_ADDRESS                           = 1
	DIFLA_BROADCAST                         = 2
	DIFLA_IFNAME                            = 3
	DIFLA_STATS                             = 7
	DIFNAMSIZ                               = 16
	DIF_NAMESIZE                            = 16
	DIGNBRK                                 = 1
	DIGNCR                                  = 128
	DIGNPAR                                 = 4
	DIIF_ALL                                = 7
	DIIF_BGRACE                             = 1
	DIIF_FLAGS                              = 4
	DIIF_IGRACE                             = 2
	DILL_BADSTK                             = 8
	DILL_COPROC                             = 7
	DILL_ILLADR                             = 3
	DILL_ILLOPC                             = 1
	DILL_ILLOPN                             = 2
	DILL_ILLTRP                             = 4
	DILL_PRVOPC                             = 5
	DILL_PRVREG                             = 6
	DIMAXBEL                                = 8192
	DIN6ADDRSZ                              = 16
	DINADDRSZ                               = 4
	DINDIR_MASK                             = 192
	DINET6_ADDRSTRLEN                       = 46
	DINET_ADDRSTRLEN                        = 16
	DINITGRFOUND                            = 1
	DINITGRNGRPS                            = 2
	DINITGRVERSION                          = 0
	DINITGR_LEN                             = 3
	DINIT_PROCESS                           = 5
	DINLCR                                  = 64
	DINPCK                                  = 16
	DINT16SZ                                = 2
	DINT16_MAX                              = 32767
	DINT16_MIN                              = -32768
	DINT32SZ                                = 4
	DINT32_MAX                              = 2147483647
	DINT32_MIN                              = -2147483648
	DINT64_MAX                              = 9223372036854775807
	DINT64_MIN                              = -9223372036854775808
	DINT8SZ                                 = 1
	DINT8_MAX                               = 127
	DINT8_MIN                               = -128
	DINTMAX_MAX                             = 9223372036854775807
	DINTMAX_MIN                             = -9223372036854775808
	DINTPTR_MAX                             = 9223372036854775807
	DINTPTR_MIN                             = -9223372036854775808
	DINT_FAST16_MAX                         = 2147483647
	DINT_FAST16_MIN                         = -2147483648
	DINT_FAST32_MAX                         = 2147483647
	DINT_FAST32_MIN                         = -2147483648
	DINT_FAST64_MAX                         = 9223372036854775807
	DINT_FAST64_MIN                         = -9223372036854775808
	DINT_FAST8_MAX                          = 127
	DINT_FAST8_MIN                          = -128
	DINT_LEAST16_MAX                        = 32767
	DINT_LEAST16_MIN                        = -32768
	DINT_LEAST32_MAX                        = 2147483647
	DINT_LEAST32_MIN                        = -2147483648
	DINT_LEAST64_MAX                        = 9223372036854775807
	DINT_LEAST64_MIN                        = -9223372036854775808
	DINT_LEAST8_MAX                         = 127
	DINT_LEAST8_MIN                         = -128
	DINT_MAX                                = 2147483647
	DINT_MIN                                = -2147483648
	DIN_ACCESS                              = 1
	DIN_ALL_EVENTS                          = 4095
	DIN_ATTRIB                              = 4
	DIN_CLASSA_HOST                         = 16777215
	DIN_CLASSA_MAX                          = 128
	DIN_CLASSA_NET                          = 4278190080
	DIN_CLASSA_NSHIFT                       = 24
	DIN_CLASSB_HOST                         = 65535
	DIN_CLASSB_MAX                          = 65536
	DIN_CLASSB_NET                          = 4294901760
	DIN_CLASSB_NSHIFT                       = 16
	DIN_CLASSC_HOST                         = 255
	DIN_CLASSC_NET                          = 4294967040
	DIN_CLASSC_NSHIFT                       = 8
	DIN_CLOEXEC                             = 524288
	DIN_CLOSE                               = 24
	DIN_CLOSE_NOWRITE                       = 16
	DIN_CLOSE_WRITE                         = 8
	DIN_CREATE                              = 256
	DIN_DELETE                              = 512
	DIN_DELETE_SELF                         = 1024
	DIN_DONT_FOLLOW                         = 33554432
	DIN_EXCL_UNLINK                         = 67108864
	DIN_IGNORED                             = 32768
	DIN_ISDIR                               = 1073741824
	DIN_LOOPBACKNET                         = 127
	DIN_MASK_ADD                            = 536870912
	DIN_MODIFY                              = 2
	DIN_MOVE                                = 192
	DIN_MOVED_FROM                          = 64
	DIN_MOVED_TO                            = 128
	DIN_MOVE_SELF                           = 2048
	DIN_NONBLOCK                            = 2048
	DIN_ONESHOT                             = 2147483648
	DIN_ONLYDIR                             = 16777216
	DIN_OPEN                                = 32
	DIN_Q_OVERFLOW                          = 16384
	DIN_UNMOUNT                             = 8192
	DIOV_MAX                                = 1024
	DIPCOP_msgctl                           = 14
	DIPCOP_msgget                           = 13
	DIPCOP_msgrcv                           = 12
	DIPCOP_msgsnd                           = 11
	DIPCOP_semctl                           = 3
	DIPCOP_semget                           = 2
	DIPCOP_semop                            = 1
	DIPCOP_semtimedop                       = 4
	DIPCOP_shmat                            = 21
	DIPCOP_shmctl                           = 24
	DIPCOP_shmdt                            = 22
	DIPCOP_shmget                           = 23
	DIPC_64                                 = 0
	DIPC_CREAT                              = 512
	DIPC_EXCL                               = 1024
	DIPC_INFO                               = 3
	DIPC_NOWAIT                             = 2048
	DIPC_RMID                               = 0
	DIPC_SET                                = 1
	DIPC_STAT                               = 2
	DIPPORT_RESERVED                        = 1024
	DIPPROTO_AH                             = 51
	DIPPROTO_BEETPH                         = 94
	DIPPROTO_COMP                           = 108
	DIPPROTO_DCCP                           = 33
	DIPPROTO_DSTOPTS                        = 60
	DIPPROTO_EGP                            = 8
	DIPPROTO_ENCAP                          = 98
	DIPPROTO_ESP                            = 50
	DIPPROTO_FRAGMENT                       = 44
	DIPPROTO_GRE                            = 47
	DIPPROTO_HOPOPTS                        = 0
	DIPPROTO_ICMP                           = 1
	DIPPROTO_ICMPV6                         = 58
	DIPPROTO_IDP                            = 22
	DIPPROTO_IGMP                           = 2
	DIPPROTO_IP                             = 0
	DIPPROTO_IPIP                           = 4
	DIPPROTO_IPV6                           = 41
	DIPPROTO_MAX                            = 256
	DIPPROTO_MH                             = 135
	DIPPROTO_MPLS                           = 137
	DIPPROTO_MTP                            = 92
	DIPPROTO_NONE                           = 59
	DIPPROTO_PIM                            = 103
	DIPPROTO_PUP                            = 12
	DIPPROTO_RAW                            = 255
	DIPPROTO_ROUTING                        = 43
	DIPPROTO_RSVP                           = 46
	DIPPROTO_SCTP                           = 132
	DIPPROTO_TCP                            = 6
	DIPPROTO_TP                             = 29
	DIPPROTO_UDP                            = 17
	DIPPROTO_UDPLITE                        = 136
	DIPV6_2292DSTOPTS                       = 4
	DIPV6_2292HOPLIMIT                      = 8
	DIPV6_2292HOPOPTS                       = 3
	DIPV6_2292PKTINFO                       = 2
	DIPV6_2292PKTOPTIONS                    = 6
	DIPV6_2292RTHDR                         = 5
	DIPV6_ADDRFORM                          = 1
	DIPV6_ADDR_PREFERENCES                  = 72
	DIPV6_ADD_MEMBERSHIP                    = 20
	DIPV6_AUTHHDR                           = 10
	DIPV6_AUTOFLOWLABEL                     = 70
	DIPV6_CHECKSUM                          = 7
	DIPV6_DONTFRAG                          = 62
	DIPV6_DROP_MEMBERSHIP                   = 21
	DIPV6_DSTOPTS                           = 59
	DIPV6_FREEBIND                          = 78
	DIPV6_HDRINCL                           = 36
	DIPV6_HOPLIMIT                          = 52
	DIPV6_HOPOPTS                           = 54
	DIPV6_IPSEC_POLICY                      = 34
	DIPV6_JOIN_ANYCAST                      = 27
	DIPV6_JOIN_GROUP                        = 20
	DIPV6_LEAVE_ANYCAST                     = 28
	DIPV6_LEAVE_GROUP                       = 21
	DIPV6_MINHOPCOUNT                       = 73
	DIPV6_MTU                               = 24
	DIPV6_MTU_DISCOVER                      = 23
	DIPV6_MULTICAST_HOPS                    = 18
	DIPV6_MULTICAST_IF                      = 17
	DIPV6_MULTICAST_LOOP                    = 19
	DIPV6_NEXTHOP                           = 9
	DIPV6_ORIGDSTADDR                       = 74
	DIPV6_PATHMTU                           = 61
	DIPV6_PKTINFO                           = 50
	DIPV6_PMTUDISC_DO                       = 2
	DIPV6_PMTUDISC_DONT                     = 0
	DIPV6_PMTUDISC_INTERFACE                = 4
	DIPV6_PMTUDISC_OMIT                     = 5
	DIPV6_PMTUDISC_PROBE                    = 3
	DIPV6_PMTUDISC_WANT                     = 1
	DIPV6_PREFER_SRC_CGA                    = 8
	DIPV6_PREFER_SRC_COA                    = 4
	DIPV6_PREFER_SRC_HOME                   = 1024
	DIPV6_PREFER_SRC_NONCGA                 = 2048
	DIPV6_PREFER_SRC_PUBLIC                 = 2
	DIPV6_PREFER_SRC_PUBTMP_DEFAULT         = 256
	DIPV6_PREFER_SRC_TMP                    = 1
	DIPV6_RECVDSTOPTS                       = 58
	DIPV6_RECVERR                           = 25
	DIPV6_RECVFRAGSIZE                      = 77
	DIPV6_RECVHOPLIMIT                      = 51
	DIPV6_RECVHOPOPTS                       = 53
	DIPV6_RECVORIGDSTADDR                   = 74
	DIPV6_RECVPATHMTU                       = 60
	DIPV6_RECVPKTINFO                       = 49
	DIPV6_RECVRTHDR                         = 56
	DIPV6_RECVTCLASS                        = 66
	DIPV6_ROUTER_ALERT                      = 22
	DIPV6_RTHDR                             = 57
	DIPV6_RTHDRDSTOPTS                      = 55
	DIPV6_RTHDR_LOOSE                       = 0
	DIPV6_RTHDR_STRICT                      = 1
	DIPV6_RTHDR_TYPE_0                      = 0
	DIPV6_RXDSTOPTS                         = 59
	DIPV6_RXHOPOPTS                         = 54
	DIPV6_TCLASS                            = 67
	DIPV6_TRANSPARENT                       = 75
	DIPV6_UNICAST_HOPS                      = 16
	DIPV6_UNICAST_IF                        = 76
	DIPV6_V6ONLY                            = 26
	DIPV6_XFRM_POLICY                       = 35
	DIP_ADD_MEMBERSHIP                      = 35
	DIP_ADD_SOURCE_MEMBERSHIP               = 39
	DIP_BIND_ADDRESS_NO_PORT                = 24
	DIP_BLOCK_SOURCE                        = 38
	DIP_CHECKSUM                            = 23
	DIP_DEFAULT_MULTICAST_LOOP              = 1
	DIP_DEFAULT_MULTICAST_TTL               = 1
	DIP_DROP_MEMBERSHIP                     = 36
	DIP_DROP_SOURCE_MEMBERSHIP              = 40
	DIP_FREEBIND                            = 15
	DIP_HDRINCL                             = 3
	DIP_IPSEC_POLICY                        = 16
	DIP_MAX_MEMBERSHIPS                     = 20
	DIP_MINTTL                              = 21
	DIP_MSFILTER                            = 41
	DIP_MTU                                 = 14
	DIP_MTU_DISCOVER                        = 10
	DIP_MULTICAST_ALL                       = 49
	DIP_MULTICAST_IF                        = 32
	DIP_MULTICAST_LOOP                      = 34
	DIP_MULTICAST_TTL                       = 33
	DIP_NODEFRAG                            = 22
	DIP_OPTIONS                             = 4
	DIP_ORIGDSTADDR                         = 20
	DIP_PASSSEC                             = 18
	DIP_PKTINFO                             = 8
	DIP_PKTOPTIONS                          = 9
	DIP_PMTUDISC                            = 10
	DIP_PMTUDISC_DO                         = 2
	DIP_PMTUDISC_DONT                       = 0
	DIP_PMTUDISC_INTERFACE                  = 4
	DIP_PMTUDISC_OMIT                       = 5
	DIP_PMTUDISC_PROBE                      = 3
	DIP_PMTUDISC_WANT                       = 1
	DIP_RECVERR                             = 11
	DIP_RECVFRAGSIZE                        = 25
	DIP_RECVOPTS                            = 6
	DIP_RECVORIGDSTADDR                     = 20
	DIP_RECVRETOPTS                         = 7
	DIP_RECVTOS                             = 13
	DIP_RECVTTL                             = 12
	DIP_RETOPTS                             = 7
	DIP_ROUTER_ALERT                        = 5
	DIP_TOS                                 = 1
	DIP_TRANSPARENT                         = 19
	DIP_TTL                                 = 2
	DIP_UNBLOCK_SOURCE                      = 37
	DIP_UNICAST_IF                          = 50
	DIP_XFRM_POLICY                         = 17
	DIQUERY                                 = 0
	DISIG                                   = 1
	DISO2022_JP                             = 210
	DISTRIP                                 = 32
	DITIMER_PROF                            = 2
	DITIMER_REAL                            = 0
	DITIMER_VIRTUAL                         = 1
	DIUCLC                                  = 512
	DIUTF8                                  = 16384
	DIXANY                                  = 2048
	DIXOFF                                  = 4096
	DIXON                                   = 1024
	DI_ATMARK                               = 21279
	DI_CANPUT                               = 21282
	DI_CKBAND                               = 21277
	DI_FDINSERT                             = 21264
	DI_FIND                                 = 21259
	DI_FLUSH                                = 21253
	DI_FLUSHBAND                            = 21276
	DI_GETBAND                              = 21278
	DI_GETCLTIME                            = 21281
	DI_GETSIG                               = 21258
	DI_GRDOPT                               = 21255
	DI_GWROPT                               = 21268
	DI_LINK                                 = 21260
	DI_LIST                                 = 21269
	DI_LOOK                                 = 21252
	DI_NREAD                                = 21249
	DI_PEEK                                 = 21263
	DI_PLINK                                = 21270
	DI_POP                                  = 21251
	DI_PUNLINK                              = 21271
	DI_PUSH                                 = 21250
	DI_RECVFD                               = 21262
	DI_SENDFD                               = 21265
	DI_SETCLTIME                            = 21280
	DI_SETSIG                               = 21257
	DI_SRDOPT                               = 21254
	DI_STR                                  = 21256
	DI_SWROPT                               = 21267
	DI_UNLINK                               = 21261
	DJT_ARG_MAX                             = -254
	DJT_AVPHYS_PAGES                        = -247
	DJT_MQ_PRIO_MAX                         = -253
	DJT_NPROCESSORS_CONF                    = -250
	DJT_NPROCESSORS_ONLN                    = -249
	DJT_PAGE_SIZE                           = -252
	DJT_PHYS_PAGES                          = -248
	DJT_SEM_VALUE_MAX                       = -251
	DJT_ZERO                                = -246
	DKEY_MAX                                = 30000
	DKMAX                                   = 128
	DLASTMARK                               = 2
	DLC_ALL                                 = 6
	DLC_ALL_MASK                            = 2147483647
	DLC_COLLATE                             = 3
	DLC_COLLATE_MASK                        = 8
	DLC_CTYPE                               = 0
	DLC_CTYPE_MASK                          = 1
	DLC_GLOBAL_LOCALE                       = -1
	DLC_MESSAGES                            = 5
	DLC_MESSAGES_MASK                       = 32
	DLC_MONETARY                            = 4
	DLC_MONETARY_MASK                       = 16
	DLC_NUMERIC                             = 1
	DLC_NUMERIC_MASK                        = 2
	DLC_TIME                                = 2
	DLC_TIME_MASK                           = 4
	DLDBL_DECIMAL_DIG                       = 17
	DLDBL_DIG                               = 15
	DLDBL_EPSILON                           = 2.220446049250313e-16
	DLDBL_HAS_SUBNORM                       = 1
	DLDBL_MANT_DIG                          = 53
	DLDBL_MAX                               = 1.7976931348623157e+308
	DLDBL_MAX_10_EXP                        = 308
	DLDBL_MAX_EXP                           = 1024
	DLDBL_MIN                               = 2.2250738585072014e-308
	DLDBL_MIN_10_EXP                        = -307
	DLDBL_MIN_EXP                           = -1021
	DLDBL_TRUE_MIN                          = 5e-324
	DLDSO_ARCH                              = "x86_64"
	DLD_B1B_DIG                             = 2
	DLEAPOCH                                = 951868800
	DLEFT_ADJ                               = 8192
	DLINE_LIM                               = 256
	DLINE_MAX                               = 4096
	DLIO_NOP                                = 2
	DLIO_NOWAIT                             = 1
	DLIO_READ                               = 0
	DLIO_WAIT                               = 0
	DLIO_WRITE                              = 1
	DLITTLE_ENDIAN                          = 1234
	DLITUSE_ALPHA_ADDR                      = 0
	DLITUSE_ALPHA_BASE                      = 1
	DLITUSE_ALPHA_BYTOFF                    = 2
	DLITUSE_ALPHA_JSR                       = 3
	DLITUSE_ALPHA_TLS_GD                    = 4
	DLITUSE_ALPHA_TLS_LDM                   = 5
	DLLONG_MAX                              = 9223372036854775807
	DLLONG_MIN                              = -9223372036854775808
	DLL_DELAY_LOAD                          = 16
	DLL_DELTA                               = 32
	DLL_EXACT_MATCH                         = 1
	DLL_EXPORTS                             = 8
	DLL_IGNORE_INT_VER                      = 2
	DLL_NONE                                = 0
	DLL_REQUIRE_MINOR                       = 4
	DLOCALDOMAINPARTS                       = 2
	DLOCALE_NAME_MAX                        = 23
	DLOCK_EX                                = 2
	DLOCK_NB                                = 4
	DLOCK_SH                                = 1
	DLOCK_UN                                = 8
	DLOGIN_NAME_MAX                         = 256
	DLOGIN_PROCESS                          = 6
	DLOG_ALERT                              = 1
	DLOG_AUTH                               = 32
	DLOG_AUTHPRIV                           = 80
	DLOG_CONS                               = 2
	DLOG_CRIT                               = 2
	DLOG_CRON                               = 72
	DLOG_DAEMON                             = 24
	DLOG_DEBUG                              = 7
	DLOG_EMERG                              = 0
	DLOG_ERR                                = 3
	DLOG_FACMASK                            = 1016
	DLOG_FTP                                = 88
	DLOG_INFO                               = 6
	DLOG_KERN                               = 0
	DLOG_LOCAL0                             = 128
	DLOG_LOCAL1                             = 136
	DLOG_LOCAL2                             = 144
	DLOG_LOCAL3                             = 152
	DLOG_LOCAL4                             = 160
	DLOG_LOCAL5                             = 168
	DLOG_LOCAL6                             = 176
	DLOG_LOCAL7                             = 184
	DLOG_LPR                                = 48
	DLOG_MAIL                               = 16
	DLOG_NDELAY                             = 8
	DLOG_NEWS                               = 56
	DLOG_NFACILITIES                        = 24
	DLOG_NOTICE                             = 5
	DLOG_NOWAIT                             = 16
	DLOG_ODELAY                             = 4
	DLOG_PERROR                             = 32
	DLOG_PID                                = 1
	DLOG_PRIMASK                            = 7
	DLOG_SYSLOG                             = 40
	DLOG_USER                               = 8
	DLOG_UUCP                               = 64
	DLOG_WARNING                            = 4
	DLONG_BIT                               = 64
	DLONG_MAX                               = 9223372036854775807
	DLONG_MIN                               = -9223372036854775808
	DL_INCR                                 = 1
	DL_SET                                  = 0
	DL_XTND                                 = 2
	DL_ctermid                              = 20
	DL_cuserid                              = 20
	DL_tmpnam                               = 20
	DMADV_DODUMP                            = 17
	DMADV_DOFORK                            = 11
	DMADV_DONTDUMP                          = 16
	DMADV_DONTFORK                          = 10
	DMADV_DONTNEED                          = 4
	DMADV_FREE                              = 8
	DMADV_HUGEPAGE                          = 14
	DMADV_HWPOISON                          = 100
	DMADV_KEEPONFORK                        = 19
	DMADV_MERGEABLE                         = 12
	DMADV_NOHUGEPAGE                        = 15
	DMADV_NORMAL                            = 0
	DMADV_RANDOM                            = 1
	DMADV_REMOVE                            = 9
	DMADV_SEQUENTIAL                        = 2
	DMADV_SOFT_OFFLINE                      = 101
	DMADV_UNMERGEABLE                       = 13
	DMADV_WILLNEED                          = 3
	DMADV_WIPEONFORK                        = 18
	DMAP_32BIT                              = 64
	DMAP_ANON                               = 32
	DMAP_ANONYMOUS                          = 32
	DMAP_DENYWRITE                          = 2048
	DMAP_EXECUTABLE                         = 4096
	DMAP_FILE                               = 0
	DMAP_FIXED                              = 16
	DMAP_FIXED_NOREPLACE                    = 1048576
	DMAP_GROWSDOWN                          = 256
	DMAP_HUGETLB                            = 262144
	DMAP_HUGE_16GB                          = 2281701376
	DMAP_HUGE_16MB                          = 1610612736
	DMAP_HUGE_1GB                           = 2013265920
	DMAP_HUGE_1MB                           = 1342177280
	DMAP_HUGE_256MB                         = 1879048192
	DMAP_HUGE_2GB                           = 2080374784
	DMAP_HUGE_2MB                           = 1409286144
	DMAP_HUGE_512KB                         = 1275068416
	DMAP_HUGE_64KB                          = 1073741824
	DMAP_HUGE_8MB                           = 1543503872
	DMAP_HUGE_MASK                          = 63
	DMAP_HUGE_SHIFT                         = 26
	DMAP_LOCKED                             = 8192
	DMAP_NONBLOCK                           = 65536
	DMAP_NORESERVE                          = 16384
	DMAP_POPULATE                           = 32768
	DMAP_PRIVATE                            = 2
	DMAP_SHARED                             = 1
	DMAP_SHARED_VALIDATE                    = 3
	DMAP_STACK                              = 131072
	DMAP_SYNC                               = 524288
	DMAP_TYPE                               = 15
	DMARK_POS                               = 2048
	DMASK                                   = 127
	DMATH_ERREXCEPT                         = 2
	DMATH_ERRNO                             = 1
	DMAXADDRS                               = 48
	DMAXCDNAME                              = 255
	DMAXDFLSRCH                             = 3
	DMAXDNAME                               = 1025
	DMAXDNSRCH                              = 6
	DMAXFLOAT                               = 3.4028235e+38
	DMAXLABEL                               = 63
	DMAXNS                                  = 3
	DMAXNUM                                 = 1e+308
	DMAXNUMF                                = 1e+38
	DMAXQUOTAS                              = 2
	DMAXRESOLVSORT                          = 10
	DMAXSERVS                               = 2
	DMAXSIZE                                = 1
	DMAXTC                                  = 6
	DMAXTRIES                               = 100
	DMAX_ADDR_LEN                           = 7
	DMAX_DQ_TIME                            = 604800
	DMAX_IQ_TIME                            = 604800
	DMAX_NEG_CLASSES                        = 64
	DMAYBE_WAITERS                          = 1073741824
	DMB_LEN_MAX                             = 4
	DMCAST_BLOCK_SOURCE                     = 43
	DMCAST_EXCLUDE                          = 0
	DMCAST_INCLUDE                          = 1
	DMCAST_JOIN_GROUP                       = 42
	DMCAST_JOIN_SOURCE_GROUP                = 46
	DMCAST_LEAVE_GROUP                      = 45
	DMCAST_LEAVE_SOURCE_GROUP               = 47
	DMCAST_MSFILTER                         = 48
	DMCAST_UNBLOCK_SOURCE                   = 44
	DMCL_CURRENT                            = 1
	DMCL_FUTURE                             = 2
	DMCL_ONFAULT                            = 4
	DMFD_ALLOW_SEALING                      = 2
	DMFD_CLOEXEC                            = 1
	DMFD_HUGETLB                            = 4
	DMINSIGSTKSZ                            = 2048
	DMINSIZE                                = 8
	DMIPS_AFL_ASE_DSP                       = 1
	DMIPS_AFL_ASE_DSPR2                     = 2
	DMIPS_AFL_ASE_EVA                       = 4
	DMIPS_AFL_ASE_MASK                      = 8191
	DMIPS_AFL_ASE_MCU                       = 8
	DMIPS_AFL_ASE_MDMX                      = 16
	DMIPS_AFL_ASE_MICROMIPS                 = 2048
	DMIPS_AFL_ASE_MIPS16                    = 1024
	DMIPS_AFL_ASE_MIPS3D                    = 32
	DMIPS_AFL_ASE_MSA                       = 512
	DMIPS_AFL_ASE_MT                        = 64
	DMIPS_AFL_ASE_SMARTMIPS                 = 128
	DMIPS_AFL_ASE_VIRT                      = 256
	DMIPS_AFL_ASE_XPA                       = 4096
	DMIPS_AFL_EXT_10000                     = 11
	DMIPS_AFL_EXT_3900                      = 10
	DMIPS_AFL_EXT_4010                      = 8
	DMIPS_AFL_EXT_4100                      = 9
	DMIPS_AFL_EXT_4111                      = 13
	DMIPS_AFL_EXT_4120                      = 14
	DMIPS_AFL_EXT_4650                      = 7
	DMIPS_AFL_EXT_5400                      = 15
	DMIPS_AFL_EXT_5500                      = 16
	DMIPS_AFL_EXT_5900                      = 6
	DMIPS_AFL_EXT_LOONGSON_2E               = 17
	DMIPS_AFL_EXT_LOONGSON_2F               = 18
	DMIPS_AFL_EXT_LOONGSON_3A               = 4
	DMIPS_AFL_EXT_OCTEON                    = 5
	DMIPS_AFL_EXT_OCTEON2                   = 2
	DMIPS_AFL_EXT_OCTEONP                   = 3
	DMIPS_AFL_EXT_SB1                       = 12
	DMIPS_AFL_EXT_XLR                       = 1
	DMIPS_AFL_FLAGS1_ODDSPREG               = 1
	DMIPS_AFL_REG_128                       = 3
	DMIPS_AFL_REG_32                        = 1
	DMIPS_AFL_REG_64                        = 2
	DMIPS_AFL_REG_NONE                      = 0
	DMLOCK_ONFAULT                          = 1
	DMMAP_PAGE_ZERO                         = 1048576
	DMM_APPL                                = 8
	DMM_CONSOLE                             = 512
	DMM_ERROR                               = 2
	DMM_FIRM                                = 4
	DMM_HALT                                = 1
	DMM_HARD                                = 1
	DMM_INFO                                = 4
	DMM_NOCON                               = 4
	DMM_NOMSG                               = 1
	DMM_NOSEV                               = 0
	DMM_NOTOK                               = -1
	DMM_NRECOV                              = 128
	DMM_NULLMC                              = 0
	DMM_NULLSEV                             = 0
	DMM_OK                                  = 0
	DMM_OPSYS                               = 32
	DMM_PRINT                               = 256
	DMM_RECOVER                             = 64
	DMM_SOFT                                = 2
	DMM_UTIL                                = 16
	DMM_WARNING                             = 3
	DMNTOPT_DEFAULTS                        = "defaults"
	DMNTOPT_NOAUTO                          = "noauto"
	DMNTOPT_NOSUID                          = "nosuid"
	DMNTOPT_RO                              = "ro"
	DMNTOPT_RW                              = "rw"
	DMNTOPT_SUID                            = "suid"
	DMNTTYPE_IGNORE                         = "ignore"
	DMNTTYPE_NFS                            = "nfs"
	DMNTTYPE_SWAP                           = "swap"
	DMNT_DETACH                             = 2
	DMNT_EXPIRE                             = 4
	DMNT_FORCE                              = 1
	DMOD_CLKA                               = 32769
	DMOD_CLKB                               = 16384
	DMOD_ESTERROR                           = 8
	DMOD_FREQUENCY                          = 2
	DMOD_MAXERROR                           = 4
	DMOD_MICRO                              = 4096
	DMOD_NANO                               = 8192
	DMOD_OFFSET                             = 1
	DMOD_STATUS                             = 16
	DMOD_TAI                                = 128
	DMOD_TIMECONST                          = 32
	DMON_1                                  = 131098
	DMON_10                                 = 131107
	DMON_11                                 = 131108
	DMON_12                                 = 131109
	DMON_2                                  = 131099
	DMON_3                                  = 131100
	DMON_4                                  = 131101
	DMON_5                                  = 131102
	DMON_6                                  = 131103
	DMON_7                                  = 131104
	DMON_8                                  = 131105
	DMON_9                                  = 131106
	DMORECTL                                = 1
	DMOREDATA                               = 2
	DMOUNTED                                = "/etc/mtab"
	DMQ_PRIO_MAX                            = 32768
	DMREMAP_FIXED                           = 2
	DMREMAP_MAYMOVE                         = 1
	DMSG_ANY                                = 2
	DMSG_BAND                               = 4
	DMSG_BATCH                              = 262144
	DMSG_CMSG_CLOEXEC                       = 1073741824
	DMSG_CONFIRM                            = 2048
	DMSG_CTRUNC                             = 8
	DMSG_DONTROUTE                          = 4
	DMSG_DONTWAIT                           = 64
	DMSG_EOR                                = 128
	DMSG_ERRQUEUE                           = 8192
	DMSG_EXCEPT                             = 8192
	DMSG_FASTOPEN                           = 536870912
	DMSG_FIN                                = 512
	DMSG_HIPRI                              = 1
	DMSG_INFO                               = 12
	DMSG_MORE                               = 32768
	DMSG_NOERROR                            = 4096
	DMSG_NOSIGNAL                           = 16384
	DMSG_OOB                                = 1
	DMSG_PEEK                               = 2
	DMSG_PROXY                              = 16
	DMSG_RST                                = 4096
	DMSG_STAT                               = 11
	DMSG_STAT_ANY                           = 13
	DMSG_SYN                                = 1024
	DMSG_TRUNC                              = 32
	DMSG_WAITALL                            = 256
	DMSG_WAITFORONE                         = 65536
	DMSG_ZEROCOPY                           = 67108864
	DMS_ACTIVE                              = 1073741824
	DMS_ASYNC                               = 1
	DMS_BIND                                = 4096
	DMS_BORN                                = 536870912
	DMS_DIRSYNC                             = 128
	DMS_INVALIDATE                          = 2
	DMS_I_VERSION                           = 8388608
	DMS_KERNMOUNT                           = 4194304
	DMS_LAZYTIME                            = 33554432
	DMS_MANDLOCK                            = 64
	DMS_MGC_MSK                             = 4294901760
	DMS_MGC_VAL                             = 3236757504
	DMS_MOVE                                = 8192
	DMS_NOATIME                             = 1024
	DMS_NODEV                               = 4
	DMS_NODIRATIME                          = 2048
	DMS_NOEXEC                              = 8
	DMS_NOREMOTELOCK                        = 134217728
	DMS_NOSEC                               = 268435456
	DMS_NOSUID                              = 2
	DMS_NOUSER                              = 2147483648
	DMS_POSIXACL                            = 65536
	DMS_PRIVATE                             = 262144
	DMS_RDONLY                              = 1
	DMS_REC                                 = 16384
	DMS_RELATIME                            = 2097152
	DMS_REMOUNT                             = 32
	DMS_RMT_MASK                            = 41943121
	DMS_SHARED                              = 1048576
	DMS_SILENT                              = 32768
	DMS_SLAVE                               = 524288
	DMS_STRICTATIME                         = 16777216
	DMS_SYNC                                = 4
	DMS_SYNCHRONOUS                         = 16
	DMS_UNBINDABLE                          = 131072
	DMUXID_ALL                              = -1
	DM_1_PI                                 = 0.3183098861837907
	DM_2_PI                                 = 0.6366197723675814
	DM_2_SQRTPI                             = 1.1283791670955126
	DM_E                                    = 2.718281828459045
	DM_LN10                                 = 2.302585092994046
	DM_LN2                                  = 0.6931471805599453
	DM_LOG10E                               = 0.4342944819032518
	DM_LOG2E                                = 1.4426950408889634
	DM_PI                                   = 3.141592653589793
	DM_PI_2                                 = 1.5707963267948966
	DM_PI_4                                 = 0.7853981633974483
	DM_SQRT1_2                              = 0.7071067811865476
	DM_SQRT2                                = 1.4142135623730951
	DN                                      = 12
	DNAMESERVER_PORT                        = 53
	DNAME_MAX                               = 255
	DNCCS                                   = 32
	DNEED_MIPS_GOT_RELOCS                   = 0
	DNETLINK_ROUTE                          = 0
	DNEW_TIME                               = 3
	DNGROUPS_MAX                            = 32
	DNI_DGRAM                               = 16
	DNI_MAXHOST                             = 255
	DNI_MAXSERV                             = 32
	DNI_NAMEREQD                            = 8
	DNI_NOFQDN                              = 4
	DNI_NUMERICHOST                         = 1
	DNI_NUMERICSCOPE                        = 256
	DNI_NUMERICSERV                         = 2
	DNL0                                    = 0
	DNL1                                    = 256
	DNLDLY                                  = 256
	DNLMSG_DONE                             = 3
	DNLMSG_ERROR                            = 2
	DNLMSG_NOOP                             = 1
	DNLMSG_OVERRUN                          = 4
	DNLM_F_ACK                              = 4
	DNLM_F_ATOMIC                           = 1024
	DNLM_F_DUMP                             = 768
	DNLM_F_MATCH                            = 512
	DNLM_F_MULTI                            = 2
	DNLM_F_REQUEST                          = 1
	DNLM_F_ROOT                             = 256
	DNL_ARGMAX                              = 9
	DNL_CAT_LOCALE                          = 1
	DNL_LANGMAX                             = 32
	DNL_MSGMAX                              = 32767
	DNL_NMAX                                = 16
	DNL_SETD                                = 1
	DNL_SETMAX                              = 255
	DNL_TEXTMAX                             = 2048
	DNOERROR                                = 0
	DNOEXPR                                 = 327681
	DNOFLSH                                 = 128
	DNOSTR                                  = 327683
	DNOTAUTH                                = 0
	DNOTIMP                                 = 0
	DNOTZONE                                = 0
	DNO_ADDRESS                             = 4
	DNO_DATA                                = 4
	DNO_RECOVERY                            = 3
	DNR_DQHASH                              = 43
	DNR_DQUOTS                              = 256
	DNSCDVERSION                            = 2
	DNSIG                                   = 65
	DNS_ALG_DH                              = 2
	DNS_ALG_DSA                             = 3
	DNS_ALG_DSS                             = 3
	DNS_ALG_EXPIRE_ONLY                     = 253
	DNS_ALG_MD5RSA                          = 1
	DNS_ALG_PRIVATE_OID                     = 254
	DNS_CMPRSFLGS                           = 192
	DNS_DEFAULTPORT                         = 53
	DNS_DSA_MAX_BYTES                       = 405
	DNS_DSA_MIN_SIZE                        = 213
	DNS_DSA_SIG_SIZE                        = 41
	DNS_HFIXEDSZ                            = 12
	DNS_IN6ADDRSZ                           = 16
	DNS_INADDRSZ                            = 4
	DNS_INT16SZ                             = 2
	DNS_INT32SZ                             = 4
	DNS_INT8SZ                              = 1
	DNS_KEY_EXTENDED_FLAGS                  = 4096
	DNS_KEY_NAME_ENTITY                     = 512
	DNS_KEY_NAME_RESERVED                   = 768
	DNS_KEY_NAME_TYPE                       = 768
	DNS_KEY_NAME_USER                       = 0
	DNS_KEY_NAME_ZONE                       = 256
	DNS_KEY_NO_AUTH                         = 32768
	DNS_KEY_NO_CONF                         = 16384
	DNS_KEY_PROT_ANY                        = 255
	DNS_KEY_PROT_DNSSEC                     = 3
	DNS_KEY_PROT_EMAIL                      = 2
	DNS_KEY_PROT_IPSEC                      = 4
	DNS_KEY_PROT_TLS                        = 1
	DNS_KEY_RESERVED10                      = 32
	DNS_KEY_RESERVED11                      = 16
	DNS_KEY_RESERVED2                       = 8192
	DNS_KEY_RESERVED4                       = 2048
	DNS_KEY_RESERVED5                       = 1024
	DNS_KEY_RESERVED8                       = 128
	DNS_KEY_RESERVED9                       = 64
	DNS_KEY_RESERVED_BITMASK                = 11504
	DNS_KEY_RESERVED_BITMASK2               = 65535
	DNS_KEY_SIGNATORYMASK                   = 15
	DNS_KEY_TYPEMASK                        = 49152
	DNS_KEY_TYPE_AUTH_CONF                  = 0
	DNS_KEY_TYPE_AUTH_ONLY                  = 16384
	DNS_KEY_TYPE_CONF_ONLY                  = 32768
	DNS_KEY_TYPE_NO_KEY                     = 49152
	DNS_MAXCDNAME                           = 255
	DNS_MAXDNAME                            = 1025
	DNS_MAXLABEL                            = 63
	DNS_MAXMSG                              = 65535
	DNS_MD5RSA_MAX_BASE64                   = 10928
	DNS_MD5RSA_MAX_BITS                     = 4096
	DNS_MD5RSA_MAX_BYTES                    = 8195
	DNS_MD5RSA_MAX_SIZE                     = 512
	DNS_MD5RSA_MIN_BITS                     = 512
	DNS_MD5RSA_MIN_SIZE                     = 64
	DNS_NOTIFY_OP                           = 0
	DNS_NXT_BITS                            = 8
	DNS_NXT_MAX                             = 127
	DNS_OPT_DNSSEC_OK                       = 32768
	DNS_OPT_NSID                            = 3
	DNS_PACKETSZ                            = 512
	DNS_QFIXEDSZ                            = 4
	DNS_RRFIXEDSZ                           = 10
	DNS_SIG_ALG                             = 2
	DNS_SIG_EXPIR                           = 8
	DNS_SIG_FOOT                            = 16
	DNS_SIG_LABELS                          = 3
	DNS_SIG_OTTL                            = 4
	DNS_SIG_SIGNED                          = 12
	DNS_SIG_SIGNER                          = 18
	DNS_SIG_TYPE                            = 0
	DNS_TSIG_ALG_HMAC_MD5                   = "HMAC-MD5.SIG-ALG.REG.INT"
	DNS_TSIG_ERROR_FORMERR                  = -12
	DNS_TSIG_ERROR_NO_SPACE                 = -11
	DNS_TSIG_ERROR_NO_TSIG                  = -10
	DNS_TSIG_FUDGE                          = 300
	DNS_TSIG_TCP_COUNT                      = 100
	DNS_UPDATE_OP                           = 0
	DNT_386_IOPERM                          = 513
	DNT_386_TLS                             = 512
	DNT_ARC_V2                              = 1536
	DNT_ARM_HW_BREAK                        = 1026
	DNT_ARM_HW_WATCH                        = 1027
	DNT_ARM_SVE                             = 1029
	DNT_ARM_SYSTEM_CALL                     = 1028
	DNT_ARM_TLS                             = 1025
	DNT_ARM_VFP                             = 1024
	DNT_ASRS                                = 8
	DNT_AUXV                                = 6
	DNT_FILE                                = 1179208773
	DNT_FPREGSET                            = 2
	DNT_GNU_ABI_TAG                         = 1
	DNT_GNU_BUILD_ID                        = 3
	DNT_GNU_GOLD_VERSION                    = 4
	DNT_GWINDOWS                            = 7
	DNT_LWPSINFO                            = 17
	DNT_LWPSTATUS                           = 16
	DNT_METAG_CBUF                          = 1280
	DNT_METAG_RPIPE                         = 1281
	DNT_METAG_TLS                           = 1282
	DNT_PLATFORM                            = 5
	DNT_PPC_DSCR                            = 261
	DNT_PPC_EBB                             = 262
	DNT_PPC_PMU                             = 263
	DNT_PPC_PPR                             = 260
	DNT_PPC_SPE                             = 257
	DNT_PPC_TAR                             = 259
	DNT_PPC_TM_CDSCR                        = 271
	DNT_PPC_TM_CFPR                         = 265
	DNT_PPC_TM_CGPR                         = 264
	DNT_PPC_TM_CPPR                         = 270
	DNT_PPC_TM_CTAR                         = 269
	DNT_PPC_TM_CVMX                         = 266
	DNT_PPC_TM_CVSX                         = 267
	DNT_PPC_TM_SPR                          = 268
	DNT_PPC_VMX                             = 256
	DNT_PPC_VSX                             = 258
	DNT_PRCRED                              = 14
	DNT_PRFPREG                             = 2
	DNT_PRFPXREG                            = 20
	DNT_PRPSINFO                            = 3
	DNT_PRSTATUS                            = 1
	DNT_PRXFPREG                            = 1189489535
	DNT_PRXREG                              = 4
	DNT_PSINFO                              = 13
	DNT_PSTATUS                             = 10
	DNT_S390_CTRS                           = 772
	DNT_S390_GS_BC                          = 780
	DNT_S390_GS_CB                          = 779
	DNT_S390_HIGH_GPRS                      = 768
	DNT_S390_LAST_BREAK                     = 774
	DNT_S390_PREFIX                         = 773
	DNT_S390_RI_CB                          = 781
	DNT_S390_SYSTEM_CALL                    = 775
	DNT_S390_TDB                            = 776
	DNT_S390_TIMER                          = 769
	DNT_S390_TODCMP                         = 770
	DNT_S390_TODPREG                        = 771
	DNT_S390_VXRS_HIGH                      = 778
	DNT_S390_VXRS_LOW                       = 777
	DNT_SIGINFO                             = 1397311305
	DNT_TASKSTRUCT                          = 4
	DNT_UTSNAME                             = 15
	DNT_VERSION                             = 1
	DNT_X86_XSTATE                          = 514
	DNXDOMAIN                               = 0
	DNXRRSET                                = 0
	DNZERO                                  = 20
	DN_6PACK                                = 7
	DN_AX25                                 = 5
	DN_HCI                                  = 15
	DN_HDLC                                 = 13
	DN_IRDA                                 = 11
	DN_MASC                                 = 8
	DN_MOUSE                                = 2
	DN_PPP                                  = 3
	DN_PROFIBUS_FDL                         = 10
	DN_R3964                                = 9
	DN_SLIP                                 = 1
	DN_SMSBLOCK                             = 12
	DN_STRIP                                = 4
	DN_SYNC_PPP                             = 14
	DN_TTY                                  = 0
	DN_X25                                  = 6
	DOCRNL                                  = 8
	DODK_EXCEPTIONS                         = 2
	DODK_FILL                               = 5
	DODK_HWAND                              = 7
	DODK_HWOR                               = 8
	DODK_HWPATCH                            = 4
	DODK_NULL                               = 0
	DODK_PAD                                = 3
	DODK_REGINFO                            = 1
	DODK_TAGS                               = 6
	DOEX_DISMISS                            = 524288
	DOEX_FPDBUG                             = 262144
	DOEX_FPU_DIV0                           = 8
	DOEX_FPU_INEX                           = 1
	DOEX_FPU_INVAL                          = 16
	DOEX_FPU_MAX                            = 7936
	DOEX_FPU_MIN                            = 31
	DOEX_FPU_OFLO                           = 4
	DOEX_FPU_UFLO                           = 2
	DOEX_PAGE0                              = 65536
	DOEX_PRECISEFP                          = 262144
	DOEX_SMM                                = 131072
	DOFDEL                                  = 128
	DOFILL                                  = 64
	DOHWA0_R4KEOP_CHECKED                   = 1
	DOHWA1_R4KEOP_CLEAN                     = 2
	DOHW_R4KEOP                             = 1
	DOHW_R5KCVTL                            = 8
	DOHW_R5KEOP                             = 4
	DOHW_R8KPFETCH                          = 2
	DOK_BINDS                               = 1030
	DOK_TYPES                               = 39
	DOLCUC                                  = 2
	DOLD_TIME                               = 4
	DONCE_FLAG_INIT                         = 0
	DONES                                   = 0
	DONLCR                                  = 4
	DONLRET                                 = 32
	DONOCR                                  = 16
	DOPAD_POSTFIX                           = 2
	DOPAD_PREFIX                            = 1
	DOPAD_SYMBOL                            = 4
	DOPOST                                  = 1
	DO_ACCMODE                              = 2097155
	DO_APPEND                               = 1024
	DO_ASYNC                                = 8192
	DO_CLOEXEC                              = 524288
	DO_CREAT                                = 64
	DO_DIRECT                               = 16384
	DO_DIRECTORY                            = 65536
	DO_DSYNC                                = 4096
	DO_EXCL                                 = 128
	DO_EXEC                                 = 2097152
	DO_LARGEFILE                            = 0
	DO_NDELAY                               = 2048
	DO_NOATIME                              = 262144
	DO_NOCTTY                               = 256
	DO_NOFOLLOW                             = 131072
	DO_NONBLOCK                             = 2048
	DO_PATH                                 = 2097152
	DO_RDONLY                               = 0
	DO_RDWR                                 = 2
	DO_RSYNC                                = 1052672
	DO_SEARCH                               = 2097152
	DO_SYNC                                 = 1052672
	DO_TMPFILE                              = 4259840
	DO_TRUNC                                = 512
	DO_WRONLY                               = 1
	DPACKETSZ                               = 512
	DPAD_POS                                = 1
	DPAGESIZE                               = 4096
	DPAGE_SIZE                              = 4096
	DPARENB                                 = 256
	DPARMRK                                 = 8
	DPARODD                                 = 512
	DPATH_MAX                               = 4096
	DPDP_ENDIAN                             = 3412
	DPENDIN                                 = 16384
	DPER_BSD                                = 6
	DPER_HPUX                               = 16
	DPER_IRIX32                             = 67108873
	DPER_IRIX64                             = 67108875
	DPER_IRIXN32                            = 67108874
	DPER_ISCR4                              = 67108869
	DPER_LINUX                              = 0
	DPER_LINUX32                            = 8
	DPER_LINUX32_3GB                        = 134217736
	DPER_LINUX_32BIT                        = 8388608
	DPER_MASK                               = 255
	DPER_OSF4                               = 15
	DPER_OSR5                               = 100663299
	DPER_RISCOS                             = 12
	DPER_SCOSVR3                            = 117440515
	DPER_SOLARIS                            = 67108877
	DPER_SUNOS                              = 67108870
	DPER_SVR3                               = 83886082
	DPER_SVR4                               = 68157441
	DPER_UW7                                = 68157454
	DPER_WYSEV386                           = 83886084
	DPER_XENIX                              = 83886087
	DPF_ALG                                 = 38
	DPF_APPLETALK                           = 5
	DPF_ARM_ABS                             = 1073741824
	DPF_ARM_PI                              = 536870912
	DPF_ARM_SB                              = 268435456
	DPF_ASH                                 = 18
	DPF_ATMPVC                              = 8
	DPF_ATMSVC                              = 20
	DPF_AX25                                = 3
	DPF_BLUETOOTH                           = 31
	DPF_BRIDGE                              = 7
	DPF_CAIF                                = 37
	DPF_CAN                                 = 29
	DPF_DECnet                              = 12
	DPF_ECONET                              = 19
	DPF_FILE                                = 1
	DPF_HP_CODE                             = 16777216
	DPF_HP_FAR_SHARED                       = 2097152
	DPF_HP_LAZYSWAP                         = 67108864
	DPF_HP_MODIFY                           = 33554432
	DPF_HP_NEAR_SHARED                      = 4194304
	DPF_HP_PAGE_SIZE                        = 1048576
	DPF_HP_SBP                              = 134217728
	DPF_IA_64_NORECOV                       = 2147483648
	DPF_IB                                  = 27
	DPF_IEEE802154                          = 36
	DPF_INET                                = 2
	DPF_INET6                               = 10
	DPF_IPX                                 = 4
	DPF_IRDA                                = 23
	DPF_ISDN                                = 34
	DPF_IUCV                                = 32
	DPF_KCM                                 = 41
	DPF_KEY                                 = 15
	DPF_LLC                                 = 26
	DPF_LOCAL                               = 1
	DPF_MASKOS                              = 267386880
	DPF_MASKPROC                            = 4026531840
	DPF_MAX                                 = 44
	DPF_MIPS_LOCAL                          = 268435456
	DPF_MPLS                                = 28
	DPF_NETBEUI                             = 13
	DPF_NETLINK                             = 16
	DPF_NETROM                              = 6
	DPF_NFC                                 = 39
	DPF_PACKET                              = 17
	DPF_PARISC_SBP                          = 134217728
	DPF_PHONET                              = 35
	DPF_PPPOX                               = 24
	DPF_QIPCRTR                             = 42
	DPF_R                                   = 4
	DPF_RDS                                 = 21
	DPF_ROSE                                = 11
	DPF_ROUTE                               = 16
	DPF_RXRPC                               = 33
	DPF_SECURITY                            = 14
	DPF_SMC                                 = 43
	DPF_SNA                                 = 22
	DPF_TIPC                                = 30
	DPF_UNIX                                = 1
	DPF_UNSPEC                              = 0
	DPF_VSOCK                               = 40
	DPF_W                                   = 2
	DPF_WANPIPE                             = 25
	DPF_X                                   = 1
	DPF_X25                                 = 9
	DPIPE_BUF                               = 4096
	DPM_STR                                 = 131111
	DPN_XNUM                                = 65535
	DPOLLERR                                = 8
	DPOLLHUP                                = 16
	DPOLLIN                                 = 1
	DPOLLMSG                                = 1024
	DPOLLNVAL                               = 32
	DPOLLOUT                                = 4
	DPOLLPRI                                = 2
	DPOLLRDBAND                             = 128
	DPOLLRDHUP                              = 8192
	DPOLLRDNORM                             = 64
	DPOLLWRBAND                             = 512
	DPOLLWRNORM                             = 256
	DPOLL_ERR                               = 4
	DPOLL_HUP                               = 6
	DPOLL_IN                                = 1
	DPOLL_MSG                               = 3
	DPOLL_OUT                               = 2
	DPOLL_PRI                               = 5
	DPOSIX_CLOSE_RESTART                    = 0
	DPOSIX_FADV_DONTNEED                    = 4
	DPOSIX_FADV_NOREUSE                     = 5
	DPOSIX_FADV_NORMAL                      = 0
	DPOSIX_FADV_RANDOM                      = 1
	DPOSIX_FADV_SEQUENTIAL                  = 2
	DPOSIX_FADV_WILLNEED                    = 3
	DPOSIX_MADV_DONTNEED                    = 4
	DPOSIX_MADV_NORMAL                      = 0
	DPOSIX_MADV_RANDOM                      = 1
	DPOSIX_MADV_SEQUENTIAL                  = 2
	DPOSIX_MADV_WILLNEED                    = 3
	DPOSIX_SPAWN_RESETIDS                   = 1
	DPOSIX_SPAWN_SETPGROUP                  = 2
	DPOSIX_SPAWN_SETSCHEDPARAM              = 16
	DPOSIX_SPAWN_SETSCHEDULER               = 32
	DPOSIX_SPAWN_SETSID                     = 128
	DPOSIX_SPAWN_SETSIGDEF                  = 4
	DPOSIX_SPAWN_SETSIGMASK                 = 8
	DPOSIX_SPAWN_USEVFORK                   = 64
	DPPC64_OPT_LOCALENTRY                   = 4
	DPPC64_OPT_MULTI_TOC                    = 2
	DPPC64_OPT_TLS                          = 1
	DPPC_OPT_TLS                            = 1
	DPRIO_MAX                               = 20
	DPRIO_MIN                               = -20
	DPRIO_PGRP                              = 1
	DPRIO_PROCESS                           = 0
	DPRIO_USER                              = 2
	DPRIX16                                 = "X"
	DPRIX32                                 = "X"
	DPRIX8                                  = "X"
	DPRIXFAST16                             = "X"
	DPRIXFAST32                             = "X"
	DPRIXFAST8                              = "X"
	DPRIXLEAST16                            = "X"
	DPRIXLEAST32                            = "X"
	DPRIXLEAST8                             = "X"
	DPRId16                                 = "d"
	DPRId32                                 = "d"
	DPRId8                                  = "d"
	DPRIdFAST16                             = "d"
	DPRIdFAST32                             = "d"
	DPRIdFAST8                              = "d"
	DPRIdLEAST16                            = "d"
	DPRIdLEAST32                            = "d"
	DPRIdLEAST8                             = "d"
	DPRIi16                                 = "i"
	DPRIi32                                 = "i"
	DPRIi8                                  = "i"
	DPRIiFAST16                             = "i"
	DPRIiFAST32                             = "i"
	DPRIiFAST8                              = "i"
	DPRIiLEAST16                            = "i"
	DPRIiLEAST32                            = "i"
	DPRIiLEAST8                             = "i"
	DPRIo16                                 = "o"
	DPRIo32                                 = "o"
	DPRIo8                                  = "o"
	DPRIoFAST16                             = "o"
	DPRIoFAST32                             = "o"
	DPRIoFAST8                              = "o"
	DPRIoLEAST16                            = "o"
	DPRIoLEAST32                            = "o"
	DPRIoLEAST8                             = "o"
	DPRIu16                                 = "u"
	DPRIu32                                 = "u"
	DPRIu8                                  = "u"
	DPRIuFAST16                             = "u"
	DPRIuFAST32                             = "u"
	DPRIuFAST8                              = "u"
	DPRIuLEAST16                            = "u"
	DPRIuLEAST32                            = "u"
	DPRIuLEAST8                             = "u"
	DPRIx16                                 = "x"
	DPRIx32                                 = "x"
	DPRIx8                                  = "x"
	DPRIxFAST16                             = "x"
	DPRIxFAST32                             = "x"
	DPRIxFAST8                              = "x"
	DPRIxLEAST16                            = "x"
	DPRIxLEAST32                            = "x"
	DPRIxLEAST8                             = "x"
	DPROT_EXEC                              = 4
	DPROT_GROWSDOWN                         = 16777216
	DPROT_GROWSUP                           = 33554432
	DPROT_NONE                              = 0
	DPROT_READ                              = 1
	DPROT_WRITE                             = 2
	DPR_CAPBSET_DROP                        = 24
	DPR_CAPBSET_READ                        = 23
	DPR_CAP_AMBIENT                         = 47
	DPR_CAP_AMBIENT_CLEAR_ALL               = 4
	DPR_CAP_AMBIENT_IS_SET                  = 1
	DPR_CAP_AMBIENT_LOWER                   = 3
	DPR_CAP_AMBIENT_RAISE                   = 2
	DPR_ENDIAN_BIG                          = 0
	DPR_ENDIAN_LITTLE                       = 1
	DPR_ENDIAN_PPC_LITTLE                   = 2
	DPR_FPEMU_NOPRINT                       = 1
	DPR_FPEMU_SIGFPE                        = 2
	DPR_FP_EXC_ASYNC                        = 2
	DPR_FP_EXC_DISABLED                     = 0
	DPR_FP_EXC_DIV                          = 65536
	DPR_FP_EXC_INV                          = 1048576
	DPR_FP_EXC_NONRECOV                     = 1
	DPR_FP_EXC_OVF                          = 131072
	DPR_FP_EXC_PRECISE                      = 3
	DPR_FP_EXC_RES                          = 524288
	DPR_FP_EXC_SW_ENABLE                    = 128
	DPR_FP_EXC_UND                          = 262144
	DPR_FP_MODE_FR                          = 1
	DPR_FP_MODE_FRE                         = 2
	DPR_GET_CHILD_SUBREAPER                 = 37
	DPR_GET_DUMPABLE                        = 3
	DPR_GET_ENDIAN                          = 19
	DPR_GET_FPEMU                           = 9
	DPR_GET_FPEXC                           = 11
	DPR_GET_FP_MODE                         = 46
	DPR_GET_KEEPCAPS                        = 7
	DPR_GET_NAME                            = 16
	DPR_GET_NO_NEW_PRIVS                    = 39
	DPR_GET_PDEATHSIG                       = 2
	DPR_GET_SECCOMP                         = 21
	DPR_GET_SECUREBITS                      = 27
	DPR_GET_SPECULATION_CTRL                = 52
	DPR_GET_THP_DISABLE                     = 42
	DPR_GET_TID_ADDRESS                     = 40
	DPR_GET_TIMERSLACK                      = 30
	DPR_GET_TIMING                          = 13
	DPR_GET_TSC                             = 25
	DPR_GET_UNALIGN                         = 5
	DPR_MCE_KILL                            = 33
	DPR_MCE_KILL_CLEAR                      = 0
	DPR_MCE_KILL_DEFAULT                    = 2
	DPR_MCE_KILL_EARLY                      = 1
	DPR_MCE_KILL_GET                        = 34
	DPR_MCE_KILL_LATE                       = 0
	DPR_MCE_KILL_SET                        = 1
	DPR_MPX_DISABLE_MANAGEMENT              = 44
	DPR_MPX_ENABLE_MANAGEMENT               = 43
	DPR_SET_CHILD_SUBREAPER                 = 36
	DPR_SET_DUMPABLE                        = 4
	DPR_SET_ENDIAN                          = 20
	DPR_SET_FPEMU                           = 10
	DPR_SET_FPEXC                           = 12
	DPR_SET_FP_MODE                         = 45
	DPR_SET_KEEPCAPS                        = 8
	DPR_SET_MM                              = 35
	DPR_SET_MM_ARG_END                      = 9
	DPR_SET_MM_ARG_START                    = 8
	DPR_SET_MM_AUXV                         = 12
	DPR_SET_MM_BRK                          = 7
	DPR_SET_MM_END_CODE                     = 2
	DPR_SET_MM_END_DATA                     = 4
	DPR_SET_MM_ENV_END                      = 11
	DPR_SET_MM_ENV_START                    = 10
	DPR_SET_MM_EXE_FILE                     = 13
	DPR_SET_MM_MAP                          = 14
	DPR_SET_MM_MAP_SIZE                     = 15
	DPR_SET_MM_START_BRK                    = 6
	DPR_SET_MM_START_CODE                   = 1
	DPR_SET_MM_START_DATA                   = 3
	DPR_SET_MM_START_STACK                  = 5
	DPR_SET_NAME                            = 15
	DPR_SET_NO_NEW_PRIVS                    = 38
	DPR_SET_PDEATHSIG                       = 1
	DPR_SET_PTRACER                         = 1499557217
	DPR_SET_PTRACER_ANY                     = 18446744073709551615
	DPR_SET_SECCOMP                         = 22
	DPR_SET_SECUREBITS                      = 28
	DPR_SET_SPECULATION_CTRL                = 53
	DPR_SET_THP_DISABLE                     = 41
	DPR_SET_TIMERSLACK                      = 29
	DPR_SET_TIMING                          = 14
	DPR_SET_TSC                             = 26
	DPR_SET_UNALIGN                         = 6
	DPR_SPEC_DISABLE                        = 4
	DPR_SPEC_ENABLE                         = 2
	DPR_SPEC_FORCE_DISABLE                  = 8
	DPR_SPEC_NOT_AFFECTED                   = 0
	DPR_SPEC_PRCTL                          = 1
	DPR_SPEC_STORE_BYPASS                   = 0
	DPR_SVE_GET_VL                          = 51
	DPR_SVE_SET_VL                          = 50
	DPR_SVE_SET_VL_ONEXEC                   = 262144
	DPR_SVE_VL_INHERIT                      = 131072
	DPR_SVE_VL_LEN_MASK                     = 65535
	DPR_TASK_PERF_EVENTS_DISABLE            = 31
	DPR_TASK_PERF_EVENTS_ENABLE             = 32
	DPR_TIMING_STATISTICAL                  = 0
	DPR_TIMING_TIMESTAMP                    = 1
	DPR_TSC_ENABLE                          = 1
	DPR_TSC_SIGSEGV                         = 2
	DPR_UNALIGN_NOPRINT                     = 1
	DPR_UNALIGN_SIGBUS                      = 2
	DPTHREAD_BARRIER_SERIAL_THREAD          = -1
	DPTHREAD_CANCEL_ASYNCHRONOUS            = 1
	DPTHREAD_CANCEL_DEFERRED                = 0
	DPTHREAD_CANCEL_DISABLE                 = 1
	DPTHREAD_CANCEL_ENABLE                  = 0
	DPTHREAD_CANCEL_MASKED                  = 2
	DPTHREAD_CREATE_DETACHED                = 1
	DPTHREAD_CREATE_JOINABLE                = 0
	DPTHREAD_DESTRUCTOR_ITERATIONS          = 4
	DPTHREAD_EXPLICIT_SCHED                 = 1
	DPTHREAD_INHERIT_SCHED                  = 0
	DPTHREAD_KEYS_MAX                       = 128
	DPTHREAD_MUTEX_DEFAULT                  = 0
	DPTHREAD_MUTEX_ERRORCHECK               = 2
	DPTHREAD_MUTEX_NORMAL                   = 0
	DPTHREAD_MUTEX_RECURSIVE                = 1
	DPTHREAD_MUTEX_ROBUST                   = 1
	DPTHREAD_MUTEX_STALLED                  = 0
	DPTHREAD_ONCE_INIT                      = 0
	DPTHREAD_PRIO_INHERIT                   = 1
	DPTHREAD_PRIO_NONE                      = 0
	DPTHREAD_PRIO_PROTECT                   = 2
	DPTHREAD_PROCESS_PRIVATE                = 0
	DPTHREAD_PROCESS_SHARED                 = 1
	DPTHREAD_SCOPE_PROCESS                  = 1
	DPTHREAD_SCOPE_SYSTEM                   = 0
	DPTHREAD_STACK_MIN                      = 2048
	DPTRACE_ARCH_PRCTL                      = 30
	DPTRACE_ATTACH                          = 16
	DPTRACE_CONT                            = 7
	DPTRACE_DETACH                          = 17
	DPTRACE_EVENT_CLONE                     = 3
	DPTRACE_EVENT_EXEC                      = 4
	DPTRACE_EVENT_EXIT                      = 6
	DPTRACE_EVENT_FORK                      = 1
	DPTRACE_EVENT_SECCOMP                   = 7
	DPTRACE_EVENT_STOP                      = 128
	DPTRACE_EVENT_VFORK                     = 2
	DPTRACE_EVENT_VFORK_DONE                = 5
	DPTRACE_GETEVENTMSG                     = 16897
	DPTRACE_GETFPREGS                       = 14
	DPTRACE_GETFPXREGS                      = 18
	DPTRACE_GETREGS                         = 12
	DPTRACE_GETREGSET                       = 16900
	DPTRACE_GETSIGINFO                      = 16898
	DPTRACE_GETSIGMASK                      = 16906
	DPTRACE_GET_THREAD_AREA                 = 25
	DPTRACE_INTERRUPT                       = 16903
	DPTRACE_KILL                            = 8
	DPTRACE_LISTEN                          = 16904
	DPTRACE_O_EXITKILL                      = 1048576
	DPTRACE_O_MASK                          = 3145983
	DPTRACE_O_SUSPEND_SECCOMP               = 2097152
	DPTRACE_O_TRACECLONE                    = 8
	DPTRACE_O_TRACEEXEC                     = 16
	DPTRACE_O_TRACEEXIT                     = 64
	DPTRACE_O_TRACEFORK                     = 2
	DPTRACE_O_TRACESECCOMP                  = 128
	DPTRACE_O_TRACESYSGOOD                  = 1
	DPTRACE_O_TRACEVFORK                    = 4
	DPTRACE_O_TRACEVFORKDONE                = 32
	DPTRACE_PEEKDATA                        = 2
	DPTRACE_PEEKSIGINFO                     = 16905
	DPTRACE_PEEKSIGINFO_SHARED              = 1
	DPTRACE_PEEKTEXT                        = 1
	DPTRACE_PEEKUSER                        = 3
	DPTRACE_POKEDATA                        = 5
	DPTRACE_POKETEXT                        = 4
	DPTRACE_POKEUSER                        = 6
	DPTRACE_SECCOMP_GET_FILTER              = 16908
	DPTRACE_SECCOMP_GET_METADATA            = 16909
	DPTRACE_SEIZE                           = 16902
	DPTRACE_SETFPREGS                       = 15
	DPTRACE_SETFPXREGS                      = 19
	DPTRACE_SETOPTIONS                      = 16896
	DPTRACE_SETREGS                         = 13
	DPTRACE_SETREGSET                       = 16901
	DPTRACE_SETSIGINFO                      = 16899
	DPTRACE_SETSIGMASK                      = 16907
	DPTRACE_SET_THREAD_AREA                 = 26
	DPTRACE_SINGLEBLOCK                     = 33
	DPTRACE_SINGLESTEP                      = 9
	DPTRACE_SYSCALL                         = 24
	DPTRACE_SYSEMU                          = 31
	DPTRACE_SYSEMU_SINGLESTEP               = 32
	DPTRACE_TRACEME                         = 0
	DPTRDIFF_MAX                            = 9223372036854775807
	DPTRDIFF_MIN                            = -9223372036854775808
	DPT_ARCH_PRCTL                          = 30
	DPT_ARM_EXIDX                           = 1879048193
	DPT_ATTACH                              = 16
	DPT_CONTINUE                            = 7
	DPT_DETACH                              = 17
	DPT_DYNAMIC                             = 2
	DPT_GETEVENTMSG                         = 16897
	DPT_GETFPREGS                           = 14
	DPT_GETFPXREGS                          = 18
	DPT_GETREGS                             = 12
	DPT_GETSIGINFO                          = 16898
	DPT_GET_THREAD_AREA                     = 25
	DPT_GNU_EH_FRAME                        = 1685382480
	DPT_GNU_RELRO                           = 1685382482
	DPT_GNU_STACK                           = 1685382481
	DPT_HIOS                                = 1879048191
	DPT_HIPROC                              = 2147483647
	DPT_HISUNW                              = 1879048191
	DPT_HP_CORE_COMM                        = 1610612740
	DPT_HP_CORE_KERNEL                      = 1610612739
	DPT_HP_CORE_LOADABLE                    = 1610612742
	DPT_HP_CORE_MMF                         = 1610612745
	DPT_HP_CORE_NONE                        = 1610612737
	DPT_HP_CORE_PROC                        = 1610612741
	DPT_HP_CORE_SHM                         = 1610612744
	DPT_HP_CORE_STACK                       = 1610612743
	DPT_HP_CORE_VERSION                     = 1610612738
	DPT_HP_FASTBIND                         = 1610612753
	DPT_HP_HSL_ANNOT                        = 1610612755
	DPT_HP_OPT_ANNOT                        = 1610612754
	DPT_HP_PARALLEL                         = 1610612752
	DPT_HP_STACK                            = 1610612756
	DPT_HP_TLS                              = 1610612736
	DPT_IA_64_ARCHEXT                       = 1879048192
	DPT_IA_64_HP_HSL_ANOT                   = 1610612755
	DPT_IA_64_HP_OPT_ANOT                   = 1610612754
	DPT_IA_64_HP_STACK                      = 1610612756
	DPT_IA_64_UNWIND                        = 1879048193
	DPT_INTERP                              = 3
	DPT_KILL                                = 8
	DPT_LOAD                                = 1
	DPT_LOOS                                = 1610612736
	DPT_LOPROC                              = 1879048192
	DPT_LOSUNW                              = 1879048186
	DPT_MIPS_ABIFLAGS                       = 1879048195
	DPT_MIPS_OPTIONS                        = 1879048194
	DPT_MIPS_REGINFO                        = 1879048192
	DPT_MIPS_RTPROC                         = 1879048193
	DPT_NOTE                                = 4
	DPT_NULL                                = 0
	DPT_NUM                                 = 8
	DPT_PARISC_ARCHEXT                      = 1879048192
	DPT_PARISC_UNWIND                       = 1879048193
	DPT_PHDR                                = 6
	DPT_READ_D                              = 2
	DPT_READ_I                              = 1
	DPT_READ_U                              = 3
	DPT_SETFPREGS                           = 15
	DPT_SETFPXREGS                          = 19
	DPT_SETOPTIONS                          = 16896
	DPT_SETREGS                             = 13
	DPT_SETSIGINFO                          = 16899
	DPT_SET_THREAD_AREA                     = 26
	DPT_SHLIB                               = 5
	DPT_STEP                                = 9
	DPT_STEPBLOCK                           = 33
	DPT_SUNWBSS                             = 1879048186
	DPT_SUNWSTACK                           = 1879048187
	DPT_SYSCALL                             = 24
	DPT_SYSEMU                              = 31
	DPT_SYSEMU_SINGLESTEP                   = 32
	DPT_TLS                                 = 7
	DPT_TRACE_ME                            = 0
	DPT_WRITE_D                             = 5
	DPT_WRITE_I                             = 4
	DPT_WRITE_U                             = 6
	DPUTLONG                                = 0
	DPUTSHORT                               = 0
	DPWDIRLEN                               = 7
	DPWFOUND                                = 1
	DPWGECOSLEN                             = 6
	DPWGID                                  = 5
	DPWNAMELEN                              = 2
	DPWPASSWDLEN                            = 3
	DPWSHELLLEN                             = 8
	DPWUID                                  = 4
	DPWVERSION                              = 0
	DPW_LEN                                 = 9
	DP_tmpdir                               = "/tmp"
	DQFIXEDSZ                               = 4
	DQFMT_OCFS2                             = 3
	DQFMT_VFS_OLD                           = 1
	DQFMT_VFS_V0                            = 2
	DQFMT_VFS_V1                            = 4
	DQIF_ALL                                = 63
	DQIF_BLIMITS                            = 1
	DQIF_BTIME                              = 16
	DQIF_ILIMITS                            = 4
	DQIF_INODES                             = 8
	DQIF_ITIME                              = 32
	DQIF_LIMITS                             = 5
	DQIF_SPACE                              = 2
	DQIF_TIMES                              = 48
	DQIF_USAGE                              = 10
	DQUERY                                  = 0
	DQUESTION                               = -4
	DQUOTAFILENAME                          = "quota"
	DQUOTAGROUP                             = "staff"
	DQ_GETFMT                               = 8388612
	DQ_GETINFO                              = 8388613
	DQ_GETQUOTA                             = 8388615
	DQ_QUOTAOFF                             = 8388611
	DQ_QUOTAON                              = 8388610
	DQ_SETINFO                              = 8388614
	DQ_SETQUOTA                             = 8388616
	DQ_SYNC                                 = 8388609
	DRADIXCHAR                              = 65536
	DRAND_MAX                               = 2147483647
	DRB_AUTOBOOT                            = 19088743
	DRB_DISABLE_CAD                         = 0
	DRB_ENABLE_CAD                          = 2309737967
	DRB_HALT_SYSTEM                         = 3454992675
	DRB_KEXEC                               = 1163412803
	DRB_POWER_OFF                           = 1126301404
	DRB_SW_SUSPEND                          = 3489725666
	DREAD_IMPLIES_EXEC                      = 4194304
	DREFUSED                                = 0
	DREG_BADBR                              = 10
	DREG_BADPAT                             = 2
	DREG_BADRPT                             = 13
	DREG_CR2                                = 0
	DREG_CSGSFS                             = 0
	DREG_EBRACE                             = 9
	DREG_EBRACK                             = 7
	DREG_ECOLLATE                           = 3
	DREG_ECTYPE                             = 4
	DREG_EESCAPE                            = 5
	DREG_EFL                                = 0
	DREG_ENOSYS                             = -1
	DREG_EPAREN                             = 8
	DREG_ERANGE                             = 11
	DREG_ERR                                = 0
	DREG_ESPACE                             = 12
	DREG_ESUBREG                            = 6
	DREG_EXTENDED                           = 1
	DREG_ICASE                              = 2
	DREG_NEWLINE                            = 4
	DREG_NOMATCH                            = 1
	DREG_NOSUB                              = 8
	DREG_NOTBOL                             = 1
	DREG_NOTEOL                             = 2
	DREG_OK                                 = 0
	DREG_OLDMASK                            = 0
	DREG_R10                                = 0
	DREG_R11                                = 0
	DREG_R12                                = 0
	DREG_R13                                = 0
	DREG_R14                                = 0
	DREG_R15                                = 0
	DREG_R8                                 = 0
	DREG_R9                                 = 0
	DREG_RAX                                = 0
	DREG_RBP                                = 0
	DREG_RBX                                = 0
	DREG_RCX                                = 0
	DREG_RDI                                = 0
	DREG_RDX                                = 0
	DREG_RIP                                = 0
	DREG_RSI                                = 0
	DREG_RSP                                = 0
	DREG_TRAPNO                             = 0
	DREL_COPY                               = 5
	DREL_DTPMOD                             = 16
	DREL_DTPOFF                             = 17
	DREL_GOT                                = 6
	DREL_OFFSET32                           = 2
	DREL_PLT                                = 7
	DREL_RELATIVE                           = 8
	DREL_SYMBOLIC                           = 1
	DREL_TLSDESC                            = 36
	DREL_TPOFF                              = 18
	DREQKEYLEN                              = 2
	DREQTYPE                                = 1
	DREQVERSION                             = 0
	DREQ_LEN                                = 3
	DRES_AAONLY                             = 4
	DRES_BLAST                              = 131072
	DRES_DEBUG                              = 2
	DRES_DEFAULT                            = 524992
	DRES_DEFNAMES                           = 128
	DRES_DFLRETRY                           = 2
	DRES_DNSRCH                             = 512
	DRES_EXHAUSTIVE                         = 1
	DRES_F_CONN                             = 2
	DRES_F_EDNS0ERR                         = 4
	DRES_F_VC                               = 1
	DRES_IGNTC                              = 32
	DRES_INIT                               = 1
	DRES_INSECURE1                          = 1024
	DRES_INSECURE2                          = 2048
	DRES_KEEPTSIG                           = 65536
	DRES_MAXNDOTS                           = 15
	DRES_MAXRETRANS                         = 30
	DRES_MAXRETRY                           = 5
	DRES_MAXTIME                            = 65535
	DRES_NOALIASES                          = 4096
	DRES_NOCHECKNAME                        = 32768
	DRES_NOIP6DOTINT                        = 524288
	DRES_PRF_ADD                            = 128
	DRES_PRF_ANS                            = 32
	DRES_PRF_AUTH                           = 64
	DRES_PRF_CLASS                          = 4
	DRES_PRF_CMD                            = 8
	DRES_PRF_HEAD1                          = 256
	DRES_PRF_HEAD2                          = 512
	DRES_PRF_HEADX                          = 2048
	DRES_PRF_INIT                           = 16384
	DRES_PRF_QUERY                          = 4096
	DRES_PRF_QUES                           = 16
	DRES_PRF_REPLY                          = 8192
	DRES_PRF_STATS                          = 1
	DRES_PRF_TTLID                          = 1024
	DRES_PRF_UPDATE                         = 2
	DRES_PRIMARY                            = 16
	DRES_RECURSE                            = 64
	DRES_ROTATE                             = 16384
	DRES_SNGLKUP                            = 2097152
	DRES_SNGLKUPREOP                        = 4194304
	DRES_STAYOPEN                           = 256
	DRES_TIMEOUT                            = 5
	DRES_USEBSTRING                         = 262144
	DRES_USEVC                              = 8
	DRES_USE_DNSSEC                         = 8388608
	DRES_USE_EDNS0                          = 1048576
	DRES_USE_INET6                          = 8192
	DRE_DUP_MAX                             = 255
	DRHF_CORD                               = 4096
	DRHF_DEFAULT_DELAY_LOAD                 = 512
	DRHF_DELTA_C_PLUS_PLUS                  = 64
	DRHF_GUARANTEE_INIT                     = 32
	DRHF_GUARANTEE_START_INIT               = 128
	DRHF_NONE                               = 0
	DRHF_NOTPOT                             = 2
	DRHF_NO_LIBRARY_REPLACEMENT             = 4
	DRHF_NO_MOVE                            = 8
	DRHF_NO_UNRES_UNDEF                     = 8192
	DRHF_PIXIE                              = 256
	DRHF_QUICKSTART                         = 1
	DRHF_REQUICKSTART                       = 1024
	DRHF_REQUICKSTARTED                     = 2048
	DRHF_RLD_ORDER_SAFE                     = 16384
	DRHF_SGI_ONLY                           = 16
	DRLIM64_INFINITY                        = 18446744073709551615
	DRLIM64_SAVED_CUR                       = 18446744073709551615
	DRLIM64_SAVED_MAX                       = 18446744073709551615
	DRLIMIT_AS                              = 9
	DRLIMIT_CORE                            = 4
	DRLIMIT_CPU                             = 0
	DRLIMIT_DATA                            = 2
	DRLIMIT_FSIZE                           = 1
	DRLIMIT_LOCKS                           = 10
	DRLIMIT_MEMLOCK                         = 8
	DRLIMIT_MSGQUEUE                        = 12
	DRLIMIT_NICE                            = 13
	DRLIMIT_NLIMITS                         = 15
	DRLIMIT_NOFILE                          = 7
	DRLIMIT_NPROC                           = 6
	DRLIMIT_RSS                             = 5
	DRLIMIT_RTPRIO                          = 14
	DRLIMIT_SIGPENDING                      = 11
	DRLIMIT_STACK                           = 3
	DRLIM_INFINITY                          = 18446744073709551615
	DRLIM_NLIMITS                           = 15
	DRLIM_SAVED_CUR                         = 18446744073709551615
	DRLIM_SAVED_MAX                         = 18446744073709551615
	DRMSGD                                  = 1
	DRMSGN                                  = 2
	DRNORM                                  = 0
	DROUNDS_DEFAULT                         = 5000
	DROUNDS_MAX                             = 9999999
	DROUNDS_MIN                             = 1000
	DRPROTDAT                               = 4
	DRPROTDIS                               = 8
	DRPROTMASK                              = 28
	DRPROTNORM                              = 16
	DRRFIXEDSZ                              = 10
	DRR_A                                   = 1
	DRR_AAAA                                = 28
	DRR_CNAME                               = 5
	DRR_PTR                                 = 12
	DRS_HIPRI                               = 1
	DRTLD_DI_LINKMAP                        = 2
	DRTLD_GLOBAL                            = 256
	DRTLD_LAZY                              = 1
	DRTLD_LOCAL                             = 0
	DRTLD_NODELETE                          = 4096
	DRTLD_NOLOAD                            = 4
	DRTLD_NOW                               = 2
	DRTM_GETADDR                            = 22
	DRTM_GETLINK                            = 18
	DRTM_NEWADDR                            = 20
	DRTM_NEWLINK                            = 16
	DRUN_LVL                                = 1
	DRUSAGE_CHILDREN                        = -1
	DRUSAGE_SELF                            = 0
	DRUSAGE_THREAD                          = 1
	DRWF_WRITE_LIFE_NOT_SET                 = 0
	DRWH_WRITE_LIFE_EXTREME                 = 5
	DRWH_WRITE_LIFE_LONG                    = 4
	DRWH_WRITE_LIFE_MEDIUM                  = 3
	DRWH_WRITE_LIFE_NONE                    = 1
	DRWH_WRITE_LIFE_SHORT                   = 2
	DR_386_16                               = 20
	DR_386_32                               = 1
	DR_386_32PLT                            = 11
	DR_386_8                                = 22
	DR_386_COPY                             = 5
	DR_386_GLOB_DAT                         = 6
	DR_386_GOT32                            = 3
	DR_386_GOT32X                           = 43
	DR_386_GOTOFF                           = 9
	DR_386_GOTPC                            = 10
	DR_386_IRELATIVE                        = 42
	DR_386_JMP_SLOT                         = 7
	DR_386_NONE                             = 0
	DR_386_NUM                              = 44
	DR_386_PC16                             = 21
	DR_386_PC32                             = 2
	DR_386_PC8                              = 23
	DR_386_PLT32                            = 4
	DR_386_RELATIVE                         = 8
	DR_386_SIZE32                           = 38
	DR_386_TLS_DESC                         = 41
	DR_386_TLS_DESC_CALL                    = 40
	DR_386_TLS_DTPMOD32                     = 35
	DR_386_TLS_DTPOFF32                     = 36
	DR_386_TLS_GD                           = 18
	DR_386_TLS_GD_32                        = 24
	DR_386_TLS_GD_CALL                      = 26
	DR_386_TLS_GD_POP                       = 27
	DR_386_TLS_GD_PUSH                      = 25
	DR_386_TLS_GOTDESC                      = 39
	DR_386_TLS_GOTIE                        = 16
	DR_386_TLS_IE                           = 15
	DR_386_TLS_IE_32                        = 33
	DR_386_TLS_LDM                          = 19
	DR_386_TLS_LDM_32                       = 28
	DR_386_TLS_LDM_CALL                     = 30
	DR_386_TLS_LDM_POP                      = 31
	DR_386_TLS_LDM_PUSH                     = 29
	DR_386_TLS_LDO_32                       = 32
	DR_386_TLS_LE                           = 17
	DR_386_TLS_LE_32                        = 34
	DR_386_TLS_TPOFF                        = 14
	DR_386_TLS_TPOFF32                      = 37
	DR_390_12                               = 2
	DR_390_16                               = 3
	DR_390_20                               = 57
	DR_390_32                               = 4
	DR_390_64                               = 22
	DR_390_8                                = 1
	DR_390_COPY                             = 9
	DR_390_GLOB_DAT                         = 10
	DR_390_GOT12                            = 6
	DR_390_GOT16                            = 15
	DR_390_GOT20                            = 58
	DR_390_GOT32                            = 7
	DR_390_GOT64                            = 24
	DR_390_GOTENT                           = 26
	DR_390_GOTOFF16                         = 27
	DR_390_GOTOFF32                         = 13
	DR_390_GOTOFF64                         = 28
	DR_390_GOTPC                            = 14
	DR_390_GOTPCDBL                         = 21
	DR_390_GOTPLT12                         = 29
	DR_390_GOTPLT16                         = 30
	DR_390_GOTPLT20                         = 59
	DR_390_GOTPLT32                         = 31
	DR_390_GOTPLT64                         = 32
	DR_390_GOTPLTENT                        = 33
	DR_390_JMP_SLOT                         = 11
	DR_390_NONE                             = 0
	DR_390_NUM                              = 61
	DR_390_PC16                             = 16
	DR_390_PC16DBL                          = 17
	DR_390_PC32                             = 5
	DR_390_PC32DBL                          = 19
	DR_390_PC64                             = 23
	DR_390_PLT16DBL                         = 18
	DR_390_PLT32                            = 8
	DR_390_PLT32DBL                         = 20
	DR_390_PLT64                            = 25
	DR_390_PLTOFF16                         = 34
	DR_390_PLTOFF32                         = 35
	DR_390_PLTOFF64                         = 36
	DR_390_RELATIVE                         = 12
	DR_390_TLS_DTPMOD                       = 54
	DR_390_TLS_DTPOFF                       = 55
	DR_390_TLS_GD32                         = 40
	DR_390_TLS_GD64                         = 41
	DR_390_TLS_GDCALL                       = 38
	DR_390_TLS_GOTIE12                      = 42
	DR_390_TLS_GOTIE20                      = 60
	DR_390_TLS_GOTIE32                      = 43
	DR_390_TLS_GOTIE64                      = 44
	DR_390_TLS_IE32                         = 47
	DR_390_TLS_IE64                         = 48
	DR_390_TLS_IEENT                        = 49
	DR_390_TLS_LDCALL                       = 39
	DR_390_TLS_LDM32                        = 45
	DR_390_TLS_LDM64                        = 46
	DR_390_TLS_LDO32                        = 52
	DR_390_TLS_LDO64                        = 53
	DR_390_TLS_LE32                         = 50
	DR_390_TLS_LE64                         = 51
	DR_390_TLS_LOAD                         = 37
	DR_390_TLS_TPOFF                        = 56
	DR_68K_16                               = 2
	DR_68K_32                               = 1
	DR_68K_8                                = 3
	DR_68K_COPY                             = 19
	DR_68K_GLOB_DAT                         = 20
	DR_68K_GOT16                            = 8
	DR_68K_GOT16O                           = 11
	DR_68K_GOT32                            = 7
	DR_68K_GOT32O                           = 10
	DR_68K_GOT8                             = 9
	DR_68K_GOT8O                            = 12
	DR_68K_JMP_SLOT                         = 21
	DR_68K_NONE                             = 0
	DR_68K_NUM                              = 43
	DR_68K_PC16                             = 5
	DR_68K_PC32                             = 4
	DR_68K_PC8                              = 6
	DR_68K_PLT16                            = 14
	DR_68K_PLT16O                           = 17
	DR_68K_PLT32                            = 13
	DR_68K_PLT32O                           = 16
	DR_68K_PLT8                             = 15
	DR_68K_PLT8O                            = 18
	DR_68K_RELATIVE                         = 22
	DR_68K_TLS_DTPMOD32                     = 40
	DR_68K_TLS_DTPREL32                     = 41
	DR_68K_TLS_GD16                         = 26
	DR_68K_TLS_GD32                         = 25
	DR_68K_TLS_GD8                          = 27
	DR_68K_TLS_IE16                         = 35
	DR_68K_TLS_IE32                         = 34
	DR_68K_TLS_IE8                          = 36
	DR_68K_TLS_LDM16                        = 29
	DR_68K_TLS_LDM32                        = 28
	DR_68K_TLS_LDM8                         = 30
	DR_68K_TLS_LDO16                        = 32
	DR_68K_TLS_LDO32                        = 31
	DR_68K_TLS_LDO8                         = 33
	DR_68K_TLS_LE16                         = 38
	DR_68K_TLS_LE32                         = 37
	DR_68K_TLS_LE8                          = 39
	DR_68K_TLS_TPREL32                      = 42
	DR_AARCH64_ABS16                        = 259
	DR_AARCH64_ABS32                        = 258
	DR_AARCH64_ABS64                        = 257
	DR_AARCH64_ADD_ABS_LO12_NC              = 277
	DR_AARCH64_ADR_GOT_PAGE                 = 311
	DR_AARCH64_ADR_PREL_LO21                = 274
	DR_AARCH64_ADR_PREL_PG_HI21             = 275
	DR_AARCH64_ADR_PREL_PG_HI21_NC          = 276
	DR_AARCH64_CALL26                       = 283
	DR_AARCH64_CONDBR19                     = 280
	DR_AARCH64_COPY                         = 1024
	DR_AARCH64_GLOB_DAT                     = 1025
	DR_AARCH64_GOTREL32                     = 308
	DR_AARCH64_GOTREL64                     = 307
	DR_AARCH64_GOT_LD_PREL19                = 309
	DR_AARCH64_JUMP26                       = 282
	DR_AARCH64_JUMP_SLOT                    = 1026
	DR_AARCH64_LD64_GOTOFF_LO15             = 310
	DR_AARCH64_LD64_GOTPAGE_LO15            = 313
	DR_AARCH64_LD64_GOT_LO12_NC             = 312
	DR_AARCH64_LDST128_ABS_LO12_NC          = 299
	DR_AARCH64_LDST16_ABS_LO12_NC           = 284
	DR_AARCH64_LDST32_ABS_LO12_NC           = 285
	DR_AARCH64_LDST64_ABS_LO12_NC           = 286
	DR_AARCH64_LDST8_ABS_LO12_NC            = 278
	DR_AARCH64_LD_PREL_LO19                 = 273
	DR_AARCH64_MOVW_GOTOFF_G0               = 300
	DR_AARCH64_MOVW_GOTOFF_G0_NC            = 301
	DR_AARCH64_MOVW_GOTOFF_G1               = 302
	DR_AARCH64_MOVW_GOTOFF_G1_NC            = 303
	DR_AARCH64_MOVW_GOTOFF_G2               = 304
	DR_AARCH64_MOVW_GOTOFF_G2_NC            = 305
	DR_AARCH64_MOVW_GOTOFF_G3               = 306
	DR_AARCH64_MOVW_PREL_G0                 = 287
	DR_AARCH64_MOVW_PREL_G0_NC              = 288
	DR_AARCH64_MOVW_PREL_G1                 = 289
	DR_AARCH64_MOVW_PREL_G1_NC              = 290
	DR_AARCH64_MOVW_PREL_G2                 = 291
	DR_AARCH64_MOVW_PREL_G2_NC              = 292
	DR_AARCH64_MOVW_PREL_G3                 = 293
	DR_AARCH64_MOVW_SABS_G0                 = 270
	DR_AARCH64_MOVW_SABS_G1                 = 271
	DR_AARCH64_MOVW_SABS_G2                 = 272
	DR_AARCH64_MOVW_UABS_G0                 = 263
	DR_AARCH64_MOVW_UABS_G0_NC              = 264
	DR_AARCH64_MOVW_UABS_G1                 = 265
	DR_AARCH64_MOVW_UABS_G1_NC              = 266
	DR_AARCH64_MOVW_UABS_G2                 = 267
	DR_AARCH64_MOVW_UABS_G2_NC              = 268
	DR_AARCH64_MOVW_UABS_G3                 = 269
	DR_AARCH64_NONE                         = 0
	DR_AARCH64_P32_ABS32                    = 1
	DR_AARCH64_P32_COPY                     = 180
	DR_AARCH64_P32_GLOB_DAT                 = 181
	DR_AARCH64_P32_IRELATIVE                = 188
	DR_AARCH64_P32_JUMP_SLOT                = 182
	DR_AARCH64_P32_RELATIVE                 = 183
	DR_AARCH64_P32_TLSDESC                  = 187
	DR_AARCH64_P32_TLS_DTPMOD               = 184
	DR_AARCH64_P32_TLS_DTPREL               = 185
	DR_AARCH64_P32_TLS_TPREL                = 186
	DR_AARCH64_PREL16                       = 262
	DR_AARCH64_PREL32                       = 261
	DR_AARCH64_PREL64                       = 260
	DR_AARCH64_RELATIVE                     = 1027
	DR_AARCH64_TLSDESC                      = 1031
	DR_AARCH64_TLSDESC_ADD                  = 568
	DR_AARCH64_TLSDESC_ADD_LO12             = 564
	DR_AARCH64_TLSDESC_ADR_PAGE21           = 562
	DR_AARCH64_TLSDESC_ADR_PREL21           = 561
	DR_AARCH64_TLSDESC_CALL                 = 569
	DR_AARCH64_TLSDESC_LD64_LO12            = 563
	DR_AARCH64_TLSDESC_LDR                  = 567
	DR_AARCH64_TLSDESC_LD_PREL19            = 560
	DR_AARCH64_TLSDESC_OFF_G0_NC            = 566
	DR_AARCH64_TLSDESC_OFF_G1               = 565
	DR_AARCH64_TLSGD_ADD_LO12_NC            = 514
	DR_AARCH64_TLSGD_ADR_PAGE21             = 513
	DR_AARCH64_TLSGD_ADR_PREL21             = 512
	DR_AARCH64_TLSGD_MOVW_G0_NC             = 516
	DR_AARCH64_TLSGD_MOVW_G1                = 515
	DR_AARCH64_TLSIE_ADR_GOTTPREL_PAGE21    = 541
	DR_AARCH64_TLSIE_LD64_GOTTPREL_LO12_NC  = 542
	DR_AARCH64_TLSIE_LD_GOTTPREL_PREL19     = 543
	DR_AARCH64_TLSIE_MOVW_GOTTPREL_G0_NC    = 540
	DR_AARCH64_TLSIE_MOVW_GOTTPREL_G1       = 539
	DR_AARCH64_TLSLD_ADD_DTPREL_HI12        = 528
	DR_AARCH64_TLSLD_ADD_DTPREL_LO12        = 529
	DR_AARCH64_TLSLD_ADD_DTPREL_LO12_NC     = 530
	DR_AARCH64_TLSLD_ADD_LO12_NC            = 519
	DR_AARCH64_TLSLD_ADR_PAGE21             = 518
	DR_AARCH64_TLSLD_ADR_PREL21             = 517
	DR_AARCH64_TLSLD_LDST128_DTPREL_LO12    = 572
	DR_AARCH64_TLSLD_LDST128_DTPREL_LO12_NC = 573
	DR_AARCH64_TLSLD_LDST16_DTPREL_LO12     = 533
	DR_AARCH64_TLSLD_LDST16_DTPREL_LO12_NC  = 534
	DR_AARCH64_TLSLD_LDST32_DTPREL_LO12     = 535
	DR_AARCH64_TLSLD_LDST32_DTPREL_LO12_NC  = 536
	DR_AARCH64_TLSLD_LDST64_DTPREL_LO12     = 537
	DR_AARCH64_TLSLD_LDST64_DTPREL_LO12_NC  = 538
	DR_AARCH64_TLSLD_LDST8_DTPREL_LO12      = 531
	DR_AARCH64_TLSLD_LDST8_DTPREL_LO12_NC   = 532
	DR_AARCH64_TLSLD_LD_PREL19              = 522
	DR_AARCH64_TLSLD_MOVW_DTPREL_G0         = 526
	DR_AARCH64_TLSLD_MOVW_DTPREL_G0_NC      = 527
	DR_AARCH64_TLSLD_MOVW_DTPREL_G1         = 524
	DR_AARCH64_TLSLD_MOVW_DTPREL_G1_NC      = 525
	DR_AARCH64_TLSLD_MOVW_DTPREL_G2         = 523
	DR_AARCH64_TLSLD_MOVW_G0_NC             = 521
	DR_AARCH64_TLSLD_MOVW_G1                = 520
	DR_AARCH64_TLSLE_ADD_TPREL_HI12         = 549
	DR_AARCH64_TLSLE_ADD_TPREL_LO12         = 550
	DR_AARCH64_TLSLE_ADD_TPREL_LO12_NC      = 551
	DR_AARCH64_TLSLE_LDST128_TPREL_LO12     = 570
	DR_AARCH64_TLSLE_LDST128_TPREL_LO12_NC  = 571
	DR_AARCH64_TLSLE_LDST16_TPREL_LO12      = 554
	DR_AARCH64_TLSLE_LDST16_TPREL_LO12_NC   = 555
	DR_AARCH64_TLSLE_LDST32_TPREL_LO12      = 556
	DR_AARCH64_TLSLE_LDST32_TPREL_LO12_NC   = 557
	DR_AARCH64_TLSLE_LDST64_TPREL_LO12      = 558
	DR_AARCH64_TLSLE_LDST64_TPREL_LO12_NC   = 559
	DR_AARCH64_TLSLE_LDST8_TPREL_LO12       = 552
	DR_AARCH64_TLSLE_LDST8_TPREL_LO12_NC    = 553
	DR_AARCH64_TLSLE_MOVW_TPREL_G0          = 547
	DR_AARCH64_TLSLE_MOVW_TPREL_G0_NC       = 548
	DR_AARCH64_TLSLE_MOVW_TPREL_G1          = 545
	DR_AARCH64_TLSLE_MOVW_TPREL_G1_NC       = 546
	DR_AARCH64_TLSLE_MOVW_TPREL_G2          = 544
	DR_AARCH64_TLS_DTPMOD                   = 1028
	DR_AARCH64_TLS_DTPMOD64                 = 1028
	DR_AARCH64_TLS_DTPREL                   = 1029
	DR_AARCH64_TLS_DTPREL64                 = 1029
	DR_AARCH64_TLS_TPREL                    = 1030
	DR_AARCH64_TLS_TPREL64                  = 1030
	DR_AARCH64_TSTBR14                      = 279
	DR_ALPHA_BRADDR                         = 7
	DR_ALPHA_COPY                           = 24
	DR_ALPHA_DTPMOD64                       = 31
	DR_ALPHA_DTPREL16                       = 36
	DR_ALPHA_DTPREL64                       = 33
	DR_ALPHA_DTPRELHI                       = 34
	DR_ALPHA_DTPRELLO                       = 35
	DR_ALPHA_GLOB_DAT                       = 25
	DR_ALPHA_GOTDTPREL                      = 32
	DR_ALPHA_GOTTPREL                       = 37
	DR_ALPHA_GPDISP                         = 6
	DR_ALPHA_GPREL16                        = 19
	DR_ALPHA_GPREL32                        = 3
	DR_ALPHA_GPRELHIGH                      = 17
	DR_ALPHA_GPRELLOW                       = 18
	DR_ALPHA_HINT                           = 8
	DR_ALPHA_JMP_SLOT                       = 26
	DR_ALPHA_LITERAL                        = 4
	DR_ALPHA_LITUSE                         = 5
	DR_ALPHA_NONE                           = 0
	DR_ALPHA_NUM                            = 46
	DR_ALPHA_REFLONG                        = 1
	DR_ALPHA_REFQUAD                        = 2
	DR_ALPHA_RELATIVE                       = 27
	DR_ALPHA_SREL16                         = 9
	DR_ALPHA_SREL32                         = 10
	DR_ALPHA_SREL64                         = 11
	DR_ALPHA_TLSGD                          = 29
	DR_ALPHA_TLS_GD_HI                      = 28
	DR_ALPHA_TLS_LDM                        = 30
	DR_ALPHA_TPREL16                        = 41
	DR_ALPHA_TPREL64                        = 38
	DR_ALPHA_TPRELHI                        = 39
	DR_ALPHA_TPRELLO                        = 40
	DR_ARM_ABS12                            = 6
	DR_ARM_ABS16                            = 5
	DR_ARM_ABS32                            = 2
	DR_ARM_ABS32_NOI                        = 55
	DR_ARM_ABS8                             = 8
	DR_ARM_ALU_PCREL_15_8                   = 33
	DR_ARM_ALU_PCREL_23_15                  = 34
	DR_ARM_ALU_PCREL_7_0                    = 32
	DR_ARM_ALU_PC_G0                        = 58
	DR_ARM_ALU_PC_G0_NC                     = 57
	DR_ARM_ALU_PC_G1                        = 60
	DR_ARM_ALU_PC_G1_NC                     = 59
	DR_ARM_ALU_PC_G2                        = 61
	DR_ARM_ALU_SBREL_19_12                  = 36
	DR_ARM_ALU_SBREL_27_20                  = 37
	DR_ARM_ALU_SB_G0                        = 71
	DR_ARM_ALU_SB_G0_NC                     = 70
	DR_ARM_ALU_SB_G1                        = 73
	DR_ARM_ALU_SB_G1_NC                     = 72
	DR_ARM_ALU_SB_G2                        = 74
	DR_ARM_AMP_VCALL9                       = 12
	DR_ARM_BASE_ABS                         = 31
	DR_ARM_CALL                             = 28
	DR_ARM_COPY                             = 20
	DR_ARM_GLOB_DAT                         = 21
	DR_ARM_GNU_VTENTRY                      = 100
	DR_ARM_GNU_VTINHERIT                    = 101
	DR_ARM_GOT32                            = 26
	DR_ARM_GOTOFF                           = 24
	DR_ARM_GOTOFF12                         = 98
	DR_ARM_GOTPC                            = 25
	DR_ARM_GOTRELAX                         = 99
	DR_ARM_GOT_ABS                          = 95
	DR_ARM_GOT_BREL12                       = 97
	DR_ARM_GOT_PREL                         = 96
	DR_ARM_IRELATIVE                        = 160
	DR_ARM_JUMP24                           = 29
	DR_ARM_JUMP_SLOT                        = 22
	DR_ARM_LDC_PC_G0                        = 67
	DR_ARM_LDC_PC_G1                        = 68
	DR_ARM_LDC_PC_G2                        = 69
	DR_ARM_LDC_SB_G0                        = 81
	DR_ARM_LDC_SB_G1                        = 82
	DR_ARM_LDC_SB_G2                        = 83
	DR_ARM_LDRS_PC_G0                       = 64
	DR_ARM_LDRS_PC_G1                       = 65
	DR_ARM_LDRS_PC_G2                       = 66
	DR_ARM_LDRS_SB_G0                       = 78
	DR_ARM_LDRS_SB_G1                       = 79
	DR_ARM_LDRS_SB_G2                       = 80
	DR_ARM_LDR_PC_G1                        = 62
	DR_ARM_LDR_PC_G2                        = 63
	DR_ARM_LDR_SBREL_11_0                   = 35
	DR_ARM_LDR_SB_G0                        = 75
	DR_ARM_LDR_SB_G1                        = 76
	DR_ARM_LDR_SB_G2                        = 77
	DR_ARM_ME_TOO                           = 128
	DR_ARM_MOVT_ABS                         = 44
	DR_ARM_MOVT_BREL                        = 85
	DR_ARM_MOVT_PREL                        = 46
	DR_ARM_MOVW_ABS_NC                      = 43
	DR_ARM_MOVW_BREL                        = 86
	DR_ARM_MOVW_BREL_NC                     = 84
	DR_ARM_MOVW_PREL_NC                     = 45
	DR_ARM_NONE                             = 0
	DR_ARM_NUM                              = 256
	DR_ARM_PC13                             = 4
	DR_ARM_PC24                             = 1
	DR_ARM_PLT32                            = 27
	DR_ARM_PLT32_ABS                        = 94
	DR_ARM_PREL31                           = 42
	DR_ARM_RABS22                           = 253
	DR_ARM_RBASE                            = 255
	DR_ARM_REL32                            = 3
	DR_ARM_REL32_NOI                        = 56
	DR_ARM_RELATIVE                         = 23
	DR_ARM_RPC24                            = 254
	DR_ARM_RREL32                           = 252
	DR_ARM_RSBREL32                         = 250
	DR_ARM_RXPC25                           = 249
	DR_ARM_SBREL31                          = 39
	DR_ARM_SBREL32                          = 9
	DR_ARM_TARGET1                          = 38
	DR_ARM_TARGET2                          = 41
	DR_ARM_THM_ABS5                         = 7
	DR_ARM_THM_ALU_PREL_11_0                = 53
	DR_ARM_THM_GOT_BREL12                   = 131
	DR_ARM_THM_JUMP19                       = 51
	DR_ARM_THM_JUMP24                       = 30
	DR_ARM_THM_JUMP6                        = 52
	DR_ARM_THM_MOVT_ABS                     = 48
	DR_ARM_THM_MOVT_BREL                    = 88
	DR_ARM_THM_MOVT_PREL                    = 50
	DR_ARM_THM_MOVW_ABS_NC                  = 47
	DR_ARM_THM_MOVW_BREL                    = 89
	DR_ARM_THM_MOVW_BREL_NC                 = 87
	DR_ARM_THM_MOVW_PREL_NC                 = 49
	DR_ARM_THM_PC11                         = 102
	DR_ARM_THM_PC12                         = 54
	DR_ARM_THM_PC22                         = 10
	DR_ARM_THM_PC8                          = 11
	DR_ARM_THM_PC9                          = 103
	DR_ARM_THM_RPC22                        = 251
	DR_ARM_THM_SWI8                         = 14
	DR_ARM_THM_TLS_CALL                     = 93
	DR_ARM_THM_TLS_DESCSEQ                  = 129
	DR_ARM_THM_TLS_DESCSEQ16                = 129
	DR_ARM_THM_TLS_DESCSEQ32                = 130
	DR_ARM_THM_XPC22                        = 16
	DR_ARM_TLS_CALL                         = 91
	DR_ARM_TLS_DESC                         = 13
	DR_ARM_TLS_DESCSEQ                      = 92
	DR_ARM_TLS_DTPMOD32                     = 17
	DR_ARM_TLS_DTPOFF32                     = 18
	DR_ARM_TLS_GD32                         = 104
	DR_ARM_TLS_GOTDESC                      = 90
	DR_ARM_TLS_IE12GP                       = 111
	DR_ARM_TLS_IE32                         = 107
	DR_ARM_TLS_LDM32                        = 105
	DR_ARM_TLS_LDO12                        = 109
	DR_ARM_TLS_LDO32                        = 106
	DR_ARM_TLS_LE12                         = 110
	DR_ARM_TLS_LE32                         = 108
	DR_ARM_TLS_TPOFF32                      = 19
	DR_ARM_V4BX                             = 40
	DR_ARM_XPC25                            = 15
	DR_BPF_MAP_FD                           = 1
	DR_BPF_NONE                             = 0
	DR_CRIS_16                              = 2
	DR_CRIS_16_GOT                          = 13
	DR_CRIS_16_GOTPLT                       = 15
	DR_CRIS_16_PCREL                        = 5
	DR_CRIS_32                              = 3
	DR_CRIS_32_GOT                          = 14
	DR_CRIS_32_GOTPLT                       = 16
	DR_CRIS_32_GOTREL                       = 17
	DR_CRIS_32_PCREL                        = 6
	DR_CRIS_32_PLT_GOTREL                   = 18
	DR_CRIS_32_PLT_PCREL                    = 19
	DR_CRIS_8                               = 1
	DR_CRIS_8_PCREL                         = 4
	DR_CRIS_COPY                            = 9
	DR_CRIS_GLOB_DAT                        = 10
	DR_CRIS_GNU_VTENTRY                     = 8
	DR_CRIS_GNU_VTINHERIT                   = 7
	DR_CRIS_JUMP_SLOT                       = 11
	DR_CRIS_NONE                            = 0
	DR_CRIS_NUM                             = 20
	DR_CRIS_RELATIVE                        = 12
	DR_IA64_COPY                            = 132
	DR_IA64_DIR32LSB                        = 37
	DR_IA64_DIR32MSB                        = 36
	DR_IA64_DIR64LSB                        = 39
	DR_IA64_DIR64MSB                        = 38
	DR_IA64_DTPMOD64LSB                     = 167
	DR_IA64_DTPMOD64MSB                     = 166
	DR_IA64_DTPREL14                        = 177
	DR_IA64_DTPREL22                        = 178
	DR_IA64_DTPREL32LSB                     = 181
	DR_IA64_DTPREL32MSB                     = 180
	DR_IA64_DTPREL64I                       = 179
	DR_IA64_DTPREL64LSB                     = 183
	DR_IA64_DTPREL64MSB                     = 182
	DR_IA64_FPTR32LSB                       = 69
	DR_IA64_FPTR32MSB                       = 68
	DR_IA64_FPTR64I                         = 67
	DR_IA64_FPTR64LSB                       = 71
	DR_IA64_FPTR64MSB                       = 70
	DR_IA64_GPREL22                         = 42
	DR_IA64_GPREL32LSB                      = 45
	DR_IA64_GPREL32MSB                      = 44
	DR_IA64_GPREL64I                        = 43
	DR_IA64_GPREL64LSB                      = 47
	DR_IA64_GPREL64MSB                      = 46
	DR_IA64_IMM14                           = 33
	DR_IA64_IMM22                           = 34
	DR_IA64_IMM64                           = 35
	DR_IA64_IPLTLSB                         = 129
	DR_IA64_IPLTMSB                         = 128
	DR_IA64_LDXMOV                          = 135
	DR_IA64_LTOFF22                         = 50
	DR_IA64_LTOFF22X                        = 134
	DR_IA64_LTOFF64I                        = 51
	DR_IA64_LTOFF_DTPMOD22                  = 170
	DR_IA64_LTOFF_DTPREL22                  = 186
	DR_IA64_LTOFF_FPTR22                    = 82
	DR_IA64_LTOFF_FPTR32LSB                 = 85
	DR_IA64_LTOFF_FPTR32MSB                 = 84
	DR_IA64_LTOFF_FPTR64I                   = 83
	DR_IA64_LTOFF_FPTR64LSB                 = 87
	DR_IA64_LTOFF_FPTR64MSB                 = 86
	DR_IA64_LTOFF_TPREL22                   = 154
	DR_IA64_LTV32LSB                        = 117
	DR_IA64_LTV32MSB                        = 116
	DR_IA64_LTV64LSB                        = 119
	DR_IA64_LTV64MSB                        = 118
	DR_IA64_NONE                            = 0
	DR_IA64_PCREL21B                        = 73
	DR_IA64_PCREL21BI                       = 121
	DR_IA64_PCREL21F                        = 75
	DR_IA64_PCREL21M                        = 74
	DR_IA64_PCREL22                         = 122
	DR_IA64_PCREL32LSB                      = 77
	DR_IA64_PCREL32MSB                      = 76
	DR_IA64_PCREL60B                        = 72
	DR_IA64_PCREL64I                        = 123
	DR_IA64_PCREL64LSB                      = 79
	DR_IA64_PCREL64MSB                      = 78
	DR_IA64_PLTOFF22                        = 58
	DR_IA64_PLTOFF64I                       = 59
	DR_IA64_PLTOFF64LSB                     = 63
	DR_IA64_PLTOFF64MSB                     = 62
	DR_IA64_REL32LSB                        = 109
	DR_IA64_REL32MSB                        = 108
	DR_IA64_REL64LSB                        = 111
	DR_IA64_REL64MSB                        = 110
	DR_IA64_SECREL32LSB                     = 101
	DR_IA64_SECREL32MSB                     = 100
	DR_IA64_SECREL64LSB                     = 103
	DR_IA64_SECREL64MSB                     = 102
	DR_IA64_SEGREL32LSB                     = 93
	DR_IA64_SEGREL32MSB                     = 92
	DR_IA64_SEGREL64LSB                     = 95
	DR_IA64_SEGREL64MSB                     = 94
	DR_IA64_SUB                             = 133
	DR_IA64_TPREL14                         = 145
	DR_IA64_TPREL22                         = 146
	DR_IA64_TPREL64I                        = 147
	DR_IA64_TPREL64LSB                      = 151
	DR_IA64_TPREL64MSB                      = 150
	DR_INFO                                 = 0
	DR_M32R_10_PCREL                        = 4
	DR_M32R_10_PCREL_RELA                   = 36
	DR_M32R_16                              = 1
	DR_M32R_16_RELA                         = 33
	DR_M32R_18_PCREL                        = 5
	DR_M32R_18_PCREL_RELA                   = 37
	DR_M32R_24                              = 3
	DR_M32R_24_RELA                         = 35
	DR_M32R_26_PCREL                        = 6
	DR_M32R_26_PCREL_RELA                   = 38
	DR_M32R_26_PLTREL                       = 49
	DR_M32R_32                              = 2
	DR_M32R_32_RELA                         = 34
	DR_M32R_COPY                            = 50
	DR_M32R_GLOB_DAT                        = 51
	DR_M32R_GNU_VTENTRY                     = 12
	DR_M32R_GNU_VTINHERIT                   = 11
	DR_M32R_GOT16_HI_SLO                    = 57
	DR_M32R_GOT16_HI_ULO                    = 56
	DR_M32R_GOT16_LO                        = 58
	DR_M32R_GOT24                           = 48
	DR_M32R_GOTOFF                          = 54
	DR_M32R_GOTOFF_HI_SLO                   = 63
	DR_M32R_GOTOFF_HI_ULO                   = 62
	DR_M32R_GOTOFF_LO                       = 64
	DR_M32R_GOTPC24                         = 55
	DR_M32R_GOTPC_HI_SLO                    = 60
	DR_M32R_GOTPC_HI_ULO                    = 59
	DR_M32R_GOTPC_LO                        = 61
	DR_M32R_HI16_SLO                        = 8
	DR_M32R_HI16_SLO_RELA                   = 40
	DR_M32R_HI16_ULO                        = 7
	DR_M32R_HI16_ULO_RELA                   = 39
	DR_M32R_JMP_SLOT                        = 52
	DR_M32R_LO16                            = 9
	DR_M32R_LO16_RELA                       = 41
	DR_M32R_NONE                            = 0
	DR_M32R_NUM                             = 256
	DR_M32R_REL32                           = 45
	DR_M32R_RELATIVE                        = 53
	DR_M32R_RELA_GNU_VTENTRY                = 44
	DR_M32R_RELA_GNU_VTINHERIT              = 43
	DR_M32R_SDA16                           = 10
	DR_M32R_SDA16_RELA                      = 42
	DR_MICROBLAZE_32                        = 1
	DR_MICROBLAZE_32_LO                     = 6
	DR_MICROBLAZE_32_PCREL                  = 2
	DR_MICROBLAZE_32_PCREL_LO               = 4
	DR_MICROBLAZE_32_SYM_OP_SYM             = 10
	DR_MICROBLAZE_64                        = 5
	DR_MICROBLAZE_64_NONE                   = 9
	DR_MICROBLAZE_64_PCREL                  = 3
	DR_MICROBLAZE_COPY                      = 21
	DR_MICROBLAZE_GLOB_DAT                  = 18
	DR_MICROBLAZE_GNU_VTENTRY               = 12
	DR_MICROBLAZE_GNU_VTINHERIT             = 11
	DR_MICROBLAZE_GOTOFF_32                 = 20
	DR_MICROBLAZE_GOTOFF_64                 = 19
	DR_MICROBLAZE_GOTPC_64                  = 13
	DR_MICROBLAZE_GOT_64                    = 14
	DR_MICROBLAZE_JUMP_SLOT                 = 17
	DR_MICROBLAZE_NONE                      = 0
	DR_MICROBLAZE_PLT_64                    = 15
	DR_MICROBLAZE_REL                       = 16
	DR_MICROBLAZE_SRO32                     = 7
	DR_MICROBLAZE_SRW32                     = 8
	DR_MICROBLAZE_TLS                       = 22
	DR_MICROBLAZE_TLSDTPMOD32               = 25
	DR_MICROBLAZE_TLSDTPREL32               = 26
	DR_MICROBLAZE_TLSDTPREL64               = 27
	DR_MICROBLAZE_TLSGD                     = 23
	DR_MICROBLAZE_TLSGOTTPREL32             = 28
	DR_MICROBLAZE_TLSLD                     = 24
	DR_MICROBLAZE_TLSTPREL32                = 29
	DR_MIPS_16                              = 1
	DR_MIPS_26                              = 4
	DR_MIPS_32                              = 2
	DR_MIPS_64                              = 18
	DR_MIPS_ADD_IMMEDIATE                   = 34
	DR_MIPS_CALL16                          = 11
	DR_MIPS_CALL_HI16                       = 30
	DR_MIPS_CALL_LO16                       = 31
	DR_MIPS_COPY                            = 126
	DR_MIPS_DELETE                          = 27
	DR_MIPS_GLOB_DAT                        = 51
	DR_MIPS_GOT16                           = 9
	DR_MIPS_GOT_DISP                        = 19
	DR_MIPS_GOT_HI16                        = 22
	DR_MIPS_GOT_LO16                        = 23
	DR_MIPS_GOT_OFST                        = 21
	DR_MIPS_GOT_PAGE                        = 20
	DR_MIPS_GPREL16                         = 7
	DR_MIPS_GPREL32                         = 12
	DR_MIPS_HI16                            = 5
	DR_MIPS_HIGHER                          = 28
	DR_MIPS_HIGHEST                         = 29
	DR_MIPS_INSERT_A                        = 25
	DR_MIPS_INSERT_B                        = 26
	DR_MIPS_JALR                            = 37
	DR_MIPS_JUMP_SLOT                       = 127
	DR_MIPS_LITERAL                         = 8
	DR_MIPS_LO16                            = 6
	DR_MIPS_NONE                            = 0
	DR_MIPS_NUM                             = 128
	DR_MIPS_PC16                            = 10
	DR_MIPS_PJUMP                           = 35
	DR_MIPS_REL16                           = 33
	DR_MIPS_REL32                           = 3
	DR_MIPS_RELGOT                          = 36
	DR_MIPS_SCN_DISP                        = 32
	DR_MIPS_SHIFT5                          = 16
	DR_MIPS_SHIFT6                          = 17
	DR_MIPS_SUB                             = 24
	DR_MIPS_TLS_DTPMOD32                    = 38
	DR_MIPS_TLS_DTPMOD64                    = 40
	DR_MIPS_TLS_DTPREL32                    = 39
	DR_MIPS_TLS_DTPREL64                    = 41
	DR_MIPS_TLS_DTPREL_HI16                 = 44
	DR_MIPS_TLS_DTPREL_LO16                 = 45
	DR_MIPS_TLS_GD                          = 42
	DR_MIPS_TLS_GOTTPREL                    = 46
	DR_MIPS_TLS_LDM                         = 43
	DR_MIPS_TLS_TPREL32                     = 47
	DR_MIPS_TLS_TPREL64                     = 48
	DR_MIPS_TLS_TPREL_HI16                  = 49
	DR_MIPS_TLS_TPREL_LO16                  = 50
	DR_MN10300_16                           = 2
	DR_MN10300_24                           = 9
	DR_MN10300_32                           = 1
	DR_MN10300_8                            = 3
	DR_MN10300_COPY                         = 20
	DR_MN10300_GLOB_DAT                     = 21
	DR_MN10300_GNU_VTENTRY                  = 8
	DR_MN10300_GNU_VTINHERIT                = 7
	DR_MN10300_GOT16                        = 19
	DR_MN10300_GOT24                        = 18
	DR_MN10300_GOT32                        = 17
	DR_MN10300_GOTOFF16                     = 14
	DR_MN10300_GOTOFF24                     = 13
	DR_MN10300_GOTOFF32                     = 12
	DR_MN10300_GOTPC16                      = 11
	DR_MN10300_GOTPC32                      = 10
	DR_MN10300_JMP_SLOT                     = 22
	DR_MN10300_NONE                         = 0
	DR_MN10300_NUM                          = 24
	DR_MN10300_PCREL16                      = 5
	DR_MN10300_PCREL32                      = 4
	DR_MN10300_PCREL8                       = 6
	DR_MN10300_PLT16                        = 16
	DR_MN10300_PLT32                        = 15
	DR_MN10300_RELATIVE                     = 23
	DR_NIOS2_ALIGN                          = 21
	DR_NIOS2_BFD_RELOC_16                   = 13
	DR_NIOS2_BFD_RELOC_32                   = 12
	DR_NIOS2_BFD_RELOC_8                    = 14
	DR_NIOS2_CACHE_OPX                      = 6
	DR_NIOS2_CALL16                         = 23
	DR_NIOS2_CALL26                         = 4
	DR_NIOS2_CALL26_NOAT                    = 41
	DR_NIOS2_CALLR                          = 20
	DR_NIOS2_CALL_HA                        = 45
	DR_NIOS2_CALL_LO                        = 44
	DR_NIOS2_CJMP                           = 19
	DR_NIOS2_COPY                           = 36
	DR_NIOS2_GLOB_DAT                       = 37
	DR_NIOS2_GNU_VTENTRY                    = 17
	DR_NIOS2_GNU_VTINHERIT                  = 16
	DR_NIOS2_GOT16                          = 22
	DR_NIOS2_GOTOFF                         = 40
	DR_NIOS2_GOTOFF_HA                      = 25
	DR_NIOS2_GOTOFF_LO                      = 24
	DR_NIOS2_GOT_HA                         = 43
	DR_NIOS2_GOT_LO                         = 42
	DR_NIOS2_GPREL                          = 15
	DR_NIOS2_HI16                           = 9
	DR_NIOS2_HIADJ16                        = 11
	DR_NIOS2_IMM5                           = 5
	DR_NIOS2_IMM6                           = 7
	DR_NIOS2_IMM8                           = 8
	DR_NIOS2_JUMP_SLOT                      = 38
	DR_NIOS2_LO16                           = 10
	DR_NIOS2_NONE                           = 0
	DR_NIOS2_PCREL16                        = 3
	DR_NIOS2_PCREL_HA                       = 27
	DR_NIOS2_PCREL_LO                       = 26
	DR_NIOS2_RELATIVE                       = 39
	DR_NIOS2_S16                            = 1
	DR_NIOS2_TLS_DTPMOD                     = 33
	DR_NIOS2_TLS_DTPREL                     = 34
	DR_NIOS2_TLS_GD16                       = 28
	DR_NIOS2_TLS_IE16                       = 31
	DR_NIOS2_TLS_LDM16                      = 29
	DR_NIOS2_TLS_LDO16                      = 30
	DR_NIOS2_TLS_LE16                       = 32
	DR_NIOS2_TLS_TPREL                      = 35
	DR_NIOS2_U16                            = 2
	DR_NIOS2_UJMP                           = 18
	DR_OK                                   = 4
	DR_OR1K_16                              = 2
	DR_OR1K_16_PCREL                        = 10
	DR_OR1K_32                              = 1
	DR_OR1K_32_PCREL                        = 9
	DR_OR1K_8                               = 3
	DR_OR1K_8_PCREL                         = 11
	DR_OR1K_COPY                            = 18
	DR_OR1K_GLOB_DAT                        = 19
	DR_OR1K_GNU_VTENTRY                     = 7
	DR_OR1K_GNU_VTINHERIT                   = 8
	DR_OR1K_GOT16                           = 14
	DR_OR1K_GOTOFF_HI16                     = 16
	DR_OR1K_GOTOFF_LO16                     = 17
	DR_OR1K_GOTPC_HI16                      = 12
	DR_OR1K_GOTPC_LO16                      = 13
	DR_OR1K_HI_16_IN_INSN                   = 5
	DR_OR1K_INSN_REL_26                     = 6
	DR_OR1K_JMP_SLOT                        = 20
	DR_OR1K_LO_16_IN_INSN                   = 4
	DR_OR1K_NONE                            = 0
	DR_OR1K_PLT26                           = 15
	DR_OR1K_RELATIVE                        = 21
	DR_OR1K_TLS_DTPMOD                      = 34
	DR_OR1K_TLS_DTPOFF                      = 33
	DR_OR1K_TLS_GD_HI16                     = 22
	DR_OR1K_TLS_GD_LO16                     = 23
	DR_OR1K_TLS_IE_HI16                     = 28
	DR_OR1K_TLS_IE_LO16                     = 29
	DR_OR1K_TLS_LDM_HI16                    = 24
	DR_OR1K_TLS_LDM_LO16                    = 25
	DR_OR1K_TLS_LDO_HI16                    = 26
	DR_OR1K_TLS_LDO_LO16                    = 27
	DR_OR1K_TLS_LE_HI16                     = 30
	DR_OR1K_TLS_LE_LO16                     = 31
	DR_OR1K_TLS_TPOFF                       = 32
	DR_PARISC_COPY                          = 128
	DR_PARISC_DIR14DR                       = 84
	DR_PARISC_DIR14R                        = 6
	DR_PARISC_DIR14WR                       = 83
	DR_PARISC_DIR16DF                       = 87
	DR_PARISC_DIR16F                        = 85
	DR_PARISC_DIR16WF                       = 86
	DR_PARISC_DIR17F                        = 4
	DR_PARISC_DIR17R                        = 3
	DR_PARISC_DIR21L                        = 2
	DR_PARISC_DIR32                         = 1
	DR_PARISC_DIR64                         = 80
	DR_PARISC_DPREL14R                      = 22
	DR_PARISC_DPREL21L                      = 18
	DR_PARISC_EPLT                          = 130
	DR_PARISC_FPTR64                        = 64
	DR_PARISC_GNU_VTENTRY                   = 232
	DR_PARISC_GNU_VTINHERIT                 = 233
	DR_PARISC_GPREL14DR                     = 92
	DR_PARISC_GPREL14R                      = 30
	DR_PARISC_GPREL14WR                     = 91
	DR_PARISC_GPREL16DF                     = 95
	DR_PARISC_GPREL16F                      = 93
	DR_PARISC_GPREL16WF                     = 94
	DR_PARISC_GPREL21L                      = 26
	DR_PARISC_GPREL64                       = 88
	DR_PARISC_HIRESERVE                     = 255
	DR_PARISC_IPLT                          = 129
	DR_PARISC_LORESERVE                     = 128
	DR_PARISC_LTOFF14DR                     = 100
	DR_PARISC_LTOFF14R                      = 38
	DR_PARISC_LTOFF14WR                     = 99
	DR_PARISC_LTOFF16DF                     = 103
	DR_PARISC_LTOFF16F                      = 101
	DR_PARISC_LTOFF16WF                     = 102
	DR_PARISC_LTOFF21L                      = 34
	DR_PARISC_LTOFF64                       = 96
	DR_PARISC_LTOFF_FPTR14DR                = 124
	DR_PARISC_LTOFF_FPTR14R                 = 62
	DR_PARISC_LTOFF_FPTR14WR                = 123
	DR_PARISC_LTOFF_FPTR16DF                = 127
	DR_PARISC_LTOFF_FPTR16F                 = 125
	DR_PARISC_LTOFF_FPTR16WF                = 126
	DR_PARISC_LTOFF_FPTR21L                 = 58
	DR_PARISC_LTOFF_FPTR32                  = 57
	DR_PARISC_LTOFF_FPTR64                  = 120
	DR_PARISC_LTOFF_TP14DR                  = 228
	DR_PARISC_LTOFF_TP14F                   = 167
	DR_PARISC_LTOFF_TP14R                   = 166
	DR_PARISC_LTOFF_TP14WR                  = 227
	DR_PARISC_LTOFF_TP16DF                  = 231
	DR_PARISC_LTOFF_TP16F                   = 229
	DR_PARISC_LTOFF_TP16WF                  = 230
	DR_PARISC_LTOFF_TP21L                   = 162
	DR_PARISC_LTOFF_TP64                    = 224
	DR_PARISC_NONE                          = 0
	DR_PARISC_PCREL14DR                     = 76
	DR_PARISC_PCREL14R                      = 14
	DR_PARISC_PCREL14WR                     = 75
	DR_PARISC_PCREL16DF                     = 79
	DR_PARISC_PCREL16F                      = 77
	DR_PARISC_PCREL16WF                     = 78
	DR_PARISC_PCREL17F                      = 12
	DR_PARISC_PCREL17R                      = 11
	DR_PARISC_PCREL21L                      = 10
	DR_PARISC_PCREL22F                      = 74
	DR_PARISC_PCREL32                       = 9
	DR_PARISC_PCREL64                       = 72
	DR_PARISC_PLABEL14R                     = 70
	DR_PARISC_PLABEL21L                     = 66
	DR_PARISC_PLABEL32                      = 65
	DR_PARISC_PLTOFF14DR                    = 116
	DR_PARISC_PLTOFF14R                     = 54
	DR_PARISC_PLTOFF14WR                    = 115
	DR_PARISC_PLTOFF16DF                    = 119
	DR_PARISC_PLTOFF16F                     = 117
	DR_PARISC_PLTOFF16WF                    = 118
	DR_PARISC_PLTOFF21L                     = 50
	DR_PARISC_SECREL32                      = 41
	DR_PARISC_SECREL64                      = 104
	DR_PARISC_SEGBASE                       = 48
	DR_PARISC_SEGREL32                      = 49
	DR_PARISC_SEGREL64                      = 112
	DR_PARISC_TLS_DTPMOD32                  = 242
	DR_PARISC_TLS_DTPMOD64                  = 243
	DR_PARISC_TLS_DTPOFF32                  = 244
	DR_PARISC_TLS_DTPOFF64                  = 245
	DR_PARISC_TLS_GD14R                     = 235
	DR_PARISC_TLS_GD21L                     = 234
	DR_PARISC_TLS_GDCALL                    = 236
	DR_PARISC_TLS_IE14R                     = 166
	DR_PARISC_TLS_IE21L                     = 162
	DR_PARISC_TLS_LDM14R                    = 238
	DR_PARISC_TLS_LDM21L                    = 237
	DR_PARISC_TLS_LDMCALL                   = 239
	DR_PARISC_TLS_LDO14R                    = 241
	DR_PARISC_TLS_LDO21L                    = 240
	DR_PARISC_TLS_LE14R                     = 158
	DR_PARISC_TLS_LE21L                     = 154
	DR_PARISC_TLS_TPREL32                   = 153
	DR_PARISC_TLS_TPREL64                   = 216
	DR_PARISC_TPREL14DR                     = 220
	DR_PARISC_TPREL14R                      = 158
	DR_PARISC_TPREL14WR                     = 219
	DR_PARISC_TPREL16DF                     = 223
	DR_PARISC_TPREL16F                      = 221
	DR_PARISC_TPREL16WF                     = 222
	DR_PARISC_TPREL21L                      = 154
	DR_PARISC_TPREL32                       = 153
	DR_PARISC_TPREL64                       = 216
	DR_PPC64_ADDR14                         = 7
	DR_PPC64_ADDR14_BRNTAKEN                = 9
	DR_PPC64_ADDR14_BRTAKEN                 = 8
	DR_PPC64_ADDR16                         = 3
	DR_PPC64_ADDR16_DS                      = 56
	DR_PPC64_ADDR16_HA                      = 6
	DR_PPC64_ADDR16_HI                      = 5
	DR_PPC64_ADDR16_HIGH                    = 110
	DR_PPC64_ADDR16_HIGHA                   = 111
	DR_PPC64_ADDR16_HIGHER                  = 39
	DR_PPC64_ADDR16_HIGHERA                 = 40
	DR_PPC64_ADDR16_HIGHEST                 = 41
	DR_PPC64_ADDR16_HIGHESTA                = 42
	DR_PPC64_ADDR16_LO                      = 4
	DR_PPC64_ADDR16_LO_DS                   = 57
	DR_PPC64_ADDR24                         = 2
	DR_PPC64_ADDR30                         = 37
	DR_PPC64_ADDR32                         = 1
	DR_PPC64_ADDR64                         = 38
	DR_PPC64_COPY                           = 19
	DR_PPC64_DTPMOD64                       = 68
	DR_PPC64_DTPREL16                       = 74
	DR_PPC64_DTPREL16_DS                    = 101
	DR_PPC64_DTPREL16_HA                    = 77
	DR_PPC64_DTPREL16_HI                    = 76
	DR_PPC64_DTPREL16_HIGH                  = 114
	DR_PPC64_DTPREL16_HIGHA                 = 115
	DR_PPC64_DTPREL16_HIGHER                = 103
	DR_PPC64_DTPREL16_HIGHERA               = 104
	DR_PPC64_DTPREL16_HIGHEST               = 105
	DR_PPC64_DTPREL16_HIGHESTA              = 106
	DR_PPC64_DTPREL16_LO                    = 75
	DR_PPC64_DTPREL16_LO_DS                 = 102
	DR_PPC64_DTPREL64                       = 78
	DR_PPC64_GLOB_DAT                       = 20
	DR_PPC64_GOT16                          = 14
	DR_PPC64_GOT16_DS                       = 58
	DR_PPC64_GOT16_HA                       = 17
	DR_PPC64_GOT16_HI                       = 16
	DR_PPC64_GOT16_LO                       = 15
	DR_PPC64_GOT16_LO_DS                    = 59
	DR_PPC64_GOT_DTPREL16_DS                = 91
	DR_PPC64_GOT_DTPREL16_HA                = 94
	DR_PPC64_GOT_DTPREL16_HI                = 93
	DR_PPC64_GOT_DTPREL16_LO_DS             = 92
	DR_PPC64_GOT_TLSGD16                    = 79
	DR_PPC64_GOT_TLSGD16_HA                 = 82
	DR_PPC64_GOT_TLSGD16_HI                 = 81
	DR_PPC64_GOT_TLSGD16_LO                 = 80
	DR_PPC64_GOT_TLSLD16                    = 83
	DR_PPC64_GOT_TLSLD16_HA                 = 86
	DR_PPC64_GOT_TLSLD16_HI                 = 85
	DR_PPC64_GOT_TLSLD16_LO                 = 84
	DR_PPC64_GOT_TPREL16_DS                 = 87
	DR_PPC64_GOT_TPREL16_HA                 = 90
	DR_PPC64_GOT_TPREL16_HI                 = 89
	DR_PPC64_GOT_TPREL16_LO_DS              = 88
	DR_PPC64_IRELATIVE                      = 248
	DR_PPC64_JMP_IREL                       = 247
	DR_PPC64_JMP_SLOT                       = 21
	DR_PPC64_NONE                           = 0
	DR_PPC64_PLT16_HA                       = 31
	DR_PPC64_PLT16_HI                       = 30
	DR_PPC64_PLT16_LO                       = 29
	DR_PPC64_PLT16_LO_DS                    = 60
	DR_PPC64_PLT32                          = 27
	DR_PPC64_PLT64                          = 45
	DR_PPC64_PLTGOT16                       = 52
	DR_PPC64_PLTGOT16_DS                    = 65
	DR_PPC64_PLTGOT16_HA                    = 55
	DR_PPC64_PLTGOT16_HI                    = 54
	DR_PPC64_PLTGOT16_LO                    = 53
	DR_PPC64_PLTGOT16_LO_DS                 = 66
	DR_PPC64_PLTREL32                       = 28
	DR_PPC64_PLTREL64                       = 46
	DR_PPC64_REL14                          = 11
	DR_PPC64_REL14_BRNTAKEN                 = 13
	DR_PPC64_REL14_BRTAKEN                  = 12
	DR_PPC64_REL16                          = 249
	DR_PPC64_REL16_HA                       = 252
	DR_PPC64_REL16_HI                       = 251
	DR_PPC64_REL16_LO                       = 250
	DR_PPC64_REL24                          = 10
	DR_PPC64_REL32                          = 26
	DR_PPC64_REL64                          = 44
	DR_PPC64_RELATIVE                       = 22
	DR_PPC64_SECTOFF                        = 33
	DR_PPC64_SECTOFF_DS                     = 61
	DR_PPC64_SECTOFF_HA                     = 36
	DR_PPC64_SECTOFF_HI                     = 35
	DR_PPC64_SECTOFF_LO                     = 34
	DR_PPC64_SECTOFF_LO_DS                  = 62
	DR_PPC64_TLS                            = 67
	DR_PPC64_TLSGD                          = 107
	DR_PPC64_TLSLD                          = 108
	DR_PPC64_TOC                            = 51
	DR_PPC64_TOC16                          = 47
	DR_PPC64_TOC16_DS                       = 63
	DR_PPC64_TOC16_HA                       = 50
	DR_PPC64_TOC16_HI                       = 49
	DR_PPC64_TOC16_LO                       = 48
	DR_PPC64_TOC16_LO_DS                    = 64
	DR_PPC64_TOCSAVE                        = 109
	DR_PPC64_TPREL16                        = 69
	DR_PPC64_TPREL16_DS                     = 95
	DR_PPC64_TPREL16_HA                     = 72
	DR_PPC64_TPREL16_HI                     = 71
	DR_PPC64_TPREL16_HIGH                   = 112
	DR_PPC64_TPREL16_HIGHA                  = 113
	DR_PPC64_TPREL16_HIGHER                 = 97
	DR_PPC64_TPREL16_HIGHERA                = 98
	DR_PPC64_TPREL16_HIGHEST                = 99
	DR_PPC64_TPREL16_HIGHESTA               = 100
	DR_PPC64_TPREL16_LO                     = 70
	DR_PPC64_TPREL16_LO_DS                  = 96
	DR_PPC64_TPREL64                        = 73
	DR_PPC64_UADDR16                        = 25
	DR_PPC64_UADDR32                        = 24
	DR_PPC64_UADDR64                        = 43
	DR_PPC_ADDR14                           = 7
	DR_PPC_ADDR14_BRNTAKEN                  = 9
	DR_PPC_ADDR14_BRTAKEN                   = 8
	DR_PPC_ADDR16                           = 3
	DR_PPC_ADDR16_HA                        = 6
	DR_PPC_ADDR16_HI                        = 5
	DR_PPC_ADDR16_LO                        = 4
	DR_PPC_ADDR24                           = 2
	DR_PPC_ADDR32                           = 1
	DR_PPC_COPY                             = 19
	DR_PPC_DIAB_RELSDA_HA                   = 185
	DR_PPC_DIAB_RELSDA_HI                   = 184
	DR_PPC_DIAB_RELSDA_LO                   = 183
	DR_PPC_DIAB_SDA21_HA                    = 182
	DR_PPC_DIAB_SDA21_HI                    = 181
	DR_PPC_DIAB_SDA21_LO                    = 180
	DR_PPC_DTPMOD32                         = 68
	DR_PPC_DTPREL16                         = 74
	DR_PPC_DTPREL16_HA                      = 77
	DR_PPC_DTPREL16_HI                      = 76
	DR_PPC_DTPREL16_LO                      = 75
	DR_PPC_DTPREL32                         = 78
	DR_PPC_EMB_BIT_FLD                      = 115
	DR_PPC_EMB_MRKREF                       = 110
	DR_PPC_EMB_NADDR16                      = 102
	DR_PPC_EMB_NADDR16_HA                   = 105
	DR_PPC_EMB_NADDR16_HI                   = 104
	DR_PPC_EMB_NADDR16_LO                   = 103
	DR_PPC_EMB_NADDR32                      = 101
	DR_PPC_EMB_RELSDA                       = 116
	DR_PPC_EMB_RELSEC16                     = 111
	DR_PPC_EMB_RELST_HA                     = 114
	DR_PPC_EMB_RELST_HI                     = 113
	DR_PPC_EMB_RELST_LO                     = 112
	DR_PPC_EMB_SDA21                        = 109
	DR_PPC_EMB_SDA2I16                      = 107
	DR_PPC_EMB_SDA2REL                      = 108
	DR_PPC_EMB_SDAI16                       = 106
	DR_PPC_GLOB_DAT                         = 20
	DR_PPC_GOT16                            = 14
	DR_PPC_GOT16_HA                         = 17
	DR_PPC_GOT16_HI                         = 16
	DR_PPC_GOT16_LO                         = 15
	DR_PPC_GOT_DTPREL16                     = 91
	DR_PPC_GOT_DTPREL16_HA                  = 94
	DR_PPC_GOT_DTPREL16_HI                  = 93
	DR_PPC_GOT_DTPREL16_LO                  = 92
	DR_PPC_GOT_TLSGD16                      = 79
	DR_PPC_GOT_TLSGD16_HA                   = 82
	DR_PPC_GOT_TLSGD16_HI                   = 81
	DR_PPC_GOT_TLSGD16_LO                   = 80
	DR_PPC_GOT_TLSLD16                      = 83
	DR_PPC_GOT_TLSLD16_HA                   = 86
	DR_PPC_GOT_TLSLD16_HI                   = 85
	DR_PPC_GOT_TLSLD16_LO                   = 84
	DR_PPC_GOT_TPREL16                      = 87
	DR_PPC_GOT_TPREL16_HA                   = 90
	DR_PPC_GOT_TPREL16_HI                   = 89
	DR_PPC_GOT_TPREL16_LO                   = 88
	DR_PPC_IRELATIVE                        = 248
	DR_PPC_JMP_SLOT                         = 21
	DR_PPC_LOCAL24PC                        = 23
	DR_PPC_NONE                             = 0
	DR_PPC_PLT16_HA                         = 31
	DR_PPC_PLT16_HI                         = 30
	DR_PPC_PLT16_LO                         = 29
	DR_PPC_PLT32                            = 27
	DR_PPC_PLTREL24                         = 18
	DR_PPC_PLTREL32                         = 28
	DR_PPC_REL14                            = 11
	DR_PPC_REL14_BRNTAKEN                   = 13
	DR_PPC_REL14_BRTAKEN                    = 12
	DR_PPC_REL16                            = 249
	DR_PPC_REL16_HA                         = 252
	DR_PPC_REL16_HI                         = 251
	DR_PPC_REL16_LO                         = 250
	DR_PPC_REL24                            = 10
	DR_PPC_REL32                            = 26
	DR_PPC_RELATIVE                         = 22
	DR_PPC_SDAREL16                         = 32
	DR_PPC_SECTOFF                          = 33
	DR_PPC_SECTOFF_HA                       = 36
	DR_PPC_SECTOFF_HI                       = 35
	DR_PPC_SECTOFF_LO                       = 34
	DR_PPC_TLS                              = 67
	DR_PPC_TLSGD                            = 95
	DR_PPC_TLSLD                            = 96
	DR_PPC_TOC16                            = 255
	DR_PPC_TPREL16                          = 69
	DR_PPC_TPREL16_HA                       = 72
	DR_PPC_TPREL16_HI                       = 71
	DR_PPC_TPREL16_LO                       = 70
	DR_PPC_TPREL32                          = 73
	DR_PPC_UADDR16                          = 25
	DR_PPC_UADDR32                          = 24
	DR_SH_ALIGN                             = 29
	DR_SH_CODE                              = 30
	DR_SH_COPY                              = 162
	DR_SH_COUNT                             = 28
	DR_SH_DATA                              = 31
	DR_SH_DIR32                             = 1
	DR_SH_DIR8BP                            = 7
	DR_SH_DIR8L                             = 9
	DR_SH_DIR8W                             = 8
	DR_SH_DIR8WPL                           = 5
	DR_SH_DIR8WPN                           = 3
	DR_SH_DIR8WPZ                           = 6
	DR_SH_FUNCDESC                          = 207
	DR_SH_FUNCDESC_VALUE                    = 208
	DR_SH_GLOB_DAT                          = 163
	DR_SH_GNU_VTENTRY                       = 35
	DR_SH_GNU_VTINHERIT                     = 34
	DR_SH_GOT20                             = 201
	DR_SH_GOT32                             = 160
	DR_SH_GOTFUNCDESC                       = 203
	DR_SH_GOTFUNCDEST20                     = 204
	DR_SH_GOTOFF                            = 166
	DR_SH_GOTOFF20                          = 202
	DR_SH_GOTOFFFUNCDESC                    = 205
	DR_SH_GOTOFFFUNCDEST20                  = 206
	DR_SH_GOTPC                             = 167
	DR_SH_IND12W                            = 4
	DR_SH_JMP_SLOT                          = 164
	DR_SH_LABEL                             = 32
	DR_SH_NONE                              = 0
	DR_SH_NUM                               = 256
	DR_SH_PLT32                             = 161
	DR_SH_REL32                             = 2
	DR_SH_RELATIVE                          = 165
	DR_SH_SWITCH16                          = 25
	DR_SH_SWITCH32                          = 26
	DR_SH_SWITCH8                           = 33
	DR_SH_TLS_DTPMOD32                      = 149
	DR_SH_TLS_DTPOFF32                      = 150
	DR_SH_TLS_GD_32                         = 144
	DR_SH_TLS_IE_32                         = 147
	DR_SH_TLS_LDO_32                        = 146
	DR_SH_TLS_LD_32                         = 145
	DR_SH_TLS_LE_32                         = 148
	DR_SH_TLS_TPOFF32                       = 151
	DR_SH_USES                              = 27
	DR_SPARC_10                             = 30
	DR_SPARC_11                             = 31
	DR_SPARC_13                             = 11
	DR_SPARC_16                             = 2
	DR_SPARC_22                             = 10
	DR_SPARC_32                             = 3
	DR_SPARC_5                              = 44
	DR_SPARC_6                              = 45
	DR_SPARC_64                             = 32
	DR_SPARC_7                              = 43
	DR_SPARC_8                              = 1
	DR_SPARC_COPY                           = 19
	DR_SPARC_DISP16                         = 5
	DR_SPARC_DISP32                         = 6
	DR_SPARC_DISP64                         = 46
	DR_SPARC_DISP8                          = 4
	DR_SPARC_GLOB_DAT                       = 20
	DR_SPARC_GLOB_JMP                       = 42
	DR_SPARC_GNU_VTENTRY                    = 251
	DR_SPARC_GNU_VTINHERIT                  = 250
	DR_SPARC_GOT10                          = 13
	DR_SPARC_GOT13                          = 14
	DR_SPARC_GOT22                          = 15
	DR_SPARC_GOTDATA_HIX22                  = 80
	DR_SPARC_GOTDATA_LOX10                  = 81
	DR_SPARC_GOTDATA_OP                     = 84
	DR_SPARC_GOTDATA_OP_HIX22               = 82
	DR_SPARC_GOTDATA_OP_LOX10               = 83
	DR_SPARC_H34                            = 85
	DR_SPARC_H44                            = 50
	DR_SPARC_HH22                           = 34
	DR_SPARC_HI22                           = 9
	DR_SPARC_HIPLT22                        = 25
	DR_SPARC_HIX22                          = 48
	DR_SPARC_HM10                           = 35
	DR_SPARC_JMP_SLOT                       = 21
	DR_SPARC_L44                            = 52
	DR_SPARC_LM22                           = 36
	DR_SPARC_LO10                           = 12
	DR_SPARC_LOPLT10                        = 26
	DR_SPARC_LOX10                          = 49
	DR_SPARC_M44                            = 51
	DR_SPARC_NONE                           = 0
	DR_SPARC_NUM                            = 253
	DR_SPARC_OLO10                          = 33
	DR_SPARC_PC10                           = 16
	DR_SPARC_PC22                           = 17
	DR_SPARC_PCPLT10                        = 29
	DR_SPARC_PCPLT22                        = 28
	DR_SPARC_PCPLT32                        = 27
	DR_SPARC_PC_HH22                        = 37
	DR_SPARC_PC_HM10                        = 38
	DR_SPARC_PC_LM22                        = 39
	DR_SPARC_PLT32                          = 24
	DR_SPARC_PLT64                          = 47
	DR_SPARC_REGISTER                       = 53
	DR_SPARC_RELATIVE                       = 22
	DR_SPARC_REV32                          = 252
	DR_SPARC_SIZE32                         = 86
	DR_SPARC_SIZE64                         = 87
	DR_SPARC_TLS_DTPMOD32                   = 74
	DR_SPARC_TLS_DTPMOD64                   = 75
	DR_SPARC_TLS_DTPOFF32                   = 76
	DR_SPARC_TLS_DTPOFF64                   = 77
	DR_SPARC_TLS_GD_ADD                     = 58
	DR_SPARC_TLS_GD_CALL                    = 59
	DR_SPARC_TLS_GD_HI22                    = 56
	DR_SPARC_TLS_GD_LO10                    = 57
	DR_SPARC_TLS_IE_ADD                     = 71
	DR_SPARC_TLS_IE_HI22                    = 67
	DR_SPARC_TLS_IE_LD                      = 69
	DR_SPARC_TLS_IE_LDX                     = 70
	DR_SPARC_TLS_IE_LO10                    = 68
	DR_SPARC_TLS_LDM_ADD                    = 62
	DR_SPARC_TLS_LDM_CALL                   = 63
	DR_SPARC_TLS_LDM_HI22                   = 60
	DR_SPARC_TLS_LDM_LO10                   = 61
	DR_SPARC_TLS_LDO_ADD                    = 66
	DR_SPARC_TLS_LDO_HIX22                  = 64
	DR_SPARC_TLS_LDO_LOX10                  = 65
	DR_SPARC_TLS_LE_HIX22                   = 72
	DR_SPARC_TLS_LE_LOX10                   = 73
	DR_SPARC_TLS_TPOFF32                    = 78
	DR_SPARC_TLS_TPOFF64                    = 79
	DR_SPARC_UA16                           = 55
	DR_SPARC_UA32                           = 23
	DR_SPARC_UA64                           = 54
	DR_SPARC_WDISP16                        = 40
	DR_SPARC_WDISP19                        = 41
	DR_SPARC_WDISP22                        = 8
	DR_SPARC_WDISP30                        = 7
	DR_SPARC_WPLT30                         = 18
	DR_X86_64_16                            = 12
	DR_X86_64_32                            = 10
	DR_X86_64_32S                           = 11
	DR_X86_64_64                            = 1
	DR_X86_64_8                             = 14
	DR_X86_64_COPY                          = 5
	DR_X86_64_DTPMOD64                      = 16
	DR_X86_64_DTPOFF32                      = 21
	DR_X86_64_DTPOFF64                      = 17
	DR_X86_64_GLOB_DAT                      = 6
	DR_X86_64_GOT32                         = 3
	DR_X86_64_GOT64                         = 27
	DR_X86_64_GOTOFF64                      = 25
	DR_X86_64_GOTPC32                       = 26
	DR_X86_64_GOTPC32_TLSDESC               = 34
	DR_X86_64_GOTPC64                       = 29
	DR_X86_64_GOTPCREL                      = 9
	DR_X86_64_GOTPCREL64                    = 28
	DR_X86_64_GOTPCRELX                     = 41
	DR_X86_64_GOTPLT64                      = 30
	DR_X86_64_GOTTPOFF                      = 22
	DR_X86_64_IRELATIVE                     = 37
	DR_X86_64_JUMP_SLOT                     = 7
	DR_X86_64_NONE                          = 0
	DR_X86_64_NUM                           = 43
	DR_X86_64_PC16                          = 13
	DR_X86_64_PC32                          = 2
	DR_X86_64_PC64                          = 24
	DR_X86_64_PC8                           = 15
	DR_X86_64_PLT32                         = 4
	DR_X86_64_PLTOFF64                      = 31
	DR_X86_64_RELATIVE                      = 8
	DR_X86_64_RELATIVE64                    = 38
	DR_X86_64_REX_GOTPCRELX                 = 42
	DR_X86_64_SIZE32                        = 32
	DR_X86_64_SIZE64                        = 33
	DR_X86_64_TLSDESC                       = 36
	DR_X86_64_TLSDESC_CALL                  = 35
	DR_X86_64_TLSGD                         = 19
	DR_X86_64_TLSLD                         = 20
	DR_X86_64_TPOFF32                       = 23
	DR_X86_64_TPOFF64                       = 18
	DSA                                     = 194
	DSALT_MAX                               = 8
	DSA_NOCLDSTOP                           = 1
	DSA_NOCLDWAIT                           = 2
	DSA_NODEFER                             = 1073741824
	DSA_NOMASK                              = 1073741824
	DSA_ONESHOT                             = 2147483648
	DSA_ONSTACK                             = 134217728
	DSA_RESETHAND                           = 2147483648
	DSA_RESTART                             = 268435456
	DSA_RESTORER                            = 67108864
	DSA_SIGINFO                             = 4
	DSB                                     = 244
	DSCHAR_MAX                              = 127
	DSCHAR_MIN                              = -128
	DSCHED_BATCH                            = 3
	DSCHED_DEADLINE                         = 6
	DSCHED_FIFO                             = 1
	DSCHED_IDLE                             = 5
	DSCHED_OTHER                            = 0
	DSCHED_RESET_ON_FORK                    = 1073741824
	DSCHED_RR                               = 2
	DSCM_CREDENTIALS                        = 2
	DSCM_RIGHTS                             = 1
	DSCM_TIMESTAMP                          = 29
	DSCM_TIMESTAMPING                       = 37
	DSCM_TIMESTAMPING_OPT_STATS             = 54
	DSCM_TIMESTAMPING_PKTINFO               = 58
	DSCM_TIMESTAMPNS                        = 35
	DSCM_WIFI_STATUS                        = 41
	DSCNd16                                 = "hd"
	DSCNd32                                 = "d"
	DSCNd8                                  = "hhd"
	DSCNdFAST16                             = "d"
	DSCNdFAST32                             = "d"
	DSCNdFAST8                              = "hhd"
	DSCNdLEAST16                            = "hd"
	DSCNdLEAST32                            = "d"
	DSCNdLEAST8                             = "hhd"
	DSCNi16                                 = "hi"
	DSCNi32                                 = "i"
	DSCNi8                                  = "hhi"
	DSCNiFAST16                             = "i"
	DSCNiFAST32                             = "i"
	DSCNiFAST8                              = "hhi"
	DSCNiLEAST16                            = "hi"
	DSCNiLEAST32                            = "i"
	DSCNiLEAST8                             = "hhi"
	DSCNo16                                 = "ho"
	DSCNo32                                 = "o"
	DSCNo8                                  = "hho"
	DSCNoFAST16                             = "o"
	DSCNoFAST32                             = "o"
	DSCNoFAST8                              = "hho"
	DSCNoLEAST16                            = "ho"
	DSCNoLEAST32                            = "o"
	DSCNoLEAST8                             = "hho"
	DSCNu16                                 = "hu"
	DSCNu32                                 = "u"
	DSCNu8                                  = "hhu"
	DSCNuFAST16                             = "u"
	DSCNuFAST32                             = "u"
	DSCNuFAST8                              = "hhu"
	DSCNuLEAST16                            = "hu"
	DSCNuLEAST32                            = "u"
	DSCNuLEAST8                             = "hhu"
	DSCNx16                                 = "hx"
	DSCNx32                                 = "x"
	DSCNx8                                  = "hhx"
	DSCNxFAST16                             = "x"
	DSCNxFAST32                             = "x"
	DSCNxFAST8                              = "hhx"
	DSCNxLEAST16                            = "hx"
	DSCNxLEAST32                            = "x"
	DSCNxLEAST8                             = "hhx"
	DSEEK_CUR                               = 1
	DSEEK_END                               = 2
	DSEEK_SET                               = 0
	DSEGV_ACCERR                            = 2
	DSEGV_BNDERR                            = 3
	DSEGV_MAPERR                            = 1
	DSEGV_PKUERR                            = 4
	DSELFMAG                                = 4
	DSEM_INFO                               = 19
	DSEM_NSEMS_MAX                          = 256
	DSEM_STAT                               = 18
	DSEM_STAT_ANY                           = 20
	DSEM_UNDO                               = 4096
	DSEM_VALUE_MAX                          = 2147483647
	DSERVFAIL                               = 0
	DSETALL                                 = 17
	DSETVAL                                 = 16
	DSFD_CLOEXEC                            = 524288
	DSFD_NONBLOCK                           = 2048
	DSHADOW                                 = "/etc/shadow"
	DSHF_ALLOC                              = 2
	DSHF_ALPHA_GPREL                        = 268435456
	DSHF_ARM_COMDEF                         = 2147483648
	DSHF_ARM_ENTRYSECT                      = 268435456
	DSHF_COMPRESSED                         = 2048
	DSHF_EXCLUDE                            = 2147483648
	DSHF_EXECINSTR                          = 4
	DSHF_GROUP                              = 512
	DSHF_IA_64_NORECOV                      = 536870912
	DSHF_IA_64_SHORT                        = 268435456
	DSHF_INFO_LINK                          = 64
	DSHF_LINK_ORDER                         = 128
	DSHF_MASKOS                             = 267386880
	DSHF_MASKPROC                           = 4026531840
	DSHF_MERGE                              = 16
	DSHF_MIPS_ADDR                          = 1073741824
	DSHF_MIPS_GPREL                         = 268435456
	DSHF_MIPS_LOCAL                         = 67108864
	DSHF_MIPS_MERGE                         = 536870912
	DSHF_MIPS_NAMES                         = 33554432
	DSHF_MIPS_NODUPE                        = 16777216
	DSHF_MIPS_NOSTRIP                       = 134217728
	DSHF_MIPS_STRINGS                       = 2147483648
	DSHF_ORDERED                            = 1073741824
	DSHF_OS_NONCONFORMING                   = 256
	DSHF_PARISC_HUGE                        = 1073741824
	DSHF_PARISC_SBP                         = 2147483648
	DSHF_PARISC_SHORT                       = 536870912
	DSHF_STRINGS                            = 32
	DSHF_TLS                                = 1024
	DSHF_WRITE                              = 1
	DSHIFT_JIS                              = 209
	DSHMLBA                                 = 4096
	DSHM_DEST                               = 512
	DSHM_EXEC                               = 32768
	DSHM_HUGETLB                            = 2048
	DSHM_HUGE_16GB                          = 2281701376
	DSHM_HUGE_16MB                          = 1610612736
	DSHM_HUGE_1GB                           = 2013265920
	DSHM_HUGE_1MB                           = 1342177280
	DSHM_HUGE_256MB                         = 1879048192
	DSHM_HUGE_2GB                           = 2080374784
	DSHM_HUGE_2MB                           = 1409286144
	DSHM_HUGE_512KB                         = 1275068416
	DSHM_HUGE_64KB                          = 1073741824
	DSHM_HUGE_8MB                           = 1543503872
	DSHM_HUGE_MASK                          = 63
	DSHM_HUGE_SHIFT                         = 26
	DSHM_INFO                               = 14
	DSHM_LOCK                               = 11
	DSHM_LOCKED                             = 1024
	DSHM_NORESERVE                          = 4096
	DSHM_R                                  = 256
	DSHM_RDONLY                             = 4096
	DSHM_REMAP                              = 16384
	DSHM_RND                                = 8192
	DSHM_STAT                               = 13
	DSHM_STAT_ANY                           = 15
	DSHM_UNLOCK                             = 12
	DSHM_W                                  = 128
	DSHN_ABS                                = 65521
	DSHN_AFTER                              = 65281
	DSHN_BEFORE                             = 65280
	DSHN_COMMON                             = 65522
	DSHN_HIOS                               = 65343
	DSHN_HIPROC                             = 65311
	DSHN_HIRESERVE                          = 65535
	DSHN_LOOS                               = 65312
	DSHN_LOPROC                             = 65280
	DSHN_LORESERVE                          = 65280
	DSHN_MIPS_ACOMMON                       = 65280
	DSHN_MIPS_DATA                          = 65282
	DSHN_MIPS_SCOMMON                       = 65283
	DSHN_MIPS_SUNDEFINED                    = 65284
	DSHN_MIPS_TEXT                          = 65281
	DSHN_PARISC_ANSI_COMMON                 = 65280
	DSHN_PARISC_HUGE_COMMON                 = 65281
	DSHN_UNDEF                              = 0
	DSHN_XINDEX                             = 65535
	DSHORT_INODE                            = 16777216
	DSHRT_MAX                               = 32767
	DSHRT_MIN                               = -32768
	DSHT_ALPHA_DEBUG                        = 1879048193
	DSHT_ALPHA_REGINFO                      = 1879048194
	DSHT_ARM_ATTRIBUTES                     = 1879048195
	DSHT_ARM_EXIDX                          = 1879048193
	DSHT_ARM_PREEMPTMAP                     = 1879048194
	DSHT_CHECKSUM                           = 1879048184
	DSHT_DYNAMIC                            = 6
	DSHT_DYNSYM                             = 11
	DSHT_FINI_ARRAY                         = 15
	DSHT_GNU_ATTRIBUTES                     = 1879048181
	DSHT_GNU_HASH                           = 1879048182
	DSHT_GNU_LIBLIST                        = 1879048183
	DSHT_GNU_verdef                         = 1879048189
	DSHT_GNU_verneed                        = 1879048190
	DSHT_GNU_versym                         = 1879048191
	DSHT_GROUP                              = 17
	DSHT_HASH                               = 5
	DSHT_HIOS                               = 1879048191
	DSHT_HIPROC                             = 2147483647
	DSHT_HISUNW                             = 1879048191
	DSHT_HIUSER                             = 2415919103
	DSHT_IA_64_EXT                          = 1879048192
	DSHT_IA_64_UNWIND                       = 1879048193
	DSHT_INIT_ARRAY                         = 14
	DSHT_LOOS                               = 1610612736
	DSHT_LOPROC                             = 1879048192
	DSHT_LOSUNW                             = 1879048186
	DSHT_LOUSER                             = 2147483648
	DSHT_MIPS_AUXSYM                        = 1879048214
	DSHT_MIPS_CONFLICT                      = 1879048194
	DSHT_MIPS_CONTENT                       = 1879048204
	DSHT_MIPS_DEBUG                         = 1879048197
	DSHT_MIPS_DELTACLASS                    = 1879048221
	DSHT_MIPS_DELTADECL                     = 1879048223
	DSHT_MIPS_DELTAINST                     = 1879048220
	DSHT_MIPS_DELTASYM                      = 1879048219
	DSHT_MIPS_DENSE                         = 1879048211
	DSHT_MIPS_DWARF                         = 1879048222
	DSHT_MIPS_EH_REGION                     = 1879048231
	DSHT_MIPS_EVENTS                        = 1879048225
	DSHT_MIPS_EXTSYM                        = 1879048210
	DSHT_MIPS_FDESC                         = 1879048209
	DSHT_MIPS_GPTAB                         = 1879048195
	DSHT_MIPS_IFACE                         = 1879048203
	DSHT_MIPS_LIBLIST                       = 1879048192
	DSHT_MIPS_LINE                          = 1879048217
	DSHT_MIPS_LOCSTR                        = 1879048216
	DSHT_MIPS_LOCSYM                        = 1879048213
	DSHT_MIPS_MSYM                          = 1879048193
	DSHT_MIPS_OPTIONS                       = 1879048205
	DSHT_MIPS_OPTSYM                        = 1879048215
	DSHT_MIPS_PACKAGE                       = 1879048199
	DSHT_MIPS_PACKSYM                       = 1879048200
	DSHT_MIPS_PDESC                         = 1879048212
	DSHT_MIPS_PDR_EXCEPTION                 = 1879048233
	DSHT_MIPS_PIXIE                         = 1879048227
	DSHT_MIPS_REGINFO                       = 1879048198
	DSHT_MIPS_RELD                          = 1879048201
	DSHT_MIPS_RFDESC                        = 1879048218
	DSHT_MIPS_SHDR                          = 1879048208
	DSHT_MIPS_SYMBOL_LIB                    = 1879048224
	DSHT_MIPS_TRANSLATE                     = 1879048226
	DSHT_MIPS_UCODE                         = 1879048196
	DSHT_MIPS_WHIRL                         = 1879048230
	DSHT_MIPS_XLATE                         = 1879048228
	DSHT_MIPS_XLATE_DEBUG                   = 1879048229
	DSHT_MIPS_XLATE_OLD                     = 1879048232
	DSHT_NOBITS                             = 8
	DSHT_NOTE                               = 7
	DSHT_NULL                               = 0
	DSHT_NUM                                = 19
	DSHT_PARISC_DOC                         = 1879048194
	DSHT_PARISC_EXT                         = 1879048192
	DSHT_PARISC_UNWIND                      = 1879048193
	DSHT_PREINIT_ARRAY                      = 16
	DSHT_PROGBITS                           = 1
	DSHT_REL                                = 9
	DSHT_RELA                               = 4
	DSHT_SHLIB                              = 10
	DSHT_STRTAB                             = 3
	DSHT_SUNW_COMDAT                        = 1879048187
	DSHT_SUNW_move                          = 1879048186
	DSHT_SUNW_syminfo                       = 1879048188
	DSHT_SYMTAB                             = 2
	DSHT_SYMTAB_SHNDX                       = 18
	DSHUT_RD                                = 0
	DSHUT_RDWR                              = 2
	DSHUT_WR                                = 1
	DSIGABRT                                = 6
	DSIGALRM                                = 14
	DSIGBUS                                 = 7
	DSIGCANCEL                              = 33
	DSIGCHLD                                = 17
	DSIGCONT                                = 18
	DSIGEV_NONE                             = 1
	DSIGEV_SIGNAL                           = 0
	DSIGEV_THREAD                           = 2
	DSIGFPE                                 = 8
	DSIGHUP                                 = 1
	DSIGILL                                 = 4
	DSIGINT                                 = 2
	DSIGIO                                  = 29
	DSIGIOT                                 = 6
	DSIGKILL                                = 9
	DSIGPIPE                                = 13
	DSIGPOLL                                = 29
	DSIGPROF                                = 27
	DSIGPWR                                 = 30
	DSIGQUIT                                = 3
	DSIGSEGV                                = 11
	DSIGSTKFLT                              = 16
	DSIGSTKSZ                               = 8192
	DSIGSTOP                                = 19
	DSIGSYNCCALL                            = 34
	DSIGSYS                                 = 31
	DSIGTERM                                = 15
	DSIGTIMER                               = 32
	DSIGTRAP                                = 5
	DSIGTSTP                                = 20
	DSIGTTIN                                = 21
	DSIGTTOU                                = 22
	DSIGUNUSED                              = 31
	DSIGURG                                 = 23
	DSIGUSR1                                = 10
	DSIGUSR2                                = 12
	DSIGVTALRM                              = 26
	DSIGWINCH                               = 28
	DSIGXCPU                                = 24
	DSIGXFSZ                                = 25
	DSIG_ATOMIC_MAX                         = 2147483647
	DSIG_ATOMIC_MIN                         = -2147483648
	DSIG_BLOCK                              = 0
	DSIG_SETMASK                            = 2
	DSIG_UNBLOCK                            = 1
	DSIOCADDDLCI                            = 35200
	DSIOCADDMULTI                           = 35121
	DSIOCADDRT                              = 35083
	DSIOCATMARK                             = 35077
	DSIOCDARP                               = 35155
	DSIOCDELDLCI                            = 35201
	DSIOCDELMULTI                           = 35122
	DSIOCDELRT                              = 35084
	DSIOCDEVPRIVATE                         = 35312
	DSIOCDIFADDR                            = 35126
	DSIOCDRARP                              = 35168
	DSIOCGARP                               = 35156
	DSIOCGIFADDR                            = 35093
	DSIOCGIFBR                              = 35136
	DSIOCGIFBRDADDR                         = 35097
	DSIOCGIFCONF                            = 35090
	DSIOCGIFCOUNT                           = 35128
	DSIOCGIFDSTADDR                         = 35095
	DSIOCGIFENCAP                           = 35109
	DSIOCGIFFLAGS                           = 35091
	DSIOCGIFHWADDR                          = 35111
	DSIOCGIFINDEX                           = 35123
	DSIOCGIFMAP                             = 35184
	DSIOCGIFMEM                             = 35103
	DSIOCGIFMETRIC                          = 35101
	DSIOCGIFMTU                             = 35105
	DSIOCGIFNAME                            = 35088
	DSIOCGIFNETMASK                         = 35099
	DSIOCGIFPFLAGS                          = 35125
	DSIOCGIFSLAVE                           = 35113
	DSIOCGIFTXQLEN                          = 35138
	DSIOCGPGRP                              = 35076
	DSIOCGRARP                              = 35169
	DSIOCGSTAMP                             = 35078
	DSIOCGSTAMPNS                           = 35079
	DSIOCPROTOPRIVATE                       = 35296
	DSIOCRTMSG                              = 35085
	DSIOCSARP                               = 35157
	DSIOCSIFADDR                            = 35094
	DSIOCSIFBR                              = 35137
	DSIOCSIFBRDADDR                         = 35098
	DSIOCSIFDSTADDR                         = 35096
	DSIOCSIFENCAP                           = 35110
	DSIOCSIFFLAGS                           = 35092
	DSIOCSIFHWADDR                          = 35108
	DSIOCSIFHWBROADCAST                     = 35127
	DSIOCSIFLINK                            = 35089
	DSIOCSIFMAP                             = 35185
	DSIOCSIFMEM                             = 35104
	DSIOCSIFMETRIC                          = 35102
	DSIOCSIFMTU                             = 35106
	DSIOCSIFNAME                            = 35107
	DSIOCSIFNETMASK                         = 35100
	DSIOCSIFPFLAGS                          = 35124
	DSIOCSIFSLAVE                           = 35120
	DSIOCSIFTXQLEN                          = 35139
	DSIOCSPGRP                              = 35074
	DSIOCSRARP                              = 35170
	DSIOGIFINDEX                            = 35123
	DSIZE_L                                 = 2
	DSIZE_MAX                               = 18446744073709551615
	DSIZE_def                               = 0
	DSIZE_h                                 = -1
	DSIZE_hh                                = -2
	DSIZE_l                                 = 1
	DSIZE_ll                                = 3
	DSI_ASYNCIO                             = -4
	DSI_ASYNCNL                             = -60
	DSI_KERNEL                              = 128
	DSI_LOAD_SHIFT                          = 16
	DSI_MESGQ                               = -3
	DSI_QUEUE                               = -1
	DSI_SIGIO                               = -5
	DSI_TIMER                               = -2
	DSI_TKILL                               = -6
	DSI_USER                                = 0
	DSNDPIPE                                = 2
	DSNDZERO                                = 1
	DSOCK_CLOEXEC                           = 524288
	DSOCK_DCCP                              = 6
	DSOCK_DGRAM                             = 2
	DSOCK_NONBLOCK                          = 2048
	DSOCK_PACKET                            = 10
	DSOCK_RAW                               = 3
	DSOCK_RDM                               = 4
	DSOCK_SEQPACKET                         = 5
	DSOCK_STREAM                            = 1
	DSOL_AAL                                = 265
	DSOL_ALG                                = 279
	DSOL_ATM                                = 264
	DSOL_BLUETOOTH                          = 274
	DSOL_CAIF                               = 278
	DSOL_DCCP                               = 269
	DSOL_DECNET                             = 261
	DSOL_ICMPV6                             = 58
	DSOL_IP                                 = 0
	DSOL_IPV6                               = 41
	DSOL_IRDA                               = 266
	DSOL_IUCV                               = 277
	DSOL_KCM                                = 281
	DSOL_LLC                                = 268
	DSOL_NETBEUI                            = 267
	DSOL_NETLINK                            = 270
	DSOL_NFC                                = 280
	DSOL_PACKET                             = 263
	DSOL_PNPIPE                             = 275
	DSOL_PPPOL2TP                           = 273
	DSOL_RAW                                = 255
	DSOL_RDS                                = 276
	DSOL_RXRPC                              = 272
	DSOL_SOCKET                             = 1
	DSOL_TIPC                               = 271
	DSOL_TLS                                = 282
	DSOL_X25                                = 262
	DSOMAXCONN                              = 128
	DSO_ACCEPTCONN                          = 30
	DSO_ATTACH_BPF                          = 50
	DSO_ATTACH_FILTER                       = 26
	DSO_ATTACH_REUSEPORT_CBPF               = 51
	DSO_ATTACH_REUSEPORT_EBPF               = 52
	DSO_BINDTODEVICE                        = 25
	DSO_BPF_EXTENSIONS                      = 48
	DSO_BROADCAST                           = 6
	DSO_BSDCOMPAT                           = 14
	DSO_BUSY_POLL                           = 46
	DSO_CNX_ADVICE                          = 53
	DSO_COOKIE                              = 57
	DSO_DEBUG                               = 1
	DSO_DETACH_BPF                          = 27
	DSO_DETACH_FILTER                       = 27
	DSO_DOMAIN                              = 39
	DSO_DONTROUTE                           = 5
	DSO_ERROR                               = 4
	DSO_GET_FILTER                          = 26
	DSO_INCOMING_CPU                        = 49
	DSO_INCOMING_NAPI_ID                    = 56
	DSO_KEEPALIVE                           = 9
	DSO_LINGER                              = 13
	DSO_LOCK_FILTER                         = 44
	DSO_MARK                                = 36
	DSO_MAX_PACING_RATE                     = 47
	DSO_MEMINFO                             = 55
	DSO_NOFCS                               = 43
	DSO_NO_CHECK                            = 11
	DSO_OOBINLINE                           = 10
	DSO_PASSCRED                            = 16
	DSO_PASSSEC                             = 34
	DSO_PEEK_OFF                            = 42
	DSO_PEERCRED                            = 17
	DSO_PEERGROUPS                          = 59
	DSO_PEERNAME                            = 28
	DSO_PEERSEC                             = 31
	DSO_PRIORITY                            = 12
	DSO_PROTOCOL                            = 38
	DSO_RCVBUF                              = 8
	DSO_RCVBUFFORCE                         = 33
	DSO_RCVLOWAT                            = 18
	DSO_RCVTIMEO                            = 20
	DSO_REUSEADDR                           = 2
	DSO_REUSEPORT                           = 15
	DSO_RXQ_OVFL                            = 40
	DSO_SECURITY_AUTHENTICATION             = 22
	DSO_SECURITY_ENCRYPTION_NETWORK         = 24
	DSO_SECURITY_ENCRYPTION_TRANSPORT       = 23
	DSO_SELECT_ERR_QUEUE                    = 45
	DSO_SNDBUF                              = 7
	DSO_SNDBUFFORCE                         = 32
	DSO_SNDLOWAT                            = 19
	DSO_SNDTIMEO                            = 21
	DSO_TIMESTAMP                           = 29
	DSO_TIMESTAMPING                        = 37
	DSO_TIMESTAMPNS                         = 35
	DSO_TYPE                                = 3
	DSO_WIFI_STATUS                         = 41
	DSO_ZEROCOPY                            = 60
	DSPLICE_F_GIFT                          = 8
	DSPLICE_F_MORE                          = 4
	DSPLICE_F_MOVE                          = 1
	DSPLICE_F_NONBLOCK                      = 2
	DSPLIT                                  = 1.34217729e+08
	DSSIZE_MAX                              = 9223372036854775807
	DSS_AUTODISARM                          = 2147483648
	DSS_DISABLE                             = 2
	DSS_FLAG_BITS                           = 2147483648
	DSS_ONSTACK                             = 1
	DSTAR                                   = -5
	DSTATUS                                 = 0
	DSTA_CLK                                = 32768
	DSTA_CLOCKERR                           = 4096
	DSTA_DEL                                = 32
	DSTA_FLL                                = 8
	DSTA_FREQHOLD                           = 128
	DSTA_INS                                = 16
	DSTA_MODE                               = 16384
	DSTA_NANO                               = 8192
	DSTA_PLL                                = 1
	DSTA_PPSERROR                           = 2048
	DSTA_PPSFREQ                            = 2
	DSTA_PPSJITTER                          = 512
	DSTA_PPSSIGNAL                          = 256
	DSTA_PPSTIME                            = 4
	DSTA_PPSWANDER                          = 1024
	DSTA_RONLY                              = 65280
	DSTA_UNSYNC                             = 64
	DSTB_GLOBAL                             = 1
	DSTB_GNU_UNIQUE                         = 10
	DSTB_HIOS                               = 12
	DSTB_HIPROC                             = 15
	DSTB_LOCAL                              = 0
	DSTB_LOOS                               = 10
	DSTB_LOPROC                             = 13
	DSTB_MIPS_SPLIT_COMMON                  = 13
	DSTB_NUM                                = 3
	DSTB_WEAK                               = 2
	DSTDERR_FILENO                          = 2
	DSTDIN_FILENO                           = 0
	DSTDOUT_FILENO                          = 1
	DSTICKY_TIMEOUTS                        = 67108864
	DSTN_UNDEF                              = 0
	DSTO_ALPHA_NOPV                         = 128
	DSTO_ALPHA_STD_GPLOAD                   = 136
	DSTO_MIPS_DEFAULT                       = 0
	DSTO_MIPS_HIDDEN                        = 2
	DSTO_MIPS_INTERNAL                      = 1
	DSTO_MIPS_PLT                           = 8
	DSTO_MIPS_PROTECTED                     = 3
	DSTO_MIPS_SC_ALIGN_UNUSED               = 255
	DSTO_PPC64_LOCAL_BIT                    = 5
	DSTO_PPC64_LOCAL_MASK                   = 224
	DSTT_ARM_16BIT                          = 15
	DSTT_ARM_TFUNC                          = 13
	DSTT_COMMON                             = 5
	DSTT_FILE                               = 4
	DSTT_FUNC                               = 2
	DSTT_GNU_IFUNC                          = 10
	DSTT_HIOS                               = 12
	DSTT_HIPROC                             = 15
	DSTT_HP_OPAQUE                          = 11
	DSTT_HP_STUB                            = 12
	DSTT_LOOS                               = 10
	DSTT_LOPROC                             = 13
	DSTT_NOTYPE                             = 0
	DSTT_NUM                                = 7
	DSTT_OBJECT                             = 1
	DSTT_PARISC_MILLICODE                   = 13
	DSTT_SECTION                            = 3
	DSTT_SPARC_REGISTER                     = 13
	DSTT_TLS                                = 6
	DSTV_DEFAULT                            = 0
	DSTV_HIDDEN                             = 2
	DSTV_INTERNAL                           = 1
	DSTV_PROTECTED                          = 3
	DST_APPEND                              = 256
	DST_IMMUTABLE                           = 512
	DST_MANDLOCK                            = 64
	DST_NOATIME                             = 1024
	DST_NODEV                               = 4
	DST_NODIRATIME                          = 2048
	DST_NOEXEC                              = 8
	DST_NOSUID                              = 2
	DST_RDONLY                              = 1
	DST_RELATIME                            = 4096
	DST_SYNCHRONOUS                         = 16
	DST_WRITE                               = 128
	DSUBCMDMASK                             = 255
	DSUBCMDSHIFT                            = 8
	DSWAP_FLAG_DISCARD                      = 65536
	DSWAP_FLAG_PREFER                       = 32768
	DSWAP_FLAG_PRIO_MASK                    = 32767
	DSWAP_FLAG_PRIO_SHIFT                   = 0
	DSYMINFO_BT_LOWRESERVE                  = 65280
	DSYMINFO_BT_PARENT                      = 65534
	DSYMINFO_BT_SELF                        = 65535
	DSYMINFO_CURRENT                        = 1
	DSYMINFO_FLG_COPY                       = 4
	DSYMINFO_FLG_DIRECT                     = 1
	DSYMINFO_FLG_LAZYLOAD                   = 8
	DSYMINFO_FLG_PASSTHRU                   = 2
	DSYMINFO_NONE                           = 0
	DSYMINFO_NUM                            = 2
	DSYMLINK_MAX                            = 255
	DSYMLOOP_MAX                            = 40
	DSYNC_FILE_RANGE_WAIT_AFTER             = 4
	DSYNC_FILE_RANGE_WAIT_BEFORE            = 1
	DSYNC_FILE_RANGE_WRITE                  = 2
	DSYSCALL_MMAP2_UNIT                     = 4096
	DSYSCALL_RLIM_INFINITY                  = 18446744073709551615
	DSYS__sysctl                            = 156
	DSYS_accept                             = 43
	DSYS_accept4                            = 288
	DSYS_access                             = 21
	DSYS_acct                               = 163
	DSYS_add_key                            = 248
	DSYS_adjtimex                           = 159
	DSYS_afs_syscall                        = 183
	DSYS_alarm                              = 37
	DSYS_arch_prctl                         = 158
	DSYS_bind                               = 49
	DSYS_bpf                                = 321
	DSYS_brk                                = 12
	DSYS_capget                             = 125
	DSYS_capset                             = 126
	DSYS_chdir                              = 80
	DSYS_chmod                              = 90
	DSYS_chown                              = 92
	DSYS_chroot                             = 161
	DSYS_clock_adjtime                      = 305
	DSYS_clock_getres                       = 229
	DSYS_clock_gettime                      = 228
	DSYS_clock_nanosleep                    = 230
	DSYS_clock_settime                      = 227
	DSYS_clone                              = 56
	DSYS_close                              = 3
	DSYS_connect                            = 42
	DSYS_copy_file_range                    = 326
	DSYS_creat                              = 85
	DSYS_create_module                      = 174
	DSYS_delete_module                      = 176
	DSYS_dup                                = 32
	DSYS_dup2                               = 33
	DSYS_dup3                               = 292
	DSYS_epoll_create                       = 213
	DSYS_epoll_create1                      = 291
	DSYS_epoll_ctl                          = 233
	DSYS_epoll_ctl_old                      = 214
	DSYS_epoll_pwait                        = 281
	DSYS_epoll_wait                         = 232
	DSYS_epoll_wait_old                     = 215
	DSYS_eventfd                            = 284
	DSYS_eventfd2                           = 290
	DSYS_execve                             = 59
	DSYS_execveat                           = 322
	DSYS_exit                               = 60
	DSYS_exit_group                         = 231
	DSYS_faccessat                          = 269
	DSYS_fadvise                            = 221
	DSYS_fadvise64                          = 221
	DSYS_fallocate                          = 285
	DSYS_fanotify_init                      = 300
	DSYS_fanotify_mark                      = 301
	DSYS_fchdir                             = 81
	DSYS_fchmod                             = 91
	DSYS_fchmodat                           = 268
	DSYS_fchown                             = 93
	DSYS_fchownat                           = 260
	DSYS_fcntl                              = 72
	DSYS_fdatasync                          = 75
	DSYS_fgetxattr                          = 193
	DSYS_finit_module                       = 313
	DSYS_flistxattr                         = 196
	DSYS_flock                              = 73
	DSYS_fork                               = 57
	DSYS_fremovexattr                       = 199
	DSYS_fsetxattr                          = 190
	DSYS_fstat                              = 5
	DSYS_fstatat                            = 262
	DSYS_fstatfs                            = 138
	DSYS_fsync                              = 74
	DSYS_ftruncate                          = 77
	DSYS_futex                              = 202
	DSYS_futimesat                          = 261
	DSYS_get_kernel_syms                    = 177
	DSYS_get_mempolicy                      = 239
	DSYS_get_robust_list                    = 274
	DSYS_get_thread_area                    = 211
	DSYS_getcpu                             = 309
	DSYS_getcwd                             = 79
	DSYS_getdents                           = 217
	DSYS_getdents64                         = 217
	DSYS_getegid                            = 108
	DSYS_geteuid                            = 107
	DSYS_getgid                             = 104
	DSYS_getgroups                          = 115
	DSYS_getitimer                          = 36
	DSYS_getpeername                        = 52
	DSYS_getpgid                            = 121
	DSYS_getpgrp                            = 111
	DSYS_getpid                             = 39
	DSYS_getpmsg                            = 181
	DSYS_getppid                            = 110
	DSYS_getpriority                        = 140
	DSYS_getrandom                          = 318
	DSYS_getresgid                          = 120
	DSYS_getresuid                          = 118
	DSYS_getrlimit                          = 97
	DSYS_getrusage                          = 98
	DSYS_getsid                             = 124
	DSYS_getsockname                        = 51
	DSYS_getsockopt                         = 55
	DSYS_gettid                             = 186
	DSYS_gettimeofday                       = 96
	DSYS_getuid                             = 102
	DSYS_getxattr                           = 191
	DSYS_init_module                        = 175
	DSYS_inotify_add_watch                  = 254
	DSYS_inotify_init                       = 253
	DSYS_inotify_init1                      = 294
	DSYS_inotify_rm_watch                   = 255
	DSYS_io_cancel                          = 210
	DSYS_io_destroy                         = 207
	DSYS_io_getevents                       = 208
	DSYS_io_setup                           = 206
	DSYS_io_submit                          = 209
	DSYS_ioctl                              = 16
	DSYS_ioperm                             = 173
	DSYS_iopl                               = 172
	DSYS_ioprio_get                         = 252
	DSYS_ioprio_set                         = 251
	DSYS_kcmp                               = 312
	DSYS_kexec_file_load                    = 320
	DSYS_kexec_load                         = 246
	DSYS_keyctl                             = 250
	DSYS_kill                               = 62
	DSYS_lchown                             = 94
	DSYS_lgetxattr                          = 192
	DSYS_link                               = 86
	DSYS_linkat                             = 265
	DSYS_listen                             = 50
	DSYS_listxattr                          = 194
	DSYS_llistxattr                         = 195
	DSYS_lookup_dcookie                     = 212
	DSYS_lremovexattr                       = 198
	DSYS_lseek                              = 8
	DSYS_lsetxattr                          = 189
	DSYS_lstat                              = 6
	DSYS_madvise                            = 28
	DSYS_mbind                              = 237
	DSYS_membarrier                         = 324
	DSYS_memfd_create                       = 319
	DSYS_migrate_pages                      = 256
	DSYS_mincore                            = 27
	DSYS_mkdir                              = 83
	DSYS_mkdirat                            = 258
	DSYS_mknod                              = 133
	DSYS_mknodat                            = 259
	DSYS_mlock                              = 149
	DSYS_mlock2                             = 325
	DSYS_mlockall                           = 151
	DSYS_mmap                               = 9
	DSYS_mmap2                              = 9
	DSYS_modify_ldt                         = 154
	DSYS_mount                              = 165
	DSYS_move_pages                         = 279
	DSYS_mprotect                           = 10
	DSYS_mq_getsetattr                      = 245
	DSYS_mq_notify                          = 244
	DSYS_mq_open                            = 240
	DSYS_mq_timedreceive                    = 243
	DSYS_mq_timedsend                       = 242
	DSYS_mq_unlink                          = 241
	DSYS_mremap                             = 25
	DSYS_msgctl                             = 71
	DSYS_msgget                             = 68
	DSYS_msgrcv                             = 70
	DSYS_msgsnd                             = 69
	DSYS_msync                              = 26
	DSYS_munlock                            = 150
	DSYS_munlockall                         = 152
	DSYS_munmap                             = 11
	DSYS_name_to_handle_at                  = 303
	DSYS_nanosleep                          = 35
	DSYS_newfstatat                         = 262
	DSYS_nfsservctl                         = 180
	DSYS_open                               = 2
	DSYS_open_by_handle_at                  = 304
	DSYS_openat                             = 257
	DSYS_pause                              = 34
	DSYS_perf_event_open                    = 298
	DSYS_personality                        = 135
	DSYS_pipe                               = 22
	DSYS_pipe2                              = 293
	DSYS_pivot_root                         = 155
	DSYS_pkey_alloc                         = 330
	DSYS_pkey_free                          = 331
	DSYS_pkey_mprotect                      = 329
	DSYS_poll                               = 7
	DSYS_ppoll                              = 271
	DSYS_prctl                              = 157
	DSYS_pread                              = 17
	DSYS_pread64                            = 17
	DSYS_preadv                             = 295
	DSYS_preadv2                            = 327
	DSYS_prlimit64                          = 302
	DSYS_process_vm_readv                   = 310
	DSYS_process_vm_writev                  = 311
	DSYS_pselect6                           = 270
	DSYS_ptrace                             = 101
	DSYS_putpmsg                            = 182
	DSYS_pwrite                             = 18
	DSYS_pwrite64                           = 18
	DSYS_pwritev                            = 296
	DSYS_pwritev2                           = 328
	DSYS_query_module                       = 178
	DSYS_quotactl                           = 179
	DSYS_read                               = 0
	DSYS_readahead                          = 187
	DSYS_readlink                           = 89
	DSYS_readlinkat                         = 267
	DSYS_readv                              = 19
	DSYS_reboot                             = 169
	DSYS_recvfrom                           = 45
	DSYS_recvmmsg                           = 299
	DSYS_recvmsg                            = 47
	DSYS_remap_file_pages                   = 216
	DSYS_removexattr                        = 197
	DSYS_rename                             = 82
	DSYS_renameat                           = 264
	DSYS_renameat2                          = 316
	DSYS_request_key                        = 249
	DSYS_restart_syscall                    = 219
	DSYS_rmdir                              = 84
	DSYS_rt_sigaction                       = 13
	DSYS_rt_sigpending                      = 127
	DSYS_rt_sigprocmask                     = 14
	DSYS_rt_sigqueueinfo                    = 129
	DSYS_rt_sigreturn                       = 15
	DSYS_rt_sigsuspend                      = 130
	DSYS_rt_sigtimedwait                    = 128
	DSYS_rt_tgsigqueueinfo                  = 297
	DSYS_sched_get_priority_max             = 146
	DSYS_sched_get_priority_min             = 147
	DSYS_sched_getaffinity                  = 204
	DSYS_sched_getattr                      = 315
	DSYS_sched_getparam                     = 143
	DSYS_sched_getscheduler                 = 145
	DSYS_sched_rr_get_interval              = 148
	DSYS_sched_setaffinity                  = 203
	DSYS_sched_setattr                      = 314
	DSYS_sched_setparam                     = 142
	DSYS_sched_setscheduler                 = 144
	DSYS_sched_yield                        = 24
	DSYS_seccomp                            = 317
	DSYS_security                           = 185
	DSYS_select                             = 23
	DSYS_semctl                             = 66
	DSYS_semget                             = 64
	DSYS_semop                              = 65
	DSYS_semtimedop                         = 220
	DSYS_sendfile                           = 40
	DSYS_sendmmsg                           = 307
	DSYS_sendmsg                            = 46
	DSYS_sendto                             = 44
	DSYS_set_mempolicy                      = 238
	DSYS_set_robust_list                    = 273
	DSYS_set_thread_area                    = 205
	DSYS_set_tid_address                    = 218
	DSYS_setdomainname                      = 171
	DSYS_setfsgid                           = 123
	DSYS_setfsuid                           = 122
	DSYS_setgid                             = 106
	DSYS_setgroups                          = 116
	DSYS_sethostname                        = 170
	DSYS_setitimer                          = 38
	DSYS_setns                              = 308
	DSYS_setpgid                            = 109
	DSYS_setpriority                        = 141
	DSYS_setregid                           = 114
	DSYS_setresgid                          = 119
	DSYS_setresuid                          = 117
	DSYS_setreuid                           = 113
	DSYS_setrlimit                          = 160
	DSYS_setsid                             = 112
	DSYS_setsockopt                         = 54
	DSYS_settimeofday                       = 164
	DSYS_setuid                             = 105
	DSYS_setxattr                           = 188
	DSYS_shmat                              = 30
	DSYS_shmctl                             = 31
	DSYS_shmdt                              = 67
	DSYS_shmget                             = 29
	DSYS_shutdown                           = 48
	DSYS_sigaltstack                        = 131
	DSYS_signalfd                           = 282
	DSYS_signalfd4                          = 289
	DSYS_socket                             = 41
	DSYS_socketpair                         = 53
	DSYS_splice                             = 275
	DSYS_stat                               = 4
	DSYS_statfs                             = 137
	DSYS_statx                              = 332
	DSYS_swapoff                            = 168
	DSYS_swapon                             = 167
	DSYS_symlink                            = 88
	DSYS_symlinkat                          = 266
	DSYS_sync                               = 162
	DSYS_sync_file_range                    = 277
	DSYS_syncfs                             = 306
	DSYS_sysfs                              = 139
	DSYS_sysinfo                            = 99
	DSYS_syslog                             = 103
	DSYS_tee                                = 276
	DSYS_tgkill                             = 234
	DSYS_time                               = 201
	DSYS_timer_create                       = 222
	DSYS_timer_delete                       = 226
	DSYS_timer_getoverrun                   = 225
	DSYS_timer_gettime                      = 224
	DSYS_timer_settime                      = 223
	DSYS_timerfd_create                     = 283
	DSYS_timerfd_gettime                    = 287
	DSYS_timerfd_settime                    = 286
	DSYS_times                              = 100
	DSYS_tkill                              = 200
	DSYS_truncate                           = 76
	DSYS_tuxcall                            = 184
	DSYS_umask                              = 95
	DSYS_umount2                            = 166
	DSYS_uname                              = 63
	DSYS_unlink                             = 87
	DSYS_unlinkat                           = 263
	DSYS_unshare                            = 272
	DSYS_uselib                             = 134
	DSYS_userfaultfd                        = 323
	DSYS_ustat                              = 136
	DSYS_utime                              = 132
	DSYS_utimensat                          = 280
	DSYS_utimes                             = 235
	DSYS_vfork                              = 58
	DSYS_vhangup                            = 153
	DSYS_vmsplice                           = 278
	DSYS_vserver                            = 236
	DSYS_wait4                              = 61
	DSYS_waitid                             = 247
	DSYS_write                              = 1
	DSYS_writev                             = 20
	DS_ADDT                                 = 0
	DS_BANDURG                              = 512
	DS_ERROR                                = 16
	DS_HANGUP                               = 32
	DS_HIPRI                                = 2
	DS_IEXEC                                = 64
	DS_IFBLK                                = 24576
	DS_IFCHR                                = 8192
	DS_IFDIR                                = 16384
	DS_IFIFO                                = 4096
	DS_IFLNK                                = 40960
	DS_IFMT                                 = 61440
	DS_IFREG                                = 32768
	DS_IFSOCK                               = 49152
	DS_INPUT                                = 1
	DS_IREAD                                = 256
	DS_IRGRP                                = 32
	DS_IROTH                                = 4
	DS_IRUSR                                = 256
	DS_IRWXG                                = 56
	DS_IRWXO                                = 7
	DS_IRWXU                                = 448
	DS_ISGID                                = 1024
	DS_ISUID                                = 2048
	DS_ISVTX                                = 512
	DS_IWGRP                                = 16
	DS_IWOTH                                = 2
	DS_IWRITE                               = 128
	DS_IWUSR                                = 128
	DS_IXGRP                                = 8
	DS_IXOTH                                = 1
	DS_IXUSR                                = 64
	DS_MSG                                  = 8
	DS_OUTPUT                               = 4
	DS_PREREQ                               = 0
	DS_RDBAND                               = 128
	DS_RDNORM                               = 64
	DS_UPDATE                               = 0
	DS_WRBAND                               = 256
	DS_WRNORM                               = 4
	DS_ZONE                                 = 0
	DTAB0                                   = 0
	DTAB1                                   = 2048
	DTAB2                                   = 4096
	DTAB3                                   = 6144
	DTABDLY                                 = 6144
	DTAG                                    = -3
	DTBLSIZE                                = 256
	DTCFLSH                                 = 21515
	DTCGETA                                 = 21509
	DTCGETS                                 = 21505
	DTCGETX                                 = 21554
	DTCIFLUSH                               = 0
	DTCIOFF                                 = 2
	DTCIOFLUSH                              = 2
	DTCION                                  = 3
	DTCOFLUSH                               = 1
	DTCOOFF                                 = 0
	DTCOON                                  = 1
	DTCSADRAIN                              = 1
	DTCSAFLUSH                              = 2
	DTCSANOW                                = 0
	DTCSBRK                                 = 21513
	DTCSBRKP                                = 21541
	DTCSETA                                 = 21510
	DTCSETAF                                = 21512
	DTCSETAW                                = 21511
	DTCSETS                                 = 21506
	DTCSETSF                                = 21508
	DTCSETSW                                = 21507
	DTCSETX                                 = 21555
	DTCSETXF                                = 21556
	DTCSETXW                                = 21557
	DTCXONC                                 = 21514
	DTFD_CLOEXEC                            = 524288
	DTFD_NONBLOCK                           = 2048
	DTFD_TIMER_ABSTIME                      = 1
	DTFD_TIMER_CANCEL_ON_SET                = 2
	DTHOUSEP                                = 65537
	DTHRESH                                 = 7.446288774449766e+307
	DTIMER_ABSTIME                          = 1
	DTIME_BAD                               = 5
	DTIME_DEL                               = 2
	DTIME_ERROR                             = 5
	DTIME_INS                               = 1
	DTIME_OK                                = 0
	DTIME_OOP                               = 3
	DTIME_UTC                               = 1
	DTIME_WAIT                              = 4
	DTIOCCBRK                               = 21544
	DTIOCCONS                               = 21533
	DTIOCEXCL                               = 21516
	DTIOCGDEV                               = 2147767346
	DTIOCGETD                               = 21540
	DTIOCGEXCL                              = 2147767360
	DTIOCGICOUNT                            = 21597
	DTIOCGLCKTRMIOS                         = 21590
	DTIOCGPGRP                              = 21519
	DTIOCGPKT                               = 2147767352
	DTIOCGPTLCK                             = 2147767353
	DTIOCGPTN                               = 2147767344
	DTIOCGPTPEER                            = 21569
	DTIOCGRS485                             = 21550
	DTIOCGSERIAL                            = 21534
	DTIOCGSID                               = 21545
	DTIOCGSOFTCAR                           = 21529
	DTIOCGWINSZ                             = 21523
	DTIOCINQ                                = 21531
	DTIOCLINUX                              = 21532
	DTIOCMBIC                               = 21527
	DTIOCMBIS                               = 21526
	DTIOCMGET                               = 21525
	DTIOCMIWAIT                             = 21596
	DTIOCMSET                               = 21528
	DTIOCM_CAR                              = 64
	DTIOCM_CD                               = 64
	DTIOCM_CTS                              = 32
	DTIOCM_DSR                              = 256
	DTIOCM_DTR                              = 2
	DTIOCM_LE                               = 1
	DTIOCM_LOOP                             = 32768
	DTIOCM_OUT1                             = 8192
	DTIOCM_OUT2                             = 16384
	DTIOCM_RI                               = 128
	DTIOCM_RNG                              = 128
	DTIOCM_RTS                              = 4
	DTIOCM_SR                               = 16
	DTIOCM_ST                               = 8
	DTIOCNOTTY                              = 21538
	DTIOCNXCL                               = 21517
	DTIOCOUTQ                               = 21521
	DTIOCPKT                                = 21536
	DTIOCPKT_DATA                           = 0
	DTIOCPKT_DOSTOP                         = 32
	DTIOCPKT_FLUSHREAD                      = 1
	DTIOCPKT_FLUSHWRITE                     = 2
	DTIOCPKT_IOCTL                          = 64
	DTIOCPKT_NOSTOP                         = 16
	DTIOCPKT_START                          = 8
	DTIOCPKT_STOP                           = 4
	DTIOCSBRK                               = 21543
	DTIOCSCTTY                              = 21518
	DTIOCSERCONFIG                          = 21587
	DTIOCSERGETLSR                          = 21593
	DTIOCSERGETMULTI                        = 21594
	DTIOCSERGSTRUCT                         = 21592
	DTIOCSERGWILD                           = 21588
	DTIOCSERSETMULTI                        = 21595
	DTIOCSERSWILD                           = 21589
	DTIOCSER_TEMT                           = 1
	DTIOCSETD                               = 21539
	DTIOCSIG                                = 1074025526
	DTIOCSLCKTRMIOS                         = 21591
	DTIOCSPGRP                              = 21520
	DTIOCSPTLCK                             = 1074025521
	DTIOCSRS485                             = 21551
	DTIOCSSERIAL                            = 21535
	DTIOCSSOFTCAR                           = 21530
	DTIOCSTI                                = 21522
	DTIOCSWINSZ                             = 21524
	DTIOCVHANGUP                            = 21559
	DTMP_MAX                                = 10000
	DTOSTOP                                 = 256
	DTRAP_BRANCH                            = 3
	DTRAP_BRKPT                             = 1
	DTRAP_HWBKPT                            = 4
	DTRAP_TRACE                             = 2
	DTRE_CHAR_MAX                           = 1114111
	DTRE_MEM_BLOCK_SIZE                     = 1024
	DTRE_REGEX_T_FIELD                      = 0
	DTRY_AGAIN                              = 2
	DTSS_DTOR_ITERATIONS                    = 4
	DTTY_NAME_MAX                           = 32
	DTZNAME_MAX                             = 6
	DT_A                                    = 0
	DT_A6                                   = 0
	DT_AAAA                                 = 0
	DT_AFSDB                                = 0
	DT_ANY                                  = 0
	DT_ATMA                                 = 0
	DT_AXFR                                 = 0
	DT_CNAME                                = 0
	DT_DNAME                                = 0
	DT_EID                                  = 0
	DT_FMT                                  = 131114
	DT_FMT_AMPM                             = 131115
	DT_GPOS                                 = 0
	DT_HINFO                                = 0
	DT_ISDN                                 = 0
	DT_IXFR                                 = 0
	DT_KEY                                  = 0
	DT_LOC                                  = 0
	DT_MAILA                                = 0
	DT_MAILB                                = 0
	DT_MB                                   = 0
	DT_MD                                   = 0
	DT_MF                                   = 0
	DT_MG                                   = 0
	DT_MINFO                                = 0
	DT_MR                                   = 0
	DT_MX                                   = 0
	DT_NAPTR                                = 0
	DT_NIMLOC                               = 0
	DT_NS                                   = 0
	DT_NSAP                                 = 0
	DT_NSAP_PTR                             = 0
	DT_NULL                                 = 0
	DT_NXT                                  = 0
	DT_PTR                                  = 0
	DT_PX                                   = 0
	DT_RP                                   = 0
	DT_RT                                   = 0
	DT_SIG                                  = 0
	DT_SOA                                  = 0
	DT_SRV                                  = 0
	DT_TSIG                                 = 0
	DT_TXT                                  = 0
	DT_WKS                                  = 0
	DT_X25                                  = 0
	DUCHAR_MAX                              = 255
	DUCS2                                   = 204
	DUCS2BE                                 = 196
	DUCS2LE                                 = 197
	DUINT16_MAX                             = 65535
	DUINT32_MAX                             = 4294967295
	DUINT64_MAX                             = 18446744073709551615
	DUINT8_MAX                              = 255
	DUINTMAX_MAX                            = 18446744073709551615
	DUINTPTR_MAX                            = 18446744073709551615
	DUINT_FAST16_MAX                        = 4294967295
	DUINT_FAST32_MAX                        = 4294967295
	DUINT_FAST64_MAX                        = 18446744073709551615
	DUINT_FAST8_MAX                         = 255
	DUINT_LEAST16_MAX                       = 65535
	DUINT_LEAST32_MAX                       = 4294967295
	DUINT_LEAST64_MAX                       = 18446744073709551615
	DUINT_LEAST8_MAX                        = 255
	DUINT_MAX                               = 4294967295
	DUIO_MAXIOV                             = 1024
	DULLONG_MAX                             = 18446744073709551615
	DULONG_MAX                              = 18446744073709551615
	DUL_GETFSIZE                            = 1
	DUL_SETFSIZE                            = 2
	DUMOUNT_NOFOLLOW                        = 8
	DUNGET                                  = 8
	DUNIT                                   = 4096
	DUNMATCHABLE                            = -2
	DUSER_PROCESS                           = 7
	DUSHRT_MAX                              = 65535
	DUSRQUOTA                               = 0
	DUS_ASCII                               = 199
	DUTF8_LOCALE                            = 0
	DUTF_16                                 = 202
	DUTF_16BE                               = 194
	DUTF_16LE                               = 193
	DUTF_32                                 = 203
	DUTF_32BE                               = 192
	DUTF_32LE                               = 195
	DUTF_8                                  = 200
	DUTIME_NOW                              = 1073741823
	DUTIME_OMIT                             = 1073741822
	DUTMP_FILE                              = "/dev/null/utmp"
	DUTMP_FILENAME                          = "/dev/null/utmp"
	DUT_HOSTSIZE                            = 256
	DUT_LINESIZE                            = 32
	DUT_NAMESIZE                            = 32
	DVDISCARD                               = 13
	DVDSO_CGT_SYM                           = "__vdso_clock_gettime"
	DVDSO_CGT_VER                           = "LINUX_2.6"
	DVDSO_GETCPU_SYM                        = "__vdso_getcpu"
	DVDSO_GETCPU_VER                        = "LINUX_2.6"
	DVEOF                                   = 4
	DVEOL                                   = 11
	DVEOL2                                  = 16
	DVER                                    = -255
	DVERASE                                 = 2
	DVERSION                                = "1.1.19"
	DVER_DEF_CURRENT                        = 1
	DVER_DEF_NONE                           = 0
	DVER_DEF_NUM                            = 2
	DVER_FLG_BASE                           = 1
	DVER_FLG_WEAK                           = 2
	DVER_NDX_ELIMINATE                      = 65281
	DVER_NDX_GLOBAL                         = 1
	DVER_NDX_LOCAL                          = 0
	DVER_NDX_LORESERVE                      = 65280
	DVER_NEED_CURRENT                       = 1
	DVER_NEED_NONE                          = 0
	DVER_NEED_NUM                           = 2
	DVINTR                                  = 0
	DVKILL                                  = 3
	DVLNEXT                                 = 15
	DVMIN                                   = 6
	DVQUIT                                  = 1
	DVREPRINT                               = 12
	DVSTART                                 = 8
	DVSTOP                                  = 9
	DVSUSP                                  = 10
	DVSWTC                                  = 7
	DVT0                                    = 0
	DVT1                                    = 16384
	DVTDLY                                  = 16384
	DVTIME                                  = 5
	DVWERASE                                = 14
	DWCHAR_MAX                              = 2147483647
	DWCHAR_MIN                              = -2147483648
	DWCHAR_T                                = 198
	DWCONTINUED                             = 8
	DWCTYPE_ALNUM                           = 1
	DWCTYPE_ALPHA                           = 2
	DWCTYPE_BLANK                           = 3
	DWCTYPE_CNTRL                           = 4
	DWCTYPE_DIGIT                           = 5
	DWCTYPE_GRAPH                           = 6
	DWCTYPE_LOWER                           = 7
	DWCTYPE_PRINT                           = 8
	DWCTYPE_PUNCT                           = 9
	DWCTYPE_SPACE                           = 10
	DWCTYPE_UPPER                           = 11
	DWCTYPE_XDIGIT                          = 12
	DWEOF                                   = 4294967295
	DWEXITED                                = 4
	DWHOLE_SECONDS                          = 33554432
	DWINT_MAX                               = 4294967295
	DWINT_MIN                               = 0
	DWNOHANG                                = 1
	DWNOWAIT                                = 16777216
	DWORD_BIT                               = 32
	DWRDE_APPEND                            = 2
	DWRDE_BADCHAR                           = 2
	DWRDE_BADVAL                            = 3
	DWRDE_CMDSUB                            = 4
	DWRDE_DOOFFS                            = 1
	DWRDE_NOCMD                             = 4
	DWRDE_NOSPACE                           = 1
	DWRDE_NOSYS                             = -1
	DWRDE_REUSE                             = 8
	DWRDE_SHOWERR                           = 16
	DWRDE_SYNTAX                            = 5
	DWRDE_UNDEF                             = 32
	DWSTOPPED                               = 2
	DWT                                     = 0
	DWTMP_FILE                              = "/dev/null/wtmp"
	DWTMP_FILENAME                          = "/dev/null/wtmp"
	DWUNTRACED                              = 2
	DW_OK                                   = 2
	DXATTR_CREATE                           = 1
	DXATTR_REPLACE                          = 2
	DXCASE                                  = 4
	DXTABS                                  = 6144
	DX_OK                                   = 1
	DYESEXPR                                = 327680
	DYESSTR                                 = 327682
	DYXDOMAIN                               = 0
	DYXRRSET                                = 0
	DZEROINFNAN                             = 971
	DZERO_PAD                               = 65536
	D_BSD_SOURCE                            = 1
	D_CS_GNU_LIBC_VERSION                   = 2
	D_CS_GNU_LIBPTHREAD_VERSION             = 3
	D_CS_PATH                               = 0
	D_CS_POSIX_V5_WIDTH_RESTRICTED_ENVS     = 4
	D_CS_POSIX_V6_ILP32_OFF32_CFLAGS        = 1116
	D_CS_POSIX_V6_ILP32_OFF32_LDFLAGS       = 1117
	D_CS_POSIX_V6_ILP32_OFF32_LIBS          = 1118
	D_CS_POSIX_V6_ILP32_OFF32_LINTFLAGS     = 1119
	D_CS_POSIX_V6_ILP32_OFFBIG_CFLAGS       = 1120
	D_CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS      = 1121
	D_CS_POSIX_V6_ILP32_OFFBIG_LIBS         = 1122
	D_CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS    = 1123
	D_CS_POSIX_V6_LP64_OFF64_CFLAGS         = 1124
	D_CS_POSIX_V6_LP64_OFF64_LDFLAGS        = 1125
	D_CS_POSIX_V6_LP64_OFF64_LIBS           = 1126
	D_CS_POSIX_V6_LP64_OFF64_LINTFLAGS      = 1127
	D_CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS       = 1128
	D_CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS      = 1129
	D_CS_POSIX_V6_LPBIG_OFFBIG_LIBS         = 1130
	D_CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS    = 1131
	D_CS_POSIX_V6_WIDTH_RESTRICTED_ENVS     = 1
	D_CS_POSIX_V7_ILP32_OFF32_CFLAGS        = 1132
	D_CS_POSIX_V7_ILP32_OFF32_LDFLAGS       = 1133
	D_CS_POSIX_V7_ILP32_OFF32_LIBS          = 1134
	D_CS_POSIX_V7_ILP32_OFF32_LINTFLAGS     = 1135
	D_CS_POSIX_V7_ILP32_OFFBIG_CFLAGS       = 1136
	D_CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS      = 1137
	D_CS_POSIX_V7_ILP32_OFFBIG_LIBS         = 1138
	D_CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS    = 1139
	D_CS_POSIX_V7_LP64_OFF64_CFLAGS         = 1140
	D_CS_POSIX_V7_LP64_OFF64_LDFLAGS        = 1141
	D_CS_POSIX_V7_LP64_OFF64_LIBS           = 1142
	D_CS_POSIX_V7_LP64_OFF64_LINTFLAGS      = 1143
	D_CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS       = 1144
	D_CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS      = 1145
	D_CS_POSIX_V7_LPBIG_OFFBIG_LIBS         = 1146
	D_CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS    = 1147
	D_CS_POSIX_V7_WIDTH_RESTRICTED_ENVS     = 5
	D_CS_V6_ENV                             = 1148
	D_CS_V7_ENV                             = 1149
	D_DEFAULT_SOURCE                        = 1
	D_GNU_SOURCE                            = 1
	D_IOC_NONE                              = 0
	D_IOC_READ                              = 2
	D_IOC_WRITE                             = 1
	D_IOFBF                                 = 0
	D_IOLBF                                 = 1
	D_IONBF                                 = 2
	D_LINUX_QUOTA_VERSION                   = 2
	D_LP64                                  = 1
	D_NSIG                                  = 65
	D_PASSWORD_EFMT1                        = 95
	D_PATH_LOG                              = "/dev/log"
	D_PATH_RESCONF                          = "/etc/resolv.conf"
	D_PATH_UTMP                             = "/dev/null/utmp"
	D_PATH_WTMP                             = "/dev/null/wtmp"
	D_PC_2_SYMLINKS                         = 20
	D_PC_ALLOC_SIZE_MIN                     = 18
	D_PC_ASYNC_IO                           = 10
	D_PC_CHOWN_RESTRICTED                   = 6
	D_PC_FILESIZEBITS                       = 13
	D_PC_LINK_MAX                           = 0
	D_PC_MAX_CANON                          = 1
	D_PC_MAX_INPUT                          = 2
	D_PC_NAME_MAX                           = 3
	D_PC_NO_TRUNC                           = 7
	D_PC_PATH_MAX                           = 4
	D_PC_PIPE_BUF                           = 5
	D_PC_PRIO_IO                            = 11
	D_PC_REC_INCR_XFER_SIZE                 = 14
	D_PC_REC_MAX_XFER_SIZE                  = 15
	D_PC_REC_MIN_XFER_SIZE                  = 16
	D_PC_REC_XFER_ALIGN                     = 17
	D_PC_SOCK_MAXBUF                        = 12
	D_PC_SYMLINK_MAX                        = 19
	D_PC_SYNC_IO                            = 9
	D_PC_VDISABLE                           = 8
	D_POSIX2_BC_BASE_MAX                    = 99
	D_POSIX2_BC_DIM_MAX                     = 2048
	D_POSIX2_BC_SCALE_MAX                   = 99
	D_POSIX2_BC_STRING_MAX                  = 1000
	D_POSIX2_CHARCLASS_NAME_MAX             = 14
	D_POSIX2_COLL_WEIGHTS_MAX               = 2
	D_POSIX2_C_BIND                         = 200809
	D_POSIX2_EXPR_NEST_MAX                  = 32
	D_POSIX2_LINE_MAX                       = 2048
	D_POSIX2_RE_DUP_MAX                     = 255
	D_POSIX2_VERSION                        = 200809
	D_POSIX_ADVISORY_INFO                   = 200809
	D_POSIX_AIO_LISTIO_MAX                  = 2
	D_POSIX_AIO_MAX                         = 1
	D_POSIX_ARG_MAX                         = 4096
	D_POSIX_ASYNCHRONOUS_IO                 = 200809
	D_POSIX_BARRIERS                        = 200809
	D_POSIX_CHILD_MAX                       = 25
	D_POSIX_CHOWN_RESTRICTED                = 1
	D_POSIX_CLOCKRES_MIN                    = 20000000
	D_POSIX_CLOCK_SELECTION                 = 200809
	D_POSIX_CPUTIME                         = 200809
	D_POSIX_C_SOURCE                        = 200809
	D_POSIX_DELAYTIMER_MAX                  = 32
	D_POSIX_FSYNC                           = 200809
	D_POSIX_HOST_NAME_MAX                   = 255
	D_POSIX_IPV6                            = 200809
	D_POSIX_JOB_CONTROL                     = 1
	D_POSIX_LINK_MAX                        = 8
	D_POSIX_LOGIN_NAME_MAX                  = 9
	D_POSIX_MAPPED_FILES                    = 200809
	D_POSIX_MAX_CANON                       = 255
	D_POSIX_MAX_INPUT                       = 255
	D_POSIX_MEMLOCK                         = 200809
	D_POSIX_MEMLOCK_RANGE                   = 200809
	D_POSIX_MEMORY_PROTECTION               = 200809
	D_POSIX_MESSAGE_PASSING                 = 200809
	D_POSIX_MONOTONIC_CLOCK                 = 200809
	D_POSIX_MQ_OPEN_MAX                     = 8
	D_POSIX_MQ_PRIO_MAX                     = 32
	D_POSIX_NAME_MAX                        = 14
	D_POSIX_NGROUPS_MAX                     = 8
	D_POSIX_NO_TRUNC                        = 1
	D_POSIX_OPEN_MAX                        = 20
	D_POSIX_PATH_MAX                        = 256
	D_POSIX_PIPE_BUF                        = 512
	D_POSIX_RAW_SOCKETS                     = 200809
	D_POSIX_READER_WRITER_LOCKS             = 200809
	D_POSIX_REALTIME_SIGNALS                = 200809
	D_POSIX_REGEXP                          = 1
	D_POSIX_RE_DUP_MAX                      = 255
	D_POSIX_RTSIG_MAX                       = 8
	D_POSIX_SAVED_IDS                       = 1
	D_POSIX_SEMAPHORES                      = 200809
	D_POSIX_SEM_NSEMS_MAX                   = 256
	D_POSIX_SEM_VALUE_MAX                   = 32767
	D_POSIX_SHARED_MEMORY_OBJECTS           = 200809
	D_POSIX_SHELL                           = 1
	D_POSIX_SIGQUEUE_MAX                    = 32
	D_POSIX_SPAWN                           = 200809
	D_POSIX_SPIN_LOCKS                      = 200809
	D_POSIX_SSIZE_MAX                       = 32767
	D_POSIX_SS_REPL_MAX                     = 4
	D_POSIX_STREAM_MAX                      = 8
	D_POSIX_SYMLINK_MAX                     = 255
	D_POSIX_SYMLOOP_MAX                     = 8
	D_POSIX_THREADS                         = 200809
	D_POSIX_THREAD_ATTR_STACKADDR           = 200809
	D_POSIX_THREAD_ATTR_STACKSIZE           = 200809
	D_POSIX_THREAD_CPUTIME                  = 200809
	D_POSIX_THREAD_DESTRUCTOR_ITERATIONS    = 4
	D_POSIX_THREAD_KEYS_MAX                 = 128
	D_POSIX_THREAD_PRIORITY_SCHEDULING      = 200809
	D_POSIX_THREAD_PROCESS_SHARED           = 200809
	D_POSIX_THREAD_SAFE_FUNCTIONS           = 200809
	D_POSIX_THREAD_THREADS_MAX              = 64
	D_POSIX_TIMEOUTS                        = 200809
	D_POSIX_TIMERS                          = 200809
	D_POSIX_TIMER_MAX                       = 32
	D_POSIX_TRACE_EVENT_NAME_MAX            = 30
	D_POSIX_TRACE_NAME_MAX                  = 8
	D_POSIX_TRACE_SYS_MAX                   = 8
	D_POSIX_TRACE_USER_EVENT_MAX            = 32
	D_POSIX_TTY_NAME_MAX                    = 9
	D_POSIX_TZNAME_MAX                      = 6
	D_POSIX_V6_LP64_OFF64                   = 1
	D_POSIX_V7_LP64_OFF64                   = 1
	D_POSIX_VDISABLE                        = 0
	D_POSIX_VERSION                         = 200809
	D_SC_2_CHAR_TERM                        = 95
	D_SC_2_C_BIND                           = 47
	D_SC_2_C_DEV                            = 48
	D_SC_2_FORT_DEV                         = 49
	D_SC_2_FORT_RUN                         = 50
	D_SC_2_LOCALEDEF                        = 52
	D_SC_2_PBS                              = 168
	D_SC_2_PBS_ACCOUNTING                   = 169
	D_SC_2_PBS_CHECKPOINT                   = 175
	D_SC_2_PBS_LOCATE                       = 170
	D_SC_2_PBS_MESSAGE                      = 171
	D_SC_2_PBS_TRACK                        = 172
	D_SC_2_SW_DEV                           = 51
	D_SC_2_UPE                              = 97
	D_SC_2_VERSION                          = 46
	D_SC_ADVISORY_INFO                      = 132
	D_SC_AIO_LISTIO_MAX                     = 23
	D_SC_AIO_MAX                            = 24
	D_SC_AIO_PRIO_DELTA_MAX                 = 25
	D_SC_ARG_MAX                            = 0
	D_SC_ASYNCHRONOUS_IO                    = 12
	D_SC_ATEXIT_MAX                         = 87
	D_SC_AVPHYS_PAGES                       = 86
	D_SC_BARRIERS                           = 133
	D_SC_BC_BASE_MAX                        = 36
	D_SC_BC_DIM_MAX                         = 37
	D_SC_BC_SCALE_MAX                       = 38
	D_SC_BC_STRING_MAX                      = 39
	D_SC_CHILD_MAX                          = 1
	D_SC_CLK_TCK                            = 2
	D_SC_CLOCK_SELECTION                    = 137
	D_SC_COLL_WEIGHTS_MAX                   = 40
	D_SC_CPUTIME                            = 138
	D_SC_DELAYTIMER_MAX                     = 26
	D_SC_EXPR_NEST_MAX                      = 42
	D_SC_FSYNC                              = 15
	D_SC_GETGR_R_SIZE_MAX                   = 69
	D_SC_GETPW_R_SIZE_MAX                   = 70
	D_SC_HOST_NAME_MAX                      = 180
	D_SC_IOV_MAX                            = 60
	D_SC_IPV6                               = 235
	D_SC_JOB_CONTROL                        = 7
	D_SC_LINE_MAX                           = 43
	D_SC_LOGIN_NAME_MAX                     = 71
	D_SC_MAPPED_FILES                       = 16
	D_SC_MEMLOCK                            = 17
	D_SC_MEMLOCK_RANGE                      = 18
	D_SC_MEMORY_PROTECTION                  = 19
	D_SC_MESSAGE_PASSING                    = 20
	D_SC_MONOTONIC_CLOCK                    = 149
	D_SC_MQ_OPEN_MAX                        = 27
	D_SC_MQ_PRIO_MAX                        = 28
	D_SC_NGROUPS_MAX                        = 3
	D_SC_NPROCESSORS_CONF                   = 83
	D_SC_NPROCESSORS_ONLN                   = 84
	D_SC_NZERO                              = 109
	D_SC_OPEN_MAX                           = 4
	D_SC_PAGESIZE                           = 30
	D_SC_PAGE_SIZE                          = 30
	D_SC_PASS_MAX                           = 88
	D_SC_PHYS_PAGES                         = 85
	D_SC_PRIORITIZED_IO                     = 13
	D_SC_PRIORITY_SCHEDULING                = 10
	D_SC_RAW_SOCKETS                        = 236
	D_SC_READER_WRITER_LOCKS                = 153
	D_SC_REALTIME_SIGNALS                   = 9
	D_SC_REGEXP                             = 155
	D_SC_RE_DUP_MAX                         = 44
	D_SC_RTSIG_MAX                          = 31
	D_SC_SAVED_IDS                          = 8
	D_SC_SEMAPHORES                         = 21
	D_SC_SEM_NSEMS_MAX                      = 32
	D_SC_SEM_VALUE_MAX                      = 33
	D_SC_SHARED_MEMORY_OBJECTS              = 22
	D_SC_SHELL                              = 157
	D_SC_SIGQUEUE_MAX                       = 34
	D_SC_SPAWN                              = 159
	D_SC_SPIN_LOCKS                         = 154
	D_SC_SPORADIC_SERVER                    = 160
	D_SC_SS_REPL_MAX                        = 241
	D_SC_STREAMS                            = 174
	D_SC_STREAM_MAX                         = 5
	D_SC_SYMLOOP_MAX                        = 173
	D_SC_SYNCHRONIZED_IO                    = 14
	D_SC_THREADS                            = 67
	D_SC_THREAD_ATTR_STACKADDR              = 77
	D_SC_THREAD_ATTR_STACKSIZE              = 78
	D_SC_THREAD_CPUTIME                     = 139
	D_SC_THREAD_DESTRUCTOR_ITERATIONS       = 73
	D_SC_THREAD_KEYS_MAX                    = 74
	D_SC_THREAD_PRIORITY_SCHEDULING         = 79
	D_SC_THREAD_PRIO_INHERIT                = 80
	D_SC_THREAD_PRIO_PROTECT                = 81
	D_SC_THREAD_PROCESS_SHARED              = 82
	D_SC_THREAD_ROBUST_PRIO_INHERIT         = 247
	D_SC_THREAD_ROBUST_PRIO_PROTECT         = 248
	D_SC_THREAD_SAFE_FUNCTIONS              = 68
	D_SC_THREAD_SPORADIC_SERVER             = 161
	D_SC_THREAD_STACK_MIN                   = 75
	D_SC_THREAD_THREADS_MAX                 = 76
	D_SC_TIMEOUTS                           = 164
	D_SC_TIMERS                             = 11
	D_SC_TIMER_MAX                          = 35
	D_SC_TRACE                              = 181
	D_SC_TRACE_EVENT_FILTER                 = 182
	D_SC_TRACE_EVENT_NAME_MAX               = 242
	D_SC_TRACE_INHERIT                      = 183
	D_SC_TRACE_LOG                          = 184
	D_SC_TRACE_NAME_MAX                     = 243
	D_SC_TRACE_SYS_MAX                      = 244
	D_SC_TRACE_USER_EVENT_MAX               = 245
	D_SC_TTY_NAME_MAX                       = 72
	D_SC_TYPED_MEMORY_OBJECTS               = 165
	D_SC_TZNAME_MAX                         = 6
	D_SC_UIO_MAXIOV                         = 60
	D_SC_V6_ILP32_OFF32                     = 176
	D_SC_V6_ILP32_OFFBIG                    = 177
	D_SC_V6_LP64_OFF64                      = 178
	D_SC_V6_LPBIG_OFFBIG                    = 179
	D_SC_V7_ILP32_OFF32                     = 237
	D_SC_V7_ILP32_OFFBIG                    = 238
	D_SC_V7_LP64_OFF64                      = 239
	D_SC_V7_LPBIG_OFFBIG                    = 240
	D_SC_VERSION                            = 29
	D_SC_XBS5_ILP32_OFF32                   = 125
	D_SC_XBS5_ILP32_OFFBIG                  = 126
	D_SC_XBS5_LP64_OFF64                    = 127
	D_SC_XBS5_LPBIG_OFFBIG                  = 128
	D_SC_XOPEN_CRYPT                        = 92
	D_SC_XOPEN_ENH_I18N                     = 93
	D_SC_XOPEN_LEGACY                       = 129
	D_SC_XOPEN_REALTIME                     = 130
	D_SC_XOPEN_REALTIME_THREADS             = 131
	D_SC_XOPEN_SHM                          = 94
	D_SC_XOPEN_STREAMS                      = 246
	D_SC_XOPEN_UNIX                         = 91
	D_SC_XOPEN_VERSION                      = 89
	D_SC_XOPEN_XCU_VERSION                  = 90
	D_SC_XOPEN_XPG2                         = 98
	D_SC_XOPEN_XPG3                         = 99
	D_SC_XOPEN_XPG4                         = 100
	D_SEM_SEMUN_UNDEFINED                   = 1
	D_STDC_PREDEF_H                         = 1
	D_XOPEN_ENH_I18N                        = 1
	D_XOPEN_IOV_MAX                         = 16
	D_XOPEN_NAME_MAX                        = 255
	D_XOPEN_PATH_MAX                        = 1024
	D_XOPEN_SOURCE                          = 700
	D_XOPEN_UNIX                            = 1
	D_XOPEN_VERSION                         = 700
	Da_and                                  = 0
	Da_and_64                               = 0
	Da_barrier                              = 0
	Da_cas                                  = 0
	Da_cas_p                                = 0
	Da_clz_64                               = 0
	Da_crash                                = 0
	Da_ctz_32                               = 0
	Da_ctz_64                               = 0
	Da_dec                                  = 0
	Da_fetch_add                            = 0
	Da_fetch_and                            = 0
	Da_fetch_or                             = 0
	Da_inc                                  = 0
	Da_or                                   = 0
	Da_or_64                                = 0
	Da_or_l                                 = 0
	Da_spin                                 = 0
	Da_store                                = 0
	Da_swap                                 = 0
	Dalphasort64                            = 0
	Dbittab                                 = 0
	Dblkcnt64_t                             = 0
	Dcomplex                                = 0
	Dcreat64                                = 0
	Dd_fileno                               = 0
	Ddirent64                               = 0
	De_exit                                 = 0
	De_termination                          = 0
	Dfallocate64                            = 0
	Dfgetpos64                              = 0
	Dflock64                                = 0
	Dfopen64                                = 0
	Dfpos64_t                               = 0
	Dfreopen64                              = 0
	Dfsblkcnt64_t                           = 0
	Dfseeko64                               = 0
	Dfsetpos64                              = 0
	Dfsfilcnt64_t                           = 0
	Dfstat64                                = 0
	Dfstatat64                              = 0
	Dftello64                               = 0
	Dftruncate64                            = 0
	Dgetdents64                             = 0
	Dgetrlimit64                            = 0
	Dino64_t                                = 0
	Dlibc                                   = 0
	Dlockf64                                = 0
	Dloff_t                                 = 0
	Dlseek64                                = 0
	Dlstat64                                = 0
	Dmath_errhandling                       = 2
	Dmbrtowc_utf8                           = 0
	Dmkostemp64                             = 0
	Dmkostemps64                            = 0
	Dmkstemp64                              = 0
	Dmkstemps64                             = 0
	Dmmap64                                 = 0
	Dno_argument                            = 0
	Doff64_t                                = 0
	Dopen64                                 = 0
	Dopenat64                               = 0
	Doptional_argument                      = 2
	Doptpos                                 = 0
	Dpio2_hi                                = 0
	Dpio2_lo                                = 0
	Dposix_fadvise64                        = 0
	Dposix_fallocate64                      = 0
	Dpread64                                = 0
	Dpreadv64                               = 0
	Dprlimit64                              = 0
	Dpthread                                = 0
	Dpwrite64                               = 0
	Dpwritev64                              = 0
	Dreaddir64                              = 0
	Dreaddir64_r                            = 0
	Drequired_argument                      = 1
	Drlim64_t                               = 0
	Drlimit64                               = 0
	Dscandir64                              = 0
	Dsetjmp                                 = 0
	Dsetrlimit64                            = 0
	Dsocketcall                             = 0
	Dsocketcall_cp                          = 0
	Dstat64                                 = 0
	Dstderr                                 = 0
	Dstdin                                  = 0
	Dstdout                                 = 0
	Dthread_local                           = 0
	Dtls_mod_off_t                          = 0
	Dtmpfile64                              = 0
	Dtre_bt_mem_alloc                       = 0
	Dtre_bt_mem_destroy                     = 0
	Dtre_bt_mem_new                         = 0
	Dtre_ctype                              = 0
	Dtre_isalnum                            = 0
	Dtre_isalpha                            = 0
	Dtre_isblank                            = 0
	Dtre_iscntrl                            = 0
	Dtre_isctype                            = 0
	Dtre_isdigit                            = 0
	Dtre_isgraph                            = 0
	Dtre_islower                            = 0
	Dtre_isprint                            = 0
	Dtre_ispunct                            = 0
	Dtre_isspace                            = 0
	Dtre_isupper                            = 0
	Dtre_isxdigit                           = 0
	Dtre_mem_alloc_impl                     = 0
	Dtre_mem_destroy                        = 0
	Dtre_mem_new_impl                       = 0
	Dtre_strlen                             = 0
	Dtre_tolower                            = 0
	Dtre_toupper                            = 0
	Dtruncate64                             = 0
	Dut_name                                = 0
	Dutmp                                   = 0
	Dversionsort64                          = 0
	Dwctomb_utf8                            = 0
	Dxcalloc                                = 0
	Dxfree                                  = 0
	Dxmalloc                                = 0
	Dxrealloc                               = 0
)

var X_IO_feof_unlocked = Xfeof

var X_IO_ferror_unlocked = Xferror

var X_IO_getc = Xgetc

var X_IO_getc_unlocked = Xgetc_unlocked

var X_IO_putc = Xputc

var X_IO_putc_unlocked = Xputc_unlocked

var X___environ = X__environ

var X__builtin_abort = Xabort

var X__builtin_abs = Xabs

var X__builtin_bswap64 = x__bswap_64

var X__builtin_copysign = Xcopysign

var X__builtin_exit = Xexit

var X__builtin_ffs = Xffs

var X__builtin_isprint = Xisprint

var X__builtin_memcmp = Xmemcmp

var X__builtin_memcpy = Xmemcpy

var X__builtin_memset = Xmemset

var X__builtin_printf = Xprintf

var X__builtin_sprintf = Xsprintf

var X__builtin_strchrnul = X__strchrnul

var X__builtin_strcmp = Xstrcmp

var X__builtin_strcpy = Xstrcpy

var X__builtin_strlen = Xstrlen

var X__dl_invalid_handle = xstub_invalid_handle

var X__dlsym = xstub_dlsym

var X__fini_array_end = X__fini_array_start

var X__freelocale = Xfreelocale

var X__fxstat64 = X__fxstat

var X__fxstatat64 = X__fxstatat

var X__getdelim = Xgetdelim

var X__init_array_end = X__init_array_start

var X__init_tls = xstatic_init_tls

var X__isoc99_fscanf = Xfscanf

var X__isoc99_fwscanf = Xfwscanf

var X__isoc99_scanf = Xscanf

var X__isoc99_sscanf = Xsscanf

var X__isoc99_swscanf = Xswscanf

var X__isoc99_vfscanf = Xvfscanf

var X__isoc99_vfwscanf = Xvfwscanf

var X__isoc99_vscanf = Xvscanf

var X__isoc99_vsscanf = Xvsscanf

var X__isoc99_vswscanf = Xvswscanf

var X__isoc99_vwscanf = Xvwscanf

var X__isoc99_wscanf = Xwscanf

var X__libc_exit_fini = xlibc_exit_fini

var X__libc_start_init = xlibc_start_init

var X__lxstat64 = X__lxstat

var X__posix_getopt = Xgetopt

var X__stack_chk_fail_local = X__stack_chk_fail

var X__stdio_exit_needed = X__stdio_exit

var X__strtod_l = Xstrtod

var X__strtof_l = Xstrtof

var X__strtoimax_internal = Xstrtoimax

var X__strtol_internal = Xstrtol

var X__strtold_l = Xstrtold

var X__strtoll_internal = Xstrtoll

var X__strtoul_internal = Xstrtoul

var X__strtoull_internal = Xstrtoull

var X__strtoumax_internal = Xstrtoumax

var X__sysv_signal = Xsignal

var X__tls_get_new = X__tls_get_addr

var X__xpg_basename = Xbasename

var X__xpg_strerror_r = Xstrerror_r

var X__xstat64 = X__xstat

var X_environ = X__environ

var Xaio_cancel64 = Xaio_cancel

var Xaio_error64 = Xaio_error

var Xaio_fsync64 = Xaio_fsync

var Xaio_read64 = Xaio_read

var Xaio_return64 = Xaio_return

var Xaio_suspend64 = Xaio_suspend

var Xaio_write64 = Xaio_write

var Xalphasort64 = Xalphasort

var Xbsd_signal = Xsignal

var Xcfsetspeed = Xcfsetospeed

var Xclearerr_unlocked = Xclearerr

var Xclock_gettime = X__clock_gettime

var Xcreat64 = Xcreat

var Xcrypt_r = X__crypt_r

var Xdaylight = X__daylight

var Xdl_iterate_phdr = xstatic_dl_iterate_phdr

var Xdladdr = xstub_dladdr

var Xdlopen = xstub_dlopen

var Xdn_comp = X__dn_comp

var Xdn_expand = X__dn_expand

var Xdrem = Xremainder

var Xdremf = Xremainderf

var Xdup3 = X__dup3

var Xduplocale = X__duplocale

var Xeaccess = Xeuidaccess

var Xendgrent = Xsetgrent

var Xendnetent = Xendhostent

var Xendpwent = Xsetpwent

var Xendutent = Xendutxent

var Xenviron = X__environ

var Xexecvpe = X__execvpe

var Xfallocate64 = Xfallocate

var Xfdopen = X__fdopen

var Xfeof_unlocked = Xfeof

var Xferror_unlocked = Xferror

var Xfflush_unlocked = Xfflush

var Xfgetc_unlocked = Xgetc_unlocked

var Xfgetpos64 = Xfgetpos

var Xfgets_unlocked = Xfgets

var Xfgetwc_unlocked = X__fgetwc_unlocked

var Xfgetws_unlocked = Xfgetws

var Xfileno_unlocked = Xfileno

var Xfopen64 = Xfopen

var Xfpurge = X__fpurge

var Xfputc_unlocked = Xputc_unlocked

var Xfputs_unlocked = Xfputs

var Xfputwc_unlocked = X__fputwc_unlocked

var Xfputws_unlocked = Xfputws

var Xfread_unlocked = Xfread

var Xfreopen64 = Xfreopen

var Xfseeko = X__fseeko

var Xfseeko64 = Xfseeko

var Xfsetpos64 = Xfsetpos

var Xfstat64 = Xfstat

var Xfstatat64 = Xfstatat

var Xfstatfs = X__fstatfs

var Xfstatfs64 = Xfstatfs

var Xfstatvfs64 = Xfstatvfs

var Xftello = X__ftello

var Xftello64 = Xftello

var Xftruncate64 = Xftruncate

var Xftw64 = Xftw

var Xfutimesat = X__futimesat

var Xfwrite_unlocked = Xfwrite

var Xgetdents = X__getdents

var Xgetdents64 = Xgetdents

var Xgetnetent = Xgethostent

var Xgetrlimit64 = Xgetrlimit

var Xgetutent = Xgetutxent

var Xgetutid = Xgetutxid

var Xgetutline = Xgetutxline

var Xgetwc_unlocked = X__fgetwc_unlocked

var Xgetwchar_unlocked = Xgetwchar

var Xglob64 = Xglob

var Xglobfree64 = Xglobfree

var Xgmtime_r = X__gmtime_r

var Xhcreate_r = X__hcreate_r

var Xhdestroy_r = X__hdestroy_r

var Xhsearch_r = X__hsearch_r

var Xinet_aton = X__inet_aton

var Xisalnum_l = X__isalnum_l

var Xisalpha_l = X__isalpha_l

var Xisblank_l = X__isblank_l

var Xiscntrl_l = X__iscntrl_l

var Xisdigit_l = X__isdigit_l

var Xisgraph_l = X__isgraph_l

var Xislower_l = X__islower_l

var Xisprint_l = X__isprint_l

var Xispunct_l = X__ispunct_l

var Xisspace_l = X__isspace_l

var Xisupper_l = X__isupper_l

var Xiswalnum_l = X__iswalnum_l

var Xiswalpha_l = X__iswalpha_l

var Xiswblank_l = X__iswblank_l

var Xiswcntrl_l = X__iswcntrl_l

var Xiswctype_l = X__iswctype_l

var Xiswdigit_l = X__iswdigit_l

var Xiswgraph_l = X__iswgraph_l

var Xiswlower_l = X__iswlower_l

var Xiswprint_l = X__iswprint_l

var Xiswpunct_l = X__iswpunct_l

var Xiswspace_l = X__iswspace_l

var Xiswupper_l = X__iswupper_l

var Xiswxdigit_l = X__iswxdigit_l

var Xisxdigit_l = X__isxdigit_l

var Xlgamma_r = X__lgamma_r

var Xlgammaf_r = X__lgammaf_r

var Xlgammal_r = X__lgammal_r

var Xlio_listio64 = Xlio_listio

var Xlocaltime_r = X__localtime_r

var Xlockf64 = Xlockf

var Xlseek64 = Xlseek

var Xlstat64 = Xlstat

var Xmadvise = X__madvise

var Xmemrchr = X__memrchr

var Xmkostemp64 = Xmkostemp

var Xmkostemps = X__mkostemps

var Xmkostemps64 = X__mkostemps

var Xmkstemp64 = Xmkstemp

var Xmkstemps64 = Xmkstemps

var Xmmap = X__mmap

var Xmmap64 = Xmmap

var Xmprotect = X__mprotect

var Xmremap = X__mremap

var Xmunmap = X__munmap

var Xnewlocale = X__newlocale

var Xnftw64 = Xnftw

var Xnl_langinfo = X__nl_langinfo

var Xnl_langinfo_l = X__nl_langinfo_l

var Xopen64 = Xopen

var Xopenat64 = Xopenat

var Xoptreset = X__optreset

var Xposix_fadvise64 = Xposix_fadvise

var Xposix_fallocate64 = Xposix_fallocate

var Xpow10 = Xexp10

var Xpow10f = Xexp10f

var Xpow10l = Xexp10l

var Xpread64 = Xpread

var Xpreadv64 = Xpreadv

var Xprlimit64 = Xprlimit

var Xprogram_invocation_name = X__progname_full

var Xprogram_invocation_short_name = X__progname

var Xpthread_cond_timedwait = X__pthread_cond_timedwait

var Xpthread_create = X__pthread_create

var Xpthread_detach = x__pthread_detach

var Xpthread_equal = x__pthread_equal

var Xpthread_exit = X__pthread_exit

var Xpthread_getspecific = x__pthread_getspecific

var Xpthread_join = X__pthread_join

var Xpthread_key_create = X__pthread_key_create

var Xpthread_key_delete = X__pthread_key_delete

var Xpthread_mutex_lock = X__pthread_mutex_lock

var Xpthread_mutex_timedlock = X__pthread_mutex_timedlock

var Xpthread_mutex_trylock = X__pthread_mutex_trylock

var Xpthread_mutex_unlock = X__pthread_mutex_unlock

var Xpthread_once = X__pthread_once

var Xpthread_self = x__pthread_self_internal

var Xpthread_setcancelstate = X__pthread_setcancelstate

var Xpthread_testcancel = X__pthread_testcancel

var Xpthread_timedjoin_np = X__pthread_timedjoin_np

var Xpthread_tryjoin_np = X__pthread_tryjoin_np

var Xptsname_r = X__ptsname_r

var Xpututline = Xpututxline

var Xputwc_unlocked = X__fputwc_unlocked

var Xputwchar_unlocked = Xputwchar

var Xpwrite64 = Xpwrite

var Xpwritev64 = Xpwritev

var Xreaddir64 = Xreaddir

var Xreaddir64_r = Xreaddir_r

var Xres_mkquery = X__res_mkquery

var Xres_query = X__res_query

var Xres_search = X__res_query

var Xres_send = X__res_send

var Xscandir64 = Xscandir

var Xsendfile64 = Xsendfile

var Xsetnetent = Xsethostent

var Xsetrlimit64 = Xsetrlimit

var Xsetutent = Xsetutxent

var Xsigaction = X__sigaction

var Xsigngam = X__signgam

var Xstat64 = Xstat

var Xstatfs = X__statfs

var Xstatfs64 = Xstatfs

var Xstatvfs64 = Xstatvfs

var Xstpcpy = X__stpcpy

var Xstpncpy = X__stpncpy

var Xstrcasecmp_l = X__strcasecmp_l

var Xstrchrnul = X__strchrnul

var Xstrcoll_l = X__strcoll_l

var Xstrdup = X__strdup

var Xstrerror_l = X__strerror_l

var Xstrftime_l = X__strftime_l

var Xstrncasecmp_l = X__strncasecmp_l

var Xstrtod_l = Xstrtod

var Xstrtof_l = Xstrtof

var Xstrtold_l = Xstrtold

var Xstrxfrm_l = X__strxfrm_l

var Xsysinfo = X__lsysinfo

var Xthrd_current = x__pthread_self_internal

var Xthrd_detach = x__pthread_detach

var Xthrd_equal = x__pthread_equal

var Xtimezone = X__timezone

var Xtmpfile64 = Xtmpfile

var Xtolower_l = X__tolower_l

var Xtoupper_l = X__toupper_l

var Xtowctrans_l = X__towctrans_l

var Xtowlower_l = X__towlower_l

var Xtowupper_l = X__towupper_l

var Xtruncate64 = Xtruncate

var Xtss_get = x__pthread_getspecific

var Xtzname = X__tzname

var Xtzset = X__tzset

var Xupdwtmp = Xupdwtmpx

var Xuselocale = X__uselocale

var Xutmpname = X__utmpxname

var Xutmpxname = X__utmpxname

var Xversionsort64 = Xversionsort

var Xvsyslog = X__vsyslog

var Xwcscoll_l = X__wcscoll_l

var Xwcsftime_l = X__wcsftime_l

var Xwcsxfrm_l = X__wcsxfrm_l

var Xwctrans_l = X__wctrans_l

var Xwctype_l = X__wctype_l

func bool2int(b bool) int32 {
	if b {
		return 1
	}
	return 0
}

var bss = BSS(&bssInit[0])

var bssInit [9568]byte

var ds = DS(dsInit)

var dsInit = []byte{0x64, 0x6c, 0x73, 0x79, 0x6d, 0x00, 0x00, 0x00, 0x63, 0x6c, 0x65, 0x61, 0x6e, 0x75, 0x70, 0x00, 0x61, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x00, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x00, 0x00, 0x00, 0x63, 0x61, 0x74, 0x61, 0x6e, 0x66, 0x00, 0x00, 0x08, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0x00, 0x10, 0x00, 0x10, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x40, 0x00, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0xff, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x06, 0x80, 0x64, 0x00, 0x20, 0x00, 0x07, 0x80, 0xff, 0xff, 0x06, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0xff, 0xff, 0x01, 0xff, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0xff, 0x01, 0xff, 0x01, 0xff, 0x01, 0xff, 0x01, 0xff, 0x01, 0xff, 0x01, 0xff, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0x0a, 0xff, 0x20, 0x00, 0xff, 0xff, 0x03, 0xff, 0x01, 0xff, 0x04, 0xff, 0x1e, 0x00, 0x00, 0x01, 0x05, 0xff, 0xff, 0xff, 0xff, 0xff, 0x63, 0x00, 0x00, 0x08, 0x63, 0x00, 0xe8, 0x03, 0x02, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x01, 0xff, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x01, 0x20, 0x00, 0x04, 0x00, 0x80, 0x00, 0x00, 0x08, 0xff, 0xff, 0x01, 0xff, 0x01, 0xff, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0xff, 0x06, 0xff, 0x07, 0xff, 0x08, 0xff, 0x09, 0xff, 0xff, 0xff, 0xff, 0xff, 0xbc, 0x02, 0xbc, 0x02, 0x01, 0x00, 0xff, 0xff, 0x01, 0x00, 0x01, 0x00, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0x0a, 0xff, 0x01, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0xff, 0x01, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0x01, 0xff, 0x01, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0x01, 0xff, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x28, 0x00, 0x0a, 0xff, 0xff, 0xff, 0xff, 0xff, 0x0a, 0xff, 0x01, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0x01, 0xff, 0xff, 0xff, 0x0a, 0xff, 0x01, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x0a, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5f, 0x5f, 0x63, 0x72, 0x79, 0x70, 0x74, 0x5f, 0x62, 0x6c, 0x6f, 0x77, 0x66, 0x69, 0x73, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x10, 0x10, 0x00, 0x00, 0x10, 0x10, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x00, 0x10, 0x10, 0x00, 0x00, 0x10, 0x10, 0x00, 0x10, 0x10, 0x10, 0x00, 0x10, 0x10, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x20, 0x20, 0x00, 0x00, 0x20, 0x20, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x00, 0x20, 0x20, 0x00, 0x00, 0x20, 0x20, 0x00, 0x20, 0x20, 0x20, 0x00, 0x20, 0x20, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x40, 0x40, 0x00, 0x00, 0x40, 0x40, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x40, 0x00, 0x40, 0x00, 0x40, 0x00, 0x40, 0x00, 0x40, 0x00, 0x00, 0x40, 0x40, 0x00, 0x00, 0x40, 0x40, 0x00, 0x40, 0x40, 0x40, 0x00, 0x40, 0x40, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x80, 0x80, 0x00, 0x00, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x00, 0x80, 0x80, 0x00, 0x00, 0x80, 0x80, 0x00, 0x80, 0x80, 0x80, 0x00, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x00, 0x01, 0x01, 0x00, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x01, 0x01, 0x00, 0x01, 0x00, 0x00, 0x01, 0x01, 0x01, 0x00, 0x01, 0x01, 0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x02, 0x02, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x02, 0x00, 0x02, 0x00, 0x00, 0x02, 0x02, 0x00, 0x02, 0x02, 0x02, 0x00, 0x00, 0x00, 0x00, 0x02, 0x02, 0x00, 0x00, 0x02, 0x00, 0x02, 0x00, 0x02, 0x02, 0x02, 0x00, 0x02, 0x00, 0x00, 0x02, 0x02, 0x02, 0x00, 0x02, 0x02, 0x00, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x04, 0x04, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x04, 0x00, 0x04, 0x00, 0x00, 0x04, 0x04, 0x00, 0x04, 0x04, 0x04, 0x00, 0x00, 0x00, 0x00, 0x04, 0x04, 0x00, 0x00, 0x04, 0x00, 0x04, 0x00, 0x04, 0x04, 0x04, 0x00, 0x04, 0x00, 0x00, 0x04, 0x04, 0x04, 0x00, 0x04, 0x04, 0x00, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x08, 0x08, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x08, 0x00, 0x08, 0x00, 0x00, 0x08, 0x08, 0x00, 0x08, 0x08, 0x08, 0x00, 0x00, 0x00, 0x00, 0x08, 0x08, 0x00, 0x00, 0x08, 0x00, 0x08, 0x00, 0x08, 0x08, 0x08, 0x00, 0x08, 0x00, 0x00, 0x08, 0x08, 0x08, 0x00, 0x08, 0x08, 0x00, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x10, 0x10, 0x00, 0x00, 0x10, 0x10, 0x00, 0x10, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x10, 0x00, 0x00, 0x10, 0x10, 0x00, 0x00, 0x10, 0x10, 0x10, 0x00, 0x10, 0x10, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x20, 0x20, 0x00, 0x00, 0x20, 0x20, 0x00, 0x20, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x20, 0x00, 0x00, 0x20, 0x20, 0x00, 0x00, 0x20, 0x20, 0x20, 0x00, 0x20, 0x20, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x40, 0x40, 0x00, 0x00, 0x40, 0x40, 0x00, 0x40, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x40, 0x00, 0x40, 0x00, 0x40, 0x00, 0x40, 0x00, 0x40, 0x40, 0x00, 0x00, 0x40, 0x40, 0x00, 0x00, 0x40, 0x40, 0x40, 0x00, 0x40, 0x40, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x80, 0x80, 0x00, 0x00, 0x80, 0x80, 0x00, 0x80, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x80, 0x00, 0x00, 0x80, 0x80, 0x00, 0x00, 0x80, 0x80, 0x80, 0x00, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x01, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x01, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x01, 0x01, 0x01, 0x00, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x02, 0x02, 0x00, 0x00, 0x02, 0x02, 0x00, 0x02, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x02, 0x00, 0x02, 0x00, 0x02, 0x00, 0x02, 0x00, 0x02, 0x02, 0x00, 0x00, 0x02, 0x02, 0x00, 0x00, 0x02, 0x02, 0x02, 0x00, 0x02, 0x02, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x04, 0x04, 0x00, 0x00, 0x04, 0x04, 0x00, 0x04, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x04, 0x00, 0x04, 0x00, 0x04, 0x00, 0x04, 0x00, 0x04, 0x04, 0x00, 0x00, 0x04, 0x04, 0x00, 0x00, 0x04, 0x04, 0x04, 0x00, 0x04, 0x04, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x08, 0x08, 0x00, 0x00, 0x08, 0x08, 0x00, 0x08, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x08, 0x00, 0x08, 0x00, 0x08, 0x00, 0x08, 0x00, 0x08, 0x08, 0x00, 0x00, 0x08, 0x08, 0x00, 0x00, 0x08, 0x08, 0x08, 0x00, 0x08, 0x08, 0x08, 0x01, 0x01, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x01, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x02, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x01, 0x00, 0x08, 0x00, 0x01, 0x00, 0x0a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x40, 0x10, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x40, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x20, 0x00, 0x00, 0x00, 0x20, 0x00, 0x40, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x80, 0x40, 0x00, 0x20, 0x80, 0x00, 0x00, 0x20, 0x80, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x08, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x08, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x22, 0x00, 0x02, 0x00, 0x00, 0x00, 0x02, 0x00, 0x20, 0x00, 0x02, 0x00, 0x02, 0x00, 0x02, 0x00, 0x22, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x10, 0x00, 0x04, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x04, 0x00, 0x10, 0x00, 0x04, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x48, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x48, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x80, 0x40, 0x00, 0x08, 0x00, 0x00, 0x00, 0x08, 0x00, 0x40, 0x00, 0x08, 0x80, 0x00, 0x00, 0x08, 0x80, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x10, 0x40, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x10, 0x00, 0x04, 0x00, 0x00, 0x40, 0x04, 0x00, 0x10, 0x40, 0x04, 0x00, 0x00, 0x01, 0x00, 0x00, 0x10, 0x01, 0x00, 0x00, 0x00, 0x41, 0x00, 0x00, 0x10, 0x41, 0x00, 0x00, 0x00, 0x01, 0x04, 0x00, 0x10, 0x01, 0x04, 0x00, 0x00, 0x41, 0x04, 0x00, 0x10, 0x41, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x02, 0x00, 0x00, 0x00, 0x02, 0x00, 0x80, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x02, 0x80, 0x00, 0x02, 0x02, 0x00, 0x00, 0x02, 0x02, 0x80, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0xa0, 0x00, 0x02, 0x00, 0x20, 0x00, 0x02, 0x00, 0xa0, 0x00, 0x00, 0x02, 0x20, 0x00, 0x00, 0x02, 0xa0, 0x00, 0x02, 0x02, 0x20, 0x00, 0x02, 0x02, 0xa0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x04, 0x20, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x24, 0x00, 0x00, 0x04, 0x04, 0x00, 0x00, 0x04, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x04, 0x20, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x24, 0x00, 0x00, 0x04, 0x04, 0x00, 0x00, 0x04, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x08, 0x00, 0x00, 0x00, 0x08, 0x00, 0x01, 0x00, 0x80, 0x00, 0x00, 0x00, 0x80, 0x00, 0x01, 0x00, 0x88, 0x00, 0x00, 0x00, 0x88, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x08, 0x00, 0x00, 0x00, 0x08, 0x00, 0x01, 0x00, 0x80, 0x00, 0x00, 0x00, 0x80, 0x00, 0x01, 0x00, 0x88, 0x00, 0x00, 0x00, 0x88, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x80, 0x20, 0x00, 0x00, 0x80, 0x20, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x81, 0x00, 0x00, 0x00, 0x81, 0x00, 0x00, 0x00, 0x01, 0x20, 0x00, 0x00, 0x01, 0x20, 0x00, 0x00, 0x81, 0x20, 0x00, 0x00, 0x81, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x10, 0x00, 0x80, 0x00, 0x00, 0x00, 0x01, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x81, 0x00, 0x10, 0x00, 0x81, 0x00, 0x00, 0x02, 0x00, 0x00, 0x10, 0x02, 0x00, 0x00, 0x00, 0x02, 0x80, 0x00, 0x10, 0x02, 0x80, 0x00, 0x00, 0x02, 0x01, 0x00, 0x10, 0x02, 0x01, 0x00, 0x00, 0x02, 0x81, 0x00, 0x10, 0x02, 0x81, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x04, 0x08, 0x00, 0x00, 0x10, 0x08, 0x00, 0x00, 0x14, 0x08, 0x00, 0x20, 0x00, 0x00, 0x00, 0x20, 0x04, 0x00, 0x00, 0x20, 0x10, 0x00, 0x00, 0x20, 0x14, 0x00, 0x00, 0x20, 0x00, 0x08, 0x00, 0x20, 0x04, 0x08, 0x00, 0x20, 0x10, 0x08, 0x00, 0x20, 0x14, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x01, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x01, 0x04, 0x00, 0x40, 0x00, 0x00, 0x00, 0x40, 0x01, 0x00, 0x00, 0x40, 0x00, 0x04, 0x00, 0x40, 0x01, 0x04, 0x00, 0x40, 0x00, 0x00, 0x00, 0x40, 0x01, 0x00, 0x00, 0x40, 0x00, 0x04, 0x00, 0x40, 0x01, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x02, 0x02, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x02, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x02, 0x02, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x02, 0x02, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x02, 0x02, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x02, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x02, 0x02, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x02, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x04, 0x04, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x04, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x04, 0x04, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x04, 0x04, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x04, 0x04, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x04, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x04, 0x04, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x04, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x08, 0x08, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x08, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x08, 0x08, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x08, 0x08, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x08, 0x08, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x08, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x08, 0x08, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x08, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x10, 0x10, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x10, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x10, 0x10, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x10, 0x10, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x10, 0x10, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x10, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x10, 0x10, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x10, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x20, 0x20, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x20, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x20, 0x20, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x20, 0x20, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x20, 0x20, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x20, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x20, 0x20, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x20, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x40, 0x40, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x40, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x40, 0x40, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x40, 0x40, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x40, 0x40, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x40, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x40, 0x40, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x40, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x80, 0x80, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x80, 0x80, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x80, 0x80, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x80, 0x80, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x02, 0x02, 0x00, 0x00, 0x02, 0x02, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x02, 0x02, 0x00, 0x00, 0x02, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x02, 0x02, 0x00, 0x00, 0x02, 0x02, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x02, 0x02, 0x00, 0x00, 0x02, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x04, 0x04, 0x00, 0x00, 0x04, 0x04, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x04, 0x04, 0x00, 0x00, 0x04, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x04, 0x04, 0x00, 0x00, 0x04, 0x04, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x04, 0x04, 0x00, 0x00, 0x04, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x08, 0x08, 0x00, 0x00, 0x08, 0x08, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x08, 0x08, 0x00, 0x00, 0x08, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x08, 0x08, 0x00, 0x00, 0x08, 0x08, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x08, 0x08, 0x00, 0x00, 0x08, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x10, 0x10, 0x00, 0x00, 0x10, 0x10, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x10, 0x10, 0x00, 0x00, 0x10, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x10, 0x10, 0x00, 0x00, 0x10, 0x10, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x10, 0x10, 0x00, 0x00, 0x10, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x20, 0x20, 0x00, 0x00, 0x20, 0x20, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x20, 0x20, 0x00, 0x00, 0x20, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x20, 0x20, 0x00, 0x00, 0x20, 0x20, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x20, 0x20, 0x00, 0x00, 0x20, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x40, 0x40, 0x00, 0x00, 0x40, 0x40, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x40, 0x40, 0x00, 0x00, 0x40, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x40, 0x40, 0x00, 0x00, 0x40, 0x40, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x40, 0x40, 0x00, 0x00, 0x40, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x80, 0x80, 0x00, 0x00, 0x80, 0x80, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x80, 0x80, 0x00, 0x00, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x80, 0x80, 0x00, 0x00, 0x80, 0x80, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x80, 0x80, 0x00, 0x00, 0x80, 0x80, 0x00, 0x00, 0x00, 0x82, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x02, 0x82, 0x80, 0x00, 0x02, 0x80, 0x80, 0x00, 0x02, 0x82, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x82, 0x80, 0x00, 0x02, 0x82, 0x80, 0x00, 0x00, 0x02, 0x00, 0x00, 0x02, 0x02, 0x80, 0x00, 0x02, 0x80, 0x80, 0x00, 0x00, 0x00, 0x80, 0x00, 0x02, 0x00, 0x00, 0x00, 0x02, 0x02, 0x00, 0x00, 0x00, 0x02, 0x80, 0x00, 0x00, 0x02, 0x80, 0x00, 0x00, 0x82, 0x00, 0x00, 0x00, 0x82, 0x00, 0x00, 0x00, 0x80, 0x80, 0x00, 0x00, 0x80, 0x80, 0x00, 0x02, 0x02, 0x80, 0x00, 0x02, 0x80, 0x00, 0x00, 0x02, 0x00, 0x80, 0x00, 0x02, 0x00, 0x80, 0x00, 0x02, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x02, 0x00, 0x00, 0x02, 0x82, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x80, 0x00, 0x00, 0x02, 0x82, 0x80, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x00, 0x00, 0x82, 0x80, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x02, 0x00, 0x00, 0x02, 0x80, 0x80, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x82, 0x00, 0x00, 0x02, 0x00, 0x80, 0x00, 0x00, 0x02, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x02, 0x02, 0x80, 0x00, 0x02, 0x82, 0x00, 0x00, 0x02, 0x82, 0x80, 0x00, 0x02, 0x80, 0x00, 0x00, 0x00, 0x80, 0x80, 0x00, 0x02, 0x02, 0x80, 0x00, 0x02, 0x00, 0x80, 0x00, 0x02, 0x02, 0x00, 0x00, 0x02, 0x82, 0x00, 0x00, 0x00, 0x82, 0x80, 0x00, 0x02, 0x02, 0x00, 0x00, 0x00, 0x02, 0x80, 0x00, 0x00, 0x02, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x80, 0x00, 0x00, 0x00, 0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x80, 0x80, 0x00, 0x10, 0x40, 0x08, 0x40, 0x00, 0x40, 0x00, 0x40, 0x00, 0x40, 0x00, 0x00, 0x10, 0x40, 0x08, 0x00, 0x00, 0x00, 0x08, 0x00, 0x10, 0x00, 0x00, 0x00, 0x10, 0x00, 0x08, 0x40, 0x10, 0x40, 0x00, 0x40, 0x10, 0x00, 0x00, 0x40, 0x10, 0x40, 0x08, 0x40, 0x00, 0x40, 0x08, 0x40, 0x00, 0x00, 0x00, 0x40, 0x00, 0x40, 0x00, 0x40, 0x00, 0x00, 0x08, 0x00, 0x10, 0x00, 0x00, 0x00, 0x10, 0x00, 0x08, 0x40, 0x00, 0x40, 0x08, 0x00, 0x10, 0x00, 0x08, 0x00, 0x10, 0x40, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x40, 0x00, 0x00, 0x10, 0x40, 0x08, 0x00, 0x00, 0x00, 0x08, 0x40, 0x10, 0x00, 0x08, 0x00, 0x10, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x08, 0x00, 0x10, 0x40, 0x00, 0x00, 0x00, 0x40, 0x08, 0x40, 0x00, 0x00, 0x08, 0x40, 0x10, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x40, 0x08, 0x00, 0x10, 0x00, 0x08, 0x40, 0x00, 0x00, 0x08, 0x00, 0x10, 0x40, 0x00, 0x40, 0x00, 0x00, 0x08, 0x40, 0x00, 0x40, 0x08, 0x40, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x08, 0x40, 0x00, 0x40, 0x00, 0x40, 0x10, 0x00, 0x00, 0x00, 0x10, 0x40, 0x08, 0x40, 0x10, 0x40, 0x08, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x10, 0x40, 0x00, 0x00, 0x00, 0x40, 0x08, 0x40, 0x00, 0x00, 0x08, 0x00, 0x10, 0x00, 0x00, 0x40, 0x10, 0x00, 0x08, 0x00, 0x10, 0x40, 0x00, 0x40, 0x10, 0x00, 0x00, 0x40, 0x10, 0x00, 0x08, 0x00, 0x00, 0x40, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x40, 0x10, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x10, 0x00, 0x08, 0x40, 0x10, 0x40, 0x08, 0x40, 0x00, 0x40, 0x08, 0x00, 0x04, 0x01, 0x00, 0x00, 0x00, 0x01, 0x01, 0x04, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x01, 0x04, 0x00, 0x01, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x04, 0x01, 0x01, 0x00, 0x00, 0x01, 0x00, 0x04, 0x04, 0x00, 0x01, 0x00, 0x04, 0x00, 0x00, 0x04, 0x04, 0x00, 0x00, 0x04, 0x00, 0x00, 0x01, 0x00, 0x04, 0x01, 0x01, 0x04, 0x04, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x04, 0x04, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x04, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x04, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x01, 0x04, 0x04, 0x00, 0x01, 0x04, 0x04, 0x01, 0x01, 0x00, 0x04, 0x01, 0x00, 0x04, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x04, 0x01, 0x00, 0x04, 0x04, 0x00, 0x00, 0x00, 0x04, 0x01, 0x01, 0x04, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x01, 0x01, 0x04, 0x00, 0x00, 0x00, 0x04, 0x04, 0x00, 0x01, 0x00, 0x04, 0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x01, 0x01, 0x04, 0x00, 0x01, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x04, 0x00, 0x01, 0x00, 0x04, 0x01, 0x01, 0x04, 0x00, 0x01, 0x00, 0x04, 0x04, 0x00, 0x00, 0x04, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x01, 0x04, 0x04, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x04, 0x04, 0x01, 0x01, 0x04, 0x04, 0x00, 0x00, 0x00, 0x04, 0x01, 0x01, 0x00, 0x00, 0x01, 0x01, 0x00, 0x04, 0x00, 0x00, 0x04, 0x00, 0x00, 0x01, 0x04, 0x04, 0x01, 0x00, 0x04, 0x04, 0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0x04, 0x04, 0x01, 0x01, 0x00, 0x04, 0x00, 0x00, 0x00, 0x04, 0x00, 0x01, 0x04, 0x00, 0x01, 0x01, 0x00, 0x00, 0x10, 0x40, 0x80, 0x40, 0x10, 0x00, 0x80, 0x40, 0x10, 0x00, 0x80, 0x40, 0x00, 0x00, 0x00, 0x40, 0x10, 0x40, 0x00, 0x40, 0x00, 0x40, 0x80, 0x00, 0x00, 0x40, 0x80, 0x00, 0x10, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x40, 0x00, 0x00, 0x10, 0x40, 0x00, 0x40, 0x10, 0x40, 0x80, 0x40, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x40, 0x00, 0x00, 0x00, 0x40, 0x80, 0x00, 0x00, 0x00, 0x80, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x10, 0x40, 0x80, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x10, 0x00, 0x80, 0x40, 0x10, 0x00, 0x00, 0x40, 0x00, 0x40, 0x80, 0x00, 0x00, 0x00, 0x80, 0x40, 0x10, 0x00, 0x00, 0x40, 0x00, 0x40, 0x00, 0x00, 0x10, 0x00, 0x00, 0x40, 0x10, 0x40, 0x00, 0x40, 0x10, 0x40, 0x80, 0x40, 0x00, 0x00, 0x80, 0x40, 0x00, 0x40, 0x00, 0x00, 0x00, 0x40, 0x80, 0x00, 0x10, 0x40, 0x00, 0x40, 0x10, 0x40, 0x80, 0x40, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x40, 0x00, 0x40, 0x10, 0x00, 0x00, 0x40, 0x00, 0x40, 0x00, 0x40, 0x00, 0x40, 0x80, 0x00, 0x00, 0x00, 0x80, 0x00, 0x10, 0x40, 0x80, 0x40, 0x10, 0x00, 0x80, 0x40, 0x10, 0x00, 0x80, 0x40, 0x00, 0x00, 0x00, 0x40, 0x10, 0x40, 0x80, 0x40, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x80, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x40, 0x80, 0x00, 0x10, 0x00, 0x80, 0x40, 0x10, 0x40, 0x00, 0x40, 0x00, 0x40, 0x80, 0x00, 0x10, 0x00, 0x80, 0x40, 0x10, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x10, 0x40, 0x80, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x10, 0x00, 0x00, 0x40, 0x10, 0x40, 0x00, 0x80, 0x00, 0x00, 0x00, 0x80, 0x00, 0x04, 0x01, 0x00, 0x00, 0x04, 0x01, 0x80, 0x00, 0x00, 0x21, 0x00, 0x00, 0x04, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x04, 0x01, 0x80, 0x00, 0x04, 0x20, 0x00, 0x00, 0x04, 0x00, 0x80, 0x00, 0x00, 0x01, 0x80, 0x00, 0x04, 0x20, 0x80, 0x00, 0x00, 0x21, 0x00, 0x00, 0x04, 0x21, 0x80, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x04, 0x20, 0x00, 0x00, 0x04, 0x20, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x20, 0x80, 0x00, 0x04, 0x21, 0x80, 0x00, 0x04, 0x21, 0x80, 0x00, 0x00, 0x01, 0x00, 0x00, 0x04, 0x21, 0x80, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x21, 0x80, 0x00, 0x04, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x21, 0x80, 0x00, 0x04, 0x00, 0x00, 0x00, 0x04, 0x00, 0x80, 0x00, 0x00, 0x21, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x04, 0x01, 0x80, 0x00, 0x00, 0x21, 0x80, 0x00, 0x04, 0x20, 0x80, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x04, 0x21, 0x80, 0x00, 0x04, 0x01, 0x80, 0x00, 0x04, 0x20, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x04, 0x21, 0x80, 0x00, 0x04, 0x21, 0x80, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x21, 0x80, 0x00, 0x04, 0x21, 0x00, 0x00, 0x04, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x20, 0x00, 0x00, 0x00, 0x21, 0x80, 0x00, 0x04, 0x00, 0x80, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x20, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x20, 0x80, 0x00, 0x04, 0x01, 0x80, 0x00, 0x00, 0x20, 0x08, 0x00, 0x00, 0x10, 0x00, 0x00, 0x20, 0x10, 0x00, 0x20, 0x00, 0x00, 0x08, 0x20, 0x20, 0x10, 0x00, 0x00, 0x20, 0x10, 0x08, 0x00, 0x00, 0x00, 0x08, 0x20, 0x20, 0x10, 0x00, 0x00, 0x20, 0x00, 0x00, 0x20, 0x00, 0x10, 0x08, 0x20, 0x20, 0x00, 0x00, 0x00, 0x20, 0x00, 0x08, 0x00, 0x00, 0x10, 0x08, 0x00, 0x20, 0x00, 0x00, 0x20, 0x00, 0x10, 0x00, 0x00, 0x00, 0x10, 0x08, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x20, 0x00, 0x08, 0x20, 0x00, 0x10, 0x00, 0x20, 0x00, 0x00, 0x00, 0x20, 0x20, 0x00, 0x08, 0x20, 0x00, 0x10, 0x08, 0x00, 0x00, 0x00, 0x08, 0x00, 0x20, 0x10, 0x08, 0x00, 0x20, 0x10, 0x00, 0x00, 0x00, 0x00, 0x08, 0x20, 0x20, 0x00, 0x00, 0x20, 0x20, 0x10, 0x08, 0x20, 0x00, 0x00, 0x00, 0x20, 0x20, 0x00, 0x00, 0x20, 0x20, 0x10, 0x00, 0x00, 0x00, 0x10, 0x00, 0x20, 0x00, 0x10, 0x08, 0x00, 0x00, 0x00, 0x08, 0x00, 0x20, 0x10, 0x00, 0x20, 0x20, 0x00, 0x08, 0x20, 0x20, 0x10, 0x00, 0x00, 0x20, 0x00, 0x08, 0x20, 0x00, 0x00, 0x08, 0x00, 0x00, 0x10, 0x00, 0x00, 0x20, 0x00, 0x00, 0x20, 0x00, 0x10, 0x00, 0x00, 0x00, 0x10, 0x08, 0x20, 0x00, 0x00, 0x08, 0x00, 0x00, 0x10, 0x08, 0x20, 0x20, 0x10, 0x00, 0x20, 0x20, 0x00, 0x00, 0x00, 0x20, 0x10, 0x08, 0x20, 0x20, 0x00, 0x00, 0x20, 0x20, 0x10, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x20, 0x10, 0x08, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x20, 0x10, 0x08, 0x20, 0x20, 0x00, 0x00, 0x20, 0x00, 0x00, 0x08, 0x00, 0x20, 0x00, 0x08, 0x20, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x20, 0x10, 0x00, 0x00, 0x00, 0x10, 0x08, 0x00, 0x20, 0x00, 0x08, 0x20, 0x00, 0x10, 0x00, 0x00, 0x10, 0x00, 0x01, 0x00, 0x10, 0x02, 0x01, 0x04, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x01, 0x04, 0x00, 0x02, 0x01, 0x04, 0x10, 0x00, 0x00, 0x04, 0x10, 0x02, 0x01, 0x04, 0x10, 0x02, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x02, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x01, 0x00, 0x10, 0x02, 0x01, 0x04, 0x00, 0x00, 0x00, 0x04, 0x00, 0x02, 0x01, 0x04, 0x10, 0x00, 0x01, 0x00, 0x10, 0x00, 0x00, 0x04, 0x00, 0x02, 0x01, 0x00, 0x00, 0x02, 0x00, 0x00, 0x10, 0x02, 0x00, 0x04, 0x10, 0x02, 0x01, 0x00, 0x10, 0x00, 0x00, 0x00, 0x10, 0x02, 0x00, 0x04, 0x00, 0x00, 0x01, 0x04, 0x00, 0x00, 0x01, 0x04, 0x10, 0x02, 0x00, 0x04, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x04, 0x10, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x04, 0x10, 0x00, 0x00, 0x00, 0x10, 0x00, 0x01, 0x04, 0x00, 0x02, 0x01, 0x04, 0x00, 0x02, 0x01, 0x00, 0x10, 0x02, 0x01, 0x00, 0x10, 0x02, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x04, 0x00, 0x02, 0x00, 0x00, 0x10, 0x00, 0x00, 0x04, 0x10, 0x02, 0x01, 0x04, 0x00, 0x00, 0x01, 0x04, 0x10, 0x00, 0x00, 0x04, 0x10, 0x02, 0x01, 0x04, 0x00, 0x00, 0x01, 0x00, 0x00, 0x02, 0x01, 0x04, 0x10, 0x02, 0x00, 0x00, 0x10, 0x02, 0x00, 0x04, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x04, 0x10, 0x02, 0x00, 0x00, 0x00, 0x00, 0x01, 0x04, 0x10, 0x00, 0x00, 0x00, 0x10, 0x02, 0x00, 0x04, 0x00, 0x00, 0x01, 0x00, 0x00, 0x02, 0x00, 0x04, 0x00, 0x02, 0x00, 0x04, 0x00, 0x00, 0x01, 0x00, 0x10, 0x00, 0x20, 0x08, 0x00, 0x08, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x20, 0x08, 0x02, 0x08, 0x00, 0x00, 0x00, 0x08, 0x20, 0x08, 0x00, 0x08, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x20, 0x00, 0x02, 0x00, 0x00, 0x00, 0x02, 0x08, 0x20, 0x08, 0x02, 0x08, 0x00, 0x08, 0x02, 0x00, 0x00, 0x08, 0x02, 0x08, 0x20, 0x08, 0x02, 0x00, 0x00, 0x08, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x08, 0x20, 0x00, 0x00, 0x08, 0x00, 0x08, 0x00, 0x08, 0x20, 0x08, 0x00, 0x00, 0x00, 0x08, 0x02, 0x00, 0x20, 0x00, 0x02, 0x00, 0x20, 0x00, 0x02, 0x08, 0x00, 0x08, 0x02, 0x08, 0x20, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x02, 0x08, 0x20, 0x00, 0x00, 0x08, 0x00, 0x08, 0x00, 0x08, 0x20, 0x08, 0x02, 0x00, 0x00, 0x00, 0x02, 0x00, 0x20, 0x08, 0x02, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x08, 0x02, 0x08, 0x00, 0x08, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x20, 0x00, 0x02, 0x08, 0x00, 0x08, 0x00, 0x00, 0x20, 0x08, 0x02, 0x00, 0x00, 0x08, 0x00, 0x08, 0x20, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x08, 0x00, 0x00, 0x02, 0x08, 0x20, 0x00, 0x02, 0x08, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x02, 0x00, 0x20, 0x08, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x20, 0x08, 0x02, 0x08, 0x20, 0x00, 0x02, 0x00, 0x20, 0x00, 0x00, 0x08, 0x00, 0x00, 0x02, 0x08, 0x00, 0x08, 0x00, 0x08, 0x20, 0x08, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x20, 0x08, 0x02, 0x08, 0x00, 0x08, 0x02, 0x00, 0x00, 0x08, 0x02, 0x00, 0x20, 0x08, 0x00, 0x00, 0x20, 0x08, 0x00, 0x00, 0x20, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x08, 0x02, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x40, 0x40, 0x00, 0x40, 0x00, 0x00, 0x00, 0x40, 0x00, 0x40, 0x00, 0x40, 0x40, 0x00, 0x00, 0x40, 0x40, 0x40, 0x40, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x40, 0x40, 0x00, 0x40, 0x00, 0x40, 0x00, 0x40, 0x40, 0x40, 0x40, 0x00, 0x00, 0x40, 0x40, 0x00, 0x40, 0x40, 0x40, 0x40, 0x00, 0x40, 0x40, 0x40, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x10, 0x10, 0x00, 0x10, 0x00, 0x00, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x10, 0x00, 0x00, 0x10, 0x10, 0x10, 0x10, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x10, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x10, 0x10, 0x10, 0x00, 0x00, 0x10, 0x10, 0x00, 0x10, 0x10, 0x10, 0x10, 0x00, 0x10, 0x10, 0x10, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x04, 0x04, 0x00, 0x04, 0x00, 0x00, 0x00, 0x04, 0x00, 0x04, 0x00, 0x04, 0x04, 0x00, 0x00, 0x04, 0x04, 0x04, 0x04, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x04, 0x04, 0x00, 0x04, 0x00, 0x04, 0x00, 0x04, 0x04, 0x04, 0x04, 0x00, 0x00, 0x04, 0x04, 0x00, 0x04, 0x04, 0x04, 0x04, 0x00, 0x04, 0x04, 0x04, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x01, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x01, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x01, 0x01, 0x00, 0x01, 0x01, 0x01, 0x01, 0x00, 0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x80, 0x80, 0x00, 0x80, 0x00, 0x00, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x80, 0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x80, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x80, 0x80, 0x00, 0x80, 0x80, 0x80, 0x80, 0x00, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x20, 0x20, 0x00, 0x20, 0x00, 0x00, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x20, 0x00, 0x00, 0x20, 0x20, 0x20, 0x20, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x20, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x20, 0x20, 0x20, 0x00, 0x00, 0x20, 0x20, 0x00, 0x20, 0x20, 0x20, 0x20, 0x00, 0x20, 0x20, 0x20, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x08, 0x08, 0x00, 0x08, 0x00, 0x00, 0x00, 0x08, 0x00, 0x08, 0x00, 0x08, 0x08, 0x00, 0x00, 0x08, 0x08, 0x08, 0x08, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x08, 0x08, 0x00, 0x08, 0x00, 0x08, 0x00, 0x08, 0x08, 0x08, 0x08, 0x00, 0x00, 0x08, 0x08, 0x00, 0x08, 0x08, 0x08, 0x08, 0x00, 0x08, 0x08, 0x08, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x02, 0x02, 0x00, 0x02, 0x00, 0x00, 0x00, 0x02, 0x00, 0x02, 0x00, 0x02, 0x02, 0x00, 0x00, 0x02, 0x02, 0x02, 0x02, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x02, 0x02, 0x00, 0x02, 0x00, 0x02, 0x00, 0x02, 0x02, 0x02, 0x02, 0x00, 0x00, 0x02, 0x02, 0x00, 0x02, 0x02, 0x02, 0x02, 0x00, 0x02, 0x02, 0x02, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x40, 0x40, 0x00, 0x40, 0x00, 0x00, 0x00, 0x40, 0x00, 0x40, 0x00, 0x40, 0x40, 0x00, 0x00, 0x40, 0x40, 0x40, 0x40, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x40, 0x40, 0x00, 0x40, 0x00, 0x40, 0x00, 0x40, 0x40, 0x40, 0x40, 0x00, 0x00, 0x40, 0x40, 0x00, 0x40, 0x40, 0x40, 0x40, 0x00, 0x40, 0x40, 0x40, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x10, 0x10, 0x00, 0x10, 0x00, 0x00, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x10, 0x00, 0x00, 0x10, 0x10, 0x10, 0x10, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x10, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x10, 0x10, 0x10, 0x00, 0x00, 0x10, 0x10, 0x00, 0x10, 0x10, 0x10, 0x10, 0x00, 0x10, 0x10, 0x10, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x04, 0x04, 0x00, 0x04, 0x00, 0x00, 0x00, 0x04, 0x00, 0x04, 0x00, 0x04, 0x04, 0x00, 0x00, 0x04, 0x04, 0x04, 0x04, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x04, 0x04, 0x00, 0x04, 0x00, 0x04, 0x00, 0x04, 0x04, 0x04, 0x04, 0x00, 0x00, 0x04, 0x04, 0x00, 0x04, 0x04, 0x04, 0x04, 0x00, 0x04, 0x04, 0x04, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x01, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x01, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x01, 0x01, 0x00, 0x01, 0x01, 0x01, 0x01, 0x00, 0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x80, 0x80, 0x00, 0x80, 0x00, 0x00, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x80, 0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x80, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x80, 0x80, 0x00, 0x80, 0x80, 0x80, 0x80, 0x00, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x20, 0x20, 0x00, 0x20, 0x00, 0x00, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x20, 0x00, 0x00, 0x20, 0x20, 0x20, 0x20, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x20, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x20, 0x20, 0x20, 0x00, 0x00, 0x20, 0x20, 0x00, 0x20, 0x20, 0x20, 0x20, 0x00, 0x20, 0x20, 0x20, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x08, 0x08, 0x00, 0x08, 0x00, 0x00, 0x00, 0x08, 0x00, 0x08, 0x00, 0x08, 0x08, 0x00, 0x00, 0x08, 0x08, 0x08, 0x08, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x08, 0x08, 0x00, 0x08, 0x00, 0x08, 0x00, 0x08, 0x08, 0x08, 0x08, 0x00, 0x00, 0x08, 0x08, 0x00, 0x08, 0x08, 0x08, 0x08, 0x00, 0x08, 0x08, 0x08, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x02, 0x02, 0x00, 0x02, 0x00, 0x00, 0x00, 0x02, 0x00, 0x02, 0x00, 0x02, 0x02, 0x00, 0x00, 0x02, 0x02, 0x02, 0x02, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x02, 0x02, 0x00, 0x02, 0x00, 0x02, 0x00, 0x02, 0x02, 0x02, 0x02, 0x00, 0x00, 0x02, 0x02, 0x00, 0x02, 0x02, 0x02, 0x02, 0x00, 0x02, 0x02, 0x02, 0x02, 0x2e, 0x2f, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4a, 0x4b, 0x4c, 0x4d, 0x4e, 0x4f, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5a, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6a, 0x6b, 0x6c, 0x6d, 0x6e, 0x6f, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x58, 0x79, 0x30, 0x31, 0x40, 0x23, 0x01, 0x02, 0x80, 0x7f, 0xff, 0x0d, 0x0a, 0x81, 0x09, 0x20, 0x21, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x24, 0x31, 0x24, 0x61, 0x62, 0x63, 0x64, 0x30, 0x31, 0x32, 0x33, 0x24, 0x00, 0x00, 0x00, 0x00, 0x24, 0x31, 0x24, 0x61, 0x62, 0x63, 0x64, 0x30, 0x31, 0x32, 0x33, 0x24, 0x39, 0x51, 0x63, 0x67, 0x38, 0x44, 0x79, 0x76, 0x69, 0x65, 0x6b, 0x56, 0x33, 0x74, 0x44, 0x47, 0x4d, 0x5a, 0x79, 0x6e, 0x4a, 0x31, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x6d, 0x64, 0x35, 0x63, 0x72, 0x79, 0x70, 0x74, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x78, 0xa4, 0x6a, 0xd7, 0x56, 0xb7, 0xc7, 0xe8, 0xdb, 0x70, 0x20, 0x24, 0xee, 0xce, 0xbd, 0xc1, 0xaf, 0x0f, 0x7c, 0xf5, 0x2a, 0xc6, 0x87, 0x47, 0x13, 0x46, 0x30, 0xa8, 0x01, 0x95, 0x46, 0xfd, 0xd8, 0x98, 0x80, 0x69, 0xaf, 0xf7, 0x44, 0x8b, 0xb1, 0x5b, 0xff, 0xff, 0xbe, 0xd7, 0x5c, 0x89, 0x22, 0x11, 0x90, 0x6b, 0x93, 0x71, 0x98, 0xfd, 0x8e, 0x43, 0x79, 0xa6, 0x21, 0x08, 0xb4, 0x49, 0x62, 0x25, 0x1e, 0xf6, 0x40, 0xb3, 0x40, 0xc0, 0x51, 0x5a, 0x5e, 0x26, 0xaa, 0xc7, 0xb6, 0xe9, 0x5d, 0x10, 0x2f, 0xd6, 0x53, 0x14, 0x44, 0x02, 0x81, 0xe6, 0xa1, 0xd8, 0xc8, 0xfb, 0xd3, 0xe7, 0xe6, 0xcd, 0xe1, 0x21, 0xd6, 0x07, 0x37, 0xc3, 0x87, 0x0d, 0xd5, 0xf4, 0xed, 0x14, 0x5a, 0x45, 0x05, 0xe9, 0xe3, 0xa9, 0xf8, 0xa3, 0xef, 0xfc, 0xd9, 0x02, 0x6f, 0x67, 0x8a, 0x4c, 0x2a, 0x8d, 0x42, 0x39, 0xfa, 0xff, 0x81, 0xf6, 0x71, 0x87, 0x22, 0x61, 0x9d, 0x6d, 0x0c, 0x38, 0xe5, 0xfd, 0x44, 0xea, 0xbe, 0xa4, 0xa9, 0xcf, 0xde, 0x4b, 0x60, 0x4b, 0xbb, 0xf6, 0x70, 0xbc, 0xbf, 0xbe, 0xc6, 0x7e, 0x9b, 0x28, 0xfa, 0x27, 0xa1, 0xea, 0x85, 0x30, 0xef, 0xd4, 0x05, 0x1d, 0x88, 0x04, 0x39, 0xd0, 0xd4, 0xd9, 0xe5, 0x99, 0xdb, 0xe6, 0xf8, 0x7c, 0xa2, 0x1f, 0x65, 0x56, 0xac, 0xc4, 0x44, 0x22, 0x29, 0xf4, 0x97, 0xff, 0x2a, 0x43, 0xa7, 0x23, 0x94, 0xab, 0x39, 0xa0, 0x93, 0xfc, 0xc3, 0x59, 0x5b, 0x65, 0x92, 0xcc, 0x0c, 0x8f, 0x7d, 0xf4, 0xef, 0xff, 0xd1, 0x5d, 0x84, 0x85, 0x4f, 0x7e, 0xa8, 0x6f, 0xe0, 0xe6, 0x2c, 0xfe, 0x14, 0x43, 0x01, 0xa3, 0xa1, 0x11, 0x08, 0x4e, 0x82, 0x7e, 0x53, 0xf7, 0x35, 0xf2, 0x3a, 0xbd, 0xbb, 0xd2, 0xd7, 0x2a, 0x91, 0xd3, 0x86, 0xeb, 0x58, 0x79, 0x30, 0x31, 0x40, 0x23, 0x01, 0x02, 0x80, 0x7f, 0xff, 0x0d, 0x0a, 0x81, 0x09, 0x20, 0x21, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x24, 0x35, 0x24, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x3d, 0x31, 0x32, 0x33, 0x34, 0x24, 0x61, 0x62, 0x63, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x24, 0x00, 0x00, 0x00, 0x24, 0x35, 0x24, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x3d, 0x31, 0x32, 0x33, 0x34, 0x24, 0x61, 0x62, 0x63, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x24, 0x33, 0x56, 0x66, 0x44, 0x6a, 0x50, 0x74, 0x30, 0x35, 0x56, 0x48, 0x46, 0x6e, 0x34, 0x37, 0x43, 0x2f, 0x6f, 0x6a, 0x46, 0x5a, 0x36, 0x4b, 0x52, 0x50, 0x59, 0x72, 0x4f, 0x6a, 0x6a, 0x31, 0x6c, 0x4c, 0x62, 0x48, 0x2e, 0x64, 0x6b, 0x46, 0x33, 0x62, 0x5a, 0x36, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x73, 0x68, 0x61, 0x32, 0x35, 0x36, 0x63, 0x72, 0x79, 0x70, 0x74, 0x00, 0x00, 0x00, 0x00, 0x00, 0x98, 0x2f, 0x8a, 0x42, 0x91, 0x44, 0x37, 0x71, 0xcf, 0xfb, 0xc0, 0xb5, 0xa5, 0xdb, 0xb5, 0xe9, 0x5b, 0xc2, 0x56, 0x39, 0xf1, 0x11, 0xf1, 0x59, 0xa4, 0x82, 0x3f, 0x92, 0xd5, 0x5e, 0x1c, 0xab, 0x98, 0xaa, 0x07, 0xd8, 0x01, 0x5b, 0x83, 0x12, 0xbe, 0x85, 0x31, 0x24, 0xc3, 0x7d, 0x0c, 0x55, 0x74, 0x5d, 0xbe, 0x72, 0xfe, 0xb1, 0xde, 0x80, 0xa7, 0x06, 0xdc, 0x9b, 0x74, 0xf1, 0x9b, 0xc1, 0xc1, 0x69, 0x9b, 0xe4, 0x86, 0x47, 0xbe, 0xef, 0xc6, 0x9d, 0xc1, 0x0f, 0xcc, 0xa1, 0x0c, 0x24, 0x6f, 0x2c, 0xe9, 0x2d, 0xaa, 0x84, 0x74, 0x4a, 0xdc, 0xa9, 0xb0, 0x5c, 0xda, 0x88, 0xf9, 0x76, 0x52, 0x51, 0x3e, 0x98, 0x6d, 0xc6, 0x31, 0xa8, 0xc8, 0x27, 0x03, 0xb0, 0xc7, 0x7f, 0x59, 0xbf, 0xf3, 0x0b, 0xe0, 0xc6, 0x47, 0x91, 0xa7, 0xd5, 0x51, 0x63, 0xca, 0x06, 0x67, 0x29, 0x29, 0x14, 0x85, 0x0a, 0xb7, 0x27, 0x38, 0x21, 0x1b, 0x2e, 0xfc, 0x6d, 0x2c, 0x4d, 0x13, 0x0d, 0x38, 0x53, 0x54, 0x73, 0x0a, 0x65, 0xbb, 0x0a, 0x6a, 0x76, 0x2e, 0xc9, 0xc2, 0x81, 0x85, 0x2c, 0x72, 0x92, 0xa1, 0xe8, 0xbf, 0xa2, 0x4b, 0x66, 0x1a, 0xa8, 0x70, 0x8b, 0x4b, 0xc2, 0xa3, 0x51, 0x6c, 0xc7, 0x19, 0xe8, 0x92, 0xd1, 0x24, 0x06, 0x99, 0xd6, 0x85, 0x35, 0x0e, 0xf4, 0x70, 0xa0, 0x6a, 0x10, 0x16, 0xc1, 0xa4, 0x19, 0x08, 0x6c, 0x37, 0x1e, 0x4c, 0x77, 0x48, 0x27, 0xb5, 0xbc, 0xb0, 0x34, 0xb3, 0x0c, 0x1c, 0x39, 0x4a, 0xaa, 0xd8, 0x4e, 0x4f, 0xca, 0x9c, 0x5b, 0xf3, 0x6f, 0x2e, 0x68, 0xee, 0x82, 0x8f, 0x74, 0x6f, 0x63, 0xa5, 0x78, 0x14, 0x78, 0xc8, 0x84, 0x08, 0x02, 0xc7, 0x8c, 0xfa, 0xff, 0xbe, 0x90, 0xeb, 0x6c, 0x50, 0xa4, 0xf7, 0xa3, 0xf9, 0xbe, 0xf2, 0x78, 0x71, 0xc6, 0x58, 0x79, 0x30, 0x31, 0x40, 0x23, 0x01, 0x02, 0x80, 0x7f, 0xff, 0x0d, 0x0a, 0x81, 0x09, 0x20, 0x21, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x24, 0x36, 0x24, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x3d, 0x31, 0x32, 0x33, 0x34, 0x24, 0x61, 0x62, 0x63, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x24, 0x00, 0x00, 0x00, 0x24, 0x36, 0x24, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x3d, 0x31, 0x32, 0x33, 0x34, 0x24, 0x61, 0x62, 0x63, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x24, 0x42, 0x43, 0x70, 0x74, 0x38, 0x7a, 0x4c, 0x72, 0x63, 0x2f, 0x52, 0x63, 0x79, 0x75, 0x58, 0x6d, 0x43, 0x44, 0x4f, 0x45, 0x31, 0x41, 0x4c, 0x71, 0x4d, 0x58, 0x42, 0x32, 0x4d, 0x48, 0x36, 0x6e, 0x31, 0x67, 0x38, 0x39, 0x31, 0x48, 0x68, 0x46, 0x6a, 0x38, 0x2e, 0x77, 0x37, 0x4c, 0x78, 0x47, 0x76, 0x2e, 0x46, 0x54, 0x6b, 0x71, 0x71, 0x36, 0x56, 0x78, 0x63, 0x2f, 0x6b, 0x6d, 0x33, 0x59, 0x30, 0x6a, 0x45, 0x30, 0x6a, 0x32, 0x34, 0x6a, 0x59, 0x35, 0x50, 0x49, 0x76, 0x2f, 0x6f, 0x4f, 0x75, 0x36, 0x72, 0x65, 0x67, 0x31, 0x00, 0x00, 0x00, 0x00, 0x00, 0x73, 0x68, 0x61, 0x35, 0x31, 0x32, 0x63, 0x72, 0x79, 0x70, 0x74, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2e, 0x2f, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4a, 0x4b, 0x4c, 0x4d, 0x4e, 0x4f, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5a, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6a, 0x6b, 0x6c, 0x6d, 0x6e, 0x6f, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x22, 0xae, 0x28, 0xd7, 0x98, 0x2f, 0x8a, 0x42, 0xcd, 0x65, 0xef, 0x23, 0x91, 0x44, 0x37, 0x71, 0x2f, 0x3b, 0x4d, 0xec, 0xcf, 0xfb, 0xc0, 0xb5, 0xbc, 0xdb, 0x89, 0x81, 0xa5, 0xdb, 0xb5, 0xe9, 0x38, 0xb5, 0x48, 0xf3, 0x5b, 0xc2, 0x56, 0x39, 0x19, 0xd0, 0x05, 0xb6, 0xf1, 0x11, 0xf1, 0x59, 0x9b, 0x4f, 0x19, 0xaf, 0xa4, 0x82, 0x3f, 0x92, 0x18, 0x81, 0x6d, 0xda, 0xd5, 0x5e, 0x1c, 0xab, 0x42, 0x02, 0x03, 0xa3, 0x98, 0xaa, 0x07, 0xd8, 0xbe, 0x6f, 0x70, 0x45, 0x01, 0x5b, 0x83, 0x12, 0x8c, 0xb2, 0xe4, 0x4e, 0xbe, 0x85, 0x31, 0x24, 0xe2, 0xb4, 0xff, 0xd5, 0xc3, 0x7d, 0x0c, 0x55, 0x6f, 0x89, 0x7b, 0xf2, 0x74, 0x5d, 0xbe, 0x72, 0xb1, 0x96, 0x16, 0x3b, 0xfe, 0xb1, 0xde, 0x80, 0x35, 0x12, 0xc7, 0x25, 0xa7, 0x06, 0xdc, 0x9b, 0x94, 0x26, 0x69, 0xcf, 0x74, 0xf1, 0x9b, 0xc1, 0xd2, 0x4a, 0xf1, 0x9e, 0xc1, 0x69, 0x9b, 0xe4, 0xe3, 0x25, 0x4f, 0x38, 0x86, 0x47, 0xbe, 0xef, 0xb5, 0xd5, 0x8c, 0x8b, 0xc6, 0x9d, 0xc1, 0x0f, 0x65, 0x9c, 0xac, 0x77, 0xcc, 0xa1, 0x0c, 0x24, 0x75, 0x02, 0x2b, 0x59, 0x6f, 0x2c, 0xe9, 0x2d, 0x83, 0xe4, 0xa6, 0x6e, 0xaa, 0x84, 0x74, 0x4a, 0xd4, 0xfb, 0x41, 0xbd, 0xdc, 0xa9, 0xb0, 0x5c, 0xb5, 0x53, 0x11, 0x83, 0xda, 0x88, 0xf9, 0x76, 0xab, 0xdf, 0x66, 0xee, 0x52, 0x51, 0x3e, 0x98, 0x10, 0x32, 0xb4, 0x2d, 0x6d, 0xc6, 0x31, 0xa8, 0x3f, 0x21, 0xfb, 0x98, 0xc8, 0x27, 0x03, 0xb0, 0xe4, 0x0e, 0xef, 0xbe, 0xc7, 0x7f, 0x59, 0xbf, 0xc2, 0x8f, 0xa8, 0x3d, 0xf3, 0x0b, 0xe0, 0xc6, 0x25, 0xa7, 0x0a, 0x93, 0x47, 0x91, 0xa7, 0xd5, 0x6f, 0x82, 0x03, 0xe0, 0x51, 0x63, 0xca, 0x06, 0x70, 0x6e, 0x0e, 0x0a, 0x67, 0x29, 0x29, 0x14, 0xfc, 0x2f, 0xd2, 0x46, 0x85, 0x0a, 0xb7, 0x27, 0x26, 0xc9, 0x26, 0x5c, 0x38, 0x21, 0x1b, 0x2e, 0xed, 0x2a, 0xc4, 0x5a, 0xfc, 0x6d, 0x2c, 0x4d, 0xdf, 0xb3, 0x95, 0x9d, 0x13, 0x0d, 0x38, 0x53, 0xde, 0x63, 0xaf, 0x8b, 0x54, 0x73, 0x0a, 0x65, 0xa8, 0xb2, 0x77, 0x3c, 0xbb, 0x0a, 0x6a, 0x76, 0xe6, 0xae, 0xed, 0x47, 0x2e, 0xc9, 0xc2, 0x81, 0x3b, 0x35, 0x82, 0x14, 0x85, 0x2c, 0x72, 0x92, 0x64, 0x03, 0xf1, 0x4c, 0xa1, 0xe8, 0xbf, 0xa2, 0x01, 0x30, 0x42, 0xbc, 0x4b, 0x66, 0x1a, 0xa8, 0x91, 0x97, 0xf8, 0xd0, 0x70, 0x8b, 0x4b, 0xc2, 0x30, 0xbe, 0x54, 0x06, 0xa3, 0x51, 0x6c, 0xc7, 0x18, 0x52, 0xef, 0xd6, 0x19, 0xe8, 0x92, 0xd1, 0x10, 0xa9, 0x65, 0x55, 0x24, 0x06, 0x99, 0xd6, 0x2a, 0x20, 0x71, 0x57, 0x85, 0x35, 0x0e, 0xf4, 0xb8, 0xd1, 0xbb, 0x32, 0x70, 0xa0, 0x6a, 0x10, 0xc8, 0xd0, 0xd2, 0xb8, 0x16, 0xc1, 0xa4, 0x19, 0x53, 0xab, 0x41, 0x51, 0x08, 0x6c, 0x37, 0x1e, 0x99, 0xeb, 0x8e, 0xdf, 0x4c, 0x77, 0x48, 0x27, 0xa8, 0x48, 0x9b, 0xe1, 0xb5, 0xbc, 0xb0, 0x34, 0x63, 0x5a, 0xc9, 0xc5, 0xb3, 0x0c, 0x1c, 0x39, 0xcb, 0x8a, 0x41, 0xe3, 0x4a, 0xaa, 0xd8, 0x4e, 0x73, 0xe3, 0x63, 0x77, 0x4f, 0xca, 0x9c, 0x5b, 0xa3, 0xb8, 0xb2, 0xd6, 0xf3, 0x6f, 0x2e, 0x68, 0xfc, 0xb2, 0xef, 0x5d, 0xee, 0x82, 0x8f, 0x74, 0x60, 0x2f, 0x17, 0x43, 0x6f, 0x63, 0xa5, 0x78, 0x72, 0xab, 0xf0, 0xa1, 0x14, 0x78, 0xc8, 0x84, 0xec, 0x39, 0x64, 0x1a, 0x08, 0x02, 0xc7, 0x8c, 0x28, 0x1e, 0x63, 0x23, 0xfa, 0xff, 0xbe, 0x90, 0xe9, 0xbd, 0x82, 0xde, 0xeb, 0x6c, 0x50, 0xa4, 0x15, 0x79, 0xc6, 0xb2, 0xf7, 0xa3, 0xf9, 0xbe, 0x2b, 0x53, 0x72, 0xe3, 0xf2, 0x78, 0x71, 0xc6, 0x9c, 0x61, 0x26, 0xea, 0xce, 0x3e, 0x27, 0xca, 0x07, 0xc2, 0xc0, 0x21, 0xc7, 0xb8, 0x86, 0xd1, 0x1e, 0xeb, 0xe0, 0xcd, 0xd6, 0x7d, 0xda, 0xea, 0x78, 0xd1, 0x6e, 0xee, 0x7f, 0x4f, 0x7d, 0xf5, 0xba, 0x6f, 0x17, 0x72, 0xaa, 0x67, 0xf0, 0x06, 0xa6, 0x98, 0xc8, 0xa2, 0xc5, 0x7d, 0x63, 0x0a, 0xae, 0x0d, 0xf9, 0xbe, 0x04, 0x98, 0x3f, 0x11, 0x1b, 0x47, 0x1c, 0x13, 0x35, 0x0b, 0x71, 0x1b, 0x84, 0x7d, 0x04, 0x23, 0xf5, 0x77, 0xdb, 0x28, 0x93, 0x24, 0xc7, 0x40, 0x7b, 0xab, 0xca, 0x32, 0xbc, 0xbe, 0xc9, 0x15, 0x0a, 0xbe, 0x9e, 0x3c, 0x4c, 0x0d, 0x10, 0x9c, 0xc4, 0x67, 0x1d, 0x43, 0xb6, 0x42, 0x3e, 0xcb, 0xbe, 0xd4, 0xc5, 0x4c, 0x2a, 0x7e, 0x65, 0xfc, 0x9c, 0x29, 0x7f, 0x59, 0xec, 0xfa, 0xd6, 0x3a, 0xab, 0x6f, 0xcb, 0x5f, 0x17, 0x58, 0x47, 0x4a, 0x8c, 0x19, 0x44, 0x6c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x02, 0x00, 0x02, 0x00, 0x02, 0x00, 0x02, 0x00, 0x02, 0x00, 0x02, 0x00, 0x02, 0x00, 0x02, 0x00, 0x03, 0x20, 0x02, 0x20, 0x02, 0x20, 0x02, 0x20, 0x02, 0x20, 0x02, 0x00, 0x02, 0x00, 0x02, 0x00, 0x02, 0x00, 0x02, 0x00, 0x02, 0x00, 0x02, 0x00, 0x02, 0x00, 0x02, 0x00, 0x02, 0x00, 0x02, 0x00, 0x02, 0x00, 0x02, 0x00, 0x02, 0x00, 0x02, 0x00, 0x02, 0x00, 0x02, 0x00, 0x02, 0x00, 0x01, 0x60, 0x04, 0xc0, 0x04, 0xc0, 0x04, 0xc0, 0x04, 0xc0, 0x04, 0xc0, 0x04, 0xc0, 0x04, 0xc0, 0x04, 0xc0, 0x04, 0xc0, 0x04, 0xc0, 0x04, 0xc0, 0x04, 0xc0, 0x04, 0xc0, 0x04, 0xc0, 0x04, 0xc0, 0x08, 0xd8, 0x08, 0xd8, 0x08, 0xd8, 0x08, 0xd8, 0x08, 0xd8, 0x08, 0xd8, 0x08, 0xd8, 0x08, 0xd8, 0x08, 0xd8, 0x08, 0xd8, 0x04, 0xc0, 0x04, 0xc0, 0x04, 0xc0, 0x04, 0xc0, 0x04, 0xc0, 0x04, 0xc0, 0x04, 0xc0, 0x08, 0xd5, 0x08, 0xd5, 0x08, 0xd5, 0x08, 0xd5, 0x08, 0xd5, 0x08, 0xd5, 0x08, 0xc5, 0x08, 0xc5, 0x08, 0xc5, 0x08, 0xc5, 0x08, 0xc5, 0x08, 0xc5, 0x08, 0xc5, 0x08, 0xc5, 0x08, 0xc5, 0x08, 0xc5, 0x08, 0xc5, 0x08, 0xc5, 0x08, 0xc5, 0x08, 0xc5, 0x08, 0xc5, 0x08, 0xc5, 0x08, 0xc5, 0x08, 0xc5, 0x08, 0xc5, 0x08, 0xc5, 0x04, 0xc0, 0x04, 0xc0, 0x04, 0xc0, 0x04, 0xc0, 0x04, 0xc0, 0x04, 0xc0, 0x08, 0xd6, 0x08, 0xd6, 0x08, 0xd6, 0x08, 0xd6, 0x08, 0xd6, 0x08, 0xd6, 0x08, 0xc6, 0x08, 0xc6, 0x08, 0xc6, 0x08, 0xc6, 0x08, 0xc6, 0x08, 0xc6, 0x08, 0xc6, 0x08, 0xc6, 0x08, 0xc6, 0x08, 0xc6, 0x08, 0xc6, 0x08, 0xc6, 0x08, 0xc6, 0x08, 0xc6, 0x08, 0xc6, 0x08, 0xc6, 0x08, 0xc6, 0x08, 0xc6, 0x08, 0xc6, 0x08, 0xc6, 0x04, 0xc0, 0x04, 0xc0, 0x04, 0xc0, 0x04, 0xc0, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x00, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x0d, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x11, 0x00, 0x00, 0x00, 0x12, 0x00, 0x00, 0x00, 0x13, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x15, 0x00, 0x00, 0x00, 0x16, 0x00, 0x00, 0x00, 0x17, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x19, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x00, 0x00, 0x1b, 0x00, 0x00, 0x00, 0x1c, 0x00, 0x00, 0x00, 0x1d, 0x00, 0x00, 0x00, 0x1e, 0x00, 0x00, 0x00, 0x1f, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x21, 0x00, 0x00, 0x00, 0x22, 0x00, 0x00, 0x00, 0x23, 0x00, 0x00, 0x00, 0x24, 0x00, 0x00, 0x00, 0x25, 0x00, 0x00, 0x00, 0x26, 0x00, 0x00, 0x00, 0x27, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x00, 0x00, 0x2c, 0x00, 0x00, 0x00, 0x2d, 0x00, 0x00, 0x00, 0x2e, 0x00, 0x00, 0x00, 0x2f, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x31, 0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0x00, 0x33, 0x00, 0x00, 0x00, 0x34, 0x00, 0x00, 0x00, 0x35, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x00, 0x37, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x00, 0x39, 0x00, 0x00, 0x00, 0x3a, 0x00, 0x00, 0x00, 0x3b, 0x00, 0x00, 0x00, 0x3c, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x00, 0x00, 0x3e, 0x00, 0x00, 0x00, 0x3f, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x61, 0x00, 0x00, 0x00, 0x62, 0x00, 0x00, 0x00, 0x63, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x65, 0x00, 0x00, 0x00, 0x66, 0x00, 0x00, 0x00, 0x67, 0x00, 0x00, 0x00, 0x68, 0x00, 0x00, 0x00, 0x69, 0x00, 0x00, 0x00, 0x6a, 0x00, 0x00, 0x00, 0x6b, 0x00, 0x00, 0x00, 0x6c, 0x00, 0x00, 0x00, 0x6d, 0x00, 0x00, 0x00, 0x6e, 0x00, 0x00, 0x00, 0x6f, 0x00, 0x00, 0x00, 0x70, 0x00, 0x00, 0x00, 0x71, 0x00, 0x00, 0x00, 0x72, 0x00, 0x00, 0x00, 0x73, 0x00, 0x00, 0x00, 0x74, 0x00, 0x00, 0x00, 0x75, 0x00, 0x00, 0x00, 0x76, 0x00, 0x00, 0x00, 0x77, 0x00, 0x00, 0x00, 0x78, 0x00, 0x00, 0x00, 0x79, 0x00, 0x00, 0x00, 0x7a, 0x00, 0x00, 0x00, 0x5b, 0x00, 0x00, 0x00, 0x5c, 0x00, 0x00, 0x00, 0x5d, 0x00, 0x00, 0x00, 0x5e, 0x00, 0x00, 0x00, 0x5f, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x61, 0x00, 0x00, 0x00, 0x62, 0x00, 0x00, 0x00, 0x63, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x65, 0x00, 0x00, 0x00, 0x66, 0x00, 0x00, 0x00, 0x67, 0x00, 0x00, 0x00, 0x68, 0x00, 0x00, 0x00, 0x69, 0x00, 0x00, 0x00, 0x6a, 0x00, 0x00, 0x00, 0x6b, 0x00, 0x00, 0x00, 0x6c, 0x00, 0x00, 0x00, 0x6d, 0x00, 0x00, 0x00, 0x6e, 0x00, 0x00, 0x00, 0x6f, 0x00, 0x00, 0x00, 0x70, 0x00, 0x00, 0x00, 0x71, 0x00, 0x00, 0x00, 0x72, 0x00, 0x00, 0x00, 0x73, 0x00, 0x00, 0x00, 0x74, 0x00, 0x00, 0x00, 0x75, 0x00, 0x00, 0x00, 0x76, 0x00, 0x00, 0x00, 0x77, 0x00, 0x00, 0x00, 0x78, 0x00, 0x00, 0x00, 0x79, 0x00, 0x00, 0x00, 0x7a, 0x00, 0x00, 0x00, 0x7b, 0x00, 0x00, 0x00, 0x7c, 0x00, 0x00, 0x00, 0x7d, 0x00, 0x00, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x7f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x00, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x0d, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x11, 0x00, 0x00, 0x00, 0x12, 0x00, 0x00, 0x00, 0x13, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x15, 0x00, 0x00, 0x00, 0x16, 0x00, 0x00, 0x00, 0x17, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x19, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x00, 0x00, 0x1b, 0x00, 0x00, 0x00, 0x1c, 0x00, 0x00, 0x00, 0x1d, 0x00, 0x00, 0x00, 0x1e, 0x00, 0x00, 0x00, 0x1f, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x21, 0x00, 0x00, 0x00, 0x22, 0x00, 0x00, 0x00, 0x23, 0x00, 0x00, 0x00, 0x24, 0x00, 0x00, 0x00, 0x25, 0x00, 0x00, 0x00, 0x26, 0x00, 0x00, 0x00, 0x27, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x00, 0x00, 0x2c, 0x00, 0x00, 0x00, 0x2d, 0x00, 0x00, 0x00, 0x2e, 0x00, 0x00, 0x00, 0x2f, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x31, 0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0x00, 0x33, 0x00, 0x00, 0x00, 0x34, 0x00, 0x00, 0x00, 0x35, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x00, 0x37, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x00, 0x39, 0x00, 0x00, 0x00, 0x3a, 0x00, 0x00, 0x00, 0x3b, 0x00, 0x00, 0x00, 0x3c, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x00, 0x00, 0x3e, 0x00, 0x00, 0x00, 0x3f, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x41, 0x00, 0x00, 0x00, 0x42, 0x00, 0x00, 0x00, 0x43, 0x00, 0x00, 0x00, 0x44, 0x00, 0x00, 0x00, 0x45, 0x00, 0x00, 0x00, 0x46, 0x00, 0x00, 0x00, 0x47, 0x00, 0x00, 0x00, 0x48, 0x00, 0x00, 0x00, 0x49, 0x00, 0x00, 0x00, 0x4a, 0x00, 0x00, 0x00, 0x4b, 0x00, 0x00, 0x00, 0x4c, 0x00, 0x00, 0x00, 0x4d, 0x00, 0x00, 0x00, 0x4e, 0x00, 0x00, 0x00, 0x4f, 0x00, 0x00, 0x00, 0x50, 0x00, 0x00, 0x00, 0x51, 0x00, 0x00, 0x00, 0x52, 0x00, 0x00, 0x00, 0x53, 0x00, 0x00, 0x00, 0x54, 0x00, 0x00, 0x00, 0x55, 0x00, 0x00, 0x00, 0x56, 0x00, 0x00, 0x00, 0x57, 0x00, 0x00, 0x00, 0x58, 0x00, 0x00, 0x00, 0x59, 0x00, 0x00, 0x00, 0x5a, 0x00, 0x00, 0x00, 0x5b, 0x00, 0x00, 0x00, 0x5c, 0x00, 0x00, 0x00, 0x5d, 0x00, 0x00, 0x00, 0x5e, 0x00, 0x00, 0x00, 0x5f, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x41, 0x00, 0x00, 0x00, 0x42, 0x00, 0x00, 0x00, 0x43, 0x00, 0x00, 0x00, 0x44, 0x00, 0x00, 0x00, 0x45, 0x00, 0x00, 0x00, 0x46, 0x00, 0x00, 0x00, 0x47, 0x00, 0x00, 0x00, 0x48, 0x00, 0x00, 0x00, 0x49, 0x00, 0x00, 0x00, 0x4a, 0x00, 0x00, 0x00, 0x4b, 0x00, 0x00, 0x00, 0x4c, 0x00, 0x00, 0x00, 0x4d, 0x00, 0x00, 0x00, 0x4e, 0x00, 0x00, 0x00, 0x4f, 0x00, 0x00, 0x00, 0x50, 0x00, 0x00, 0x00, 0x51, 0x00, 0x00, 0x00, 0x52, 0x00, 0x00, 0x00, 0x53, 0x00, 0x00, 0x00, 0x54, 0x00, 0x00, 0x00, 0x55, 0x00, 0x00, 0x00, 0x56, 0x00, 0x00, 0x00, 0x57, 0x00, 0x00, 0x00, 0x58, 0x00, 0x00, 0x00, 0x59, 0x00, 0x00, 0x00, 0x5a, 0x00, 0x00, 0x00, 0x7b, 0x00, 0x00, 0x00, 0x7c, 0x00, 0x00, 0x00, 0x7d, 0x00, 0x00, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x7f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x12, 0x11, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f, 0x20, 0x21, 0x11, 0x22, 0x23, 0x24, 0x11, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x11, 0x2d, 0x2e, 0x2f, 0x10, 0x10, 0x30, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x31, 0x32, 0x33, 0x10, 0x34, 0x35, 0x10, 0x10, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x36, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x37, 0x11, 0x11, 0x11, 0x11, 0x38, 0x11, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x3f, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x11, 0x40, 0x41, 0x11, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4a, 0x11, 0x4b, 0x4c, 0x4d, 0x4e, 0x4f, 0x50, 0x10, 0x10, 0x10, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x10, 0x5a, 0x10, 0x5b, 0x5c, 0x10, 0x10, 0x11, 0x11, 0x11, 0x5d, 0x5e, 0x5f, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x11, 0x11, 0x11, 0x11, 0x60, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x11, 0x11, 0x61, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x11, 0x11, 0x62, 0x63, 0x10, 0x10, 0x10, 0x64, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x65, 0x11, 0x11, 0x66, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x11, 0x67, 0x68, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x69, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x6a, 0x6b, 0x6c, 0x6d, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x6e, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x6f, 0x70, 0x10, 0x10, 0x10, 0x10, 0x71, 0x10, 0x10, 0x72, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xff, 0xff, 0x07, 0xfe, 0xff, 0xff, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x20, 0x04, 0xff, 0xff, 0x7f, 0xff, 0xff, 0xff, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc3, 0xff, 0x03, 0x00, 0x1f, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0xdf, 0xbc, 0x40, 0xd7, 0xff, 0xff, 0xfb, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xbf, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x03, 0xfc, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xff, 0xff, 0xff, 0x7f, 0x02, 0xfe, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xbf, 0xb6, 0x00, 0xff, 0xff, 0xff, 0x07, 0x07, 0x00, 0x00, 0x00, 0xff, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xff, 0xc3, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xef, 0x1f, 0xfe, 0xe1, 0xff, 0x9f, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0xe0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x03, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0x07, 0x30, 0x04, 0xff, 0xff, 0xff, 0xfc, 0xff, 0x1f, 0x00, 0x00, 0xff, 0xff, 0xff, 0x01, 0xff, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xdf, 0x3f, 0x00, 0x00, 0xf0, 0xff, 0xf8, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xef, 0xff, 0xdf, 0xe1, 0xff, 0xcf, 0xff, 0xfe, 0xff, 0xef, 0x9f, 0xf9, 0xff, 0xff, 0xfd, 0xc5, 0xe3, 0x9f, 0x59, 0x80, 0xb0, 0xcf, 0xff, 0x03, 0x10, 0xee, 0x87, 0xf9, 0xff, 0xff, 0xfd, 0x6d, 0xc3, 0x87, 0x19, 0x02, 0x5e, 0xc0, 0xff, 0x3f, 0x00, 0xee, 0xbf, 0xfb, 0xff, 0xff, 0xfd, 0xed, 0xe3, 0xbf, 0x1b, 0x01, 0x00, 0xcf, 0xff, 0x00, 0x1e, 0xee, 0x9f, 0xf9, 0xff, 0xff, 0xfd, 0xed, 0xe3, 0x9f, 0x19, 0xc0, 0xb0, 0xcf, 0xff, 0x02, 0x00, 0xec, 0xc7, 0x3d, 0xd6, 0x18, 0xc7, 0xff, 0xc3, 0xc7, 0x1d, 0x81, 0x00, 0xc0, 0xff, 0x00, 0x00, 0xef, 0xdf, 0xfd, 0xff, 0xff, 0xfd, 0xff, 0xe3, 0xdf, 0x1d, 0x60, 0x07, 0xcf, 0xff, 0x00, 0x00, 0xef, 0xdf, 0xfd, 0xff, 0xff, 0xfd, 0xef, 0xe3, 0xdf, 0x1d, 0x60, 0x40, 0xcf, 0xff, 0x06, 0x00, 0xef, 0xdf, 0xfd, 0xff, 0xff, 0xff, 0xff, 0xe7, 0xdf, 0x5d, 0xf0, 0x80, 0xcf, 0xff, 0x00, 0xfc, 0xec, 0xff, 0x7f, 0xfc, 0xff, 0xff, 0xfb, 0x2f, 0x7f, 0x80, 0x5f, 0xff, 0xc0, 0xff, 0x0c, 0x00, 0xfe, 0xff, 0xff, 0xff, 0xff, 0x7f, 0xff, 0x07, 0x3f, 0x20, 0xff, 0x03, 0x00, 0x00, 0x00, 0x00, 0x96, 0x25, 0xf0, 0xfe, 0xae, 0xec, 0xff, 0x3b, 0x5f, 0x20, 0xff, 0xf3, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0xff, 0x03, 0x00, 0x00, 0xff, 0xfe, 0xff, 0xff, 0xff, 0x1f, 0xfe, 0xff, 0x03, 0xff, 0xff, 0xfe, 0xff, 0xff, 0xff, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0xf9, 0xff, 0x03, 0xff, 0xff, 0xe7, 0xc1, 0xff, 0xff, 0x7f, 0x40, 0xff, 0x33, 0xff, 0xff, 0xff, 0xff, 0xbf, 0x20, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf7, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x3d, 0x7f, 0x3d, 0xff, 0xff, 0xff, 0xff, 0xff, 0x3d, 0xff, 0xff, 0xff, 0xff, 0x3d, 0x7f, 0x3d, 0xff, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x3d, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x87, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x3f, 0x3f, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x9f, 0xff, 0xff, 0xfe, 0xff, 0xff, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc7, 0xff, 0x01, 0xff, 0xdf, 0x0f, 0x00, 0xff, 0xff, 0x0f, 0x00, 0xff, 0xff, 0x0f, 0x00, 0xff, 0xdf, 0x0d, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xcf, 0xff, 0xff, 0x01, 0x80, 0x10, 0xff, 0x03, 0x00, 0x00, 0x00, 0x00, 0xff, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x3f, 0x00, 0xff, 0xff, 0xff, 0x7f, 0xff, 0x0f, 0xff, 0x01, 0xc0, 0xff, 0xff, 0xff, 0xff, 0x3f, 0x1f, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0x0f, 0xff, 0xff, 0xff, 0x03, 0xff, 0x03, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0xfe, 0xff, 0x1f, 0x00, 0xff, 0x03, 0xff, 0x03, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xef, 0xff, 0xef, 0x0f, 0xff, 0x03, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf3, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xbf, 0xff, 0x03, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x3f, 0x00, 0xff, 0xe3, 0xff, 0xff, 0xff, 0xff, 0xff, 0x3f, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xde, 0x6f, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x80, 0xff, 0x1f, 0x00, 0xff, 0xff, 0x3f, 0x3f, 0xff, 0xff, 0xff, 0xff, 0x3f, 0x3f, 0xff, 0xaa, 0xff, 0xff, 0xff, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xdf, 0x5f, 0xdc, 0x1f, 0xcf, 0x0f, 0xff, 0x1f, 0xdc, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x80, 0x00, 0x00, 0xff, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x84, 0xfc, 0x2f, 0x3e, 0x50, 0xbd, 0xff, 0xf3, 0xe0, 0x43, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x03, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x1f, 0x78, 0x0c, 0x00, 0xff, 0xff, 0xff, 0xff, 0xbf, 0x20, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0xff, 0xff, 0x7f, 0x00, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x00, 0x00, 0x00, 0xfe, 0x03, 0x3e, 0x1f, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0xe0, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf7, 0xe0, 0xff, 0xff, 0xff, 0xff, 0x7f, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0x00, 0x00, 0xff, 0xff, 0xff, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x07, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0x3f, 0xff, 0x1f, 0xff, 0xff, 0xff, 0x0f, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0xf0, 0x8f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x80, 0xff, 0xfc, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf9, 0xff, 0xff, 0xff, 0x7f, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xff, 0xbb, 0xf7, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x0f, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x2f, 0x00, 0xff, 0x03, 0x00, 0x00, 0xfc, 0x28, 0xff, 0xff, 0xff, 0xff, 0xff, 0x07, 0xff, 0xff, 0xff, 0xff, 0x07, 0x00, 0xff, 0xff, 0xff, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf7, 0xff, 0x00, 0x80, 0xff, 0x03, 0xdf, 0xff, 0xff, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0x00, 0xff, 0x3f, 0xff, 0x03, 0xff, 0xff, 0x7f, 0xc4, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0x05, 0x00, 0x00, 0x38, 0xff, 0xff, 0x3c, 0x00, 0x7e, 0x7e, 0x7e, 0x00, 0x7f, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf7, 0x3f, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x07, 0xff, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x0f, 0x00, 0xff, 0xff, 0x7f, 0xf8, 0xff, 0xff, 0xff, 0xff, 0xff, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x03, 0x00, 0x00, 0x00, 0x00, 0x7f, 0x00, 0xf8, 0xe0, 0xff, 0xfd, 0x7f, 0x5f, 0xdb, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x03, 0x00, 0x00, 0x00, 0xf8, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x3f, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xdf, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x1f, 0x00, 0x00, 0xff, 0x03, 0xfe, 0xff, 0xff, 0x07, 0xfe, 0xff, 0xff, 0x07, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0xfc, 0xfc, 0xfc, 0x1c, 0x00, 0x00, 0x00, 0x00, 0xff, 0xef, 0xff, 0xff, 0x7f, 0xff, 0xff, 0xb7, 0xff, 0x3f, 0xff, 0x3f, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x00, 0xe0, 0xff, 0xff, 0xff, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0x07, 0xff, 0xff, 0xff, 0x3f, 0xff, 0xff, 0xff, 0xff, 0x0f, 0xff, 0x3e, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x3f, 0xff, 0x03, 0xff, 0xff, 0xff, 0xff, 0x0f, 0xff, 0xff, 0xff, 0xff, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0x00, 0xff, 0xff, 0x3f, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xfd, 0xff, 0xff, 0xff, 0xff, 0xbf, 0x91, 0xff, 0xff, 0x3f, 0x00, 0xff, 0xff, 0x7f, 0x00, 0xff, 0xff, 0xff, 0x7f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0x37, 0x00, 0xff, 0xff, 0x3f, 0x00, 0xff, 0xff, 0xff, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x6f, 0xf0, 0xef, 0xfe, 0xff, 0xff, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0x1f, 0xff, 0xff, 0xff, 0x1f, 0x00, 0x00, 0x00, 0x00, 0xff, 0xfe, 0xff, 0xff, 0x1f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x3f, 0x00, 0xff, 0xff, 0x3f, 0x00, 0xff, 0xff, 0x07, 0x00, 0xff, 0xff, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x07, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x07, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x3f, 0x00, 0x00, 0x00, 0xc0, 0xff, 0x00, 0x00, 0xfc, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x00, 0x00, 0xff, 0xff, 0xff, 0x01, 0xff, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc7, 0xff, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x47, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x1e, 0x00, 0xff, 0x17, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xfb, 0xff, 0xff, 0xff, 0x9f, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xbd, 0xff, 0xbf, 0xff, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0xff, 0x03, 0xef, 0x9f, 0xf9, 0xff, 0xff, 0xfd, 0xed, 0xe3, 0x9f, 0x19, 0x81, 0xe0, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xbb, 0x07, 0xff, 0x03, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xb3, 0x00, 0xff, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x3f, 0x7f, 0x00, 0x00, 0x00, 0x3f, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0x11, 0x00, 0xff, 0x03, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x3f, 0x00, 0xff, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xe3, 0xff, 0x07, 0xff, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x03, 0x00, 0x80, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe7, 0x7f, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xcf, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0xff, 0xfd, 0xff, 0xff, 0xff, 0xff, 0x7f, 0x7f, 0x01, 0x00, 0xff, 0x03, 0x00, 0x00, 0xfc, 0xff, 0xff, 0xff, 0xfc, 0xff, 0xff, 0xfe, 0x7f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xfb, 0xff, 0xff, 0xff, 0xff, 0x7f, 0xb4, 0xcb, 0x00, 0xff, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0xff, 0xff, 0xff, 0x7f, 0xff, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0x3f, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0x00, 0x0f, 0x00, 0xff, 0x03, 0xf8, 0xff, 0xff, 0xe0, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x1f, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0x00, 0x00, 0xf8, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x1f, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x07, 0x00, 0xff, 0xff, 0xff, 0x7f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x07, 0xff, 0x1f, 0xff, 0x01, 0xff, 0x43, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xdf, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xdf, 0x64, 0xde, 0xff, 0xeb, 0xef, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xbf, 0xe7, 0xdf, 0xdf, 0xff, 0xff, 0xff, 0x7b, 0x5f, 0xfc, 0xfd, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x3f, 0xff, 0xff, 0xff, 0xfd, 0xff, 0xff, 0xf7, 0xff, 0xff, 0xff, 0xf7, 0xff, 0xff, 0xdf, 0xff, 0xff, 0xff, 0xdf, 0xff, 0xff, 0x7f, 0xff, 0xff, 0xff, 0x7f, 0xff, 0xff, 0xff, 0xfd, 0xff, 0xff, 0xff, 0xfd, 0xff, 0xff, 0xf7, 0xcf, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0xff, 0xff, 0xf9, 0xdb, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x8f, 0x00, 0xff, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xef, 0xff, 0xff, 0xff, 0x96, 0xfe, 0xf7, 0x0a, 0x84, 0xea, 0x96, 0xaa, 0x96, 0xf7, 0xf7, 0x5e, 0xff, 0xfb, 0xff, 0x0f, 0xee, 0xfb, 0xff, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0x03, 0xff, 0xff, 0xff, 0x03, 0xff, 0xff, 0xff, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x61, 0x6c, 0x6e, 0x75, 0x6d, 0x00, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x00, 0x62, 0x6c, 0x61, 0x6e, 0x6b, 0x00, 0x63, 0x6e, 0x74, 0x72, 0x6c, 0x00, 0x64, 0x69, 0x67, 0x69, 0x74, 0x00, 0x67, 0x72, 0x61, 0x70, 0x68, 0x00, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x00, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x00, 0x70, 0x75, 0x6e, 0x63, 0x74, 0x00, 0x73, 0x70, 0x61, 0x63, 0x65, 0x00, 0x75, 0x70, 0x70, 0x65, 0x72, 0x00, 0x78, 0x64, 0x69, 0x67, 0x69, 0x74, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x12, 0x10, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f, 0x20, 0x21, 0x10, 0x10, 0x22, 0x23, 0x10, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2a, 0x2b, 0x10, 0x2c, 0x2d, 0x2e, 0x11, 0x11, 0x2f, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x11, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x38, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x39, 0x10, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x40, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x41, 0x10, 0x10, 0x42, 0x10, 0x43, 0x44, 0x45, 0x10, 0x46, 0x47, 0x48, 0x10, 0x49, 0x10, 0x10, 0x4a, 0x4b, 0x4c, 0x4d, 0x4e, 0x10, 0x4f, 0x10, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x10, 0x59, 0x10, 0x5a, 0x5b, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x5c, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x5d, 0x5e, 0x10, 0x10, 0x10, 0x5f, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x60, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x61, 0x62, 0x63, 0x64, 0x10, 0x10, 0x65, 0x66, 0x11, 0x11, 0x67, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x68, 0x69, 0x10, 0x10, 0x10, 0x10, 0x6a, 0x10, 0x6b, 0x6c, 0x6d, 0x11, 0x11, 0x11, 0x6e, 0x6f, 0x70, 0x71, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xff, 0x00, 0xfc, 0x01, 0x00, 0x00, 0xf8, 0x01, 0x00, 0x00, 0x78, 0x00, 0x00, 0x00, 0x00, 0xff, 0xfb, 0xdf, 0xfb, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x00, 0xfc, 0xff, 0xe0, 0xaf, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xdf, 0xff, 0xff, 0xff, 0xff, 0xff, 0x20, 0x40, 0xb0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfc, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe6, 0xfe, 0xff, 0xff, 0xff, 0x00, 0x40, 0x49, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0xff, 0xff, 0x00, 0xd8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0xe0, 0x01, 0x1e, 0x00, 0x60, 0xff, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0xcf, 0x03, 0x00, 0x00, 0x00, 0x03, 0x00, 0x20, 0xff, 0x7f, 0x00, 0x00, 0x00, 0x4e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x20, 0x1e, 0x00, 0x30, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0xfc, 0x2f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x03, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0xfd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0xff, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0xa0, 0x00, 0x7f, 0x00, 0x00, 0xff, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x80, 0xc0, 0xdf, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xff, 0xff, 0xff, 0x00, 0xfc, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xff, 0xdf, 0xff, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x06, 0x00, 0xfc, 0x00, 0x00, 0x18, 0x3e, 0x00, 0x00, 0x80, 0xbf, 0x00, 0xcc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0xff, 0xff, 0xff, 0x1f, 0x00, 0x00, 0xff, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x01, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0xfe, 0x7f, 0x2f, 0x00, 0x00, 0xff, 0x03, 0xff, 0x7f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x31, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc4, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0xe0, 0x9f, 0x00, 0x00, 0x00, 0x00, 0x7f, 0x3f, 0xff, 0x7f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x10, 0x00, 0x00, 0xfc, 0xff, 0xff, 0xff, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x0c, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0xff, 0xff, 0xff, 0x21, 0x90, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x7f, 0x00, 0xe0, 0xfb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa0, 0x03, 0xe0, 0x00, 0xe0, 0x00, 0xe0, 0x00, 0x60, 0x80, 0xf8, 0xff, 0xff, 0xff, 0xfc, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0xdf, 0xff, 0xf1, 0x7f, 0xff, 0x7f, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x01, 0x00, 0x7b, 0x03, 0xd0, 0xc1, 0xaf, 0x42, 0x00, 0x0c, 0x1f, 0xbc, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0e, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0x00, 0x00, 0x00, 0xff, 0x07, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfc, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xcf, 0xff, 0xff, 0xff, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xe3, 0xff, 0xfd, 0x07, 0x00, 0x00, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x87, 0x03, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0xff, 0xff, 0xff, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xfb, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x0f, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x3f, 0x00, 0x00, 0x00, 0xff, 0x0f, 0x1e, 0xff, 0xff, 0xff, 0x01, 0xfc, 0xc1, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1e, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x0f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x00, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x0f, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0xff, 0xff, 0x7f, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x08, 0x00, 0x00, 0x00, 0x0f, 0xff, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0xc0, 0x00, 0x00, 0xff, 0xff, 0x03, 0x17, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x08, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0xff, 0x3f, 0x00, 0xc0, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x00, 0x00, 0x80, 0x3b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x02, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x43, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfc, 0xff, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0xff, 0xff, 0xff, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf7, 0xff, 0x7f, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xfe, 0xff, 0x00, 0xfc, 0x01, 0x00, 0x00, 0xf8, 0x01, 0x00, 0x00, 0xf8, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0x7f, 0x00, 0x30, 0x87, 0xff, 0xff, 0xff, 0xff, 0xff, 0x8f, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0xff, 0xff, 0x7f, 0xff, 0x0f, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xff, 0x00, 0x00, 0x80, 0xff, 0x00, 0x00, 0x00, 0x00, 0x80, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x00, 0x00, 0xc0, 0x8f, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0xff, 0xff, 0xfc, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x87, 0xff, 0x00, 0xff, 0x01, 0x00, 0x00, 0x00, 0xe0, 0x00, 0x00, 0x00, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x60, 0xf8, 0x7f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x1e, 0x00, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0x7f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x3f, 0xfc, 0xff, 0x3f, 0x00, 0x00, 0x80, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe1, 0x3f, 0x00, 0xe8, 0xfe, 0xff, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x20, 0x00, 0x00, 0xc0, 0x1f, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0xf8, 0x00, 0x28, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x0e, 0x00, 0x00, 0x00, 0xff, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfc, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x80, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xdf, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3e, 0x00, 0x00, 0xfc, 0xff, 0x1f, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x34, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xff, 0x30, 0x00, 0x00, 0xf8, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xb0, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x3f, 0x00, 0xff, 0xff, 0xff, 0xff, 0x7f, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0x00, 0xff, 0xff, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x0f, 0x00, 0xf8, 0xfe, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xff, 0x7f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x70, 0x07, 0x00, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x0f, 0x00, 0xff, 0x7f, 0xfe, 0xff, 0xfe, 0xff, 0xfe, 0xff, 0xff, 0xff, 0x3f, 0x00, 0xff, 0x1f, 0xff, 0xff, 0xff, 0x7f, 0x00, 0x00, 0x00, 0xfc, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0xfc, 0xff, 0xff, 0xff, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xff, 0xff, 0xff, 0x07, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0x0f, 0xff, 0x01, 0x03, 0x00, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x1f, 0x00, 0xff, 0x1f, 0xff, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x0f, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0xff, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0xff, 0x1f, 0xff, 0xff, 0xff, 0x0f, 0x00, 0x00, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0xff, 0xff, 0x7f, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x00, 0x00, 0x0d, 0x00, 0x00, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x85, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x01, 0x20, 0x00, 0x00, 0x02, 0x20, 0x00, 0x00, 0x03, 0x20, 0x00, 0x00, 0x04, 0x20, 0x00, 0x00, 0x05, 0x20, 0x00, 0x00, 0x06, 0x20, 0x00, 0x00, 0x08, 0x20, 0x00, 0x00, 0x09, 0x20, 0x00, 0x00, 0x0a, 0x20, 0x00, 0x00, 0x28, 0x20, 0x00, 0x00, 0x29, 0x20, 0x00, 0x00, 0x5f, 0x20, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x20, 0x1f, 0x00, 0x01, 0x01, 0x2f, 0x32, 0x01, 0x01, 0x05, 0x39, 0x01, 0x01, 0x0f, 0x4a, 0x01, 0x01, 0x2d, 0x79, 0x01, 0x01, 0x05, 0x70, 0x03, 0x01, 0x03, 0x91, 0x03, 0x20, 0x11, 0xa3, 0x03, 0x20, 0x09, 0x00, 0x04, 0x50, 0x10, 0x10, 0x04, 0x20, 0x20, 0x60, 0x04, 0x01, 0x21, 0x8a, 0x04, 0x01, 0x35, 0xc1, 0x04, 0x01, 0x0d, 0xd0, 0x04, 0x01, 0x3f, 0x14, 0x05, 0x01, 0x1b, 0x31, 0x05, 0x30, 0x26, 0xa0, 0x01, 0x01, 0x05, 0xb3, 0x01, 0x01, 0x03, 0xcd, 0x01, 0x01, 0x0f, 0xde, 0x01, 0x01, 0x11, 0xf8, 0x01, 0x01, 0x27, 0x22, 0x02, 0x01, 0x11, 0xd8, 0x03, 0x01, 0x17, 0x00, 0x1e, 0x01, 0x95, 0xa0, 0x1e, 0x01, 0x5f, 0x08, 0x1f, 0xf8, 0x08, 0x18, 0x1f, 0xf8, 0x06, 0x28, 0x1f, 0xf8, 0x08, 0x38, 0x1f, 0xf8, 0x08, 0x48, 0x1f, 0xf8, 0x06, 0x68, 0x1f, 0xf8, 0x08, 0x88, 0x1f, 0xf8, 0x08, 0x98, 0x1f, 0xf8, 0x08, 0xa8, 0x1f, 0xf8, 0x08, 0xb8, 0x1f, 0xf8, 0x02, 0xba, 0x1f, 0xb6, 0x02, 0xc8, 0x1f, 0xaa, 0x04, 0xd8, 0x1f, 0xf8, 0x02, 0xda, 0x1f, 0x9c, 0x02, 0xe8, 0x1f, 0xf8, 0x02, 0xea, 0x1f, 0x90, 0x02, 0xf8, 0x1f, 0x80, 0x02, 0xfa, 0x1f, 0x82, 0x02, 0xf0, 0x13, 0x08, 0x06, 0x98, 0xa6, 0x01, 0x03, 0x96, 0xa7, 0x01, 0x09, 0x46, 0x02, 0x01, 0x09, 0x10, 0x05, 0x01, 0x03, 0x60, 0x21, 0x10, 0x10, 0x00, 0x2c, 0x30, 0x2f, 0x67, 0x2c, 0x01, 0x05, 0x80, 0x2c, 0x01, 0x63, 0xeb, 0x2c, 0x01, 0x03, 0x40, 0xa6, 0x01, 0x2d, 0x80, 0xa6, 0x01, 0x17, 0x22, 0xa7, 0x01, 0x0d, 0x32, 0xa7, 0x01, 0x3d, 0x79, 0xa7, 0x01, 0x03, 0x7e, 0xa7, 0x01, 0x09, 0x90, 0xa7, 0x01, 0x03, 0xa0, 0xa7, 0x01, 0x09, 0xb4, 0xa7, 0x01, 0x03, 0x21, 0xff, 0x20, 0x1a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x00, 0x31, 0x01, 0x53, 0x00, 0x7f, 0x01, 0x30, 0x01, 0x69, 0x00, 0x78, 0x01, 0xff, 0x00, 0x81, 0x01, 0x53, 0x02, 0x82, 0x01, 0x83, 0x01, 0x84, 0x01, 0x85, 0x01, 0x86, 0x01, 0x54, 0x02, 0x87, 0x01, 0x88, 0x01, 0x89, 0x01, 0x56, 0x02, 0x8a, 0x01, 0x57, 0x02, 0x8b, 0x01, 0x8c, 0x01, 0x8e, 0x01, 0xdd, 0x01, 0x8f, 0x01, 0x59, 0x02, 0x90, 0x01, 0x5b, 0x02, 0x91, 0x01, 0x92, 0x01, 0x93, 0x01, 0x60, 0x02, 0x94, 0x01, 0x63, 0x02, 0x96, 0x01, 0x69, 0x02, 0x97, 0x01, 0x68, 0x02, 0x98, 0x01, 0x99, 0x01, 0x9c, 0x01, 0x6f, 0x02, 0x9d, 0x01, 0x72, 0x02, 0x9f, 0x01, 0x75, 0x02, 0xa6, 0x01, 0x80, 0x02, 0xa7, 0x01, 0xa8, 0x01, 0xa9, 0x01, 0x83, 0x02, 0xac, 0x01, 0xad, 0x01, 0xae, 0x01, 0x88, 0x02, 0xaf, 0x01, 0xb0, 0x01, 0xb1, 0x01, 0x8a, 0x02, 0xb2, 0x01, 0x8b, 0x02, 0xb7, 0x01, 0x92, 0x02, 0xb8, 0x01, 0xb9, 0x01, 0xbc, 0x01, 0xbd, 0x01, 0xc4, 0x01, 0xc6, 0x01, 0xc4, 0x01, 0xc5, 0x01, 0xc5, 0x01, 0xc6, 0x01, 0xc7, 0x01, 0xc9, 0x01, 0xc7, 0x01, 0xc8, 0x01, 0xc8, 0x01, 0xc9, 0x01, 0xca, 0x01, 0xcc, 0x01, 0xca, 0x01, 0xcb, 0x01, 0xcb, 0x01, 0xcc, 0x01, 0xf1, 0x01, 0xf3, 0x01, 0xf1, 0x01, 0xf2, 0x01, 0xf2, 0x01, 0xf3, 0x01, 0xf4, 0x01, 0xf5, 0x01, 0xf6, 0x01, 0x95, 0x01, 0xf7, 0x01, 0xbf, 0x01, 0x20, 0x02, 0x9e, 0x01, 0x86, 0x03, 0xac, 0x03, 0x88, 0x03, 0xad, 0x03, 0x89, 0x03, 0xae, 0x03, 0x8a, 0x03, 0xaf, 0x03, 0x8c, 0x03, 0xcc, 0x03, 0x8e, 0x03, 0xcd, 0x03, 0x8f, 0x03, 0xce, 0x03, 0x99, 0x03, 0x45, 0x03, 0x99, 0x03, 0xbe, 0x1f, 0xa3, 0x03, 0xc2, 0x03, 0xf7, 0x03, 0xf8, 0x03, 0xfa, 0x03, 0xfb, 0x03, 0x60, 0x1e, 0x9b, 0x1e, 0x9e, 0x1e, 0xdf, 0x00, 0x59, 0x1f, 0x51, 0x1f, 0x5b, 0x1f, 0x53, 0x1f, 0x5d, 0x1f, 0x55, 0x1f, 0x5f, 0x1f, 0x57, 0x1f, 0xbc, 0x1f, 0xb3, 0x1f, 0xcc, 0x1f, 0xc3, 0x1f, 0xec, 0x1f, 0xe5, 0x1f, 0xfc, 0x1f, 0xf3, 0x1f, 0x3a, 0x02, 0x65, 0x2c, 0x3b, 0x02, 0x3c, 0x02, 0x3d, 0x02, 0x9a, 0x01, 0x3e, 0x02, 0x66, 0x2c, 0x41, 0x02, 0x42, 0x02, 0x43, 0x02, 0x80, 0x01, 0x44, 0x02, 0x89, 0x02, 0x45, 0x02, 0x8c, 0x02, 0xf4, 0x03, 0xb8, 0x03, 0xf9, 0x03, 0xf2, 0x03, 0xfd, 0x03, 0x7b, 0x03, 0xfe, 0x03, 0x7c, 0x03, 0xff, 0x03, 0x7d, 0x03, 0xc0, 0x04, 0xcf, 0x04, 0x26, 0x21, 0xc9, 0x03, 0x2a, 0x21, 0x6b, 0x00, 0x2b, 0x21, 0xe5, 0x00, 0x32, 0x21, 0x4e, 0x21, 0x83, 0x21, 0x84, 0x21, 0x60, 0x2c, 0x61, 0x2c, 0x62, 0x2c, 0x6b, 0x02, 0x63, 0x2c, 0x7d, 0x1d, 0x64, 0x2c, 0x7d, 0x02, 0x6d, 0x2c, 0x51, 0x02, 0x6e, 0x2c, 0x71, 0x02, 0x6f, 0x2c, 0x50, 0x02, 0x70, 0x2c, 0x52, 0x02, 0x72, 0x2c, 0x73, 0x2c, 0x75, 0x2c, 0x76, 0x2c, 0x7e, 0x2c, 0x3f, 0x02, 0x7f, 0x2c, 0x40, 0x02, 0xf2, 0x2c, 0xf3, 0x2c, 0x7d, 0xa7, 0x79, 0x1d, 0x8b, 0xa7, 0x8c, 0xa7, 0x8d, 0xa7, 0x65, 0x02, 0xaa, 0xa7, 0x66, 0x02, 0xc7, 0x10, 0x27, 0x2d, 0xcd, 0x10, 0x2d, 0x2d, 0x76, 0x03, 0x77, 0x03, 0x9c, 0x03, 0xb5, 0x00, 0x92, 0x03, 0xd0, 0x03, 0x98, 0x03, 0xd1, 0x03, 0xa6, 0x03, 0xd5, 0x03, 0xa0, 0x03, 0xd6, 0x03, 0x9a, 0x03, 0xf0, 0x03, 0xa1, 0x03, 0xf1, 0x03, 0x95, 0x03, 0xf5, 0x03, 0xcf, 0x03, 0xd7, 0x03, 0xab, 0xa7, 0x5c, 0x02, 0xac, 0xa7, 0x61, 0x02, 0xad, 0xa7, 0x6c, 0x02, 0xae, 0xa7, 0x6a, 0x02, 0xb0, 0xa7, 0x9e, 0x02, 0xb1, 0xa7, 0x87, 0x02, 0xb2, 0xa7, 0x9d, 0x02, 0xb3, 0xa7, 0x53, 0xab, 0x12, 0x04, 0x80, 0x1c, 0x14, 0x04, 0x81, 0x1c, 0x1e, 0x04, 0x82, 0x1c, 0x21, 0x04, 0x83, 0x1c, 0x22, 0x04, 0x84, 0x1c, 0x22, 0x04, 0x85, 0x1c, 0x2a, 0x04, 0x86, 0x1c, 0x62, 0x04, 0x87, 0x1c, 0x4a, 0xa6, 0x88, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x10, 0x10, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f, 0x10, 0x10, 0x20, 0x10, 0x10, 0x10, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x10, 0x10, 0x28, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x29, 0x2a, 0x10, 0x10, 0x2b, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x2c, 0x10, 0x2d, 0x2e, 0x2f, 0x30, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x31, 0x10, 0x10, 0x32, 0x33, 0x10, 0x34, 0x35, 0x36, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x37, 0x10, 0x10, 0x10, 0x10, 0x10, 0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f, 0x10, 0x10, 0x40, 0x10, 0x41, 0x42, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x43, 0x44, 0x10, 0x10, 0x10, 0x45, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x46, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x47, 0x48, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x49, 0x10, 0x10, 0x10, 0x10, 0x10, 0x4a, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x4b, 0x4c, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xbf, 0xb6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x00, 0xff, 0x17, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0xff, 0xff, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xbf, 0x9f, 0x3d, 0x00, 0x00, 0x00, 0x80, 0x02, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x0f, 0x00, 0x00, 0x00, 0xc0, 0xfb, 0xef, 0x3e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0xff, 0xff, 0xff, 0xff, 0xff, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 0xfe, 0x21, 0xfe, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x1e, 0x20, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x86, 0x39, 0x02, 0x00, 0x00, 0x00, 0x23, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0xbe, 0x21, 0x00, 0x00, 0x0c, 0x00, 0x00, 0xfc, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x90, 0x1e, 0x20, 0x40, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xc1, 0x3d, 0x60, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x90, 0x40, 0x30, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x1e, 0x20, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x5c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf2, 0x07, 0x80, 0x7f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf2, 0x1b, 0x00, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0xa0, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x7f, 0xdf, 0xe0, 0xff, 0xfe, 0xff, 0xff, 0xff, 0x1f, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0xfd, 0x66, 0x00, 0x00, 0x00, 0xc3, 0x01, 0x00, 0x1e, 0x00, 0x64, 0x20, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1c, 0x00, 0x00, 0x00, 0x1c, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xb0, 0x3f, 0x40, 0xfe, 0x0f, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x87, 0x01, 0x04, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x7f, 0xe5, 0x1f, 0xf8, 0x9f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x7f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd0, 0x17, 0x04, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x0f, 0x00, 0x03, 0x00, 0x00, 0x00, 0x3c, 0x3b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0xa3, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0xcf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xff, 0xfd, 0x21, 0x10, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfb, 0x00, 0xf8, 0x00, 0x00, 0x00, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xdf, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xf7, 0x3f, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x44, 0x08, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0xff, 0xff, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x3f, 0x00, 0x00, 0x80, 0xff, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc8, 0x13, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7e, 0x66, 0x00, 0x08, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x9d, 0xc1, 0x02, 0x00, 0x00, 0x00, 0x00, 0x30, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x21, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x6e, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x87, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x7f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x78, 0x26, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x80, 0xef, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x7f, 0x00, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xd3, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xf8, 0x07, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x01, 0x00, 0x00, 0x00, 0xc0, 0x1f, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x5c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x85, 0x0d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3c, 0xb0, 0x01, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0xa7, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x28, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0xbc, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7e, 0x06, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x79, 0x80, 0x00, 0x7e, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfc, 0x7f, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfc, 0xff, 0xff, 0xfc, 0x6d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7e, 0xb4, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x03, 0xf8, 0xff, 0xe7, 0x0f, 0x00, 0x00, 0x00, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0xf8, 0xff, 0xff, 0xff, 0xff, 0xff, 0x1f, 0x20, 0x00, 0x10, 0x00, 0x00, 0xf8, 0xfe, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xf9, 0xdb, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x12, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x13, 0x10, 0x14, 0x15, 0x16, 0x10, 0x10, 0x10, 0x17, 0x10, 0x10, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x1d, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x1e, 0x10, 0x10, 0x10, 0x10, 0x1f, 0x10, 0x10, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x20, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x11, 0x11, 0x10, 0x10, 0x10, 0x21, 0x22, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x23, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x24, 0x11, 0x11, 0x25, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x11, 0x26, 0x27, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x10, 0x10, 0x2f, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1e, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x08, 0x00, 0x02, 0x0c, 0x00, 0x60, 0x30, 0x40, 0x10, 0x00, 0x00, 0x04, 0x2c, 0x24, 0x20, 0x0c, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x50, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x21, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xfb, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x0f, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x3f, 0x00, 0x00, 0x00, 0xff, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xff, 0xff, 0x7f, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0x07, 0xff, 0xff, 0xff, 0xff, 0x0f, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x03, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xf7, 0xff, 0x7f, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x1f, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x07, 0x00, 0xff, 0xff, 0xff, 0x7f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x0f, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0xfe, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0x0f, 0xff, 0x01, 0x03, 0x00, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x01, 0xe0, 0xbf, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xdf, 0xff, 0xff, 0x0f, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0x87, 0x0f, 0x00, 0xff, 0xff, 0x11, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0xfd, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x9f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x3f, 0x00, 0x78, 0xff, 0xff, 0xff, 0x00, 0x00, 0x04, 0x00, 0x00, 0x60, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x3f, 0x10, 0x07, 0x00, 0x00, 0x18, 0xf0, 0x01, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0xff, 0x1f, 0xff, 0xff, 0xff, 0x0f, 0x00, 0x00, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0xff, 0xff, 0x7f, 0x00, 0x00, 0x00, 0x5f, 0x5f, 0x69, 0x6e, 0x69, 0x74, 0x5f, 0x6c, 0x69, 0x62, 0x63, 0x00, 0x00, 0x00, 0x00, 0x00, 0x75, 0x6e, 0x73, 0x65, 0x74, 0x65, 0x6e, 0x76, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x54, 0x21, 0x22, 0x19, 0x0d, 0x01, 0x02, 0x03, 0x11, 0x4b, 0x1c, 0x0c, 0x10, 0x04, 0x0b, 0x1d, 0x12, 0x1e, 0x27, 0x68, 0x6e, 0x6f, 0x70, 0x71, 0x62, 0x20, 0x05, 0x06, 0x0f, 0x13, 0x14, 0x15, 0x1a, 0x08, 0x16, 0x07, 0x28, 0x24, 0x17, 0x18, 0x09, 0x0a, 0x0e, 0x1b, 0x1f, 0x25, 0x23, 0x83, 0x82, 0x7d, 0x26, 0x2a, 0x2b, 0x3c, 0x3d, 0x3e, 0x3f, 0x43, 0x47, 0x4a, 0x4d, 0x58, 0x59, 0x5a, 0x5b, 0x5c, 0x5d, 0x5e, 0x5f, 0x60, 0x61, 0x63, 0x64, 0x65, 0x66, 0x67, 0x69, 0x6a, 0x6b, 0x6c, 0x72, 0x73, 0x74, 0x79, 0x7a, 0x7b, 0x7c, 0x00, 0x49, 0x6c, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x20, 0x62, 0x79, 0x74, 0x65, 0x20, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x00, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x20, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x00, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x72, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x00, 0x4e, 0x6f, 0x74, 0x20, 0x61, 0x20, 0x74, 0x74, 0x79, 0x00, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x64, 0x65, 0x6e, 0x69, 0x65, 0x64, 0x00, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x00, 0x4e, 0x6f, 0x20, 0x73, 0x75, 0x63, 0x68, 0x20, 0x66, 0x69, 0x6c, 0x65, 0x20, 0x6f, 0x72, 0x20, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x00, 0x4e, 0x6f, 0x20, 0x73, 0x75, 0x63, 0x68, 0x20, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x00, 0x46, 0x69, 0x6c, 0x65, 0x20, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x00, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x20, 0x74, 0x6f, 0x6f, 0x20, 0x6c, 0x61, 0x72, 0x67, 0x65, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x64, 0x61, 0x74, 0x61, 0x20, 0x74, 0x79, 0x70, 0x65, 0x00, 0x4e, 0x6f, 0x20, 0x73, 0x70, 0x61, 0x63, 0x65, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x20, 0x6f, 0x6e, 0x20, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x00, 0x4f, 0x75, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x00, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x20, 0x62, 0x75, 0x73, 0x79, 0x00, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x72, 0x75, 0x70, 0x74, 0x65, 0x64, 0x20, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x00, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x20, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x72, 0x69, 0x6c, 0x79, 0x20, 0x75, 0x6e, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x00, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x20, 0x73, 0x65, 0x65, 0x6b, 0x00, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x2d, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x20, 0x6c, 0x69, 0x6e, 0x6b, 0x00, 0x52, 0x65, 0x61, 0x64, 0x2d, 0x6f, 0x6e, 0x6c, 0x79, 0x20, 0x66, 0x69, 0x6c, 0x65, 0x20, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x00, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x00, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x72, 0x65, 0x73, 0x65, 0x74, 0x20, 0x62, 0x79, 0x20, 0x70, 0x65, 0x65, 0x72, 0x00, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x64, 0x20, 0x6f, 0x75, 0x74, 0x00, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x72, 0x65, 0x66, 0x75, 0x73, 0x65, 0x64, 0x00, 0x48, 0x6f, 0x73, 0x74, 0x20, 0x69, 0x73, 0x20, 0x64, 0x6f, 0x77, 0x6e, 0x00, 0x48, 0x6f, 0x73, 0x74, 0x20, 0x69, 0x73, 0x20, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x6c, 0x65, 0x00, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x20, 0x69, 0x6e, 0x20, 0x75, 0x73, 0x65, 0x00, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x6e, 0x20, 0x70, 0x69, 0x70, 0x65, 0x00, 0x49, 0x2f, 0x4f, 0x20, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x00, 0x4e, 0x6f, 0x20, 0x73, 0x75, 0x63, 0x68, 0x20, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x20, 0x6f, 0x72, 0x20, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x00, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x20, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x20, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x00, 0x4e, 0x6f, 0x20, 0x73, 0x75, 0x63, 0x68, 0x20, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x00, 0x4e, 0x6f, 0x74, 0x20, 0x61, 0x20, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x00, 0x49, 0x73, 0x20, 0x61, 0x20, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x00, 0x54, 0x65, 0x78, 0x74, 0x20, 0x66, 0x69, 0x6c, 0x65, 0x20, 0x62, 0x75, 0x73, 0x79, 0x00, 0x45, 0x78, 0x65, 0x63, 0x20, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x20, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x00, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x20, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x00, 0x41, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x20, 0x74, 0x6f, 0x6f, 0x20, 0x6c, 0x6f, 0x6e, 0x67, 0x00, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x69, 0x63, 0x20, 0x6c, 0x69, 0x6e, 0x6b, 0x20, 0x6c, 0x6f, 0x6f, 0x70, 0x00, 0x46, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x74, 0x6f, 0x6f, 0x20, 0x6c, 0x6f, 0x6e, 0x67, 0x00, 0x54, 0x6f, 0x6f, 0x20, 0x6d, 0x61, 0x6e, 0x79, 0x20, 0x6f, 0x70, 0x65, 0x6e, 0x20, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x20, 0x69, 0x6e, 0x20, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x00, 0x4e, 0x6f, 0x20, 0x66, 0x69, 0x6c, 0x65, 0x20, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x73, 0x20, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x00, 0x42, 0x61, 0x64, 0x20, 0x66, 0x69, 0x6c, 0x65, 0x20, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x00, 0x4e, 0x6f, 0x20, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x20, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x00, 0x42, 0x61, 0x64, 0x20, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x00, 0x46, 0x69, 0x6c, 0x65, 0x20, 0x74, 0x6f, 0x6f, 0x20, 0x6c, 0x61, 0x72, 0x67, 0x65, 0x00, 0x54, 0x6f, 0x6f, 0x20, 0x6d, 0x61, 0x6e, 0x79, 0x20, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x00, 0x4e, 0x6f, 0x20, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x20, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x00, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x20, 0x64, 0x65, 0x61, 0x64, 0x6c, 0x6f, 0x63, 0x6b, 0x20, 0x77, 0x6f, 0x75, 0x6c, 0x64, 0x20, 0x6f, 0x63, 0x63, 0x75, 0x72, 0x00, 0x53, 0x74, 0x61, 0x74, 0x65, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x00, 0x50, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x20, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x20, 0x64, 0x69, 0x65, 0x64, 0x00, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x65, 0x64, 0x00, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x65, 0x64, 0x00, 0x4e, 0x6f, 0x20, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x20, 0x74, 0x79, 0x70, 0x65, 0x00, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x20, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x00, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x61, 0x20, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x00, 0x4e, 0x6f, 0x20, 0x64, 0x61, 0x74, 0x61, 0x20, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x00, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x00, 0x4f, 0x75, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x20, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x00, 0x4c, 0x69, 0x6e, 0x6b, 0x20, 0x68, 0x61, 0x73, 0x20, 0x62, 0x65, 0x65, 0x6e, 0x20, 0x73, 0x65, 0x76, 0x65, 0x72, 0x65, 0x64, 0x00, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x20, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x00, 0x42, 0x61, 0x64, 0x20, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x00, 0x46, 0x69, 0x6c, 0x65, 0x20, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x20, 0x69, 0x6e, 0x20, 0x62, 0x61, 0x64, 0x20, 0x73, 0x74, 0x61, 0x74, 0x65, 0x00, 0x4e, 0x6f, 0x74, 0x20, 0x61, 0x20, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x00, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x20, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x00, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x20, 0x74, 0x6f, 0x6f, 0x20, 0x6c, 0x61, 0x72, 0x67, 0x65, 0x00, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x20, 0x77, 0x72, 0x6f, 0x6e, 0x67, 0x20, 0x74, 0x79, 0x70, 0x65, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x00, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x00, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x00, 0x53, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x20, 0x74, 0x79, 0x70, 0x65, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x00, 0x4e, 0x6f, 0x74, 0x20, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x00, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x20, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x00, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x20, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x20, 0x62, 0x79, 0x20, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x00, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x00, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x20, 0x69, 0x73, 0x20, 0x64, 0x6f, 0x77, 0x6e, 0x00, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x20, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x6c, 0x65, 0x00, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x72, 0x65, 0x73, 0x65, 0x74, 0x20, 0x62, 0x79, 0x20, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x00, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x61, 0x62, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x00, 0x4e, 0x6f, 0x20, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x20, 0x73, 0x70, 0x61, 0x63, 0x65, 0x20, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x00, 0x53, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x20, 0x69, 0x73, 0x20, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x00, 0x53, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x00, 0x43, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x20, 0x73, 0x65, 0x6e, 0x64, 0x20, 0x61, 0x66, 0x74, 0x65, 0x72, 0x20, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x20, 0x73, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x00, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x61, 0x6c, 0x72, 0x65, 0x61, 0x64, 0x79, 0x20, 0x69, 0x6e, 0x20, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x00, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x69, 0x6e, 0x20, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x00, 0x53, 0x74, 0x61, 0x6c, 0x65, 0x20, 0x66, 0x69, 0x6c, 0x65, 0x20, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x00, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x20, 0x49, 0x2f, 0x4f, 0x20, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x00, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x20, 0x65, 0x78, 0x63, 0x65, 0x65, 0x64, 0x65, 0x64, 0x00, 0x4e, 0x6f, 0x20, 0x6d, 0x65, 0x64, 0x69, 0x75, 0x6d, 0x20, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x00, 0x57, 0x72, 0x6f, 0x6e, 0x67, 0x20, 0x6d, 0x65, 0x64, 0x69, 0x75, 0x6d, 0x20, 0x74, 0x79, 0x70, 0x65, 0x00, 0x4e, 0x6f, 0x20, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x20, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x74, 0x00, 0x00, 0x5f, 0x70, 0x89, 0x00, 0xff, 0x09, 0x2f, 0x0f, 0x0a, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0xe8, 0x03, 0x00, 0x00, 0x10, 0x27, 0x00, 0x00, 0xa0, 0x86, 0x01, 0x00, 0x40, 0x42, 0x0f, 0x00, 0x80, 0x96, 0x98, 0x00, 0x00, 0xe1, 0xf5, 0x05, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f, 0x20, 0x21, 0x22, 0x23, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f, 0x20, 0x21, 0x22, 0x23, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0x2e, 0x31, 0x2e, 0x31, 0x39, 0x00, 0x00, 0x6d, 0x73, 0x67, 0x72, 0x63, 0x76, 0x00, 0x00, 0x6d, 0x73, 0x67, 0x73, 0x6e, 0x64, 0x00, 0x00, 0x73, 0x65, 0x6d, 0x63, 0x74, 0x6c, 0x00, 0x00, 0x64, 0x6c, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x00, 0x64, 0x6c, 0x69, 0x6e, 0x66, 0x6f, 0x00, 0x00, 0x66, 0x74, 0x77, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2f, 0x62, 0x69, 0x6e, 0x2f, 0x73, 0x68, 0x0a, 0x2f, 0x62, 0x69, 0x6e, 0x2f, 0x63, 0x73, 0x68, 0x0a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x67, 0x65, 0x74, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x70, 0x70, 0x6f, 0x6c, 0x6c, 0x00, 0x00, 0x00, 0xde, 0x12, 0x04, 0x95, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x62, 0x69, 0x6e, 0x64, 0x74, 0x65, 0x78, 0x74, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x00, 0x00, 0x64, 0x63, 0x6e, 0x67, 0x65, 0x74, 0x74, 0x65, 0x78, 0x74, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x61, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x00, 0x75, 0x74, 0x66, 0x38, 0x00, 0x63, 0x68, 0x61, 0x72, 0x00, 0x00, 0xc8, 0x77, 0x63, 0x68, 0x61, 0x72, 0x74, 0x00, 0x00, 0xc6, 0x75, 0x63, 0x73, 0x32, 0x62, 0x65, 0x00, 0x00, 0xc4, 0x75, 0x63, 0x73, 0x32, 0x6c, 0x65, 0x00, 0x00, 0xc5, 0x75, 0x74, 0x66, 0x31, 0x36, 0x62, 0x65, 0x00, 0x00, 0xc2, 0x75, 0x74, 0x66, 0x31, 0x36, 0x6c, 0x65, 0x00, 0x00, 0xc1, 0x75, 0x63, 0x73, 0x34, 0x62, 0x65, 0x00, 0x75, 0x74, 0x66, 0x33, 0x32, 0x62, 0x65, 0x00, 0x00, 0xc0, 0x75, 0x63, 0x73, 0x34, 0x6c, 0x65, 0x00, 0x75, 0x74, 0x66, 0x33, 0x32, 0x6c, 0x65, 0x00, 0x00, 0xc3, 0x61, 0x73, 0x63, 0x69, 0x69, 0x00, 0x75, 0x73, 0x61, 0x73, 0x63, 0x69, 0x69, 0x00, 0x69, 0x73, 0x6f, 0x36, 0x34, 0x36, 0x00, 0x69, 0x73, 0x6f, 0x36, 0x34, 0x36, 0x75, 0x73, 0x00, 0x00, 0xc7, 0x75, 0x74, 0x66, 0x31, 0x36, 0x00, 0x00, 0xca, 0x75, 0x63, 0x73, 0x34, 0x00, 0x75, 0x74, 0x66, 0x33, 0x32, 0x00, 0x00, 0xcb, 0x75, 0x63, 0x73, 0x32, 0x00, 0x00, 0xcc, 0x65, 0x75, 0x63, 0x6a, 0x70, 0x00, 0x00, 0xd0, 0x73, 0x68, 0x69, 0x66, 0x74, 0x6a, 0x69, 0x73, 0x00, 0x73, 0x6a, 0x69, 0x73, 0x00, 0x00, 0xd1, 0x69, 0x73, 0x6f, 0x32, 0x30, 0x32, 0x32, 0x6a, 0x70, 0x00, 0x00, 0xd2, 0x67, 0x62, 0x31, 0x38, 0x30, 0x33, 0x30, 0x00, 0x00, 0xd8, 0x67, 0x62, 0x6b, 0x00, 0x00, 0xd9, 0x67, 0x62, 0x32, 0x33, 0x31, 0x32, 0x00, 0x00, 0xda, 0x62, 0x69, 0x67, 0x35, 0x00, 0x62, 0x69, 0x67, 0x66, 0x69, 0x76, 0x65, 0x00, 0x63, 0x70, 0x39, 0x35, 0x30, 0x00, 0x62, 0x69, 0x67, 0x35, 0x68, 0x6b, 0x73, 0x63, 0x73, 0x00, 0x00, 0xe0, 0x65, 0x75, 0x63, 0x6b, 0x72, 0x00, 0x6b, 0x73, 0x63, 0x35, 0x36, 0x30, 0x31, 0x00, 0x6b, 0x73, 0x78, 0x31, 0x30, 0x30, 0x31, 0x00, 0x63, 0x70, 0x39, 0x34, 0x39, 0x00, 0x00, 0xe8, 0x69, 0x73, 0x6f, 0x38, 0x38, 0x35, 0x39, 0x31, 0x00, 0x6c, 0x61, 0x74, 0x69, 0x6e, 0x31, 0x00, 0x00, 0x40, 0x69, 0x73, 0x6f, 0x38, 0x38, 0x35, 0x39, 0x32, 0x00, 0x00, 0x28, 0xa0, 0x10, 0xf4, 0x57, 0x4e, 0xa4, 0xdc, 0xf4, 0xd4, 0x29, 0xa8, 0x54, 0x35, 0x55, 0x56, 0x6e, 0xb5, 0x22, 0x17, 0x5c, 0xb0, 0x14, 0x14, 0x98, 0x4e, 0xb4, 0xe0, 0x04, 0x95, 0x5f, 0xb8, 0x58, 0x45, 0x95, 0x56, 0x6f, 0x0d, 0x36, 0x57, 0x5c, 0x49, 0x05, 0x23, 0x8c, 0x40, 0xc4, 0xcc, 0x64, 0xd0, 0x31, 0x0c, 0x25, 0x63, 0xd1, 0x32, 0x18, 0x35, 0xe3, 0x8c, 0x43, 0x10, 0xed, 0xf4, 0xd3, 0x34, 0xd4, 0x14, 0x65, 0xcd, 0x35, 0x4d, 0x8d, 0xa5, 0x4d, 0x59, 0xdc, 0x74, 0x73, 0xd5, 0x37, 0x4a, 0x85, 0x23, 0xce, 0x40, 0xe4, 0xd0, 0x74, 0xd0, 0x39, 0x0d, 0xa5, 0x73, 0xd1, 0x3a, 0x19, 0xb5, 0xe3, 0xce, 0x43, 0x11, 0xf1, 0x04, 0xd4, 0x3c, 0xf4, 0x18, 0x65, 0xcf, 0x3d, 0x4e, 0x91, 0xa5, 0x8f, 0x59, 0xfc, 0xf4, 0x83, 0x15, 0x60, 0x69, 0x73, 0x6f, 0x38, 0x38, 0x35, 0x39, 0x33, 0x00, 0x00, 0x28, 0xa0, 0x90, 0xf4, 0xd7, 0x28, 0xa4, 0x00, 0x20, 0xd2, 0x29, 0xa8, 0xb0, 0x34, 0x15, 0x47, 0x2e, 0xb5, 0x02, 0x00, 0x5c, 0xb0, 0x94, 0x24, 0xcb, 0x2c, 0xb4, 0xd4, 0x32, 0xd2, 0x2d, 0xb8, 0xb4, 0x44, 0x55, 0x47, 0x2f, 0xf5, 0x02, 0x40, 0x5c, 0xc0, 0x04, 0x23, 0x0c, 0x00, 0xc4, 0x28, 0x84, 0xd0, 0x31, 0xc8, 0x24, 0xa3, 0xcc, 0x32, 0xcc, 0x34, 0xe3, 0xcc, 0x33, 0x00, 0x44, 0x23, 0xcd, 0x34, 0xd4, 0x78, 0x64, 0xcd, 0x35, 0x1a, 0x65, 0xa3, 0xcd, 0x36, 0xdc, 0x84, 0x15, 0xd5, 0x37, 0xe0, 0x84, 0x23, 0x0e, 0x00, 0xe4, 0x2c, 0x94, 0xd0, 0x39, 0xe8, 0xa4, 0xa3, 0xce, 0x3a, 0xec, 0xb4, 0xe3, 0xce, 0x3b, 0x00, 0xc4, 0x23, 0xcf, 0x3c, 0xf4, 0x7c, 0x64, 0xcf, 0x3d, 0x1b, 0xe5, 0xa3, 0xcf, 0x3e, 0xfc, 0x88, 0x25, 0x15, 0x60, 0x69, 0x73, 0x6f, 0x38, 0x38, 0x35, 0x39, 0x34, 0x00, 0x00, 0x28, 0xa0, 0x10, 0x24, 0xd3, 0x52, 0xa4, 0x98, 0x54, 0xd3, 0x29, 0xa8, 0x54, 0x25, 0x11, 0x48, 0x5b, 0xb5, 0x22, 0xd7, 0x2b, 0xb0, 0x14, 0x14, 0x18, 0x53, 0xb4, 0x9c, 0x64, 0x93, 0x5f, 0xb8, 0x58, 0x35, 0x51, 0x48, 0x5c, 0x05, 0x35, 0x97, 0x50, 0x00, 0x05, 0x23, 0xcc, 0x30, 0xc4, 0x14, 0x63, 0x8c, 0x4a, 0x0c, 0x25, 0x63, 0xd1, 0x32, 0x14, 0x35, 0xe3, 0x0c, 0x4a, 0x10, 0xf5, 0x34, 0x14, 0x4c, 0xd4, 0x54, 0x63, 0xcd, 0x35, 0xd8, 0x9c, 0xa5, 0xcd, 0x36, 0xdc, 0x74, 0xf5, 0xd5, 0x37, 0x01, 0x85, 0x23, 0xce, 0x38, 0xe4, 0x94, 0x63, 0xce, 0x4a, 0x0d, 0xa5, 0x73, 0xd1, 0x3a, 0x15, 0xb5, 0xe3, 0x4e, 0x4a, 0x11, 0xf9, 0x44, 0x54, 0x4c, 0xf4, 0xd4, 0x63, 0xcf, 0x3d, 0xf8, 0xa0, 0xa5, 0xcf, 0x3e, 0xfc, 0x78, 0x05, 0x16, 0x60, 0x69, 0x73, 0x6f, 0x38, 0x38, 0x35, 0x39, 0x35, 0x00, 0x00, 0x28, 0xa0, 0x44, 0x27, 0xdd, 0x74, 0xd4, 0x55, 0x67, 0xdd, 0x75, 0xd8, 0x65, 0xa7, 0xdd, 0x76, 0xdc, 0xb5, 0xd2, 0x9d, 0x77, 0xdf, 0x81, 0x17, 0x9e, 0x78, 0xe3, 0x91, 0x57, 0x9e, 0x79, 0xe7, 0xa1, 0x97, 0x9e, 0x7a, 0xeb, 0xb1, 0xd7, 0x9e, 0x7b, 0xef, 0xc1, 0x17, 0x9f, 0x7c, 0xf3, 0xd1, 0x57, 0x9f, 0x7d, 0xf7, 0xe1, 0x97, 0x9f, 0x7e, 0xfb, 0xf1, 0xd7, 0x9f, 0x7f, 0xff, 0x01, 0x18, 0xa0, 0x80, 0x03, 0x12, 0x58, 0xa0, 0x81, 0x07, 0x22, 0x98, 0xa0, 0x82, 0x0b, 0x32, 0xd8, 0xa0, 0x83, 0x0f, 0x42, 0x18, 0xa1, 0x84, 0x13, 0x52, 0x58, 0xa1, 0x85, 0x17, 0x62, 0x98, 0xa1, 0x86, 0x1b, 0x72, 0xd8, 0xa1, 0x87, 0x26, 0x7f, 0x08, 0x62, 0x88, 0x22, 0x8e, 0x48, 0x62, 0x89, 0x26, 0x9e, 0x88, 0x62, 0x8a, 0x2a, 0x9e, 0xb2, 0x22, 0x8b, 0x69, 0x73, 0x6f, 0x38, 0x38, 0x35, 0x39, 0x36, 0x00, 0x00, 0x28, 0xa0, 0x00, 0x00, 0x00, 0x00, 0xa4, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x62, 0xb6, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x98, 0x00, 0x00, 0x00, 0x00, 0x99, 0x00, 0x94, 0x69, 0xe6, 0x99, 0x68, 0xa6, 0xa9, 0xe6, 0x9a, 0x6c, 0xb6, 0xe9, 0xe6, 0x9b, 0x70, 0xc6, 0x29, 0xe7, 0x9c, 0x74, 0xd6, 0x69, 0xe7, 0x9d, 0x78, 0xe6, 0xa9, 0xe7, 0x9e, 0x7c, 0xf6, 0xe9, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0x02, 0x1a, 0xa8, 0xa0, 0x83, 0x12, 0x5a, 0xa8, 0xa1, 0x87, 0x22, 0x9a, 0xa8, 0xa2, 0x8b, 0x32, 0xda, 0xa8, 0xa3, 0x8f, 0x42, 0x1a, 0x29, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x69, 0x73, 0x6f, 0x38, 0x38, 0x35, 0x39, 0x37, 0x00, 0x00, 0x28, 0xa0, 0x4c, 0x4c, 0xf1, 0x28, 0x24, 0x97, 0x6c, 0xca, 0x29, 0xa8, 0xa4, 0x92, 0xd8, 0x2a, 0xac, 0xb4, 0x02, 0x40, 0xc4, 0xb0, 0xc4, 0x22, 0xcb, 0x2c, 0x8a, 0x2d, 0xc6, 0xd8, 0x2d, 0x8d, 0x39, 0xf6, 0xd8, 0x2e, 0x90, 0xf5, 0x12, 0x99, 0x64, 0x93, 0x51, 0x56, 0x99, 0x65, 0x97, 0x61, 0x96, 0x99, 0x66, 0x9b, 0x71, 0xd6, 0x99, 0x67, 0x9f, 0x81, 0x16, 0x9a, 0x68, 0xa3, 0x91, 0x06, 0x40, 0x69, 0xa6, 0x9d, 0x86, 0x5a, 0x6a, 0xaa, 0xad, 0xc6, 0x5a, 0x6b, 0xae, 0xbd, 0x06, 0x5b, 0x6c, 0xb2, 0xcd, 0x46, 0x5b, 0x6d, 0xb6, 0xdd, 0x86, 0x5b, 0x6e, 0xba, 0xed, 0xc6, 0x5b, 0x6f, 0xbe, 0xfd, 0x06, 0x5c, 0x70, 0xc2, 0x0d, 0x47, 0x5c, 0x71, 0xc6, 0x1d, 0x87, 0x5c, 0x72, 0xca, 0x2d, 0xc7, 0x5c, 0x73, 0xce, 0x3d, 0x07, 0x1d, 0x00, 0x69, 0x73, 0x6f, 0x38, 0x38, 0x35, 0x39, 0x38, 0x00, 0x00, 0x28, 0xa0, 0x00, 0x20, 0xca, 0x28, 0xa4, 0x94, 0x62, 0xca, 0x29, 0xa8, 0xa4, 0x72, 0xcd, 0x2a, 0xac, 0xb4, 0xe2, 0xca, 0x2b, 0xb0, 0xc4, 0x22, 0xcb, 0x2c, 0xb4, 0xd4, 0x62, 0xcb, 0x2d, 0xb8, 0xe4, 0x72, 0xcf, 0x2e, 0xbc, 0xf4, 0xe2, 0x0b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xc4, 0x42, 0x0e, 0x49, 0x64, 0x91, 0x46, 0x1e, 0x89, 0x64, 0x92, 0x4a, 0x2e, 0xc9, 0x64, 0x93, 0x4e, 0x3e, 0x09, 0x65, 0x94, 0x52, 0x4e, 0x49, 0x65, 0x95, 0x56, 0x5e, 0x89, 0x65, 0x96, 0x5a, 0x6e, 0xc9, 0x25, 0x00, 0x00, 0x34, 0xec, 0x30, 0x00, 0x69, 0x73, 0x6f, 0x38, 0x38, 0x35, 0x39, 0x39, 0x00, 0x00, 0x34, 0x1c, 0x45, 0x23, 0xcd, 0x34, 0xd4, 0x54, 0x63, 0xcd, 0x35, 0xd8, 0x64, 0xa3, 0xcd, 0x36, 0xdc, 0xb0, 0x34, 0xd5, 0x37, 0xe0, 0x84, 0x23, 0xce, 0x38, 0xe4, 0x94, 0x63, 0xce, 0x39, 0xe8, 0xa4, 0xa3, 0xce, 0x3a, 0xec, 0xb4, 0xe3, 0xce, 0x3b, 0x1d, 0xc5, 0x23, 0xcf, 0x3c, 0xf4, 0xd4, 0x63, 0xcf, 0x3d, 0xf8, 0xe4, 0xa3, 0xcf, 0x3e, 0xfc, 0xb4, 0x44, 0xd5, 0x3f, 0x69, 0x73, 0x6f, 0x38, 0x38, 0x35, 0x39, 0x31, 0x30, 0x00, 0x00, 0x28, 0xa0, 0x10, 0x24, 0x11, 0x48, 0x28, 0x99, 0x04, 0xd3, 0x29, 0x35, 0x41, 0x54, 0xd5, 0x56, 0x72, 0xb5, 0xf2, 0x55, 0x50, 0xb0, 0x14, 0x34, 0x51, 0x48, 0x29, 0x9d, 0x14, 0xd3, 0x2d, 0x36, 0x45, 0x64, 0x15, 0x57, 0x73, 0x45, 0x0c, 0x96, 0x50, 0x00, 0x05, 0x23, 0xcc, 0x30, 0xc4, 0x14, 0x63, 0x8c, 0x4a, 0x0c, 0x25, 0x63, 0xd1, 0x32, 0x14, 0x35, 0xe3, 0xcc, 0x33, 0xd0, 0xf4, 0x34, 0xd4, 0x34, 0xd4, 0x54, 0x63, 0x4d, 0x57, 0xd8, 0x9c, 0xa5, 0xcd, 0x36, 0xdc, 0x74, 0xe3, 0xcd, 0x37, 0x01, 0x85, 0x23, 0xce, 0x38, 0xe4, 0x94, 0x63, 0xce, 0x4a, 0x0d, 0xa5, 0x73, 0xd1, 0x3a, 0x15, 0xb5, 0xe3, 0xce, 0x3b, 0xf0, 0xf8, 0x44, 0xd4, 0x3c, 0xf4, 0xd4, 0x63, 0x8f, 0x57, 0xf8, 0xa0, 0xa5, 0xcf, 0x3e, 0xfc, 0xf4, 0xe3, 0x8f, 0x4c, 0x69, 0x73, 0x6f, 0x38, 0x38, 0x35, 0x39, 0x31, 0x31, 0x00, 0x74, 0x69, 0x73, 0x36, 0x32, 0x30, 0x00, 0x00, 0x28, 0xa0, 0x78, 0xfa, 0x29, 0xa8, 0xa1, 0x8a, 0x3a, 0x2a, 0xa9, 0xa5, 0x9a, 0x7a, 0x2a, 0xaa, 0xa9, 0xaa, 0xba, 0x2a, 0xab, 0xad, 0xba, 0xfa, 0x2a, 0xac, 0xb1, 0xca, 0x3a, 0x2b, 0xad, 0xb5, 0xda, 0x7a, 0x2b, 0xae, 0xb9, 0xea, 0xba, 0x2b, 0xaf, 0xbd, 0xfa, 0xfa, 0x2b, 0xb0, 0xc1, 0x0a, 0x3b, 0x2c, 0xb1, 0xc5, 0x1a, 0x7b, 0x2c, 0xb2, 0xc9, 0x2a, 0xbb, 0x2c, 0xb3, 0xcd, 0x3a, 0xfb, 0x2c, 0xb4, 0xd1, 0x4a, 0x3b, 0x2d, 0xb5, 0xd5, 0x5a, 0x7b, 0x2d, 0x00, 0x00, 0x00, 0x00, 0x00, 0xb6, 0xd9, 0x6a, 0xbb, 0x2d, 0xb7, 0xdd, 0x7a, 0xfb, 0x2d, 0xb8, 0xe1, 0x8a, 0x3b, 0x2e, 0xb9, 0xe5, 0x9a, 0x7b, 0x2e, 0xba, 0xe9, 0xaa, 0xbb, 0x2e, 0xbb, 0xed, 0xba, 0xfb, 0x2e, 0xbc, 0xf1, 0xca, 0x3b, 0x2f, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x69, 0x73, 0x6f, 0x38, 0x38, 0x35, 0x39, 0x31, 0x33, 0x00, 0x00, 0x28, 0xa0, 0x5c, 0x2c, 0xca, 0x28, 0xa4, 0x60, 0x6c, 0xca, 0x29, 0xd8, 0xa4, 0xb2, 0xd4, 0x2a, 0xac, 0xb4, 0xe2, 0x8a, 0x31, 0xb0, 0xc4, 0x22, 0xcb, 0x2c, 0x16, 0xd7, 0x62, 0xcb, 0x2d, 0xf8, 0xe4, 0xc2, 0xd4, 0x2e, 0xbc, 0xf4, 0xe2, 0x8b, 0x39, 0x04, 0xa9, 0x04, 0x90, 0x41, 0xc4, 0x14, 0x63, 0x91, 0x44, 0x0c, 0x25, 0xe3, 0x16, 0x45, 0x20, 0xc1, 0x84, 0x52, 0x4d, 0x55, 0xed, 0xd4, 0xd3, 0x34, 0x43, 0x55, 0x63, 0xcd, 0x35, 0x67, 0xe5, 0xf4, 0xd4, 0x57, 0xdc, 0xc0, 0x25, 0xd7, 0x37, 0x05, 0xad, 0x14, 0xd0, 0x41, 0xe4, 0x94, 0x73, 0xd1, 0x44, 0x0d, 0xa5, 0xf3, 0x56, 0x45, 0x21, 0xc5, 0x94, 0x92, 0x4d, 0x56, 0xf1, 0xe4, 0xd3, 0x3c, 0x44, 0xd5, 0x63, 0xcf, 0x3d, 0x68, 0xe9, 0x04, 0x15, 0x58, 0xfc, 0xc4, 0x35, 0x17, 0xc5, 0x69, 0x73, 0x6f, 0x38, 0x38, 0x35, 0x39, 0x31, 0x34, 0x00, 0x00, 0x28, 0xa0, 0xd4, 0x6b, 0xef, 0x28, 0x0a, 0x2d, 0x74, 0xef, 0x29, 0x03, 0xa7, 0x52, 0x30, 0xbe, 0x09, 0xb7, 0xe2, 0x4a, 0x5b, 0xf9, 0xea, 0xeb, 0xd1, 0x47, 0xfb, 0xf2, 0x6b, 0x4b, 0xbf, 0x04, 0xfb, 0x6b, 0xf0, 0xbf, 0x0a, 0x1f, 0x8c, 0x30, 0xc0, 0xc0, 0x04, 0x23, 0xcc, 0x30, 0xc4, 0x14, 0x63, 0xcc, 0x31, 0xc8, 0x24, 0xa3, 0xcc, 0x32, 0xcc, 0x34, 0xe3, 0xcc, 0x33, 0x69, 0x45, 0x23, 0xcd, 0x34, 0xd4, 0x54, 0x63, 0x4d, 0xc0, 0xd8, 0x64, 0xa3, 0xcd, 0x36, 0xdc, 0x74, 0xb3, 0xd6, 0x37, 0xe0, 0x84, 0x23, 0xce, 0x38, 0xe4, 0x94, 0x63, 0xce, 0x39, 0xe8, 0xa4, 0xa3, 0xce, 0x3a, 0xec, 0xb4, 0xe3, 0xce, 0x3b, 0x6a, 0xc5, 0x23, 0xcf, 0x3c, 0xf4, 0xd4, 0x63, 0x8f, 0xc0, 0xf8, 0xe4, 0xa3, 0xcf, 0x3e, 0xfc, 0xf4, 0xc3, 0xd6, 0x3f, 0x69, 0x73, 0x6f, 0x38, 0x38, 0x35, 0x39, 0x31, 0x35, 0x00, 0x6c, 0x61, 0x74, 0x69, 0x6e, 0x39, 0x00, 0x00, 0x29, 0x24, 0x97, 0x52, 0xd5, 0x29, 0x56, 0xa5, 0xa2, 0xca, 0x2a, 0xac, 0xb4, 0xe2, 0xca, 0x2b, 0xb0, 0xc4, 0x22, 0xcb, 0x2c, 0x72, 0xd5, 0x62, 0xcb, 0x2d, 0x73, 0xe5, 0xa2, 0xcb, 0x2e, 0x47, 0x21, 0xd5, 0xd6, 0x2f, 0xc0, 0x04, 0x23, 0xcc, 0x30, 0xc4, 0x14, 0x63, 0xcc, 0x31, 0xc8, 0x24, 0xa3, 0xcc, 0x32, 0xcc, 0x34, 0xe3, 0xcc, 0x33, 0xd0, 0x44, 0x23, 0xcd, 0x34, 0xd4, 0x54, 0x63, 0xcd, 0x35, 0xd8, 0x64, 0xa3, 0xcd, 0x36, 0xdc, 0x74, 0xe3, 0xcd, 0x37, 0xe0, 0x84, 0x23, 0xce, 0x38, 0xe4, 0x94, 0x63, 0xce, 0x39, 0xe8, 0xa4, 0xa3, 0xce, 0x3a, 0xec, 0xb4, 0xe3, 0xce, 0x3b, 0xf0, 0xc4, 0x23, 0xcf, 0x3c, 0xf4, 0xd4, 0x63, 0xcf, 0x3d, 0xf8, 0xe4, 0xa3, 0xcf, 0x3e, 0xfc, 0xf4, 0xe3, 0xcf, 0x3f, 0x69, 0x73, 0x6f, 0x38, 0x38, 0x35, 0x39, 0x31, 0x36, 0x00, 0x00, 0x28, 0xa0, 0x10, 0x54, 0x50, 0x4e, 0x24, 0x63, 0x5c, 0xd5, 0x29, 0x56, 0xa5, 0x92, 0xd7, 0x2a, 0x6e, 0xb5, 0xf2, 0x16, 0x5c, 0xb0, 0xc4, 0xc2, 0x90, 0x4e, 0x72, 0x5d, 0x6c, 0xcb, 0x2d, 0x73, 0x35, 0xa4, 0xd7, 0x2e, 0x47, 0x21, 0xd5, 0x56, 0x5c, 0xc0, 0x04, 0x23, 0x8c, 0x40, 0xc4, 0x18, 0x64, 0xcc, 0x31, 0xc8, 0x24, 0xa3, 0xcc, 0x32, 0xcc, 0x34, 0xe3, 0xcc, 0x33, 0x10, 0xed, 0x24, 0xcd, 0x34, 0xd4, 0x14, 0x65, 0xcd, 0x53, 0x65, 0x65, 0xa3, 0xcd, 0x36, 0xdc, 0x58, 0xb4, 0xd7, 0x37, 0xe0, 0x84, 0x23, 0xce, 0x40, 0xe4, 0x1c, 0x64, 0xce, 0x39, 0xe8, 0xa4, 0xa3, 0xce, 0x3a, 0xec, 0xb4, 0xe3, 0xce, 0x3b, 0x11, 0xf1, 0x24, 0xcf, 0x3c, 0xf4, 0x18, 0x65, 0x0f, 0x54, 0x66, 0xe5, 0xa3, 0xcf, 0x3e, 0xfc, 0x5c, 0xc4, 0xd7, 0x3f, 0x63, 0x70, 0x31, 0x32, 0x35, 0x30, 0x00, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x73, 0x31, 0x32, 0x35, 0x30, 0x00, 0x00, 0x20, 0x24, 0x03, 0x50, 0x31, 0x00, 0x18, 0x73, 0x9c, 0xb1, 0xc6, 0x00, 0x74, 0x5c, 0x95, 0xc7, 0x4f, 0x65, 0x25, 0x97, 0x5b, 0x00, 0x4c, 0x4c, 0xb1, 0xc5, 0x17, 0x6f, 0xfc, 0x30, 0xc4, 0x00, 0x9c, 0x6c, 0xd5, 0xc7, 0x50, 0x69, 0x35, 0xd7, 0x5b, 0xa0, 0xf8, 0xf5, 0x57, 0x4e, 0xa4, 0x10, 0x64, 0xca, 0x29, 0xa8, 0xa4, 0x32, 0xd5, 0x2a, 0xac, 0xb4, 0xe2, 0x0a, 0x5c, 0xb0, 0xc4, 0x12, 0x98, 0x4e, 0xb4, 0xd4, 0x62, 0xcb, 0x2d, 0xb8, 0x14, 0x44, 0xd5, 0x2e, 0x37, 0x0d, 0x86, 0x53, 0x5c, 0x49, 0x05, 0x23, 0x8c, 0x40, 0xc4, 0xcc, 0x64, 0xd0, 0x31, 0x0c, 0x25, 0x63, 0xd1, 0x32, 0x18, 0x35, 0xe3, 0x8c, 0x43, 0x10, 0xed, 0xf4, 0xd3, 0x34, 0xd4, 0x14, 0x65, 0xcd, 0x35, 0x4d, 0x8d, 0xa5, 0x4d, 0x59, 0xdc, 0x74, 0x73, 0xd5, 0x37, 0x4a, 0x85, 0x23, 0xce, 0x40, 0xe4, 0xd0, 0x74, 0xd0, 0x39, 0x0d, 0xa5, 0x73, 0xd1, 0x3a, 0x19, 0xb5, 0xe3, 0xce, 0x43, 0x11, 0xf1, 0x04, 0xd4, 0x3c, 0xf4, 0x18, 0x65, 0xcf, 0x3d, 0x4e, 0x91, 0xa5, 0x8f, 0x59, 0xfc, 0xf4, 0x83, 0x15, 0x60, 0x63, 0x70, 0x31, 0x32, 0x35, 0x31, 0x00, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x73, 0x31, 0x32, 0x35, 0x31, 0x00, 0x00, 0x20, 0xd2, 0x4d, 0x57, 0x71, 0x88, 0x18, 0x73, 0x9c, 0xb1, 0xc6, 0x24, 0x77, 0x9c, 0x9d, 0xc7, 0xda, 0x71, 0xb7, 0x9d, 0x77, 0x20, 0x4e, 0x4c, 0xb1, 0xc5, 0x17, 0x6f, 0xfc, 0x30, 0xc4, 0x00, 0x9c, 0x7c, 0xe2, 0xc7, 0x28, 0xaa, 0x98, 0x22, 0x8b, 0xa0, 0x74, 0xb7, 0x22, 0x76, 0xa4, 0xb4, 0x68, 0xca, 0x29, 0xd1, 0xa5, 0x42, 0xdd, 0x2a, 0xac, 0xb4, 0xe2, 0xca, 0x75, 0xb0, 0xc4, 0x62, 0x1d, 0x89, 0x2e, 0xd6, 0x62, 0xcb, 0x2d, 0x1f, 0x9a, 0x2c, 0xe2, 0x2e, 0x26, 0x56, 0x37, 0x62, 0x89, 0xdf, 0x81, 0x17, 0x9e, 0x78, 0xe3, 0x91, 0x57, 0x9e, 0x79, 0xe7, 0xa1, 0x97, 0x9e, 0x7a, 0xeb, 0xb1, 0xd7, 0x9e, 0x7b, 0xef, 0xc1, 0x17, 0x9f, 0x7c, 0xf3, 0xd1, 0x57, 0x9f, 0x7d, 0xf7, 0xe1, 0x97, 0x9f, 0x7e, 0xfb, 0xf1, 0xd7, 0x9f, 0x7f, 0xff, 0x01, 0x18, 0xa0, 0x80, 0x03, 0x12, 0x58, 0xa0, 0x81, 0x07, 0x22, 0x98, 0xa0, 0x82, 0x0b, 0x32, 0xd8, 0xa0, 0x83, 0x0f, 0x42, 0x18, 0xa1, 0x84, 0x13, 0x52, 0x58, 0xa1, 0x85, 0x17, 0x62, 0x98, 0xa1, 0x86, 0x1b, 0x72, 0xd8, 0xa1, 0x87, 0x63, 0x70, 0x31, 0x32, 0x35, 0x32, 0x00, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x73, 0x31, 0x32, 0x35, 0x32, 0x00, 0x00, 0x20, 0x24, 0x03, 0x50, 0x31, 0x5d, 0x18, 0x73, 0x9c, 0xb1, 0xc6, 0x7d, 0x75, 0x5c, 0x95, 0xc7, 0x47, 0x01, 0x20, 0x17, 0x00, 0x00, 0x4c, 0x4c, 0xb1, 0xc5, 0x17, 0x6f, 0xfc, 0x30, 0xc4, 0x82, 0x9d, 0x6c, 0xd5, 0xc7, 0x48, 0x01, 0x30, 0x57, 0x5b, 0xa0, 0x84, 0x22, 0xca, 0x28, 0xa4, 0x94, 0x62, 0xca, 0x29, 0xa8, 0xa4, 0xa2, 0xca, 0x2a, 0xac, 0xb4, 0xe2, 0xca, 0x2b, 0xb0, 0xc4, 0x22, 0xcb, 0x2c, 0xb4, 0xd4, 0x62, 0xcb, 0x2d, 0xb8, 0xe4, 0xa2, 0xcb, 0x2e, 0xbc, 0xf4, 0xe2, 0xcb, 0x2f, 0xc0, 0x04, 0x23, 0xcc, 0x30, 0xc4, 0x14, 0x63, 0xcc, 0x31, 0xc8, 0x24, 0xa3, 0xcc, 0x32, 0xcc, 0x34, 0xe3, 0xcc, 0x33, 0xd0, 0x44, 0x23, 0xcd, 0x34, 0xd4, 0x54, 0x63, 0xcd, 0x35, 0xd8, 0x64, 0xa3, 0xcd, 0x36, 0xdc, 0x74, 0xe3, 0xcd, 0x37, 0xe0, 0x84, 0x23, 0xce, 0x38, 0xe4, 0x94, 0x63, 0xce, 0x39, 0xe8, 0xa4, 0xa3, 0xce, 0x3a, 0xec, 0xb4, 0xe3, 0xce, 0x3b, 0xf0, 0xc4, 0x23, 0xcf, 0x3c, 0xf4, 0xd4, 0x63, 0xcf, 0x3d, 0xf8, 0xe4, 0xa3, 0xcf, 0x3e, 0xfc, 0xf4, 0xe3, 0xcf, 0x3f, 0x63, 0x70, 0x31, 0x32, 0x35, 0x33, 0x00, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x73, 0x31, 0x32, 0x35, 0x33, 0x00, 0x00, 0x20, 0x24, 0x03, 0x50, 0x31, 0x5d, 0x18, 0x73, 0x9c, 0xb1, 0xc6, 0x00, 0x74, 0x0c, 0x80, 0xc7, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x4c, 0xb1, 0xc5, 0x17, 0x6f, 0xfc, 0x30, 0xc4, 0x00, 0x9c, 0x0c, 0xc0, 0xc7, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa0, 0x2c, 0xc6, 0xd8, 0x28, 0xa4, 0x94, 0x62, 0xca, 0x29, 0xa8, 0xa4, 0x02, 0xc0, 0x2a, 0xac, 0xb4, 0xe2, 0x4a, 0xc4, 0xb0, 0xc4, 0x22, 0xcb, 0x2c, 0x8a, 0xd5, 0x62, 0xcb, 0x2d, 0x8d, 0x39, 0xf6, 0xd8, 0x2e, 0x90, 0xf5, 0x12, 0x99, 0x64, 0x93, 0x51, 0x56, 0x99, 0x65, 0x97, 0x61, 0x96, 0x99, 0x66, 0x9b, 0x71, 0xd6, 0x99, 0x67, 0x9f, 0x81, 0x16, 0x9a, 0x68, 0xa3, 0x91, 0x06, 0x40, 0x69, 0xa6, 0x9d, 0x86, 0x5a, 0x6a, 0xaa, 0xad, 0xc6, 0x5a, 0x6b, 0xae, 0xbd, 0x06, 0x5b, 0x6c, 0xb2, 0xcd, 0x46, 0x5b, 0x6d, 0xb6, 0xdd, 0x86, 0x5b, 0x6e, 0xba, 0xed, 0xc6, 0x5b, 0x6f, 0xbe, 0xfd, 0x06, 0x5c, 0x70, 0xc2, 0x0d, 0x47, 0x5c, 0x71, 0xc6, 0x1d, 0x87, 0x5c, 0x72, 0xca, 0x2d, 0xc7, 0x5c, 0x73, 0xce, 0x3d, 0x07, 0x1d, 0x00, 0x63, 0x70, 0x31, 0x32, 0x35, 0x34, 0x00, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x73, 0x31, 0x32, 0x35, 0x34, 0x00, 0x00, 0x20, 0x24, 0x03, 0x50, 0x31, 0x5d, 0x18, 0x73, 0x9c, 0xb1, 0xc6, 0x7d, 0x75, 0x5c, 0x95, 0xc7, 0x47, 0x01, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x4c, 0xb1, 0xc5, 0x17, 0x6f, 0xfc, 0x30, 0xc4, 0x82, 0x9d, 0x6c, 0xd5, 0xc7, 0x48, 0x01, 0x00, 0x40, 0x5b, 0xa0, 0x84, 0x22, 0xca, 0x28, 0xa4, 0x94, 0x62, 0xca, 0x29, 0xa8, 0xa4, 0xa2, 0xca, 0x2a, 0xac, 0xb4, 0xe2, 0xca, 0x2b, 0xb0, 0xc4, 0x22, 0xcb, 0x2c, 0xb4, 0xd4, 0x62, 0xcb, 0x2d, 0xb8, 0xe4, 0xa2, 0xcb, 0x2e, 0xbc, 0xf4, 0xe2, 0xcb, 0x2f, 0xc0, 0x04, 0x23, 0xcc, 0x30, 0xc4, 0x14, 0x63, 0xcc, 0x31, 0xc8, 0x24, 0xa3, 0xcc, 0x32, 0xcc, 0x34, 0xe3, 0xcc, 0x33, 0x1c, 0x45, 0x23, 0xcd, 0x34, 0xd4, 0x54, 0x63, 0xcd, 0x35, 0xd8, 0x64, 0xa3, 0xcd, 0x36, 0xdc, 0xb0, 0x34, 0xd5, 0x37, 0xe0, 0x84, 0x23, 0xce, 0x38, 0xe4, 0x94, 0x63, 0xce, 0x39, 0xe8, 0xa4, 0xa3, 0xce, 0x3a, 0xec, 0xb4, 0xe3, 0xce, 0x3b, 0x1d, 0xc5, 0x23, 0xcf, 0x3c, 0xf4, 0xd4, 0x63, 0xcf, 0x3d, 0xf8, 0xe4, 0xa3, 0xcf, 0x3e, 0xfc, 0xb4, 0x44, 0xd5, 0x3f, 0x63, 0x70, 0x31, 0x32, 0x35, 0x35, 0x00, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x73, 0x31, 0x32, 0x35, 0x35, 0x00, 0x00, 0x20, 0x24, 0x03, 0x50, 0x31, 0x5d, 0x18, 0x73, 0x9c, 0xb1, 0xc6, 0x7d, 0x75, 0x0c, 0x80, 0xc7, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x4c, 0xb1, 0xc5, 0x17, 0x6f, 0xfc, 0x30, 0xc4, 0x82, 0x9d, 0x0c, 0xc0, 0xc7, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa0, 0x84, 0x22, 0xca, 0x28, 0x22, 0x97, 0x62, 0xca, 0x29, 0xa8, 0xa4, 0x72, 0xcd, 0x2a, 0xac, 0xb4, 0xe2, 0xca, 0x2b, 0xb0, 0xc4, 0x22, 0xcb, 0x2c, 0xb4, 0xd4, 0x62, 0xcb, 0x2d, 0xb8, 0xe4, 0x72, 0xcf, 0x2e, 0xbc, 0xf4, 0xe2, 0xcb, 0x2f, 0x2f, 0xc2, 0x18, 0xa3, 0x8c, 0x33, 0xd2, 0x58, 0xa3, 0x8d, 0x37, 0xe2, 0x08, 0x40, 0x8e, 0x3a, 0xee, 0xc8, 0x63, 0x8f, 0x3e, 0xfe, 0x08, 0x64, 0x90, 0x5d, 0x7a, 0xf9, 0x25, 0x98, 0x61, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x42, 0x0e, 0x49, 0x64, 0x91, 0x46, 0x1e, 0x89, 0x64, 0x92, 0x4a, 0x2e, 0xc9, 0x64, 0x93, 0x4e, 0x3e, 0x09, 0x65, 0x94, 0x52, 0x4e, 0x49, 0x65, 0x95, 0x56, 0x5e, 0x89, 0x65, 0x96, 0x5a, 0x6e, 0xc9, 0x25, 0x00, 0x00, 0x34, 0xec, 0x30, 0x00, 0x63, 0x70, 0x31, 0x32, 0x35, 0x36, 0x00, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x73, 0x31, 0x32, 0x35, 0x36, 0x00, 0x00, 0x20, 0x24, 0x4f, 0x5a, 0x31, 0x5d, 0x18, 0x73, 0x9c, 0xb1, 0xc6, 0x7d, 0x75, 0x2c, 0xa9, 0xc7, 0x47, 0x51, 0x7a, 0x69, 0xa5, 0x99, 0x4e, 0x4c, 0xb1, 0xc5, 0x17, 0x6f, 0xfc, 0x30, 0xc4, 0x98, 0x9e, 0x6c, 0xe9, 0xc7, 0x48, 0x2d, 0xcc, 0xb0, 0xa6, 0xa0, 0x88, 0x29, 0xca, 0x28, 0xa4, 0x94, 0x62, 0xca, 0x29, 0xa8, 0xa4, 0xb2, 0xe9, 0x2a, 0xac, 0xb4, 0xe2, 0xca, 0x2b, 0xb0, 0xc4, 0x22, 0xcb, 0x2c, 0xb4, 0xd4, 0x62, 0xcb, 0x2d, 0xb8, 0xe4, 0x32, 0xe6, 0x2e, 0xbc, 0xf4, 0xe2, 0x0b, 0x99, 0x9c, 0x96, 0x69, 0xe6, 0x99, 0x68, 0xa6, 0xa9, 0xe6, 0x9a, 0x6c, 0xb6, 0xe9, 0xe6, 0x9b, 0x70, 0xc6, 0x29, 0xe7, 0x9c, 0x74, 0xd6, 0x69, 0xe7, 0x9d, 0x78, 0xe6, 0xa9, 0xe7, 0x35, 0x7b, 0xf2, 0xd9, 0xa7, 0x9f, 0x7f, 0x02, 0x1a, 0xa8, 0xa0, 0xe0, 0x0c, 0x2a, 0x0e, 0xa1, 0x85, 0x1a, 0x7a, 0xe8, 0x39, 0xe8, 0xa4, 0xa3, 0xce, 0x3a, 0x88, 0x26, 0xea, 0xce, 0x3b, 0x8a, 0x2e, 0xca, 0x68, 0xa3, 0xf4, 0x38, 0xfa, 0xe8, 0x3d, 0x90, 0xe6, 0x13, 0xe9, 0x3e, 0xfc, 0x34, 0xec, 0x70, 0xa7, 0x63, 0x70, 0x31, 0x32, 0x35, 0x37, 0x00, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x73, 0x31, 0x32, 0x35, 0x37, 0x00, 0x00, 0x20, 0x24, 0x03, 0x50, 0x31, 0x00, 0x18, 0x73, 0x9c, 0xb1, 0xc6, 0x00, 0x74, 0x0c, 0x80, 0xc7, 0x00, 0xa0, 0xe2, 0x17, 0x2e, 0x00, 0x4c, 0x4c, 0xb1, 0xc5, 0x17, 0x6f, 0xfc, 0x30, 0xc4, 0x00, 0x9c, 0x0c, 0xc0, 0xc7, 0x00, 0xbc, 0x12, 0x18, 0x00, 0xa0, 0x00, 0x20, 0xca, 0x28, 0xa4, 0x00, 0x60, 0xca, 0x29, 0xd8, 0xa4, 0xb2, 0xd4, 0x2a, 0xac, 0xb4, 0xe2, 0x8a, 0x31, 0xb0, 0xc4, 0x22, 0xcb, 0x2c, 0xb4, 0xd4, 0x62, 0xcb, 0x2d, 0xf8, 0xe4, 0xc2, 0xd4, 0x2e, 0xbc, 0xf4, 0xe2, 0x8b, 0x39, 0x04, 0xa9, 0x04, 0x90, 0x41, 0xc4, 0x14, 0x63, 0x91, 0x44, 0x0c, 0x25, 0xe3, 0x16, 0x45, 0x20, 0xc1, 0x84, 0x52, 0x4d, 0x55, 0xed, 0xd4, 0xd3, 0x34, 0x43, 0x55, 0x63, 0xcd, 0x35, 0x67, 0xe5, 0xf4, 0xd4, 0x57, 0xdc, 0xc0, 0x25, 0xd7, 0x37, 0x05, 0xad, 0x14, 0xd0, 0x41, 0xe4, 0x94, 0x73, 0xd1, 0x44, 0x0d, 0xa5, 0xf3, 0x56, 0x45, 0x21, 0xc5, 0x94, 0x92, 0x4d, 0x56, 0xf1, 0xe4, 0xd3, 0x3c, 0x44, 0xd5, 0x63, 0xcf, 0x3d, 0x68, 0xe9, 0x04, 0x15, 0x58, 0xfc, 0xc4, 0x35, 0x17, 0x60, 0x63, 0x70, 0x31, 0x32, 0x35, 0x38, 0x00, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x73, 0x31, 0x32, 0x35, 0x38, 0x00, 0x00, 0x20, 0x24, 0x03, 0x50, 0x31, 0x5d, 0x18, 0x73, 0x9c, 0xb1, 0xc6, 0x7d, 0x75, 0x0c, 0x80, 0xc7, 0x47, 0x01, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x4c, 0xb1, 0xc5, 0x17, 0x6f, 0xfc, 0x30, 0xc4, 0x82, 0x9d, 0x0c, 0xc0, 0xc7, 0x48, 0x01, 0x00, 0x40, 0x5b, 0xa0, 0x84, 0x22, 0xca, 0x28, 0xa4, 0x94, 0x62, 0xca, 0x29, 0xa8, 0xa4, 0xa2, 0xca, 0x2a, 0xac, 0xb4, 0xe2, 0xca, 0x2b, 0xb0, 0xc4, 0x22, 0xcb, 0x2c, 0xb4, 0xd4, 0x62, 0xcb, 0x2d, 0xb8, 0xe4, 0xa2, 0xcb, 0x2e, 0xbc, 0xf4, 0xe2, 0xcb, 0x2f, 0xc0, 0x04, 0x23, 0x8c, 0x40, 0xc4, 0x14, 0x63, 0xcc, 0x31, 0xc8, 0x24, 0xa3, 0xcc, 0x32, 0x84, 0x35, 0xe3, 0xcc, 0x33, 0x10, 0x45, 0x73, 0xd8, 0x34, 0xd4, 0xd4, 0x65, 0xcd, 0x35, 0xd8, 0x64, 0xa3, 0xcd, 0x36, 0xdc, 0xdc, 0x65, 0xd8, 0x37, 0xe0, 0x84, 0x23, 0xce, 0x40, 0xe4, 0x94, 0x63, 0xce, 0x39, 0xe8, 0xa4, 0xa3, 0xce, 0x3a, 0x85, 0xb5, 0xe3, 0xce, 0x3b, 0x11, 0xc5, 0x83, 0xd8, 0x3c, 0xf4, 0xd8, 0x65, 0xcf, 0x3d, 0xf8, 0xe4, 0xa3, 0xcf, 0x3e, 0xfc, 0xe0, 0x35, 0xf2, 0x3f, 0x6b, 0x6f, 0x69, 0x38, 0x72, 0x00, 0x00, 0x20, 0x33, 0xd3, 0x5c, 0xb3, 0xcd, 0x37, 0xe3, 0x9c, 0xb3, 0xce, 0x3b, 0xf3, 0xdc, 0xf3, 0xd6, 0x5c, 0x77, 0xed, 0xf5, 0xd7, 0x60, 0x87, 0x2d, 0x76, 0xcc, 0x63, 0xa3, 0x9c, 0x32, 0xcb, 0x2e, 0xbf, 0x0c, 0x8a, 0xcc, 0xb0, 0xc8, 0x72, 0xcb, 0x3d, 0x3e, 0xff, 0x0c, 0xf4, 0x87, 0x41, 0x0b, 0x3d, 0x34, 0xd1, 0x45, 0x1b, 0x7d, 0x34, 0xd2, 0x49, 0x2b, 0xbd, 0x34, 0xd3, 0x4d, 0x3b, 0xfd, 0x74, 0x74, 0x50, 0x47, 0x2d, 0xf5, 0xd4, 0x54, 0x57, 0x6d, 0xf5, 0xd5, 0x58, 0x67, 0xad, 0x75, 0x2a, 0x1d, 0xfe, 0x07, 0x60, 0x85, 0x03, 0x12, 0x38, 0xa1, 0x80, 0x14, 0x1e, 0x88, 0x60, 0x82, 0x0a, 0x2e, 0xc8, 0x60, 0x83, 0x0e, 0x7a, 0xf8, 0x20, 0x84, 0x11, 0x4a, 0x58, 0x60, 0x80, 0x1b, 0x6a, 0x68, 0xe0, 0x85, 0x1c, 0x62, 0x68, 0x61, 0x86, 0xfd, 0x7d, 0x07, 0x5e, 0x7d, 0xe3, 0x91, 0x37, 0x9f, 0x78, 0xf4, 0x9d, 0x87, 0x5e, 0x7a, 0xea, 0xad, 0xc7, 0x5e, 0x7b, 0xee, 0xf9, 0xf7, 0x1e, 0x7c, 0xf1, 0xc9, 0x57, 0x5e, 0x78, 0xfb, 0xe9, 0x67, 0xde, 0x7d, 0xfc, 0xe1, 0x67, 0x5f, 0x7e, 0x6b, 0x6f, 0x69, 0x38, 0x75, 0x00, 0x00, 0x20, 0x33, 0xd3, 0x5c, 0xb3, 0xcd, 0x37, 0xe3, 0x9c, 0xb3, 0xce, 0x3b, 0xf3, 0xdc, 0xf3, 0xd6, 0x5c, 0x77, 0xed, 0xf5, 0xd7, 0x60, 0x87, 0x2d, 0x76, 0xcc, 0x63, 0xa3, 0x9c, 0x32, 0xcb, 0x2e, 0xbf, 0x0c, 0x8a, 0xcc, 0xb0, 0xc8, 0x72, 0xcb, 0x3d, 0x3e, 0xff, 0x0c, 0xf4, 0x87, 0x22, 0x0a, 0x4d, 0x62, 0x89, 0x45, 0x1b, 0x7d, 0x34, 0xd2, 0x49, 0xbb, 0xb8, 0x34, 0xd3, 0x4d, 0x3b, 0xfd, 0x74, 0x74, 0xd4, 0x45, 0x6d, 0xdd, 0x75, 0x54, 0x57, 0x6d, 0xf5, 0xd5, 0x58, 0xb7, 0xa8, 0x75, 0x2a, 0x1d, 0xfe, 0x07, 0x60, 0x85, 0x03, 0x12, 0x38, 0xa1, 0x80, 0x14, 0x1e, 0x88, 0x60, 0x82, 0x0a, 0x2e, 0xc8, 0x60, 0x83, 0x0e, 0x7a, 0xf8, 0x20, 0x84, 0x11, 0x4a, 0x58, 0x60, 0x80, 0x1b, 0x6a, 0x68, 0xe0, 0x85, 0x1c, 0x62, 0x68, 0x61, 0x86, 0xfd, 0x7d, 0x07, 0x5e, 0x7d, 0xe3, 0x91, 0x37, 0x9f, 0x78, 0xf4, 0x9d, 0x87, 0x5e, 0x7a, 0xea, 0xad, 0xc7, 0x5e, 0x7b, 0xee, 0xf9, 0xf7, 0x1e, 0x7c, 0xf1, 0xc9, 0x57, 0x5e, 0x78, 0xfb, 0xe9, 0x67, 0xde, 0x7d, 0xfc, 0xe1, 0x67, 0x5f, 0x7e, 0x63, 0x70, 0x34, 0x33, 0x37, 0x00, 0x00, 0x20, 0xc7, 0xf0, 0x93, 0x8e, 0x38, 0xe4, 0x80, 0x53, 0xce, 0x39, 0xea, 0xac, 0x83, 0xce, 0x3b, 0xee, 0xb0, 0x43, 0x4c, 0x31, 0xc9, 0x98, 0x63, 0x0c, 0x3d, 0xf6, 0xc8, 0xb3, 0x4f, 0x3e, 0xff, 0x58, 0xc3, 0x8d, 0x28, 0xa3, 0x94, 0x12, 0x32, 0x5d, 0xe1, 0xb4, 0x33, 0x8f, 0x3e, 0xf1, 0x44, 0xa3, 0x8a, 0x2e, 0xbf, 0xc0, 0xcc, 0x4a, 0x2f, 0xbc, 0x84, 0xb2, 0xca, 0x2e, 0x60, 0x87, 0x2d, 0x36, 0xcd, 0x3a, 0x3f, 0x0d, 0x35, 0xd1, 0x43, 0x47, 0xfd, 0x73, 0xd1, 0x4b, 0x2b, 0x9d, 0xb4, 0xcd, 0x37, 0xf3, 0xbc, 0x73, 0xce, 0x33, 0xf7, 0xcc, 0x74, 0xd3, 0x48, 0x0b, 0x7d, 0x35, 0xd5, 0x4e, 0xfb, 0xac, 0x75, 0xd5, 0x56, 0x4b, 0x3d, 0xf5, 0xd1, 0x46, 0x03, 0x1d, 0x74, 0xd6, 0x58, 0xe3, 0x5c, 0x73, 0xd7, 0x5c, 0x7b, 0xfd, 0xf5, 0xd6, 0xb3, 0x7d, 0x63, 0x99, 0x70, 0xa5, 0x15, 0x57, 0x8b, 0x71, 0xa8, 0x6d, 0xb6, 0x9a, 0x6d, 0x2a, 0x23, 0x77, 0xdb, 0xca, 0x2d, 0xc7, 0xf2, 0xb2, 0xcb, 0x31, 0xcb, 0x7c, 0x0f, 0xcb, 0xb0, 0xa0, 0x7c, 0x4b, 0xca, 0x20, 0xcb, 0x32, 0x36, 0x28, 0x63, 0x70, 0x38, 0x35, 0x30, 0x00, 0x00, 0x20, 0xc7, 0xf0, 0x93, 0x8e, 0x38, 0xe4, 0x80, 0x53, 0xce, 0x39, 0xea, 0xac, 0x83, 0xce, 0x3b, 0xee, 0xb0, 0x43, 0x4c, 0x31, 0xc9, 0x98, 0x63, 0x0c, 0x3d, 0xf6, 0xc8, 0xb3, 0x4f, 0x3e, 0xff, 0x58, 0xc3, 0x0d, 0x3e, 0xa3, 0x60, 0x73, 0x0d, 0x5d, 0xe1, 0xb4, 0x33, 0x8f, 0x3e, 0xf1, 0x44, 0xa3, 0x8a, 0x2e, 0xbf, 0xb8, 0xc2, 0x4a, 0x2f, 0xbc, 0x84, 0xb2, 0xca, 0x2e, 0x60, 0x87, 0x2d, 0x36, 0xcd, 0x3a, 0x07, 0x23, 0x0c, 0x30, 0xa9, 0x44, 0xfd, 0x73, 0xd1, 0x4b, 0x8b, 0x52, 0x8a, 0xcd, 0x37, 0xf3, 0xbc, 0x73, 0xce, 0x33, 0xf7, 0x3c, 0xce, 0x30, 0x48, 0x0b, 0x7d, 0x35, 0xd5, 0x4e, 0xfb, 0xac, 0x35, 0x29, 0xf0, 0x40, 0xa3, 0xcc, 0x32, 0xc8, 0xb4, 0xd4, 0x8c, 0x33, 0xcf, 0xe0, 0x5c, 0x73, 0xd7, 0x5c, 0x9b, 0xc2, 0xcc, 0xd6, 0xd3, 0x7c, 0x43, 0x8d, 0x34, 0xf5, 0x54, 0x53, 0x8b, 0x3f, 0xde, 0x68, 0xb3, 0x4d, 0x36, 0xfd, 0x74, 0xf3, 0x0a, 0x2d, 0xad, 0xc4, 0x22, 0xb1, 0x2f, 0xb6, 0x9c, 0x72, 0x0f, 0x2e, 0xb0, 0xa0, 0x72, 0x4b, 0x2e, 0xb3, 0xc8, 0x32, 0x36, 0x28, 0x63, 0x70, 0x38, 0x36, 0x36, 0x00, 0x00, 0x20, 0xdf, 0x81, 0x17, 0x9e, 0x78, 0xe3, 0x91, 0x57, 0x9e, 0x79, 0xe7, 0xa1, 0x97, 0x9e, 0x7a, 0xeb, 0xb1, 0xd7, 0x9e, 0x7b, 0xef, 0xc1, 0x17, 0x9f, 0x7c, 0xf3, 0xd1, 0x57, 0x9f, 0x7d, 0xf7, 0xe1, 0x97, 0x9f, 0x7e, 0xfb, 0xf1, 0xd7, 0x9f, 0x7f, 0xff, 0x01, 0x18, 0xa0, 0x80, 0x03, 0x12, 0x58, 0xa0, 0x81, 0x07, 0x22, 0x98, 0xa0, 0x82, 0x0b, 0x32, 0xd8, 0xa0, 0x83, 0x60, 0x87, 0x2d, 0x36, 0xcd, 0x3a, 0x3f, 0x0d, 0x35, 0xd1, 0x43, 0x47, 0xfd, 0x73, 0xd1, 0x4b, 0x2b, 0x9d, 0xb4, 0xcd, 0x37, 0xf3, 0xbc, 0x73, 0xce, 0x33, 0xf7, 0xcc, 0x74, 0xd3, 0x48, 0x0b, 0x7d, 0x35, 0xd5, 0x4e, 0xfb, 0xac, 0x75, 0xd5, 0x56, 0x4b, 0x3d, 0xf5, 0xd1, 0x46, 0x03, 0x1d, 0x74, 0xd6, 0x58, 0xe3, 0x5c, 0x73, 0xd7, 0x5c, 0x7b, 0xfd, 0xf5, 0xd6, 0x0f, 0x42, 0x18, 0xa1, 0x84, 0x13, 0x52, 0x58, 0xa1, 0x85, 0x17, 0x62, 0x98, 0xa1, 0x86, 0x1b, 0x72, 0xd8, 0xa1, 0x87, 0xd1, 0x7d, 0x48, 0x9d, 0x88, 0xd7, 0x95, 0xd8, 0xdd, 0x8a, 0xb0, 0xa0, 0x7c, 0x4b, 0xca, 0x26, 0x93, 0x32, 0x36, 0x28, 0x69, 0x62, 0x6d, 0x31, 0x30, 0x34, 0x37, 0x00, 0x63, 0x70, 0x31, 0x30, 0x34, 0x37, 0x00, 0x00, 0x01, 0x9c, 0x24, 0x60, 0xc8, 0x1f, 0x97, 0x34, 0xe2, 0xc8, 0x02, 0x0c, 0x34, 0xe0, 0xc0, 0x03, 0x10, 0x44, 0x20, 0xc1, 0x04, 0x9d, 0x14, 0x82, 0xc0, 0x21, 0x18, 0x64, 0x20, 0xc9, 0x23, 0x1c, 0x74, 0xe0, 0xc1, 0x07, 0x80, 0x04, 0x22, 0xc8, 0x20, 0x84, 0x28, 0x70, 0xc1, 0x06, 0x88, 0x24, 0xa2, 0xc8, 0x22, 0x8c, 0x14, 0x60, 0xc0, 0x01, 0x90, 0x44, 0x62, 0xc1, 0x24, 0x94, 0x54, 0x62, 0x09, 0x01, 0x98, 0x64, 0xa2, 0xc9, 0x26, 0x14, 0x54, 0xe0, 0x89, 0x06, 0x20, 0x80, 0x22, 0x0e, 0x39, 0xe0, 0x84, 0x33, 0x4e, 0x39, 0xe7, 0xc4, 0x23, 0x8a, 0x0b, 0x3c, 0xa0, 0xb0, 0x02, 0x1f, 0x26, 0xa4, 0xa3, 0xce, 0x3a, 0xe8, 0xb4, 0xe3, 0xce, 0x3b, 0xec, 0x7c, 0x13, 0x02, 0x09, 0x2a, 0xa4, 0xb0, 0x83, 0x17, 0x2d, 0xbc, 0x20, 0x0c, 0x31, 0xc0, 0x04, 0x33, 0x4c, 0x31, 0xc7, 0x44, 0x63, 0x0a, 0x0b, 0x25, 0x7c, 0xe1, 0xc3, 0x0f, 0xf8, 0x24, 0xa3, 0xcc, 0x32, 0xc8, 0x34, 0xe3, 0xcc, 0x33, 0xcc, 0x80, 0xa1, 0xc3, 0x08, 0x40, 0x9c, 0xd0, 0x83, 0x08, 0xd8, 0x84, 0x21, 0xc6, 0x18, 0x64, 0x94, 0x61, 0xc6, 0x19, 0x68, 0xa4, 0xb1, 0xca, 0x2e, 0xf0, 0xf4, 0xe3, 0x4f, 0x2c, 0xb0, 0xa8, 0xb1, 0x06, 0x1b, 0x6d, 0xb8, 0xf1, 0x06, 0x1c, 0x71, 0xc8, 0xa1, 0x8a, 0x2e, 0xe6, 0xe0, 0x62, 0x0c, 0x29, 0xb5, 0xf8, 0x31, 0x07, 0x1d, 0x75, 0xd8, 0x71, 0x07, 0x1e, 0x79, 0xe8, 0x11, 0xca, 0x2f, 0xd0, 0x6c, 0xe1, 0x8d, 0x2b, 0xac, 0x8c, 0x52, 0xca, 0x2d, 0xa9, 0x9c, 0x62, 0x0b, 0x2f, 0xbd, 0xf8, 0xd2, 0x0d, 0x2a, 0xaf, 0x74, 0x41, 0xcb, 0x35, 0x7b, 0x04, 0x21, 0xc4, 0x10, 0x44, 0x14, 0x61, 0xc4, 0x11, 0x48, 0x24, 0xd1, 0x0a, 0x3d, 0xf6, 0xc8, 0x33, 0x4f, 0x3d, 0x7d, 0x28, 0xb1, 0x04, 0x13, 0x4d, 0x38, 0xf1, 0x04, 0x14, 0x51, 0x48, 0x91, 0xcb, 0x3e, 0xfc, 0xe4, 0xa3, 0xcf, 0x3f, 0x5c, 0xdc, 0x33, 0x05, 0x15, 0x55, 0x58, 0x71, 0x05, 0x16, 0x59, 0x68, 0x21, 0x0b, 0x35, 0xd6, 0x48, 0x33, 0x4d, 0x35, 0x30, 0xc4, 0x20, 0xc3, 0x0c, 0x34, 0xd4, 0x60, 0xc3, 0x0d, 0x38, 0xe4, 0x30, 0xcb, 0x36, 0xdc, 0x64, 0xa3, 0xcd, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00, 0x69, 0x63, 0x6f, 0x6e, 0x76, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x02, 0x01, 0x03, 0x01, 0x04, 0x01, 0x05, 0x01, 0x06, 0x01, 0x07, 0x01, 0x08, 0x01, 0x09, 0x01, 0x0a, 0x01, 0x0b, 0x01, 0x0c, 0x01, 0x0d, 0x01, 0x0e, 0x01, 0x0f, 0x01, 0x10, 0x01, 0x11, 0x01, 0x12, 0x01, 0x13, 0x01, 0x16, 0x01, 0x17, 0x01, 0x18, 0x01, 0x19, 0x01, 0x1a, 0x01, 0x1b, 0x01, 0x1c, 0x01, 0x1d, 0x01, 0x1e, 0x01, 0x1f, 0x01, 0x20, 0x01, 0x21, 0x01, 0x22, 0x01, 0x23, 0x01, 0x24, 0x01, 0x25, 0x01, 0x26, 0x01, 0x27, 0x01, 0x28, 0x01, 0x29, 0x01, 0x2a, 0x01, 0x2b, 0x01, 0x2e, 0x01, 0x2f, 0x01, 0x30, 0x01, 0x31, 0x01, 0x34, 0x01, 0x35, 0x01, 0x36, 0x01, 0x37, 0x01, 0x38, 0x01, 0x39, 0x01, 0x3a, 0x01, 0x3b, 0x01, 0x3c, 0x01, 0x3d, 0x01, 0x3e, 0x01, 0x41, 0x01, 0x42, 0x01, 0x43, 0x01, 0x44, 0x01, 0x45, 0x01, 0x46, 0x01, 0x47, 0x01, 0x48, 0x01, 0x4a, 0x01, 0x4b, 0x01, 0x4c, 0x01, 0x4d, 0x01, 0x50, 0x01, 0x51, 0x01, 0x52, 0x01, 0x53, 0x01, 0x54, 0x01, 0x55, 0x01, 0x56, 0x01, 0x57, 0x01, 0x58, 0x01, 0x59, 0x01, 0x5a, 0x01, 0x5b, 0x01, 0x5c, 0x01, 0x5d, 0x01, 0x5e, 0x01, 0x5f, 0x01, 0x60, 0x01, 0x61, 0x01, 0x62, 0x01, 0x63, 0x01, 0x64, 0x01, 0x65, 0x01, 0x66, 0x01, 0x67, 0x01, 0x68, 0x01, 0x69, 0x01, 0x6a, 0x01, 0x6b, 0x01, 0x6c, 0x01, 0x6d, 0x01, 0x6e, 0x01, 0x6f, 0x01, 0x70, 0x01, 0x71, 0x01, 0x72, 0x01, 0x73, 0x01, 0x74, 0x01, 0x75, 0x01, 0x76, 0x01, 0x77, 0x01, 0x78, 0x01, 0x79, 0x01, 0x7a, 0x01, 0x7b, 0x01, 0x7c, 0x01, 0x7d, 0x01, 0x7e, 0x01, 0x92, 0x01, 0xa0, 0x01, 0xa1, 0x01, 0xaf, 0x01, 0xb0, 0x01, 0x18, 0x02, 0x19, 0x02, 0x1a, 0x02, 0x1b, 0x02, 0xc6, 0x02, 0xc7, 0x02, 0xd8, 0x02, 0xd9, 0x02, 0xdb, 0x02, 0xdc, 0x02, 0xdd, 0x02, 0x00, 0x03, 0x01, 0x03, 0x03, 0x03, 0x09, 0x03, 0x23, 0x03, 0x7a, 0x03, 0x84, 0x03, 0x85, 0x03, 0x86, 0x03, 0x88, 0x03, 0x89, 0x03, 0x8a, 0x03, 0x8c, 0x03, 0x8e, 0x03, 0x8f, 0x03, 0x90, 0x03, 0x91, 0x03, 0x92, 0x03, 0x93, 0x03, 0x94, 0x03, 0x95, 0x03, 0x96, 0x03, 0x97, 0x03, 0x98, 0x03, 0x99, 0x03, 0x9a, 0x03, 0x9b, 0x03, 0x9c, 0x03, 0x9d, 0x03, 0x9e, 0x03, 0x9f, 0x03, 0xa0, 0x03, 0xa1, 0x03, 0xa3, 0x03, 0xa4, 0x03, 0xa5, 0x03, 0xa6, 0x03, 0xa7, 0x03, 0xa8, 0x03, 0xa9, 0x03, 0xaa, 0x03, 0xab, 0x03, 0xac, 0x03, 0xad, 0x03, 0xae, 0x03, 0xaf, 0x03, 0xb0, 0x03, 0xb1, 0x03, 0xb2, 0x03, 0xb3, 0x03, 0xb4, 0x03, 0xb5, 0x03, 0xb6, 0x03, 0xb7, 0x03, 0xb8, 0x03, 0xb9, 0x03, 0xba, 0x03, 0xbb, 0x03, 0xbc, 0x03, 0xbd, 0x03, 0xbe, 0x03, 0xbf, 0x03, 0xc0, 0x03, 0xc1, 0x03, 0xc2, 0x03, 0xc3, 0x03, 0xc4, 0x03, 0xc5, 0x03, 0xc6, 0x03, 0xc7, 0x03, 0xc8, 0x03, 0xc9, 0x03, 0xca, 0x03, 0xcb, 0x03, 0xcc, 0x03, 0xcd, 0x03, 0xce, 0x03, 0x01, 0x04, 0x02, 0x04, 0x03, 0x04, 0x04, 0x04, 0x05, 0x04, 0x06, 0x04, 0x07, 0x04, 0x08, 0x04, 0x09, 0x04, 0x0a, 0x04, 0x0b, 0x04, 0x0c, 0x04, 0x0e, 0x04, 0x0f, 0x04, 0x10, 0x04, 0x11, 0x04, 0x12, 0x04, 0x13, 0x04, 0x14, 0x04, 0x15, 0x04, 0x16, 0x04, 0x17, 0x04, 0x18, 0x04, 0x19, 0x04, 0x1a, 0x04, 0x1b, 0x04, 0x1c, 0x04, 0x1d, 0x04, 0x1e, 0x04, 0x1f, 0x04, 0x20, 0x04, 0x21, 0x04, 0x22, 0x04, 0x23, 0x04, 0x24, 0x04, 0x25, 0x04, 0x26, 0x04, 0x27, 0x04, 0x28, 0x04, 0x29, 0x04, 0x2a, 0x04, 0x2b, 0x04, 0x2c, 0x04, 0x2d, 0x04, 0x2e, 0x04, 0x2f, 0x04, 0x30, 0x04, 0x31, 0x04, 0x32, 0x04, 0x33, 0x04, 0x34, 0x04, 0x35, 0x04, 0x36, 0x04, 0x37, 0x04, 0x38, 0x04, 0x39, 0x04, 0x3a, 0x04, 0x3b, 0x04, 0x3c, 0x04, 0x3d, 0x04, 0x3e, 0x04, 0x3f, 0x04, 0x40, 0x04, 0x41, 0x04, 0x42, 0x04, 0x43, 0x04, 0x44, 0x04, 0x45, 0x04, 0x46, 0x04, 0x47, 0x04, 0x48, 0x04, 0x49, 0x04, 0x4a, 0x04, 0x4b, 0x04, 0x4c, 0x04, 0x4d, 0x04, 0x4e, 0x04, 0x4f, 0x04, 0x51, 0x04, 0x52, 0x04, 0x53, 0x04, 0x54, 0x04, 0x55, 0x04, 0x56, 0x04, 0x57, 0x04, 0x58, 0x04, 0x59, 0x04, 0x5a, 0x04, 0x5b, 0x04, 0x5c, 0x04, 0x5e, 0x04, 0x5f, 0x04, 0x90, 0x04, 0x91, 0x04, 0xb0, 0x05, 0xb1, 0x05, 0xb2, 0x05, 0xb3, 0x05, 0xb4, 0x05, 0xb5, 0x05, 0xb6, 0x05, 0xb7, 0x05, 0xb8, 0x05, 0xb9, 0x05, 0xbb, 0x05, 0xbc, 0x05, 0xbd, 0x05, 0xbe, 0x05, 0xbf, 0x05, 0xc0, 0x05, 0xc1, 0x05, 0xc2, 0x05, 0xc3, 0x05, 0xd0, 0x05, 0xd1, 0x05, 0xd2, 0x05, 0xd3, 0x05, 0xd4, 0x05, 0xd5, 0x05, 0xd6, 0x05, 0xd7, 0x05, 0xd8, 0x05, 0xd9, 0x05, 0xda, 0x05, 0xdb, 0x05, 0xdc, 0x05, 0xdd, 0x05, 0xde, 0x05, 0xdf, 0x05, 0xe0, 0x05, 0xe1, 0x05, 0xe2, 0x05, 0xe3, 0x05, 0xe4, 0x05, 0xe5, 0x05, 0xe6, 0x05, 0xe7, 0x05, 0xe8, 0x05, 0xe9, 0x05, 0xea, 0x05, 0xf0, 0x05, 0xf1, 0x05, 0xf2, 0x05, 0xf3, 0x05, 0xf4, 0x05, 0x0c, 0x06, 0x1b, 0x06, 0x1f, 0x06, 0x21, 0x06, 0x22, 0x06, 0x23, 0x06, 0x24, 0x06, 0x25, 0x06, 0x26, 0x06, 0x27, 0x06, 0x28, 0x06, 0x29, 0x06, 0x2a, 0x06, 0x2b, 0x06, 0x2c, 0x06, 0x2d, 0x06, 0x2e, 0x06, 0x2f, 0x06, 0x30, 0x06, 0x31, 0x06, 0x32, 0x06, 0x33, 0x06, 0x34, 0x06, 0x35, 0x06, 0x36, 0x06, 0x37, 0x06, 0x38, 0x06, 0x39, 0x06, 0x3a, 0x06, 0x40, 0x06, 0x41, 0x06, 0x42, 0x06, 0x43, 0x06, 0x44, 0x06, 0x45, 0x06, 0x46, 0x06, 0x47, 0x06, 0x48, 0x06, 0x49, 0x06, 0x4a, 0x06, 0x4b, 0x06, 0x4c, 0x06, 0x4d, 0x06, 0x4e, 0x06, 0x4f, 0x06, 0x50, 0x06, 0x51, 0x06, 0x52, 0x06, 0x79, 0x06, 0x7e, 0x06, 0x86, 0x06, 0x88, 0x06, 0x91, 0x06, 0x98, 0x06, 0xa9, 0x06, 0xaf, 0x06, 0xba, 0x06, 0xbe, 0x06, 0xc1, 0x06, 0xd2, 0x06, 0x01, 0x0e, 0x02, 0x0e, 0x03, 0x0e, 0x04, 0x0e, 0x05, 0x0e, 0x06, 0x0e, 0x07, 0x0e, 0x08, 0x0e, 0x09, 0x0e, 0x0a, 0x0e, 0x0b, 0x0e, 0x0c, 0x0e, 0x0d, 0x0e, 0x0e, 0x0e, 0x0f, 0x0e, 0x10, 0x0e, 0x11, 0x0e, 0x12, 0x0e, 0x13, 0x0e, 0x14, 0x0e, 0x15, 0x0e, 0x16, 0x0e, 0x17, 0x0e, 0x18, 0x0e, 0x19, 0x0e, 0x1a, 0x0e, 0x1b, 0x0e, 0x1c, 0x0e, 0x1d, 0x0e, 0x1e, 0x0e, 0x1f, 0x0e, 0x20, 0x0e, 0x21, 0x0e, 0x22, 0x0e, 0x23, 0x0e, 0x24, 0x0e, 0x25, 0x0e, 0x26, 0x0e, 0x27, 0x0e, 0x28, 0x0e, 0x29, 0x0e, 0x2a, 0x0e, 0x2b, 0x0e, 0x2c, 0x0e, 0x2d, 0x0e, 0x2e, 0x0e, 0x2f, 0x0e, 0x30, 0x0e, 0x31, 0x0e, 0x32, 0x0e, 0x33, 0x0e, 0x34, 0x0e, 0x35, 0x0e, 0x36, 0x0e, 0x37, 0x0e, 0x38, 0x0e, 0x39, 0x0e, 0x3a, 0x0e, 0x3f, 0x0e, 0x40, 0x0e, 0x41, 0x0e, 0x42, 0x0e, 0x43, 0x0e, 0x44, 0x0e, 0x45, 0x0e, 0x46, 0x0e, 0x47, 0x0e, 0x48, 0x0e, 0x49, 0x0e, 0x4a, 0x0e, 0x4b, 0x0e, 0x4c, 0x0e, 0x4d, 0x0e, 0x4e, 0x0e, 0x4f, 0x0e, 0x50, 0x0e, 0x51, 0x0e, 0x52, 0x0e, 0x53, 0x0e, 0x54, 0x0e, 0x55, 0x0e, 0x56, 0x0e, 0x57, 0x0e, 0x58, 0x0e, 0x59, 0x0e, 0x5a, 0x0e, 0x5b, 0x0e, 0x02, 0x1e, 0x03, 0x1e, 0x0a, 0x1e, 0x0b, 0x1e, 0x1e, 0x1e, 0x1f, 0x1e, 0x40, 0x1e, 0x41, 0x1e, 0x56, 0x1e, 0x57, 0x1e, 0x60, 0x1e, 0x61, 0x1e, 0x6a, 0x1e, 0x6b, 0x1e, 0x80, 0x1e, 0x81, 0x1e, 0x82, 0x1e, 0x83, 0x1e, 0x84, 0x1e, 0x85, 0x1e, 0xf2, 0x1e, 0xf3, 0x1e, 0x0c, 0x20, 0x0d, 0x20, 0x0e, 0x20, 0x0f, 0x20, 0x13, 0x20, 0x14, 0x20, 0x15, 0x20, 0x17, 0x20, 0x18, 0x20, 0x19, 0x20, 0x1a, 0x20, 0x1c, 0x20, 0x1d, 0x20, 0x1e, 0x20, 0x20, 0x20, 0x21, 0x20, 0x22, 0x20, 0x26, 0x20, 0x30, 0x20, 0x39, 0x20, 0x3a, 0x20, 0x7f, 0x20, 0xa7, 0x20, 0xaa, 0x20, 0xab, 0x20, 0xac, 0x20, 0xaf, 0x20, 0x16, 0x21, 0x22, 0x21, 0x19, 0x22, 0x1a, 0x22, 0x1e, 0x22, 0x29, 0x22, 0x48, 0x22, 0x61, 0x22, 0x64, 0x22, 0x65, 0x22, 0x10, 0x23, 0x20, 0x23, 0x21, 0x23, 0x00, 0x25, 0x02, 0x25, 0x0c, 0x25, 0x10, 0x25, 0x14, 0x25, 0x18, 0x25, 0x1c, 0x25, 0x24, 0x25, 0x2c, 0x25, 0x34, 0x25, 0x3c, 0x25, 0x50, 0x25, 0x51, 0x25, 0x52, 0x25, 0x53, 0x25, 0x54, 0x25, 0x55, 0x25, 0x56, 0x25, 0x57, 0x25, 0x58, 0x25, 0x59, 0x25, 0x5a, 0x25, 0x5b, 0x25, 0x5c, 0x25, 0x5d, 0x25, 0x5e, 0x25, 0x5f, 0x25, 0x60, 0x25, 0x61, 0x25, 0x62, 0x25, 0x63, 0x25, 0x64, 0x25, 0x65, 0x25, 0x66, 0x25, 0x67, 0x25, 0x68, 0x25, 0x69, 0x25, 0x6a, 0x25, 0x6b, 0x25, 0x6c, 0x25, 0x80, 0x25, 0x84, 0x25, 0x88, 0x25, 0x8c, 0x25, 0x90, 0x25, 0x91, 0x25, 0x92, 0x25, 0x93, 0x25, 0xa0, 0x25, 0x75, 0x6e, 0x69, 0x5f, 0x74, 0x6f, 0x5f, 0x6a, 0x69, 0x73, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x53, 0x75, 0x6e, 0x00, 0x4d, 0x6f, 0x6e, 0x00, 0x54, 0x75, 0x65, 0x00, 0x57, 0x65, 0x64, 0x00, 0x54, 0x68, 0x75, 0x00, 0x46, 0x72, 0x69, 0x00, 0x53, 0x61, 0x74, 0x00, 0x53, 0x75, 0x6e, 0x64, 0x61, 0x79, 0x00, 0x4d, 0x6f, 0x6e, 0x64, 0x61, 0x79, 0x00, 0x54, 0x75, 0x65, 0x73, 0x64, 0x61, 0x79, 0x00, 0x57, 0x65, 0x64, 0x6e, 0x65, 0x73, 0x64, 0x61, 0x79, 0x00, 0x54, 0x68, 0x75, 0x72, 0x73, 0x64, 0x61, 0x79, 0x00, 0x46, 0x72, 0x69, 0x64, 0x61, 0x79, 0x00, 0x53, 0x61, 0x74, 0x75, 0x72, 0x64, 0x61, 0x79, 0x00, 0x4a, 0x61, 0x6e, 0x00, 0x46, 0x65, 0x62, 0x00, 0x4d, 0x61, 0x72, 0x00, 0x41, 0x70, 0x72, 0x00, 0x4d, 0x61, 0x79, 0x00, 0x4a, 0x75, 0x6e, 0x00, 0x4a, 0x75, 0x6c, 0x00, 0x41, 0x75, 0x67, 0x00, 0x53, 0x65, 0x70, 0x00, 0x4f, 0x63, 0x74, 0x00, 0x4e, 0x6f, 0x76, 0x00, 0x44, 0x65, 0x63, 0x00, 0x4a, 0x61, 0x6e, 0x75, 0x61, 0x72, 0x79, 0x00, 0x46, 0x65, 0x62, 0x72, 0x75, 0x61, 0x72, 0x79, 0x00, 0x4d, 0x61, 0x72, 0x63, 0x68, 0x00, 0x41, 0x70, 0x72, 0x69, 0x6c, 0x00, 0x4d, 0x61, 0x79, 0x00, 0x4a, 0x75, 0x6e, 0x65, 0x00, 0x4a, 0x75, 0x6c, 0x79, 0x00, 0x41, 0x75, 0x67, 0x75, 0x73, 0x74, 0x00, 0x53, 0x65, 0x70, 0x74, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x00, 0x4f, 0x63, 0x74, 0x6f, 0x62, 0x65, 0x72, 0x00, 0x4e, 0x6f, 0x76, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x00, 0x44, 0x65, 0x63, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x00, 0x41, 0x4d, 0x00, 0x50, 0x4d, 0x00, 0x25, 0x61, 0x20, 0x25, 0x62, 0x20, 0x25, 0x65, 0x20, 0x25, 0x54, 0x20, 0x25, 0x59, 0x00, 0x25, 0x6d, 0x2f, 0x25, 0x64, 0x2f, 0x25, 0x79, 0x00, 0x25, 0x48, 0x3a, 0x25, 0x4d, 0x3a, 0x25, 0x53, 0x00, 0x25, 0x49, 0x3a, 0x25, 0x4d, 0x3a, 0x25, 0x53, 0x20, 0x25, 0x70, 0x00, 0x00, 0x00, 0x25, 0x6d, 0x2f, 0x25, 0x64, 0x2f, 0x25, 0x79, 0x77, 0x38, 0x39, 0x00, 0x25, 0x61, 0x20, 0x25, 0x62, 0x20, 0x25, 0x65, 0x20, 0x25, 0x54, 0x20, 0x25, 0x59, 0x00, 0x25, 0x48, 0x3a, 0x25, 0x4d, 0x3a, 0x25, 0x53, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5e, 0x5b, 0x79, 0x59, 0x5d, 0x00, 0x5e, 0x5b, 0x6e, 0x4e, 0x5d, 0x00, 0x79, 0x65, 0x73, 0x00, 0x6e, 0x6f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x43, 0x5f, 0x43, 0x54, 0x59, 0x50, 0x45, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x43, 0x5f, 0x4e, 0x55, 0x4d, 0x45, 0x52, 0x49, 0x43, 0x00, 0x00, 0x4c, 0x43, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x43, 0x5f, 0x43, 0x4f, 0x4c, 0x4c, 0x41, 0x54, 0x45, 0x00, 0x00, 0x4c, 0x43, 0x5f, 0x4d, 0x4f, 0x4e, 0x45, 0x54, 0x41, 0x52, 0x59, 0x00, 0x4c, 0x43, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x53, 0x00, 0x5f, 0x5f, 0x6c, 0x6f, 0x63, 0x5f, 0x69, 0x73, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5f, 0x5f, 0x6e, 0x65, 0x77, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x65, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x02, 0x03, 0x03, 0x04, 0x04, 0x04, 0x04, 0x05, 0x05, 0x06, 0x06, 0x06, 0x00, 0x00, 0x00, 0x7c, 0x26, 0x3d, 0x21, 0x3e, 0x3c, 0x2b, 0x2d, 0x2a, 0x25, 0x2f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0x26, 0x3d, 0x3d, 0x3d, 0x3d, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x83, 0xf9, 0xa2, 0x00, 0x44, 0x4e, 0x6e, 0x00, 0xfc, 0x29, 0x15, 0x00, 0xd1, 0x57, 0x27, 0x00, 0xdd, 0x34, 0xf5, 0x00, 0x62, 0xdb, 0xc0, 0x00, 0x3c, 0x99, 0x95, 0x00, 0x41, 0x90, 0x43, 0x00, 0x63, 0x51, 0xfe, 0x00, 0xbb, 0xde, 0xab, 0x00, 0xb7, 0x61, 0xc5, 0x00, 0x3a, 0x6e, 0x24, 0x00, 0xd2, 0x4d, 0x42, 0x00, 0x49, 0x06, 0xe0, 0x00, 0x09, 0xea, 0x2e, 0x00, 0x1c, 0x92, 0xd1, 0x00, 0xeb, 0x1d, 0xfe, 0x00, 0x29, 0xb1, 0x1c, 0x00, 0xe8, 0x3e, 0xa7, 0x00, 0xf5, 0x35, 0x82, 0x00, 0x44, 0xbb, 0x2e, 0x00, 0x9c, 0xe9, 0x84, 0x00, 0xb4, 0x26, 0x70, 0x00, 0x41, 0x7e, 0x5f, 0x00, 0xd6, 0x91, 0x39, 0x00, 0x53, 0x83, 0x39, 0x00, 0x9c, 0xf4, 0x39, 0x00, 0x8b, 0x5f, 0x84, 0x00, 0x28, 0xf9, 0xbd, 0x00, 0xf8, 0x1f, 0x3b, 0x00, 0xde, 0xff, 0x97, 0x00, 0x0f, 0x98, 0x05, 0x00, 0x11, 0x2f, 0xef, 0x00, 0x0a, 0x5a, 0x8b, 0x00, 0x6d, 0x1f, 0x6d, 0x00, 0xcf, 0x7e, 0x36, 0x00, 0x09, 0xcb, 0x27, 0x00, 0x46, 0x4f, 0xb7, 0x00, 0x9e, 0x66, 0x3f, 0x00, 0x2d, 0xea, 0x5f, 0x00, 0xba, 0x27, 0x75, 0x00, 0xe5, 0xeb, 0xc7, 0x00, 0x3d, 0x7b, 0xf1, 0x00, 0xf7, 0x39, 0x07, 0x00, 0x92, 0x52, 0x8a, 0x00, 0xfb, 0x6b, 0xea, 0x00, 0x1f, 0xb1, 0x5f, 0x00, 0x08, 0x5d, 0x8d, 0x00, 0x30, 0x03, 0x56, 0x00, 0x7b, 0xfc, 0x46, 0x00, 0xf0, 0xab, 0x6b, 0x00, 0x20, 0xbc, 0xcf, 0x00, 0x36, 0xf4, 0x9a, 0x00, 0xe3, 0xa9, 0x1d, 0x00, 0x5e, 0x61, 0x91, 0x00, 0x08, 0x1b, 0xe6, 0x00, 0x85, 0x99, 0x65, 0x00, 0xa0, 0x14, 0x5f, 0x00, 0x8d, 0x40, 0x68, 0x00, 0x80, 0xd8, 0xff, 0x00, 0x27, 0x73, 0x4d, 0x00, 0x06, 0x06, 0x31, 0x00, 0xca, 0x56, 0x15, 0x00, 0xc9, 0xa8, 0x73, 0x00, 0x7b, 0xe2, 0x60, 0x00, 0x6b, 0x8c, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x40, 0xfb, 0x21, 0xf9, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x2d, 0x44, 0x74, 0x3e, 0x00, 0x00, 0x00, 0x80, 0x98, 0x46, 0xf8, 0x3c, 0x00, 0x00, 0x00, 0x60, 0x51, 0xcc, 0x78, 0x3b, 0x00, 0x00, 0x00, 0x80, 0x83, 0x1b, 0xf0, 0x39, 0x00, 0x00, 0x00, 0x40, 0x20, 0x25, 0x7a, 0x38, 0x00, 0x00, 0x00, 0x80, 0x22, 0x82, 0xe3, 0x36, 0x00, 0x00, 0x00, 0x00, 0x1d, 0xf3, 0x69, 0x35, 0x63, 0x55, 0x55, 0x55, 0x55, 0x55, 0xd5, 0x3f, 0x7a, 0xfe, 0x10, 0x11, 0x11, 0x11, 0xc1, 0x3f, 0xfe, 0x41, 0xb3, 0x1b, 0xba, 0xa1, 0xab, 0x3f, 0x37, 0xd6, 0x06, 0x84, 0xf4, 0x64, 0x96, 0x3f, 0x93, 0x84, 0x6e, 0xe9, 0xe3, 0x26, 0x82, 0x3f, 0x28, 0x03, 0x56, 0xc9, 0x22, 0x6d, 0x6d, 0x3f, 0x15, 0x83, 0xe0, 0xfe, 0xc8, 0xdb, 0x57, 0x3f, 0x01, 0x65, 0xf2, 0xf2, 0xd8, 0x44, 0x43, 0x3f, 0x68, 0x10, 0x8d, 0x1a, 0xf7, 0x26, 0x30, 0x3f, 0xa6, 0x92, 0x37, 0xa0, 0x88, 0x7e, 0x14, 0x3f, 0xe9, 0xa7, 0xf0, 0x32, 0x0f, 0xb8, 0x12, 0x3f, 0x73, 0x53, 0x60, 0xdb, 0xcb, 0x75, 0xf3, 0xbe, 0xd4, 0x7a, 0xbf, 0x74, 0x70, 0x2a, 0xfb, 0x3e, 0x9f, 0xc9, 0x18, 0x34, 0x4d, 0x55, 0xd5, 0x3f, 0x72, 0x9f, 0x99, 0x38, 0xfd, 0x12, 0xc1, 0x3f, 0xfe, 0x5a, 0x86, 0x1d, 0xc9, 0x54, 0xab, 0x3f, 0xce, 0x33, 0x8c, 0x90, 0xf3, 0x1d, 0x99, 0x3f, 0x4e, 0xf4, 0xec, 0xfc, 0xad, 0x5d, 0x68, 0x3f, 0xcd, 0x1b, 0x97, 0xbf, 0xb9, 0x62, 0x83, 0x3f, 0x4f, 0xbb, 0x61, 0x05, 0x67, 0xac, 0xdd, 0x3f, 0x18, 0x2d, 0x44, 0x54, 0xfb, 0x21, 0xe9, 0x3f, 0x9b, 0xf6, 0x81, 0xd2, 0x0b, 0x73, 0xef, 0x3f, 0x18, 0x2d, 0x44, 0x54, 0xfb, 0x21, 0xf9, 0x3f, 0x0d, 0x55, 0x55, 0x55, 0x55, 0x55, 0xd5, 0x3f, 0xc4, 0xeb, 0x98, 0x99, 0x99, 0x99, 0xc9, 0xbf, 0xff, 0x83, 0x00, 0x92, 0x24, 0x49, 0xc2, 0x3f, 0x71, 0x16, 0x23, 0xfe, 0xc6, 0x71, 0xbc, 0xbf, 0x6e, 0x20, 0x4c, 0xc5, 0xcd, 0x45, 0xb7, 0x3f, 0x6d, 0x9a, 0x74, 0xaf, 0xf2, 0xb0, 0xb3, 0xbf, 0x51, 0x3d, 0xd0, 0xa0, 0x66, 0x0d, 0xb1, 0x3f, 0x9a, 0xfd, 0xde, 0x52, 0x2d, 0xde, 0xad, 0xbf, 0xeb, 0x0d, 0x76, 0x24, 0x4b, 0x7b, 0xa9, 0x3f, 0x2f, 0x6c, 0x6a, 0x2c, 0x44, 0xb4, 0xa2, 0xbf, 0x11, 0xda, 0x22, 0xe3, 0x3a, 0xad, 0x90, 0x3f, 0xe2, 0x65, 0x2f, 0x22, 0x7f, 0x2b, 0x7a, 0x3c, 0x07, 0x5c, 0x14, 0x33, 0x26, 0xa6, 0x81, 0x3c, 0xbd, 0xcb, 0xf0, 0x7a, 0x88, 0x07, 0x70, 0x3c, 0x07, 0x5c, 0x14, 0x33, 0x26, 0xa6, 0x91, 0x3c, 0x38, 0x63, 0xed, 0x3e, 0xda, 0x0f, 0x49, 0x3f, 0x5e, 0x98, 0x7b, 0x3f, 0xda, 0x0f, 0xc9, 0x3f, 0xa9, 0xaa, 0xaa, 0x3e, 0x98, 0xca, 0x4c, 0xbe, 0x0d, 0xf5, 0x11, 0x3e, 0x47, 0x12, 0xda, 0xbd, 0x25, 0xac, 0x7c, 0x3d, 0x00, 0x00, 0x00, 0x00, 0x69, 0x37, 0xac, 0x31, 0x68, 0x21, 0x22, 0x33, 0xb4, 0x0f, 0x14, 0x33, 0x68, 0x21, 0xa2, 0x33, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0xbf, 0x16, 0x56, 0xe7, 0x9e, 0xaf, 0x03, 0xd2, 0x3c, 0x9b, 0x2b, 0xa1, 0x86, 0x9b, 0x84, 0x06, 0x3d, 0x82, 0x76, 0x49, 0x68, 0xc2, 0x25, 0x3c, 0x3d, 0x11, 0xea, 0x2d, 0x81, 0x99, 0x97, 0x71, 0x3d, 0x95, 0x64, 0x79, 0xe1, 0x7f, 0xfd, 0xa5, 0x3d, 0xbb, 0xbd, 0xd7, 0xd9, 0xdf, 0x7c, 0xdb, 0x3d, 0x95, 0xd6, 0x26, 0xe8, 0x0b, 0x2e, 0x11, 0x3e, 0x3a, 0x8c, 0x30, 0xe2, 0x8e, 0x79, 0x45, 0x3e, 0x48, 0xaf, 0xbc, 0x9a, 0xf2, 0xd7, 0x7a, 0x3e, 0x8d, 0xed, 0xb5, 0xa0, 0xf7, 0xc6, 0xb0, 0x3e, 0xf1, 0x68, 0xe3, 0x88, 0xb5, 0xf8, 0xe4, 0x3e, 0x2d, 0x43, 0x1c, 0xeb, 0xe2, 0x36, 0x1a, 0x3f, 0xfc, 0xa9, 0xf1, 0xd2, 0x4d, 0x62, 0x50, 0x3f, 0x7b, 0x14, 0xae, 0x47, 0xe1, 0x7a, 0x84, 0x3f, 0x9a, 0x99, 0x99, 0x99, 0x99, 0x99, 0xb9, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x24, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x59, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x8f, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x88, 0xc3, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x6a, 0xf8, 0x40, 0x00, 0x00, 0x00, 0x00, 0x80, 0x84, 0x2e, 0x41, 0x00, 0x00, 0x00, 0x00, 0xd0, 0x12, 0x63, 0x41, 0x00, 0x00, 0x00, 0x00, 0x84, 0xd7, 0x97, 0x41, 0x00, 0x00, 0x00, 0x00, 0x65, 0xcd, 0xcd, 0x41, 0x00, 0x00, 0x00, 0x20, 0x5f, 0xa0, 0x02, 0x42, 0x00, 0x00, 0x00, 0xe8, 0x76, 0x48, 0x37, 0x42, 0x00, 0x00, 0x00, 0xa2, 0x94, 0x1a, 0x6d, 0x42, 0x00, 0x00, 0x40, 0xe5, 0x9c, 0x30, 0xa2, 0x42, 0x00, 0x00, 0x90, 0x1e, 0xc4, 0xbc, 0xd6, 0x42, 0x00, 0x00, 0x34, 0x26, 0xf5, 0x6b, 0x0c, 0x43, 0x95, 0xbf, 0xd6, 0x33, 0xbd, 0x37, 0x86, 0x35, 0xac, 0xc5, 0x27, 0x37, 0x17, 0xb7, 0xd1, 0x38, 0x6f, 0x12, 0x83, 0x3a, 0x0a, 0xd7, 0x23, 0x3c, 0xcd, 0xcc, 0xcc, 0x3d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x41, 0x00, 0x00, 0xc8, 0x42, 0x00, 0x00, 0x7a, 0x44, 0x00, 0x40, 0x1c, 0x46, 0x00, 0x50, 0xc3, 0x47, 0x00, 0x24, 0x74, 0x49, 0x80, 0x96, 0x18, 0x4b, 0x00, 0x00, 0x00, 0x00, 0x5d, 0x3d, 0x7f, 0x66, 0x9e, 0xa0, 0xe6, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x88, 0x39, 0x3d, 0x44, 0x17, 0x75, 0xfa, 0x52, 0xb0, 0xe6, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd8, 0x3c, 0xfe, 0xd9, 0x0b, 0x75, 0x12, 0xc0, 0xe6, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x78, 0x28, 0xbd, 0xbf, 0x76, 0xd4, 0xdd, 0xdc, 0xcf, 0xe6, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x1e, 0x3d, 0x29, 0x1a, 0x65, 0x3c, 0xb2, 0xdf, 0xe6, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd8, 0xbc, 0xe3, 0x3a, 0x59, 0x98, 0x92, 0xef, 0xe6, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbc, 0xbc, 0x86, 0x93, 0x51, 0xf9, 0x7d, 0xff, 0xe6, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd8, 0x2f, 0xbd, 0xa3, 0x2d, 0xf4, 0x66, 0x74, 0x0f, 0xe7, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x88, 0x2c, 0xbd, 0xc3, 0x5f, 0xec, 0xe8, 0x75, 0x1f, 0xe7, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x13, 0x3d, 0x05, 0xcf, 0xea, 0x86, 0x82, 0x2f, 0xe7, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x38, 0xbd, 0x52, 0x81, 0xa5, 0x48, 0x9a, 0x3f, 0xe7, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x00, 0xbd, 0xfc, 0xcc, 0xd7, 0x35, 0xbd, 0x4f, 0xe7, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x88, 0x2f, 0x3d, 0xf1, 0x67, 0x42, 0x56, 0xeb, 0x5f, 0xe7, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x03, 0x3d, 0x48, 0x6d, 0xab, 0xb1, 0x24, 0x70, 0xe7, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd0, 0x27, 0xbd, 0x38, 0x5d, 0xde, 0x4f, 0x69, 0x80, 0xe7, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xdd, 0xbc, 0x00, 0x1d, 0xac, 0x38, 0xb9, 0x90, 0xe7, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe3, 0x3c, 0x78, 0x01, 0xeb, 0x73, 0x14, 0xa1, 0xe7, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xed, 0xbc, 0x60, 0xd0, 0x76, 0x09, 0x7b, 0xb1, 0xe7, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x20, 0x3d, 0x33, 0xc1, 0x30, 0x01, 0xed, 0xc1, 0xe7, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa0, 0x3c, 0x36, 0x86, 0xff, 0x62, 0x6a, 0xd2, 0xe7, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x90, 0x26, 0xbd, 0x3b, 0x4e, 0xcf, 0x36, 0xf3, 0xe2, 0xe7, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x02, 0xbd, 0xe8, 0xc3, 0x91, 0x84, 0x87, 0xf3, 0xe7, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x58, 0x24, 0xbd, 0x4e, 0x1b, 0x3e, 0x54, 0x27, 0x04, 0xe8, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x33, 0x3d, 0x1a, 0x07, 0xd1, 0xad, 0xd2, 0x14, 0xe8, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x3d, 0x7e, 0xcd, 0x4c, 0x99, 0x89, 0x25, 0xe8, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x21, 0xbd, 0xd0, 0x42, 0xb9, 0x1e, 0x4c, 0x36, 0xe8, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd0, 0x29, 0x3d, 0xb5, 0xca, 0x23, 0x46, 0x1a, 0x47, 0xe8, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x47, 0x3d, 0xbc, 0x5b, 0x9f, 0x17, 0xf4, 0x57, 0xe8, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x22, 0x3d, 0xaf, 0x91, 0x44, 0x9b, 0xd9, 0x68, 0xe8, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc4, 0x32, 0xbd, 0x95, 0xa3, 0x31, 0xd9, 0xca, 0x79, 0xe8, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x23, 0xbd, 0xb8, 0x65, 0x8a, 0xd9, 0xc7, 0x8a, 0xe8, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x2a, 0xbd, 0x00, 0x58, 0x78, 0xa4, 0xd0, 0x9b, 0xe8, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xed, 0xbc, 0x23, 0xa2, 0x2a, 0x42, 0xe5, 0xac, 0xe8, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x28, 0x33, 0x3d, 0xfa, 0x19, 0xd6, 0xba, 0x05, 0xbe, 0xe8, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0xb4, 0x42, 0x3d, 0x83, 0x43, 0xb5, 0x16, 0x32, 0xcf, 0xe8, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd0, 0x2e, 0xbd, 0x4c, 0x66, 0x08, 0x5e, 0x6a, 0xe0, 0xe8, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x50, 0x20, 0xbd, 0x07, 0x78, 0x15, 0x99, 0xae, 0xf1, 0xe8, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x28, 0x28, 0x3d, 0x0e, 0x2c, 0x28, 0xd0, 0xfe, 0x02, 0xe9, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0xb0, 0x1c, 0xbd, 0x96, 0xff, 0x91, 0x0b, 0x5b, 0x14, 0xe9, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x05, 0xbd, 0xf9, 0x2f, 0xaa, 0x53, 0xc3, 0x25, 0xe9, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0xf5, 0x3c, 0x4a, 0xc6, 0xcd, 0xb0, 0x37, 0x37, 0xe9, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x17, 0x3d, 0xae, 0x98, 0x5f, 0x2b, 0xb8, 0x48, 0xe9, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0xbd, 0xcb, 0x52, 0xc8, 0xcb, 0x44, 0x5a, 0xe9, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x68, 0x25, 0x3d, 0x21, 0x6f, 0x76, 0x9a, 0xdd, 0x6b, 0xe9, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd0, 0x36, 0xbd, 0x2a, 0x4e, 0xde, 0x9f, 0x82, 0x7d, 0xe9, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xbd, 0xa3, 0x23, 0x7a, 0xe4, 0x33, 0x8f, 0xe9, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2d, 0x3d, 0x04, 0x06, 0xca, 0x70, 0xf1, 0xa0, 0xe9, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa4, 0x38, 0xbd, 0x89, 0xff, 0x53, 0x4d, 0xbb, 0xb2, 0xe9, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5c, 0x35, 0x3d, 0x5b, 0xf1, 0xa3, 0x82, 0x91, 0xc4, 0xe9, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0xb8, 0x26, 0x3d, 0xc5, 0xb8, 0x4b, 0x19, 0x74, 0xd6, 0xe9, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xec, 0xbc, 0x8e, 0x23, 0xe3, 0x19, 0x63, 0xe8, 0xe9, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd0, 0x17, 0x3d, 0x02, 0xf3, 0x07, 0x8d, 0x5e, 0xfa, 0xe9, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x16, 0x3d, 0x4d, 0xe5, 0x5d, 0x7b, 0x66, 0x0c, 0xea, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf5, 0xbc, 0xf6, 0xb8, 0x8e, 0xed, 0x7a, 0x1e, 0xea, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x09, 0x3d, 0x27, 0x2e, 0x4a, 0xec, 0x9b, 0x30, 0xea, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd8, 0x2a, 0x3d, 0x5d, 0x0a, 0x46, 0x80, 0xc9, 0x42, 0xea, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x1a, 0xbd, 0x9b, 0x25, 0x3e, 0xb2, 0x03, 0x55, 0xea, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x0b, 0x3d, 0x13, 0x62, 0xf4, 0x8a, 0x4a, 0x67, 0xea, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x88, 0x38, 0x3d, 0xa7, 0xb3, 0x30, 0x13, 0x9e, 0x79, 0xea, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x11, 0x3d, 0x8d, 0x2e, 0xc1, 0x53, 0xfe, 0x8b, 0xea, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x06, 0x3d, 0xd2, 0xfc, 0x79, 0x55, 0x6b, 0x9e, 0xea, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0xb8, 0x29, 0xbd, 0xb8, 0x6f, 0x35, 0x21, 0xe5, 0xb0, 0xea, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x70, 0x2b, 0x3d, 0x81, 0xf3, 0xd3, 0xbf, 0x6b, 0xc3, 0xea, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd9, 0x3c, 0x80, 0x27, 0x3c, 0x3a, 0xff, 0xd5, 0xea, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe4, 0x3c, 0xa3, 0xd2, 0x5a, 0x99, 0x9f, 0xe8, 0xea, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x90, 0x2c, 0xbd, 0x67, 0xf3, 0x22, 0xe6, 0x4c, 0xfb, 0xea, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x50, 0x16, 0x3d, 0x90, 0xb7, 0x8d, 0x29, 0x07, 0x0e, 0xeb, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd4, 0x2f, 0x3d, 0xa9, 0x89, 0x9a, 0x6c, 0xce, 0x20, 0xeb, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x70, 0x12, 0x3d, 0x4b, 0x1a, 0x4f, 0xb8, 0xa2, 0x33, 0xeb, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x47, 0x4d, 0x3d, 0xe7, 0x47, 0xb7, 0x15, 0x84, 0x46, 0xeb, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x38, 0xbd, 0x3a, 0x59, 0xe5, 0x8d, 0x72, 0x59, 0xeb, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x98, 0x3c, 0x6a, 0xc5, 0xf1, 0x29, 0x6e, 0x6c, 0xeb, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd0, 0x0a, 0x3d, 0x50, 0x5e, 0xfb, 0xf2, 0x76, 0x7f, 0xeb, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xde, 0x3c, 0xb2, 0x49, 0x27, 0xf2, 0x8c, 0x92, 0xeb, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x04, 0xbd, 0x03, 0x06, 0xa1, 0x30, 0xb0, 0xa5, 0xeb, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x70, 0x0d, 0xbd, 0x66, 0x6f, 0x9a, 0xb7, 0xe0, 0xb8, 0xeb, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x90, 0x0d, 0x3d, 0xff, 0xc1, 0x4b, 0x90, 0x1e, 0xcc, 0xeb, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa0, 0x02, 0x3d, 0x6f, 0xa1, 0xf3, 0xc3, 0x69, 0xdf, 0xeb, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x78, 0x1f, 0xbd, 0xb8, 0x1d, 0xd7, 0x5b, 0xc2, 0xf2, 0xeb, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa0, 0x10, 0xbd, 0xe9, 0xb2, 0x41, 0x61, 0x28, 0x06, 0xec, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x11, 0xbd, 0xe0, 0x52, 0x85, 0xdd, 0x9b, 0x19, 0xec, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x0b, 0x3d, 0xee, 0x64, 0xfa, 0xd9, 0x1c, 0x2d, 0xec, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x09, 0xbd, 0x2f, 0xd0, 0xff, 0x5f, 0xab, 0x40, 0xec, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd0, 0x0e, 0xbd, 0x15, 0xfd, 0xfa, 0x78, 0x47, 0x54, 0xec, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x39, 0x3d, 0xcb, 0xd0, 0x57, 0x2e, 0xf1, 0x67, 0xec, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x1a, 0xbd, 0xb6, 0xc1, 0x88, 0x89, 0xa8, 0x7b, 0xec, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x80, 0x45, 0x58, 0xbd, 0x33, 0xe7, 0x06, 0x94, 0x6d, 0x8f, 0xec, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x1a, 0xbd, 0xdf, 0xc4, 0x51, 0x57, 0x40, 0xa3, 0xec, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xcb, 0x3c, 0x94, 0x90, 0xef, 0xdc, 0x20, 0xb7, 0xec, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x01, 0x3d, 0x89, 0x16, 0x6d, 0x2e, 0x0f, 0xcb, 0xec, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0xf0, 0x3c, 0x12, 0xc4, 0x5d, 0x55, 0x0b, 0xdf, 0xec, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0xf3, 0x3c, 0x3b, 0xab, 0x5b, 0x5b, 0x15, 0xf3, 0xec, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x90, 0x06, 0xbd, 0xbc, 0x89, 0x07, 0x4a, 0x2d, 0x07, 0xed, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa0, 0x09, 0x3d, 0xfa, 0xc8, 0x08, 0x2b, 0x53, 0x1b, 0xed, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x15, 0xbd, 0x85, 0x8a, 0x0d, 0x08, 0x87, 0x2f, 0xed, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x28, 0x1d, 0x3d, 0x03, 0xa2, 0xca, 0xea, 0xc8, 0x43, 0xed, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa0, 0x01, 0x3d, 0x91, 0xa4, 0xfb, 0xdc, 0x18, 0x58, 0xed, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xdf, 0x3c, 0xa1, 0xe6, 0x62, 0xe8, 0x76, 0x6c, 0xed, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa0, 0x03, 0xbd, 0x4e, 0x83, 0xc9, 0x16, 0xe3, 0x80, 0xed, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd8, 0x0c, 0xbd, 0x90, 0x60, 0xff, 0x71, 0x5d, 0x95, 0xed, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xf4, 0x3c, 0xae, 0x32, 0xdb, 0x03, 0xe6, 0xa9, 0xed, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x90, 0xff, 0x3c, 0x25, 0x83, 0x3a, 0xd6, 0x7c, 0xbe, 0xed, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xe9, 0x3c, 0x45, 0xb4, 0x01, 0xf3, 0x21, 0xd3, 0xed, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0xf5, 0xbc, 0xbf, 0x05, 0x1c, 0x64, 0xd5, 0xe7, 0xed, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x70, 0x1d, 0xbd, 0xec, 0x9a, 0x7b, 0x33, 0x97, 0xfc, 0xed, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 0x16, 0xbd, 0x5e, 0x7d, 0x19, 0x6b, 0x67, 0x11, 0xee, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x0b, 0x3d, 0xe7, 0xa3, 0xf5, 0x14, 0x46, 0x26, 0xee, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0xce, 0x40, 0x3d, 0x5c, 0xee, 0x16, 0x3b, 0x33, 0x3b, 0xee, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x68, 0x0c, 0x3d, 0xb4, 0x3f, 0x8b, 0xe7, 0x2e, 0x50, 0xee, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x09, 0xbd, 0x68, 0x6d, 0x67, 0x24, 0x39, 0x65, 0xee, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe5, 0xbc, 0x44, 0x4c, 0xc7, 0xfb, 0x51, 0x7a, 0xee, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x07, 0xbd, 0x26, 0xb7, 0xcd, 0x77, 0x79, 0x8f, 0xee, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x70, 0xf3, 0xbc, 0xe8, 0x90, 0xa4, 0xa2, 0xaf, 0xa4, 0xee, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd0, 0xe5, 0x3c, 0xe4, 0xca, 0x7c, 0x86, 0xf4, 0xb9, 0xee, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1a, 0x16, 0x3d, 0x0d, 0x68, 0x8e, 0x2d, 0x48, 0xcf, 0xee, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x50, 0xf5, 0x3c, 0x14, 0x85, 0x18, 0xa2, 0xaa, 0xe4, 0xee, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0xc6, 0x3c, 0x13, 0x5a, 0x61, 0xee, 0x1b, 0xfa, 0xee, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xee, 0xbc, 0x06, 0x41, 0xb6, 0x1c, 0x9c, 0x0f, 0xef, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x88, 0xfa, 0xbc, 0x63, 0xb9, 0x6b, 0x37, 0x2b, 0x25, 0xef, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x90, 0x2c, 0xbd, 0x75, 0x72, 0xdd, 0x48, 0xc9, 0x3a, 0xef, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xaa, 0x3c, 0x24, 0x45, 0x6e, 0x5b, 0x76, 0x50, 0xef, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0xf4, 0xbc, 0xfd, 0x44, 0x88, 0x79, 0x32, 0x66, 0xef, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xca, 0x3c, 0x38, 0xbe, 0x9c, 0xad, 0xfd, 0x7b, 0xef, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbc, 0xfa, 0x3c, 0x82, 0x3c, 0x24, 0x02, 0xd8, 0x91, 0xef, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0xd4, 0xbc, 0x8e, 0x90, 0x9e, 0x81, 0xc1, 0xa7, 0xef, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x0b, 0xbd, 0x11, 0xd5, 0x92, 0x36, 0xba, 0xbd, 0xef, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0xc0, 0xbc, 0x94, 0x71, 0x8f, 0x2b, 0xc2, 0xd3, 0xef, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x80, 0xde, 0x10, 0xbd, 0xee, 0x23, 0x2a, 0x6b, 0xd9, 0xe9, 0xef, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0xee, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xbc, 0x5a, 0xfa, 0x1a, 0x0b, 0xf0, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0xb3, 0xbc, 0x03, 0x33, 0xfb, 0xa9, 0x3d, 0x16, 0xf0, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x17, 0x12, 0xbd, 0x82, 0x02, 0x3b, 0x14, 0x68, 0x21, 0xf0, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0xba, 0x3c, 0x6c, 0x80, 0x77, 0x3e, 0x9a, 0x2c, 0xf0, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x98, 0xef, 0x3c, 0xca, 0xbb, 0x11, 0x2e, 0xd4, 0x37, 0xf0, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0xc7, 0xbc, 0x89, 0x7f, 0x6e, 0xe8, 0x15, 0x43, 0xf0, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0xd8, 0x3c, 0x67, 0x54, 0xf6, 0x72, 0x5f, 0x4e, 0xf0, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x1a, 0xbd, 0x5a, 0x85, 0x15, 0xd3, 0xb0, 0x59, 0xf0, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x84, 0x02, 0xbd, 0x95, 0x1f, 0x3c, 0x0e, 0x0a, 0x65, 0xf0, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0xf1, 0x3c, 0x1a, 0xf7, 0xdd, 0x29, 0x6b, 0x70, 0xf0, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x24, 0x15, 0x3d, 0x2d, 0xa8, 0x72, 0x2b, 0xd4, 0x7b, 0xf0, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa0, 0xe9, 0xbc, 0xd0, 0x9b, 0x75, 0x18, 0x45, 0x87, 0xf0, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0xe6, 0x3c, 0xc8, 0x07, 0x66, 0xf6, 0xbd, 0x92, 0xf0, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x78, 0x00, 0xbd, 0x83, 0xf3, 0xc6, 0xca, 0x3e, 0x9e, 0xf0, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x98, 0xbc, 0x30, 0x39, 0x1f, 0x9b, 0xc7, 0xa9, 0xf0, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa0, 0xff, 0x3c, 0xfc, 0x88, 0xf9, 0x6c, 0x58, 0xb5, 0xf0, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc8, 0xfa, 0xbc, 0x8a, 0x6c, 0xe4, 0x45, 0xf1, 0xc0, 0xf0, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xd9, 0x3c, 0x16, 0x48, 0x72, 0x2b, 0x92, 0xcc, 0xf0, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x05, 0x3d, 0xd8, 0x5d, 0x39, 0x23, 0x3b, 0xd8, 0xf0, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd0, 0xfa, 0xbc, 0xf3, 0xd1, 0xd3, 0x32, 0xec, 0xe3, 0xf0, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0xac, 0x1b, 0x3d, 0xa6, 0xa9, 0xdf, 0x5f, 0xa5, 0xef, 0xf0, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe8, 0x04, 0xbd, 0xf0, 0xd2, 0xfe, 0xaf, 0x66, 0xfb, 0xf0, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x0d, 0xbd, 0x4b, 0x23, 0xd7, 0x28, 0x30, 0x07, 0xf1, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x50, 0xf1, 0x3c, 0x5b, 0x5b, 0x12, 0xd0, 0x01, 0x13, 0xf1, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xec, 0x3c, 0xf9, 0x2a, 0x5e, 0xab, 0xdb, 0x1e, 0xf1, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbc, 0x16, 0x3d, 0xd5, 0x31, 0x6c, 0xc0, 0xbd, 0x2a, 0xf1, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0xe8, 0x3c, 0x7d, 0x04, 0xf2, 0x14, 0xa8, 0x36, 0xf1, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd0, 0x0e, 0xbd, 0xe9, 0x2d, 0xa9, 0xae, 0x9a, 0x42, 0xf1, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0xe8, 0x3c, 0x38, 0x31, 0x4f, 0x93, 0x95, 0x4e, 0xf1, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0xeb, 0x3c, 0x71, 0x8e, 0xa5, 0xc8, 0x98, 0x5a, 0xf1, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x05, 0x3d, 0xdf, 0xc3, 0x71, 0x54, 0xa4, 0x66, 0xf1, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x03, 0x3d, 0x11, 0x52, 0x7d, 0x3c, 0xb8, 0x72, 0xf1, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd4, 0x28, 0x3d, 0x9f, 0xbb, 0x95, 0x86, 0xd4, 0x7e, 0xf1, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd0, 0x05, 0xbd, 0x93, 0x8d, 0x8c, 0x38, 0xf9, 0x8a, 0xf1, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x88, 0x1c, 0xbd, 0x66, 0x5d, 0x37, 0x58, 0x26, 0x97, 0xf1, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x11, 0x3d, 0xa7, 0xcb, 0x6f, 0xeb, 0x5b, 0xa3, 0xf1, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x10, 0x3d, 0xe3, 0x87, 0x13, 0xf8, 0x99, 0xaf, 0xf1, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x39, 0x47, 0xbd, 0x54, 0x5d, 0x04, 0x84, 0xe0, 0xbb, 0xf1, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe4, 0x24, 0x3d, 0x43, 0x1c, 0x28, 0x95, 0x2f, 0xc8, 0xf1, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x0a, 0xbd, 0xb2, 0xb9, 0x68, 0x31, 0x87, 0xd4, 0xf1, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xe3, 0x3c, 0x31, 0x40, 0xb4, 0x5e, 0xe7, 0xe0, 0xf1, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xea, 0x3c, 0x38, 0xd9, 0xfc, 0x22, 0x50, 0xed, 0xf1, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x90, 0x01, 0x3d, 0xf7, 0xcd, 0x38, 0x84, 0xc1, 0xf9, 0xf1, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x78, 0x1b, 0xbd, 0x8f, 0x8d, 0x62, 0x88, 0x3b, 0x06, 0xf2, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x94, 0x2d, 0x3d, 0x1e, 0xa8, 0x78, 0x35, 0xbe, 0x12, 0xf2, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd8, 0x3c, 0x41, 0xdd, 0x7d, 0x91, 0x49, 0x1f, 0xf2, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x34, 0x2b, 0x3d, 0x23, 0x13, 0x79, 0xa2, 0xdd, 0x2b, 0xf2, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x19, 0x3d, 0xe7, 0x61, 0x75, 0x6e, 0x7a, 0x38, 0xf2, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc8, 0x19, 0xbd, 0x27, 0x14, 0x82, 0xfb, 0x1f, 0x45, 0xf2, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x02, 0x3d, 0x02, 0xa6, 0xb2, 0x4f, 0xce, 0x51, 0xf2, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x13, 0xbd, 0xb0, 0xce, 0x1e, 0x71, 0x85, 0x5e, 0xf2, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x70, 0x12, 0x3d, 0x16, 0x7d, 0xe2, 0x65, 0x45, 0x6b, 0xf2, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd0, 0x11, 0x3d, 0x0f, 0xe0, 0x1d, 0x34, 0x0e, 0x78, 0xf2, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0xee, 0x31, 0x3d, 0x3e, 0x63, 0xf5, 0xe1, 0xdf, 0x84, 0xf2, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x14, 0xbd, 0x30, 0xbb, 0x91, 0x75, 0xba, 0x91, 0xf2, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd8, 0x13, 0xbd, 0x09, 0xdf, 0x1f, 0xf5, 0x9d, 0x9e, 0xf2, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0xb0, 0x08, 0x3d, 0x9b, 0x0e, 0xd1, 0x66, 0x8a, 0xab, 0xf2, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0x22, 0xbd, 0x3a, 0xda, 0xda, 0xd0, 0x7f, 0xb8, 0xf2, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x34, 0x2a, 0x3d, 0xf9, 0x1a, 0x77, 0x39, 0x7e, 0xc5, 0xf2, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x10, 0xbd, 0xd9, 0x02, 0xe4, 0xa6, 0x85, 0xd2, 0xf2, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd0, 0x0e, 0xbd, 0x79, 0x15, 0x64, 0x1f, 0x96, 0xdf, 0xf2, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0xf4, 0xbc, 0xcf, 0x2e, 0x3e, 0xa9, 0xaf, 0xec, 0xf2, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x98, 0x24, 0xbd, 0x22, 0x88, 0xbd, 0x4a, 0xd2, 0xf9, 0xf2, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x16, 0xbd, 0x25, 0xb6, 0x31, 0x0a, 0xfe, 0x06, 0xf3, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0x32, 0xbd, 0x0b, 0xa5, 0xee, 0xed, 0x32, 0x14, 0xf3, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x80, 0xdf, 0x70, 0xbd, 0xb8, 0xd7, 0x4c, 0xfc, 0x70, 0x21, 0xf3, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x22, 0xbd, 0xa2, 0xe9, 0xa8, 0x3b, 0xb8, 0x2e, 0xf3, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x98, 0x25, 0xbd, 0x66, 0x17, 0x64, 0xb2, 0x08, 0x3c, 0xf3, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd0, 0x1e, 0x3d, 0x27, 0xfa, 0xe3, 0x66, 0x62, 0x49, 0xf3, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xdc, 0xbc, 0x0f, 0x9f, 0x92, 0x5f, 0xc5, 0x56, 0xf3, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd8, 0x30, 0xbd, 0xb9, 0x88, 0xde, 0xa2, 0x31, 0x64, 0xf3, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc8, 0x22, 0x3d, 0x39, 0xaa, 0x3a, 0x37, 0xa7, 0x71, 0xf3, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x20, 0x3d, 0xfe, 0x74, 0x1e, 0x23, 0x26, 0x7f, 0xf3, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x16, 0xbd, 0x38, 0xd8, 0x05, 0x6d, 0xae, 0x8c, 0xf3, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x0a, 0xbd, 0xc3, 0x3e, 0x71, 0x1b, 0x40, 0x9a, 0xf3, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x72, 0x44, 0xbd, 0x20, 0xa0, 0xe5, 0x34, 0xdb, 0xa7, 0xf3, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x08, 0x3d, 0x95, 0x6e, 0xec, 0xbf, 0x7f, 0xb5, 0xf3, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3e, 0x3d, 0xf2, 0xa8, 0x13, 0xc3, 0x2d, 0xc3, 0xf3, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xef, 0x3c, 0x22, 0xe1, 0xed, 0x44, 0xe5, 0xd0, 0xf3, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa0, 0x17, 0xbd, 0xbb, 0x34, 0x12, 0x4c, 0xa6, 0xde, 0xf3, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x26, 0x3d, 0xcc, 0x4e, 0x1c, 0xdf, 0x70, 0xec, 0xf3, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa6, 0x48, 0xbd, 0x8c, 0x7e, 0xac, 0x04, 0x45, 0xfa, 0xf3, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0xdc, 0x3c, 0xbd, 0xbb, 0xa0, 0x67, 0xc3, 0x22, 0x08, 0xf4, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0xb8, 0x25, 0x3d, 0x95, 0x2e, 0xf7, 0x21, 0x0a, 0x16, 0xf4, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x1e, 0x3d, 0x46, 0x46, 0x09, 0x27, 0xfb, 0x23, 0xf4, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x13, 0xbd, 0x20, 0xa9, 0x50, 0xd9, 0xf5, 0x31, 0xf4, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x98, 0x23, 0x3d, 0xeb, 0xb9, 0x84, 0x3f, 0xfa, 0x3f, 0xf4, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfa, 0x3c, 0x19, 0x89, 0x61, 0x60, 0x08, 0x4e, 0xf4, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xf6, 0xbc, 0x01, 0xd2, 0xa7, 0x42, 0x20, 0x5c, 0xf4, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x0b, 0xbd, 0x16, 0x00, 0x1d, 0xed, 0x41, 0x6a, 0xf4, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x12, 0xbd, 0x26, 0x33, 0x8b, 0x66, 0x6d, 0x78, 0xf4, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x30, 0x3d, 0x00, 0x3c, 0xc1, 0xb5, 0xa2, 0x86, 0xf4, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x2d, 0xbd, 0x04, 0xaf, 0x92, 0xe1, 0xe1, 0x94, 0xf4, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x0c, 0x3d, 0x72, 0xd3, 0xd7, 0xf0, 0x2a, 0xa3, 0xf4, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x50, 0x1e, 0xbd, 0x01, 0xb8, 0x6d, 0xea, 0x7d, 0xb1, 0xf4, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x07, 0x3d, 0xe1, 0x29, 0x36, 0xd5, 0xda, 0xbf, 0xf4, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x13, 0xbd, 0x32, 0xc1, 0x17, 0xb8, 0x41, 0xce, 0xf4, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x3d, 0xdb, 0xdd, 0xfd, 0x99, 0xb2, 0xdc, 0xf4, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x70, 0x2c, 0x3d, 0x96, 0xab, 0xd8, 0x81, 0x2d, 0xeb, 0xf4, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x1c, 0xbd, 0x02, 0x2d, 0x9d, 0x76, 0xb2, 0xf9, 0xf4, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x19, 0x3d, 0xc1, 0x31, 0x45, 0x7f, 0x41, 0x08, 0xf5, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x08, 0xbd, 0x2a, 0x66, 0xcf, 0xa2, 0xda, 0x16, 0xf5, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfa, 0xbc, 0xea, 0x51, 0x3f, 0xe8, 0x7d, 0x25, 0xf5, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x4a, 0x3d, 0xda, 0x4e, 0x9d, 0x56, 0x2b, 0x34, 0xf5, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd8, 0x26, 0xbd, 0x1a, 0xac, 0xf6, 0xf4, 0xe2, 0x42, 0xf5, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x32, 0xbd, 0xdb, 0x94, 0x5d, 0xca, 0xa4, 0x51, 0xf5, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x48, 0x3d, 0x6b, 0x11, 0xe9, 0xdd, 0x70, 0x60, 0xf5, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0xb0, 0x24, 0x3d, 0xde, 0x29, 0xb5, 0x36, 0x47, 0x6f, 0xf5, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5a, 0x41, 0x3d, 0x0e, 0xc4, 0xe2, 0xdb, 0x27, 0x7e, 0xf5, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x29, 0xbd, 0x6f, 0xc7, 0x97, 0xd4, 0x12, 0x8d, 0xf5, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x23, 0xbd, 0x4c, 0x0b, 0xff, 0x27, 0x08, 0x9c, 0xf5, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0xec, 0x4d, 0x3d, 0x27, 0x54, 0x48, 0xdd, 0x07, 0xab, 0xf5, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc4, 0xbc, 0xf4, 0x7a, 0xa8, 0xfb, 0x11, 0xba, 0xf5, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x30, 0x3d, 0x0b, 0x46, 0x59, 0x8a, 0x26, 0xc9, 0xf5, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc8, 0x26, 0xbd, 0x3f, 0x8e, 0x99, 0x90, 0x45, 0xd8, 0xf5, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x9a, 0x46, 0x3d, 0xe1, 0x20, 0xad, 0x15, 0x6f, 0xe7, 0xf5, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x1b, 0xbd, 0xca, 0xeb, 0xdc, 0x20, 0xa3, 0xf6, 0xf5, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x70, 0x17, 0x3d, 0xb8, 0xdc, 0x76, 0xb9, 0xe1, 0x05, 0xf6, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x26, 0x3d, 0x15, 0xf7, 0xcd, 0xe6, 0x2a, 0x15, 0xf6, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x3d, 0x31, 0x55, 0x3a, 0xb0, 0x7e, 0x24, 0xf6, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd0, 0x15, 0xbd, 0xb5, 0x29, 0x19, 0x1d, 0xdd, 0x33, 0xf6, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd0, 0x12, 0xbd, 0x13, 0xc3, 0xcc, 0x34, 0x46, 0x43, 0xf6, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xea, 0xbc, 0xfa, 0x8e, 0xbc, 0xfe, 0xb9, 0x52, 0xf6, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x28, 0xbd, 0x97, 0x33, 0x55, 0x82, 0x38, 0x62, 0xf6, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x71, 0x3d, 0x8e, 0x32, 0x08, 0xc7, 0xc1, 0x71, 0xf6, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x37, 0xbd, 0x7e, 0xa9, 0x4c, 0xd4, 0x55, 0x81, 0xf6, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xe6, 0x3c, 0x71, 0x94, 0x9e, 0xb1, 0xf4, 0x90, 0xf6, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x78, 0x29, 0xbd, 0xcd, 0x3b, 0x7f, 0x66, 0x9e, 0xa0, 0xe6, 0x3f, 0x87, 0x01, 0xeb, 0x73, 0x14, 0xa1, 0xe7, 0x3f, 0xdb, 0xa0, 0x2a, 0x42, 0xe5, 0xac, 0xe8, 0x3f, 0x90, 0xf0, 0xa3, 0x82, 0x91, 0xc4, 0xe9, 0x3f, 0xad, 0xd3, 0x5a, 0x99, 0x9f, 0xe8, 0xea, 0x3f, 0x9c, 0x52, 0x85, 0xdd, 0x9b, 0x19, 0xec, 0x3f, 0x87, 0xa4, 0xfb, 0xdc, 0x18, 0x58, 0xed, 0x3f, 0xda, 0x90, 0xa4, 0xa2, 0xaf, 0xa4, 0xee, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x3f, 0x0f, 0x89, 0xf9, 0x6c, 0x58, 0xb5, 0xf0, 0x3f, 0x7b, 0x51, 0x7d, 0x3c, 0xb8, 0x72, 0xf1, 0x3f, 0x38, 0x62, 0x75, 0x6e, 0x7a, 0x38, 0xf2, 0x3f, 0x15, 0xb7, 0x31, 0x0a, 0xfe, 0x06, 0xf3, 0x3f, 0x22, 0x34, 0x12, 0x4c, 0xa6, 0xde, 0xf3, 0x3f, 0x27, 0x2a, 0x36, 0xd5, 0xda, 0xbf, 0xf4, 0x3f, 0x29, 0x54, 0x48, 0xdd, 0x07, 0xab, 0xf5, 0x3f, 0x00, 0x00, 0x00, 0x3f, 0x00, 0x00, 0x00, 0xbf, 0x61, 0x5f, 0x63, 0x6c, 0x7a, 0x5f, 0x36, 0x34, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x32, 0xfd, 0xff, 0xff, 0xff, 0xff, 0xb1, 0xbf, 0x79, 0xa7, 0x4f, 0xb4, 0xd0, 0x29, 0x20, 0xc0, 0x63, 0xe8, 0x19, 0x7b, 0x02, 0x11, 0x70, 0xc0, 0xfc, 0xca, 0x4d, 0xcd, 0x6e, 0x6a, 0xa3, 0xc0, 0x3d, 0x64, 0xcc, 0x36, 0x0b, 0x85, 0xb4, 0xc0, 0x51, 0x67, 0xa9, 0x07, 0x33, 0x22, 0x5d, 0x40, 0x38, 0x69, 0x59, 0x50, 0x7d, 0xf3, 0xad, 0x40, 0x5f, 0xb0, 0xb6, 0x6e, 0xbb, 0xd2, 0xe3, 0x40, 0xbd, 0xa9, 0x9f, 0x8f, 0x0f, 0x81, 0xfc, 0x40, 0xdc, 0x49, 0x2c, 0x4f, 0x77, 0x41, 0xe7, 0x40, 0xcc, 0x95, 0xe4, 0x47, 0xb1, 0x18, 0xa9, 0xbd, 0xc6, 0xfb, 0x9a, 0xe6, 0xff, 0xff, 0xb1, 0xbf, 0xbf, 0x6b, 0x0c, 0xf9, 0x70, 0xa3, 0x10, 0xc0, 0x83, 0x17, 0x7d, 0x5a, 0x2f, 0xeb, 0x50, 0xc0, 0x63, 0xcc, 0x42, 0x67, 0xb3, 0xb3, 0x74, 0xc0, 0xd7, 0x8b, 0xa3, 0x28, 0xef, 0xa6, 0x75, 0xc0, 0xde, 0xc5, 0x98, 0x0c, 0x81, 0x60, 0x4e, 0x40, 0x64, 0x28, 0x7e, 0x5c, 0x02, 0x6d, 0x90, 0x40, 0x60, 0x1d, 0xbe, 0x8f, 0xf8, 0x5a, 0xb7, 0x40, 0x38, 0xfa, 0x76, 0xfa, 0xb8, 0xcc, 0xc2, 0x40, 0x64, 0xe8, 0x0b, 0xc7, 0x1d, 0xcc, 0xa2, 0x40, 0x86, 0xaa, 0xe1, 0x6f, 0x03, 0xe1, 0x25, 0xbe, 0x4b, 0xe2, 0xc0, 0xf7, 0xf6, 0xff, 0xb1, 0xbf, 0x74, 0x80, 0xa4, 0xae, 0xb2, 0x45, 0x03, 0xc0, 0x14, 0x4e, 0xb9, 0x4c, 0x4a, 0xf7, 0x35, 0xc0, 0x45, 0x1a, 0x0a, 0x42, 0x22, 0x0a, 0x4d, 0xc0, 0x0f, 0xd8, 0x92, 0xa8, 0xac, 0x72, 0x3f, 0xc0, 0xd3, 0x7d, 0x07, 0x84, 0x92, 0xed, 0x41, 0x40, 0x0e, 0x7c, 0x4a, 0x46, 0x39, 0x98, 0x76, 0x40, 0xd6, 0x61, 0x10, 0x6d, 0x6e, 0xa6, 0x92, 0x40, 0x7e, 0x9b, 0xc3, 0xb8, 0xfc, 0x9f, 0x91, 0x40, 0x81, 0x90, 0x37, 0xfc, 0x96, 0xb2, 0x65, 0x40, 0x6d, 0x02, 0x27, 0xe9, 0x16, 0xd3, 0x77, 0xbe, 0x42, 0x1e, 0x5e, 0x49, 0x62, 0xff, 0xb1, 0xbf, 0x43, 0xa8, 0x24, 0x8a, 0x39, 0x36, 0xf7, 0xbf, 0xf3, 0xa7, 0xaf, 0xed, 0xf3, 0x8a, 0x1e, 0xc0, 0x03, 0x63, 0x24, 0xc5, 0xe6, 0x62, 0x26, 0xc0, 0x0f, 0xe7, 0x8f, 0xaf, 0x81, 0xde, 0x09, 0xc0, 0x59, 0x59, 0x8b, 0x90, 0x65, 0x38, 0x36, 0x40, 0x8f, 0x87, 0xe8, 0x0e, 0x9e, 0x06, 0x61, 0x40, 0x9b, 0x07, 0xea, 0x42, 0x86, 0xe7, 0x70, 0x40, 0xff, 0xfa, 0xb6, 0x3a, 0x03, 0x3c, 0x63, 0x40, 0x09, 0x18, 0x39, 0x44, 0xb3, 0x50, 0x2d, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2c, 0xfe, 0xff, 0xff, 0xff, 0xbf, 0xb2, 0x3f, 0xd6, 0x34, 0xb3, 0x5b, 0x52, 0x89, 0x27, 0x40, 0x25, 0x18, 0x30, 0x15, 0x63, 0x6d, 0x81, 0x40, 0x6d, 0xf4, 0x18, 0x3e, 0x99, 0x4d, 0xc1, 0x40, 0x66, 0x15, 0x90, 0x0e, 0xd4, 0x12, 0xe2, 0x40, 0xbc, 0x39, 0x5b, 0x36, 0xd5, 0x78, 0x64, 0x40, 0x63, 0x05, 0x6b, 0x4e, 0x58, 0xa2, 0xbf, 0x40, 0x3f, 0x8c, 0xd3, 0x54, 0x52, 0x66, 0x01, 0x41, 0x43, 0x2b, 0xa5, 0x83, 0xda, 0x83, 0x28, 0x41, 0x3d, 0x0b, 0xde, 0x28, 0x6b, 0xa6, 0x29, 0x41, 0xc5, 0x30, 0x95, 0x2c, 0x6d, 0xfd, 0x14, 0xc1, 0xd9, 0x8c, 0xcc, 0x29, 0x8f, 0x3d, 0xb4, 0x3d, 0x4c, 0xb0, 0x72, 0xd1, 0xff, 0xbf, 0xb2, 0x3f, 0xd3, 0x3d, 0x95, 0xb9, 0xb0, 0x57, 0x17, 0x40, 0xe9, 0x88, 0x87, 0x0a, 0x92, 0xe3, 0x60, 0x40, 0x81, 0xc4, 0xc8, 0x9d, 0xf9, 0x0c, 0x90, 0x40, 0xa6, 0xe3, 0xc6, 0x53, 0xe9, 0x17, 0x9f, 0x40, 0x43, 0x15, 0x5e, 0xfb, 0xb3, 0xb1, 0x54, 0x40, 0xce, 0xc0, 0x21, 0xda, 0xa0, 0x3b, 0xa0, 0x40, 0x6d, 0x1e, 0x59, 0x7b, 0xd2, 0x67, 0xd2, 0x40, 0x72, 0x23, 0xe0, 0x97, 0xe3, 0xb5, 0xeb, 0x40, 0xa0, 0x54, 0x7a, 0x1f, 0x18, 0x91, 0xe1, 0x40, 0x09, 0xc6, 0xdb, 0xbe, 0x57, 0xea, 0xb4, 0xc0, 0x82, 0xcb, 0xde, 0x6a, 0x03, 0xcd, 0x32, 0x3e, 0x42, 0x08, 0x8d, 0x0e, 0xee, 0xbf, 0xb2, 0x3f, 0xf5, 0x9c, 0x14, 0x61, 0xfc, 0xc0, 0x0a, 0x40, 0xdd, 0xae, 0x2d, 0x96, 0x98, 0x4f, 0x45, 0x40, 0x1f, 0xfd, 0x5e, 0xe2, 0xdb, 0x59, 0x65, 0x40, 0xe0, 0x21, 0xfa, 0x81, 0x7c, 0xd7, 0x64, 0x40, 0xa6, 0x43, 0xe3, 0xbf, 0x22, 0x61, 0x48, 0x40, 0xb3, 0x4e, 0x54, 0x86, 0x83, 0x2d, 0x86, 0x40, 0x63, 0xfc, 0x4d, 0xe4, 0x4b, 0xf0, 0xac, 0x40, 0x28, 0x6a, 0xc7, 0xd7, 0x6c, 0x3c, 0xb9, 0x40, 0xc0, 0xb1, 0x4f, 0xd9, 0xaa, 0xa8, 0xa3, 0x40, 0x0f, 0xf4, 0x1c, 0x20, 0xeb, 0xa7, 0x62, 0xc0, 0xdb, 0x6b, 0xf7, 0x54, 0x3b, 0x31, 0x84, 0x3e, 0x34, 0x3e, 0x88, 0x3e, 0xc5, 0xbe, 0xb2, 0x3f, 0x9c, 0x77, 0x27, 0xe7, 0x97, 0xf8, 0xff, 0x3f, 0xe5, 0x6f, 0xf9, 0xaa, 0xbf, 0xfd, 0x2c, 0x40, 0x4a, 0xdc, 0xfb, 0x29, 0x8e, 0xaa, 0x3f, 0x40, 0xb4, 0x4b, 0x81, 0x71, 0xb1, 0x40, 0x30, 0x40, 0xed, 0x7a, 0xc0, 0xf7, 0x96, 0x5d, 0x3e, 0x40, 0x40, 0x4b, 0xd1, 0xe4, 0x91, 0xd5, 0x70, 0x40, 0x22, 0xbf, 0xb3, 0x22, 0x45, 0x66, 0x8a, 0x40, 0x14, 0xc2, 0x5c, 0x9c, 0x7c, 0x97, 0x8b, 0x40, 0x65, 0x13, 0x00, 0x0e, 0x53, 0x95, 0x6a, 0x40, 0x31, 0x29, 0xb3, 0xf8, 0x6a, 0x3e, 0x15, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x90, 0xbd, 0x86, 0x4e, 0x01, 0xc1, 0x14, 0x88, 0x80, 0xc3, 0x76, 0x53, 0x1b, 0xc5, 0x5a, 0x28, 0xa4, 0xc5, 0x98, 0x11, 0xe9, 0x42, 0xeb, 0x9b, 0x6f, 0x45, 0xdb, 0x95, 0x1e, 0x47, 0x7c, 0x08, 0xe4, 0x47, 0xba, 0x0b, 0x3a, 0x47, 0x00, 0x00, 0x00, 0x00, 0x8a, 0xc5, 0x48, 0xad, 0xff, 0xff, 0x8f, 0xbd, 0x88, 0x1b, 0x85, 0xc0, 0x7b, 0x59, 0x87, 0xc2, 0x9b, 0x9d, 0xa5, 0xc3, 0x79, 0x37, 0xad, 0xc3, 0x08, 0x04, 0x73, 0x42, 0x13, 0x68, 0x83, 0x44, 0xc4, 0xd7, 0xba, 0x45, 0xc8, 0x65, 0x16, 0x46, 0xee, 0x60, 0x16, 0x45, 0x00, 0x00, 0x00, 0x00, 0x1b, 0x08, 0x2f, 0xb1, 0xb8, 0xff, 0x8f, 0xbd, 0x95, 0x2d, 0x1a, 0xc0, 0x52, 0xba, 0xaf, 0xc1, 0x12, 0x51, 0x68, 0xc2, 0x65, 0x95, 0xfb, 0xc1, 0x94, 0x6c, 0x0f, 0x42, 0xca, 0xc1, 0xb4, 0x43, 0x73, 0x33, 0x95, 0x44, 0xe6, 0xff, 0x8c, 0x44, 0xb8, 0x94, 0x2d, 0x43, 0x00, 0x00, 0x00, 0x00, 0xb7, 0x98, 0xbe, 0xb3, 0x12, 0xfb, 0x8f, 0xbd, 0xcc, 0xb1, 0xb9, 0xbf, 0x9f, 0x57, 0xf4, 0xc0, 0x36, 0x17, 0x33, 0xc1, 0x0d, 0xf4, 0x4e, 0xc0, 0x2d, 0xc3, 0xb1, 0x41, 0xf0, 0x34, 0x08, 0x43, 0x32, 0x3c, 0x87, 0x43, 0x1a, 0xe0, 0x19, 0x43, 0x9a, 0x85, 0x6a, 0x41, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x96, 0x3d, 0x93, 0x4a, 0x3c, 0x41, 0x19, 0x6b, 0x0b, 0x44, 0xca, 0x6c, 0x0a, 0x46, 0xa0, 0x96, 0x10, 0x47, 0xaa, 0xc6, 0x23, 0x43, 0xc2, 0x12, 0xfd, 0x45, 0x93, 0x32, 0x0b, 0x48, 0xd4, 0x1e, 0x44, 0x49, 0x59, 0x33, 0x4d, 0x49, 0x69, 0xeb, 0xa7, 0xc8, 0x79, 0xec, 0xa1, 0x2d, 0xff, 0xff, 0x95, 0x3d, 0x86, 0xbd, 0xba, 0x40, 0x90, 0x1c, 0x07, 0x43, 0xcd, 0x67, 0x80, 0x44, 0x4b, 0xbf, 0xf8, 0x44, 0xa0, 0x8d, 0xa5, 0x42, 0x07, 0xdd, 0x01, 0x45, 0x94, 0x3e, 0x93, 0x46, 0x1d, 0xaf, 0x5d, 0x47, 0xc1, 0x88, 0x0c, 0x47, 0xbe, 0x52, 0xa7, 0xc5, 0x1b, 0x68, 0x96, 0x31, 0x70, 0xff, 0x95, 0x3d, 0xe3, 0x07, 0x56, 0x40, 0xc5, 0x7c, 0x2a, 0x42, 0xdf, 0xce, 0x2a, 0x43, 0xe4, 0xbb, 0x26, 0x43, 0x16, 0x09, 0x43, 0x42, 0x1c, 0x6c, 0x31, 0x44, 0x5f, 0x82, 0x67, 0x45, 0x67, 0xe3, 0xc9, 0x45, 0x57, 0x45, 0x1d, 0x45, 0x59, 0x3f, 0x15, 0xc3, 0xdb, 0x89, 0x21, 0x34, 0x2a, 0xf6, 0x95, 0x3d, 0xbf, 0xc4, 0xff, 0x3f, 0xfd, 0xed, 0x67, 0x41, 0x71, 0x54, 0xfd, 0x41, 0x8c, 0x05, 0x82, 0x41, 0xb8, 0xec, 0xf2, 0x41, 0x8f, 0xac, 0x86, 0x43, 0x29, 0x32, 0x53, 0x44, 0xe5, 0xbb, 0x5c, 0x44, 0x98, 0xaa, 0x54, 0x43, 0x58, 0xf3, 0xa9, 0xc0, 0x8a, 0xbc, 0x3c, 0x14, 0x66, 0x18, 0xc9, 0xbf, 0xd1, 0x2c, 0x29, 0x76, 0xc7, 0xd3, 0xa9, 0x3f, 0x0f, 0xf5, 0x44, 0x48, 0xe5, 0x55, 0x5f, 0xbf, 0x8e, 0xb8, 0xa6, 0x8f, 0x03, 0xab, 0xf8, 0x3e, 0xb8, 0x05, 0x91, 0x56, 0x00, 0xac, 0x78, 0xbe, 0xf0, 0xa9, 0x4d, 0x3f, 0x0d, 0x65, 0x94, 0x3f, 0x64, 0x77, 0x25, 0x6c, 0x89, 0x8c, 0x2a, 0x3f, 0xa6, 0x8c, 0x4e, 0x89, 0x5a, 0xc0, 0xb6, 0x3e, 0x86, 0x9a, 0xa6, 0x5b, 0x1d, 0xbf, 0x3a, 0x3e, 0x2a, 0x77, 0xca, 0xda, 0x39, 0x50, 0xb2, 0x3d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xce, 0xfc, 0xff, 0xff, 0xff, 0xff, 0xbd, 0x3f, 0xce, 0x7f, 0x7f, 0x35, 0x9d, 0x7a, 0x2a, 0x40, 0x90, 0xa5, 0x2e, 0x65, 0xd4, 0xc0, 0x79, 0x40, 0xcc, 0x32, 0xa5, 0xa3, 0x7d, 0x45, 0xae, 0x40, 0xdd, 0x82, 0x27, 0xc3, 0x7a, 0xea, 0xbe, 0x40, 0xac, 0x6c, 0x65, 0x8e, 0x45, 0x8d, 0x5c, 0x40, 0x4f, 0x27, 0x4d, 0x96, 0xdc, 0x85, 0xac, 0x40, 0x7f, 0xbb, 0xc5, 0x97, 0x86, 0x0b, 0xe2, 0x40, 0xbb, 0x17, 0x8f, 0xb2, 0x2c, 0xd4, 0xf7, 0x40, 0x2d, 0x0b, 0x7a, 0x69, 0x11, 0x15, 0xde, 0x40, 0x7d, 0xca, 0xe1, 0xda, 0x67, 0x06, 0xad, 0x3d, 0x43, 0x00, 0xc1, 0xe2, 0xff, 0xff, 0xbd, 0x3f, 0xe3, 0x15, 0x63, 0x6e, 0x04, 0x36, 0x1b, 0x40, 0xed, 0x02, 0x26, 0x45, 0xb9, 0x13, 0x5b, 0x40, 0x49, 0xd6, 0x52, 0xd0, 0x16, 0x2d, 0x80, 0x40, 0xb7, 0x0c, 0x7e, 0xbb, 0xb8, 0x85, 0x80, 0x40, 0x3d, 0x63, 0xaf, 0xa8, 0xea, 0xa3, 0x4d, 0x40, 0x01, 0x67, 0x06, 0x1b, 0x36, 0xfb, 0x8e, 0x40, 0xfb, 0xb6, 0x06, 0x57, 0x44, 0xe9, 0xb4, 0x40, 0x15, 0xbb, 0xa5, 0xb8, 0xb0, 0xa4, 0xbe, 0x40, 0x51, 0x5e, 0x6f, 0x03, 0x30, 0x80, 0x97, 0x40, 0xdd, 0x9e, 0xad, 0xa7, 0x21, 0xfc, 0x29, 0x3e, 0x7b, 0xd1, 0x21, 0x5b, 0xf5, 0xff, 0xbd, 0x3f, 0x8a, 0xad, 0x5e, 0xe8, 0xbc, 0x76, 0x0f, 0x40, 0x29, 0xd1, 0xa6, 0x9d, 0x48, 0x8f, 0x41, 0x40, 0x37, 0x18, 0x2c, 0x4d, 0x85, 0xc3, 0x56, 0x40, 0xe5, 0x3e, 0xa8, 0x8e, 0x8f, 0x47, 0x48, 0x40, 0x9c, 0x06, 0x34, 0xa1, 0x49, 0x65, 0x41, 0x40, 0x5f, 0xa7, 0xf1, 0x07, 0x33, 0x0c, 0x75, 0x40, 0x23, 0xd5, 0x37, 0x50, 0x7c, 0x5b, 0x90, 0x40, 0xe9, 0x31, 0x2e, 0xa3, 0x7d, 0xd6, 0x8b, 0x40, 0x53, 0xed, 0x2e, 0x7c, 0x6d, 0xf2, 0x59, 0x40, 0xf4, 0x44, 0x55, 0xf6, 0xd4, 0xe9, 0x7c, 0x3e, 0x83, 0x0d, 0x76, 0xbe, 0x42, 0xff, 0xbd, 0x3f, 0xc0, 0xae, 0x8f, 0xf9, 0xb7, 0xf2, 0x02, 0x40, 0x64, 0xa9, 0x71, 0x7f, 0x37, 0x7c, 0x28, 0x40, 0xe2, 0x8e, 0x7f, 0x17, 0xa8, 0xb1, 0x31, 0x40, 0xfe, 0xc1, 0x74, 0xa5, 0x49, 0x4b, 0x14, 0x40, 0xdc, 0xec, 0xd5, 0x8a, 0xbd, 0x6f, 0x35, 0x40, 0xd5, 0x2c, 0xf9, 0x14, 0x93, 0x52, 0x5f, 0x40, 0xd9, 0xdb, 0xa2, 0xd5, 0xd8, 0x08, 0x6d, 0x40, 0xa9, 0x84, 0x18, 0xda, 0x7a, 0x6b, 0x5d, 0x40, 0x92, 0x51, 0x4e, 0xf4, 0xb1, 0xba, 0x20, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf3, 0xfd, 0xff, 0xff, 0xff, 0x3f, 0xba, 0xbf, 0xf7, 0x79, 0x67, 0xa2, 0x91, 0x45, 0x30, 0xc0, 0x76, 0xb5, 0xe4, 0x53, 0xd0, 0xbc, 0x87, 0xc0, 0x15, 0x74, 0xf8, 0x40, 0xe7, 0x24, 0xc7, 0xc0, 0x6a, 0x9c, 0xd0, 0x65, 0xd0, 0xa6, 0xe7, 0xc0, 0xe5, 0xcd, 0x5b, 0xde, 0xa6, 0x2c, 0x64, 0x40, 0x19, 0x84, 0xd8, 0xd0, 0x62, 0x91, 0xbe, 0x40, 0x98, 0x5e, 0xb7, 0xb0, 0x9a, 0x57, 0x00, 0x41, 0x19, 0x9c, 0x86, 0x72, 0x53, 0xf6, 0x25, 0x41, 0x5c, 0xad, 0x19, 0x77, 0xd2, 0x57, 0x24, 0x41, 0x18, 0xaa, 0xa5, 0x0e, 0x69, 0xf9, 0x11, 0xc1, 0x98, 0xa0, 0xa1, 0x1a, 0x43, 0xfa, 0xb6, 0xbd, 0xef, 0x7f, 0x59, 0xcb, 0xff, 0x3f, 0xba, 0xbf, 0x4b, 0xad, 0x03, 0xca, 0xe6, 0x1c, 0x20, 0xc0, 0xb0, 0xb9, 0xa7, 0x6c, 0x6d, 0xf5, 0x66, 0xc0, 0x4f, 0x73, 0x31, 0x69, 0xc6, 0x74, 0x95, 0xc0, 0x9d, 0xa7, 0xfd, 0x88, 0xe3, 0x68, 0xa4, 0xc0, 0xb2, 0x11, 0x5a, 0xff, 0xb2, 0x51, 0x54, 0x40, 0x39, 0xf8, 0x7b, 0xe7, 0x31, 0x1f, 0x9f, 0x40, 0x29, 0xce, 0x64, 0x0d, 0x1f, 0x0f, 0xd1, 0x40, 0x97, 0xd1, 0xba, 0xaa, 0x6d, 0x57, 0xe8, 0x40, 0x4b, 0x36, 0x7c, 0xcf, 0x04, 0x4b, 0xdb, 0x40, 0x04, 0xa0, 0xff, 0xfc, 0x2e, 0x6f, 0xb2, 0xc0, 0x4f, 0xc8, 0x8f, 0xd3, 0xa9, 0xcf, 0x35, 0xbe, 0x54, 0xed, 0xae, 0x51, 0xeb, 0x3f, 0xba, 0xbf, 0xff, 0xd9, 0x02, 0x33, 0xc2, 0x70, 0x12, 0xc0, 0xda, 0x16, 0x5d, 0xc2, 0x71, 0xec, 0x4c, 0xc0, 0x5f, 0xd5, 0x18, 0x47, 0xd3, 0x87, 0x6c, 0xc0, 0xf6, 0x1b, 0x5c, 0x5f, 0xb9, 0x66, 0x6b, 0xc0, 0xe4, 0x67, 0xd3, 0xcc, 0x23, 0xd5, 0x47, 0x40, 0x3e, 0xee, 0x31, 0xc0, 0xeb, 0x0e, 0x85, 0x40, 0x9a, 0x7c, 0x8e, 0x44, 0x4e, 0x68, 0xaa, 0x40, 0xa6, 0x54, 0x1d, 0xa6, 0xba, 0xab, 0xb5, 0x40, 0x4b, 0xdf, 0xd4, 0x0d, 0x7a, 0xbc, 0x9d, 0x40, 0x1f, 0x31, 0x0a, 0x29, 0x70, 0xe6, 0x60, 0xc0, 0xd2, 0x26, 0xc6, 0x44, 0x26, 0xf1, 0x87, 0xbe, 0x10, 0xb0, 0x48, 0x91, 0x8e, 0x3e, 0xba, 0xbf, 0xda, 0x4e, 0xbb, 0x69, 0x84, 0x04, 0x06, 0xc0, 0x7f, 0x90, 0x68, 0xc1, 0xe2, 0xa9, 0x33, 0xc0, 0xaa, 0x4a, 0x10, 0xde, 0xa3, 0x29, 0x45, 0xc0, 0x52, 0x6e, 0xcf, 0x39, 0x36, 0x5f, 0x35, 0xc0, 0xff, 0x64, 0xae, 0x78, 0x8a, 0x88, 0x3d, 0x40, 0xba, 0x1c, 0x82, 0xdb, 0x68, 0x9f, 0x6f, 0x40, 0xf7, 0xa0, 0x49, 0xce, 0x05, 0xac, 0x87, 0x40, 0x29, 0xc0, 0xd4, 0x48, 0x25, 0x1b, 0x87, 0x40, 0xd4, 0xd8, 0x3e, 0x3c, 0x5e, 0x7e, 0x63, 0x40, 0x6b, 0xe8, 0x1b, 0xe7, 0x86, 0xd6, 0x13, 0xc0, 0x31, 0xc3, 0x48, 0xbe, 0x3c, 0x9e, 0x4e, 0x3d, 0x2a, 0xaf, 0xfa, 0xba, 0x1c, 0x58, 0xc5, 0x37, 0x03, 0x60, 0xc5, 0xb3, 0x00, 0x00, 0x00, 0x00, 0x6a, 0x28, 0xa3, 0x3c, 0x4b, 0x64, 0x54, 0x39, 0xd4, 0x02, 0xb6, 0x35, 0xeb, 0xf8, 0xd5, 0x31, 0xcf, 0x81, 0x92, 0x2d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x3d, 0xea, 0xd4, 0x53, 0x41, 0xa3, 0x06, 0xce, 0x43, 0xed, 0x2b, 0x72, 0x45, 0xd6, 0x53, 0xf7, 0x45, 0x2c, 0x6a, 0xe4, 0x42, 0xe5, 0x2e, 0x64, 0x45, 0x35, 0x5c, 0x10, 0x47, 0x66, 0xa1, 0xbe, 0x47, 0x8b, 0xa8, 0xf0, 0x46, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x33, 0x68, 0x2d, 0xff, 0xff, 0xef, 0x3d, 0x23, 0xb0, 0xd9, 0x40, 0xca, 0x9d, 0xd8, 0x42, 0xb7, 0x68, 0x01, 0x44, 0xc6, 0x2d, 0x04, 0x44, 0x55, 0x1f, 0x6d, 0x42, 0xb1, 0xd9, 0x77, 0x44, 0x23, 0x4a, 0xa7, 0x45, 0x86, 0x25, 0xf5, 0x45, 0x80, 0x01, 0xbc, 0x44, 0x00, 0x00, 0x00, 0x00, 0x0d, 0xe1, 0x4f, 0x31, 0xab, 0xff, 0xef, 0x3d, 0xe7, 0xb5, 0x7b, 0x40, 0x45, 0x7a, 0x0c, 0x42, 0x2a, 0x1c, 0xb6, 0x42, 0x7c, 0x3c, 0x42, 0x42, 0x4d, 0x2a, 0x0b, 0x42, 0x98, 0x61, 0xa8, 0x43, 0xe3, 0xdb, 0x82, 0x44, 0xed, 0xb3, 0x5e, 0x44, 0x6c, 0x93, 0xcf, 0x42, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x4e, 0xe7, 0x33, 0x16, 0xfa, 0xef, 0x3d, 0xc0, 0x95, 0x17, 0x40, 0xbc, 0xe1, 0x43, 0x41, 0x41, 0x8d, 0x8d, 0x41, 0x4d, 0x5a, 0xa2, 0x40, 0xec, 0x7d, 0xab, 0x41, 0x99, 0x94, 0xfa, 0x42, 0xc7, 0x46, 0x68, 0x43, 0xd7, 0x5b, 0xeb, 0x42, 0x90, 0xd5, 0x05, 0x41, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd2, 0xbd, 0x8d, 0x2c, 0x82, 0xc1, 0x83, 0xe6, 0x3d, 0xc4, 0x3a, 0x27, 0x39, 0xc6, 0x83, 0x36, 0x3d, 0xc7, 0x37, 0x65, 0x21, 0x43, 0x17, 0x8b, 0xf4, 0x45, 0xd6, 0xbc, 0x02, 0x48, 0x9c, 0xb2, 0x2f, 0x49, 0x94, 0xbe, 0x22, 0x49, 0x48, 0xcb, 0x8f, 0xc8, 0x19, 0xd2, 0xb7, 0xad, 0xfe, 0xff, 0xd1, 0xbd, 0x36, 0xe7, 0x00, 0xc1, 0x6b, 0xab, 0x37, 0xc3, 0x33, 0xa6, 0xab, 0xc4, 0x1c, 0x47, 0x23, 0xc5, 0x98, 0x8d, 0xa2, 0x42, 0x8f, 0xf9, 0xf8, 0x44, 0xf8, 0x78, 0x88, 0x46, 0x6d, 0xbb, 0x42, 0x47, 0x26, 0x58, 0xda, 0x46, 0x78, 0x79, 0x93, 0xc5, 0x4f, 0x7d, 0xae, 0xb1, 0x5b, 0xff, 0xd1, 0xbd, 0x12, 0x86, 0x93, 0xc0, 0x8e, 0x63, 0x67, 0xc2, 0x9a, 0x3e, 0x64, 0xc3, 0xcb, 0x35, 0x5b, 0xc3, 0x1e, 0xa9, 0x3e, 0x42, 0x5e, 0x77, 0x28, 0x44, 0x72, 0x42, 0x53, 0x45, 0xd5, 0x5d, 0xad, 0x45, 0xd0, 0xe3, 0xed, 0x44, 0x81, 0x33, 0x07, 0xc3, 0x32, 0x89, 0x3f, 0xb4, 0x75, 0xf4, 0xd1, 0xbd, 0x23, 0x24, 0x30, 0xc0, 0x16, 0x4f, 0x9d, 0xc1, 0x1f, 0x4d, 0x29, 0xc2, 0xb2, 0xf9, 0xaa, 0xc1, 0x54, 0x44, 0xec, 0x41, 0x47, 0xfb, 0x7c, 0x43, 0x2e, 0x60, 0x3d, 0x44, 0x2a, 0xd9, 0x38, 0x44, 0xf2, 0xf2, 0x1b, 0x43, 0x37, 0xb4, 0x9e, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0xd0, 0xcf, 0x43, 0xeb, 0xfd, 0x4c, 0x3e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x03, 0xb8, 0xe2, 0x3f, 0x00, 0x00, 0x80, 0x3f, 0x00, 0x00, 0xc0, 0x3f, 0x00, 0x00, 0x00, 0x00, 0xdc, 0xcf, 0xd1, 0x35, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x15, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5e, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x86, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0xb0, 0xb3, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0xb0, 0xe3, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x26, 0x16, 0x41, 0x00, 0x00, 0x00, 0x00, 0x80, 0xaf, 0x4b, 0x41, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x08, 0x83, 0x41, 0x00, 0x00, 0x00, 0x00, 0xfc, 0x8c, 0xbc, 0x41, 0x00, 0x00, 0x00, 0xc0, 0x8c, 0x32, 0xf7, 0x41, 0x00, 0x00, 0x00, 0x28, 0x3b, 0x4c, 0x34, 0x42, 0x00, 0x00, 0x80, 0x75, 0x77, 0x07, 0x73, 0x42, 0x00, 0x00, 0x80, 0x75, 0x77, 0x07, 0xb3, 0x42, 0x00, 0x00, 0xd8, 0xec, 0xee, 0x37, 0xf4, 0x42, 0x00, 0x00, 0x73, 0xca, 0xec, 0xbe, 0x36, 0x43, 0x00, 0x90, 0x68, 0x30, 0xb9, 0x02, 0x7b, 0x43, 0x00, 0x5a, 0x41, 0xbe, 0xb3, 0xe1, 0xc0, 0x43, 0x20, 0xc6, 0xb5, 0xe9, 0x3b, 0x28, 0x06, 0x44, 0x6c, 0xf0, 0x59, 0x61, 0x52, 0x77, 0x4e, 0x44, 0x9e, 0xa4, 0xc1, 0x43, 0x51, 0xea, 0x15, 0x42, 0x57, 0x4c, 0xf5, 0x75, 0x70, 0xfc, 0x23, 0x42, 0x1a, 0xb6, 0x8a, 0x81, 0x32, 0xa1, 0x20, 0x42, 0x1a, 0x26, 0xe8, 0x22, 0xb5, 0xb0, 0x10, 0x42, 0xe8, 0xa1, 0xa5, 0xb3, 0xc1, 0x7f, 0xf6, 0x41, 0x3f, 0xf3, 0xd3, 0xf5, 0x18, 0x74, 0xd5, 0x41, 0x2a, 0x5f, 0xb9, 0x7b, 0x0c, 0xab, 0xad, 0x41, 0x98, 0xcc, 0x5d, 0xf9, 0x76, 0xf8, 0x7d, 0x41, 0x4c, 0xf4, 0x80, 0x50, 0xe9, 0xf1, 0x45, 0x41, 0xeb, 0x87, 0x87, 0x1f, 0x42, 0xb6, 0x06, 0x41, 0x04, 0xd8, 0x58, 0x08, 0xac, 0x87, 0xbf, 0x40, 0x52, 0x3b, 0xbc, 0x7b, 0x60, 0x5a, 0x6a, 0x40, 0x05, 0x27, 0xf6, 0x1f, 0x93, 0x0d, 0x04, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x08, 0x83, 0x41, 0x00, 0x00, 0x00, 0x80, 0x69, 0xbd, 0x9c, 0x41, 0x00, 0x00, 0x00, 0xb0, 0xa6, 0xfd, 0xa1, 0x41, 0x00, 0x00, 0x00, 0x70, 0x71, 0x18, 0x99, 0x41, 0x00, 0x00, 0x00, 0x90, 0xb6, 0xee, 0x85, 0x41, 0x00, 0x00, 0x00, 0xe0, 0x71, 0x71, 0x69, 0x41, 0x00, 0x00, 0x00, 0x00, 0x7b, 0x1f, 0x44, 0x41, 0x00, 0x00, 0x00, 0x00, 0xbc, 0xd0, 0x15, 0x41, 0x00, 0x00, 0x00, 0x00, 0x80, 0xe7, 0xdf, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 0x9e, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x50, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x3f, 0x2e, 0x2f, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4a, 0x4b, 0x4c, 0x4d, 0x4e, 0x4f, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5a, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6a, 0x6b, 0x6c, 0x6d, 0x6e, 0x6f, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x2f, 0x64, 0x65, 0x76, 0x2f, 0x6c, 0x6f, 0x67, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x67, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x64, 0x00, 0x6d, 0x73, 0x79, 0x6e, 0x63, 0x00, 0x00, 0x00, 0x73, 0x74, 0x61, 0x72, 0x74, 0x00, 0x00, 0x00, 0x6d, 0x71, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x64, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x00, 0x6d, 0x71, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x64, 0x73, 0x65, 0x6e, 0x64, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0xc0, 0x03, 0x00, 0x00, 0xc0, 0x04, 0x00, 0x00, 0xc0, 0x05, 0x00, 0x00, 0xc0, 0x06, 0x00, 0x00, 0xc0, 0x07, 0x00, 0x00, 0xc0, 0x08, 0x00, 0x00, 0xc0, 0x09, 0x00, 0x00, 0xc0, 0x0a, 0x00, 0x00, 0xc0, 0x0b, 0x00, 0x00, 0xc0, 0x0c, 0x00, 0x00, 0xc0, 0x0d, 0x00, 0x00, 0xc0, 0x0e, 0x00, 0x00, 0xc0, 0x0f, 0x00, 0x00, 0xc0, 0x10, 0x00, 0x00, 0xc0, 0x11, 0x00, 0x00, 0xc0, 0x12, 0x00, 0x00, 0xc0, 0x13, 0x00, 0x00, 0xc0, 0x14, 0x00, 0x00, 0xc0, 0x15, 0x00, 0x00, 0xc0, 0x16, 0x00, 0x00, 0xc0, 0x17, 0x00, 0x00, 0xc0, 0x18, 0x00, 0x00, 0xc0, 0x19, 0x00, 0x00, 0xc0, 0x1a, 0x00, 0x00, 0xc0, 0x1b, 0x00, 0x00, 0xc0, 0x1c, 0x00, 0x00, 0xc0, 0x1d, 0x00, 0x00, 0xc0, 0x1e, 0x00, 0x00, 0xc0, 0x1f, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x00, 0xb3, 0x01, 0x00, 0x00, 0xc3, 0x02, 0x00, 0x00, 0xc3, 0x03, 0x00, 0x00, 0xc3, 0x04, 0x00, 0x00, 0xc3, 0x05, 0x00, 0x00, 0xc3, 0x06, 0x00, 0x00, 0xc3, 0x07, 0x00, 0x00, 0xc3, 0x08, 0x00, 0x00, 0xc3, 0x09, 0x00, 0x00, 0xc3, 0x0a, 0x00, 0x00, 0xc3, 0x0b, 0x00, 0x00, 0xc3, 0x0c, 0x00, 0x00, 0xc3, 0x0d, 0x00, 0x00, 0xd3, 0x0e, 0x00, 0x00, 0xc3, 0x0f, 0x00, 0x00, 0xc3, 0x00, 0x00, 0x0c, 0xbb, 0x01, 0x00, 0x0c, 0xc3, 0x02, 0x00, 0x0c, 0xc3, 0x03, 0x00, 0x0c, 0xc3, 0x04, 0x00, 0x0c, 0xdb, 0x00, 0x00, 0x00, 0x00, 0x77, 0x63, 0x73, 0x74, 0x6f, 0x6d, 0x62, 0x73, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x00, 0x00, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x34, 0x00, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x00, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x20, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x00, 0x4e, 0x61, 0x6d, 0x65, 0x20, 0x64, 0x6f, 0x65, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x00, 0x54, 0x72, 0x79, 0x20, 0x61, 0x67, 0x61, 0x69, 0x6e, 0x00, 0x4e, 0x6f, 0x6e, 0x2d, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x00, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x20, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x00, 0x55, 0x6e, 0x72, 0x65, 0x63, 0x6f, 0x67, 0x6e, 0x69, 0x7a, 0x65, 0x64, 0x20, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x20, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x20, 0x6f, 0x72, 0x20, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x20, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x00, 0x55, 0x6e, 0x72, 0x65, 0x63, 0x6f, 0x67, 0x6e, 0x69, 0x7a, 0x65, 0x64, 0x20, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x20, 0x74, 0x79, 0x70, 0x65, 0x00, 0x55, 0x6e, 0x72, 0x65, 0x63, 0x6f, 0x67, 0x6e, 0x69, 0x7a, 0x65, 0x64, 0x20, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x00, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x20, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x00, 0x4f, 0x75, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x00, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x20, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x00, 0x4f, 0x76, 0x65, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x00, 0x00, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x20, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x00, 0x00, 0x67, 0x65, 0x74, 0x61, 0x64, 0x64, 0x72, 0x69, 0x6e, 0x66, 0x6f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x67, 0x65, 0x74, 0x68, 0x6f, 0x73, 0x74, 0x62, 0x79, 0x61, 0x64, 0x64, 0x72, 0x5f, 0x72, 0x00, 0x67, 0x65, 0x74, 0x68, 0x6f, 0x73, 0x74, 0x62, 0x79, 0x6e, 0x61, 0x6d, 0x65, 0x32, 0x5f, 0x72, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x72, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x73, 0x00, 0x00, 0x00, 0x67, 0x65, 0x74, 0x73, 0x65, 0x72, 0x76, 0x62, 0x79, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x72, 0x00, 0x48, 0x6f, 0x73, 0x74, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x00, 0x54, 0x72, 0x79, 0x20, 0x61, 0x67, 0x61, 0x69, 0x6e, 0x00, 0x4e, 0x6f, 0x6e, 0x2d, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x00, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x00, 0x00, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x20, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x00, 0x00, 0x00, 0x00, 0x00, 0x69, 0x66, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x80, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x78, 0x00, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x0a, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x67, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x65, 0x6e, 0x74, 0x00, 0x00, 0x00, 0x00, 0x00, 0x72, 0x65, 0x63, 0x76, 0x66, 0x72, 0x6f, 0x6d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x72, 0x65, 0x63, 0x76, 0x6d, 0x6d, 0x73, 0x67, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x72, 0x65, 0x63, 0x76, 0x6d, 0x73, 0x67, 0x00, 0x5f, 0x5f, 0x72, 0x65, 0x73, 0x5f, 0x6d, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x72, 0x63, 0x00, 0x00, 0x5f, 0x5f, 0x67, 0x65, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x73, 0x65, 0x6e, 0x64, 0x6d, 0x73, 0x67, 0x00, 0x73, 0x65, 0x6e, 0x64, 0x74, 0x6f, 0x00, 0x00, 0x5f, 0x5f, 0x67, 0x65, 0x74, 0x70, 0x77, 0x5f, 0x61, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5f, 0x5f, 0x6e, 0x73, 0x63, 0x64, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x6d, 0xe6, 0xec, 0xde, 0x05, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2d, 0xf4, 0x51, 0x58, 0xcf, 0x8c, 0xb1, 0xc0, 0x46, 0xf6, 0xb5, 0xcb, 0x29, 0x31, 0x03, 0xc7, 0x04, 0x5b, 0x70, 0x30, 0xb4, 0x5d, 0xfd, 0x20, 0x78, 0x7f, 0x8b, 0x9a, 0xd8, 0x59, 0x29, 0x50, 0x68, 0x48, 0x89, 0xab, 0xa7, 0x56, 0x03, 0x6c, 0xff, 0xb7, 0xcd, 0x88, 0x3f, 0xd4, 0x77, 0xb4, 0x2b, 0xa5, 0xa3, 0x70, 0xf1, 0xba, 0xe4, 0xa8, 0xfc, 0x41, 0x83, 0xfd, 0xd9, 0x6f, 0xe1, 0x8a, 0x7a, 0x2f, 0x2d, 0x74, 0x96, 0x07, 0x1f, 0x0d, 0x09, 0x5e, 0x03, 0x76, 0x2c, 0x70, 0xf7, 0x40, 0xa5, 0x2c, 0xa7, 0x6f, 0x57, 0x41, 0xa8, 0xaa, 0x74, 0xdf, 0xa0, 0x58, 0x64, 0x03, 0x4a, 0xc7, 0xc4, 0x3c, 0x53, 0xae, 0xaf, 0x5f, 0x18, 0x04, 0x15, 0xb1, 0xe3, 0x6d, 0x28, 0x86, 0xab, 0x0c, 0xa4, 0xbf, 0x43, 0xf0, 0xe9, 0x50, 0x81, 0x39, 0x57, 0x16, 0x52, 0x37, 0x73, 0x72, 0x61, 0x6e, 0x64, 0x34, 0x38, 0x00, 0x65, 0x78, 0x65, 0x63, 0x6c, 0x00, 0x00, 0x00, 0x65, 0x78, 0x65, 0x63, 0x6c, 0x65, 0x00, 0x00, 0x65, 0x78, 0x65, 0x63, 0x6c, 0x70, 0x00, 0x00, 0x5f, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x76, 0x70, 0x65, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x77, 0x61, 0x69, 0x74, 0x69, 0x64, 0x00, 0x00, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x6e, 0x5f, 0x64, 0x69, 0x72, 0x00, 0x00, 0x00, 0x00, 0x4e, 0x6f, 0x20, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x00, 0x4e, 0x6f, 0x20, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x00, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x20, 0x72, 0x65, 0x67, 0x65, 0x78, 0x70, 0x00, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x20, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x20, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x00, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x20, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x20, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x00, 0x54, 0x72, 0x61, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x20, 0x62, 0x61, 0x63, 0x6b, 0x73, 0x6c, 0x61, 0x73, 0x68, 0x00, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x20, 0x62, 0x61, 0x63, 0x6b, 0x20, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x00, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x20, 0x27, 0x5d, 0x27, 0x00, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x20, 0x27, 0x29, 0x27, 0x00, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x20, 0x27, 0x7d, 0x27, 0x00, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x7b, 0x7d, 0x00, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x20, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x20, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x00, 0x4f, 0x75, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x00, 0x52, 0x65, 0x70, 0x65, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x70, 0x72, 0x65, 0x63, 0x65, 0x64, 0x65, 0x64, 0x20, 0x62, 0x79, 0x20, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x20, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x00, 0x00, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x20, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x00, 0x00, 0x00, 0x6c, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x00, 0x6c, 0x66, 0x69, 0x6e, 0x64, 0x00, 0x00, 0x00, 0x70, 0x6f, 0x6c, 0x6c, 0x00, 0x00, 0x00, 0x00, 0x70, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0xfc, 0xff, 0xff, 0xff, 0x61, 0x5f, 0x6f, 0x72, 0x00, 0x00, 0x00, 0x00, 0x73, 0x69, 0x67, 0x6c, 0x6f, 0x6e, 0x67, 0x6a, 0x6d, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x73, 0x69, 0x67, 0x73, 0x75, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x73, 0x69, 0x67, 0x74, 0x69, 0x6d, 0x65, 0x64, 0x77, 0x61, 0x69, 0x74, 0x00, 0x00, 0x00, 0x00, 0x66, 0x67, 0x65, 0x74, 0x6c, 0x6e, 0x00, 0x00, 0x6d, 0x73, 0x65, 0x65, 0x6b, 0x00, 0x00, 0x00, 0x61, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x00, 0x66, 0x77, 0x69, 0x64, 0x65, 0x00, 0x00, 0x00, 0x6d, 0x73, 0x5f, 0x73, 0x65, 0x65, 0x6b, 0x00, 0x77, 0x6d, 0x73, 0x5f, 0x73, 0x65, 0x65, 0x6b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x70, 0x6f, 0x70, 0x65, 0x6e, 0x00, 0x00, 0x00, 0x75, 0x6e, 0x67, 0x65, 0x74, 0x77, 0x63, 0x00, 0x19, 0x00, 0x0a, 0x00, 0x19, 0x19, 0x19, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x19, 0x00, 0x11, 0x0a, 0x19, 0x19, 0x19, 0x03, 0x0a, 0x07, 0x00, 0x01, 0x1b, 0x09, 0x0b, 0x18, 0x00, 0x00, 0x09, 0x06, 0x0b, 0x00, 0x00, 0x0b, 0x00, 0x06, 0x19, 0x00, 0x00, 0x00, 0x19, 0x19, 0x19, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x19, 0x00, 0x0a, 0x0d, 0x19, 0x19, 0x19, 0x00, 0x0d, 0x00, 0x00, 0x02, 0x00, 0x09, 0x0e, 0x00, 0x00, 0x00, 0x09, 0x00, 0x0e, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x13, 0x00, 0x00, 0x00, 0x00, 0x13, 0x00, 0x00, 0x00, 0x00, 0x09, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x04, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x09, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x12, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0x00, 0x00, 0x00, 0x00, 0x11, 0x00, 0x00, 0x00, 0x00, 0x09, 0x12, 0x00, 0x00, 0x00, 0x00, 0x00, 0x12, 0x00, 0x00, 0x12, 0x00, 0x00, 0x1a, 0x00, 0x00, 0x00, 0x1a, 0x1a, 0x1a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x00, 0x00, 0x1a, 0x1a, 0x1a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x17, 0x00, 0x00, 0x00, 0x00, 0x17, 0x00, 0x00, 0x00, 0x00, 0x09, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x16, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x15, 0x00, 0x00, 0x00, 0x00, 0x15, 0x00, 0x00, 0x00, 0x00, 0x09, 0x16, 0x00, 0x00, 0x00, 0x00, 0x00, 0x16, 0x00, 0x00, 0x16, 0x00, 0x00, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x76, 0x66, 0x73, 0x63, 0x61, 0x6e, 0x66, 0x00, 0x19, 0x00, 0x0a, 0x00, 0x19, 0x19, 0x19, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x19, 0x00, 0x11, 0x0a, 0x19, 0x19, 0x19, 0x03, 0x0a, 0x07, 0x00, 0x01, 0x1b, 0x09, 0x0b, 0x18, 0x00, 0x00, 0x09, 0x06, 0x0b, 0x00, 0x00, 0x0b, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x0d, 0x00, 0x00, 0x00, 0x00, 0x0d, 0x00, 0x00, 0x02, 0x00, 0x09, 0x0e, 0x00, 0x00, 0x00, 0x09, 0x00, 0x0e, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x13, 0x00, 0x00, 0x00, 0x00, 0x13, 0x00, 0x00, 0x00, 0x00, 0x09, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x04, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x09, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x12, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0x00, 0x00, 0x00, 0x00, 0x11, 0x00, 0x00, 0x00, 0x00, 0x09, 0x12, 0x00, 0x00, 0x00, 0x00, 0x00, 0x12, 0x00, 0x00, 0x12, 0x00, 0x00, 0x1a, 0x00, 0x00, 0x00, 0x1a, 0x1a, 0x1a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x00, 0x00, 0x1a, 0x1a, 0x1a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x17, 0x00, 0x00, 0x00, 0x00, 0x17, 0x00, 0x00, 0x00, 0x00, 0x09, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x16, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x15, 0x00, 0x00, 0x00, 0x00, 0x15, 0x00, 0x00, 0x00, 0x00, 0x09, 0x16, 0x00, 0x00, 0x00, 0x00, 0x00, 0x16, 0x00, 0x00, 0x16, 0x00, 0x00, 0x4c, 0x00, 0x00, 0x6a, 0x4c, 0x4c, 0x4c, 0x00, 0x6a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x6a, 0x6a, 0x00, 0x00, 0x00, 0x00, 0x6a, 0x00, 0x00, 0x6a, 0x76, 0x66, 0x77, 0x73, 0x63, 0x61, 0x6e, 0x66, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x65, 0x78, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x5f, 0x62, 0x7a, 0x65, 0x72, 0x6f, 0x00, 0x00, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x20, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x00, 0x48, 0x61, 0x6e, 0x67, 0x75, 0x70, 0x00, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x72, 0x75, 0x70, 0x74, 0x00, 0x51, 0x75, 0x69, 0x74, 0x00, 0x49, 0x6c, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x00, 0x54, 0x72, 0x61, 0x63, 0x65, 0x2f, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x20, 0x74, 0x72, 0x61, 0x70, 0x00, 0x41, 0x62, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x00, 0x42, 0x75, 0x73, 0x20, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x00, 0x41, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x65, 0x74, 0x69, 0x63, 0x20, 0x65, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x00, 0x4b, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x00, 0x55, 0x73, 0x65, 0x72, 0x20, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x20, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x20, 0x31, 0x00, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x00, 0x55, 0x73, 0x65, 0x72, 0x20, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x20, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x20, 0x32, 0x00, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x6e, 0x20, 0x70, 0x69, 0x70, 0x65, 0x00, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x20, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x00, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x00, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x20, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x00, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x20, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x20, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x00, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65, 0x64, 0x00, 0x53, 0x74, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x20, 0x28, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x29, 0x00, 0x53, 0x74, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x00, 0x53, 0x74, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x20, 0x28, 0x74, 0x74, 0x79, 0x20, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x29, 0x00, 0x53, 0x74, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x20, 0x28, 0x74, 0x74, 0x79, 0x20, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x29, 0x00, 0x55, 0x72, 0x67, 0x65, 0x6e, 0x74, 0x20, 0x49, 0x2f, 0x4f, 0x20, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x00, 0x43, 0x50, 0x55, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x20, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x20, 0x65, 0x78, 0x63, 0x65, 0x65, 0x64, 0x65, 0x64, 0x00, 0x46, 0x69, 0x6c, 0x65, 0x20, 0x73, 0x69, 0x7a, 0x65, 0x20, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x20, 0x65, 0x78, 0x63, 0x65, 0x65, 0x64, 0x65, 0x64, 0x00, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x20, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x00, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x20, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x00, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x20, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x00, 0x49, 0x2f, 0x4f, 0x20, 0x70, 0x6f, 0x73, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x00, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x20, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x00, 0x42, 0x61, 0x64, 0x20, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x00, 0x52, 0x54, 0x33, 0x32, 0x00, 0x52, 0x54, 0x33, 0x33, 0x00, 0x52, 0x54, 0x33, 0x34, 0x00, 0x52, 0x54, 0x33, 0x35, 0x00, 0x52, 0x54, 0x33, 0x36, 0x00, 0x52, 0x54, 0x33, 0x37, 0x00, 0x52, 0x54, 0x33, 0x38, 0x00, 0x52, 0x54, 0x33, 0x39, 0x00, 0x52, 0x54, 0x34, 0x30, 0x00, 0x52, 0x54, 0x34, 0x31, 0x00, 0x52, 0x54, 0x34, 0x32, 0x00, 0x52, 0x54, 0x34, 0x33, 0x00, 0x52, 0x54, 0x34, 0x34, 0x00, 0x52, 0x54, 0x34, 0x35, 0x00, 0x52, 0x54, 0x34, 0x36, 0x00, 0x52, 0x54, 0x34, 0x37, 0x00, 0x52, 0x54, 0x34, 0x38, 0x00, 0x52, 0x54, 0x34, 0x39, 0x00, 0x52, 0x54, 0x35, 0x30, 0x00, 0x52, 0x54, 0x35, 0x31, 0x00, 0x52, 0x54, 0x35, 0x32, 0x00, 0x52, 0x54, 0x35, 0x33, 0x00, 0x52, 0x54, 0x35, 0x34, 0x00, 0x52, 0x54, 0x35, 0x35, 0x00, 0x52, 0x54, 0x35, 0x36, 0x00, 0x52, 0x54, 0x35, 0x37, 0x00, 0x52, 0x54, 0x35, 0x38, 0x00, 0x52, 0x54, 0x35, 0x39, 0x00, 0x52, 0x54, 0x36, 0x30, 0x00, 0x52, 0x54, 0x36, 0x31, 0x00, 0x52, 0x54, 0x36, 0x32, 0x00, 0x52, 0x54, 0x36, 0x33, 0x00, 0x52, 0x54, 0x36, 0x34, 0x00, 0x00, 0x74, 0x63, 0x64, 0x72, 0x61, 0x69, 0x6e, 0x00, 0x5f, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x64, 0x77, 0x61, 0x69, 0x74, 0x5f, 0x63, 0x70, 0x00, 0x00, 0x5f, 0x5f, 0x74, 0x6c, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x00, 0x00, 0x5f, 0x5f, 0x75, 0x6e, 0x6d, 0x61, 0x70, 0x73, 0x65, 0x6c, 0x66, 0x00, 0x00, 0x00, 0x00, 0x00, 0x61, 0x5f, 0x73, 0x70, 0x69, 0x6e, 0x00, 0x00, 0x61, 0x5f, 0x73, 0x70, 0x69, 0x6e, 0x00, 0x00, 0x6d, 0x74, 0x78, 0x5f, 0x69, 0x6e, 0x69, 0x74, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x61, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x00, 0x61, 0x5f, 0x6f, 0x72, 0x00, 0x00, 0x00, 0x00, 0x70, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x62, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x69, 0x74, 0x00, 0x00, 0x00, 0x00, 0x61, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x00, 0x61, 0x5f, 0x73, 0x70, 0x69, 0x6e, 0x00, 0x00, 0x70, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x00, 0x00, 0x69, 0x6e, 0x69, 0x74, 0x5f, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x61, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x00, 0x61, 0x5f, 0x6f, 0x72, 0x00, 0x00, 0x00, 0x00, 0x61, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x00, 0x00, 0x40, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x73, 0x74, 0x61, 0x72, 0x74, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x61, 0x5f, 0x73, 0x70, 0x69, 0x6e, 0x00, 0x00, 0x61, 0x5f, 0x73, 0x70, 0x69, 0x6e, 0x00, 0x00, 0x61, 0x5f, 0x73, 0x70, 0x69, 0x6e, 0x00, 0x00, 0x70, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x72, 0x77, 0x6c, 0x6f, 0x63, 0x6b, 0x61, 0x74, 0x74, 0x72, 0x5f, 0x69, 0x6e, 0x69, 0x74, 0x00, 0x70, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x73, 0x65, 0x74, 0x61, 0x74, 0x74, 0x72, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x6e, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x70, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x67, 0x65, 0x74, 0x61, 0x74, 0x74, 0x72, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x6e, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x70, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x73, 0x65, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x6e, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x61, 0x5f, 0x73, 0x70, 0x69, 0x6e, 0x00, 0x00, 0x61, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x00, 0x61, 0x5f, 0x73, 0x70, 0x69, 0x6e, 0x00, 0x00, 0x5f, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x63, 0x61, 0x6c, 0x6c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xde, 0x28, 0x00, 0x80, 0xc8, 0x4d, 0x00, 0x00, 0xa7, 0x76, 0x00, 0x00, 0x34, 0x9e, 0x00, 0x80, 0x12, 0xc7, 0x00, 0x80, 0x9f, 0xee, 0x00, 0x00, 0x7e, 0x17, 0x01, 0x80, 0x5c, 0x40, 0x01, 0x80, 0xe9, 0x67, 0x01, 0x00, 0xc8, 0x90, 0x01, 0x00, 0x55, 0xb8, 0x01, 0x1f, 0x1e, 0x1f, 0x1e, 0x1f, 0x1f, 0x1e, 0x1f, 0x1e, 0x1f, 0x1f, 0x1d, 0x00, 0x00, 0x00, 0x00, 0x55, 0x54, 0x43, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2f, 0x75, 0x73, 0x72, 0x2f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x2f, 0x7a, 0x6f, 0x6e, 0x65, 0x69, 0x6e, 0x66, 0x6f, 0x2f, 0x00, 0x2f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x2f, 0x7a, 0x6f, 0x6e, 0x65, 0x69, 0x6e, 0x66, 0x6f, 0x2f, 0x00, 0x2f, 0x65, 0x74, 0x63, 0x2f, 0x7a, 0x6f, 0x6e, 0x65, 0x69, 0x6e, 0x66, 0x6f, 0x2f, 0x00, 0x00, 0x00, 0x00, 0x5f, 0x5f, 0x79, 0x65, 0x61, 0x72, 0x5f, 0x74, 0x6f, 0x5f, 0x73, 0x65, 0x63, 0x73, 0x00, 0x00, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x6e, 0x61, 0x6e, 0x6f, 0x73, 0x6c, 0x65, 0x65, 0x70, 0x00, 0x73, 0x74, 0x72, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x5f, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x00, 0x73, 0x74, 0x61, 0x72, 0x74, 0x00, 0x00, 0x00, 0x61, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x00, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x00, 0x00, 0x00, 0x66, 0x64, 0x61, 0x74, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x70, 0x61, 0x75, 0x73, 0x65, 0x00, 0x00, 0x00, 0x70, 0x72, 0x65, 0x61, 0x64, 0x76, 0x00, 0x00, 0x70, 0x77, 0x72, 0x69, 0x74, 0x65, 0x76, 0x00, 0x72, 0x65, 0x61, 0x64, 0x76, 0x00, 0x00, 0x00, 0x75, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x00, 0x00, 0x77, 0x72, 0x69, 0x74, 0x65, 0x76, 0x00}

var ts = TS("TODO(ccgo)\x00\x00ccgo.c\x00\x00src/aio/aio.c\x00\x00\x00arch/x86_64/atomic_arch.h\x00\x00\x00src/aio/lio_listio.c\x00\x00\x00\x00src/complex/catanf.c\x00\x00\x00\x00\x00\x00\x00\x00/bin:/usr/bin\x00\x00\x00%s\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x008b \xd0\xc1\xd2\xcf\xcc\xd8\x00\x00\x00$2a$00$abcdefghijklmnopqrstuu\x00\x00\x00src/crypt/crypt_blowfish.c\x00\x00\x80\xff\x80\x01 \u007f\x81\x80\x80\r\n\xff\u007f \x81 test\x00\x00\x00\x00_0.../9Zz\x00\x00\x00_0.../9ZzX7iSJNd21sU\x00\x00\x00\x00\x80x\x00\x00\x80x22/wK52ZKGA\x00\x00\x00x\x00\x00\x00*\x00\x00\x00$1$\x00src/crypt/crypt_md5.c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00$5$\x00rounds=\x00rounds=%u$\x00\x00$5$%s%.*s$\x00\x00src/crypt/crypt_sha256.c\x00\x00\x00\x00$6$\x00$6$%s%.*s$\x00\x00src/crypt/crypt_sha512.c\x00\x00\x00\x00toupper\x00tolower\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00src/env/__libc_start_main.c\x00src/env/unsetenv.c\x00\x00Assertion failed: %s (%s: %s: %d)\n\x00\x00src/fcntl/openat.c\x00\x00infinity\x00\x00\x00\x00nan\x00\x00\x01\x02\x04\a\x03\x06\x05\x00\x00\x00\x00/proc/self/fd/\x00\x00src/ipc/msgrcv.c\x00\x00\x00\x00src/ipc/msgsnd.c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00src/ipc/semctl.c\x00\x00\x00\x00Symbol not found: %s\x00\x00\x00\x00/proc/self/exe\x00\x00src/ldso/dlclose.c\x00\x00Dynamic linker failed to allocate memory for error message\x00\x00Invalid library handle %p\x00\x00\x00src/ldso/dlinfo.c\x00\x00\x00Unsupported request %d\x00\x00Dynamic loading not supported\x00\x00\x00/\x00\x00\x00/dev/null\x00\x00\x00%s: \x00\x00\x00\x00: \x00\x00src/legacy/ftw.c\x00\x00\x00\x00/dev/tty\x00\x00\x00\x00\n\x00\x00\x00/etc/shells\x00rbe\x00rb\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00src/linux/getrandom.c\x00\x00\x00src/linux/ppoll.c\x00\x00\x00UTF-8\x00\x00\x00C.UTF-8\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00src/locale/dcngettext.c\x00messages\x00\x00\x00\x00src/locale/iconv.c\x00\x00ASCII\x00\x00\x00C\x00\x00\x00LC_ALL\x00\x00LANG\x00\x00\x00\x00C.UTF-8\x00POSIX\x00\x00\x00MUSL_LOCPATH\x00\x00\x00\x00.\x00\x00\x00src/locale/newlocale.c\x00\x00%*.*f\x00\x00\x00MSGVERB\x00label\x00\x00\x00severity\x00\x00\x00\x00text\x00\x00\x00\x00action\x00\x00tag\x00HALT: \x00\x00ERROR: \x00WARNING: \x00\x00\x00INFO: \x00\x00/dev/console\x00\x00\x00\x00%s%s%s%s%s%s%s%s\n\x00\x00\x00\nTO FIX: \x00\x00\x00 \x00\x00\x00PWD\x00: unrecognized option: \x00: option requires an argument: \x00: option does not take an argument: \x00\x00\x00\x00: option is ambiguous: \x00%*[^\n]%*[\n]\x00 %n%*s%n %n%*s%n %n%*s%n %n%*s%n %d %d\x00\x00%s\t%s\t%s\t%s\t%d\t%d\n\x00\x00/dev/ptmx\x00\x00\x00/dev/pts/%d\x00%b %e %T\x00\x00\x00\x00<%d>%s %n%s%s%.0d%s: \x00\x00\x00[\x00\x00\x00]\x00\x00\x00%.*s\x00\x00\x00\x002>/dev/null\x00/bin/sh\x00sh\x00\x00-c\x00\x00eval \"printf %s\\\\\\\\0 x $1 $2\"\x00\x00\x00r\x00\x00\x00src/misc/wordexp.c\x00\x00src/mman/msync.c\x00\x00\x00\x00/dev/shm/\x00\x00\x00src/mq/mq_notify.c\x00\x00src/mq/mq_timedreceive.c\x00\x00\x00\x00src/mq/mq_timedsend.c\x00\x00\x00src/multibyte/wcstombs.c\x00\x00\x00\x00src/network/accept.c\x00\x00\x00\x00src/network/accept4.c\x00\x00\x00src/network/connect.c\x00\x00\x00%.2X\x00\x00\x00\x00:%.2X\x00\x00\x00src/network/getaddrinfo.c\x00\x00\x00src/network/gethostbyaddr_r.c\x00\x00\x00src/network/gethostbyname2_r.c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\x00\x00\x00\x00%d.%d.%d.%d.in-addr.arpa\x00\x00\x00\x00ip6.arpa\x00\x00\x00\x00/etc/hosts\x00\x00src/network/getnameinfo.c\x00\x00\x00/etc/services\x00\x00\x00/udp\x00\x00\x00\x00/tcp\x00\x00\x00\x00tcp\x00udp\x00src/network/getservbyname_r.c\x00\x00\x00%s%s%s\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00src/network/if_nameindex.c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00%d.%d.%d.%d\x00%x:%x:%x:%x:%x:%x:%x:%x\x00%x:%x:%x:%x:%x:%x:%d.%d.%d.%d\x00\x00\x00:0\x00\x00src/network/proto.c\x00src/network/recvfrom.c\x00\x00src/network/recvmmsg.c\x00\x00src/network/recvmsg.c\x00\x00\x00src/network/res_msend.c\x00/etc/resolv.conf\x00\x00\x00\x00options\x00ndots:\x00\x00attempts:\x00\x00\x00timeout:\x00\x00\x00\x00nameserver\x00\x00src/network/resolvconf.c\x00\x00\x00\x00domain\x00\x00search\x00\x00src/network/sendmsg.c\x00\x00\x00src/network/sendto.c\x00\x00\x00\x00/etc/group\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00/etc/passwd\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00src/passwd/getpw_a.c\x00\x00\x00\x00/etc/tcb/%s/shadow\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00/etc/shadow\x00src/passwd/nscd_query.c\x00%s:%s:%d:\x00\x00\x00%s%s\x00\x00\x00\x00,\x00\x00\x00%s:%s:%d:%d:%s:%s:%s\n\x00\x00\x00%s:%s:%.*ld:%.*ld:%.*ld:%.*ld:%.*ld:%.*ld:%.*lu\n\x00\x00\x00\x00src/prng/srand48.c\x00\x00src/process/execl.c\x00src/process/execle.c\x00\x00\x00\x00src/process/execlp.c\x00\x00\x00\x00src/process/execvp.c\x00\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00src/process/waitid.c\x00\x00\x00\x00src/regex/glob.c\x00\x00\x00\x00\t\x00\x00\x00\r\x00\x00\x00\f\x00\x00\x00\a\x00\x00\x00\x1b\x00\x00\x00[[:alnum:]_]\x00\x00\x00\x00[^[:alnum:]_]\x00\x00\x00[[:space:]]\x00[^[:space:]]\x00\x00\x00\x00[[:digit:]]\x00[^[:digit:]]\x00\x00\x00\x00LINUX_2.6\x00\x00\x00__vdso_getcpu\x00\x00\x00src/search/lsearch.c\x00\x00\x00\x00src/select/poll.c\x00\x00\x00src/select/pselect.c\x00\x00\x00\x00%s: %s\n\x00%s\n\x00src/signal/siglongjmp.c\x00src/signal/sigsuspend.c\x00src/signal/sigtimedwait.c\x00\x00\x00rwa\x00src/stdio/fgetln.c\x00\x00src/stdio/fmemopen.c\x00\x00\x00\x00src/stdio/fwide.c\x00\x00\x00src/stdio/open_memstream.c\x00\x00src/stdio/open_wmemstream.c\x00src/stdio/popen.c\x00\x00\x00/tmp\x00\x00\x00\x00temp\x00\x00\x00\x00/tmp/tmpfile_XXXXXX\x00w+\x00\x00/tmp/tmpnam_XXXXXX\x00\x00src/stdio/ungetwc.c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00-+   0X0x\x00\x00\x00(null)\x00\x00-0X+0X 0X-0x+0x 0x\x00\x00inf\x00INF\x00NAN\x00src/stdio/vfscanf.c\x00%*s\x00%%%s%s%s%s%s*.*%c%c\x00#\x00\x00\x00+\x00\x00\x00-\x00\x00\x000\x00\x00\x00src/stdio/vfwscanf.c\x00\x00\x00\x00%.*e\x00\x00\x00\x00%.*f\x00\x00\x00\x00000000000000000\x00%.*g\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00@\x00\x00\x00\x00\x00\x00\x00src/string/explicit_bzero.c\x00XXXXXX\x00\x00src/termios/tcdrain.c\x00\x00\x00src/thread/__timedwait.c\x00\x00\x00\x00src/thread/__tls_get_addr.c\x00src/thread/__unmapself.c\x00\x00\x00\x00src/thread/mtx_init.c\x00\x00\x00src/thread/pthread_barrier_init.c\x00\x00\x00src/thread/pthread_cancel.c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00src/thread/pthread_create.c\x00src/thread/pthread_rwlockattr_init.c\x00\x00\x00\x00src/thread/pthread_setattr_default_np.c\x00src/thread/pthread_setname_np.c\x00/proc/self/task/%d/comm\x00/dev/shm/tmp-%d\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00src/thread/synccall.c\x00\x00\x00%.3s %.3s%3d %.2d:%.2d:%.2d %d\n\x00TZ\x00\x00/etc/localtime\x00\x00TZif\x00\x00\x00\x00\x01\x01\b\x05\x06\x01\x00\x00src/time/__year_to_secs.c\x00\x00\x00__vdso_clock_gettime\x00\x00\x00\x00src/time/clock_nanosleep.c\x00\x00DATEMSK\x00%m/%d/%y\x00\x00\x00\x00%Y-%m-%d\x00\x00\x00\x00%H:%M\x00\x00\x00%H:%M:%S\x00\x00\x00\x00+%lld\x00\x00\x00%+.2ld%.2d\x00\x00%\x00\x00\x00%lld\x00\x00\x00\x00%*lld\x00\x00\x00%0*lld\x00\x00src/time/strptime.c\x00src/time/timer_create.c\x00src/unistd/alarm.c\x00\x00src/unistd/fdatasync.c\x00\x00LOGNAME\x00src/unistd/pause.c\x00\x00src/unistd/preadv.c\x00src/unistd/pwritev.c\x00\x00\x00\x00src/unistd/readv.c\x00\x00src/unistd/ualarm.c\x00src/unistd/writev.c\x00")
